{
    "name": "scaleway",
    "displayName": "Scaleway",
    "description": "A Pulumi package for creating and managing Scaleway cloud resources.",
    "keywords": [
        "pulumi",
        "scaleway",
        "pulumiverse"
    ],
    "homepage": "https://www.scaleway.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`scaleway` Terraform Provider](https://github.com/scaleway/terraform-provider-scaleway).",
    "repository": "https://github.com/pulumiverse/pulumi-scaleway",
    "logoUrl": "https://raw.githubusercontent.com/pulumiverse/pulumi-scaleway/master/assets/scaleway.png",
    "pluginDownloadURL": "github://api.github.com/pulumiverse",
    "publisher": "pulumiverse",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Pulumiverse",
            "respectSchemaVersion": true
        },
        "go": {
            "importBasePath": "github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true,
            "respectSchemaVersion": true
        },
        "nodejs": {
            "packageName": "@pulumiverse/scaleway",
            "packageDescription": "A Pulumi package for creating and managing Scaleway cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/scaleway/terraform-provider-scaleway)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-scaleway` repo](https://github.com/pulumiverse/pulumi-scaleway/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-scaleway` repo](https://github.com/scaleway/terraform-provider-scaleway/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true,
            "respectSchemaVersion": true
        },
        "python": {
            "packageName": "pulumiverse_scaleway",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/scaleway/terraform-provider-scaleway)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-scaleway` repo](https://github.com/pulumiverse/pulumi-scaleway/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-scaleway` repo](https://github.com/scaleway/terraform-provider-scaleway/issues).",
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true,
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "accessKey": {
                "type": "string",
                "description": "The Scaleway access key.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_ACCESS_KEY"
                    ]
                }
            },
            "apiUrl": {
                "type": "string",
                "description": "The Scaleway API URL to use.\n"
            },
            "organizationId": {
                "type": "string",
                "description": "The Scaleway organization ID.\n"
            },
            "profile": {
                "type": "string",
                "description": "The Scaleway profile to use.\n"
            },
            "projectId": {
                "type": "string",
                "description": "The Scaleway project ID.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_PROJECT_ID"
                    ]
                }
            },
            "region": {
                "type": "string",
                "description": "The region you want to attach the resource to\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_REGION"
                    ]
                }
            },
            "secretKey": {
                "type": "string",
                "description": "The Scaleway secret Key.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_SECRET_KEY"
                    ]
                }
            },
            "zone": {
                "type": "string",
                "description": "The zone you want to attach the resource to\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_ZONE"
                    ]
                }
            }
        },
        "defaults": [
            "region",
            "zone"
        ]
    },
    "types": {
        "scaleway:index/BaremetalServerIp:BaremetalServerIp": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the IPv6.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the IPv6.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse of the IPv6.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The type of the IPv6.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "id",
                        "reverse",
                        "version"
                    ]
                }
            }
        },
        "scaleway:index/BaremetalServerIpv4:BaremetalServerIpv4": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the IPv6.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the IPv6.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse of the IPv6.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The type of the IPv6.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "id",
                        "reverse",
                        "version"
                    ]
                }
            }
        },
        "scaleway:index/BaremetalServerIpv6:BaremetalServerIpv6": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the IPv6.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the IPv6.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse of the IPv6.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The type of the IPv6.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "id",
                        "reverse",
                        "version"
                    ]
                }
            }
        },
        "scaleway:index/BaremetalServerOption:BaremetalServerOption": {
            "properties": {
                "expiresAt": {
                    "type": "string",
                    "description": "The auto expiration date for compatible options\n"
                },
                "id": {
                    "type": "string",
                    "description": "The id of the option to enable. Use [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-options-list-options) to find the available options IDs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "expiresAt",
                        "id",
                        "name"
                    ]
                }
            }
        },
        "scaleway:index/BaremetalServerPrivateNetwork:BaremetalServerPrivateNetwork": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the private network.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The id of the private network to attach.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The private network status.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the private network.\n"
                },
                "vlan": {
                    "type": "integer",
                    "description": "The VLAN ID associated to the private network.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createdAt",
                        "id",
                        "status",
                        "updatedAt",
                        "vlan"
                    ]
                }
            }
        },
        "scaleway:index/CockpitAlertManagerContactPoint:CockpitAlertManagerContactPoint": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "Email addresses for the alert receivers\n"
                }
            },
            "type": "object"
        },
        "scaleway:index/CockpitEndpoint:CockpitEndpoint": {
            "properties": {
                "alertmanagerUrl": {
                    "type": "string",
                    "description": "(Deprecated) URL for the [Alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager).\n"
                },
                "grafanaUrl": {
                    "type": "string",
                    "description": "(Deprecated) URL for Grafana.\n"
                },
                "logsUrl": {
                    "type": "string",
                    "description": "(Deprecated) URL for [logs](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#logs) to retrieve in the [Data sources tab](https://console.scaleway.com/cockpit/dataSource) of the Scaleway console.\n"
                },
                "metricsUrl": {
                    "type": "string",
                    "description": "(Deprecated) URL for [metrics](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#metric) to retrieve in the [Data sources tab](https://console.scaleway.com/cockpit/dataSource) of the Scaleway console.\n"
                },
                "tracesUrl": {
                    "type": "string",
                    "description": "(Deprecated) URL for [traces](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#traces) to retrieve in the [Data sources tab](https://console.scaleway.com/cockpit/dataSource) of the Scaleway console.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "alertmanagerUrl",
                        "grafanaUrl",
                        "logsUrl",
                        "metricsUrl",
                        "tracesUrl"
                    ]
                }
            }
        },
        "scaleway:index/CockpitPushUrl:CockpitPushUrl": {
            "properties": {
                "pushLogsUrl": {
                    "type": "string",
                    "description": "Push URL for logs (Grafana Loki)\n"
                },
                "pushMetricsUrl": {
                    "type": "string",
                    "description": "Push URL for metrics (Grafana Mimir)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "pushLogsUrl",
                        "pushMetricsUrl"
                    ]
                }
            }
        },
        "scaleway:index/CockpitTokenScopes:CockpitTokenScopes": {
            "properties": {
                "queryLogs": {
                    "type": "boolean",
                    "description": "Permission to query logs.\n",
                    "willReplaceOnChanges": true
                },
                "queryMetrics": {
                    "type": "boolean",
                    "description": "Permission to query metrics.\n",
                    "willReplaceOnChanges": true
                },
                "queryTraces": {
                    "type": "boolean",
                    "description": "Permission to query traces.\n",
                    "willReplaceOnChanges": true
                },
                "setupAlerts": {
                    "type": "boolean",
                    "description": "Permission to set up alerts.\n",
                    "willReplaceOnChanges": true
                },
                "setupLogsRules": {
                    "type": "boolean",
                    "description": "Permission to set up logs rules.\n",
                    "willReplaceOnChanges": true
                },
                "setupMetricsRules": {
                    "type": "boolean",
                    "description": "Permission to set up metrics rules.\n",
                    "willReplaceOnChanges": true
                },
                "writeLogs": {
                    "type": "boolean",
                    "description": "Permission to write logs.\n",
                    "willReplaceOnChanges": true
                },
                "writeMetrics": {
                    "type": "boolean",
                    "description": "Permission to write metrics.\n",
                    "willReplaceOnChanges": true
                },
                "writeTraces": {
                    "type": "boolean",
                    "description": "Permission to write traces.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "scaleway:index/ContainerTriggerNats:ContainerTriggerNats": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "unique identifier of the Messaging and Queuing NATS account.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "THe ID of the project that contains the Messaging and Queuing NATS account (defaults to provider `project_id`)\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "Region where the Messaging and Queuing NATS account is enabled (defaults to provider `region`)\n",
                    "willReplaceOnChanges": true
                },
                "subject": {
                    "type": "string",
                    "description": "The subject to listen to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "subject"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "projectId",
                        "region",
                        "subject"
                    ]
                }
            }
        },
        "scaleway:index/ContainerTriggerSqs:ContainerTriggerSqs": {
            "properties": {
                "namespaceId": {
                    "type": "string",
                    "description": "ID of the Messaging and Queuing namespace. This argument is deprecated.\n",
                    "deprecationMessage": "The 'namespace_id' field is deprecated and will be removed in the next major version. It is no longer necessary to specify it"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which SQS is enabled, (defaults to provider `project_id`)\n",
                    "willReplaceOnChanges": true
                },
                "queue": {
                    "type": "string",
                    "description": "The name of the SQS queue.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "Region where SQS is enabled (defaults to provider `region`)\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "queue"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "projectId",
                        "queue",
                        "region"
                    ]
                }
            }
        },
        "scaleway:index/DatabaseAclAclRule:DatabaseAclAclRule": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A text describing this rule. Default description: `IP allowed`\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The IP range to whitelist in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)\n"
                }
            },
            "type": "object",
            "required": [
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "ip"
                    ]
                }
            }
        },
        "scaleway:index/DatabaseInstanceLoadBalancer:DatabaseInstanceLoadBalancer": {
            "properties": {
                "endpointId": {
                    "type": "string",
                    "description": "The ID of the endpoint.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname of the endpoint.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IPv4 address on the network.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Database Instance.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port in the Private Network.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endpointId",
                        "hostname",
                        "ip",
                        "name",
                        "port"
                    ]
                }
            }
        },
        "scaleway:index/DatabaseInstanceLogsPolicy:DatabaseInstanceLogsPolicy": {
            "properties": {
                "maxAgeRetention": {
                    "type": "integer",
                    "description": "The max age (in days) of remote logs to keep on the Database Instance\n"
                },
                "totalDiskRetention": {
                    "type": "integer",
                    "description": "The max disk size of remote logs to keep on the Database Instance.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "maxAgeRetention",
                        "totalDiskRetention"
                    ]
                }
            }
        },
        "scaleway:index/DatabaseInstancePrivateNetwork:DatabaseInstancePrivateNetwork": {
            "properties": {
                "enableIpam": {
                    "type": "boolean",
                    "description": "Whether or not the private network endpoint should be configured with IPAM\n"
                },
                "endpointId": {
                    "type": "string",
                    "description": "The ID of the endpoint.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname of the endpoint.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IPv4 address on the network.\n"
                },
                "ipNet": {
                    "type": "string",
                    "description": "The IP with the given mask within the private subnet\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Database Instance.\n"
                },
                "pnId": {
                    "type": "string",
                    "description": "The private network ID\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port in the Private Network.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "pnId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableIpam",
                        "endpointId",
                        "hostname",
                        "ip",
                        "ipNet",
                        "name",
                        "pnId",
                        "port",
                        "zone"
                    ]
                }
            }
        },
        "scaleway:index/DatabaseInstanceReadReplica:DatabaseInstanceReadReplica": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "IPv4 address on the network.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Database Instance.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port in the Private Network.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "name",
                        "port"
                    ]
                }
            }
        },
        "scaleway:index/DatabaseReadReplicaDirectAccess:DatabaseReadReplicaDirectAccess": {
            "properties": {
                "endpointId": {
                    "type": "string",
                    "description": "The ID of the endpoint of the Read Replica.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname of the endpoint. Only one of IP and hostname may be set.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IPv4 address of the endpoint (IP address). Only one of IP and hostname may be set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the endpoint.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "TCP port of the endpoint.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endpointId",
                        "hostname",
                        "ip",
                        "name",
                        "port"
                    ]
                }
            }
        },
        "scaleway:index/DatabaseReadReplicaPrivateNetwork:DatabaseReadReplicaPrivateNetwork": {
            "properties": {
                "enableIpam": {
                    "type": "boolean",
                    "description": "If true, the IP network address within the private subnet is determined by the IP Address Management (IPAM) service.\n\n\u003e **Important:** One of `service_ip` or `enable_ipam=true` must be set.\n"
                },
                "endpointId": {
                    "type": "string",
                    "description": "The ID of the endpoint of the Read Replica.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname of the endpoint. Only one of IP and hostname may be set.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IPv4 address of the endpoint (IP address). Only one of IP and hostname may be set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the endpoint.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "TCP port of the endpoint.\n"
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "UUID of the Private Netork to be connected to the Read Replica.\n"
                },
                "serviceIp": {
                    "type": "string",
                    "description": "The IP network address within the private subnet. This must be an IPv4 address with a CIDR notation. If not set, The IP network address within the private subnet is determined by the IP Address Management (IPAM) service.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "Private network zone\n"
                }
            },
            "type": "object",
            "required": [
                "privateNetworkId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableIpam",
                        "endpointId",
                        "hostname",
                        "ip",
                        "name",
                        "port",
                        "privateNetworkId",
                        "serviceIp",
                        "zone"
                    ]
                }
            }
        },
        "scaleway:index/DocumentdbPrivateNetworkEndpointPrivateNetwork:DocumentdbPrivateNetworkEndpointPrivateNetwork": {
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": "The hostname of your endpoint.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The private network ID.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The IP of your private network service.\n"
                },
                "ipNet": {
                    "type": "string",
                    "description": "The IP network address within the private subnet. This must be an IPv4 address with a CIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM) service if not set.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of your private service.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of your private service.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone of your endpoint.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hostname",
                        "id",
                        "ip",
                        "ipNet",
                        "name",
                        "port",
                        "zone"
                    ]
                }
            }
        },
        "scaleway:index/DocumentdbReadReplicaDirectAccess:DocumentdbReadReplicaDirectAccess": {
            "properties": {
                "endpointId": {
                    "type": "string",
                    "description": "The ID of the endpoint of the read replica.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname of the endpoint. Only one of ip and hostname may be set.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the endpoint.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "TCP port of the endpoint.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endpointId",
                        "hostname",
                        "ip",
                        "name",
                        "port"
                    ]
                }
            }
        },
        "scaleway:index/DocumentdbReadReplicaPrivateNetwork:DocumentdbReadReplicaPrivateNetwork": {
            "properties": {
                "endpointId": {
                    "type": "string",
                    "description": "The ID of the endpoint of the read replica.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname of the endpoint. Only one of ip and hostname may be set.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the endpoint.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "TCP port of the endpoint.\n"
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "UUID of the private network to be connected to the read replica.\n"
                },
                "serviceIp": {
                    "type": "string",
                    "description": "The IP network address within the private subnet. This must be an IPv4 address with a\nCIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)\nservice if not set.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "Private network zone\n"
                }
            },
            "type": "object",
            "required": [
                "privateNetworkId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endpointId",
                        "hostname",
                        "ip",
                        "name",
                        "port",
                        "privateNetworkId",
                        "serviceIp",
                        "zone"
                    ]
                }
            }
        },
        "scaleway:index/DomainRecordGeoIp:DomainRecordGeoIp": {
            "properties": {
                "matches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DomainRecordGeoIpMatch:DomainRecordGeoIpMatch"
                    },
                    "description": "The list of matches\n"
                }
            },
            "type": "object",
            "required": [
                "matches"
            ]
        },
        "scaleway:index/DomainRecordGeoIpMatch:DomainRecordGeoIpMatch": {
            "properties": {
                "continents": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of continents (eg: EU for Europe, NA for North America, AS for Asia...). List of all continents code: https://api.scaleway.com/domain-private/v2beta1/continents\n"
                },
                "countries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of countries (eg: FR for France, US for the United States, GB for Great Britain...). List of all countries code: https://api.scaleway.com/domain-private/v2beta1/countries\n"
                },
                "data": {
                    "type": "string",
                    "description": "The content of the record (an IPv4 for an `A` record, a string for a `TXT` record, etc.).\n"
                }
            },
            "type": "object",
            "required": [
                "data"
            ]
        },
        "scaleway:index/DomainRecordHttpService:DomainRecordHttpService": {
            "properties": {
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IPs to check\n"
                },
                "mustContain": {
                    "type": "string",
                    "description": "Text to search\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "Strategy to return an IP from the IPs list\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL to match the must_contain text to validate an IP\n"
                },
                "userAgent": {
                    "type": "string",
                    "description": "User-agent used when checking the URL\n"
                }
            },
            "type": "object",
            "required": [
                "ips",
                "mustContain",
                "strategy",
                "url"
            ]
        },
        "scaleway:index/DomainRecordView:DomainRecordView": {
            "properties": {
                "data": {
                    "type": "string",
                    "description": "The content of the record (an IPv4 for an `A` record, a string for a `TXT` record, etc.).\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "The subnet of the view\n"
                }
            },
            "type": "object",
            "required": [
                "data",
                "subnet"
            ]
        },
        "scaleway:index/DomainRecordWeighted:DomainRecordWeighted": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "The weighted IP\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight of the IP\n"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "weight"
            ]
        },
        "scaleway:index/FunctionTriggerNats:FunctionTriggerNats": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "unique identifier of the Messaging and Queuing NATS account.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "THe ID of the project that contains the Messaging and Queuing NATS account (defaults to provider `project_id`)\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "Region where the Messaging and Queuing NATS account is enabled (defaults to provider `region`)\n",
                    "willReplaceOnChanges": true
                },
                "subject": {
                    "type": "string",
                    "description": "The subject to listen to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "subject"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "projectId",
                        "region",
                        "subject"
                    ]
                }
            }
        },
        "scaleway:index/FunctionTriggerSqs:FunctionTriggerSqs": {
            "properties": {
                "namespaceId": {
                    "type": "string",
                    "description": "ID of the Messaging and Queuing namespace. This argument is deprecated.\n",
                    "deprecationMessage": "The 'namespace_id' field is deprecated and will be removed in the next major version. It is no longer necessary to specify it"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which SQS is enabled, (defaults to provider `project_id`)\n",
                    "willReplaceOnChanges": true
                },
                "queue": {
                    "type": "string",
                    "description": "The name of the SQS queue.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "Region where SQS is enabled (defaults to provider `region`)\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "queue"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "projectId",
                        "queue",
                        "region"
                    ]
                }
            }
        },
        "scaleway:index/IamPolicyRule:IamPolicyRule": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "The condition of the IAM policy.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "ID of organization scoped to the rule, this can be used to create a rule for all projects in an organization.\n"
                },
                "permissionSetNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Names of permission sets bind to the rule.\n\n**_TIP:_** You can use the Scaleway CLI to list the permissions details. e.g:\n\n```shell\nscw IAM permission-set list\n```\n"
                },
                "projectIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of project IDs scoped to the rule.\n\n\u003e **Important** One `organization_id` or `project_ids` must be set per rule.\n"
                }
            },
            "type": "object",
            "required": [
                "permissionSetNames"
            ]
        },
        "scaleway:index/InstanceImageAdditionalVolume:InstanceImageAdditionalVolume": {
            "properties": {
                "creationDate": {
                    "type": "string",
                    "description": "Date of the volume creation.\n"
                },
                "exportUri": {
                    "type": "string",
                    "description": "The export URI of the volume.\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of the server containing the volume.\n"
                },
                "modificationDate": {
                    "type": "string",
                    "description": "Date of volume latest update.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the image. If not provided it will be randomly generated.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The organization ID the volume is associated with.\n"
                },
                "project": {
                    "type": "string",
                    "description": "ID of the project the volume is associated with\n"
                },
                "server": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Description of the server containing the volume (in case the image is a backup from a server).\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the volume.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the volume.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the image.\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "The type of volume, possible values are `l_ssd` and `b_ssd`.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone in which the image should be created.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "creationDate",
                        "exportUri",
                        "id",
                        "modificationDate",
                        "name",
                        "organization",
                        "project",
                        "server",
                        "size",
                        "state",
                        "tags",
                        "volumeType",
                        "zone"
                    ]
                }
            }
        },
        "scaleway:index/InstanceSecurityGroupInboundRule:InstanceSecurityGroupInboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action to take when rule match. Possible values are: `accept` or `drop`.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The ip this rule apply to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n",
                    "deprecationMessage": "Ip address is deprecated. Please use ip_range instead"
                },
                "ipRange": {
                    "type": "string",
                    "description": "The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port this rule applies to. If no `port` nor `port_range` are specified, the rule will apply to all port. Only one of `port` and `port_range` should be specified.\n"
                },
                "portRange": {
                    "type": "string",
                    "description": "Computed port range for this rule (e.g: 1-1024, 22-22)\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.\n"
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "scaleway:index/InstanceSecurityGroupOutboundRule:InstanceSecurityGroupOutboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Action when rule match request (drop or accept)\n"
                },
                "ip": {
                    "type": "string",
                    "description": "Ip address for this rule (e.g: 1.1.1.1). Only one of ip or ip_range should be provided\n",
                    "deprecationMessage": "Ip address is deprecated. Please use ip_range instead"
                },
                "ipRange": {
                    "type": "string",
                    "description": "Ip range for this rule (e.g: 192.168.1.0/24). Only one of ip or ip_range should be provided\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Network port for this rule\n"
                },
                "portRange": {
                    "type": "string",
                    "description": "Computed port range for this rule (e.g: 1-1024, 22-22)\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol for this rule (TCP, UDP, ICMP or ANY)\n"
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "scaleway:index/InstanceSecurityGroupRulesInboundRule:InstanceSecurityGroupRulesInboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action to take when rule match. Possible values are: `accept` or `drop`.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The ip this rule apply to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n",
                    "deprecationMessage": "Ip address is deprecated. Please use ip_range instead"
                },
                "ipRange": {
                    "type": "string",
                    "description": "The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ip_range` are specified, rule will apply to all ip. Only one of `ip` and `ip_range` should be specified.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port this rule apply to. If no port is specified, rule will apply to all port.\n"
                },
                "portRange": {
                    "type": "string",
                    "description": "Computed port range for this rule (e.g: 1-1024, 22-22)\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.\n"
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "scaleway:index/InstanceSecurityGroupRulesOutboundRule:InstanceSecurityGroupRulesOutboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Action when rule match request (drop or accept)\n"
                },
                "ip": {
                    "type": "string",
                    "description": "Ip address for this rule (e.g: 1.1.1.1). Only one of ip or ip_range should be provided\n",
                    "deprecationMessage": "Ip address is deprecated. Please use ip_range instead"
                },
                "ipRange": {
                    "type": "string",
                    "description": "Ip range for this rule (e.g: 192.168.1.0/24). Only one of ip or ip_range should be provided\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Network port for this rule\n"
                },
                "portRange": {
                    "type": "string",
                    "description": "Computed port range for this rule (e.g: 1-1024, 22-22)\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol for this rule (TCP, UDP, ICMP or ANY)\n"
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "scaleway:index/InstanceServerPrivateNetwork:InstanceServerPrivateNetwork": {
            "properties": {
                "macAddress": {
                    "type": "string",
                    "description": "MAC address of the NIC\n"
                },
                "pnId": {
                    "type": "string",
                    "description": "The Private Network ID\n"
                },
                "pnicId": {
                    "type": "string",
                    "description": "The ID of the NIC\n"
                },
                "status": {
                    "type": "string",
                    "description": "The private NIC state\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "pnId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "macAddress",
                        "pnId",
                        "pnicId",
                        "status",
                        "zone"
                    ]
                }
            }
        },
        "scaleway:index/InstanceServerPublicIp:InstanceServerPublicIp": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the IP\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the IP\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "id"
                    ]
                }
            }
        },
        "scaleway:index/InstanceServerRootVolume:InstanceServerRootVolume": {
            "properties": {
                "boot": {
                    "type": "boolean",
                    "description": "Set the volume where the boot the server\n"
                },
                "deleteOnTermination": {
                    "type": "boolean",
                    "description": "Forces deletion of the root volume on instance termination.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n"
                },
                "sbsIops": {
                    "type": "integer",
                    "description": "Choose IOPS of your sbs volume, has to be used with `sbs_volume` for root volume type.\n\n\u003e **Important:** Updates to `root_volume.size_in_gb` will be ignored after the creation of the server.\n"
                },
                "sizeInGb": {
                    "type": "integer",
                    "description": "Size of the root volume in gigabytes.\nTo find the right size use [this endpoint](https://www.scaleway.com/en/developers/api/instance/#path-instances-list-all-instances) and\ncheck the `volumes_constraint.{min|max}_size` (in bytes) for your `commercial_type`.\nUpdates to this field will recreate a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "volumeId": {
                    "type": "string",
                    "description": "The volume ID of the root volume of the server, allows you to create server with an existing volume. If empty, will be computed to a created volume ID.\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "Volume type of root volume, can be `b_ssd`, `l_ssd` or `sbs_volume`, default value depends on server type\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "sbsIops",
                        "sizeInGb",
                        "volumeId",
                        "volumeType"
                    ]
                }
            }
        },
        "scaleway:index/InstanceSnapshotImport:InstanceSnapshotImport": {
            "properties": {
                "bucket": {
                    "type": "string",
                    "description": "Bucket name containing [qcow2](https://en.wikipedia.org/wiki/Qcow) to import\n",
                    "willReplaceOnChanges": true
                },
                "key": {
                    "type": "string",
                    "description": "Key of the object to import\n\n\u003e **Note:** The type `unified` could be instantiated on both `l_ssd` and `b_ssd` volumes.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "bucket",
                "key"
            ]
        },
        "scaleway:index/IotDeviceCertificate:IotDeviceCertificate": {
            "properties": {
                "crt": {
                    "type": "string",
                    "description": "X509 PEM encoded certificate of the device\n",
                    "secret": true
                },
                "key": {
                    "type": "string",
                    "description": "The private key of the device, in case it is generated by Scaleway.\n",
                    "secret": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "crt",
                        "key"
                    ]
                }
            }
        },
        "scaleway:index/IotDeviceMessageFilters:IotDeviceMessageFilters": {
            "properties": {
                "publish": {
                    "$ref": "#/types/scaleway:index/IotDeviceMessageFiltersPublish:IotDeviceMessageFiltersPublish",
                    "description": "Rules used to restrict topics the device can publish to.\n"
                },
                "subscribe": {
                    "$ref": "#/types/scaleway:index/IotDeviceMessageFiltersSubscribe:IotDeviceMessageFiltersSubscribe",
                    "description": "Rules used to restrict topics the device can subscribe to.\n"
                }
            },
            "type": "object"
        },
        "scaleway:index/IotDeviceMessageFiltersPublish:IotDeviceMessageFiltersPublish": {
            "properties": {
                "policy": {
                    "type": "string",
                    "description": "Filtering policy (eg `accept` or `reject`)\n"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of topics to match (eg `foo/bar/+/baz/#`)\n"
                }
            },
            "type": "object"
        },
        "scaleway:index/IotDeviceMessageFiltersSubscribe:IotDeviceMessageFiltersSubscribe": {
            "properties": {
                "policy": {
                    "type": "string",
                    "description": "Same as publish rules.\n"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Same as publish rules.\n\n- `certificate.crt` - (Optional) The certificate of the device, either generated by Scaleway or provided.\n\n\u003e **Important:** Updates to `certificate.crt` will disconnect connected devices and the previous certificate will be deleted and won't be recoverable.\n"
                }
            },
            "type": "object"
        },
        "scaleway:index/IotRouteDatabase:IotRouteDatabase": {
            "properties": {
                "dbname": {
                    "type": "string",
                    "description": "The database name (e.g. `measurements`).\n",
                    "willReplaceOnChanges": true
                },
                "host": {
                    "type": "string",
                    "description": "The database hostname. Can be an IP or a FQDN.\n",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "description": "The database password.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "port": {
                    "type": "integer",
                    "description": "The database port (e.g. `5432`)\n",
                    "willReplaceOnChanges": true
                },
                "query": {
                    "type": "string",
                    "description": "The SQL query that will be executed when receiving a message ($TOPIC and $PAYLOAD variables are available, see documentation, e.g. `INSERT INTO mytable(date, topic, value) VALUES (NOW(), $TOPIC, $PAYLOAD)`).\n",
                    "willReplaceOnChanges": true
                },
                "username": {
                    "type": "string",
                    "description": "The database username.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "dbname",
                "host",
                "password",
                "port",
                "query",
                "username"
            ]
        },
        "scaleway:index/IotRouteRest:IotRouteRest": {
            "properties": {
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "a map of the extra headers to send with the HTTP call (e.g. `X-Header = Value`).\n",
                    "willReplaceOnChanges": true
                },
                "uri": {
                    "type": "string",
                    "description": "The URI of the Rest endpoint (e.g. `https://internal.mycompany.com/ingest/mqttdata`).\n",
                    "willReplaceOnChanges": true
                },
                "verb": {
                    "type": "string",
                    "description": "The HTTP Verb used to call Rest URI (e.g. `post`).\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "headers",
                "uri",
                "verb"
            ]
        },
        "scaleway:index/IotRouteS3:IotRouteS3": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "description": "The name of the S3 route's destination bucket (e.g. `my-object-storage`).\n",
                    "willReplaceOnChanges": true
                },
                "bucketRegion": {
                    "type": "string",
                    "description": "The region of the S3 route's destination bucket (e.g. `fr-par`).\n",
                    "willReplaceOnChanges": true
                },
                "objectPrefix": {
                    "type": "string",
                    "description": "The string to prefix object names with (e.g. `mykeyprefix-`).\n",
                    "willReplaceOnChanges": true
                },
                "strategy": {
                    "type": "string",
                    "description": "How the S3 route's objects will be created (e.g. `per_topic`). See [documentation](https://www.scaleway.com/en/docs/scaleway-iothub-route/#-Messages-Store-Strategies) for behaviour details.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "bucketName",
                "bucketRegion",
                "strategy"
            ]
        },
        "scaleway:index/IpamIpResource:IpamIpResource": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource that the IP is attached to.\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "The MAC address of the resource the IP is attached to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource the IP is attached to.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of resource the IP is attached to.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "macAddress",
                        "name",
                        "type"
                    ]
                }
            }
        },
        "scaleway:index/IpamIpReverse:IpamIpReverse": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IP corresponding to the hostname\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The reverse domain name.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "hostname"
                    ]
                }
            }
        },
        "scaleway:index/IpamIpSource:IpamIpSource": {
            "properties": {
                "privateNetworkId": {
                    "type": "string",
                    "description": "The Private Network of the IP (if the IP is a private IP).\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The Private Network subnet of the IP (if the IP is a private IP).\n"
                },
                "zonal": {
                    "type": "string",
                    "description": "The zone of the IP (if the IP is public and zoned, rather than private and/or regional)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "privateNetworkId",
                        "subnetId",
                        "zonal"
                    ]
                }
            }
        },
        "scaleway:index/JobDefinitionCron:JobDefinitionCron": {
            "properties": {
                "schedule": {
                    "type": "string",
                    "description": "Cron format string.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The timezone, must be a canonical TZ identifier as found in this [list](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).\n"
                }
            },
            "type": "object",
            "required": [
                "schedule",
                "timezone"
            ]
        },
        "scaleway:index/KubernetesClusterAutoUpgrade:KubernetesClusterAutoUpgrade": {
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Set to `true` to enable Kubernetes patch version auto upgrades.\n\u003e **Important:** When enabling auto upgrades, the `version` field take a minor version like x.y (ie 1.18).\n"
                },
                "maintenanceWindowDay": {
                    "type": "string",
                    "description": "The day of the auto upgrade maintenance window (`monday` to `sunday`, or `any`).\n"
                },
                "maintenanceWindowStartHour": {
                    "type": "integer",
                    "description": "The start hour (UTC) of the 2-hour auto upgrade maintenance window (0 to 23).\n"
                }
            },
            "type": "object",
            "required": [
                "enable",
                "maintenanceWindowDay",
                "maintenanceWindowStartHour"
            ]
        },
        "scaleway:index/KubernetesClusterAutoscalerConfig:KubernetesClusterAutoscalerConfig": {
            "properties": {
                "balanceSimilarNodeGroups": {
                    "type": "boolean",
                    "description": "Detect similar node groups and balance the number of nodes between them.\n"
                },
                "disableScaleDown": {
                    "type": "boolean",
                    "description": "Disables the scale down feature of the autoscaler.\n"
                },
                "estimator": {
                    "type": "string",
                    "description": "Type of resource estimator to be used in scale up.\n"
                },
                "expander": {
                    "type": "string",
                    "description": "Type of node group expander to be used in scale up.\n"
                },
                "expendablePodsPriorityCutoff": {
                    "type": "integer",
                    "description": "Pods with priority below cutoff will be expendable. They can be killed without any consideration during scale down and they don't cause scale up. Pods with null priority (PodPriority disabled) are non expendable.\n"
                },
                "ignoreDaemonsetsUtilization": {
                    "type": "boolean",
                    "description": "Ignore DaemonSet pods when calculating resource utilization for scaling down.\n"
                },
                "maxGracefulTerminationSec": {
                    "type": "integer",
                    "description": "Maximum number of seconds the cluster autoscaler waits for pod termination when trying to scale down a node\n"
                },
                "scaleDownDelayAfterAdd": {
                    "type": "string",
                    "description": "How long after scale up that scale down evaluation resumes.\n"
                },
                "scaleDownUnneededTime": {
                    "type": "string",
                    "description": "How long a node should be unneeded before it is eligible for scale down.\n"
                },
                "scaleDownUtilizationThreshold": {
                    "type": "number",
                    "description": "Node utilization level, defined as sum of requested resources divided by capacity, below which a node can be considered for scale down\n"
                }
            },
            "type": "object"
        },
        "scaleway:index/KubernetesClusterKubeconfig:KubernetesClusterKubeconfig": {
            "properties": {
                "clusterCaCertificate": {
                    "type": "string",
                    "description": "The CA certificate of the Kubernetes API server.\n"
                },
                "configFile": {
                    "type": "string",
                    "description": "The raw kubeconfig file.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The URL of the Kubernetes API server.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token to connect to the Kubernetes API server.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterCaCertificate",
                        "configFile",
                        "host",
                        "token"
                    ]
                }
            }
        },
        "scaleway:index/KubernetesClusterOpenIdConnectConfig:KubernetesClusterOpenIdConnectConfig": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "A client id that all tokens must be issued for\n"
                },
                "groupsClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "JWT claim to use as the user's group\n"
                },
                "groupsPrefix": {
                    "type": "string",
                    "description": "Prefix prepended to group claims\n"
                },
                "issuerUrl": {
                    "type": "string",
                    "description": "URL of the provider which allows the API server to discover public signing keys\n"
                },
                "requiredClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Multiple key=value pairs that describes a required claim in the ID Token\n"
                },
                "usernameClaim": {
                    "type": "string",
                    "description": "JWT claim to use as the user name\n"
                },
                "usernamePrefix": {
                    "type": "string",
                    "description": "Prefix prepended to username\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "issuerUrl"
            ]
        },
        "scaleway:index/KubernetesNodePoolNode:KubernetesNodePoolNode": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name for the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "publicIp": {
                    "type": "string",
                    "description": "The public IPv4. (Deprecated, Please use the official Kubernetes provider and the kubernetes_nodes data source)\n",
                    "deprecationMessage": "Please use the official Kubernetes provider and the kubernetes_nodes data source"
                },
                "publicIpV6": {
                    "type": "string",
                    "description": "The public IPv6. (Deprecated, Please use the official Kubernetes provider and the kubernetes_nodes data source)\n",
                    "deprecationMessage": "Please use the official Kubernetes provider and the kubernetes_nodes data source"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the node.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "publicIp",
                        "publicIpV6",
                        "status"
                    ]
                }
            }
        },
        "scaleway:index/KubernetesNodePoolUpgradePolicy:KubernetesNodePoolUpgradePolicy": {
            "properties": {
                "maxSurge": {
                    "type": "integer",
                    "description": "The maximum number of nodes to be created during the upgrade\n"
                },
                "maxUnavailable": {
                    "type": "integer",
                    "description": "The maximum number of nodes that can be not ready at the same time\n"
                }
            },
            "type": "object"
        },
        "scaleway:index/LoadbalancerAclAction:LoadbalancerAclAction": {
            "properties": {
                "redirects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/LoadbalancerAclActionRedirect:LoadbalancerAclActionRedirect"
                    },
                    "description": "Redirect parameters when using an ACL with `redirect` action.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The action type. Possible values are: `allow` or `deny` or `redirect`.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "scaleway:index/LoadbalancerAclActionRedirect:LoadbalancerAclActionRedirect": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "The HTTP redirect code to use. Valid values are `301`, `302`, `303`, `307` and `308`.\n"
                },
                "target": {
                    "type": "string",
                    "description": "An URL can be used in case of a location redirect (e.g. `https://scaleway.com` will redirect to this same URL). A scheme name (e.g. `https`, `http`, `ftp`, `git`) will replace the request's original scheme.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The redirect type. Possible values are: `location` or `scheme`.\n"
                }
            },
            "type": "object"
        },
        "scaleway:index/LoadbalancerAclMatch:LoadbalancerAclMatch": {
            "properties": {
                "httpFilter": {
                    "type": "string",
                    "description": "The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.\nIt extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).\nPossible values are: `acl_http_filter_none`, `path_begin`, `path_end`, `http_header_match` or `regex`.\n"
                },
                "httpFilterOption": {
                    "type": "string",
                    "description": "If you have `http_filter` at `http_header_match`, you can use this field to filter on the HTTP header's value.\n"
                },
                "httpFilterValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of possible values to match for the given HTTP filter.\nKeep in mind that in the case of `http_header_match` the HTTP header field name is case insensitive.\n"
                },
                "invert": {
                    "type": "boolean",
                    "description": "If set to `true`, the condition will be of type \"unless\".\n"
                },
                "ipSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPs, or CIDR v4/v6 addresses of the session client, to match.\n"
                }
            },
            "type": "object"
        },
        "scaleway:index/LoadbalancerBackendHealthCheckHttp:LoadbalancerBackendHealthCheckHttp": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "The expected HTTP status code\n"
                },
                "hostHeader": {
                    "type": "string",
                    "description": "The HTTP host header to use for HC requests\n"
                },
                "method": {
                    "type": "string",
                    "description": "The HTTP method to use for HC requests\n"
                },
                "uri": {
                    "type": "string",
                    "description": "The HTTP endpoint URL to call for HC requests\n"
                }
            },
            "type": "object",
            "required": [
                "uri"
            ]
        },
        "scaleway:index/LoadbalancerBackendHealthCheckHttps:LoadbalancerBackendHealthCheckHttps": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "The expected HTTP status code\n"
                },
                "hostHeader": {
                    "type": "string",
                    "description": "The HTTP host header to use for HC requests\n"
                },
                "method": {
                    "type": "string",
                    "description": "The HTTP method to use for HC requests\n"
                },
                "sni": {
                    "type": "string",
                    "description": "The SNI to use for HC requests over SSL\n"
                },
                "uri": {
                    "type": "string",
                    "description": "The HTTPS endpoint URL to call for HC requests\n"
                }
            },
            "type": "object",
            "required": [
                "uri"
            ]
        },
        "scaleway:index/LoadbalancerBackendHealthCheckTcp:LoadbalancerBackendHealthCheckTcp": {
            "type": "object"
        },
        "scaleway:index/LoadbalancerCertificateCustomCertificate:LoadbalancerCertificateCustomCertificate": {
            "properties": {
                "certificateChain": {
                    "type": "string",
                    "description": "The full PEM-formatted certificate chain\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "certificateChain"
            ]
        },
        "scaleway:index/LoadbalancerCertificateLetsencrypt:LoadbalancerCertificateLetsencrypt": {
            "properties": {
                "commonName": {
                    "type": "string",
                    "description": "Main domain of the certificate\n",
                    "willReplaceOnChanges": true
                },
                "subjectAlternativeNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The alternative domain names of the certificate\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "commonName"
            ]
        },
        "scaleway:index/LoadbalancerFrontendAcl:LoadbalancerFrontendAcl": {
            "properties": {
                "action": {
                    "$ref": "#/types/scaleway:index/LoadbalancerFrontendAclAction:LoadbalancerFrontendAclAction",
                    "description": "Action to undertake when an ACL filter matches.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "IsDate and time of ACL's creation (RFC 3339 format)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the ACL\n"
                },
                "match": {
                    "$ref": "#/types/scaleway:index/LoadbalancerFrontendAclMatch:LoadbalancerFrontendAclMatch",
                    "description": "The ACL match rule. At least `ip_subnet` or `http_filter` and `http_filter_value` are required.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ACL name. If not provided it will be randomly generated.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "IsDate and time of ACL's update (RFC 3339 format)\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "match"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "createdAt",
                        "match",
                        "name",
                        "updatedAt"
                    ]
                }
            }
        },
        "scaleway:index/LoadbalancerFrontendAclAction:LoadbalancerFrontendAclAction": {
            "properties": {
                "redirects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/LoadbalancerFrontendAclActionRedirect:LoadbalancerFrontendAclActionRedirect"
                    },
                    "description": "Redirect parameters when using an ACL with `redirect` action.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The action type. Possible values are: `allow` or `deny` or `redirect`.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "scaleway:index/LoadbalancerFrontendAclActionRedirect:LoadbalancerFrontendAclActionRedirect": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "The HTTP redirect code to use. Valid values are `301`, `302`, `303`, `307` and `308`.\n"
                },
                "target": {
                    "type": "string",
                    "description": "A URL can be used in case of a location redirect (e.g. `https://scaleway.com` will redirect to this same URL). A scheme name (e.g. `https`, `http`, `ftp`, `git`) will replace the request's original scheme.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The redirect type. Possible values are: `location` or `scheme`.\n"
                }
            },
            "type": "object"
        },
        "scaleway:index/LoadbalancerFrontendAclMatch:LoadbalancerFrontendAclMatch": {
            "properties": {
                "httpFilter": {
                    "type": "string",
                    "description": "The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.\nIt extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).\nPossible values are: `acl_http_filter_none`, `path_begin`, `path_end`, `http_header_match` or `regex`.\n"
                },
                "httpFilterOption": {
                    "type": "string",
                    "description": "If you have `http_filter` at `http_header_match`, you can use this field to filter on the HTTP header's value.\n"
                },
                "httpFilterValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of possible values to match for the given HTTP filter.\nKeep in mind that in the case of `http_header_match` the HTTP header field name is case insensitive.\n"
                },
                "invert": {
                    "type": "boolean",
                    "description": "If set to `true`, the condition will be of type \"unless\".\n"
                },
                "ipSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPs, or CIDR v4/v6 addresses of the session client, to match.\n"
                }
            },
            "type": "object"
        },
        "scaleway:index/LoadbalancerPrivateNetwork:LoadbalancerPrivateNetwork": {
            "properties": {
                "dhcpConfig": {
                    "type": "boolean",
                    "description": "(Deprecated) Please use `ipam_ids`. Set to `true` if you want to let DHCP assign IP addresses. See below.\n",
                    "deprecationMessage": "dhcp_config field is deprecated, please use `private_network_id` or `ipam_ids` instead"
                },
                "ipamIds": {
                    "type": "string",
                    "description": "(Optional) IPAM ID of a pre-reserved IP address to assign to the Load Balancer on this Private Network.\n"
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "(Required) The ID of the Private Network to attach to.\n"
                },
                "staticConfig": {
                    "type": "string",
                    "description": "(Deprecated) Please use `ipam_ids`. Define a local ip address of your choice for the load balancer instance.\n",
                    "deprecationMessage": "static_config field is deprecated, please use `private_network_id` or `ipam_ids` instead"
                },
                "status": {
                    "type": "string",
                    "description": "The status of private network connection\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone of the Load Balancer.\n"
                }
            },
            "type": "object",
            "required": [
                "privateNetworkId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dhcpConfig",
                        "ipamIds",
                        "privateNetworkId",
                        "status",
                        "zone"
                    ]
                }
            }
        },
        "scaleway:index/MnqSnsCredentialsPermissions:MnqSnsCredentialsPermissions": {
            "properties": {
                "canManage": {
                    "type": "boolean",
                    "description": ". Defines whether the user can manage the associated resource(s).\n"
                },
                "canPublish": {
                    "type": "boolean",
                    "description": ". Defines whether the user can publish messages to the service.\n"
                },
                "canReceive": {
                    "type": "boolean",
                    "description": ". Defines whether the user can receive messages from the service.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "canManage",
                        "canPublish",
                        "canReceive"
                    ]
                }
            }
        },
        "scaleway:index/MnqSqsCredentialsPermissions:MnqSqsCredentialsPermissions": {
            "properties": {
                "canManage": {
                    "type": "boolean",
                    "description": ". Defines whether the user can manage the associated resource(s).\n"
                },
                "canPublish": {
                    "type": "boolean",
                    "description": ". Defines whether the user can publish messages to the service.\n"
                },
                "canReceive": {
                    "type": "boolean",
                    "description": ". Defines whether the user can receive messages from the service.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "canManage",
                        "canPublish",
                        "canReceive"
                    ]
                }
            }
        },
        "scaleway:index/ObjectBucketAclAccessControlPolicy:ObjectBucketAclAccessControlPolicy": {
            "properties": {
                "grants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/ObjectBucketAclAccessControlPolicyGrant:ObjectBucketAclAccessControlPolicyGrant"
                    }
                },
                "owner": {
                    "$ref": "#/types/scaleway:index/ObjectBucketAclAccessControlPolicyOwner:ObjectBucketAclAccessControlPolicyOwner",
                    "description": "Configuration block of the bucket project owner's display organization ID.\n"
                }
            },
            "type": "object",
            "required": [
                "owner"
            ]
        },
        "scaleway:index/ObjectBucketAclAccessControlPolicyGrant:ObjectBucketAclAccessControlPolicyGrant": {
            "properties": {
                "grantee": {
                    "$ref": "#/types/scaleway:index/ObjectBucketAclAccessControlPolicyGrantGrantee:ObjectBucketAclAccessControlPolicyGrantGrantee",
                    "description": "Configuration block for the project being granted permissions.\n"
                },
                "permission": {
                    "type": "string",
                    "description": "Logging permissions assigned to the grantee for the bucket.\n"
                }
            },
            "type": "object",
            "required": [
                "permission"
            ]
        },
        "scaleway:index/ObjectBucketAclAccessControlPolicyGrantGrantee:ObjectBucketAclAccessControlPolicyGrantGrantee": {
            "properties": {
                "displayName": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The `region`, `bucket` and `acl` separated by (`/`).\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of grantee. Valid values: `CanonicalUser`\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "displayName",
                        "id",
                        "type"
                    ]
                }
            }
        },
        "scaleway:index/ObjectBucketAclAccessControlPolicyOwner:ObjectBucketAclAccessControlPolicyOwner": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "The project ID of the grantee.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The `region`, `bucket` and `acl` separated by (`/`).\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "displayName",
                        "id"
                    ]
                }
            }
        },
        "scaleway:index/ObjectBucketCorsRule:ObjectBucketCorsRule": {
            "properties": {
                "allowedHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies which headers are allowed.\n"
                },
                "allowedMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies which methods are allowed (`GET`, `PUT`, `POST`, `DELETE` or `HEAD`).\n"
                },
                "allowedOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies which origins are allowed.\n"
                },
                "exposeHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies header exposure in the response.\n"
                },
                "maxAgeSeconds": {
                    "type": "integer",
                    "description": "Specifies time in seconds that the browser can cache the response for a preflight request.\n"
                }
            },
            "type": "object",
            "required": [
                "allowedMethods",
                "allowedOrigins"
            ]
        },
        "scaleway:index/ObjectBucketLifecycleRule:ObjectBucketLifecycleRule": {
            "properties": {
                "abortIncompleteMultipartUploadDays": {
                    "type": "integer",
                    "description": "Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.\n\n\u003e **Important:** Avoid using `prefix` for `AbortIncompleteMultipartUpload`, as any incomplete multipart upload will be billed\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The element value can be either Enabled or Disabled. If a rule is disabled, Scaleway Object Storage does not perform any of the actions defined in the rule.\n"
                },
                "expiration": {
                    "$ref": "#/types/scaleway:index/ObjectBucketLifecycleRuleExpiration:ObjectBucketLifecycleRuleExpiration",
                    "description": "Specifies a period in the object's expire\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier for the rule. Must be less than or equal to 255 characters in length.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "Object key prefix identifying one or more objects to which the rule applies.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specifies object tags key and value.\n"
                },
                "transitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/ObjectBucketLifecycleRuleTransition:ObjectBucketLifecycleRuleTransition"
                    },
                    "description": "Define when objects transition to another storage class\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "id"
                    ]
                }
            }
        },
        "scaleway:index/ObjectBucketLifecycleRuleExpiration:ObjectBucketLifecycleRuleExpiration": {
            "properties": {
                "days": {
                    "type": "integer",
                    "description": "Specifies the number of days after object creation when the specific rule action takes effect.\n"
                }
            },
            "type": "object",
            "required": [
                "days"
            ]
        },
        "scaleway:index/ObjectBucketLifecycleRuleTransition:ObjectBucketLifecycleRuleTransition": {
            "properties": {
                "days": {
                    "type": "integer",
                    "description": "Specifies the number of days after object creation when the specific rule action takes effect.\n"
                },
                "storageClass": {
                    "type": "string",
                    "description": "Specifies the Scaleway [storage class](https://www.scaleway.com/en/docs/storage/object/concepts/#storage-class) `STANDARD`, `GLACIER`, `ONEZONE_IA`  to which you want the object to transition.\n\n\n\u003e **Important:**  If versioning is enabled, this rule only deletes the current version of an object.\n\u003e **Important:**  If versioning is enabled, this rule only deletes the current version of an object.\n\n\n\u003e **Important:**  `ONEZONE_IA` is only available in `fr-par` region. The storage class `GLACIER` is not available in `pl-waw` region.\n\u003e **Important:**  `ONEZONE_IA` is only available in `fr-par` region. The storage class `GLACIER` is not available in `pl-waw` region.\n"
                }
            },
            "type": "object",
            "required": [
                "storageClass"
            ]
        },
        "scaleway:index/ObjectBucketLockConfigurationRule:ObjectBucketLockConfigurationRule": {
            "properties": {
                "defaultRetention": {
                    "$ref": "#/types/scaleway:index/ObjectBucketLockConfigurationRuleDefaultRetention:ObjectBucketLockConfigurationRuleDefaultRetention",
                    "description": "The default retention for the lock.\n"
                }
            },
            "type": "object",
            "required": [
                "defaultRetention"
            ]
        },
        "scaleway:index/ObjectBucketLockConfigurationRuleDefaultRetention:ObjectBucketLockConfigurationRuleDefaultRetention": {
            "properties": {
                "days": {
                    "type": "integer",
                    "description": "The number of days you want to specify for the default retention period.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The default object lock retention mode you want to apply to new objects placed in the specified bucket. Valid values are `GOVERNANCE` or `COMPLIANCE`. Refer to the [dedicated documentation](https://www.scaleway.com/en/docs/storage/object/api-cli/object-lock/#retention-modes) for more information on retention modes.\n"
                },
                "years": {
                    "type": "integer",
                    "description": "The number of years you want to specify for the default retention period.\n"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "scaleway:index/ObjectBucketVersioning:ObjectBucketVersioning": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "scaleway:index/ObjectBucketWebsiteConfigurationErrorDocument:ObjectBucketWebsiteConfigurationErrorDocument": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The object key name to use when a 4XX class error occurs.\n"
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "scaleway:index/ObjectBucketWebsiteConfigurationIndexDocument:ObjectBucketWebsiteConfigurationIndexDocument": {
            "properties": {
                "suffix": {
                    "type": "string",
                    "description": "A suffix that is appended to a request targeting a specific directory on the website endpoint.\n\n\u003e **Important:** The suffix must not be empty and must not include a slash character. The routing is not supported.\n"
                }
            },
            "type": "object",
            "required": [
                "suffix"
            ]
        },
        "scaleway:index/RedisClusterAcl:RedisClusterAcl": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A text describing this rule. Default description: `Allow IP`\n\n\u003e The `acl` conflict with `private_network`. Only one should be specified.\n"
                },
                "id": {
                    "type": "string",
                    "description": "(Required) The UUID of the endpoint.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The IP range to whitelist\nin [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)\n"
                }
            },
            "type": "object",
            "required": [
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "id",
                        "ip"
                    ]
                }
            }
        },
        "scaleway:index/RedisClusterPrivateNetwork:RedisClusterPrivateNetwork": {
            "properties": {
                "endpointId": {
                    "type": "string",
                    "description": "The ID of the endpoint.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The UUID of the Private Network resource.\n"
                },
                "serviceIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Endpoint IPv4 addresses in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation). You must provide at least one IP per node.\nKeep in mind that in cluster mode you cannot edit your Private Network after its creation so if you want to be able to\nscale your cluster horizontally (adding nodes) later, you should provide more IPs than nodes.\nIf not set, the IP network address within the private subnet is determined by the IP Address Management (IPAM) service.\n\n\u003e The `private_network` conflicts with `acl`. Only one should be specified.\n\n\u003e **Important:** The way to use Private Networks differs whether you are using Redis™ in Standalone or cluster mode.\n\n- Standalone mode (`cluster_size` = 1) : you can attach as many Private Networks as you want (each must be a separate\nblock). If you detach your only Private Network, your cluster won't be reachable until you define a new Private or\nPublic Network. You can modify your `private_network` and its specs, you can have both a Private and Public Network side\nby side.\n\n- Cluster mode (`cluster_size` \u003e 2) : you can define a single Private Network as you create your cluster, you won't be\nable to edit or detach it afterward, unless you create another cluster. This also means that, if you are using a static\nconfiguration (`service_ips`), you won't be able to scale your cluster horizontally (add more nodes) since it would\nrequire updating the Private Network to add IPs.\nYour `service_ips` must be listed as follows:\n\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the\nRedis™ cluster should be created.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endpointId",
                        "id",
                        "serviceIps",
                        "zone"
                    ]
                }
            }
        },
        "scaleway:index/RedisClusterPublicNetwork:RedisClusterPublicNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "(Required) The UUID of the endpoint.\n"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Lis of IPv4 address of the endpoint (IP address).\n"
                },
                "port": {
                    "type": "integer",
                    "description": "TCP port of the endpoint.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "ips",
                        "port"
                    ]
                }
            }
        },
        "scaleway:index/SecretEphemeralPolicy:SecretEphemeralPolicy": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Action to perform when the version of a secret expires. Available values can be found in [SDK constants](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/secret/v1beta1#pkg-constants).\n"
                },
                "expiresOnceAccessed": {
                    "type": "boolean",
                    "description": "True if the secret version expires after a single user access.\n"
                },
                "ttl": {
                    "type": "string",
                    "description": "Time frame, from one second and up to one year, during which the secret's versions are valid. Has to be specified in [Go Duration format](https://pkg.go.dev/time#ParseDuration) (ex: \"30m\", \"24h\").\n"
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "scaleway:index/TemDomainReputation:TemDomainReputation": {
            "properties": {
                "previousScore": {
                    "type": "integer",
                    "description": "The previously-calculated domain's reputation score.\n"
                },
                "previousScoredAt": {
                    "type": "string",
                    "description": "The time and date the previous reputation score was calculated.\n"
                },
                "score": {
                    "type": "integer",
                    "description": "A range from 0 to 100 that determines your domain's reputation score.\n"
                },
                "scoredAt": {
                    "type": "string",
                    "description": "The time and date the score was calculated.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the domain's reputation.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "previousScore",
                        "previousScoredAt",
                        "score",
                        "scoredAt",
                        "status"
                    ]
                }
            }
        },
        "scaleway:index/VpcGatewayNetworkIpamConfig:VpcGatewayNetworkIpamConfig": {
            "properties": {
                "ipamIpId": {
                    "type": "string",
                    "description": "Use this IPAM-booked IP ID as the Gateway's IP in this Private Network.\n"
                },
                "pushDefaultRoute": {
                    "type": "boolean",
                    "description": "Defines whether to enable the default route on the GatewayNetwork.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ipamIpId"
                    ]
                }
            }
        },
        "scaleway:index/VpcPrivateNetworkIpv4Subnet:VpcPrivateNetworkIpv4Subnet": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The network address of the subnet in hexadecimal notation, e.g., '2001:db8::' for a '2001:db8::/64' subnet.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the subnet.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The subnet ID.\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "The length of the network prefix, e.g., 64 for a 'ffff:ffff:ffff:ffff::' mask.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "The subnet CIDR.\n",
                    "willReplaceOnChanges": true
                },
                "subnetMask": {
                    "type": "string",
                    "description": "The subnet mask expressed in dotted decimal notation, e.g., '255.255.255.0' for a /24 subnet\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the subnet.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "createdAt",
                        "id",
                        "prefixLength",
                        "subnet",
                        "subnetMask",
                        "updatedAt"
                    ]
                }
            }
        },
        "scaleway:index/VpcPrivateNetworkIpv6Subnet:VpcPrivateNetworkIpv6Subnet": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The network address of the subnet in hexadecimal notation, e.g., '2001:db8::' for a '2001:db8::/64' subnet.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the subnet.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The subnet ID.\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "The length of the network prefix, e.g., 64 for a 'ffff:ffff:ffff:ffff::' mask.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "The subnet CIDR.\n",
                    "willReplaceOnChanges": true
                },
                "subnetMask": {
                    "type": "string",
                    "description": "The subnet mask expressed in dotted decimal notation, e.g., '255.255.255.0' for a /24 subnet\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the subnet.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "createdAt",
                        "id",
                        "prefixLength",
                        "subnet",
                        "subnetMask",
                        "updatedAt"
                    ]
                }
            }
        },
        "scaleway:index/WebhostingCpanelUrl:WebhostingCpanelUrl": {
            "properties": {
                "dashboard": {
                    "type": "string",
                    "description": "The URL of the Dashboard.\n"
                },
                "webmail": {
                    "type": "string",
                    "description": "The URL of the Webmail interface.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dashboard",
                        "webmail"
                    ]
                }
            }
        },
        "scaleway:index/WebhostingOption:WebhostingOption": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The option ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The option name.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name"
                    ]
                }
            }
        },
        "scaleway:index/getBaremetalOfferCpu:getBaremetalOfferCpu": {
            "properties": {
                "coreCount": {
                    "type": "integer",
                    "description": "Number of core on this CPU.\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "Frequency of the memory in MHz.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The offer name. Only one of `name` and `offer_id` should be specified.\n"
                },
                "threadCount": {
                    "type": "integer",
                    "description": "Number of thread on this CPU.\n"
                }
            },
            "type": "object",
            "required": [
                "coreCount",
                "frequency",
                "name",
                "threadCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getBaremetalOfferDisk:getBaremetalOfferDisk": {
            "properties": {
                "capacity": {
                    "type": "integer",
                    "description": "Capacity of the memory in GB.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of memory.\n"
                }
            },
            "type": "object",
            "required": [
                "capacity",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getBaremetalOfferMemory:getBaremetalOfferMemory": {
            "properties": {
                "capacity": {
                    "type": "integer",
                    "description": "Capacity of the memory in GB.\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "Frequency of the memory in MHz.\n"
                },
                "isEcc": {
                    "type": "boolean",
                    "description": "True if error-correcting code is available on this memory.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of memory.\n"
                }
            },
            "type": "object",
            "required": [
                "capacity",
                "frequency",
                "isEcc",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getBaremetalServerIp:getBaremetalServerIp": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IPv6 address\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the server.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The Reverse of the IPv6\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the IPv6\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "id",
                "reverse",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getBaremetalServerIpv4:getBaremetalServerIpv4": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IPv6 address\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the server.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The Reverse of the IPv6\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the IPv6\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "id",
                "reverse",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getBaremetalServerIpv6:getBaremetalServerIpv6": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IPv6 address\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the server.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The Reverse of the IPv6\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the IPv6\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "id",
                "reverse",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getBaremetalServerOption:getBaremetalServerOption": {
            "properties": {
                "expiresAt": {
                    "type": "string",
                    "description": "Auto expire the option after this date\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the server.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The server name. Only one of `name` and `server_id` should be specified.\n"
                }
            },
            "type": "object",
            "required": [
                "expiresAt",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getBaremetalServerPrivateNetwork:getBaremetalServerPrivateNetwork": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the private network\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the server.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The private network status\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the private network\n"
                },
                "vlan": {
                    "type": "integer",
                    "description": "The VLAN ID associated to the private network\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "id",
                "status",
                "updatedAt",
                "vlan"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getBillingConsumptionsConsumption:getBillingConsumptionsConsumption": {
            "properties": {
                "billedQuantity": {
                    "type": "string",
                    "description": "The consumed quantity.\n"
                },
                "categoryName": {
                    "type": "string",
                    "description": "The name of the consumption category.\n"
                },
                "productName": {
                    "type": "string",
                    "description": "The product name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the consumption list is associated with.\n"
                },
                "sku": {
                    "type": "string",
                    "description": "The unique identifier of the product.\n"
                },
                "unit": {
                    "type": "string",
                    "description": "The unit of consumed quantity.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The monetary value of the consumption.\n"
                }
            },
            "type": "object",
            "required": [
                "billedQuantity",
                "categoryName",
                "productName",
                "projectId",
                "sku",
                "unit",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getBillingInvoicesInvoice:getBillingInvoicesInvoice": {
            "properties": {
                "billingPeriod": {
                    "type": "string",
                    "description": "The billing period of the invoice in the YYYY-MM format.\n"
                },
                "dueDate": {
                    "type": "string",
                    "description": "The payment time limit, set according to the Organization's payment conditions (RFC 3339 format).\n"
                },
                "id": {
                    "type": "string",
                    "description": "The associated invoice ID.\n"
                },
                "invoiceType": {
                    "type": "string",
                    "description": "Invoices with the given type are listed. Valid values are `periodic` and `purchase`.\n"
                },
                "issuedDate": {
                    "type": "string",
                    "description": "The date when the invoice was sent to the customer (RFC 3339 format).\n"
                },
                "number": {
                    "type": "integer",
                    "description": "The invoice number.\n"
                },
                "organizationName": {
                    "type": "string",
                    "description": "The organization name.\n"
                },
                "sellerName": {
                    "type": "string",
                    "description": "The name of the seller (Scaleway).\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The start date of the billing period (RFC 3339 format).\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the invoice.\n"
                },
                "stopDate": {
                    "type": "string",
                    "description": "The end date of the billing period (RFC 3339 format).\n"
                },
                "totalDiscount": {
                    "type": "string",
                    "description": "The total discount amount of the invoice.\n"
                },
                "totalTax": {
                    "type": "string",
                    "description": "The total tax amount of the invoice.\n"
                },
                "totalTaxed": {
                    "type": "string",
                    "description": "The total amount, taxed.\n"
                },
                "totalUndiscount": {
                    "type": "string",
                    "description": "The total amount of the invoice before applying the discount.\n"
                },
                "totalUntaxed": {
                    "type": "string",
                    "description": "The total amount, untaxed.\n"
                }
            },
            "type": "object",
            "required": [
                "billingPeriod",
                "dueDate",
                "id",
                "invoiceType",
                "issuedDate",
                "number",
                "organizationName",
                "sellerName",
                "startDate",
                "state",
                "stopDate",
                "totalDiscount",
                "totalTax",
                "totalTaxed",
                "totalUndiscount",
                "totalUntaxed"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getCockpitEndpoint:getCockpitEndpoint": {
            "properties": {
                "alertmanagerUrl": {
                    "type": "string",
                    "description": "(Deprecated) URL for the [Alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager).\n"
                },
                "grafanaUrl": {
                    "type": "string",
                    "description": "(Deprecated) URL for Grafana.\n"
                },
                "logsUrl": {
                    "type": "string",
                    "description": "(Deprecated) URL for [logs](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#logs) to retrieve in the [Data sources tab](https://console.scaleway.com/cockpit/dataSource) of the Scaleway console.\n"
                },
                "metricsUrl": {
                    "type": "string",
                    "description": "(Deprecated) URL for [metrics](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#metric) to retrieve in the [Data sources tab](https://console.scaleway.com/cockpit/dataSource) of the Scaleway console.\n"
                },
                "tracesUrl": {
                    "type": "string",
                    "description": "The traces URL\n"
                }
            },
            "type": "object",
            "required": [
                "alertmanagerUrl",
                "grafanaUrl",
                "logsUrl",
                "metricsUrl",
                "tracesUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getCockpitPushUrl:getCockpitPushUrl": {
            "properties": {
                "pushLogsUrl": {
                    "type": "string",
                    "description": "Push URL for logs (Grafana Loki)\n"
                },
                "pushMetricsUrl": {
                    "type": "string",
                    "description": "Push URL for metrics (Grafana Mimir)\n"
                }
            },
            "type": "object",
            "required": [
                "pushLogsUrl",
                "pushMetricsUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDatabaseAclAclRule:getDatabaseAclAclRule": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A simple text describing this rule\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The ip range to whitelist in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDatabaseInstanceLoadBalancer:getDatabaseInstanceLoadBalancer": {
            "properties": {
                "endpointId": {
                    "type": "string",
                    "description": "The endpoint ID\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname of your endpoint\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The IP of your load balancer service\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the RDB instance.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of your load balancer service\n"
                }
            },
            "type": "object",
            "required": [
                "endpointId",
                "hostname",
                "ip",
                "name",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDatabaseInstanceLogsPolicy:getDatabaseInstanceLogsPolicy": {
            "properties": {
                "maxAgeRetention": {
                    "type": "integer",
                    "description": "The max age (in days) of remote logs to keep on the Database Instance\n"
                },
                "totalDiskRetention": {
                    "type": "integer",
                    "description": "The max disk size of remote logs to keep on the Database Instance.\n"
                }
            },
            "type": "object",
            "required": [
                "maxAgeRetention",
                "totalDiskRetention"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDatabaseInstancePrivateNetwork:getDatabaseInstancePrivateNetwork": {
            "properties": {
                "enableIpam": {
                    "type": "boolean",
                    "description": "Whether or not the private network endpoint should be configured with IPAM\n"
                },
                "endpointId": {
                    "type": "string",
                    "description": "The endpoint ID\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname of your endpoint\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The IP of your Instance within the private service\n"
                },
                "ipNet": {
                    "type": "string",
                    "description": "The IP with the given mask within the private subnet\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the RDB instance.\n"
                },
                "pnId": {
                    "type": "string",
                    "description": "The private network ID\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of your private service\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone you want to attach the resource to\n"
                }
            },
            "type": "object",
            "required": [
                "enableIpam",
                "endpointId",
                "hostname",
                "ip",
                "ipNet",
                "name",
                "pnId",
                "port",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDatabaseInstanceReadReplica:getDatabaseInstanceReadReplica": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "IP of the replica\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the RDB instance.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the replica\n"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "name",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDomainRecordGeoIp:getDomainRecordGeoIp": {
            "properties": {
                "matches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getDomainRecordGeoIpMatch:getDomainRecordGeoIpMatch"
                    },
                    "description": "The list of matches\n"
                }
            },
            "type": "object",
            "required": [
                "matches"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDomainRecordGeoIpMatch:getDomainRecordGeoIpMatch": {
            "properties": {
                "continents": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of continents (eg: EU for Europe, NA for North America, AS for Asia...). List of all continents code: https://api.scaleway.com/domain-private/v2beta1/continents\n"
                },
                "countries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of countries (eg: FR for France, US for the United States, GB for Great Britain...). List of all countries code: https://api.scaleway.com/domain-private/v2beta1/countries\n"
                },
                "data": {
                    "type": "string",
                    "description": "The content of the record (e.g., an IPv4 address for an `A` record or a string for a `TXT` record). Cannot be used with `record_id`.\n"
                }
            },
            "type": "object",
            "required": [
                "continents",
                "countries",
                "data"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDomainRecordHttpService:getDomainRecordHttpService": {
            "properties": {
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IPs to check\n"
                },
                "mustContain": {
                    "type": "string",
                    "description": "Text to search\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "Strategy to return an IP from the IPs list\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL to match the must_contain text to validate an IP\n"
                },
                "userAgent": {
                    "type": "string",
                    "description": "User-agent used when checking the URL\n"
                }
            },
            "type": "object",
            "required": [
                "ips",
                "mustContain",
                "strategy",
                "url",
                "userAgent"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDomainRecordView:getDomainRecordView": {
            "properties": {
                "data": {
                    "type": "string",
                    "description": "The content of the record (e.g., an IPv4 address for an `A` record or a string for a `TXT` record). Cannot be used with `record_id`.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "The subnet of the view\n"
                }
            },
            "type": "object",
            "required": [
                "data",
                "subnet"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getDomainRecordWeighted:getDomainRecordWeighted": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "The weighted IP\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight of the IP\n"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "weight"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getFlexibleIpsIp:getFlexibleIpsIp": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date on which the flexible IP was created (RFC 3339 format).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the flexible IP.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The MAC address ID.\n"
                },
                "ipAddress": {
                    "type": "string"
                },
                "macAddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getFlexibleIpsIpMacAddress:getFlexibleIpsIpMacAddress"
                    },
                    "description": "The MAC address of the Virtual MAC.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "(Defaults to provider `organization_id`) The ID of the organization the IP is in.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "(Defaults to provider `project_id`) The ID of the project the IP is in.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain associated with this IP.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of virtual MAC.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of tags used as filter. IPs with these exact tags are listed.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date on which the flexible IP was last updated (RFC 3339 format).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which IPs exist.\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "description",
                "id",
                "ipAddress",
                "macAddresses",
                "organizationId",
                "projectId",
                "reverse",
                "status",
                "tags",
                "updatedAt",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getFlexibleIpsIpMacAddress:getFlexibleIpsIpMacAddress": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date on which the flexible IP was created (RFC 3339 format).\n"
                },
                "id": {
                    "type": "string",
                    "description": "The MAC address ID.\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "The MAC address of the Virtual MAC.\n"
                },
                "macType": {
                    "type": "string",
                    "description": "The type of virtual MAC.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of virtual MAC.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date on which the flexible IP was last updated (RFC 3339 format).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which IPs exist.\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "id",
                "macAddress",
                "macType",
                "status",
                "updatedAt",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getInstanceSecurityGroupInboundRule:getInstanceSecurityGroupInboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action to take when rule match. Possible values are: `accept` or `drop`.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The ip this rule apply to.\n"
                },
                "ipRange": {
                    "type": "string",
                    "description": "The ip range (e.g `192.168.1.0/24`) this rule apply to.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port this rule apply to. If no port is specified, rule will apply to all port.\n"
                },
                "portRange": {
                    "type": "string",
                    "description": "The port range (e.g `22-23`) this rule applies to.\nIf no `port` nor `port_range` are specified, rule will apply to all port.\nOnly one of `port` and `port_range` should be specified.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "ip",
                "ipRange",
                "port",
                "portRange",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getInstanceSecurityGroupOutboundRule:getInstanceSecurityGroupOutboundRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action to take when rule match. Possible values are: `accept` or `drop`.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The ip this rule apply to.\n"
                },
                "ipRange": {
                    "type": "string",
                    "description": "The ip range (e.g `192.168.1.0/24`) this rule apply to.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port this rule apply to. If no port is specified, rule will apply to all port.\n"
                },
                "portRange": {
                    "type": "string",
                    "description": "The port range (e.g `22-23`) this rule applies to.\nIf no `port` nor `port_range` are specified, rule will apply to all port.\nOnly one of `port` and `port_range` should be specified.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "ip",
                "ipRange",
                "port",
                "portRange",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getInstanceServerPrivateNetwork:getInstanceServerPrivateNetwork": {
            "properties": {
                "macAddress": {
                    "type": "string",
                    "description": "MAC address of the NIC\n"
                },
                "pnId": {
                    "type": "string",
                    "description": "The Private Network ID\n"
                },
                "pnicId": {
                    "type": "string",
                    "description": "The ID of the NIC\n"
                },
                "status": {
                    "type": "string",
                    "description": "The private NIC state\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server exists.\n"
                }
            },
            "type": "object",
            "required": [
                "macAddress",
                "pnId",
                "pnicId",
                "status",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getInstanceServerPublicIp:getInstanceServerPublicIp": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the IP\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the IP\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getInstanceServerRootVolume:getInstanceServerRootVolume": {
            "properties": {
                "boot": {
                    "type": "boolean",
                    "description": "Set the volume where the boot the server\n"
                },
                "deleteOnTermination": {
                    "type": "boolean",
                    "description": "Forces deletion of the root volume on instance termination.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The server name. Only one of `name` and `server_id` should be specified.\n"
                },
                "sbsIops": {
                    "type": "integer",
                    "description": "SBS Volume IOPS, only with volume_type as sbs_volume\n"
                },
                "sizeInGb": {
                    "type": "integer",
                    "description": "Size of the root volume in gigabytes.\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "The volume ID of the root volume of the server.\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "Volume type of the root volume\n"
                }
            },
            "type": "object",
            "required": [
                "boot",
                "deleteOnTermination",
                "name",
                "sbsIops",
                "sizeInGb",
                "volumeId",
                "volumeType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getInstanceServersServer:getInstanceServersServer": {
            "properties": {
                "bootType": {
                    "type": "string",
                    "description": "The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.\n"
                },
                "bootscriptId": {
                    "type": "string",
                    "description": "The ID of the bootscript.\n",
                    "deprecationMessage": "bootscript are not supported"
                },
                "enableDynamicIp": {
                    "type": "boolean",
                    "description": "If true a dynamic IP will be attached to the server.\n"
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "Determines if IPv6 is enabled for the server.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the IP\n"
                },
                "image": {
                    "type": "string",
                    "description": "The UUID or the label of the base image used by the server.\n"
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "The default ipv6 address routed to the server. ( Only set when enable_ipv6 is set to true )\n"
                },
                "ipv6Gateway": {
                    "type": "string",
                    "description": "The ipv6 gateway address. ( Only set when enable_ipv6 is set to true )\n"
                },
                "ipv6PrefixLength": {
                    "type": "integer",
                    "description": "The prefix length of the ipv6 subnet routed to the server. ( Only set when enable_ipv6 is set to true )\n"
                },
                "name": {
                    "type": "string",
                    "description": "The server name used as filter. Servers with a name like it are listed.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the server is associated with.\n"
                },
                "placementGroupId": {
                    "type": "string",
                    "description": "The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.\n"
                },
                "placementGroupPolicyRespected": {
                    "type": "boolean"
                },
                "privateIp": {
                    "type": "string",
                    "description": "The Scaleway internal IP address of the server.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project the server is associated with.\n"
                },
                "publicIp": {
                    "type": "string",
                    "description": "The public IP address of the server.\n",
                    "deprecationMessage": "Use public_ips instead"
                },
                "publicIps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getInstanceServersServerPublicIp:getInstanceServersServerPublicIp"
                    },
                    "description": "The list of public IPs of the server\n"
                },
                "routedIpEnabled": {
                    "type": "boolean",
                    "description": "True if the server support routed ip only.\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the server. Possible values are: `started`, `stopped` or `standby`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of tags used as filter. Servers with these exact tags are listed.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The commercial type of the server.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which servers exist.\n"
                }
            },
            "type": "object",
            "required": [
                "bootType",
                "bootscriptId",
                "enableDynamicIp",
                "enableIpv6",
                "id",
                "image",
                "ipv6Address",
                "ipv6Gateway",
                "ipv6PrefixLength",
                "name",
                "organizationId",
                "placementGroupId",
                "placementGroupPolicyRespected",
                "privateIp",
                "projectId",
                "publicIp",
                "publicIps",
                "routedIpEnabled",
                "securityGroupId",
                "state",
                "tags",
                "type",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getInstanceServersServerPublicIp:getInstanceServersServerPublicIp": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the IP\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the IP\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getInstanceSnapshotImport:getInstanceSnapshotImport": {
            "properties": {
                "bucket": {
                    "type": "string",
                    "description": "Bucket containing qcow\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key of the qcow file in the specified bucket\n"
                }
            },
            "type": "object",
            "required": [
                "bucket",
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getIotDeviceCertificate:getIotDeviceCertificate": {
            "properties": {
                "crt": {
                    "type": "string",
                    "description": "X509 PEM encoded certificate of the device\n"
                },
                "key": {
                    "type": "string",
                    "description": "X509 PEM encoded key of the device\n"
                }
            },
            "type": "object",
            "required": [
                "crt",
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getIotDeviceMessageFilter:getIotDeviceMessageFilter": {
            "properties": {
                "publishes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getIotDeviceMessageFilterPublish:getIotDeviceMessageFilterPublish"
                    },
                    "description": "Rule to restrict topics the device can publish to\n"
                },
                "subscribes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getIotDeviceMessageFilterSubscribe:getIotDeviceMessageFilterSubscribe"
                    },
                    "description": "Rule to restrict topics the device can subscribe to\n"
                }
            },
            "type": "object",
            "required": [
                "publishes",
                "subscribes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getIotDeviceMessageFilterPublish:getIotDeviceMessageFilterPublish": {
            "properties": {
                "policy": {
                    "type": "string",
                    "description": "Publish message filter policy\n"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of topics in the set\n"
                }
            },
            "type": "object",
            "required": [
                "policy",
                "topics"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getIotDeviceMessageFilterSubscribe:getIotDeviceMessageFilterSubscribe": {
            "properties": {
                "policy": {
                    "type": "string",
                    "description": "Subscribe message filter policy\n"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of topics in the set\n"
                }
            },
            "type": "object",
            "required": [
                "policy",
                "topics"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getIpamIpResource:getIpamIpResource": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the resource that the IP is attached to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource the IP is attached to.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the resource the IP is attached to. [Documentation](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/ipam/v1#pkg-constants) with type list.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "scaleway:index/getIpamIpsIp:getIpamIpsIp": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The Scaleway internal IP address of the resource.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the IP.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the resource.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Project to filter for.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to filter for.\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getIpamIpsIpResource:getIpamIpsIpResource"
                    },
                    "description": "Filter for a resource attached to the IP, using resource ID, type or name.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IP tags to filter for.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone of the IP.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "createdAt",
                "id",
                "projectId",
                "region",
                "resources",
                "tags",
                "updatedAt",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getIpamIpsIpResource:getIpamIpsIpResource": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the attached resource.\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "The linked MAC address to filter for.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the attached resource.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the attached resource. [Documentation](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/ipam/v1#pkg-constants) with type list.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "macAddress",
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getIpamIpsResource:getIpamIpsResource": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the attached resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the attached resource.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the attached resource. [Documentation](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/ipam/v1#pkg-constants) with type list.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "scaleway:index/getKubernetesClusterAutoUpgrade:getKubernetesClusterAutoUpgrade": {
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "True if Kubernetes patch version auto upgrades is enabled.\n"
                },
                "maintenanceWindowDay": {
                    "type": "string",
                    "description": "The day of the auto upgrade maintenance window (`monday` to `sunday`, or `any`).\n"
                },
                "maintenanceWindowStartHour": {
                    "type": "integer",
                    "description": "The start hour (UTC) of the 2-hour auto upgrade maintenance window (0 to 23).\n"
                }
            },
            "type": "object",
            "required": [
                "enable",
                "maintenanceWindowDay",
                "maintenanceWindowStartHour"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getKubernetesClusterAutoscalerConfig:getKubernetesClusterAutoscalerConfig": {
            "properties": {
                "balanceSimilarNodeGroups": {
                    "type": "boolean",
                    "description": "True if detecting similar node groups and balance the number of nodes between them is enabled.\n"
                },
                "disableScaleDown": {
                    "type": "boolean",
                    "description": "True if the scale down feature of the autoscaler is disabled.\n"
                },
                "estimator": {
                    "type": "string",
                    "description": "The type of resource estimator used in scale up.\n"
                },
                "expander": {
                    "type": "string",
                    "description": "The type of node group expander be used in scale up.\n"
                },
                "expendablePodsPriorityCutoff": {
                    "type": "integer",
                    "description": "Pods with priority below cutoff will be expendable. They can be killed without any consideration during scale down and they don't cause scale up. Pods with null priority (PodPriority disabled) are non expendable.\n"
                },
                "ignoreDaemonsetsUtilization": {
                    "type": "boolean",
                    "description": "True if ignoring DaemonSet pods when calculating resource utilization for scaling down is enabled.\n"
                },
                "maxGracefulTerminationSec": {
                    "type": "integer",
                    "description": "Maximum number of seconds the cluster autoscaler waits for pod termination when trying to scale down a node\n"
                },
                "scaleDownDelayAfterAdd": {
                    "type": "string",
                    "description": "The duration after scale up that scale down evaluation resumes.\n"
                },
                "scaleDownUnneededTime": {
                    "type": "string",
                    "description": "The duration a node should be unneeded before it is eligible for scale down.\n"
                },
                "scaleDownUtilizationThreshold": {
                    "type": "number",
                    "description": "Node utilization level, defined as sum of requested resources divided by capacity, below which a node can be considered for scale down\n"
                }
            },
            "type": "object",
            "required": [
                "balanceSimilarNodeGroups",
                "disableScaleDown",
                "estimator",
                "expander",
                "expendablePodsPriorityCutoff",
                "ignoreDaemonsetsUtilization",
                "maxGracefulTerminationSec",
                "scaleDownDelayAfterAdd",
                "scaleDownUnneededTime",
                "scaleDownUtilizationThreshold"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getKubernetesClusterKubeconfig:getKubernetesClusterKubeconfig": {
            "properties": {
                "clusterCaCertificate": {
                    "type": "string",
                    "description": "The CA certificate of the Kubernetes API server.\n"
                },
                "configFile": {
                    "type": "string",
                    "description": "The raw kubeconfig file.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The URL of the Kubernetes API server.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token to connect to the Kubernetes API server.\n"
                }
            },
            "type": "object",
            "required": [
                "clusterCaCertificate",
                "configFile",
                "host",
                "token"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getKubernetesClusterOpenIdConnectConfig:getKubernetesClusterOpenIdConnectConfig": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "A client id that all tokens must be issued for\n"
                },
                "groupsClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "JWT claim to use as the user's group\n"
                },
                "groupsPrefix": {
                    "type": "string",
                    "description": "Prefix prepended to group claims\n"
                },
                "issuerUrl": {
                    "type": "string",
                    "description": "URL of the provider which allows the API server to discover public signing keys\n"
                },
                "requiredClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Multiple key=value pairs that describes a required claim in the ID Token\n"
                },
                "usernameClaim": {
                    "type": "string",
                    "description": "JWT claim to use as the user name\n"
                },
                "usernamePrefix": {
                    "type": "string",
                    "description": "Prefix prepended to username\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "groupsClaims",
                "groupsPrefix",
                "issuerUrl",
                "requiredClaims",
                "usernameClaim",
                "usernamePrefix"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getKubernetesNodePoolNode:getKubernetesNodePoolNode": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The pool name. Only one of `name` and `pool_id` should be specified. `cluster_id` should be specified with `name`.\n"
                },
                "publicIp": {
                    "type": "string",
                    "description": "The public IPv4.\n"
                },
                "publicIpV6": {
                    "type": "string",
                    "description": "The public IPv6.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the node.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "publicIp",
                "publicIpV6",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getKubernetesNodePoolUpgradePolicy:getKubernetesNodePoolUpgradePolicy": {
            "properties": {
                "maxSurge": {
                    "type": "integer",
                    "description": "The maximum number of nodes to be created during the upgrade\n"
                },
                "maxUnavailable": {
                    "type": "integer",
                    "description": "The maximum number of nodes that can be not ready at the same time\n"
                }
            },
            "type": "object",
            "required": [
                "maxSurge",
                "maxUnavailable"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbAclsAcl:getLbAclsAcl": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getLbAclsAclAction:getLbAclsAclAction"
                    },
                    "description": "The action to be undertaken when an ACL filter matches.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date on which the ACL was created (RFC 3339 format).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the ACL resource.\n"
                },
                "frontendId": {
                    "type": "string",
                    "description": "The frontend ID this ACL is attached to. ACLs with a matching frontend ID are listed.\n\u003e **Important:** LB frontend IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`\n"
                },
                "id": {
                    "type": "string",
                    "description": "The associated ACL ID.\n\u003e **Important:** LB ACLs' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`\n"
                },
                "index": {
                    "type": "integer",
                    "description": "The priority of this ACL in the ordered list.\n"
                },
                "matches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getLbAclsAclMatch:getLbAclsAclMatch"
                    },
                    "description": "The ACL match rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ACL name to filter for. ACLs with a matching name are listed.\n"
                },
                "updateAt": {
                    "type": "string",
                    "description": "The date on which the ACL was last updated (RFC 3339 format).\n"
                }
            },
            "type": "object",
            "required": [
                "actions",
                "createdAt",
                "description",
                "frontendId",
                "id",
                "index",
                "matches",
                "name",
                "updateAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbAclsAclAction:getLbAclsAclAction": {
            "properties": {
                "redirects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getLbAclsAclActionRedirect:getLbAclsAclActionRedirect"
                    },
                    "description": "Redirect parameters when using an ACL with `redirect` action.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The redirect type.\n"
                }
            },
            "type": "object",
            "required": [
                "redirects",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbAclsAclActionRedirect:getLbAclsAclActionRedirect": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "The HTTP redirect code to use.\n"
                },
                "target": {
                    "type": "string",
                    "description": "The URL used in case of a location redirect, or the scheme name that replaces the request's original scheme.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The redirect type.\n"
                }
            },
            "type": "object",
            "required": [
                "code",
                "target",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbAclsAclMatch:getLbAclsAclMatch": {
            "properties": {
                "httpFilter": {
                    "type": "string",
                    "description": "The HTTP filter to match.\n"
                },
                "httpFilterOption": {
                    "type": "string",
                    "description": "A list of possible values for the HTTP filter based on the HTTP header.\n"
                },
                "httpFilterValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The possible values to match for a given HTTP filter.\n"
                },
                "invert": {
                    "type": "boolean",
                    "description": "The condition will be of type \"unless\" if invert is set to `true`\n"
                },
                "ipSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPs, or CIDR v4/v6 addresses of the session client, to match.\n"
                }
            },
            "type": "object",
            "required": [
                "httpFilter",
                "httpFilterOption",
                "httpFilterValues",
                "invert",
                "ipSubnets"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbBackendHealthCheckHttp:getLbBackendHealthCheckHttp": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "The expected HTTP status code\n"
                },
                "hostHeader": {
                    "type": "string",
                    "description": "The HTTP host header to use for HC requests\n"
                },
                "method": {
                    "type": "string",
                    "description": "The HTTP method to use for HC requests\n"
                },
                "sni": {
                    "type": "string",
                    "description": "The SNI to use for HC requests over SSL\n"
                },
                "uri": {
                    "type": "string",
                    "description": "The HTTPS endpoint URL to call for HC requests\n"
                }
            },
            "type": "object",
            "required": [
                "code",
                "hostHeader",
                "method",
                "sni",
                "uri"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbBackendHealthCheckTcp:getLbBackendHealthCheckTcp": {
            "type": "object"
        },
        "scaleway:index/getLbBackendsBackend:getLbBackendsBackend": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date on which the backend was created (RFC 3339 format).\n"
                },
                "failoverHost": {
                    "type": "string",
                    "description": "Scaleway S3 bucket website to be served if all backend servers are down.\n"
                },
                "forwardPort": {
                    "type": "integer",
                    "description": "User sessions will be forwarded to this backend server port.\n"
                },
                "forwardPortAlgorithm": {
                    "type": "string",
                    "description": "Load balancing algorithm.\n"
                },
                "forwardProtocol": {
                    "type": "string",
                    "description": "Backend protocol.\n"
                },
                "healthCheckDelay": {
                    "type": "string",
                    "description": "Interval between two health check requests.\n"
                },
                "healthCheckHttp": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getLbBackendsBackendHealthCheckHttp:getLbBackendsBackendHealthCheckHttp"
                    },
                    "description": "This block enables HTTP health checks.\n"
                },
                "healthCheckHttps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getLbBackendsBackendHealthCheckHttp:getLbBackendsBackendHealthCheckHttp"
                    },
                    "description": "This block enables HTTPS health checks.\n"
                },
                "healthCheckMaxRetries": {
                    "type": "integer",
                    "description": "Number of allowed failed health check requests before the backend server is marked as down.\n"
                },
                "healthCheckPort": {
                    "type": "integer",
                    "description": "Port the health check requests will be sent to.\n"
                },
                "healthCheckTcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getLbBackendsBackendHealthCheckTcp:getLbBackendsBackendHealthCheckTcp"
                    },
                    "description": "This block enables TCP health checks.\n"
                },
                "healthCheckTimeout": {
                    "type": "string",
                    "description": "Timeout before a health check request is considered failed.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The associated backend ID.\n"
                },
                "ignoreSslServerVerify": {
                    "type": "boolean",
                    "description": "Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection.\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The Load Balancer ID this backend is attached to. Backends with a matching ID are listed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The backend name to filter for. Backends with a matching name are listed.\n"
                },
                "onMarkedDownAction": {
                    "type": "string",
                    "description": "Modify what occurs when a backend server is marked down.\n"
                },
                "proxyProtocol": {
                    "type": "string",
                    "description": "The type of PROXY protocol.\n"
                },
                "serverIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of backend server IP addresses.\n"
                },
                "sslBridging": {
                    "type": "boolean",
                    "description": "Enables SSL between Load Balancer and backend servers.\n"
                },
                "stickySessions": {
                    "type": "string",
                    "description": "Enables cookie-based session persistence.\n"
                },
                "stickySessionsCookieName": {
                    "type": "string",
                    "description": "Cookie name for sticky sessions.\n"
                },
                "timeoutConnect": {
                    "type": "string",
                    "description": "Maximum initial server connection establishment time.\n"
                },
                "timeoutServer": {
                    "type": "string",
                    "description": "Maximum server connection inactivity time.\n"
                },
                "timeoutTunnel": {
                    "type": "string",
                    "description": "Maximum tunnel inactivity time.\n"
                },
                "updateAt": {
                    "type": "string",
                    "description": "The date on which the backend was last updated (RFC 3339 format).\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "failoverHost",
                "forwardPort",
                "forwardPortAlgorithm",
                "forwardProtocol",
                "healthCheckDelay",
                "healthCheckHttp",
                "healthCheckHttps",
                "healthCheckMaxRetries",
                "healthCheckPort",
                "healthCheckTcps",
                "healthCheckTimeout",
                "id",
                "ignoreSslServerVerify",
                "lbId",
                "name",
                "onMarkedDownAction",
                "proxyProtocol",
                "serverIps",
                "sslBridging",
                "stickySessions",
                "stickySessionsCookieName",
                "timeoutConnect",
                "timeoutServer",
                "timeoutTunnel",
                "updateAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbBackendsBackendHealthCheckHttp:getLbBackendsBackendHealthCheckHttp": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "The expected HTTP status code.\n"
                },
                "hostHeader": {
                    "type": "string",
                    "description": "The HTTP host header to use for health check requests.\n"
                },
                "method": {
                    "type": "string",
                    "description": "The HTTP method to use for health check requests.\n"
                },
                "sni": {
                    "type": "string",
                    "description": "The SNI to use for HC requests over SSL.\n"
                },
                "uri": {
                    "type": "string",
                    "description": "The HTTPS endpoint URL to call for health check requests.\n"
                }
            },
            "type": "object",
            "required": [
                "code",
                "hostHeader",
                "method",
                "sni",
                "uri"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbBackendsBackendHealthCheckTcp:getLbBackendsBackendHealthCheckTcp": {
            "type": "object"
        },
        "scaleway:index/getLbFrontendAcl:getLbFrontendAcl": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getLbFrontendAclAction:getLbFrontendAclAction"
                    },
                    "description": "Action to undertake when an ACL filter matches\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "IsDate and time of ACL's creation (RFC 3339 format)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the ACL\n"
                },
                "matches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getLbFrontendAclMatch:getLbFrontendAclMatch"
                    },
                    "description": "The ACL match rule\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the frontend.\n- When using the `name` you should specify the `lb-id`\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "IsDate and time of ACL's update (RFC 3339 format)\n"
                }
            },
            "type": "object",
            "required": [
                "actions",
                "createdAt",
                "description",
                "matches",
                "name",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbFrontendAclAction:getLbFrontendAclAction": {
            "properties": {
                "redirects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getLbFrontendAclActionRedirect:getLbFrontendAclActionRedirect"
                    },
                    "description": "Redirect parameters when using an ACL with `redirect` action\n"
                },
                "type": {
                    "type": "string",
                    "description": "The action type\n"
                }
            },
            "type": "object",
            "required": [
                "redirects",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbFrontendAclActionRedirect:getLbFrontendAclActionRedirect": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "The HTTP redirect code to use\n"
                },
                "target": {
                    "type": "string",
                    "description": "An URL can be used in case of a location redirect\n"
                },
                "type": {
                    "type": "string",
                    "description": "The redirect type\n"
                }
            },
            "type": "object",
            "required": [
                "code",
                "target",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbFrontendAclMatch:getLbFrontendAclMatch": {
            "properties": {
                "httpFilter": {
                    "type": "string",
                    "description": "The HTTP filter to match\n"
                },
                "httpFilterOption": {
                    "type": "string",
                    "description": "You can use this field with http_header_match acl type to set the header name to filter\n"
                },
                "httpFilterValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of possible values to match for the given HTTP filter\n"
                },
                "invert": {
                    "type": "boolean",
                    "description": "If set to true, the condition will be of type \"unless\"\n"
                },
                "ipSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPs or CIDR v4/v6 addresses of the client of the session to match\n"
                }
            },
            "type": "object",
            "required": [
                "httpFilter",
                "httpFilterOption",
                "httpFilterValues",
                "invert",
                "ipSubnets"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbFrontendsFrontend:getLbFrontendsFrontend": {
            "properties": {
                "backendId": {
                    "type": "string",
                    "description": "The Load Balancer backend ID this frontend is attached to.\n\u003e **Important:** Load Balancer backend IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`\n"
                },
                "certificateIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of certificate IDs that are used by the frontend.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date on which the frontend was created (RFC 3339 format).\n"
                },
                "enableHttp3": {
                    "type": "boolean",
                    "description": "Whether HTTP/3 protocol is activated.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the associated frontend.\n\u003e **Important:** LB frontend IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`\n"
                },
                "inboundPort": {
                    "type": "integer",
                    "description": "TCP port the frontend listens to.\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The Load Balancer ID this frontend is attached to. Frontends with a matching ID are listed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The frontend name to filter for. Frontends with a matching name are listed.\n"
                },
                "timeoutClient": {
                    "type": "string",
                    "description": "Maximum inactivity time on the client side.\n"
                },
                "updateAt": {
                    "type": "string",
                    "description": "The date aont which the frontend was last updated (RFC 3339 format).\n"
                }
            },
            "type": "object",
            "required": [
                "backendId",
                "certificateIds",
                "createdAt",
                "enableHttp3",
                "id",
                "inboundPort",
                "lbId",
                "name",
                "timeoutClient",
                "updateAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbIpsIp:getLbIpsIp": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the associated IP.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The ID of the associated Load BalancerD, if any\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The ID of the Organization the Load Balancer is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Project the Load Balancer is associated with.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain associated with this IP.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of tags used as filter. IPs with these exact tags are listed.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IPs exist.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "ipAddress",
                "lbId",
                "organizationId",
                "projectId",
                "reverse",
                "tags",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbRoutesRoute:getLbRoutesRoute": {
            "properties": {
                "backendId": {
                    "type": "string",
                    "description": "The backend ID to redirect to\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date on which the route was created (RFC 3339 format).\n"
                },
                "frontendId": {
                    "type": "string",
                    "description": "The frontend ID (the origin of the redirection), to filter for. Routes with a matching frontend ID are listed.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The associated route ID.\n"
                },
                "matchHostHeader": {
                    "type": "string",
                    "description": "Specifies the host of the server to which the request is being sent.\n"
                },
                "matchSni": {
                    "type": "string",
                    "description": "Server Name Indication TLS extension field from an incoming connection made via an SSL/TLS transport layer.\n"
                },
                "updateAt": {
                    "type": "string",
                    "description": "The date on which the route was last updated (RFC 3339 format).\n"
                }
            },
            "type": "object",
            "required": [
                "backendId",
                "createdAt",
                "frontendId",
                "id",
                "matchHostHeader",
                "matchSni",
                "updateAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbsLb:getLbsLb": {
            "properties": {
                "backendCount": {
                    "type": "integer",
                    "description": "Number of backends the Load Balancer has.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date on which the Load Balancer was created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Load Balancer.\n"
                },
                "frontendCount": {
                    "type": "integer",
                    "description": "Number of frontends the Load Balancer has.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Load Balancer.\n"
                },
                "instances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getLbsLbInstance:getLbsLbInstance"
                    },
                    "description": "List of underlying Instances.\n"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getLbsLbIp:getLbsLbIp"
                    },
                    "description": "List of IPs attached to the Load Balancer.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Load Balancer name to filter for. Load Balancers with a matching name are listed.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The ID of the Organization the Load Balancer is associated with.\n"
                },
                "privateNetworkCount": {
                    "type": "integer",
                    "description": "Number of Private Networks attached to the Load balancer.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Project the Load Balancer is associated with.\n"
                },
                "routeCount": {
                    "type": "integer",
                    "description": "Number of routes the Load balancer has.\n"
                },
                "sslCompatibilityLevel": {
                    "type": "string",
                    "description": "Determines the minimal SSL version which needs to be supported on the client side.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The state of the Load Balancer Instance. Possible values are: `unknown`, `ready`, `pending`, `stopped`, `error`, `locked` and `migrating`.\n"
                },
                "subscriber": {
                    "type": "string",
                    "description": "The subscriber information.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of tags to filter for. Load Balancers with these exact tags are listed.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The offer type of the Load Balancer.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date on which the Load Balancer was updated.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the Load Balancers exist.\n"
                }
            },
            "type": "object",
            "required": [
                "backendCount",
                "createdAt",
                "description",
                "frontendCount",
                "id",
                "instances",
                "ips",
                "name",
                "organizationId",
                "privateNetworkCount",
                "projectId",
                "routeCount",
                "sslCompatibilityLevel",
                "status",
                "subscriber",
                "tags",
                "type",
                "updatedAt",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbsLbInstance:getLbsLbInstance": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date on which the Load Balancer was created.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Load Balancer.\n"
                },
                "ipAddress": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "The state of the Load Balancer Instance. Possible values are: `unknown`, `ready`, `pending`, `stopped`, `error`, `locked` and `migrating`.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date on which the Load Balancer was updated.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the Load Balancers exist.\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "id",
                "ipAddress",
                "status",
                "updatedAt",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLbsLbIp:getLbsLbIp": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Load Balancer.\n"
                },
                "ipAddress": {
                    "type": "string"
                },
                "lbId": {
                    "type": "string"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The ID of the Organization the Load Balancer is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Project the Load Balancer is associated with.\n"
                },
                "reverse": {
                    "type": "string"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the Load Balancers exist.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "ipAddress",
                "lbId",
                "organizationId",
                "projectId",
                "reverse",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLoadbalancerCertificateCustomCertificate:getLoadbalancerCertificateCustomCertificate": {
            "properties": {
                "certificateChain": {
                    "type": "string",
                    "description": "The full PEM-formatted certificate chain\n"
                }
            },
            "type": "object",
            "required": [
                "certificateChain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLoadbalancerCertificateLetsencrypt:getLoadbalancerCertificateLetsencrypt": {
            "properties": {
                "commonName": {
                    "type": "string",
                    "description": "The main domain name of the certificate\n"
                },
                "subjectAlternativeNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The alternative domain names of the certificate\n"
                }
            },
            "type": "object",
            "required": [
                "commonName",
                "subjectAlternativeNames"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getLoadbalancerPrivateNetwork:getLoadbalancerPrivateNetwork": {
            "properties": {
                "dhcpConfig": {
                    "type": "boolean",
                    "description": "Set to true if you want to let DHCP assign IP addresses\n"
                },
                "ipamIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IPAM ID of a pre-reserved IP address to assign to the Load Balancer on this Private Network\n"
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "The Private Network ID\n"
                },
                "staticConfigs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Define an IP address in the subnet of your private network that will be assigned to your load balancer instance\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of private network connection\n"
                },
                "zone": {
                    "type": "string",
                    "description": "(Defaults to provider `zone`) The zone in which the Load Balancer exists.\n"
                }
            },
            "type": "object",
            "required": [
                "dhcpConfig",
                "ipamIds",
                "privateNetworkId",
                "staticConfigs",
                "status",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getObjectBucketCorsRule:getObjectBucketCorsRule": {
            "properties": {
                "allowedHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "allowedMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "allowedOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "exposeHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "maxAgeSeconds": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "allowedHeaders",
                "allowedMethods",
                "allowedOrigins",
                "exposeHeaders",
                "maxAgeSeconds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getObjectBucketLifecycleRule:getObjectBucketLifecycleRule": {
            "properties": {
                "abortIncompleteMultipartUploadDays": {
                    "type": "integer",
                    "description": "Specifies the number of days after initiating a multipart upload when the multipart upload must be completed\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies if the configuration rule is Enabled or Disabled\n"
                },
                "expirations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getObjectBucketLifecycleRuleExpiration:getObjectBucketLifecycleRuleExpiration"
                    },
                    "description": "Specifies a period in the object's expire\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier of the bucket.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "The prefix identifying one or more objects to which the rule applies\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The tags associated with the bucket lifecycle\n"
                },
                "transitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/getObjectBucketLifecycleRuleTransition:getObjectBucketLifecycleRuleTransition"
                    },
                    "description": "Define when objects transition to another storage class\n"
                }
            },
            "type": "object",
            "required": [
                "abortIncompleteMultipartUploadDays",
                "enabled",
                "expirations",
                "id",
                "prefix",
                "tags",
                "transitions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getObjectBucketLifecycleRuleExpiration:getObjectBucketLifecycleRuleExpiration": {
            "properties": {
                "days": {
                    "type": "integer",
                    "description": "Specifies the number of days after object creation when the specific rule action takes effect\n"
                }
            },
            "type": "object",
            "required": [
                "days"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getObjectBucketLifecycleRuleTransition:getObjectBucketLifecycleRuleTransition": {
            "properties": {
                "days": {
                    "type": "integer",
                    "description": "Specifies the number of days after object creation when the specific rule action takes effect\n"
                },
                "storageClass": {
                    "type": "string",
                    "description": "Specifies the Scaleway Object Storage class to which you want the object to transition\n"
                }
            },
            "type": "object",
            "required": [
                "days",
                "storageClass"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getObjectBucketVersioning:getObjectBucketVersioning": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getRedisClusterAcl:getRedisClusterAcl": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the rule.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Redis cluster.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IPv4 network address of the rule (IP network in a CIDR format).\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getRedisClusterPrivateNetwork:getRedisClusterPrivateNetwork": {
            "properties": {
                "endpointId": {
                    "type": "string",
                    "description": "The ID of the endpoint.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Redis cluster.\n"
                },
                "serviceIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPv4 addresses of the private network with a CIDR notation\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`region`) The zone in which the server exists.\n"
                }
            },
            "type": "object",
            "required": [
                "endpointId",
                "id",
                "serviceIps",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getRedisClusterPublicNetwork:getRedisClusterPublicNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the Redis cluster.\n"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "TCP port of the endpoint\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "ips",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getSecretEphemeralPolicy:getSecretEphemeralPolicy": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Action to perform when the version of a secret expires.\n"
                },
                "expiresOnceAccessed": {
                    "type": "boolean",
                    "description": "True if the secret version expires after a single user access.\n"
                },
                "ttl": {
                    "type": "string",
                    "description": "Time frame, from one second and up to one year, during which the secret's versions are valid. Has to be specified in Go Duration format\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "expiresOnceAccessed",
                "ttl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getTemDomainReputation:getTemDomainReputation": {
            "properties": {
                "previousScore": {
                    "type": "integer",
                    "description": "The previously-calculated domain's reputation score\n"
                },
                "previousScoredAt": {
                    "type": "string",
                    "description": "Time and date the previous reputation score was calculated\n"
                },
                "score": {
                    "type": "integer",
                    "description": "A range from 0 to 100 that determines your domain's reputation score\n"
                },
                "scoredAt": {
                    "type": "string",
                    "description": "Time and date the score was calculated\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the domain's reputation\n"
                }
            },
            "type": "object",
            "required": [
                "previousScore",
                "previousScoredAt",
                "score",
                "scoredAt",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getVpcGatewayNetworkIpamConfig:getVpcGatewayNetworkIpamConfig": {
            "properties": {
                "ipamIpId": {
                    "type": "string",
                    "description": "Use this IPAM-booked IP ID as the Gateway's IP in this Private Network\n"
                },
                "pushDefaultRoute": {
                    "type": "boolean",
                    "description": "Defines whether the default route is enabled on that Gateway Network\n"
                }
            },
            "type": "object",
            "required": [
                "ipamIpId",
                "pushDefaultRoute"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getVpcPrivateNetworkIpv4Subnet:getVpcPrivateNetworkIpv4Subnet": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The network address of the subnet in dotted decimal notation, e.g., '192.168.0.0' for a '192.168.0.0/24' subnet\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the subnet\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Private Network.\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "The length of the network prefix, e.g., 24 for a 255.255.255.0 mask\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "The subnet CIDR\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "The subnet mask expressed in dotted decimal notation, e.g., '255.255.255.0' for a /24 subnet\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the subnet\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "createdAt",
                "id",
                "prefixLength",
                "subnet",
                "subnetMask",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getVpcPrivateNetworkIpv6Subnet:getVpcPrivateNetworkIpv6Subnet": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The network address of the subnet in dotted decimal notation, e.g., '192.168.0.0' for a '192.168.0.0/24' subnet\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the subnet\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Private Network.\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "The length of the network prefix, e.g., 24 for a 255.255.255.0 mask\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "The subnet CIDR\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "The subnet mask expressed in dotted decimal notation, e.g., '255.255.255.0' for a /24 subnet\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the subnet\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "createdAt",
                "id",
                "prefixLength",
                "subnet",
                "subnetMask",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getVpcRoutesRoute:getVpcRoutesRoute": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date on which the route was created (RFC 3339 format).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the route.\n"
                },
                "destination": {
                    "type": "string",
                    "description": "The destination IP or IP range of the route.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the route.\n\u003e **Important:** route IDs are regional, which means they are of the form `{region}/{id}`, e.g. `fr-par/11111111-1111-1111-1111-111111111111\n"
                },
                "nexthopIp": {
                    "type": "string",
                    "description": "The IP of the route's next hop.\n"
                },
                "nexthopName": {
                    "type": "string",
                    "description": "The name of the route's next hop.\n"
                },
                "nexthopPrivateNetworkId": {
                    "type": "string",
                    "description": "The next hop private network ID to filter for. routes with a similar next hop private network ID are listed.\n"
                },
                "nexthopResourceId": {
                    "type": "string",
                    "description": "The next hop resource ID to filter for. routes with a similar next hop resource ID are listed.\n"
                },
                "nexthopResourceType": {
                    "type": "string",
                    "description": "The next hop resource type to filter for. routes with a similar next hop resource type are listed.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the routes exist.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of tags to filter for. routes with these exact tags are listed.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC ID to filter for. routes with a similar VPC ID are listed.\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "description",
                "destination",
                "id",
                "nexthopIp",
                "nexthopName",
                "nexthopPrivateNetworkId",
                "nexthopResourceId",
                "nexthopResourceType",
                "region",
                "tags",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getVpcsVpc:getVpcsVpc": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date and time of VPC's creation (RFC 3339 format).\n"
                },
                "id": {
                    "type": "string",
                    "description": "The associated VPC ID.\n\u003e **Important:** VPC IDs are regional, which means they are of the form `{region}/{id}`, e.g. `fr-par/11111111-1111-1111-1111-111111111111\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Defines whether the VPC is the default one for its Project.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The VPC name to filter for. VPCs with a similar name are listed.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The Organization ID the VPC is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Project the VPC is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the VPCs exist.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of tags to filter for. VPCs with these exact tags are listed.\n"
                },
                "updateAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "id",
                "isDefault",
                "name",
                "organizationId",
                "projectId",
                "region",
                "tags",
                "updateAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getWebHostOfferProduct:getWebHostOfferProduct": {
            "properties": {
                "databasesQuota": {
                    "type": "integer",
                    "description": "The quota of databases.\n"
                },
                "emailAccountsQuota": {
                    "type": "integer",
                    "description": "The quota of email accounts.\n"
                },
                "emailStorageQuota": {
                    "type": "integer",
                    "description": "The quota of email storage.\n"
                },
                "hostingStorageQuota": {
                    "type": "integer",
                    "description": "The quota of hosting storage.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The offer name. Only one of `name` and `offer_id` should be specified.\n"
                },
                "option": {
                    "type": "boolean",
                    "description": "The product option.\n"
                },
                "ram": {
                    "type": "integer",
                    "description": "The capacity of the memory in GB.\n"
                },
                "supportIncluded": {
                    "type": "boolean",
                    "description": "If support is included.\n"
                },
                "vCpu": {
                    "type": "integer",
                    "description": "The number of cores.\n"
                }
            },
            "type": "object",
            "required": [
                "databasesQuota",
                "emailAccountsQuota",
                "emailStorageQuota",
                "hostingStorageQuota",
                "name",
                "option",
                "ram",
                "supportIncluded",
                "vCpu"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getWebhostingCpanelUrl:getWebhostingCpanelUrl": {
            "properties": {
                "dashboard": {
                    "type": "string"
                },
                "webmail": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dashboard",
                "webmail"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "scaleway:index/getWebhostingOption:getWebhostingOption": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the scaleway package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accessKey": {
                "type": "string",
                "description": "The Scaleway access key.\n"
            },
            "apiUrl": {
                "type": "string",
                "description": "The Scaleway API URL to use.\n"
            },
            "organizationId": {
                "type": "string",
                "description": "The Scaleway organization ID.\n"
            },
            "profile": {
                "type": "string",
                "description": "The Scaleway profile to use.\n"
            },
            "projectId": {
                "type": "string",
                "description": "The Scaleway project ID.\n"
            },
            "region": {
                "type": "string",
                "description": "The region you want to attach the resource to\n",
                "willReplaceOnChanges": true
            },
            "secretKey": {
                "type": "string",
                "description": "The Scaleway secret Key.\n"
            },
            "zone": {
                "type": "string",
                "description": "The zone you want to attach the resource to\n",
                "willReplaceOnChanges": true
            }
        },
        "inputProperties": {
            "accessKey": {
                "type": "string",
                "description": "The Scaleway access key.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_ACCESS_KEY"
                    ]
                }
            },
            "apiUrl": {
                "type": "string",
                "description": "The Scaleway API URL to use.\n"
            },
            "organizationId": {
                "type": "string",
                "description": "The Scaleway organization ID.\n"
            },
            "profile": {
                "type": "string",
                "description": "The Scaleway profile to use.\n"
            },
            "projectId": {
                "type": "string",
                "description": "The Scaleway project ID.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_PROJECT_ID"
                    ]
                }
            },
            "region": {
                "type": "string",
                "description": "The region you want to attach the resource to\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_REGION"
                    ]
                },
                "willReplaceOnChanges": true
            },
            "secretKey": {
                "type": "string",
                "description": "The Scaleway secret Key.\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_SECRET_KEY"
                    ]
                }
            },
            "zone": {
                "type": "string",
                "description": "The zone you want to attach the resource to\n",
                "defaultInfo": {
                    "environment": [
                        "SCW_DEFAULT_ZONE"
                    ]
                },
                "willReplaceOnChanges": true
            }
        }
    },
    "resources": {
        "scaleway:index/accountProject:AccountProject": {
            "description": "\n\n## Import\n\nProjects can be imported using the `id` argument, as shown below:\n\nbash\n\n```sh\n$ pulumi import scaleway:index/accountProject:AccountProject project 11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The creation time of the Project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Project.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Project.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "`organization_id`)The organization ID the Project is associated with. Any change made to the `organization_id` will recreate the resource.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The last update time of the Project.\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "organizationId",
                "updatedAt"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Project.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Project.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "`organization_id`)The organization ID the Project is associated with. Any change made to the `organization_id` will recreate the resource.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountProject resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The creation time of the Project.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Project.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Project.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "`organization_id`)The organization ID the Project is associated with. Any change made to the `organization_id` will recreate the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The last update time of the Project.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/accountSshKey:AccountSshKey": {
            "description": "The `scaleway.AccountSshKey` resource allows you to create and manage the Projects of a Scaleway Organization.\n\nRefer to the Organizations and Projects [documentation](https://www.scaleway.com/en/docs/identity-and-access-management/organizations-and-projects/) and [API documentation](https://www.scaleway.com/en/developers/api/account/project-api/) for more information.\n\n!\u003e **Important:**  The resource `scaleway.AccountSshKey` has been deprecated and will no longer be supported. Instead, use `scaleway.IamSshKey`.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.AccountSshKey(\"main\", {\n    name: \"main\",\n    publicKey: \"\u003cYOUR-PUBLIC-SSH-KEY\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.AccountSshKey(\"main\",\n    name=\"main\",\n    public_key=\"\u003cYOUR-PUBLIC-SSH-KEY\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.AccountSshKey(\"main\", new()\n    {\n        Name = \"main\",\n        PublicKey = \"\u003cYOUR-PUBLIC-SSH-KEY\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewAccountSshKey(ctx, \"main\", \u0026scaleway.AccountSshKeyArgs{\n\t\t\tName:      pulumi.String(\"main\"),\n\t\t\tPublicKey: pulumi.String(\"\u003cYOUR-PUBLIC-SSH-KEY\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.AccountSshKey;\nimport com.pulumi.scaleway.AccountSshKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new AccountSshKey(\"main\", AccountSshKeyArgs.builder()\n            .name(\"main\")\n            .publicKey(\"\u003cYOUR-PUBLIC-SSH-KEY\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:AccountSshKey\n    properties:\n      name: main\n      publicKey: \u003cYOUR-PUBLIC-SSH-KEY\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nSSH keys can be imported using the `id`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/accountSshKey:AccountSshKey main 11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the iam SSH Key\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "The SSH key status\n"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "The fingerprint of the iam SSH key\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the SSH key is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the SSH key is associated with.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public SSH key to be added.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the iam SSH Key\n"
                }
            },
            "required": [
                "createdAt",
                "fingerprint",
                "name",
                "organizationId",
                "projectId",
                "publicKey",
                "updatedAt"
            ],
            "inputProperties": {
                "disabled": {
                    "type": "boolean",
                    "description": "The SSH key status\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the SSH key is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public SSH key to be added.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "publicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountSshKey resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the iam SSH Key\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "The SSH key status\n"
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "The fingerprint of the iam SSH key\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSH key.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the SSH key is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the SSH key is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The public SSH key to be added.\n",
                        "willReplaceOnChanges": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the iam SSH Key\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/appleSiliconServer:AppleSiliconServer": {
            "description": "Creates and manages Scaleway Apple silicon. For more information,\nsee [the documentation](https://www.scaleway.com/en/developers/api/apple-silicon/).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst server = new scaleway.AppleSiliconServer(\"server\", {\n    name: \"test-m1\",\n    type: \"M1-M\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nserver = scaleway.AppleSiliconServer(\"server\",\n    name=\"test-m1\",\n    type=\"M1-M\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var server = new Scaleway.AppleSiliconServer(\"server\", new()\n    {\n        Name = \"test-m1\",\n        Type = \"M1-M\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewAppleSiliconServer(ctx, \"server\", \u0026scaleway.AppleSiliconServerArgs{\n\t\t\tName: pulumi.String(\"test-m1\"),\n\t\t\tType: pulumi.String(\"M1-M\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.AppleSiliconServer;\nimport com.pulumi.scaleway.AppleSiliconServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var server = new AppleSiliconServer(\"server\", AppleSiliconServerArgs.builder()\n            .name(\"test-m1\")\n            .type(\"M1-M\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  server:\n    type: scaleway:AppleSiliconServer\n    properties:\n      name: test-m1\n      type: M1-M\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nInstance servers can be imported using the `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/appleSiliconServer:AppleSiliconServer main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the Apple Silicon server.\n"
                },
                "deletableAt": {
                    "type": "string",
                    "description": "The minimal date and time on which you can delete this server due to Apple licence\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IPv4 address of the server (IPv4 address).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the server is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the server is\nassociated with.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the server.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The commercial type of the server. You find all the available types on\nthe [pricing page](https://www.scaleway.com/en/pricing/apple-silicon/). Updates to this field will recreate a new\nresource.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the Apple Silicon server.\n"
                },
                "vncUrl": {
                    "type": "string",
                    "description": "URL of the VNC.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which\nthe server should be created.\n"
                }
            },
            "required": [
                "createdAt",
                "deletableAt",
                "ip",
                "name",
                "organizationId",
                "projectId",
                "state",
                "type",
                "updatedAt",
                "vncUrl",
                "zone"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the server is\nassociated with.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The commercial type of the server. You find all the available types on\nthe [pricing page](https://www.scaleway.com/en/pricing/apple-silicon/). Updates to this field will recreate a new\nresource.\n",
                    "willReplaceOnChanges": true
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which\nthe server should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppleSiliconServer resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the Apple Silicon server.\n"
                    },
                    "deletableAt": {
                        "type": "string",
                        "description": "The minimal date and time on which you can delete this server due to Apple licence\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "IPv4 address of the server (IPv4 address).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the server.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the server is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the server is\nassociated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the server.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The commercial type of the server. You find all the available types on\nthe [pricing page](https://www.scaleway.com/en/pricing/apple-silicon/). Updates to this field will recreate a new\nresource.\n",
                        "willReplaceOnChanges": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the Apple Silicon server.\n"
                    },
                    "vncUrl": {
                        "type": "string",
                        "description": "URL of the VNC.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which\nthe server should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/baremetalServer:BaremetalServer": {
            "description": "Creates and manages Scaleway Compute Baremetal servers. For more information, see [the documentation](https://www.scaleway.com/en/developers/api/elastic-metal/).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = scaleway.getAccountSshKey({\n    name: \"main\",\n});\nconst base = new scaleway.BaremetalServer(\"base\", {\n    zone: \"fr-par-2\",\n    offer: \"GP-BM1-S\",\n    os: \"d17d6872-0412-45d9-a198-af82c34d3c5c\",\n    sshKeyIds: [main.then(main =\u003e main.id)],\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.get_account_ssh_key(name=\"main\")\nbase = scaleway.BaremetalServer(\"base\",\n    zone=\"fr-par-2\",\n    offer=\"GP-BM1-S\",\n    os=\"d17d6872-0412-45d9-a198-af82c34d3c5c\",\n    ssh_key_ids=[main.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Scaleway.GetAccountSshKey.Invoke(new()\n    {\n        Name = \"main\",\n    });\n\n    var @base = new Scaleway.BaremetalServer(\"base\", new()\n    {\n        Zone = \"fr-par-2\",\n        Offer = \"GP-BM1-S\",\n        Os = \"d17d6872-0412-45d9-a198-af82c34d3c5c\",\n        SshKeyIds = new[]\n        {\n            main.Apply(getAccountSshKeyResult =\u003e getAccountSshKeyResult.Id),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.LookupAccountSshKey(ctx, \u0026scaleway.LookupAccountSshKeyArgs{\n\t\t\tName: pulumi.StringRef(\"main\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewBaremetalServer(ctx, \"base\", \u0026scaleway.BaremetalServerArgs{\n\t\t\tZone:  pulumi.String(\"fr-par-2\"),\n\t\t\tOffer: pulumi.String(\"GP-BM1-S\"),\n\t\t\tOs:    pulumi.String(\"d17d6872-0412-45d9-a198-af82c34d3c5c\"),\n\t\t\tSshKeyIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(main.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetAccountSshKeyArgs;\nimport com.pulumi.scaleway.BaremetalServer;\nimport com.pulumi.scaleway.BaremetalServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = ScalewayFunctions.getAccountSshKey(GetAccountSshKeyArgs.builder()\n            .name(\"main\")\n            .build());\n\n        var base = new BaremetalServer(\"base\", BaremetalServerArgs.builder()\n            .zone(\"fr-par-2\")\n            .offer(\"GP-BM1-S\")\n            .os(\"d17d6872-0412-45d9-a198-af82c34d3c5c\")\n            .sshKeyIds(main.applyValue(getAccountSshKeyResult -\u003e getAccountSshKeyResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  base:\n    type: scaleway:BaremetalServer\n    properties:\n      zone: fr-par-2\n      offer: GP-BM1-S\n      os: d17d6872-0412-45d9-a198-af82c34d3c5c\n      sshKeyIds:\n        - ${main.id}\nvariables:\n  main:\n    fn::invoke:\n      Function: scaleway:getAccountSshKey\n      Arguments:\n        name: main\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### With option\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = scaleway.getAccountSshKey({\n    name: \"main\",\n});\nconst myOs = scaleway.getBaremetalOs({\n    zone: \"fr-par-2\",\n    name: \"Ubuntu\",\n    version: \"22.04 LTS (Jammy Jellyfish)\",\n});\nconst myOffer = scaleway.getBaremetalOffer({\n    zone: \"fr-par-2\",\n    name: \"EM-B112X-SSD\",\n});\nconst privateNetwork = scaleway.getBaremetalOption({\n    zone: \"fr-par-2\",\n    name: \"Private Network\",\n});\nconst remoteAccess = scaleway.getBaremetalOption({\n    zone: \"fr-par-2\",\n    name: \"Remote Access\",\n});\nconst base = new scaleway.BaremetalServer(\"base\", {\n    zone: \"fr-par-2\",\n    offer: myOffer.then(myOffer =\u003e myOffer.offerId),\n    os: myOs.then(myOs =\u003e myOs.osId),\n    sshKeyIds: [main.then(main =\u003e main.id)],\n    options: [\n        {\n            id: privateNetwork.then(privateNetwork =\u003e privateNetwork.optionId),\n        },\n        {\n            id: remoteAccess.then(remoteAccess =\u003e remoteAccess.optionId),\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.get_account_ssh_key(name=\"main\")\nmy_os = scaleway.get_baremetal_os(zone=\"fr-par-2\",\n    name=\"Ubuntu\",\n    version=\"22.04 LTS (Jammy Jellyfish)\")\nmy_offer = scaleway.get_baremetal_offer(zone=\"fr-par-2\",\n    name=\"EM-B112X-SSD\")\nprivate_network = scaleway.get_baremetal_option(zone=\"fr-par-2\",\n    name=\"Private Network\")\nremote_access = scaleway.get_baremetal_option(zone=\"fr-par-2\",\n    name=\"Remote Access\")\nbase = scaleway.BaremetalServer(\"base\",\n    zone=\"fr-par-2\",\n    offer=my_offer.offer_id,\n    os=my_os.os_id,\n    ssh_key_ids=[main.id],\n    options=[\n        {\n            \"id\": private_network.option_id,\n        },\n        {\n            \"id\": remote_access.option_id,\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Scaleway.GetAccountSshKey.Invoke(new()\n    {\n        Name = \"main\",\n    });\n\n    var myOs = Scaleway.GetBaremetalOs.Invoke(new()\n    {\n        Zone = \"fr-par-2\",\n        Name = \"Ubuntu\",\n        Version = \"22.04 LTS (Jammy Jellyfish)\",\n    });\n\n    var myOffer = Scaleway.GetBaremetalOffer.Invoke(new()\n    {\n        Zone = \"fr-par-2\",\n        Name = \"EM-B112X-SSD\",\n    });\n\n    var privateNetwork = Scaleway.GetBaremetalOption.Invoke(new()\n    {\n        Zone = \"fr-par-2\",\n        Name = \"Private Network\",\n    });\n\n    var remoteAccess = Scaleway.GetBaremetalOption.Invoke(new()\n    {\n        Zone = \"fr-par-2\",\n        Name = \"Remote Access\",\n    });\n\n    var @base = new Scaleway.BaremetalServer(\"base\", new()\n    {\n        Zone = \"fr-par-2\",\n        Offer = myOffer.Apply(getBaremetalOfferResult =\u003e getBaremetalOfferResult.OfferId),\n        Os = myOs.Apply(getBaremetalOsResult =\u003e getBaremetalOsResult.OsId),\n        SshKeyIds = new[]\n        {\n            main.Apply(getAccountSshKeyResult =\u003e getAccountSshKeyResult.Id),\n        },\n        Options = new[]\n        {\n            new Scaleway.Inputs.BaremetalServerOptionArgs\n            {\n                Id = privateNetwork.Apply(getBaremetalOptionResult =\u003e getBaremetalOptionResult.OptionId),\n            },\n            new Scaleway.Inputs.BaremetalServerOptionArgs\n            {\n                Id = remoteAccess.Apply(getBaremetalOptionResult =\u003e getBaremetalOptionResult.OptionId),\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.LookupAccountSshKey(ctx, \u0026scaleway.LookupAccountSshKeyArgs{\n\t\t\tName: pulumi.StringRef(\"main\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyOs, err := scaleway.GetBaremetalOs(ctx, \u0026scaleway.GetBaremetalOsArgs{\n\t\t\tZone:    pulumi.StringRef(\"fr-par-2\"),\n\t\t\tName:    pulumi.StringRef(\"Ubuntu\"),\n\t\t\tVersion: pulumi.StringRef(\"22.04 LTS (Jammy Jellyfish)\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyOffer, err := scaleway.GetBaremetalOffer(ctx, \u0026scaleway.GetBaremetalOfferArgs{\n\t\t\tZone: pulumi.StringRef(\"fr-par-2\"),\n\t\t\tName: pulumi.StringRef(\"EM-B112X-SSD\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tprivateNetwork, err := scaleway.GetBaremetalOption(ctx, \u0026scaleway.GetBaremetalOptionArgs{\n\t\t\tZone: pulumi.StringRef(\"fr-par-2\"),\n\t\t\tName: pulumi.StringRef(\"Private Network\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tremoteAccess, err := scaleway.GetBaremetalOption(ctx, \u0026scaleway.GetBaremetalOptionArgs{\n\t\t\tZone: pulumi.StringRef(\"fr-par-2\"),\n\t\t\tName: pulumi.StringRef(\"Remote Access\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewBaremetalServer(ctx, \"base\", \u0026scaleway.BaremetalServerArgs{\n\t\t\tZone:  pulumi.String(\"fr-par-2\"),\n\t\t\tOffer: pulumi.String(myOffer.OfferId),\n\t\t\tOs:    pulumi.String(myOs.OsId),\n\t\t\tSshKeyIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(main.Id),\n\t\t\t},\n\t\t\tOptions: scaleway.BaremetalServerOptionArray{\n\t\t\t\t\u0026scaleway.BaremetalServerOptionArgs{\n\t\t\t\t\tId: pulumi.String(privateNetwork.OptionId),\n\t\t\t\t},\n\t\t\t\t\u0026scaleway.BaremetalServerOptionArgs{\n\t\t\t\t\tId: pulumi.String(remoteAccess.OptionId),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetAccountSshKeyArgs;\nimport com.pulumi.scaleway.inputs.GetBaremetalOsArgs;\nimport com.pulumi.scaleway.inputs.GetBaremetalOfferArgs;\nimport com.pulumi.scaleway.inputs.GetBaremetalOptionArgs;\nimport com.pulumi.scaleway.BaremetalServer;\nimport com.pulumi.scaleway.BaremetalServerArgs;\nimport com.pulumi.scaleway.inputs.BaremetalServerOptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = ScalewayFunctions.getAccountSshKey(GetAccountSshKeyArgs.builder()\n            .name(\"main\")\n            .build());\n\n        final var myOs = ScalewayFunctions.getBaremetalOs(GetBaremetalOsArgs.builder()\n            .zone(\"fr-par-2\")\n            .name(\"Ubuntu\")\n            .version(\"22.04 LTS (Jammy Jellyfish)\")\n            .build());\n\n        final var myOffer = ScalewayFunctions.getBaremetalOffer(GetBaremetalOfferArgs.builder()\n            .zone(\"fr-par-2\")\n            .name(\"EM-B112X-SSD\")\n            .build());\n\n        final var privateNetwork = ScalewayFunctions.getBaremetalOption(GetBaremetalOptionArgs.builder()\n            .zone(\"fr-par-2\")\n            .name(\"Private Network\")\n            .build());\n\n        final var remoteAccess = ScalewayFunctions.getBaremetalOption(GetBaremetalOptionArgs.builder()\n            .zone(\"fr-par-2\")\n            .name(\"Remote Access\")\n            .build());\n\n        var base = new BaremetalServer(\"base\", BaremetalServerArgs.builder()\n            .zone(\"fr-par-2\")\n            .offer(myOffer.applyValue(getBaremetalOfferResult -\u003e getBaremetalOfferResult.offerId()))\n            .os(myOs.applyValue(getBaremetalOsResult -\u003e getBaremetalOsResult.osId()))\n            .sshKeyIds(main.applyValue(getAccountSshKeyResult -\u003e getAccountSshKeyResult.id()))\n            .options(            \n                BaremetalServerOptionArgs.builder()\n                    .id(privateNetwork.applyValue(getBaremetalOptionResult -\u003e getBaremetalOptionResult.optionId()))\n                    .build(),\n                BaremetalServerOptionArgs.builder()\n                    .id(remoteAccess.applyValue(getBaremetalOptionResult -\u003e getBaremetalOptionResult.optionId()))\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  base:\n    type: scaleway:BaremetalServer\n    properties:\n      zone: fr-par-2\n      offer: ${myOffer.offerId}\n      os: ${myOs.osId}\n      sshKeyIds:\n        - ${main.id}\n      options:\n        - id: ${privateNetwork.optionId}\n        - id: ${remoteAccess.optionId}\nvariables:\n  main:\n    fn::invoke:\n      Function: scaleway:getAccountSshKey\n      Arguments:\n        name: main\n  myOs:\n    fn::invoke:\n      Function: scaleway:getBaremetalOs\n      Arguments:\n        zone: fr-par-2\n        name: Ubuntu\n        version: 22.04 LTS (Jammy Jellyfish)\n  myOffer:\n    fn::invoke:\n      Function: scaleway:getBaremetalOffer\n      Arguments:\n        zone: fr-par-2\n        name: EM-B112X-SSD\n  privateNetwork:\n    fn::invoke:\n      Function: scaleway:getBaremetalOption\n      Arguments:\n        zone: fr-par-2\n        name: Private Network\n  remoteAccess:\n    fn::invoke:\n      Function: scaleway:getBaremetalOption\n      Arguments:\n        zone: fr-par-2\n        name: Remote Access\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### With private network\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = scaleway.getAccountSshKey({\n    name: \"main\",\n});\nconst myOs = scaleway.getBaremetalOs({\n    zone: \"fr-par-2\",\n    name: \"Ubuntu\",\n    version: \"22.04 LTS (Jammy Jellyfish)\",\n});\nconst myOffer = scaleway.getBaremetalOffer({\n    zone: \"fr-par-2\",\n    name: \"EM-B112X-SSD\",\n});\nconst privateNetwork = scaleway.getBaremetalOption({\n    zone: \"fr-par-2\",\n    name: \"Private Network\",\n});\nconst pn = new scaleway.VpcPrivateNetwork(\"pn\", {\n    region: \"fr-par\",\n    name: \"baremetal_private_network\",\n});\nconst base = new scaleway.BaremetalServer(\"base\", {\n    zone: \"fr-par-2\",\n    offer: myOffer.then(myOffer =\u003e myOffer.offerId),\n    os: myOs.then(myOs =\u003e myOs.osId),\n    sshKeyIds: [main.then(main =\u003e main.id)],\n    options: [{\n        id: privateNetwork.then(privateNetwork =\u003e privateNetwork.optionId),\n    }],\n    privateNetworks: [{\n        id: pn.id,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.get_account_ssh_key(name=\"main\")\nmy_os = scaleway.get_baremetal_os(zone=\"fr-par-2\",\n    name=\"Ubuntu\",\n    version=\"22.04 LTS (Jammy Jellyfish)\")\nmy_offer = scaleway.get_baremetal_offer(zone=\"fr-par-2\",\n    name=\"EM-B112X-SSD\")\nprivate_network = scaleway.get_baremetal_option(zone=\"fr-par-2\",\n    name=\"Private Network\")\npn = scaleway.VpcPrivateNetwork(\"pn\",\n    region=\"fr-par\",\n    name=\"baremetal_private_network\")\nbase = scaleway.BaremetalServer(\"base\",\n    zone=\"fr-par-2\",\n    offer=my_offer.offer_id,\n    os=my_os.os_id,\n    ssh_key_ids=[main.id],\n    options=[{\n        \"id\": private_network.option_id,\n    }],\n    private_networks=[{\n        \"id\": pn.id,\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Scaleway.GetAccountSshKey.Invoke(new()\n    {\n        Name = \"main\",\n    });\n\n    var myOs = Scaleway.GetBaremetalOs.Invoke(new()\n    {\n        Zone = \"fr-par-2\",\n        Name = \"Ubuntu\",\n        Version = \"22.04 LTS (Jammy Jellyfish)\",\n    });\n\n    var myOffer = Scaleway.GetBaremetalOffer.Invoke(new()\n    {\n        Zone = \"fr-par-2\",\n        Name = \"EM-B112X-SSD\",\n    });\n\n    var privateNetwork = Scaleway.GetBaremetalOption.Invoke(new()\n    {\n        Zone = \"fr-par-2\",\n        Name = \"Private Network\",\n    });\n\n    var pn = new Scaleway.VpcPrivateNetwork(\"pn\", new()\n    {\n        Region = \"fr-par\",\n        Name = \"baremetal_private_network\",\n    });\n\n    var @base = new Scaleway.BaremetalServer(\"base\", new()\n    {\n        Zone = \"fr-par-2\",\n        Offer = myOffer.Apply(getBaremetalOfferResult =\u003e getBaremetalOfferResult.OfferId),\n        Os = myOs.Apply(getBaremetalOsResult =\u003e getBaremetalOsResult.OsId),\n        SshKeyIds = new[]\n        {\n            main.Apply(getAccountSshKeyResult =\u003e getAccountSshKeyResult.Id),\n        },\n        Options = new[]\n        {\n            new Scaleway.Inputs.BaremetalServerOptionArgs\n            {\n                Id = privateNetwork.Apply(getBaremetalOptionResult =\u003e getBaremetalOptionResult.OptionId),\n            },\n        },\n        PrivateNetworks = new[]\n        {\n            new Scaleway.Inputs.BaremetalServerPrivateNetworkArgs\n            {\n                Id = pn.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.LookupAccountSshKey(ctx, \u0026scaleway.LookupAccountSshKeyArgs{\n\t\t\tName: pulumi.StringRef(\"main\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyOs, err := scaleway.GetBaremetalOs(ctx, \u0026scaleway.GetBaremetalOsArgs{\n\t\t\tZone:    pulumi.StringRef(\"fr-par-2\"),\n\t\t\tName:    pulumi.StringRef(\"Ubuntu\"),\n\t\t\tVersion: pulumi.StringRef(\"22.04 LTS (Jammy Jellyfish)\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyOffer, err := scaleway.GetBaremetalOffer(ctx, \u0026scaleway.GetBaremetalOfferArgs{\n\t\t\tZone: pulumi.StringRef(\"fr-par-2\"),\n\t\t\tName: pulumi.StringRef(\"EM-B112X-SSD\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tprivateNetwork, err := scaleway.GetBaremetalOption(ctx, \u0026scaleway.GetBaremetalOptionArgs{\n\t\t\tZone: pulumi.StringRef(\"fr-par-2\"),\n\t\t\tName: pulumi.StringRef(\"Private Network\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpn, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tRegion: pulumi.String(\"fr-par\"),\n\t\t\tName:   pulumi.String(\"baremetal_private_network\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewBaremetalServer(ctx, \"base\", \u0026scaleway.BaremetalServerArgs{\n\t\t\tZone:  pulumi.String(\"fr-par-2\"),\n\t\t\tOffer: pulumi.String(myOffer.OfferId),\n\t\t\tOs:    pulumi.String(myOs.OsId),\n\t\t\tSshKeyIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(main.Id),\n\t\t\t},\n\t\t\tOptions: scaleway.BaremetalServerOptionArray{\n\t\t\t\t\u0026scaleway.BaremetalServerOptionArgs{\n\t\t\t\t\tId: pulumi.String(privateNetwork.OptionId),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPrivateNetworks: scaleway.BaremetalServerPrivateNetworkArray{\n\t\t\t\t\u0026scaleway.BaremetalServerPrivateNetworkArgs{\n\t\t\t\t\tId: pn.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetAccountSshKeyArgs;\nimport com.pulumi.scaleway.inputs.GetBaremetalOsArgs;\nimport com.pulumi.scaleway.inputs.GetBaremetalOfferArgs;\nimport com.pulumi.scaleway.inputs.GetBaremetalOptionArgs;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.BaremetalServer;\nimport com.pulumi.scaleway.BaremetalServerArgs;\nimport com.pulumi.scaleway.inputs.BaremetalServerOptionArgs;\nimport com.pulumi.scaleway.inputs.BaremetalServerPrivateNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = ScalewayFunctions.getAccountSshKey(GetAccountSshKeyArgs.builder()\n            .name(\"main\")\n            .build());\n\n        final var myOs = ScalewayFunctions.getBaremetalOs(GetBaremetalOsArgs.builder()\n            .zone(\"fr-par-2\")\n            .name(\"Ubuntu\")\n            .version(\"22.04 LTS (Jammy Jellyfish)\")\n            .build());\n\n        final var myOffer = ScalewayFunctions.getBaremetalOffer(GetBaremetalOfferArgs.builder()\n            .zone(\"fr-par-2\")\n            .name(\"EM-B112X-SSD\")\n            .build());\n\n        final var privateNetwork = ScalewayFunctions.getBaremetalOption(GetBaremetalOptionArgs.builder()\n            .zone(\"fr-par-2\")\n            .name(\"Private Network\")\n            .build());\n\n        var pn = new VpcPrivateNetwork(\"pn\", VpcPrivateNetworkArgs.builder()\n            .region(\"fr-par\")\n            .name(\"baremetal_private_network\")\n            .build());\n\n        var base = new BaremetalServer(\"base\", BaremetalServerArgs.builder()\n            .zone(\"fr-par-2\")\n            .offer(myOffer.applyValue(getBaremetalOfferResult -\u003e getBaremetalOfferResult.offerId()))\n            .os(myOs.applyValue(getBaremetalOsResult -\u003e getBaremetalOsResult.osId()))\n            .sshKeyIds(main.applyValue(getAccountSshKeyResult -\u003e getAccountSshKeyResult.id()))\n            .options(BaremetalServerOptionArgs.builder()\n                .id(privateNetwork.applyValue(getBaremetalOptionResult -\u003e getBaremetalOptionResult.optionId()))\n                .build())\n            .privateNetworks(BaremetalServerPrivateNetworkArgs.builder()\n                .id(pn.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pn:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      region: fr-par\n      name: baremetal_private_network\n  base:\n    type: scaleway:BaremetalServer\n    properties:\n      zone: fr-par-2\n      offer: ${myOffer.offerId}\n      os: ${myOs.osId}\n      sshKeyIds:\n        - ${main.id}\n      options:\n        - id: ${privateNetwork.optionId}\n      privateNetworks:\n        - id: ${pn.id}\nvariables:\n  main:\n    fn::invoke:\n      Function: scaleway:getAccountSshKey\n      Arguments:\n        name: main\n  myOs:\n    fn::invoke:\n      Function: scaleway:getBaremetalOs\n      Arguments:\n        zone: fr-par-2\n        name: Ubuntu\n        version: 22.04 LTS (Jammy Jellyfish)\n  myOffer:\n    fn::invoke:\n      Function: scaleway:getBaremetalOffer\n      Arguments:\n        zone: fr-par-2\n        name: EM-B112X-SSD\n  privateNetwork:\n    fn::invoke:\n      Function: scaleway:getBaremetalOption\n      Arguments:\n        zone: fr-par-2\n        name: Private Network\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Without install config\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst myOffer = scaleway.getBaremetalOffer({\n    zone: \"fr-par-2\",\n    name: \"EM-B112X-SSD\",\n});\nconst base = new scaleway.BaremetalServer(\"base\", {\n    zone: \"fr-par-2\",\n    offer: myOffer.then(myOffer =\u003e myOffer.offerId),\n    installConfigAfterward: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\nmy_offer = scaleway.get_baremetal_offer(zone=\"fr-par-2\",\n    name=\"EM-B112X-SSD\")\nbase = scaleway.BaremetalServer(\"base\",\n    zone=\"fr-par-2\",\n    offer=my_offer.offer_id,\n    install_config_afterward=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myOffer = Scaleway.GetBaremetalOffer.Invoke(new()\n    {\n        Zone = \"fr-par-2\",\n        Name = \"EM-B112X-SSD\",\n    });\n\n    var @base = new Scaleway.BaremetalServer(\"base\", new()\n    {\n        Zone = \"fr-par-2\",\n        Offer = myOffer.Apply(getBaremetalOfferResult =\u003e getBaremetalOfferResult.OfferId),\n        InstallConfigAfterward = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyOffer, err := scaleway.GetBaremetalOffer(ctx, \u0026scaleway.GetBaremetalOfferArgs{\n\t\t\tZone: pulumi.StringRef(\"fr-par-2\"),\n\t\t\tName: pulumi.StringRef(\"EM-B112X-SSD\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewBaremetalServer(ctx, \"base\", \u0026scaleway.BaremetalServerArgs{\n\t\t\tZone:                   pulumi.String(\"fr-par-2\"),\n\t\t\tOffer:                  pulumi.String(myOffer.OfferId),\n\t\t\tInstallConfigAfterward: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetBaremetalOfferArgs;\nimport com.pulumi.scaleway.BaremetalServer;\nimport com.pulumi.scaleway.BaremetalServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myOffer = ScalewayFunctions.getBaremetalOffer(GetBaremetalOfferArgs.builder()\n            .zone(\"fr-par-2\")\n            .name(\"EM-B112X-SSD\")\n            .build());\n\n        var base = new BaremetalServer(\"base\", BaremetalServerArgs.builder()\n            .zone(\"fr-par-2\")\n            .offer(myOffer.applyValue(getBaremetalOfferResult -\u003e getBaremetalOfferResult.offerId()))\n            .installConfigAfterward(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  base:\n    type: scaleway:BaremetalServer\n    properties:\n      zone: fr-par-2\n      offer: ${myOffer.offerId}\n      installConfigAfterward: true\nvariables:\n  myOffer:\n    fn::invoke:\n      Function: scaleway:getBaremetalOffer\n      Arguments:\n        zone: fr-par-2\n        name: EM-B112X-SSD\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nBaremetal servers can be imported using the `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/baremetalServer:BaremetalServer web fr-par-2/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A description for the server.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the server.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname of the server.\n"
                },
                "installConfigAfterward": {
                    "type": "boolean",
                    "description": "If True, this boolean allows to create a server without the install config if you want to provide it later.\n"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/BaremetalServerIp:BaremetalServerIp"
                    },
                    "description": "(List of) The IPs of the server.\n"
                },
                "ipv4s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/BaremetalServerIpv4:BaremetalServerIpv4"
                    },
                    "description": "(List of) The IPv4 addresses of the server.\n"
                },
                "ipv6s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/BaremetalServerIpv6:BaremetalServerIpv6"
                    },
                    "description": "(List of) The IPv6 addresses of the server.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n"
                },
                "offer": {
                    "type": "string",
                    "description": "The offer name or UUID of the baremetal server.\nUse [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-servers-get-a-specific-elastic-metal-server) to find the right offer.\n\n\u003e **Important:** Updates to `offer` will recreate the server.\n"
                },
                "offerId": {
                    "type": "string",
                    "description": "The ID of the offer.\n"
                },
                "offerName": {
                    "type": "string",
                    "description": "The name of the offer.\n"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/BaremetalServerOption:BaremetalServerOption"
                    },
                    "description": "The options to enable on the server.\n\u003e The `options` block supports:\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the server is associated with.\n"
                },
                "os": {
                    "type": "string",
                    "description": "The UUID of the os to install on the server.\nUse [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-os-list-available-oses) to find the right OS ID.\n\u003e **Important:** Updates to `os` will reinstall the server.\n"
                },
                "osName": {
                    "type": "string",
                    "description": "The name of the os.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password used for the installation. May be required depending on used os.\n",
                    "secret": true
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/BaremetalServerPrivateNetwork:BaremetalServerPrivateNetwork"
                    },
                    "description": "The private networks to attach to the server. For more information, see [the documentation](https://www.scaleway.com/en/docs/compute/elastic-metal/how-to/use-private-networks/)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the server is associated with.\n"
                },
                "reinstallOnConfigChanges": {
                    "type": "boolean",
                    "description": "If True, this boolean allows to reinstall the server on install config changes.\n\u003e **Important:** Updates to `ssh_key_ids`, `user`, `password`, `service_user` or `service_password` will not take effect on the server, it requires to reinstall it. To do so please set 'reinstall_on_config_changes' argument to true.\n"
                },
                "servicePassword": {
                    "type": "string",
                    "description": "Password used for the service to install. May be required depending on used os.\n",
                    "secret": true
                },
                "serviceUser": {
                    "type": "string",
                    "description": "User used for the service to install.\n"
                },
                "sshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of SSH keys allowed to connect to the server.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the server.\n"
                },
                "user": {
                    "type": "string",
                    "description": "User used for the installation.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server should be created.\n"
                }
            },
            "required": [
                "domain",
                "ips",
                "ipv4s",
                "ipv6s",
                "name",
                "offer",
                "offerId",
                "offerName",
                "organizationId",
                "osName",
                "projectId",
                "serviceUser",
                "tags",
                "user",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description for the server.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname of the server.\n"
                },
                "installConfigAfterward": {
                    "type": "boolean",
                    "description": "If True, this boolean allows to create a server without the install config if you want to provide it later.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n"
                },
                "offer": {
                    "type": "string",
                    "description": "The offer name or UUID of the baremetal server.\nUse [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-servers-get-a-specific-elastic-metal-server) to find the right offer.\n\n\u003e **Important:** Updates to `offer` will recreate the server.\n",
                    "willReplaceOnChanges": true
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/BaremetalServerOption:BaremetalServerOption"
                    },
                    "description": "The options to enable on the server.\n\u003e The `options` block supports:\n"
                },
                "os": {
                    "type": "string",
                    "description": "The UUID of the os to install on the server.\nUse [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-os-list-available-oses) to find the right OS ID.\n\u003e **Important:** Updates to `os` will reinstall the server.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password used for the installation. May be required depending on used os.\n",
                    "secret": true
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/BaremetalServerPrivateNetwork:BaremetalServerPrivateNetwork"
                    },
                    "description": "The private networks to attach to the server. For more information, see [the documentation](https://www.scaleway.com/en/docs/compute/elastic-metal/how-to/use-private-networks/)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the server is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "reinstallOnConfigChanges": {
                    "type": "boolean",
                    "description": "If True, this boolean allows to reinstall the server on install config changes.\n\u003e **Important:** Updates to `ssh_key_ids`, `user`, `password`, `service_user` or `service_password` will not take effect on the server, it requires to reinstall it. To do so please set 'reinstall_on_config_changes' argument to true.\n"
                },
                "servicePassword": {
                    "type": "string",
                    "description": "Password used for the service to install. May be required depending on used os.\n",
                    "secret": true
                },
                "serviceUser": {
                    "type": "string",
                    "description": "User used for the service to install.\n"
                },
                "sshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of SSH keys allowed to connect to the server.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the server.\n"
                },
                "user": {
                    "type": "string",
                    "description": "User used for the installation.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "offer"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BaremetalServer resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description for the server.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain of the server.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname of the server.\n"
                    },
                    "installConfigAfterward": {
                        "type": "boolean",
                        "description": "If True, this boolean allows to create a server without the install config if you want to provide it later.\n"
                    },
                    "ips": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/BaremetalServerIp:BaremetalServerIp"
                        },
                        "description": "(List of) The IPs of the server.\n"
                    },
                    "ipv4s": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/BaremetalServerIpv4:BaremetalServerIpv4"
                        },
                        "description": "(List of) The IPv4 addresses of the server.\n"
                    },
                    "ipv6s": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/BaremetalServerIpv6:BaremetalServerIpv6"
                        },
                        "description": "(List of) The IPv6 addresses of the server.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the server.\n"
                    },
                    "offer": {
                        "type": "string",
                        "description": "The offer name or UUID of the baremetal server.\nUse [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-servers-get-a-specific-elastic-metal-server) to find the right offer.\n\n\u003e **Important:** Updates to `offer` will recreate the server.\n",
                        "willReplaceOnChanges": true
                    },
                    "offerId": {
                        "type": "string",
                        "description": "The ID of the offer.\n"
                    },
                    "offerName": {
                        "type": "string",
                        "description": "The name of the offer.\n"
                    },
                    "options": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/BaremetalServerOption:BaremetalServerOption"
                        },
                        "description": "The options to enable on the server.\n\u003e The `options` block supports:\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the server is associated with.\n"
                    },
                    "os": {
                        "type": "string",
                        "description": "The UUID of the os to install on the server.\nUse [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-os-list-available-oses) to find the right OS ID.\n\u003e **Important:** Updates to `os` will reinstall the server.\n"
                    },
                    "osName": {
                        "type": "string",
                        "description": "The name of the os.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password used for the installation. May be required depending on used os.\n",
                        "secret": true
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/BaremetalServerPrivateNetwork:BaremetalServerPrivateNetwork"
                        },
                        "description": "The private networks to attach to the server. For more information, see [the documentation](https://www.scaleway.com/en/docs/compute/elastic-metal/how-to/use-private-networks/)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the server is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "reinstallOnConfigChanges": {
                        "type": "boolean",
                        "description": "If True, this boolean allows to reinstall the server on install config changes.\n\u003e **Important:** Updates to `ssh_key_ids`, `user`, `password`, `service_user` or `service_password` will not take effect on the server, it requires to reinstall it. To do so please set 'reinstall_on_config_changes' argument to true.\n"
                    },
                    "servicePassword": {
                        "type": "string",
                        "description": "Password used for the service to install. May be required depending on used os.\n",
                        "secret": true
                    },
                    "serviceUser": {
                        "type": "string",
                        "description": "User used for the service to install.\n"
                    },
                    "sshKeyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of SSH keys allowed to connect to the server.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the server.\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "User used for the installation.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the server should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/blockSnapshot:BlockSnapshot": {
            "description": "The `scaleway.BlockSnapshot` resource is used to create and manage snapshots of Block Storage volumes.\n\nRefer to the Block Storage [product documentation](https://www.scaleway.com/en/docs/storage/block/) and [API documentation](https://www.scaleway.com/en/developers/api/block/) for more information.\n\n\n## Example Usage\n\n### Create a snapshot of a Block Storage volume\n\nThe following command allows you to create a snapshot (`some-snapshot-name`) from a Block Storage volume specified by its ID.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst blockVolume = new scaleway.BlockVolume(\"block_volume\", {\n    iops: 5000,\n    name: \"some-volume-name\",\n    sizeInGb: 20,\n});\nconst blockSnapshot = new scaleway.BlockSnapshot(\"block_snapshot\", {\n    name: \"some-snapshot-name\",\n    volumeId: blockVolume.id,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nblock_volume = scaleway.BlockVolume(\"block_volume\",\n    iops=5000,\n    name=\"some-volume-name\",\n    size_in_gb=20)\nblock_snapshot = scaleway.BlockSnapshot(\"block_snapshot\",\n    name=\"some-snapshot-name\",\n    volume_id=block_volume.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var blockVolume = new Scaleway.BlockVolume(\"block_volume\", new()\n    {\n        Iops = 5000,\n        Name = \"some-volume-name\",\n        SizeInGb = 20,\n    });\n\n    var blockSnapshot = new Scaleway.BlockSnapshot(\"block_snapshot\", new()\n    {\n        Name = \"some-snapshot-name\",\n        VolumeId = blockVolume.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tblockVolume, err := scaleway.NewBlockVolume(ctx, \"block_volume\", \u0026scaleway.BlockVolumeArgs{\n\t\t\tIops:     pulumi.Int(5000),\n\t\t\tName:     pulumi.String(\"some-volume-name\"),\n\t\t\tSizeInGb: pulumi.Int(20),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewBlockSnapshot(ctx, \"block_snapshot\", \u0026scaleway.BlockSnapshotArgs{\n\t\t\tName:     pulumi.String(\"some-snapshot-name\"),\n\t\t\tVolumeId: blockVolume.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.BlockVolume;\nimport com.pulumi.scaleway.BlockVolumeArgs;\nimport com.pulumi.scaleway.BlockSnapshot;\nimport com.pulumi.scaleway.BlockSnapshotArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var blockVolume = new BlockVolume(\"blockVolume\", BlockVolumeArgs.builder()\n            .iops(5000)\n            .name(\"some-volume-name\")\n            .sizeInGb(20)\n            .build());\n\n        var blockSnapshot = new BlockSnapshot(\"blockSnapshot\", BlockSnapshotArgs.builder()\n            .name(\"some-snapshot-name\")\n            .volumeId(blockVolume.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  blockVolume:\n    type: scaleway:BlockVolume\n    name: block_volume\n    properties:\n      iops: 5000\n      name: some-volume-name\n      sizeInGb: 20\n  blockSnapshot:\n    type: scaleway:BlockSnapshot\n    name: block_snapshot\n    properties:\n      name: some-snapshot-name\n      volumeId: ${blockVolume.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nThis section explains how to import the snapshot of a Block Storage volume using the zoned ID format (`{zone}/{id}`).\n\nbash\n\n```sh\n$ pulumi import scaleway:index/blockSnapshot:BlockSnapshot main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the snapshot. If not provided, a name will be randomly generated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "). The ID of the Scaleway Project the snapshot is associated with.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the snapshot.\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "The ID of the volume to take a snapshot from.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "). The zone in which the snapshot should be created.\n"
                }
            },
            "required": [
                "name",
                "projectId",
                "volumeId",
                "zone"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the snapshot. If not provided, a name will be randomly generated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "). The ID of the Scaleway Project the snapshot is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the snapshot.\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "The ID of the volume to take a snapshot from.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "). The zone in which the snapshot should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "volumeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BlockSnapshot resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the snapshot. If not provided, a name will be randomly generated.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "). The ID of the Scaleway Project the snapshot is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags to apply to the snapshot.\n"
                    },
                    "volumeId": {
                        "type": "string",
                        "description": "The ID of the volume to take a snapshot from.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "). The zone in which the snapshot should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/blockVolume:BlockVolume": {
            "description": "The `scaleway.BlockVolume` resource is used to create and manage Scaleway Block Storage volumes.\n\nRefer to the Block Storage [product documentation](https://www.scaleway.com/en/docs/storage/block/) and [API documentation](https://www.scaleway.com/en/developers/api/block/) for more information.\n\n\n## Example Usage\n\n### Create a Block Storage volume\n\nThe following command allows you to create a Block Storage volume of 20 GB with a 5000 [IOPS](https://www.scaleway.com/en/docs/storage/block/concepts/#iops).\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst blockVolume = new scaleway.BlockVolume(\"block_volume\", {\n    iops: 5000,\n    name: \"some-volume-name\",\n    sizeInGb: 20,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nblock_volume = scaleway.BlockVolume(\"block_volume\",\n    iops=5000,\n    name=\"some-volume-name\",\n    size_in_gb=20)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var blockVolume = new Scaleway.BlockVolume(\"block_volume\", new()\n    {\n        Iops = 5000,\n        Name = \"some-volume-name\",\n        SizeInGb = 20,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewBlockVolume(ctx, \"block_volume\", \u0026scaleway.BlockVolumeArgs{\n\t\t\tIops:     pulumi.Int(5000),\n\t\t\tName:     pulumi.String(\"some-volume-name\"),\n\t\t\tSizeInGb: pulumi.Int(20),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.BlockVolume;\nimport com.pulumi.scaleway.BlockVolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var blockVolume = new BlockVolume(\"blockVolume\", BlockVolumeArgs.builder()\n            .iops(5000)\n            .name(\"some-volume-name\")\n            .sizeInGb(20)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  blockVolume:\n    type: scaleway:BlockVolume\n    name: block_volume\n    properties:\n      iops: 5000\n      name: some-volume-name\n      sizeInGb: 20\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### With snapshot\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst base = new scaleway.BlockVolume(\"base\", {\n    name: \"block-volume-base\",\n    iops: 5000,\n    sizeInGb: 20,\n});\nconst main = new scaleway.BlockSnapshot(\"main\", {\n    name: \"block-volume-from-snapshot\",\n    volumeId: base.id,\n});\nconst mainBlockVolume = new scaleway.BlockVolume(\"main\", {\n    name: \"block-volume-from-snapshot\",\n    iops: 5000,\n    snapshotId: main.id,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nbase = scaleway.BlockVolume(\"base\",\n    name=\"block-volume-base\",\n    iops=5000,\n    size_in_gb=20)\nmain = scaleway.BlockSnapshot(\"main\",\n    name=\"block-volume-from-snapshot\",\n    volume_id=base.id)\nmain_block_volume = scaleway.BlockVolume(\"main\",\n    name=\"block-volume-from-snapshot\",\n    iops=5000,\n    snapshot_id=main.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @base = new Scaleway.BlockVolume(\"base\", new()\n    {\n        Name = \"block-volume-base\",\n        Iops = 5000,\n        SizeInGb = 20,\n    });\n\n    var main = new Scaleway.BlockSnapshot(\"main\", new()\n    {\n        Name = \"block-volume-from-snapshot\",\n        VolumeId = @base.Id,\n    });\n\n    var mainBlockVolume = new Scaleway.BlockVolume(\"main\", new()\n    {\n        Name = \"block-volume-from-snapshot\",\n        Iops = 5000,\n        SnapshotId = main.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tbase, err := scaleway.NewBlockVolume(ctx, \"base\", \u0026scaleway.BlockVolumeArgs{\n\t\t\tName:     pulumi.String(\"block-volume-base\"),\n\t\t\tIops:     pulumi.Int(5000),\n\t\t\tSizeInGb: pulumi.Int(20),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmain, err := scaleway.NewBlockSnapshot(ctx, \"main\", \u0026scaleway.BlockSnapshotArgs{\n\t\t\tName:     pulumi.String(\"block-volume-from-snapshot\"),\n\t\t\tVolumeId: base.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewBlockVolume(ctx, \"main\", \u0026scaleway.BlockVolumeArgs{\n\t\t\tName:       pulumi.String(\"block-volume-from-snapshot\"),\n\t\t\tIops:       pulumi.Int(5000),\n\t\t\tSnapshotId: main.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.BlockVolume;\nimport com.pulumi.scaleway.BlockVolumeArgs;\nimport com.pulumi.scaleway.BlockSnapshot;\nimport com.pulumi.scaleway.BlockSnapshotArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var base = new BlockVolume(\"base\", BlockVolumeArgs.builder()\n            .name(\"block-volume-base\")\n            .iops(5000)\n            .sizeInGb(20)\n            .build());\n\n        var main = new BlockSnapshot(\"main\", BlockSnapshotArgs.builder()\n            .name(\"block-volume-from-snapshot\")\n            .volumeId(base.id())\n            .build());\n\n        var mainBlockVolume = new BlockVolume(\"mainBlockVolume\", BlockVolumeArgs.builder()\n            .name(\"block-volume-from-snapshot\")\n            .iops(5000)\n            .snapshotId(main.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  base:\n    type: scaleway:BlockVolume\n    properties:\n      name: block-volume-base\n      iops: 5000\n      sizeInGb: 20\n  main:\n    type: scaleway:BlockSnapshot\n    properties:\n      name: block-volume-from-snapshot\n      volumeId: ${base.id}\n  mainBlockVolume:\n    type: scaleway:BlockVolume\n    name: main\n    properties:\n      name: block-volume-from-snapshot\n      iops: 5000\n      snapshotId: ${main.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nThis section explains how to import a Block Storage volume using the zoned ID (`{zone}/{id}`) format.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/blockVolume:BlockVolume block_volume fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "iops": {
                    "type": "integer",
                    "description": "The maximum [IOPs](https://www.scaleway.com/en/docs/storage/block/concepts/#iops) expected, must match available options.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the volume. If not provided, a name will be randomly generated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "). The ID of the Project the volume is associated with.\n"
                },
                "sizeInGb": {
                    "type": "integer",
                    "description": "The size of the volume in gigabytes. Only one of `size_in_gb`, and `snapshot_id` should be specified.\n"
                },
                "snapshotId": {
                    "type": "string",
                    "description": "If set, the new volume will be created from this snapshot. Only one of `size_in_gb`, `snapshot_id` should be specified.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the volume.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "). The zone in which the volume should be created.\n"
                }
            },
            "required": [
                "iops",
                "name",
                "projectId",
                "sizeInGb",
                "zone"
            ],
            "inputProperties": {
                "iops": {
                    "type": "integer",
                    "description": "The maximum [IOPs](https://www.scaleway.com/en/docs/storage/block/concepts/#iops) expected, must match available options.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the volume. If not provided, a name will be randomly generated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "). The ID of the Project the volume is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "sizeInGb": {
                    "type": "integer",
                    "description": "The size of the volume in gigabytes. Only one of `size_in_gb`, and `snapshot_id` should be specified.\n"
                },
                "snapshotId": {
                    "type": "string",
                    "description": "If set, the new volume will be created from this snapshot. Only one of `size_in_gb`, `snapshot_id` should be specified.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the volume.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "). The zone in which the volume should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "iops"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BlockVolume resources.\n",
                "properties": {
                    "iops": {
                        "type": "integer",
                        "description": "The maximum [IOPs](https://www.scaleway.com/en/docs/storage/block/concepts/#iops) expected, must match available options.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the volume. If not provided, a name will be randomly generated.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "). The ID of the Project the volume is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "sizeInGb": {
                        "type": "integer",
                        "description": "The size of the volume in gigabytes. Only one of `size_in_gb`, and `snapshot_id` should be specified.\n"
                    },
                    "snapshotId": {
                        "type": "string",
                        "description": "If set, the new volume will be created from this snapshot. Only one of `size_in_gb`, `snapshot_id` should be specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags to apply to the volume.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "). The zone in which the volume should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/cockpit:Cockpit": {
            "description": "\n\n## Import\n\nThis section explains how to import a Cockpit using its `{project_id}`.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/cockpit:Cockpit main 11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "endpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/CockpitEndpoint:CockpitEndpoint"
                    },
                    "description": "(Deprecated) A list of [endpoints](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#endpoints) related to Cockpit, each with specific URLs:\n",
                    "deprecationMessage": "Please use `scaleway.CockpitSource` instead"
                },
                "plan": {
                    "type": "string",
                    "description": "Name of the plan to use. Available plans are: free, premium, and custom.\n"
                },
                "planId": {
                    "type": "string",
                    "description": "(Deprecated) The ID of the current pricing plan.\n",
                    "deprecationMessage": "Please use Name only"
                },
                "projectId": {
                    "type": "string",
                    "description": ") The ID of the Project the Cockpit is associated with.\n"
                },
                "pushUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/CockpitPushUrl:CockpitPushUrl"
                    },
                    "description": "Push_url\n",
                    "deprecationMessage": "Please use `scaleway.CockpitSource` instead"
                }
            },
            "required": [
                "endpoints",
                "planId",
                "projectId",
                "pushUrls"
            ],
            "inputProperties": {
                "plan": {
                    "type": "string",
                    "description": "Name of the plan to use. Available plans are: free, premium, and custom.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": ") The ID of the Project the Cockpit is associated with.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Cockpit resources.\n",
                "properties": {
                    "endpoints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/CockpitEndpoint:CockpitEndpoint"
                        },
                        "description": "(Deprecated) A list of [endpoints](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#endpoints) related to Cockpit, each with specific URLs:\n",
                        "deprecationMessage": "Please use `scaleway.CockpitSource` instead"
                    },
                    "plan": {
                        "type": "string",
                        "description": "Name of the plan to use. Available plans are: free, premium, and custom.\n"
                    },
                    "planId": {
                        "type": "string",
                        "description": "(Deprecated) The ID of the current pricing plan.\n",
                        "deprecationMessage": "Please use Name only"
                    },
                    "projectId": {
                        "type": "string",
                        "description": ") The ID of the Project the Cockpit is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "pushUrls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/CockpitPushUrl:CockpitPushUrl"
                        },
                        "description": "Push_url\n",
                        "deprecationMessage": "Please use `scaleway.CockpitSource` instead"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/cockpitAlertManager:CockpitAlertManager": {
            "description": "The `scaleway.CockpitAlertManager` resource allows you to enable and manage the Scaleway Cockpit [alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager).\n\nRefer to Cockpit's [product documentation](https://www.scaleway.com/en/docs/observability/cockpit/concepts/) and [API documentation](https://www.scaleway.com/en/developers/api/cockpit/regional-api) for more information.\n\n\n## Example Usage\n\n## Import\n\nThis section explains how to import alert managers using the ID of the Project associated with Cockpit.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/cockpitAlertManager:CockpitAlertManager main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "alertManagerUrl": {
                    "type": "string",
                    "description": "The URL of the alert manager.\n"
                },
                "contactPoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/CockpitAlertManagerContactPoint:CockpitAlertManagerContactPoint"
                    },
                    "description": "A list of contact points with email addresses that will receive alerts. Each map should contain a single key email.\n"
                },
                "enableManagedAlerts": {
                    "type": "boolean",
                    "description": "Specifies whether the alert manager should be enabled. Defaults to true.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": ") The ID of the Project the Cockpit is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": ") The region where the [alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager) should be enabled.\n"
                }
            },
            "required": [
                "alertManagerUrl",
                "projectId",
                "region"
            ],
            "inputProperties": {
                "contactPoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/CockpitAlertManagerContactPoint:CockpitAlertManagerContactPoint"
                    },
                    "description": "A list of contact points with email addresses that will receive alerts. Each map should contain a single key email.\n"
                },
                "enableManagedAlerts": {
                    "type": "boolean",
                    "description": "Specifies whether the alert manager should be enabled. Defaults to true.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": ") The ID of the Project the Cockpit is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": ") The region where the [alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager) should be enabled.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CockpitAlertManager resources.\n",
                "properties": {
                    "alertManagerUrl": {
                        "type": "string",
                        "description": "The URL of the alert manager.\n"
                    },
                    "contactPoints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/CockpitAlertManagerContactPoint:CockpitAlertManagerContactPoint"
                        },
                        "description": "A list of contact points with email addresses that will receive alerts. Each map should contain a single key email.\n"
                    },
                    "enableManagedAlerts": {
                        "type": "boolean",
                        "description": "Specifies whether the alert manager should be enabled. Defaults to true.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": ") The ID of the Project the Cockpit is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": ") The region where the [alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager) should be enabled.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/cockpitGrafanaUser:CockpitGrafanaUser": {
            "description": "The `scaleway.CockpitGrafanaUser` resource allows you to create and manage [Grafana users](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#grafana-users) in Scaleway Cockpit.\n\nRefer to Cockpit's [product documentation](https://www.scaleway.com/en/docs/observability/cockpit/concepts/) and [API documentation](https://www.scaleway.com/en/developers/api/cockpit/regional-api) for more information.\n\n## Example Usage\n\n### Create a Grafana user\n\nThe following command allows you to create a Grafana user within a specific Scaleway Project.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst project = new scaleway.AccountProject(\"project\", {name: \"test project grafana user\"});\nconst main = new scaleway.CockpitGrafanaUser(\"main\", {\n    projectId: project.id,\n    login: \"my-awesome-user\",\n    role: \"editor\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nproject = scaleway.AccountProject(\"project\", name=\"test project grafana user\")\nmain = scaleway.CockpitGrafanaUser(\"main\",\n    project_id=project.id,\n    login=\"my-awesome-user\",\n    role=\"editor\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var project = new Scaleway.AccountProject(\"project\", new()\n    {\n        Name = \"test project grafana user\",\n    });\n\n    var main = new Scaleway.CockpitGrafanaUser(\"main\", new()\n    {\n        ProjectId = project.Id,\n        Login = \"my-awesome-user\",\n        Role = \"editor\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := scaleway.NewAccountProject(ctx, \"project\", \u0026scaleway.AccountProjectArgs{\n\t\t\tName: pulumi.String(\"test project grafana user\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewCockpitGrafanaUser(ctx, \"main\", \u0026scaleway.CockpitGrafanaUserArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tLogin:     pulumi.String(\"my-awesome-user\"),\n\t\t\tRole:      pulumi.String(\"editor\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.AccountProject;\nimport com.pulumi.scaleway.AccountProjectArgs;\nimport com.pulumi.scaleway.CockpitGrafanaUser;\nimport com.pulumi.scaleway.CockpitGrafanaUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var project = new AccountProject(\"project\", AccountProjectArgs.builder()\n            .name(\"test project grafana user\")\n            .build());\n\n        var main = new CockpitGrafanaUser(\"main\", CockpitGrafanaUserArgs.builder()\n            .projectId(project.id())\n            .login(\"my-awesome-user\")\n            .role(\"editor\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  project:\n    type: scaleway:AccountProject\n    properties:\n      name: test project grafana user\n  main:\n    type: scaleway:CockpitGrafanaUser\n    properties:\n      projectId: ${project.id}\n      login: my-awesome-user\n      role: editor\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nThis section explains how to import Grafana users using the ID of the Project associated with Cockpit, and the Grafana user ID in the `{project_id}/{grafana_user_id}` format.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/cockpitGrafanaUser:CockpitGrafanaUser main 11111111-1111-1111-1111-111111111111/2\n```\n\n",
            "properties": {
                "login": {
                    "type": "string",
                    "description": "The username of the Grafana user. The `admin` user is not yet available for creation. You need your Grafana username to log in to Grafana and access your dashboards.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the Grafana user.\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": ") The ID of the Project the Cockpit is associated with.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role assigned to the Grafana user. Must be `editor` or `viewer`.\n"
                }
            },
            "required": [
                "login",
                "password",
                "projectId",
                "role"
            ],
            "inputProperties": {
                "login": {
                    "type": "string",
                    "description": "The username of the Grafana user. The `admin` user is not yet available for creation. You need your Grafana username to log in to Grafana and access your dashboards.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": ") The ID of the Project the Cockpit is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "role": {
                    "type": "string",
                    "description": "The role assigned to the Grafana user. Must be `editor` or `viewer`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "login",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CockpitGrafanaUser resources.\n",
                "properties": {
                    "login": {
                        "type": "string",
                        "description": "The username of the Grafana user. The `admin` user is not yet available for creation. You need your Grafana username to log in to Grafana and access your dashboards.\n",
                        "willReplaceOnChanges": true
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the Grafana user.\n",
                        "secret": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": ") The ID of the Project the Cockpit is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "role": {
                        "type": "string",
                        "description": "The role assigned to the Grafana user. Must be `editor` or `viewer`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/cockpitSource:CockpitSource": {
            "description": "The `scaleway.CockpitSource` resource allows you to create and manage [data sources](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#data-sources) in Scaleway's Cockpit.\n\nRefer to Cockpit's [product documentation](https://www.scaleway.com/en/docs/observability/cockpit/concepts/) and [API documentation](https://www.scaleway.com/en/developers/api/cockpit/regional-api) for more information.\n\n## Example Usage\n\n### Create a data source\n\nThe following command allows you to create a [metrics](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#metric) data source named `my-data-source` in a given Project.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst project = new scaleway.AccountProject(\"project\", {name: \"test project data source\"});\nconst main = new scaleway.CockpitSource(\"main\", {\n    projectId: project.id,\n    name: \"my-data-source\",\n    type: \"metrics\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nproject = scaleway.AccountProject(\"project\", name=\"test project data source\")\nmain = scaleway.CockpitSource(\"main\",\n    project_id=project.id,\n    name=\"my-data-source\",\n    type=\"metrics\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var project = new Scaleway.AccountProject(\"project\", new()\n    {\n        Name = \"test project data source\",\n    });\n\n    var main = new Scaleway.CockpitSource(\"main\", new()\n    {\n        ProjectId = project.Id,\n        Name = \"my-data-source\",\n        Type = \"metrics\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := scaleway.NewAccountProject(ctx, \"project\", \u0026scaleway.AccountProjectArgs{\n\t\t\tName: pulumi.String(\"test project data source\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewCockpitSource(ctx, \"main\", \u0026scaleway.CockpitSourceArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tName:      pulumi.String(\"my-data-source\"),\n\t\t\tType:      pulumi.String(\"metrics\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.AccountProject;\nimport com.pulumi.scaleway.AccountProjectArgs;\nimport com.pulumi.scaleway.CockpitSource;\nimport com.pulumi.scaleway.CockpitSourceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var project = new AccountProject(\"project\", AccountProjectArgs.builder()\n            .name(\"test project data source\")\n            .build());\n\n        var main = new CockpitSource(\"main\", CockpitSourceArgs.builder()\n            .projectId(project.id())\n            .name(\"my-data-source\")\n            .type(\"metrics\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  project:\n    type: scaleway:AccountProject\n    properties:\n      name: test project data source\n  main:\n    type: scaleway:CockpitSource\n    properties:\n      projectId: ${project.id}\n      name: my-data-source\n      type: metrics\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nThis section explains how to import a data source using the ID of the region it is located in, in the `{region}/{id}` format.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/cockpitSource:CockpitSource main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time the data source was created (in RFC 3339 format).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the data source.\n"
                },
                "origin": {
                    "type": "string",
                    "description": "The origin of the Cockpit data source.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": ") The ID of the Project the data source is associated with.\n"
                },
                "pushUrl": {
                    "type": "string",
                    "description": "The URL endpoint used for pushing data to the Cockpit data source.\n"
                },
                "region": {
                    "type": "string",
                    "description": ") The region where the data source is located.\n"
                },
                "synchronizedWithGrafana": {
                    "type": "boolean",
                    "description": "Indicates whether the data source is synchronized with Grafana.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The [type](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#data-types) of data source. Possible values are: `metrics`, `logs`, or `traces`.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time the data source was last updated (in RFC 3339 format).\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the Cockpit data source.\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "origin",
                "projectId",
                "pushUrl",
                "region",
                "synchronizedWithGrafana",
                "updatedAt",
                "url"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the data source.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": ") The ID of the Project the data source is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": ") The region where the data source is located.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The [type](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#data-types) of data source. Possible values are: `metrics`, `logs`, or `traces`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CockpitSource resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time the data source was created (in RFC 3339 format).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the data source.\n",
                        "willReplaceOnChanges": true
                    },
                    "origin": {
                        "type": "string",
                        "description": "The origin of the Cockpit data source.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": ") The ID of the Project the data source is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "pushUrl": {
                        "type": "string",
                        "description": "The URL endpoint used for pushing data to the Cockpit data source.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": ") The region where the data source is located.\n",
                        "willReplaceOnChanges": true
                    },
                    "synchronizedWithGrafana": {
                        "type": "boolean",
                        "description": "Indicates whether the data source is synchronized with Grafana.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The [type](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#data-types) of data source. Possible values are: `metrics`, `logs`, or `traces`.\n",
                        "willReplaceOnChanges": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time the data source was last updated (in RFC 3339 format).\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the Cockpit data source.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/cockpitToken:CockpitToken": {
            "description": "The `scaleway.CockpitToken` resource allows you to create and manage your Cockpit [tokens](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#tokens).\n\nRefer to Cockpit's [product documentation](https://www.scaleway.com/en/docs/observability/cockpit/concepts/) and [API documentation](https://www.scaleway.com/en/developers/api/cockpit/regional-api) for more information.\n\n## Example Usage\n\n### Use a Cockpit token\n\nThe following commands allow you to:\n\n- create a Scaleway Project named `my-project`\n- create a Cockpit token named `my-awesome-token` inside the Project\n- assign `read` permissions to the token for metrics and logs\n- disable `write` permissions for metrics and logs\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst project = new scaleway.AccountProject(\"project\", {name: \"my-project\"});\nconst main = new scaleway.CockpitToken(\"main\", {\n    projectId: project.id,\n    name: \"my-awesome-token\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nproject = scaleway.AccountProject(\"project\", name=\"my-project\")\nmain = scaleway.CockpitToken(\"main\",\n    project_id=project.id,\n    name=\"my-awesome-token\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var project = new Scaleway.AccountProject(\"project\", new()\n    {\n        Name = \"my-project\",\n    });\n\n    var main = new Scaleway.CockpitToken(\"main\", new()\n    {\n        ProjectId = project.Id,\n        Name = \"my-awesome-token\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := scaleway.NewAccountProject(ctx, \"project\", \u0026scaleway.AccountProjectArgs{\n\t\t\tName: pulumi.String(\"my-project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewCockpitToken(ctx, \"main\", \u0026scaleway.CockpitTokenArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tName:      pulumi.String(\"my-awesome-token\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.AccountProject;\nimport com.pulumi.scaleway.AccountProjectArgs;\nimport com.pulumi.scaleway.CockpitToken;\nimport com.pulumi.scaleway.CockpitTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var project = new AccountProject(\"project\", AccountProjectArgs.builder()\n            .name(\"my-project\")\n            .build());\n\n        var main = new CockpitToken(\"main\", CockpitTokenArgs.builder()\n            .projectId(project.id())\n            .name(\"my-awesome-token\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  project:\n    type: scaleway:AccountProject\n    properties:\n      name: my-project\n  main:\n    type: scaleway:CockpitToken\n    properties:\n      projectId: ${project.id}\n      name: my-awesome-token\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst project = new scaleway.AccountProject(\"project\", {name: \"my-project\"});\n// Create a token that can read metrics and logs but not write\nconst main = new scaleway.CockpitToken(\"main\", {\n    projectId: project.id,\n    name: \"my-awesome-token\",\n    scopes: {\n        queryMetrics: true,\n        writeMetrics: false,\n        queryLogs: true,\n        writeLogs: false,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nproject = scaleway.AccountProject(\"project\", name=\"my-project\")\n# Create a token that can read metrics and logs but not write\nmain = scaleway.CockpitToken(\"main\",\n    project_id=project.id,\n    name=\"my-awesome-token\",\n    scopes={\n        \"query_metrics\": True,\n        \"write_metrics\": False,\n        \"query_logs\": True,\n        \"write_logs\": False,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var project = new Scaleway.AccountProject(\"project\", new()\n    {\n        Name = \"my-project\",\n    });\n\n    // Create a token that can read metrics and logs but not write\n    var main = new Scaleway.CockpitToken(\"main\", new()\n    {\n        ProjectId = project.Id,\n        Name = \"my-awesome-token\",\n        Scopes = new Scaleway.Inputs.CockpitTokenScopesArgs\n        {\n            QueryMetrics = true,\n            WriteMetrics = false,\n            QueryLogs = true,\n            WriteLogs = false,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := scaleway.NewAccountProject(ctx, \"project\", \u0026scaleway.AccountProjectArgs{\n\t\t\tName: pulumi.String(\"my-project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a token that can read metrics and logs but not write\n\t\t_, err = scaleway.NewCockpitToken(ctx, \"main\", \u0026scaleway.CockpitTokenArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tName:      pulumi.String(\"my-awesome-token\"),\n\t\t\tScopes: \u0026scaleway.CockpitTokenScopesArgs{\n\t\t\t\tQueryMetrics: pulumi.Bool(true),\n\t\t\t\tWriteMetrics: pulumi.Bool(false),\n\t\t\t\tQueryLogs:    pulumi.Bool(true),\n\t\t\t\tWriteLogs:    pulumi.Bool(false),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.AccountProject;\nimport com.pulumi.scaleway.AccountProjectArgs;\nimport com.pulumi.scaleway.CockpitToken;\nimport com.pulumi.scaleway.CockpitTokenArgs;\nimport com.pulumi.scaleway.inputs.CockpitTokenScopesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var project = new AccountProject(\"project\", AccountProjectArgs.builder()\n            .name(\"my-project\")\n            .build());\n\n        // Create a token that can read metrics and logs but not write\n        var main = new CockpitToken(\"main\", CockpitTokenArgs.builder()\n            .projectId(project.id())\n            .name(\"my-awesome-token\")\n            .scopes(CockpitTokenScopesArgs.builder()\n                .queryMetrics(true)\n                .writeMetrics(false)\n                .queryLogs(true)\n                .writeLogs(false)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  project:\n    type: scaleway:AccountProject\n    properties:\n      name: my-project\n  # Create a token that can read metrics and logs but not write\n  main:\n    type: scaleway:CockpitToken\n    properties:\n      projectId: ${project.id}\n      name: my-awesome-token\n      scopes:\n        queryMetrics: true\n        writeMetrics: false\n        queryLogs: true\n        writeLogs: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nThis section explains how to import a Cockpit token using the `{region}/{id}` format.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/cockpitToken:CockpitToken main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the Cockpit Token (Format ISO 8601)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the token.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": ") The ID of the Project the Cockpit is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": ") The region where the Cockpit token is located.\n"
                },
                "scopes": {
                    "$ref": "#/types/scaleway:index/CockpitTokenScopes:CockpitTokenScopes",
                    "description": "Scopes allowed, each with default values:\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key of the token.\n",
                    "secret": true
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the Cockpit Token (Format ISO 8601)\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "projectId",
                "region",
                "scopes",
                "secretKey",
                "updatedAt"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the token.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": ") The ID of the Project the Cockpit is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": ") The region where the Cockpit token is located.\n",
                    "willReplaceOnChanges": true
                },
                "scopes": {
                    "$ref": "#/types/scaleway:index/CockpitTokenScopes:CockpitTokenScopes",
                    "description": "Scopes allowed, each with default values:\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CockpitToken resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the Cockpit Token (Format ISO 8601)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the token.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": ") The ID of the Project the Cockpit is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": ") The region where the Cockpit token is located.\n",
                        "willReplaceOnChanges": true
                    },
                    "scopes": {
                        "$ref": "#/types/scaleway:index/CockpitTokenScopes:CockpitTokenScopes",
                        "description": "Scopes allowed, each with default values:\n",
                        "willReplaceOnChanges": true
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "The secret key of the token.\n",
                        "secret": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the Cockpit Token (Format ISO 8601)\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/container:Container": {
            "description": "The `scaleway.Container` resource allows you to create and manage [Serverless Containers](https://www.scaleway.com/en/docs/serverless/containers/).\n\nRefer to the Serverless Containers [product documentation](https://www.scaleway.com/en/docs/serverless/containers/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-containers/) for more information.\n\nFor more information on the limitations of Serverless Containers, refer to the [dedicated documentation](https://www.scaleway.com/en/docs/compute/containers/reference-content/containers-limitations/).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.ContainerNamespace(\"main\", {\n    name: \"my-ns-test\",\n    description: \"test container\",\n});\nconst mainContainer = new scaleway.Container(\"main\", {\n    name: \"my-container-02\",\n    description: \"environment variables test\",\n    namespaceId: main.id,\n    registryImage: pulumi.interpolate`${main.registryEndpoint}/alpine:test`,\n    port: 9997,\n    cpuLimit: 140,\n    memoryLimit: 256,\n    minScale: 3,\n    maxScale: 5,\n    timeout: 600,\n    maxConcurrency: 80,\n    privacy: \"private\",\n    protocol: \"http1\",\n    deploy: true,\n    environmentVariables: {\n        foo: \"var\",\n    },\n    secretEnvironmentVariables: {\n        key: \"secret\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.ContainerNamespace(\"main\",\n    name=\"my-ns-test\",\n    description=\"test container\")\nmain_container = scaleway.Container(\"main\",\n    name=\"my-container-02\",\n    description=\"environment variables test\",\n    namespace_id=main.id,\n    registry_image=main.registry_endpoint.apply(lambda registry_endpoint: f\"{registry_endpoint}/alpine:test\"),\n    port=9997,\n    cpu_limit=140,\n    memory_limit=256,\n    min_scale=3,\n    max_scale=5,\n    timeout=600,\n    max_concurrency=80,\n    privacy=\"private\",\n    protocol=\"http1\",\n    deploy=True,\n    environment_variables={\n        \"foo\": \"var\",\n    },\n    secret_environment_variables={\n        \"key\": \"secret\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.ContainerNamespace(\"main\", new()\n    {\n        Name = \"my-ns-test\",\n        Description = \"test container\",\n    });\n\n    var mainContainer = new Scaleway.Container(\"main\", new()\n    {\n        Name = \"my-container-02\",\n        Description = \"environment variables test\",\n        NamespaceId = main.Id,\n        RegistryImage = main.RegistryEndpoint.Apply(registryEndpoint =\u003e $\"{registryEndpoint}/alpine:test\"),\n        Port = 9997,\n        CpuLimit = 140,\n        MemoryLimit = 256,\n        MinScale = 3,\n        MaxScale = 5,\n        Timeout = 600,\n        MaxConcurrency = 80,\n        Privacy = \"private\",\n        Protocol = \"http1\",\n        Deploy = true,\n        EnvironmentVariables = \n        {\n            { \"foo\", \"var\" },\n        },\n        SecretEnvironmentVariables = \n        {\n            { \"key\", \"secret\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewContainerNamespace(ctx, \"main\", \u0026scaleway.ContainerNamespaceArgs{\n\t\t\tName:        pulumi.String(\"my-ns-test\"),\n\t\t\tDescription: pulumi.String(\"test container\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewContainer(ctx, \"main\", \u0026scaleway.ContainerArgs{\n\t\t\tName:        pulumi.String(\"my-container-02\"),\n\t\t\tDescription: pulumi.String(\"environment variables test\"),\n\t\t\tNamespaceId: main.ID(),\n\t\t\tRegistryImage: main.RegistryEndpoint.ApplyT(func(registryEndpoint string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"%v/alpine:test\", registryEndpoint), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tPort:           pulumi.Int(9997),\n\t\t\tCpuLimit:       pulumi.Int(140),\n\t\t\tMemoryLimit:    pulumi.Int(256),\n\t\t\tMinScale:       pulumi.Int(3),\n\t\t\tMaxScale:       pulumi.Int(5),\n\t\t\tTimeout:        pulumi.Int(600),\n\t\t\tMaxConcurrency: pulumi.Int(80),\n\t\t\tPrivacy:        pulumi.String(\"private\"),\n\t\t\tProtocol:       pulumi.String(\"http1\"),\n\t\t\tDeploy:         pulumi.Bool(true),\n\t\t\tEnvironmentVariables: pulumi.StringMap{\n\t\t\t\t\"foo\": pulumi.String(\"var\"),\n\t\t\t},\n\t\t\tSecretEnvironmentVariables: pulumi.StringMap{\n\t\t\t\t\"key\": pulumi.String(\"secret\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ContainerNamespace;\nimport com.pulumi.scaleway.ContainerNamespaceArgs;\nimport com.pulumi.scaleway.Container;\nimport com.pulumi.scaleway.ContainerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new ContainerNamespace(\"main\", ContainerNamespaceArgs.builder()\n            .name(\"my-ns-test\")\n            .description(\"test container\")\n            .build());\n\n        var mainContainer = new Container(\"mainContainer\", ContainerArgs.builder()\n            .name(\"my-container-02\")\n            .description(\"environment variables test\")\n            .namespaceId(main.id())\n            .registryImage(main.registryEndpoint().applyValue(registryEndpoint -\u003e String.format(\"%s/alpine:test\", registryEndpoint)))\n            .port(9997)\n            .cpuLimit(140)\n            .memoryLimit(256)\n            .minScale(3)\n            .maxScale(5)\n            .timeout(600)\n            .maxConcurrency(80)\n            .privacy(\"private\")\n            .protocol(\"http1\")\n            .deploy(true)\n            .environmentVariables(Map.of(\"foo\", \"var\"))\n            .secretEnvironmentVariables(Map.of(\"key\", \"secret\"))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:ContainerNamespace\n    properties:\n      name: my-ns-test\n      description: test container\n  mainContainer:\n    type: scaleway:Container\n    name: main\n    properties:\n      name: my-container-02\n      description: environment variables test\n      namespaceId: ${main.id}\n      registryImage: ${main.registryEndpoint}/alpine:test\n      port: 9997\n      cpuLimit: 140\n      memoryLimit: 256\n      minScale: 3\n      maxScale: 5\n      timeout: 600\n      maxConcurrency: 80\n      privacy: private\n      protocol: http1\n      deploy: true\n      environmentVariables:\n        foo: var\n      secretEnvironmentVariables:\n        key: secret\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Protocols\n\nThe following protocols are supported:\n\n* `h2c`: HTTP/2 over TCP.\n* `http1`: Hypertext Transfer Protocol.\n\n\u003e **Important:** Refer to the official [Apache documentation](https://httpd.apache.org/docs/2.4/howto/http2.html) for more information.\n\n## Privacy\n\nBy default, creating a container will make it `public`, meaning that anybody knowing the endpoint can execute it.\n\nA container can be made `private` with the privacy parameter.\n\nRefer to the [technical information](https://www.scaleway.com/en/developers/api/serverless-containers/#protocol-9dd4c8) for more information on container authentication.\n\n## Memory and vCPUs configuration\n\nThe vCPU represents a portion of the underlying, physical CPU that is assigned to a particular virtual machine (VM).\n\nYou can determine the computing resources to allocate to each container.\n\nThe `memory_limit` (in MB) must correspond with the right amount of vCPU. Refer to the table below to determine the right memory/vCPU combination.\n\n| Memory (in MB) | vCPU |\n|----------------|------|\n| 128            | 70m  |\n| 256            | 140m |\n| 512            | 280m |\n| 1024           | 560m |\n| 2048           | 1120 |\n| 3072           | 1680 |\n| 4096           | 2240 |\n\n~\u003e**Important:** Make sure to select the right resources, as you will be billed based on compute usage over time and the number of Containers executions.\nRefer to the [Serverless Containers pricing](https://www.scaleway.com/en/docs/faq/serverless-containers/#prices) for more information.\n\n## Import\n\nContainers can be imported using, `{region}/{id}`, as shown below:\n\nbash\n\n```sh\n$ pulumi import scaleway:index/container:Container main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "cpuLimit": {
                    "type": "integer",
                    "description": "The amount of vCPU computing resources to allocate to each container.\n"
                },
                "cronStatus": {
                    "type": "string",
                    "description": "The cron status of the container.\n"
                },
                "deploy": {
                    "type": "boolean",
                    "description": "Boolean indicating whether the container is in a production environment.\n\nNote that if you want to use your own configuration, you must consult our configuration [restrictions](https://www.scaleway.com/en/docs/compute/containers/reference-content/containers-limitations/#configuration-restrictions) section.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the container.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "The native domain name of the container\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The [environment variables](https://www.scaleway.com/en/docs/compute/containers/concepts/#environment-variables) of the container.\n"
                },
                "errorMessage": {
                    "type": "string",
                    "description": "The error message of the container.\n"
                },
                "httpOption": {
                    "type": "string",
                    "description": "Allows both HTTP and HTTPS (`enabled`) or redirect HTTP to HTTPS (`redirected`). Defaults to `enabled`.\n"
                },
                "maxConcurrency": {
                    "type": "integer",
                    "description": "The maximum number of simultaneous requests your container can handle at the same time.\n"
                },
                "maxScale": {
                    "type": "integer",
                    "description": "The maximum number of instances this container can scale to.\n"
                },
                "memoryLimit": {
                    "type": "integer",
                    "description": "The memory resources in MB to allocate to each container.\n"
                },
                "minScale": {
                    "type": "integer",
                    "description": "The minimum number of container instances running continuously.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the container name.\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The Containers namespace ID of the container.\n\n\u003e **Important** Updating the `name` argument will recreate the container.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to expose the container.\n"
                },
                "privacy": {
                    "type": "string",
                    "description": "The privacy type defines the way to authenticate to your container. Please check our dedicated [section](https://www.scaleway.com/en/developers/api/serverless-containers/#protocol-9dd4c8).\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The communication [protocol](https://www.scaleway.com/en/developers/api/serverless-containers/#path-containers-update-an-existing-container) `http1` or `h2c`. Defaults to `http1`.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Defaults to provider `region`) The region in which the container was created.\n"
                },
                "registryImage": {
                    "type": "string",
                    "description": "The registry image address (e.g., `rg.fr-par.scw.cloud/$NAMESPACE/$IMAGE`)\n"
                },
                "registrySha256": {
                    "type": "string",
                    "description": "The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string.\n"
                },
                "sandbox": {
                    "type": "string",
                    "description": "Execution environment of the container.\n"
                },
                "secretEnvironmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The [secret environment variables](https://www.scaleway.com/en/docs/compute/containers/concepts/#secrets) of the container.\n",
                    "secret": true
                },
                "status": {
                    "type": "string",
                    "description": "The container status.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "The maximum amount of time your container can spend processing a request before being stopped.\n"
                }
            },
            "required": [
                "cpuLimit",
                "cronStatus",
                "domainName",
                "environmentVariables",
                "errorMessage",
                "maxConcurrency",
                "maxScale",
                "memoryLimit",
                "minScale",
                "name",
                "namespaceId",
                "port",
                "region",
                "registryImage",
                "sandbox",
                "status",
                "timeout"
            ],
            "inputProperties": {
                "cpuLimit": {
                    "type": "integer",
                    "description": "The amount of vCPU computing resources to allocate to each container.\n"
                },
                "deploy": {
                    "type": "boolean",
                    "description": "Boolean indicating whether the container is in a production environment.\n\nNote that if you want to use your own configuration, you must consult our configuration [restrictions](https://www.scaleway.com/en/docs/compute/containers/reference-content/containers-limitations/#configuration-restrictions) section.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the container.\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The [environment variables](https://www.scaleway.com/en/docs/compute/containers/concepts/#environment-variables) of the container.\n"
                },
                "httpOption": {
                    "type": "string",
                    "description": "Allows both HTTP and HTTPS (`enabled`) or redirect HTTP to HTTPS (`redirected`). Defaults to `enabled`.\n"
                },
                "maxConcurrency": {
                    "type": "integer",
                    "description": "The maximum number of simultaneous requests your container can handle at the same time.\n"
                },
                "maxScale": {
                    "type": "integer",
                    "description": "The maximum number of instances this container can scale to.\n"
                },
                "memoryLimit": {
                    "type": "integer",
                    "description": "The memory resources in MB to allocate to each container.\n"
                },
                "minScale": {
                    "type": "integer",
                    "description": "The minimum number of container instances running continuously.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the container name.\n",
                    "willReplaceOnChanges": true
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The Containers namespace ID of the container.\n\n\u003e **Important** Updating the `name` argument will recreate the container.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to expose the container.\n"
                },
                "privacy": {
                    "type": "string",
                    "description": "The privacy type defines the way to authenticate to your container. Please check our dedicated [section](https://www.scaleway.com/en/developers/api/serverless-containers/#protocol-9dd4c8).\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The communication [protocol](https://www.scaleway.com/en/developers/api/serverless-containers/#path-containers-update-an-existing-container) `http1` or `h2c`. Defaults to `http1`.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Defaults to provider `region`) The region in which the container was created.\n",
                    "willReplaceOnChanges": true
                },
                "registryImage": {
                    "type": "string",
                    "description": "The registry image address (e.g., `rg.fr-par.scw.cloud/$NAMESPACE/$IMAGE`)\n"
                },
                "registrySha256": {
                    "type": "string",
                    "description": "The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string.\n"
                },
                "sandbox": {
                    "type": "string",
                    "description": "Execution environment of the container.\n"
                },
                "secretEnvironmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The [secret environment variables](https://www.scaleway.com/en/docs/compute/containers/concepts/#secrets) of the container.\n",
                    "secret": true
                },
                "status": {
                    "type": "string",
                    "description": "The container status.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "The maximum amount of time your container can spend processing a request before being stopped.\n"
                }
            },
            "requiredInputs": [
                "namespaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Container resources.\n",
                "properties": {
                    "cpuLimit": {
                        "type": "integer",
                        "description": "The amount of vCPU computing resources to allocate to each container.\n"
                    },
                    "cronStatus": {
                        "type": "string",
                        "description": "The cron status of the container.\n"
                    },
                    "deploy": {
                        "type": "boolean",
                        "description": "Boolean indicating whether the container is in a production environment.\n\nNote that if you want to use your own configuration, you must consult our configuration [restrictions](https://www.scaleway.com/en/docs/compute/containers/reference-content/containers-limitations/#configuration-restrictions) section.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the container.\n"
                    },
                    "domainName": {
                        "type": "string",
                        "description": "The native domain name of the container\n"
                    },
                    "environmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The [environment variables](https://www.scaleway.com/en/docs/compute/containers/concepts/#environment-variables) of the container.\n"
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "The error message of the container.\n"
                    },
                    "httpOption": {
                        "type": "string",
                        "description": "Allows both HTTP and HTTPS (`enabled`) or redirect HTTP to HTTPS (`redirected`). Defaults to `enabled`.\n"
                    },
                    "maxConcurrency": {
                        "type": "integer",
                        "description": "The maximum number of simultaneous requests your container can handle at the same time.\n"
                    },
                    "maxScale": {
                        "type": "integer",
                        "description": "The maximum number of instances this container can scale to.\n"
                    },
                    "memoryLimit": {
                        "type": "integer",
                        "description": "The memory resources in MB to allocate to each container.\n"
                    },
                    "minScale": {
                        "type": "integer",
                        "description": "The minimum number of container instances running continuously.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the container name.\n",
                        "willReplaceOnChanges": true
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The Containers namespace ID of the container.\n\n\u003e **Important** Updating the `name` argument will recreate the container.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port to expose the container.\n"
                    },
                    "privacy": {
                        "type": "string",
                        "description": "The privacy type defines the way to authenticate to your container. Please check our dedicated [section](https://www.scaleway.com/en/developers/api/serverless-containers/#protocol-9dd4c8).\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The communication [protocol](https://www.scaleway.com/en/developers/api/serverless-containers/#path-containers-update-an-existing-container) `http1` or `h2c`. Defaults to `http1`.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "(Defaults to provider `region`) The region in which the container was created.\n",
                        "willReplaceOnChanges": true
                    },
                    "registryImage": {
                        "type": "string",
                        "description": "The registry image address (e.g., `rg.fr-par.scw.cloud/$NAMESPACE/$IMAGE`)\n"
                    },
                    "registrySha256": {
                        "type": "string",
                        "description": "The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string.\n"
                    },
                    "sandbox": {
                        "type": "string",
                        "description": "Execution environment of the container.\n"
                    },
                    "secretEnvironmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The [secret environment variables](https://www.scaleway.com/en/docs/compute/containers/concepts/#secrets) of the container.\n",
                        "secret": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The container status.\n"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "The maximum amount of time your container can spend processing a request before being stopped.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/containerCron:ContainerCron": {
            "description": "The `scaleway.ContainerCron` resource allows you to create and manage CRON triggers for Scaleway [Serverless Containers](https://www.scaleway.com/en/docs/serverless/containers/).\n\nRefer to the Containers CRON triggers [documentation](https://www.scaleway.com/en/docs/serverless/containers/how-to/add-trigger-to-a-container/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-containers/#path-triggers-list-all-triggers) for more information.\n\n## Example Usage\n\nThe following command allows you to add a CRON trigger to a Serverless Container.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.ContainerNamespace(\"main\", {});\nconst mainContainer = new scaleway.Container(\"main\", {\n    name: \"my-container-with-cron-tf\",\n    namespaceId: main.id,\n});\nconst mainContainerCron = new scaleway.ContainerCron(\"main\", {\n    containerId: mainContainer.id,\n    name: \"my-cron-name\",\n    schedule: \"5 4 1 * *\",\n    args: JSON.stringify({\n        address: {\n            city: \"Paris\",\n            country: \"FR\",\n        },\n        age: 23,\n        firstName: \"John\",\n        isAlive: true,\n        lastName: \"Smith\",\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.ContainerNamespace(\"main\")\nmain_container = scaleway.Container(\"main\",\n    name=\"my-container-with-cron-tf\",\n    namespace_id=main.id)\nmain_container_cron = scaleway.ContainerCron(\"main\",\n    container_id=main_container.id,\n    name=\"my-cron-name\",\n    schedule=\"5 4 1 * *\",\n    args=json.dumps({\n        \"address\": {\n            \"city\": \"Paris\",\n            \"country\": \"FR\",\n        },\n        \"age\": 23,\n        \"firstName\": \"John\",\n        \"isAlive\": True,\n        \"lastName\": \"Smith\",\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.ContainerNamespace(\"main\");\n\n    var mainContainer = new Scaleway.Container(\"main\", new()\n    {\n        Name = \"my-container-with-cron-tf\",\n        NamespaceId = main.Id,\n    });\n\n    var mainContainerCron = new Scaleway.ContainerCron(\"main\", new()\n    {\n        ContainerId = mainContainer.Id,\n        Name = \"my-cron-name\",\n        Schedule = \"5 4 1 * *\",\n        Args = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"address\"] = new Dictionary\u003cstring, object?\u003e\n            {\n                [\"city\"] = \"Paris\",\n                [\"country\"] = \"FR\",\n            },\n            [\"age\"] = 23,\n            [\"firstName\"] = \"John\",\n            [\"isAlive\"] = true,\n            [\"lastName\"] = \"Smith\",\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewContainerNamespace(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainContainer, err := scaleway.NewContainer(ctx, \"main\", \u0026scaleway.ContainerArgs{\n\t\t\tName:        pulumi.String(\"my-container-with-cron-tf\"),\n\t\t\tNamespaceId: main.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"address\": map[string]interface{}{\n\t\t\t\t\"city\":    \"Paris\",\n\t\t\t\t\"country\": \"FR\",\n\t\t\t},\n\t\t\t\"age\":       23,\n\t\t\t\"firstName\": \"John\",\n\t\t\t\"isAlive\":   true,\n\t\t\t\"lastName\":  \"Smith\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = scaleway.NewContainerCron(ctx, \"main\", \u0026scaleway.ContainerCronArgs{\n\t\t\tContainerId: mainContainer.ID(),\n\t\t\tName:        pulumi.String(\"my-cron-name\"),\n\t\t\tSchedule:    pulumi.String(\"5 4 1 * *\"),\n\t\t\tArgs:        pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ContainerNamespace;\nimport com.pulumi.scaleway.Container;\nimport com.pulumi.scaleway.ContainerArgs;\nimport com.pulumi.scaleway.ContainerCron;\nimport com.pulumi.scaleway.ContainerCronArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new ContainerNamespace(\"main\");\n\n        var mainContainer = new Container(\"mainContainer\", ContainerArgs.builder()\n            .name(\"my-container-with-cron-tf\")\n            .namespaceId(main.id())\n            .build());\n\n        var mainContainerCron = new ContainerCron(\"mainContainerCron\", ContainerCronArgs.builder()\n            .containerId(mainContainer.id())\n            .name(\"my-cron-name\")\n            .schedule(\"5 4 1 * *\")\n            .args(serializeJson(\n                jsonObject(\n                    jsonProperty(\"address\", jsonObject(\n                        jsonProperty(\"city\", \"Paris\"),\n                        jsonProperty(\"country\", \"FR\")\n                    )),\n                    jsonProperty(\"age\", 23),\n                    jsonProperty(\"firstName\", \"John\"),\n                    jsonProperty(\"isAlive\", true),\n                    jsonProperty(\"lastName\", \"Smith\")\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:ContainerNamespace\n  mainContainer:\n    type: scaleway:Container\n    name: main\n    properties:\n      name: my-container-with-cron-tf\n      namespaceId: ${main.id}\n  mainContainerCron:\n    type: scaleway:ContainerCron\n    name: main\n    properties:\n      containerId: ${mainContainer.id}\n      name: my-cron-name\n      schedule: 5 4 1 * *\n      args:\n        fn::toJSON:\n          address:\n            city: Paris\n            country: FR\n          age: 23\n          firstName: John\n          isAlive: true\n          lastName: Smith\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nContainer Cron can be imported using `{region}/{id}`, as shown below:\n\nbash\n\n```sh\n$ pulumi import scaleway:index/containerCron:ContainerCron main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "args": {
                    "type": "string",
                    "description": "The key-value mapping to define arguments that will be passed to your container’s event object\n"
                },
                "containerId": {
                    "type": "string",
                    "description": "The unique identifier of the container to link to your CRON trigger.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the container CRON trigger. If not provided, a random name is generated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Defaults to provider `region`) The region\nin which the CRON trigger is created.\n"
                },
                "schedule": {
                    "type": "string",
                    "description": "CRON format string (refer to the [CRON schedule reference](https://www.scaleway.com/en/docs/serverless/containers/reference-content/cron-schedules/) for more information).\n"
                },
                "status": {
                    "type": "string",
                    "description": "The CRON status.\n"
                }
            },
            "required": [
                "args",
                "containerId",
                "name",
                "region",
                "schedule",
                "status"
            ],
            "inputProperties": {
                "args": {
                    "type": "string",
                    "description": "The key-value mapping to define arguments that will be passed to your container’s event object\n"
                },
                "containerId": {
                    "type": "string",
                    "description": "The unique identifier of the container to link to your CRON trigger.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the container CRON trigger. If not provided, a random name is generated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Defaults to provider `region`) The region\nin which the CRON trigger is created.\n",
                    "willReplaceOnChanges": true
                },
                "schedule": {
                    "type": "string",
                    "description": "CRON format string (refer to the [CRON schedule reference](https://www.scaleway.com/en/docs/serverless/containers/reference-content/cron-schedules/) for more information).\n"
                }
            },
            "requiredInputs": [
                "args",
                "containerId",
                "schedule"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContainerCron resources.\n",
                "properties": {
                    "args": {
                        "type": "string",
                        "description": "The key-value mapping to define arguments that will be passed to your container’s event object\n"
                    },
                    "containerId": {
                        "type": "string",
                        "description": "The unique identifier of the container to link to your CRON trigger.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the container CRON trigger. If not provided, a random name is generated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "(Defaults to provider `region`) The region\nin which the CRON trigger is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "schedule": {
                        "type": "string",
                        "description": "CRON format string (refer to the [CRON schedule reference](https://www.scaleway.com/en/docs/serverless/containers/reference-content/cron-schedules/) for more information).\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The CRON status.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/containerDomain:ContainerDomain": {
            "description": "The `scaleway.ContainerDomain` resource allows you to create and manage domain name bindings for Scaleway [Serverless Containers](https://www.scaleway.com/en/docs/serverless/containers/).\n\nRefer to the Containers domain [documentation](https://www.scaleway.com/en/docs/compute/containers/how-to/add-a-custom-domain-to-a-container/) and the [API documentation](https://www.scaleway.com/en/developers/api/serverless-containers/#path-domains-list-all-domain-name-bindings) for more information.\n\n## Example Usage\n\nThe commands below shows how to bind a custom domain name to a container.\n\n### Simple\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst app = new scaleway.Container(\"app\", {});\nconst appContainerDomain = new scaleway.ContainerDomain(\"app\", {\n    containerId: app.id,\n    hostname: \"container.domain.tld\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\napp = scaleway.Container(\"app\")\napp_container_domain = scaleway.ContainerDomain(\"app\",\n    container_id=app.id,\n    hostname=\"container.domain.tld\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var app = new Scaleway.Container(\"app\");\n\n    var appContainerDomain = new Scaleway.ContainerDomain(\"app\", new()\n    {\n        ContainerId = app.Id,\n        Hostname = \"container.domain.tld\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tapp, err := scaleway.NewContainer(ctx, \"app\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewContainerDomain(ctx, \"app\", \u0026scaleway.ContainerDomainArgs{\n\t\t\tContainerId: app.ID(),\n\t\t\tHostname:    pulumi.String(\"container.domain.tld\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Container;\nimport com.pulumi.scaleway.ContainerDomain;\nimport com.pulumi.scaleway.ContainerDomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var app = new Container(\"app\");\n\n        var appContainerDomain = new ContainerDomain(\"appContainerDomain\", ContainerDomainArgs.builder()\n            .containerId(app.id())\n            .hostname(\"container.domain.tld\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  app:\n    type: scaleway:Container\n  appContainerDomain:\n    type: scaleway:ContainerDomain\n    name: app\n    properties:\n      containerId: ${app.id}\n      hostname: container.domain.tld\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Complete example with domain\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.ContainerNamespace(\"main\", {\n    name: \"my-ns-test\",\n    description: \"test container\",\n});\nconst app = new scaleway.Container(\"app\", {\n    name: \"app\",\n    namespaceId: main.id,\n    registryImage: pulumi.interpolate`${main.registryEndpoint}/nginx:alpine`,\n    port: 80,\n    cpuLimit: 140,\n    memoryLimit: 256,\n    minScale: 1,\n    maxScale: 1,\n    timeout: 600,\n    maxConcurrency: 80,\n    privacy: \"public\",\n    protocol: \"http1\",\n    deploy: true,\n});\nconst appDomainRecord = new scaleway.DomainRecord(\"app\", {\n    dnsZone: \"domain.tld\",\n    name: \"subdomain\",\n    type: \"CNAME\",\n    data: pulumi.interpolate`${app.domainName}.`,\n    ttl: 3600,\n});\nconst appContainerDomain = new scaleway.ContainerDomain(\"app\", {\n    containerId: app.id,\n    hostname: pulumi.interpolate`${appDomainRecord.name}.${appDomainRecord.dnsZone}`,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.ContainerNamespace(\"main\",\n    name=\"my-ns-test\",\n    description=\"test container\")\napp = scaleway.Container(\"app\",\n    name=\"app\",\n    namespace_id=main.id,\n    registry_image=main.registry_endpoint.apply(lambda registry_endpoint: f\"{registry_endpoint}/nginx:alpine\"),\n    port=80,\n    cpu_limit=140,\n    memory_limit=256,\n    min_scale=1,\n    max_scale=1,\n    timeout=600,\n    max_concurrency=80,\n    privacy=\"public\",\n    protocol=\"http1\",\n    deploy=True)\napp_domain_record = scaleway.DomainRecord(\"app\",\n    dns_zone=\"domain.tld\",\n    name=\"subdomain\",\n    type=\"CNAME\",\n    data=app.domain_name.apply(lambda domain_name: f\"{domain_name}.\"),\n    ttl=3600)\napp_container_domain = scaleway.ContainerDomain(\"app\",\n    container_id=app.id,\n    hostname=pulumi.Output.all(\n        name=app_domain_record.name,\n        dns_zone=app_domain_record.dns_zone\n).apply(lambda resolved_outputs: f\"{resolved_outputs['name']}.{resolved_outputs['dns_zone']}\")\n)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.ContainerNamespace(\"main\", new()\n    {\n        Name = \"my-ns-test\",\n        Description = \"test container\",\n    });\n\n    var app = new Scaleway.Container(\"app\", new()\n    {\n        Name = \"app\",\n        NamespaceId = main.Id,\n        RegistryImage = main.RegistryEndpoint.Apply(registryEndpoint =\u003e $\"{registryEndpoint}/nginx:alpine\"),\n        Port = 80,\n        CpuLimit = 140,\n        MemoryLimit = 256,\n        MinScale = 1,\n        MaxScale = 1,\n        Timeout = 600,\n        MaxConcurrency = 80,\n        Privacy = \"public\",\n        Protocol = \"http1\",\n        Deploy = true,\n    });\n\n    var appDomainRecord = new Scaleway.DomainRecord(\"app\", new()\n    {\n        DnsZone = \"domain.tld\",\n        Name = \"subdomain\",\n        Type = \"CNAME\",\n        Data = app.DomainName.Apply(domainName =\u003e $\"{domainName}.\"),\n        Ttl = 3600,\n    });\n\n    var appContainerDomain = new Scaleway.ContainerDomain(\"app\", new()\n    {\n        ContainerId = app.Id,\n        Hostname = Output.Tuple(appDomainRecord.Name, appDomainRecord.DnsZone).Apply(values =\u003e\n        {\n            var name = values.Item1;\n            var dnsZone = values.Item2;\n            return $\"{name}.{dnsZone}\";\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewContainerNamespace(ctx, \"main\", \u0026scaleway.ContainerNamespaceArgs{\n\t\t\tName:        pulumi.String(\"my-ns-test\"),\n\t\t\tDescription: pulumi.String(\"test container\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tapp, err := scaleway.NewContainer(ctx, \"app\", \u0026scaleway.ContainerArgs{\n\t\t\tName:        pulumi.String(\"app\"),\n\t\t\tNamespaceId: main.ID(),\n\t\t\tRegistryImage: main.RegistryEndpoint.ApplyT(func(registryEndpoint string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"%v/nginx:alpine\", registryEndpoint), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tPort:           pulumi.Int(80),\n\t\t\tCpuLimit:       pulumi.Int(140),\n\t\t\tMemoryLimit:    pulumi.Int(256),\n\t\t\tMinScale:       pulumi.Int(1),\n\t\t\tMaxScale:       pulumi.Int(1),\n\t\t\tTimeout:        pulumi.Int(600),\n\t\t\tMaxConcurrency: pulumi.Int(80),\n\t\t\tPrivacy:        pulumi.String(\"public\"),\n\t\t\tProtocol:       pulumi.String(\"http1\"),\n\t\t\tDeploy:         pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tappDomainRecord, err := scaleway.NewDomainRecord(ctx, \"app\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tName:    pulumi.String(\"subdomain\"),\n\t\t\tType:    pulumi.String(\"CNAME\"),\n\t\t\tData: app.DomainName.ApplyT(func(domainName string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"%v.\", domainName), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tTtl: pulumi.Int(3600),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewContainerDomain(ctx, \"app\", \u0026scaleway.ContainerDomainArgs{\n\t\t\tContainerId: app.ID(),\n\t\t\tHostname: pulumi.All(appDomainRecord.Name, appDomainRecord.DnsZone).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\tname := _args[0].(string)\n\t\t\t\tdnsZone := _args[1].(string)\n\t\t\t\treturn fmt.Sprintf(\"%v.%v\", name, dnsZone), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ContainerNamespace;\nimport com.pulumi.scaleway.ContainerNamespaceArgs;\nimport com.pulumi.scaleway.Container;\nimport com.pulumi.scaleway.ContainerArgs;\nimport com.pulumi.scaleway.DomainRecord;\nimport com.pulumi.scaleway.DomainRecordArgs;\nimport com.pulumi.scaleway.ContainerDomain;\nimport com.pulumi.scaleway.ContainerDomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new ContainerNamespace(\"main\", ContainerNamespaceArgs.builder()\n            .name(\"my-ns-test\")\n            .description(\"test container\")\n            .build());\n\n        var app = new Container(\"app\", ContainerArgs.builder()\n            .name(\"app\")\n            .namespaceId(main.id())\n            .registryImage(main.registryEndpoint().applyValue(registryEndpoint -\u003e String.format(\"%s/nginx:alpine\", registryEndpoint)))\n            .port(80)\n            .cpuLimit(140)\n            .memoryLimit(256)\n            .minScale(1)\n            .maxScale(1)\n            .timeout(600)\n            .maxConcurrency(80)\n            .privacy(\"public\")\n            .protocol(\"http1\")\n            .deploy(true)\n            .build());\n\n        var appDomainRecord = new DomainRecord(\"appDomainRecord\", DomainRecordArgs.builder()\n            .dnsZone(\"domain.tld\")\n            .name(\"subdomain\")\n            .type(\"CNAME\")\n            .data(app.domainName().applyValue(domainName -\u003e String.format(\"%s.\", domainName)))\n            .ttl(3600)\n            .build());\n\n        var appContainerDomain = new ContainerDomain(\"appContainerDomain\", ContainerDomainArgs.builder()\n            .containerId(app.id())\n            .hostname(Output.tuple(appDomainRecord.name(), appDomainRecord.dnsZone()).applyValue(values -\u003e {\n                var name = values.t1;\n                var dnsZone = values.t2;\n                return String.format(\"%s.%s\", name,dnsZone);\n            }))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:ContainerNamespace\n    properties:\n      name: my-ns-test\n      description: test container\n  app:\n    type: scaleway:Container\n    properties:\n      name: app\n      namespaceId: ${main.id}\n      registryImage: ${main.registryEndpoint}/nginx:alpine\n      port: 80\n      cpuLimit: 140\n      memoryLimit: 256\n      minScale: 1\n      maxScale: 1\n      timeout: 600\n      maxConcurrency: 80\n      privacy: public\n      protocol: http1\n      deploy: true\n  appDomainRecord:\n    type: scaleway:DomainRecord\n    name: app\n    properties:\n      dnsZone: domain.tld\n      name: subdomain\n      type: CNAME\n      data: ${app.domainName}.\n      ttl: 3600\n  appContainerDomain:\n    type: scaleway:ContainerDomain\n    name: app\n    properties:\n      containerId: ${app.id}\n      hostname: ${appDomainRecord.name}.${appDomainRecord.dnsZone}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nContainer domain binding can be imported using `{region}/{id}`, as shown below:\n\nbash\n\n```sh\n$ pulumi import scaleway:index/containerDomain:ContainerDomain main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "containerId": {
                    "type": "string",
                    "description": "The unique identifier of the container.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname with a CNAME record.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the container exists.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL used to query the container.\n"
                }
            },
            "required": [
                "containerId",
                "hostname",
                "region",
                "url"
            ],
            "inputProperties": {
                "containerId": {
                    "type": "string",
                    "description": "The unique identifier of the container.\n",
                    "willReplaceOnChanges": true
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname with a CNAME record.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the container exists.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "containerId",
                "hostname"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContainerDomain resources.\n",
                "properties": {
                    "containerId": {
                        "type": "string",
                        "description": "The unique identifier of the container.\n",
                        "willReplaceOnChanges": true
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname with a CNAME record.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the container exists.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL used to query the container.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/containerNamespace:ContainerNamespace": {
            "description": "The `scaleway.ContainerNamespace` resource allows you to\nfor Scaleway [Serverless Containers](https://www.scaleway.com/en/docs/serverless/containers/).\n\nRefer to the Containers namespace [documentation](https://www.scaleway.com/en/docs/serverless/containers/how-to/create-a-containers-namespace/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-containers/#path-namespaces-list-all-your-namespaces) for more information.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.ContainerNamespace(\"main\", {\n    name: \"main-container-namespace\",\n    description: \"Main container namespace\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.ContainerNamespace(\"main\",\n    name=\"main-container-namespace\",\n    description=\"Main container namespace\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.ContainerNamespace(\"main\", new()\n    {\n        Name = \"main-container-namespace\",\n        Description = \"Main container namespace\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewContainerNamespace(ctx, \"main\", \u0026scaleway.ContainerNamespaceArgs{\n\t\t\tName:        pulumi.String(\"main-container-namespace\"),\n\t\t\tDescription: pulumi.String(\"Main container namespace\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ContainerNamespace;\nimport com.pulumi.scaleway.ContainerNamespaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new ContainerNamespace(\"main\", ContainerNamespaceArgs.builder()\n            .name(\"main-container-namespace\")\n            .description(\"Main container namespace\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:ContainerNamespace\n    properties:\n      name: main-container-namespace\n      description: Main container namespace\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nContainers namespaces can be imported using `{region}/{id}`, as shown below:\n\nbash\n\n```sh\n$ pulumi import scaleway:index/containerNamespace:ContainerNamespace main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the namespace.\n"
                },
                "destroyRegistry": {
                    "type": "boolean",
                    "description": "Destroy registry on deletion\n",
                    "deprecationMessage": "Registry namespace is automatically destroyed with namespace"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The environment variables of the namespace.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the Containers namespace.\n\n\u003e **Important** Updates to the `name` argument will recreate the namespace.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The Organization ID with which the namespace is associated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The unique identifier of the project that contains the namespace.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace is created.\n"
                },
                "registryEndpoint": {
                    "type": "string",
                    "description": "The registry endpoint of the namespace.\n"
                },
                "registryNamespaceId": {
                    "type": "string",
                    "description": "The registry namespace ID of the namespace.\n"
                },
                "secretEnvironmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The secret environment variables of the namespace.\n",
                    "secret": true
                }
            },
            "required": [
                "name",
                "organizationId",
                "projectId",
                "region",
                "registryEndpoint",
                "registryNamespaceId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the namespace.\n"
                },
                "destroyRegistry": {
                    "type": "boolean",
                    "description": "Destroy registry on deletion\n",
                    "deprecationMessage": "Registry namespace is automatically destroyed with namespace"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The environment variables of the namespace.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the Containers namespace.\n\n\u003e **Important** Updates to the `name` argument will recreate the namespace.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The unique identifier of the project that contains the namespace.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace is created.\n",
                    "willReplaceOnChanges": true
                },
                "secretEnvironmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The secret environment variables of the namespace.\n",
                    "secret": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContainerNamespace resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the namespace.\n"
                    },
                    "destroyRegistry": {
                        "type": "boolean",
                        "description": "Destroy registry on deletion\n",
                        "deprecationMessage": "Registry namespace is automatically destroyed with namespace"
                    },
                    "environmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The environment variables of the namespace.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the Containers namespace.\n\n\u003e **Important** Updates to the `name` argument will recreate the namespace.\n",
                        "willReplaceOnChanges": true
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The Organization ID with which the namespace is associated.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The unique identifier of the project that contains the namespace.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the namespace is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "registryEndpoint": {
                        "type": "string",
                        "description": "The registry endpoint of the namespace.\n"
                    },
                    "registryNamespaceId": {
                        "type": "string",
                        "description": "The registry namespace ID of the namespace.\n"
                    },
                    "secretEnvironmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The secret environment variables of the namespace.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/containerToken:ContainerToken": {
            "description": "The `scaleway.ContainerToken` resource allows you to create and manage authentication tokens for Scaleway [Serverless Containers](https://www.scaleway.com/en/docs/serverless/containers/).\n\nRefer to the Containers tokens [documentation](https://www.scaleway.com/en/docs/serverless/containers/how-to/create-auth-token-from-console/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-containers/#path-tokens-list-all-tokens) for more information.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.ContainerNamespace(\"main\", {name: \"test-container-token-ns\"});\nconst mainContainer = new scaleway.Container(\"main\", {namespaceId: main.id});\n// Namespace Token\nconst namespace = new scaleway.ContainerToken(\"namespace\", {\n    namespaceId: main.id,\n    expiresAt: \"2022-10-18T11:35:15+02:00\",\n});\n// Container Token\nconst container = new scaleway.ContainerToken(\"container\", {containerId: mainContainer.id});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.ContainerNamespace(\"main\", name=\"test-container-token-ns\")\nmain_container = scaleway.Container(\"main\", namespace_id=main.id)\n# Namespace Token\nnamespace = scaleway.ContainerToken(\"namespace\",\n    namespace_id=main.id,\n    expires_at=\"2022-10-18T11:35:15+02:00\")\n# Container Token\ncontainer = scaleway.ContainerToken(\"container\", container_id=main_container.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.ContainerNamespace(\"main\", new()\n    {\n        Name = \"test-container-token-ns\",\n    });\n\n    var mainContainer = new Scaleway.Container(\"main\", new()\n    {\n        NamespaceId = main.Id,\n    });\n\n    // Namespace Token\n    var @namespace = new Scaleway.ContainerToken(\"namespace\", new()\n    {\n        NamespaceId = main.Id,\n        ExpiresAt = \"2022-10-18T11:35:15+02:00\",\n    });\n\n    // Container Token\n    var container = new Scaleway.ContainerToken(\"container\", new()\n    {\n        ContainerId = mainContainer.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewContainerNamespace(ctx, \"main\", \u0026scaleway.ContainerNamespaceArgs{\n\t\t\tName: pulumi.String(\"test-container-token-ns\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainContainer, err := scaleway.NewContainer(ctx, \"main\", \u0026scaleway.ContainerArgs{\n\t\t\tNamespaceId: main.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Namespace Token\n\t\t_, err = scaleway.NewContainerToken(ctx, \"namespace\", \u0026scaleway.ContainerTokenArgs{\n\t\t\tNamespaceId: main.ID(),\n\t\t\tExpiresAt:   pulumi.String(\"2022-10-18T11:35:15+02:00\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Container Token\n\t\t_, err = scaleway.NewContainerToken(ctx, \"container\", \u0026scaleway.ContainerTokenArgs{\n\t\t\tContainerId: mainContainer.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ContainerNamespace;\nimport com.pulumi.scaleway.ContainerNamespaceArgs;\nimport com.pulumi.scaleway.Container;\nimport com.pulumi.scaleway.ContainerArgs;\nimport com.pulumi.scaleway.ContainerToken;\nimport com.pulumi.scaleway.ContainerTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new ContainerNamespace(\"main\", ContainerNamespaceArgs.builder()\n            .name(\"test-container-token-ns\")\n            .build());\n\n        var mainContainer = new Container(\"mainContainer\", ContainerArgs.builder()\n            .namespaceId(main.id())\n            .build());\n\n        // Namespace Token\n        var namespace = new ContainerToken(\"namespace\", ContainerTokenArgs.builder()\n            .namespaceId(main.id())\n            .expiresAt(\"2022-10-18T11:35:15+02:00\")\n            .build());\n\n        // Container Token\n        var container = new ContainerToken(\"container\", ContainerTokenArgs.builder()\n            .containerId(mainContainer.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:ContainerNamespace\n    properties:\n      name: test-container-token-ns\n  mainContainer:\n    type: scaleway:Container\n    name: main\n    properties:\n      namespaceId: ${main.id}\n  # Namespace Token\n  namespace:\n    type: scaleway:ContainerToken\n    properties:\n      namespaceId: ${main.id}\n      expiresAt: 2022-10-18T11:35:15+02:00\n  # Container Token\n  container:\n    type: scaleway:ContainerToken\n    properties:\n      containerId: ${mainContainer.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nTokens can be imported using `{region}/{id}`, as shown below:\n\nbash\n\n```sh\n$ pulumi import scaleway:index/containerToken:ContainerToken main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "containerId": {
                    "type": "string",
                    "description": "The unique identifier of the container.\n\n\u003e Only one of `namespace_id` or `container_id` must be set.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the token.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The expiration date of the token.\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The unique identifier of the Containers namespace.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace is created.\n\n\u003e **Important** Updating any of the arguments above will recreate the token.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token.\n",
                    "secret": true
                }
            },
            "required": [
                "region",
                "token"
            ],
            "inputProperties": {
                "containerId": {
                    "type": "string",
                    "description": "The unique identifier of the container.\n\n\u003e Only one of `namespace_id` or `container_id` must be set.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the token.\n",
                    "willReplaceOnChanges": true
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The expiration date of the token.\n",
                    "willReplaceOnChanges": true
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The unique identifier of the Containers namespace.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace is created.\n\n\u003e **Important** Updating any of the arguments above will recreate the token.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContainerToken resources.\n",
                "properties": {
                    "containerId": {
                        "type": "string",
                        "description": "The unique identifier of the container.\n\n\u003e Only one of `namespace_id` or `container_id` must be set.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the token.\n",
                        "willReplaceOnChanges": true
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "The expiration date of the token.\n",
                        "willReplaceOnChanges": true
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The unique identifier of the Containers namespace.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the namespace is created.\n\n\u003e **Important** Updating any of the arguments above will recreate the token.\n",
                        "willReplaceOnChanges": true
                    },
                    "token": {
                        "type": "string",
                        "description": "The token.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/containerTrigger:ContainerTrigger": {
            "description": "The `scaleway.ContainerTrigger` resource allows you to create and manage triggers for Scaleway [Serverless Containers](https://www.scaleway.com/en/docs/serverless/containers/).\n\nRefer to the Containers triggers [documentation](https://www.scaleway.com/en/docs/serverless/containers/how-to/add-trigger-to-a-container/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-containers/#path-triggers-list-all-triggers) for more information.\n\n## Example Usage\n\n### SQS\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.ContainerTrigger(\"main\", {\n    containerId: mainScalewayContainer.id,\n    name: \"my-trigger\",\n    sqs: {\n        projectId: mainScalewayMnqSqs.projectId,\n        queue: \"MyQueue\",\n        region: mainScalewayMnqSqs.region,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.ContainerTrigger(\"main\",\n    container_id=main_scaleway_container[\"id\"],\n    name=\"my-trigger\",\n    sqs={\n        \"project_id\": main_scaleway_mnq_sqs[\"projectId\"],\n        \"queue\": \"MyQueue\",\n        \"region\": main_scaleway_mnq_sqs[\"region\"],\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.ContainerTrigger(\"main\", new()\n    {\n        ContainerId = mainScalewayContainer.Id,\n        Name = \"my-trigger\",\n        Sqs = new Scaleway.Inputs.ContainerTriggerSqsArgs\n        {\n            ProjectId = mainScalewayMnqSqs.ProjectId,\n            Queue = \"MyQueue\",\n            Region = mainScalewayMnqSqs.Region,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewContainerTrigger(ctx, \"main\", \u0026scaleway.ContainerTriggerArgs{\n\t\t\tContainerId: pulumi.Any(mainScalewayContainer.Id),\n\t\t\tName:        pulumi.String(\"my-trigger\"),\n\t\t\tSqs: \u0026scaleway.ContainerTriggerSqsArgs{\n\t\t\t\tProjectId: pulumi.Any(mainScalewayMnqSqs.ProjectId),\n\t\t\t\tQueue:     pulumi.String(\"MyQueue\"),\n\t\t\t\tRegion:    pulumi.Any(mainScalewayMnqSqs.Region),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ContainerTrigger;\nimport com.pulumi.scaleway.ContainerTriggerArgs;\nimport com.pulumi.scaleway.inputs.ContainerTriggerSqsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new ContainerTrigger(\"main\", ContainerTriggerArgs.builder()\n            .containerId(mainScalewayContainer.id())\n            .name(\"my-trigger\")\n            .sqs(ContainerTriggerSqsArgs.builder()\n                .projectId(mainScalewayMnqSqs.projectId())\n                .queue(\"MyQueue\")\n                .region(mainScalewayMnqSqs.region())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:ContainerTrigger\n    properties:\n      containerId: ${mainScalewayContainer.id}\n      name: my-trigger\n      sqs:\n        projectId: ${mainScalewayMnqSqs.projectId}\n        queue: MyQueue\n        region: ${mainScalewayMnqSqs.region}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### NATS\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.ContainerTrigger(\"main\", {\n    containerId: mainScalewayContainer.id,\n    name: \"my-trigger\",\n    nats: {\n        accountId: mainScalewayMnqNatsAccount.id,\n        subject: \"MySubject\",\n        region: mainScalewayMnqNatsAccount.region,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.ContainerTrigger(\"main\",\n    container_id=main_scaleway_container[\"id\"],\n    name=\"my-trigger\",\n    nats={\n        \"account_id\": main_scaleway_mnq_nats_account[\"id\"],\n        \"subject\": \"MySubject\",\n        \"region\": main_scaleway_mnq_nats_account[\"region\"],\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.ContainerTrigger(\"main\", new()\n    {\n        ContainerId = mainScalewayContainer.Id,\n        Name = \"my-trigger\",\n        Nats = new Scaleway.Inputs.ContainerTriggerNatsArgs\n        {\n            AccountId = mainScalewayMnqNatsAccount.Id,\n            Subject = \"MySubject\",\n            Region = mainScalewayMnqNatsAccount.Region,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewContainerTrigger(ctx, \"main\", \u0026scaleway.ContainerTriggerArgs{\n\t\t\tContainerId: pulumi.Any(mainScalewayContainer.Id),\n\t\t\tName:        pulumi.String(\"my-trigger\"),\n\t\t\tNats: \u0026scaleway.ContainerTriggerNatsArgs{\n\t\t\t\tAccountId: pulumi.Any(mainScalewayMnqNatsAccount.Id),\n\t\t\t\tSubject:   pulumi.String(\"MySubject\"),\n\t\t\t\tRegion:    pulumi.Any(mainScalewayMnqNatsAccount.Region),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ContainerTrigger;\nimport com.pulumi.scaleway.ContainerTriggerArgs;\nimport com.pulumi.scaleway.inputs.ContainerTriggerNatsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new ContainerTrigger(\"main\", ContainerTriggerArgs.builder()\n            .containerId(mainScalewayContainer.id())\n            .name(\"my-trigger\")\n            .nats(ContainerTriggerNatsArgs.builder()\n                .accountId(mainScalewayMnqNatsAccount.id())\n                .subject(\"MySubject\")\n                .region(mainScalewayMnqNatsAccount.region())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:ContainerTrigger\n    properties:\n      containerId: ${mainScalewayContainer.id}\n      name: my-trigger\n      nats:\n        accountId: ${mainScalewayMnqNatsAccount.id}\n        subject: MySubject\n        region: ${mainScalewayMnqNatsAccount.region}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nContainer Triggers can be imported using `{region}/{id}`, as shown below:\n\nbash\n\n```sh\n$ pulumi import scaleway:index/containerTrigger:ContainerTrigger main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "containerId": {
                    "type": "string",
                    "description": "The unique identifier of the container to create a trigger for.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the trigger.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the trigger. If not provided, a random name is generated.\n"
                },
                "nats": {
                    "$ref": "#/types/scaleway:index/ContainerTriggerNats:ContainerTriggerNats",
                    "description": "The configuration for the Scaleway NATS account used by the trigger\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace is created.\n"
                },
                "sqs": {
                    "$ref": "#/types/scaleway:index/ContainerTriggerSqs:ContainerTriggerSqs",
                    "description": "The configuration of the Scaleway SQS queue used by the trigger\n"
                }
            },
            "required": [
                "containerId",
                "name",
                "region"
            ],
            "inputProperties": {
                "containerId": {
                    "type": "string",
                    "description": "The unique identifier of the container to create a trigger for.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the trigger.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the trigger. If not provided, a random name is generated.\n"
                },
                "nats": {
                    "$ref": "#/types/scaleway:index/ContainerTriggerNats:ContainerTriggerNats",
                    "description": "The configuration for the Scaleway NATS account used by the trigger\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace is created.\n",
                    "willReplaceOnChanges": true
                },
                "sqs": {
                    "$ref": "#/types/scaleway:index/ContainerTriggerSqs:ContainerTriggerSqs",
                    "description": "The configuration of the Scaleway SQS queue used by the trigger\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "containerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContainerTrigger resources.\n",
                "properties": {
                    "containerId": {
                        "type": "string",
                        "description": "The unique identifier of the container to create a trigger for.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the trigger.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the trigger. If not provided, a random name is generated.\n"
                    },
                    "nats": {
                        "$ref": "#/types/scaleway:index/ContainerTriggerNats:ContainerTriggerNats",
                        "description": "The configuration for the Scaleway NATS account used by the trigger\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the namespace is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "sqs": {
                        "$ref": "#/types/scaleway:index/ContainerTriggerSqs:ContainerTriggerSqs",
                        "description": "The configuration of the Scaleway SQS queue used by the trigger\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/database:Database": {
            "description": "Creates and manages databases.\nFor more information, refer to [the API documentation](https://www.scaleway.com/en/developers/api/managed-database-postgre-mysql/).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.DatabaseInstance(\"main\", {\n    name: \"test-rdb\",\n    nodeType: \"DB-DEV-S\",\n    engine: \"PostgreSQL-15\",\n    isHaCluster: true,\n    disableBackup: true,\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n});\nconst mainDatabase = new scaleway.Database(\"main\", {\n    instanceId: main.id,\n    name: \"my-new-database\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.DatabaseInstance(\"main\",\n    name=\"test-rdb\",\n    node_type=\"DB-DEV-S\",\n    engine=\"PostgreSQL-15\",\n    is_ha_cluster=True,\n    disable_backup=True,\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\")\nmain_database = scaleway.Database(\"main\",\n    instance_id=main.id,\n    name=\"my-new-database\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.DatabaseInstance(\"main\", new()\n    {\n        Name = \"test-rdb\",\n        NodeType = \"DB-DEV-S\",\n        Engine = \"PostgreSQL-15\",\n        IsHaCluster = true,\n        DisableBackup = true,\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n    });\n\n    var mainDatabase = new Scaleway.Database(\"main\", new()\n    {\n        InstanceId = main.Id,\n        Name = \"my-new-database\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewDatabaseInstance(ctx, \"main\", \u0026scaleway.DatabaseInstanceArgs{\n\t\t\tName:          pulumi.String(\"test-rdb\"),\n\t\t\tNodeType:      pulumi.String(\"DB-DEV-S\"),\n\t\t\tEngine:        pulumi.String(\"PostgreSQL-15\"),\n\t\t\tIsHaCluster:   pulumi.Bool(true),\n\t\t\tDisableBackup: pulumi.Bool(true),\n\t\t\tUserName:      pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:      pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDatabase(ctx, \"main\", \u0026scaleway.DatabaseArgs{\n\t\t\tInstanceId: main.ID(),\n\t\t\tName:       pulumi.String(\"my-new-database\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DatabaseInstance;\nimport com.pulumi.scaleway.DatabaseInstanceArgs;\nimport com.pulumi.scaleway.Database;\nimport com.pulumi.scaleway.DatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new DatabaseInstance(\"main\", DatabaseInstanceArgs.builder()\n            .name(\"test-rdb\")\n            .nodeType(\"DB-DEV-S\")\n            .engine(\"PostgreSQL-15\")\n            .isHaCluster(true)\n            .disableBackup(true)\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .build());\n\n        var mainDatabase = new Database(\"mainDatabase\", DatabaseArgs.builder()\n            .instanceId(main.id())\n            .name(\"my-new-database\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:DatabaseInstance\n    properties:\n      name: test-rdb\n      nodeType: DB-DEV-S\n      engine: PostgreSQL-15\n      isHaCluster: true\n      disableBackup: true\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n  mainDatabase:\n    type: scaleway:Database\n    name: main\n    properties:\n      instanceId: ${main.id}\n      name: my-new-database\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nRDB Database can be imported using the `{region}/{id}/{DBNAME}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/database:Database rdb01_mydb fr-par/11111111-1111-1111-1111-111111111111/mydb\n```\n\n",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the Database Instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the database.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Whether the database is managed or not.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-new-database`).\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The name of the owner of the database.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the resource exists.\n"
                },
                "size": {
                    "type": "string",
                    "description": "Size of the database (in bytes).\n"
                }
            },
            "required": [
                "instanceId",
                "managed",
                "name",
                "owner",
                "region",
                "size"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the Database Instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the database.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-new-database`).\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the resource exists.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Database resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the Database Instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the database.\n",
                        "willReplaceOnChanges": true
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Whether the database is managed or not.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the database (e.g. `my-new-database`).\n",
                        "willReplaceOnChanges": true
                    },
                    "owner": {
                        "type": "string",
                        "description": "The name of the owner of the database.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the resource exists.\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "string",
                        "description": "Size of the database (in bytes).\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/databaseAcl:DatabaseAcl": {
            "description": "Creates and manages Scaleway Database instance authorized IPs.\nFor more information refer to the [API documentation](https://www.scaleway.com/en/developers/api/managed-database-postgre-mysql/#acl-rules-allowed-ips).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.DatabaseInstance(\"main\", {\n    name: \"test-rdb\",\n    nodeType: \"DB-DEV-S\",\n    engine: \"PostgreSQL-15\",\n    isHaCluster: true,\n    disableBackup: true,\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n});\nconst mainDatabaseAcl = new scaleway.DatabaseAcl(\"main\", {\n    instanceId: main.id,\n    aclRules: [{\n        ip: \"1.2.3.4/32\",\n        description: \"foo\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.DatabaseInstance(\"main\",\n    name=\"test-rdb\",\n    node_type=\"DB-DEV-S\",\n    engine=\"PostgreSQL-15\",\n    is_ha_cluster=True,\n    disable_backup=True,\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\")\nmain_database_acl = scaleway.DatabaseAcl(\"main\",\n    instance_id=main.id,\n    acl_rules=[{\n        \"ip\": \"1.2.3.4/32\",\n        \"description\": \"foo\",\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.DatabaseInstance(\"main\", new()\n    {\n        Name = \"test-rdb\",\n        NodeType = \"DB-DEV-S\",\n        Engine = \"PostgreSQL-15\",\n        IsHaCluster = true,\n        DisableBackup = true,\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n    });\n\n    var mainDatabaseAcl = new Scaleway.DatabaseAcl(\"main\", new()\n    {\n        InstanceId = main.Id,\n        AclRules = new[]\n        {\n            new Scaleway.Inputs.DatabaseAclAclRuleArgs\n            {\n                Ip = \"1.2.3.4/32\",\n                Description = \"foo\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewDatabaseInstance(ctx, \"main\", \u0026scaleway.DatabaseInstanceArgs{\n\t\t\tName:          pulumi.String(\"test-rdb\"),\n\t\t\tNodeType:      pulumi.String(\"DB-DEV-S\"),\n\t\t\tEngine:        pulumi.String(\"PostgreSQL-15\"),\n\t\t\tIsHaCluster:   pulumi.Bool(true),\n\t\t\tDisableBackup: pulumi.Bool(true),\n\t\t\tUserName:      pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:      pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDatabaseAcl(ctx, \"main\", \u0026scaleway.DatabaseAclArgs{\n\t\t\tInstanceId: main.ID(),\n\t\t\tAclRules: scaleway.DatabaseAclAclRuleArray{\n\t\t\t\t\u0026scaleway.DatabaseAclAclRuleArgs{\n\t\t\t\t\tIp:          pulumi.String(\"1.2.3.4/32\"),\n\t\t\t\t\tDescription: pulumi.String(\"foo\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DatabaseInstance;\nimport com.pulumi.scaleway.DatabaseInstanceArgs;\nimport com.pulumi.scaleway.DatabaseAcl;\nimport com.pulumi.scaleway.DatabaseAclArgs;\nimport com.pulumi.scaleway.inputs.DatabaseAclAclRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new DatabaseInstance(\"main\", DatabaseInstanceArgs.builder()\n            .name(\"test-rdb\")\n            .nodeType(\"DB-DEV-S\")\n            .engine(\"PostgreSQL-15\")\n            .isHaCluster(true)\n            .disableBackup(true)\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .build());\n\n        var mainDatabaseAcl = new DatabaseAcl(\"mainDatabaseAcl\", DatabaseAclArgs.builder()\n            .instanceId(main.id())\n            .aclRules(DatabaseAclAclRuleArgs.builder()\n                .ip(\"1.2.3.4/32\")\n                .description(\"foo\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:DatabaseInstance\n    properties:\n      name: test-rdb\n      nodeType: DB-DEV-S\n      engine: PostgreSQL-15\n      isHaCluster: true\n      disableBackup: true\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n  mainDatabaseAcl:\n    type: scaleway:DatabaseAcl\n    name: main\n    properties:\n      instanceId: ${main.id}\n      aclRules:\n        - ip: 1.2.3.4/32\n          description: foo\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nDatabase Instance can be imported using the `{region}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/databaseAcl:DatabaseAcl acl01 fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "aclRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DatabaseAclAclRule:DatabaseAclAclRule"
                    },
                    "description": "A list of ACLs (structure is described below)\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the Database Instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Database ACL.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the Database Instance should be created.\n"
                }
            },
            "required": [
                "aclRules",
                "instanceId",
                "region"
            ],
            "inputProperties": {
                "aclRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DatabaseAclAclRule:DatabaseAclAclRule"
                    },
                    "description": "A list of ACLs (structure is described below)\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the Database Instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Database ACL.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the Database Instance should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "aclRules",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseAcl resources.\n",
                "properties": {
                    "aclRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/DatabaseAclAclRule:DatabaseAclAclRule"
                        },
                        "description": "A list of ACLs (structure is described below)\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the Database Instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Database ACL.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the Database Instance should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/databaseBackup:DatabaseBackup": {
            "description": "Creates and manages database backups.\nFor more information, refer to [the API documentation](https://www.scaleway.com/en/developers/api/managed-database-postgre-mysql/).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.DatabaseInstance(\"main\", {\n    name: \"test-rdb\",\n    nodeType: \"DB-DEV-S\",\n    engine: \"PostgreSQL-15\",\n    isHaCluster: true,\n    disableBackup: true,\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n});\nconst mainDatabase = new scaleway.Database(\"main\", {\n    instanceId: main.id,\n    name: \"database\",\n});\nconst mainDatabaseBackup = new scaleway.DatabaseBackup(\"main\", {\n    instanceId: main.id,\n    databaseName: mainDatabase.name,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.DatabaseInstance(\"main\",\n    name=\"test-rdb\",\n    node_type=\"DB-DEV-S\",\n    engine=\"PostgreSQL-15\",\n    is_ha_cluster=True,\n    disable_backup=True,\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\")\nmain_database = scaleway.Database(\"main\",\n    instance_id=main.id,\n    name=\"database\")\nmain_database_backup = scaleway.DatabaseBackup(\"main\",\n    instance_id=main.id,\n    database_name=main_database.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.DatabaseInstance(\"main\", new()\n    {\n        Name = \"test-rdb\",\n        NodeType = \"DB-DEV-S\",\n        Engine = \"PostgreSQL-15\",\n        IsHaCluster = true,\n        DisableBackup = true,\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n    });\n\n    var mainDatabase = new Scaleway.Database(\"main\", new()\n    {\n        InstanceId = main.Id,\n        Name = \"database\",\n    });\n\n    var mainDatabaseBackup = new Scaleway.DatabaseBackup(\"main\", new()\n    {\n        InstanceId = main.Id,\n        DatabaseName = mainDatabase.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewDatabaseInstance(ctx, \"main\", \u0026scaleway.DatabaseInstanceArgs{\n\t\t\tName:          pulumi.String(\"test-rdb\"),\n\t\t\tNodeType:      pulumi.String(\"DB-DEV-S\"),\n\t\t\tEngine:        pulumi.String(\"PostgreSQL-15\"),\n\t\t\tIsHaCluster:   pulumi.Bool(true),\n\t\t\tDisableBackup: pulumi.Bool(true),\n\t\t\tUserName:      pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:      pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainDatabase, err := scaleway.NewDatabase(ctx, \"main\", \u0026scaleway.DatabaseArgs{\n\t\t\tInstanceId: main.ID(),\n\t\t\tName:       pulumi.String(\"database\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDatabaseBackup(ctx, \"main\", \u0026scaleway.DatabaseBackupArgs{\n\t\t\tInstanceId:   main.ID(),\n\t\t\tDatabaseName: mainDatabase.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DatabaseInstance;\nimport com.pulumi.scaleway.DatabaseInstanceArgs;\nimport com.pulumi.scaleway.Database;\nimport com.pulumi.scaleway.DatabaseArgs;\nimport com.pulumi.scaleway.DatabaseBackup;\nimport com.pulumi.scaleway.DatabaseBackupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new DatabaseInstance(\"main\", DatabaseInstanceArgs.builder()\n            .name(\"test-rdb\")\n            .nodeType(\"DB-DEV-S\")\n            .engine(\"PostgreSQL-15\")\n            .isHaCluster(true)\n            .disableBackup(true)\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .build());\n\n        var mainDatabase = new Database(\"mainDatabase\", DatabaseArgs.builder()\n            .instanceId(main.id())\n            .name(\"database\")\n            .build());\n\n        var mainDatabaseBackup = new DatabaseBackup(\"mainDatabaseBackup\", DatabaseBackupArgs.builder()\n            .instanceId(main.id())\n            .databaseName(mainDatabase.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:DatabaseInstance\n    properties:\n      name: test-rdb\n      nodeType: DB-DEV-S\n      engine: PostgreSQL-15\n      isHaCluster: true\n      disableBackup: true\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n  mainDatabase:\n    type: scaleway:Database\n    name: main\n    properties:\n      instanceId: ${main.id}\n      name: database\n  mainDatabaseBackup:\n    type: scaleway:DatabaseBackup\n    name: main\n    properties:\n      instanceId: ${main.id}\n      databaseName: ${mainDatabase.name}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### With expiration\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.DatabaseBackup(\"main\", {\n    instanceId: mainScalewayRdbInstance.id,\n    databaseName: mainScalewayRdbDatabase.name,\n    expiresAt: \"2022-06-16T07:48:44Z\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.DatabaseBackup(\"main\",\n    instance_id=main_scaleway_rdb_instance[\"id\"],\n    database_name=main_scaleway_rdb_database[\"name\"],\n    expires_at=\"2022-06-16T07:48:44Z\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.DatabaseBackup(\"main\", new()\n    {\n        InstanceId = mainScalewayRdbInstance.Id,\n        DatabaseName = mainScalewayRdbDatabase.Name,\n        ExpiresAt = \"2022-06-16T07:48:44Z\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDatabaseBackup(ctx, \"main\", \u0026scaleway.DatabaseBackupArgs{\n\t\t\tInstanceId:   pulumi.Any(mainScalewayRdbInstance.Id),\n\t\t\tDatabaseName: pulumi.Any(mainScalewayRdbDatabase.Name),\n\t\t\tExpiresAt:    pulumi.String(\"2022-06-16T07:48:44Z\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DatabaseBackup;\nimport com.pulumi.scaleway.DatabaseBackupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new DatabaseBackup(\"main\", DatabaseBackupArgs.builder()\n            .instanceId(mainScalewayRdbInstance.id())\n            .databaseName(mainScalewayRdbDatabase.name())\n            .expiresAt(\"2022-06-16T07:48:44Z\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:DatabaseBackup\n    properties:\n      instanceId: ${mainScalewayRdbInstance.id}\n      databaseName: ${mainScalewayRdbDatabase.name}\n      expiresAt: 2022-06-16T07:48:44Z\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nDatabases can be imported using the `{region}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/databaseBackup:DatabaseBackup mybackup fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation date (Format ISO 8601).\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "Name of the database of this backup.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "Expiration date (Format ISO 8601).\n\n\u003e **Important:** `expires_at` cannot be removed after being set.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the Database Instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the backup.\n"
                },
                "instanceName": {
                    "type": "string",
                    "description": "Name of the instance of the backup.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-database`).\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the resource exists.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "Size of the backup (in bytes).\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Updated date (Format ISO 8601).\n"
                }
            },
            "required": [
                "createdAt",
                "databaseName",
                "instanceId",
                "instanceName",
                "name",
                "region",
                "size",
                "updatedAt"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "Name of the database of this backup.\n",
                    "willReplaceOnChanges": true
                },
                "expiresAt": {
                    "type": "string",
                    "description": "Expiration date (Format ISO 8601).\n\n\u003e **Important:** `expires_at` cannot be removed after being set.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the Database Instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the backup.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-database`).\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the resource exists.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseName",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseBackup resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation date (Format ISO 8601).\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "Name of the database of this backup.\n",
                        "willReplaceOnChanges": true
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "Expiration date (Format ISO 8601).\n\n\u003e **Important:** `expires_at` cannot be removed after being set.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the Database Instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the backup.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "Name of the instance of the backup.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the database (e.g. `my-database`).\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the resource exists.\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "integer",
                        "description": "Size of the backup (in bytes).\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Updated date (Format ISO 8601).\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/databaseInstance:DatabaseInstance": {
            "description": "Creates and manages Scaleway Database Instances.\nFor more information, see refer to [the API documentation](https://www.scaleway.com/en/developers/api/managed-database-postgre-mysql/).\n\n## Example Usage\n\n### Example Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.DatabaseInstance(\"main\", {\n    name: \"test-rdb\",\n    nodeType: \"DB-DEV-S\",\n    engine: \"PostgreSQL-15\",\n    isHaCluster: true,\n    disableBackup: true,\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    encryptionAtRest: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.DatabaseInstance(\"main\",\n    name=\"test-rdb\",\n    node_type=\"DB-DEV-S\",\n    engine=\"PostgreSQL-15\",\n    is_ha_cluster=True,\n    disable_backup=True,\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    encryption_at_rest=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.DatabaseInstance(\"main\", new()\n    {\n        Name = \"test-rdb\",\n        NodeType = \"DB-DEV-S\",\n        Engine = \"PostgreSQL-15\",\n        IsHaCluster = true,\n        DisableBackup = true,\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        EncryptionAtRest = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDatabaseInstance(ctx, \"main\", \u0026scaleway.DatabaseInstanceArgs{\n\t\t\tName:             pulumi.String(\"test-rdb\"),\n\t\t\tNodeType:         pulumi.String(\"DB-DEV-S\"),\n\t\t\tEngine:           pulumi.String(\"PostgreSQL-15\"),\n\t\t\tIsHaCluster:      pulumi.Bool(true),\n\t\t\tDisableBackup:    pulumi.Bool(true),\n\t\t\tUserName:         pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:         pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tEncryptionAtRest: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DatabaseInstance;\nimport com.pulumi.scaleway.DatabaseInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new DatabaseInstance(\"main\", DatabaseInstanceArgs.builder()\n            .name(\"test-rdb\")\n            .nodeType(\"DB-DEV-S\")\n            .engine(\"PostgreSQL-15\")\n            .isHaCluster(true)\n            .disableBackup(true)\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .encryptionAtRest(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:DatabaseInstance\n    properties:\n      name: test-rdb\n      nodeType: DB-DEV-S\n      engine: PostgreSQL-15\n      isHaCluster: true\n      disableBackup: true\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n      encryptionAtRest: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Example Block Storage Low Latency\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.DatabaseInstance(\"main\", {\n    name: \"test-rdb-sbs\",\n    nodeType: \"db-play2-pico\",\n    engine: \"PostgreSQL-15\",\n    isHaCluster: true,\n    disableBackup: true,\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    volumeType: \"sbs_15k\",\n    volumeSizeInGb: 10,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.DatabaseInstance(\"main\",\n    name=\"test-rdb-sbs\",\n    node_type=\"db-play2-pico\",\n    engine=\"PostgreSQL-15\",\n    is_ha_cluster=True,\n    disable_backup=True,\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    volume_type=\"sbs_15k\",\n    volume_size_in_gb=10)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.DatabaseInstance(\"main\", new()\n    {\n        Name = \"test-rdb-sbs\",\n        NodeType = \"db-play2-pico\",\n        Engine = \"PostgreSQL-15\",\n        IsHaCluster = true,\n        DisableBackup = true,\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        VolumeType = \"sbs_15k\",\n        VolumeSizeInGb = 10,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDatabaseInstance(ctx, \"main\", \u0026scaleway.DatabaseInstanceArgs{\n\t\t\tName:           pulumi.String(\"test-rdb-sbs\"),\n\t\t\tNodeType:       pulumi.String(\"db-play2-pico\"),\n\t\t\tEngine:         pulumi.String(\"PostgreSQL-15\"),\n\t\t\tIsHaCluster:    pulumi.Bool(true),\n\t\t\tDisableBackup:  pulumi.Bool(true),\n\t\t\tUserName:       pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:       pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tVolumeType:     pulumi.String(\"sbs_15k\"),\n\t\t\tVolumeSizeInGb: pulumi.Int(10),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DatabaseInstance;\nimport com.pulumi.scaleway.DatabaseInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new DatabaseInstance(\"main\", DatabaseInstanceArgs.builder()\n            .name(\"test-rdb-sbs\")\n            .nodeType(\"db-play2-pico\")\n            .engine(\"PostgreSQL-15\")\n            .isHaCluster(true)\n            .disableBackup(true)\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .volumeType(\"sbs_15k\")\n            .volumeSizeInGb(10)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:DatabaseInstance\n    properties:\n      name: test-rdb-sbs\n      nodeType: db-play2-pico\n      engine: PostgreSQL-15\n      isHaCluster: true\n      disableBackup: true\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n      volumeType: sbs_15k\n      volumeSizeInGb: 10\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Example with Settings\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.DatabaseInstance(\"main\", {\n    name: \"test-rdb\",\n    nodeType: \"db-dev-s\",\n    disableBackup: true,\n    engine: \"MySQL-8\",\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    initSettings: {\n        lower_case_table_names: \"1\",\n    },\n    settings: {\n        max_connections: \"350\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.DatabaseInstance(\"main\",\n    name=\"test-rdb\",\n    node_type=\"db-dev-s\",\n    disable_backup=True,\n    engine=\"MySQL-8\",\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    init_settings={\n        \"lower_case_table_names\": \"1\",\n    },\n    settings={\n        \"max_connections\": \"350\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.DatabaseInstance(\"main\", new()\n    {\n        Name = \"test-rdb\",\n        NodeType = \"db-dev-s\",\n        DisableBackup = true,\n        Engine = \"MySQL-8\",\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        InitSettings = \n        {\n            { \"lower_case_table_names\", \"1\" },\n        },\n        Settings = \n        {\n            { \"max_connections\", \"350\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDatabaseInstance(ctx, \"main\", \u0026scaleway.DatabaseInstanceArgs{\n\t\t\tName:          pulumi.String(\"test-rdb\"),\n\t\t\tNodeType:      pulumi.String(\"db-dev-s\"),\n\t\t\tDisableBackup: pulumi.Bool(true),\n\t\t\tEngine:        pulumi.String(\"MySQL-8\"),\n\t\t\tUserName:      pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:      pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tInitSettings: pulumi.StringMap{\n\t\t\t\t\"lower_case_table_names\": pulumi.String(\"1\"),\n\t\t\t},\n\t\t\tSettings: pulumi.StringMap{\n\t\t\t\t\"max_connections\": pulumi.String(\"350\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DatabaseInstance;\nimport com.pulumi.scaleway.DatabaseInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new DatabaseInstance(\"main\", DatabaseInstanceArgs.builder()\n            .name(\"test-rdb\")\n            .nodeType(\"db-dev-s\")\n            .disableBackup(true)\n            .engine(\"MySQL-8\")\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .initSettings(Map.of(\"lower_case_table_names\", 1))\n            .settings(Map.of(\"max_connections\", \"350\"))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:DatabaseInstance\n    properties:\n      name: test-rdb\n      nodeType: db-dev-s\n      disableBackup: true\n      engine: MySQL-8\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n      initSettings:\n        lower_case_table_names: 1\n      settings:\n        max_connections: '350'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Example with backup schedule\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.DatabaseInstance(\"main\", {\n    name: \"test-rdb\",\n    nodeType: \"DB-DEV-S\",\n    engine: \"PostgreSQL-15\",\n    isHaCluster: true,\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    disableBackup: false,\n    backupScheduleFrequency: 24,\n    backupScheduleRetention: 7,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.DatabaseInstance(\"main\",\n    name=\"test-rdb\",\n    node_type=\"DB-DEV-S\",\n    engine=\"PostgreSQL-15\",\n    is_ha_cluster=True,\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    disable_backup=False,\n    backup_schedule_frequency=24,\n    backup_schedule_retention=7)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.DatabaseInstance(\"main\", new()\n    {\n        Name = \"test-rdb\",\n        NodeType = \"DB-DEV-S\",\n        Engine = \"PostgreSQL-15\",\n        IsHaCluster = true,\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        DisableBackup = false,\n        BackupScheduleFrequency = 24,\n        BackupScheduleRetention = 7,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDatabaseInstance(ctx, \"main\", \u0026scaleway.DatabaseInstanceArgs{\n\t\t\tName:                    pulumi.String(\"test-rdb\"),\n\t\t\tNodeType:                pulumi.String(\"DB-DEV-S\"),\n\t\t\tEngine:                  pulumi.String(\"PostgreSQL-15\"),\n\t\t\tIsHaCluster:             pulumi.Bool(true),\n\t\t\tUserName:                pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:                pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tDisableBackup:           pulumi.Bool(false),\n\t\t\tBackupScheduleFrequency: pulumi.Int(24),\n\t\t\tBackupScheduleRetention: pulumi.Int(7),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DatabaseInstance;\nimport com.pulumi.scaleway.DatabaseInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new DatabaseInstance(\"main\", DatabaseInstanceArgs.builder()\n            .name(\"test-rdb\")\n            .nodeType(\"DB-DEV-S\")\n            .engine(\"PostgreSQL-15\")\n            .isHaCluster(true)\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .disableBackup(false)\n            .backupScheduleFrequency(24)\n            .backupScheduleRetention(7)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:DatabaseInstance\n    properties:\n      name: test-rdb\n      nodeType: DB-DEV-S\n      engine: PostgreSQL-15\n      isHaCluster: true\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n      disableBackup: false\n      backupScheduleFrequency: 24 # every day\n      backupScheduleRetention: 7 # keep it one week\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Examples of endpoint configuration\n\nDatabase Instances can have a maximum of 1 public endpoint and 1 private endpoint. They can have both, or none.\n\n### 1 static Private Network endpoint\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst pn = new scaleway.VpcPrivateNetwork(\"pn\", {ipv4Subnet: {\n    subnet: \"172.16.20.0/22\",\n}});\nconst main = new scaleway.DatabaseInstance(\"main\", {\n    nodeType: \"db-dev-s\",\n    engine: \"PostgreSQL-15\",\n    privateNetwork: {\n        pnId: pn.id,\n        ipNet: \"172.16.20.4/22\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\npn = scaleway.VpcPrivateNetwork(\"pn\", ipv4_subnet={\n    \"subnet\": \"172.16.20.0/22\",\n})\nmain = scaleway.DatabaseInstance(\"main\",\n    node_type=\"db-dev-s\",\n    engine=\"PostgreSQL-15\",\n    private_network={\n        \"pn_id\": pn.id,\n        \"ip_net\": \"172.16.20.4/22\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pn = new Scaleway.VpcPrivateNetwork(\"pn\", new()\n    {\n        Ipv4Subnet = new Scaleway.Inputs.VpcPrivateNetworkIpv4SubnetArgs\n        {\n            Subnet = \"172.16.20.0/22\",\n        },\n    });\n\n    var main = new Scaleway.DatabaseInstance(\"main\", new()\n    {\n        NodeType = \"db-dev-s\",\n        Engine = \"PostgreSQL-15\",\n        PrivateNetwork = new Scaleway.Inputs.DatabaseInstancePrivateNetworkArgs\n        {\n            PnId = pn.Id,\n            IpNet = \"172.16.20.4/22\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tIpv4Subnet: \u0026scaleway.VpcPrivateNetworkIpv4SubnetArgs{\n\t\t\t\tSubnet: pulumi.String(\"172.16.20.0/22\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDatabaseInstance(ctx, \"main\", \u0026scaleway.DatabaseInstanceArgs{\n\t\t\tNodeType: pulumi.String(\"db-dev-s\"),\n\t\t\tEngine:   pulumi.String(\"PostgreSQL-15\"),\n\t\t\tPrivateNetwork: \u0026scaleway.DatabaseInstancePrivateNetworkArgs{\n\t\t\t\tPnId:  pn.ID(),\n\t\t\t\tIpNet: pulumi.String(\"172.16.20.4/22\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.inputs.VpcPrivateNetworkIpv4SubnetArgs;\nimport com.pulumi.scaleway.DatabaseInstance;\nimport com.pulumi.scaleway.DatabaseInstanceArgs;\nimport com.pulumi.scaleway.inputs.DatabaseInstancePrivateNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pn = new VpcPrivateNetwork(\"pn\", VpcPrivateNetworkArgs.builder()\n            .ipv4Subnet(VpcPrivateNetworkIpv4SubnetArgs.builder()\n                .subnet(\"172.16.20.0/22\")\n                .build())\n            .build());\n\n        var main = new DatabaseInstance(\"main\", DatabaseInstanceArgs.builder()\n            .nodeType(\"db-dev-s\")\n            .engine(\"PostgreSQL-15\")\n            .privateNetwork(DatabaseInstancePrivateNetworkArgs.builder()\n                .pnId(pn.id())\n                .ipNet(\"172.16.20.4/22\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pn:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      ipv4Subnet:\n        subnet: 172.16.20.0/22\n  main:\n    type: scaleway:DatabaseInstance\n    properties:\n      nodeType: db-dev-s\n      engine: PostgreSQL-15\n      privateNetwork:\n        pnId: ${pn.id}\n        ipNet: 172.16.20.4/22\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### 1 IPAM Private Network endpoint + 1 public endpoint\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst pn = new scaleway.VpcPrivateNetwork(\"pn\", {});\nconst main = new scaleway.DatabaseInstance(\"main\", {\n    loadBalancers: [{}],\n    nodeType: \"DB-DEV-S\",\n    engine: \"PostgreSQL-15\",\n    privateNetwork: {\n        pnId: pn.id,\n        enableIpam: true,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\npn = scaleway.VpcPrivateNetwork(\"pn\")\nmain = scaleway.DatabaseInstance(\"main\",\n    load_balancers=[{}],\n    node_type=\"DB-DEV-S\",\n    engine=\"PostgreSQL-15\",\n    private_network={\n        \"pn_id\": pn.id,\n        \"enable_ipam\": True,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pn = new Scaleway.VpcPrivateNetwork(\"pn\");\n\n    var main = new Scaleway.DatabaseInstance(\"main\", new()\n    {\n        LoadBalancers = new[]\n        {\n            null,\n        },\n        NodeType = \"DB-DEV-S\",\n        Engine = \"PostgreSQL-15\",\n        PrivateNetwork = new Scaleway.Inputs.DatabaseInstancePrivateNetworkArgs\n        {\n            PnId = pn.Id,\n            EnableIpam = true,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDatabaseInstance(ctx, \"main\", \u0026scaleway.DatabaseInstanceArgs{\n\t\t\tLoadBalancers: scaleway.DatabaseInstanceLoadBalancerArray{\n\t\t\t\t\u0026scaleway.DatabaseInstanceLoadBalancerArgs{},\n\t\t\t},\n\t\t\tNodeType: pulumi.String(\"DB-DEV-S\"),\n\t\t\tEngine:   pulumi.String(\"PostgreSQL-15\"),\n\t\t\tPrivateNetwork: \u0026scaleway.DatabaseInstancePrivateNetworkArgs{\n\t\t\t\tPnId:       pn.ID(),\n\t\t\t\tEnableIpam: pulumi.Bool(true),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.DatabaseInstance;\nimport com.pulumi.scaleway.DatabaseInstanceArgs;\nimport com.pulumi.scaleway.inputs.DatabaseInstanceLoadBalancerArgs;\nimport com.pulumi.scaleway.inputs.DatabaseInstancePrivateNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pn = new VpcPrivateNetwork(\"pn\");\n\n        var main = new DatabaseInstance(\"main\", DatabaseInstanceArgs.builder()\n            .loadBalancers()\n            .nodeType(\"DB-DEV-S\")\n            .engine(\"PostgreSQL-15\")\n            .privateNetwork(DatabaseInstancePrivateNetworkArgs.builder()\n                .pnId(pn.id())\n                .enableIpam(true)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pn:\n    type: scaleway:VpcPrivateNetwork\n  main:\n    type: scaleway:DatabaseInstance\n    properties:\n      loadBalancers:\n        - {}\n      nodeType: DB-DEV-S\n      engine: PostgreSQL-15\n      privateNetwork:\n        pnId: ${pn.id}\n        enableIpam: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Default: 1 public endpoint\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.DatabaseInstance(\"main\", {\n    nodeType: \"db-dev-s\",\n    engine: \"PostgreSQL-15\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.DatabaseInstance(\"main\",\n    node_type=\"db-dev-s\",\n    engine=\"PostgreSQL-15\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.DatabaseInstance(\"main\", new()\n    {\n        NodeType = \"db-dev-s\",\n        Engine = \"PostgreSQL-15\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDatabaseInstance(ctx, \"main\", \u0026scaleway.DatabaseInstanceArgs{\n\t\t\tNodeType: pulumi.String(\"db-dev-s\"),\n\t\t\tEngine:   pulumi.String(\"PostgreSQL-15\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DatabaseInstance;\nimport com.pulumi.scaleway.DatabaseInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new DatabaseInstance(\"main\", DatabaseInstanceArgs.builder()\n            .nodeType(\"db-dev-s\")\n            .engine(\"PostgreSQL-15\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:DatabaseInstance\n    properties:\n      nodeType: db-dev-s\n      engine: PostgreSQL-15\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **Note** If nothing is defined, your Database Instance will have a default public load-balancer endpoint.\n\n## Limitations\n\nThe Managed Database product is only compliant with the Private Network in the default availability zone (AZ).\ni.e. `fr-par-1`, `nl-ams-1`, `pl-waw-1`. To learn more, read our\nsection [How to connect a PostgreSQL and MySQL Database Instance to a Private Network](https://www.scaleway.com/en/docs/managed-databases/postgresql-and-mysql/how-to/connect-database-private-network/)\n\n## Import\n\nDatabase Instance can be imported using the `{region}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/databaseInstance:DatabaseInstance rdb01 fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "backupSameRegion": {
                    "type": "boolean",
                    "description": "Boolean to store logical backups in the same region as the database instance\n"
                },
                "backupScheduleFrequency": {
                    "type": "integer",
                    "description": "Backup schedule frequency in hours\n"
                },
                "backupScheduleRetention": {
                    "type": "integer",
                    "description": "Backup schedule retention in days\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "Certificate of the Database Instance.\n"
                },
                "disableBackup": {
                    "type": "boolean",
                    "description": "Disable automated backup for the database instance\n"
                },
                "encryptionAtRest": {
                    "type": "boolean",
                    "description": "Enable or disable encryption at rest for the Database Instance.\n"
                },
                "endpointIp": {
                    "type": "string",
                    "description": "(Deprecated) The IP of the Database Instance. Please use the private_network or the load_balancer attribute.\n",
                    "deprecationMessage": "Please use the private_network or the load_balancer attribute"
                },
                "endpointPort": {
                    "type": "integer",
                    "description": "(Deprecated) The port of the Database Instance. Please use the private_network or the load_balancer attribute.\n",
                    "deprecationMessage": "Please use the private_network or the load_balancer attribute"
                },
                "engine": {
                    "type": "string",
                    "description": "Database Instance's engine version (e.g. `PostgreSQL-11`).\n\n\u003e **Important** Updates to `engine` will recreate the Database Instance.\n"
                },
                "initSettings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of engine settings to be set at database initialisation.\n"
                },
                "isHaCluster": {
                    "type": "boolean",
                    "description": "Enable or disable high availability for the Database Instance.\n\n\u003e **Important** Updates to `is_ha_cluster` will recreate the Database Instance.\n"
                },
                "loadBalancers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DatabaseInstanceLoadBalancer:DatabaseInstanceLoadBalancer"
                    },
                    "description": "List of Load Balancer endpoints of the Database Instance.\n"
                },
                "logsPolicy": {
                    "$ref": "#/types/scaleway:index/DatabaseInstanceLogsPolicy:DatabaseInstanceLogsPolicy",
                    "description": "Logs policy configuration\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Database Instance.\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "The type of Database Instance you want to create (e.g. `db-dev-s`).\n\n\u003e **Important** Updates to `node_type` will upgrade the Database Instance to the desired `node_type` without any\ninterruption.\n\n\u003e **Important** Once your Database Instance reaches `disk_full` status, if you are using `lssd` storage, you should upgrade the `node_type`, and if you are using `bssd` storage, you should increase the volume size before making any other changes to your Database Instance.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the Database Instance is associated with.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the first user of the Database Instance.\n",
                    "secret": true
                },
                "privateNetwork": {
                    "$ref": "#/types/scaleway:index/DatabaseInstancePrivateNetwork:DatabaseInstancePrivateNetwork",
                    "description": "List of Private Networks endpoints of the Database Instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the Database\nInstance is associated with.\n"
                },
                "readReplicas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DatabaseInstanceReadReplica:DatabaseInstanceReadReplica"
                    },
                    "description": "List of read replicas of the Database Instance.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region\nin which the Database Instance should be created.\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of engine settings to be set on a running instance.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Database Instance.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Identifier for the first user of the Database Instance.\n\n\u003e **Important** Updates to `user_name` will recreate the Database Instance.\n"
                },
                "volumeSizeInGb": {
                    "type": "integer",
                    "description": "Volume size (in GB). Cannot be used when `volume_type` is set to `lssd`.\n\n\u003e **Important** Once your Database Instance reaches `disk_full` status, you should increase the volume size before making any other change to your Database Instance.\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "Type of volume where data are stored (`bssd`, `lssd`, `sbs_5k` or `sbs_15k`).\n"
                }
            },
            "required": [
                "backupSameRegion",
                "backupScheduleFrequency",
                "backupScheduleRetention",
                "certificate",
                "endpointIp",
                "endpointPort",
                "engine",
                "loadBalancers",
                "logsPolicy",
                "name",
                "nodeType",
                "organizationId",
                "projectId",
                "readReplicas",
                "region",
                "settings",
                "userName",
                "volumeSizeInGb"
            ],
            "inputProperties": {
                "backupSameRegion": {
                    "type": "boolean",
                    "description": "Boolean to store logical backups in the same region as the database instance\n"
                },
                "backupScheduleFrequency": {
                    "type": "integer",
                    "description": "Backup schedule frequency in hours\n"
                },
                "backupScheduleRetention": {
                    "type": "integer",
                    "description": "Backup schedule retention in days\n"
                },
                "disableBackup": {
                    "type": "boolean",
                    "description": "Disable automated backup for the database instance\n"
                },
                "encryptionAtRest": {
                    "type": "boolean",
                    "description": "Enable or disable encryption at rest for the Database Instance.\n",
                    "willReplaceOnChanges": true
                },
                "engine": {
                    "type": "string",
                    "description": "Database Instance's engine version (e.g. `PostgreSQL-11`).\n\n\u003e **Important** Updates to `engine` will recreate the Database Instance.\n",
                    "willReplaceOnChanges": true
                },
                "initSettings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of engine settings to be set at database initialisation.\n",
                    "willReplaceOnChanges": true
                },
                "isHaCluster": {
                    "type": "boolean",
                    "description": "Enable or disable high availability for the Database Instance.\n\n\u003e **Important** Updates to `is_ha_cluster` will recreate the Database Instance.\n"
                },
                "loadBalancers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DatabaseInstanceLoadBalancer:DatabaseInstanceLoadBalancer"
                    },
                    "description": "List of Load Balancer endpoints of the Database Instance.\n"
                },
                "logsPolicy": {
                    "$ref": "#/types/scaleway:index/DatabaseInstanceLogsPolicy:DatabaseInstanceLogsPolicy",
                    "description": "Logs policy configuration\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Database Instance.\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "The type of Database Instance you want to create (e.g. `db-dev-s`).\n\n\u003e **Important** Updates to `node_type` will upgrade the Database Instance to the desired `node_type` without any\ninterruption.\n\n\u003e **Important** Once your Database Instance reaches `disk_full` status, if you are using `lssd` storage, you should upgrade the `node_type`, and if you are using `bssd` storage, you should increase the volume size before making any other changes to your Database Instance.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the first user of the Database Instance.\n",
                    "secret": true
                },
                "privateNetwork": {
                    "$ref": "#/types/scaleway:index/DatabaseInstancePrivateNetwork:DatabaseInstancePrivateNetwork",
                    "description": "List of Private Networks endpoints of the Database Instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the Database\nInstance is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region\nin which the Database Instance should be created.\n",
                    "willReplaceOnChanges": true
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of engine settings to be set on a running instance.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Database Instance.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Identifier for the first user of the Database Instance.\n\n\u003e **Important** Updates to `user_name` will recreate the Database Instance.\n",
                    "willReplaceOnChanges": true
                },
                "volumeSizeInGb": {
                    "type": "integer",
                    "description": "Volume size (in GB). Cannot be used when `volume_type` is set to `lssd`.\n\n\u003e **Important** Once your Database Instance reaches `disk_full` status, you should increase the volume size before making any other change to your Database Instance.\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "Type of volume where data are stored (`bssd`, `lssd`, `sbs_5k` or `sbs_15k`).\n"
                }
            },
            "requiredInputs": [
                "engine",
                "nodeType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseInstance resources.\n",
                "properties": {
                    "backupSameRegion": {
                        "type": "boolean",
                        "description": "Boolean to store logical backups in the same region as the database instance\n"
                    },
                    "backupScheduleFrequency": {
                        "type": "integer",
                        "description": "Backup schedule frequency in hours\n"
                    },
                    "backupScheduleRetention": {
                        "type": "integer",
                        "description": "Backup schedule retention in days\n"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "Certificate of the Database Instance.\n"
                    },
                    "disableBackup": {
                        "type": "boolean",
                        "description": "Disable automated backup for the database instance\n"
                    },
                    "encryptionAtRest": {
                        "type": "boolean",
                        "description": "Enable or disable encryption at rest for the Database Instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "endpointIp": {
                        "type": "string",
                        "description": "(Deprecated) The IP of the Database Instance. Please use the private_network or the load_balancer attribute.\n",
                        "deprecationMessage": "Please use the private_network or the load_balancer attribute"
                    },
                    "endpointPort": {
                        "type": "integer",
                        "description": "(Deprecated) The port of the Database Instance. Please use the private_network or the load_balancer attribute.\n",
                        "deprecationMessage": "Please use the private_network or the load_balancer attribute"
                    },
                    "engine": {
                        "type": "string",
                        "description": "Database Instance's engine version (e.g. `PostgreSQL-11`).\n\n\u003e **Important** Updates to `engine` will recreate the Database Instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "initSettings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of engine settings to be set at database initialisation.\n",
                        "willReplaceOnChanges": true
                    },
                    "isHaCluster": {
                        "type": "boolean",
                        "description": "Enable or disable high availability for the Database Instance.\n\n\u003e **Important** Updates to `is_ha_cluster` will recreate the Database Instance.\n"
                    },
                    "loadBalancers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/DatabaseInstanceLoadBalancer:DatabaseInstanceLoadBalancer"
                        },
                        "description": "List of Load Balancer endpoints of the Database Instance.\n"
                    },
                    "logsPolicy": {
                        "$ref": "#/types/scaleway:index/DatabaseInstanceLogsPolicy:DatabaseInstanceLogsPolicy",
                        "description": "Logs policy configuration\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Database Instance.\n"
                    },
                    "nodeType": {
                        "type": "string",
                        "description": "The type of Database Instance you want to create (e.g. `db-dev-s`).\n\n\u003e **Important** Updates to `node_type` will upgrade the Database Instance to the desired `node_type` without any\ninterruption.\n\n\u003e **Important** Once your Database Instance reaches `disk_full` status, if you are using `lssd` storage, you should upgrade the `node_type`, and if you are using `bssd` storage, you should increase the volume size before making any other changes to your Database Instance.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the Database Instance is associated with.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for the first user of the Database Instance.\n",
                        "secret": true
                    },
                    "privateNetwork": {
                        "$ref": "#/types/scaleway:index/DatabaseInstancePrivateNetwork:DatabaseInstancePrivateNetwork",
                        "description": "List of Private Networks endpoints of the Database Instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the Database\nInstance is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "readReplicas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/DatabaseInstanceReadReplica:DatabaseInstanceReadReplica"
                        },
                        "description": "List of read replicas of the Database Instance.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region\nin which the Database Instance should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "settings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of engine settings to be set on a running instance.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the Database Instance.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "Identifier for the first user of the Database Instance.\n\n\u003e **Important** Updates to `user_name` will recreate the Database Instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "volumeSizeInGb": {
                        "type": "integer",
                        "description": "Volume size (in GB). Cannot be used when `volume_type` is set to `lssd`.\n\n\u003e **Important** Once your Database Instance reaches `disk_full` status, you should increase the volume size before making any other change to your Database Instance.\n"
                    },
                    "volumeType": {
                        "type": "string",
                        "description": "Type of volume where data are stored (`bssd`, `lssd`, `sbs_5k` or `sbs_15k`).\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/databasePrivilege:DatabasePrivilege": {
            "description": "Create and manage Scaleway database privileges.\nFor more information refer to [the API documentation](https://www.scaleway.com/en/developers/api/managed-database-postgre-mysql/#user-and-permissions).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.DatabaseInstance(\"main\", {\n    name: \"rdb\",\n    nodeType: \"DB-DEV-S\",\n    engine: \"PostgreSQL-11\",\n    isHaCluster: true,\n    disableBackup: true,\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n});\nconst mainDatabase = new scaleway.Database(\"main\", {\n    instanceId: main.id,\n    name: \"database\",\n});\nconst mainDatabaseUser = new scaleway.DatabaseUser(\"main\", {\n    instanceId: main.id,\n    name: \"my-db-user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    isAdmin: false,\n});\nconst mainDatabasePrivilege = new scaleway.DatabasePrivilege(\"main\", {\n    instanceId: main.id,\n    userName: mainDatabaseUser.name,\n    databaseName: mainDatabase.name,\n    permission: \"all\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.DatabaseInstance(\"main\",\n    name=\"rdb\",\n    node_type=\"DB-DEV-S\",\n    engine=\"PostgreSQL-11\",\n    is_ha_cluster=True,\n    disable_backup=True,\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\")\nmain_database = scaleway.Database(\"main\",\n    instance_id=main.id,\n    name=\"database\")\nmain_database_user = scaleway.DatabaseUser(\"main\",\n    instance_id=main.id,\n    name=\"my-db-user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    is_admin=False)\nmain_database_privilege = scaleway.DatabasePrivilege(\"main\",\n    instance_id=main.id,\n    user_name=main_database_user.name,\n    database_name=main_database.name,\n    permission=\"all\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.DatabaseInstance(\"main\", new()\n    {\n        Name = \"rdb\",\n        NodeType = \"DB-DEV-S\",\n        Engine = \"PostgreSQL-11\",\n        IsHaCluster = true,\n        DisableBackup = true,\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n    });\n\n    var mainDatabase = new Scaleway.Database(\"main\", new()\n    {\n        InstanceId = main.Id,\n        Name = \"database\",\n    });\n\n    var mainDatabaseUser = new Scaleway.DatabaseUser(\"main\", new()\n    {\n        InstanceId = main.Id,\n        Name = \"my-db-user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        IsAdmin = false,\n    });\n\n    var mainDatabasePrivilege = new Scaleway.DatabasePrivilege(\"main\", new()\n    {\n        InstanceId = main.Id,\n        UserName = mainDatabaseUser.Name,\n        DatabaseName = mainDatabase.Name,\n        Permission = \"all\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewDatabaseInstance(ctx, \"main\", \u0026scaleway.DatabaseInstanceArgs{\n\t\t\tName:          pulumi.String(\"rdb\"),\n\t\t\tNodeType:      pulumi.String(\"DB-DEV-S\"),\n\t\t\tEngine:        pulumi.String(\"PostgreSQL-11\"),\n\t\t\tIsHaCluster:   pulumi.Bool(true),\n\t\t\tDisableBackup: pulumi.Bool(true),\n\t\t\tUserName:      pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:      pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainDatabase, err := scaleway.NewDatabase(ctx, \"main\", \u0026scaleway.DatabaseArgs{\n\t\t\tInstanceId: main.ID(),\n\t\t\tName:       pulumi.String(\"database\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainDatabaseUser, err := scaleway.NewDatabaseUser(ctx, \"main\", \u0026scaleway.DatabaseUserArgs{\n\t\t\tInstanceId: main.ID(),\n\t\t\tName:       pulumi.String(\"my-db-user\"),\n\t\t\tPassword:   pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tIsAdmin:    pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDatabasePrivilege(ctx, \"main\", \u0026scaleway.DatabasePrivilegeArgs{\n\t\t\tInstanceId:   main.ID(),\n\t\t\tUserName:     mainDatabaseUser.Name,\n\t\t\tDatabaseName: mainDatabase.Name,\n\t\t\tPermission:   pulumi.String(\"all\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DatabaseInstance;\nimport com.pulumi.scaleway.DatabaseInstanceArgs;\nimport com.pulumi.scaleway.Database;\nimport com.pulumi.scaleway.DatabaseArgs;\nimport com.pulumi.scaleway.DatabaseUser;\nimport com.pulumi.scaleway.DatabaseUserArgs;\nimport com.pulumi.scaleway.DatabasePrivilege;\nimport com.pulumi.scaleway.DatabasePrivilegeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new DatabaseInstance(\"main\", DatabaseInstanceArgs.builder()\n            .name(\"rdb\")\n            .nodeType(\"DB-DEV-S\")\n            .engine(\"PostgreSQL-11\")\n            .isHaCluster(true)\n            .disableBackup(true)\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .build());\n\n        var mainDatabase = new Database(\"mainDatabase\", DatabaseArgs.builder()\n            .instanceId(main.id())\n            .name(\"database\")\n            .build());\n\n        var mainDatabaseUser = new DatabaseUser(\"mainDatabaseUser\", DatabaseUserArgs.builder()\n            .instanceId(main.id())\n            .name(\"my-db-user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .isAdmin(false)\n            .build());\n\n        var mainDatabasePrivilege = new DatabasePrivilege(\"mainDatabasePrivilege\", DatabasePrivilegeArgs.builder()\n            .instanceId(main.id())\n            .userName(mainDatabaseUser.name())\n            .databaseName(mainDatabase.name())\n            .permission(\"all\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:DatabaseInstance\n    properties:\n      name: rdb\n      nodeType: DB-DEV-S\n      engine: PostgreSQL-11\n      isHaCluster: true\n      disableBackup: true\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n  mainDatabase:\n    type: scaleway:Database\n    name: main\n    properties:\n      instanceId: ${main.id}\n      name: database\n  mainDatabaseUser:\n    type: scaleway:DatabaseUser\n    name: main\n    properties:\n      instanceId: ${main.id}\n      name: my-db-user\n      password: thiZ_is_v\u0026ry_s3cret\n      isAdmin: false\n  mainDatabasePrivilege:\n    type: scaleway:DatabasePrivilege\n    name: main\n    properties:\n      instanceId: ${main.id}\n      userName: ${mainDatabaseUser.name}\n      databaseName: ${mainDatabase.name}\n      permission: all\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nThe user privileges can be imported using the `{region}/{instance_id}/{database_name}/{user_name}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/databasePrivilege:DatabasePrivilege o fr-par/11111111-1111-1111-1111-111111111111/database_name/foo\n```\n\n",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-db-name`).\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the Database Instance.\n"
                },
                "permission": {
                    "type": "string",
                    "description": "Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the resource exists.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Name of the user (e.g. `my-db-user`).\n"
                }
            },
            "required": [
                "databaseName",
                "instanceId",
                "permission",
                "region",
                "userName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-db-name`).\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the Database Instance.\n",
                    "willReplaceOnChanges": true
                },
                "permission": {
                    "type": "string",
                    "description": "Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the resource exists.\n",
                    "willReplaceOnChanges": true
                },
                "userName": {
                    "type": "string",
                    "description": "Name of the user (e.g. `my-db-user`).\n"
                }
            },
            "requiredInputs": [
                "databaseName",
                "instanceId",
                "permission",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabasePrivilege resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Name of the database (e.g. `my-db-name`).\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the Database Instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "permission": {
                        "type": "string",
                        "description": "Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the resource exists.\n",
                        "willReplaceOnChanges": true
                    },
                    "userName": {
                        "type": "string",
                        "description": "Name of the user (e.g. `my-db-user`).\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/databaseReadReplica:DatabaseReadReplica": {
            "description": "Creates and manages Read Replicas.\nFor more information refer to [the API documentation](https://www.scaleway.com/en/developers/api/managed-database-postgre-mysql/).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst instance = new scaleway.DatabaseInstance(\"instance\", {\n    name: \"test-rdb-rr-update\",\n    nodeType: \"db-dev-s\",\n    engine: \"PostgreSQL-14\",\n    isHaCluster: false,\n    disableBackup: true,\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    tags: [\n        \"terraform-test\",\n        \"scaleway_rdb_read_replica\",\n        \"minimal\",\n    ],\n});\nconst replica = new scaleway.DatabaseReadReplica(\"replica\", {\n    instanceId: instance.id,\n    directAccess: {},\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\ninstance = scaleway.DatabaseInstance(\"instance\",\n    name=\"test-rdb-rr-update\",\n    node_type=\"db-dev-s\",\n    engine=\"PostgreSQL-14\",\n    is_ha_cluster=False,\n    disable_backup=True,\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    tags=[\n        \"terraform-test\",\n        \"scaleway_rdb_read_replica\",\n        \"minimal\",\n    ])\nreplica = scaleway.DatabaseReadReplica(\"replica\",\n    instance_id=instance.id,\n    direct_access={})\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var instance = new Scaleway.DatabaseInstance(\"instance\", new()\n    {\n        Name = \"test-rdb-rr-update\",\n        NodeType = \"db-dev-s\",\n        Engine = \"PostgreSQL-14\",\n        IsHaCluster = false,\n        DisableBackup = true,\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        Tags = new[]\n        {\n            \"terraform-test\",\n            \"scaleway_rdb_read_replica\",\n            \"minimal\",\n        },\n    });\n\n    var replica = new Scaleway.DatabaseReadReplica(\"replica\", new()\n    {\n        InstanceId = instance.Id,\n        DirectAccess = null,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinstance, err := scaleway.NewDatabaseInstance(ctx, \"instance\", \u0026scaleway.DatabaseInstanceArgs{\n\t\t\tName:          pulumi.String(\"test-rdb-rr-update\"),\n\t\t\tNodeType:      pulumi.String(\"db-dev-s\"),\n\t\t\tEngine:        pulumi.String(\"PostgreSQL-14\"),\n\t\t\tIsHaCluster:   pulumi.Bool(false),\n\t\t\tDisableBackup: pulumi.Bool(true),\n\t\t\tUserName:      pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:      pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"terraform-test\"),\n\t\t\t\tpulumi.String(\"scaleway_rdb_read_replica\"),\n\t\t\t\tpulumi.String(\"minimal\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDatabaseReadReplica(ctx, \"replica\", \u0026scaleway.DatabaseReadReplicaArgs{\n\t\t\tInstanceId:   instance.ID(),\n\t\t\tDirectAccess: \u0026scaleway.DatabaseReadReplicaDirectAccessArgs{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DatabaseInstance;\nimport com.pulumi.scaleway.DatabaseInstanceArgs;\nimport com.pulumi.scaleway.DatabaseReadReplica;\nimport com.pulumi.scaleway.DatabaseReadReplicaArgs;\nimport com.pulumi.scaleway.inputs.DatabaseReadReplicaDirectAccessArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var instance = new DatabaseInstance(\"instance\", DatabaseInstanceArgs.builder()\n            .name(\"test-rdb-rr-update\")\n            .nodeType(\"db-dev-s\")\n            .engine(\"PostgreSQL-14\")\n            .isHaCluster(false)\n            .disableBackup(true)\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .tags(            \n                \"terraform-test\",\n                \"scaleway_rdb_read_replica\",\n                \"minimal\")\n            .build());\n\n        var replica = new DatabaseReadReplica(\"replica\", DatabaseReadReplicaArgs.builder()\n            .instanceId(instance.id())\n            .directAccess()\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  instance:\n    type: scaleway:DatabaseInstance\n    properties:\n      name: test-rdb-rr-update\n      nodeType: db-dev-s\n      engine: PostgreSQL-14\n      isHaCluster: false\n      disableBackup: true\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n      tags:\n        - terraform-test\n        - scaleway_rdb_read_replica\n        - minimal\n  replica:\n    type: scaleway:DatabaseReadReplica\n    properties:\n      instanceId: ${instance.id}\n      directAccess: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Private network with static endpoint\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst instance = new scaleway.DatabaseInstance(\"instance\", {\n    name: \"rdb_instance\",\n    nodeType: \"db-dev-s\",\n    engine: \"PostgreSQL-14\",\n    isHaCluster: false,\n    disableBackup: true,\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n});\nconst pn = new scaleway.VpcPrivateNetwork(\"pn\", {});\nconst replica = new scaleway.DatabaseReadReplica(\"replica\", {\n    instanceId: instance.id,\n    privateNetwork: {\n        privateNetworkId: pn.id,\n        serviceIp: \"192.168.1.254/24\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\ninstance = scaleway.DatabaseInstance(\"instance\",\n    name=\"rdb_instance\",\n    node_type=\"db-dev-s\",\n    engine=\"PostgreSQL-14\",\n    is_ha_cluster=False,\n    disable_backup=True,\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\")\npn = scaleway.VpcPrivateNetwork(\"pn\")\nreplica = scaleway.DatabaseReadReplica(\"replica\",\n    instance_id=instance.id,\n    private_network={\n        \"private_network_id\": pn.id,\n        \"service_ip\": \"192.168.1.254/24\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var instance = new Scaleway.DatabaseInstance(\"instance\", new()\n    {\n        Name = \"rdb_instance\",\n        NodeType = \"db-dev-s\",\n        Engine = \"PostgreSQL-14\",\n        IsHaCluster = false,\n        DisableBackup = true,\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n    });\n\n    var pn = new Scaleway.VpcPrivateNetwork(\"pn\");\n\n    var replica = new Scaleway.DatabaseReadReplica(\"replica\", new()\n    {\n        InstanceId = instance.Id,\n        PrivateNetwork = new Scaleway.Inputs.DatabaseReadReplicaPrivateNetworkArgs\n        {\n            PrivateNetworkId = pn.Id,\n            ServiceIp = \"192.168.1.254/24\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinstance, err := scaleway.NewDatabaseInstance(ctx, \"instance\", \u0026scaleway.DatabaseInstanceArgs{\n\t\t\tName:          pulumi.String(\"rdb_instance\"),\n\t\t\tNodeType:      pulumi.String(\"db-dev-s\"),\n\t\t\tEngine:        pulumi.String(\"PostgreSQL-14\"),\n\t\t\tIsHaCluster:   pulumi.Bool(false),\n\t\t\tDisableBackup: pulumi.Bool(true),\n\t\t\tUserName:      pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:      pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpn, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDatabaseReadReplica(ctx, \"replica\", \u0026scaleway.DatabaseReadReplicaArgs{\n\t\t\tInstanceId: instance.ID(),\n\t\t\tPrivateNetwork: \u0026scaleway.DatabaseReadReplicaPrivateNetworkArgs{\n\t\t\t\tPrivateNetworkId: pn.ID(),\n\t\t\t\tServiceIp:        pulumi.String(\"192.168.1.254/24\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DatabaseInstance;\nimport com.pulumi.scaleway.DatabaseInstanceArgs;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.DatabaseReadReplica;\nimport com.pulumi.scaleway.DatabaseReadReplicaArgs;\nimport com.pulumi.scaleway.inputs.DatabaseReadReplicaPrivateNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var instance = new DatabaseInstance(\"instance\", DatabaseInstanceArgs.builder()\n            .name(\"rdb_instance\")\n            .nodeType(\"db-dev-s\")\n            .engine(\"PostgreSQL-14\")\n            .isHaCluster(false)\n            .disableBackup(true)\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .build());\n\n        var pn = new VpcPrivateNetwork(\"pn\");\n\n        var replica = new DatabaseReadReplica(\"replica\", DatabaseReadReplicaArgs.builder()\n            .instanceId(instance.id())\n            .privateNetwork(DatabaseReadReplicaPrivateNetworkArgs.builder()\n                .privateNetworkId(pn.id())\n                .serviceIp(\"192.168.1.254/24\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  instance:\n    type: scaleway:DatabaseInstance\n    properties:\n      name: rdb_instance\n      nodeType: db-dev-s\n      engine: PostgreSQL-14\n      isHaCluster: false\n      disableBackup: true\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n  pn:\n    type: scaleway:VpcPrivateNetwork\n  replica:\n    type: scaleway:DatabaseReadReplica\n    properties:\n      instanceId: ${instance.id}\n      privateNetwork:\n        privateNetworkId: ${pn.id}\n        serviceIp: 192.168.1.254/24\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Private network with IPAM\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst instance = new scaleway.DatabaseInstance(\"instance\", {\n    name: \"rdb_instance\",\n    nodeType: \"db-dev-s\",\n    engine: \"PostgreSQL-14\",\n    isHaCluster: false,\n    disableBackup: true,\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n});\nconst pn = new scaleway.VpcPrivateNetwork(\"pn\", {});\nconst replica = new scaleway.DatabaseReadReplica(\"replica\", {\n    instanceId: instance.id,\n    privateNetwork: {\n        privateNetworkId: pn.id,\n        enableIpam: true,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\ninstance = scaleway.DatabaseInstance(\"instance\",\n    name=\"rdb_instance\",\n    node_type=\"db-dev-s\",\n    engine=\"PostgreSQL-14\",\n    is_ha_cluster=False,\n    disable_backup=True,\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\")\npn = scaleway.VpcPrivateNetwork(\"pn\")\nreplica = scaleway.DatabaseReadReplica(\"replica\",\n    instance_id=instance.id,\n    private_network={\n        \"private_network_id\": pn.id,\n        \"enable_ipam\": True,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var instance = new Scaleway.DatabaseInstance(\"instance\", new()\n    {\n        Name = \"rdb_instance\",\n        NodeType = \"db-dev-s\",\n        Engine = \"PostgreSQL-14\",\n        IsHaCluster = false,\n        DisableBackup = true,\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n    });\n\n    var pn = new Scaleway.VpcPrivateNetwork(\"pn\");\n\n    var replica = new Scaleway.DatabaseReadReplica(\"replica\", new()\n    {\n        InstanceId = instance.Id,\n        PrivateNetwork = new Scaleway.Inputs.DatabaseReadReplicaPrivateNetworkArgs\n        {\n            PrivateNetworkId = pn.Id,\n            EnableIpam = true,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinstance, err := scaleway.NewDatabaseInstance(ctx, \"instance\", \u0026scaleway.DatabaseInstanceArgs{\n\t\t\tName:          pulumi.String(\"rdb_instance\"),\n\t\t\tNodeType:      pulumi.String(\"db-dev-s\"),\n\t\t\tEngine:        pulumi.String(\"PostgreSQL-14\"),\n\t\t\tIsHaCluster:   pulumi.Bool(false),\n\t\t\tDisableBackup: pulumi.Bool(true),\n\t\t\tUserName:      pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:      pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpn, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDatabaseReadReplica(ctx, \"replica\", \u0026scaleway.DatabaseReadReplicaArgs{\n\t\t\tInstanceId: instance.ID(),\n\t\t\tPrivateNetwork: \u0026scaleway.DatabaseReadReplicaPrivateNetworkArgs{\n\t\t\t\tPrivateNetworkId: pn.ID(),\n\t\t\t\tEnableIpam:       pulumi.Bool(true),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DatabaseInstance;\nimport com.pulumi.scaleway.DatabaseInstanceArgs;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.DatabaseReadReplica;\nimport com.pulumi.scaleway.DatabaseReadReplicaArgs;\nimport com.pulumi.scaleway.inputs.DatabaseReadReplicaPrivateNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var instance = new DatabaseInstance(\"instance\", DatabaseInstanceArgs.builder()\n            .name(\"rdb_instance\")\n            .nodeType(\"db-dev-s\")\n            .engine(\"PostgreSQL-14\")\n            .isHaCluster(false)\n            .disableBackup(true)\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .build());\n\n        var pn = new VpcPrivateNetwork(\"pn\");\n\n        var replica = new DatabaseReadReplica(\"replica\", DatabaseReadReplicaArgs.builder()\n            .instanceId(instance.id())\n            .privateNetwork(DatabaseReadReplicaPrivateNetworkArgs.builder()\n                .privateNetworkId(pn.id())\n                .enableIpam(true)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  instance:\n    type: scaleway:DatabaseInstance\n    properties:\n      name: rdb_instance\n      nodeType: db-dev-s\n      engine: PostgreSQL-14\n      isHaCluster: false\n      disableBackup: true\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n  pn:\n    type: scaleway:VpcPrivateNetwork\n  replica:\n    type: scaleway:DatabaseReadReplica\n    properties:\n      instanceId: ${instance.id}\n      privateNetwork:\n        privateNetworkId: ${pn.id}\n        enableIpam: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nRead Replicas can be imported using the `{region}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/databaseReadReplica:DatabaseReadReplica rr fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "directAccess": {
                    "$ref": "#/types/scaleway:index/DatabaseReadReplicaDirectAccess:DatabaseReadReplicaDirectAccess",
                    "description": "Creates a direct access endpoint to rdb replica.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the rdb instance.\n\n\u003e **Important:** The replica musts contains at least one `direct_access` or `private_network`. It can contain both.\n"
                },
                "privateNetwork": {
                    "$ref": "#/types/scaleway:index/DatabaseReadReplicaPrivateNetwork:DatabaseReadReplicaPrivateNetwork",
                    "description": "Create an endpoint in a Private Netork.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region\nin which the Read Replica should be created.\n"
                },
                "sameZone": {
                    "type": "boolean",
                    "description": "Defines whether to create the replica in the same availability zone as the main instance nodes or not.\n"
                }
            },
            "required": [
                "instanceId",
                "region"
            ],
            "inputProperties": {
                "directAccess": {
                    "$ref": "#/types/scaleway:index/DatabaseReadReplicaDirectAccess:DatabaseReadReplicaDirectAccess",
                    "description": "Creates a direct access endpoint to rdb replica.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the rdb instance.\n\n\u003e **Important:** The replica musts contains at least one `direct_access` or `private_network`. It can contain both.\n"
                },
                "privateNetwork": {
                    "$ref": "#/types/scaleway:index/DatabaseReadReplicaPrivateNetwork:DatabaseReadReplicaPrivateNetwork",
                    "description": "Create an endpoint in a Private Netork.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region\nin which the Read Replica should be created.\n",
                    "willReplaceOnChanges": true
                },
                "sameZone": {
                    "type": "boolean",
                    "description": "Defines whether to create the replica in the same availability zone as the main instance nodes or not.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseReadReplica resources.\n",
                "properties": {
                    "directAccess": {
                        "$ref": "#/types/scaleway:index/DatabaseReadReplicaDirectAccess:DatabaseReadReplicaDirectAccess",
                        "description": "Creates a direct access endpoint to rdb replica.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the rdb instance.\n\n\u003e **Important:** The replica musts contains at least one `direct_access` or `private_network`. It can contain both.\n"
                    },
                    "privateNetwork": {
                        "$ref": "#/types/scaleway:index/DatabaseReadReplicaPrivateNetwork:DatabaseReadReplicaPrivateNetwork",
                        "description": "Create an endpoint in a Private Netork.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region\nin which the Read Replica should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "sameZone": {
                        "type": "boolean",
                        "description": "Defines whether to create the replica in the same availability zone as the main instance nodes or not.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/databaseUser:DatabaseUser": {
            "description": "Creates and manages database users.\nFor more information refer to [the API documentation](https://www.scaleway.com/en/developers/api/managed-database-postgre-mysql/).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as random from \"@pulumi/random\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.DatabaseInstance(\"main\", {\n    name: \"test-rdb\",\n    nodeType: \"DB-DEV-S\",\n    engine: \"PostgreSQL-15\",\n    isHaCluster: true,\n    disableBackup: true,\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n});\nconst dbPassword = new random.RandomPassword(\"db_password\", {\n    length: 16,\n    special: true,\n});\nconst dbAdmin = new scaleway.DatabaseUser(\"db_admin\", {\n    instanceId: main.id,\n    name: \"devtools\",\n    password: dbPassword.result,\n    isAdmin: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_random as random\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.DatabaseInstance(\"main\",\n    name=\"test-rdb\",\n    node_type=\"DB-DEV-S\",\n    engine=\"PostgreSQL-15\",\n    is_ha_cluster=True,\n    disable_backup=True,\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\")\ndb_password = random.RandomPassword(\"db_password\",\n    length=16,\n    special=True)\ndb_admin = scaleway.DatabaseUser(\"db_admin\",\n    instance_id=main.id,\n    name=\"devtools\",\n    password=db_password.result,\n    is_admin=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Random = Pulumi.Random;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.DatabaseInstance(\"main\", new()\n    {\n        Name = \"test-rdb\",\n        NodeType = \"DB-DEV-S\",\n        Engine = \"PostgreSQL-15\",\n        IsHaCluster = true,\n        DisableBackup = true,\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n    });\n\n    var dbPassword = new Random.RandomPassword(\"db_password\", new()\n    {\n        Length = 16,\n        Special = true,\n    });\n\n    var dbAdmin = new Scaleway.DatabaseUser(\"db_admin\", new()\n    {\n        InstanceId = main.Id,\n        Name = \"devtools\",\n        Password = dbPassword.Result,\n        IsAdmin = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-random/sdk/v4/go/random\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewDatabaseInstance(ctx, \"main\", \u0026scaleway.DatabaseInstanceArgs{\n\t\t\tName:          pulumi.String(\"test-rdb\"),\n\t\t\tNodeType:      pulumi.String(\"DB-DEV-S\"),\n\t\t\tEngine:        pulumi.String(\"PostgreSQL-15\"),\n\t\t\tIsHaCluster:   pulumi.Bool(true),\n\t\t\tDisableBackup: pulumi.Bool(true),\n\t\t\tUserName:      pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:      pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdbPassword, err := random.NewRandomPassword(ctx, \"db_password\", \u0026random.RandomPasswordArgs{\n\t\t\tLength:  pulumi.Int(16),\n\t\t\tSpecial: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDatabaseUser(ctx, \"db_admin\", \u0026scaleway.DatabaseUserArgs{\n\t\t\tInstanceId: main.ID(),\n\t\t\tName:       pulumi.String(\"devtools\"),\n\t\t\tPassword:   dbPassword.Result,\n\t\t\tIsAdmin:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DatabaseInstance;\nimport com.pulumi.scaleway.DatabaseInstanceArgs;\nimport com.pulumi.random.RandomPassword;\nimport com.pulumi.random.RandomPasswordArgs;\nimport com.pulumi.scaleway.DatabaseUser;\nimport com.pulumi.scaleway.DatabaseUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new DatabaseInstance(\"main\", DatabaseInstanceArgs.builder()\n            .name(\"test-rdb\")\n            .nodeType(\"DB-DEV-S\")\n            .engine(\"PostgreSQL-15\")\n            .isHaCluster(true)\n            .disableBackup(true)\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .build());\n\n        var dbPassword = new RandomPassword(\"dbPassword\", RandomPasswordArgs.builder()\n            .length(16)\n            .special(true)\n            .build());\n\n        var dbAdmin = new DatabaseUser(\"dbAdmin\", DatabaseUserArgs.builder()\n            .instanceId(main.id())\n            .name(\"devtools\")\n            .password(dbPassword.result())\n            .isAdmin(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:DatabaseInstance\n    properties:\n      name: test-rdb\n      nodeType: DB-DEV-S\n      engine: PostgreSQL-15\n      isHaCluster: true\n      disableBackup: true\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n  dbPassword:\n    type: random:RandomPassword\n    name: db_password\n    properties:\n      length: 16\n      special: true\n  dbAdmin:\n    type: scaleway:DatabaseUser\n    name: db_admin\n    properties:\n      instanceId: ${main.id}\n      name: devtools\n      password: ${dbPassword.result}\n      isAdmin: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nDatabase users can be imported using `{region}/{instance_id}/{user_name}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/databaseUser:DatabaseUser admin fr-par/11111111-1111-1111-1111-111111111111/admin\n```\n\n",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the Database Instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the database user.\n"
                },
                "isAdmin": {
                    "type": "boolean",
                    "description": "Grant admin permissions to the database user.\n"
                },
                "name": {
                    "type": "string",
                    "description": "database user name.\n\n\u003e **Important:** Updates to `name` will recreate the database user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "database user password.\n",
                    "secret": true
                },
                "region": {
                    "type": "string",
                    "description": "The Scaleway region this resource resides in.\n"
                }
            },
            "required": [
                "instanceId",
                "name",
                "password",
                "region"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the Database Instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the database user.\n",
                    "willReplaceOnChanges": true
                },
                "isAdmin": {
                    "type": "boolean",
                    "description": "Grant admin permissions to the database user.\n"
                },
                "name": {
                    "type": "string",
                    "description": "database user name.\n\n\u003e **Important:** Updates to `name` will recreate the database user.\n",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "description": "database user password.\n",
                    "secret": true
                },
                "region": {
                    "type": "string",
                    "description": "The Scaleway region this resource resides in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId",
                "password"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseUser resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the Database Instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the database user.\n",
                        "willReplaceOnChanges": true
                    },
                    "isAdmin": {
                        "type": "boolean",
                        "description": "Grant admin permissions to the database user.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "database user name.\n\n\u003e **Important:** Updates to `name` will recreate the database user.\n",
                        "willReplaceOnChanges": true
                    },
                    "password": {
                        "type": "string",
                        "description": "database user password.\n",
                        "secret": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The Scaleway region this resource resides in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/documentdbDatabase:DocumentdbDatabase": {
            "description": "Creates and manages Scaleway DocumentDB database.\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst instance = new scaleway.DocumentdbInstance(\"instance\", {\n    name: \"test-document_db-basic\",\n    nodeType: \"docdb-play2-pico\",\n    engine: \"FerretDB-1\",\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    volumeSizeInGb: 20,\n});\nconst main = new scaleway.DocumentdbDatabase(\"main\", {\n    instanceId: instance.id,\n    name: \"my-new-database\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\ninstance = scaleway.DocumentdbInstance(\"instance\",\n    name=\"test-document_db-basic\",\n    node_type=\"docdb-play2-pico\",\n    engine=\"FerretDB-1\",\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    volume_size_in_gb=20)\nmain = scaleway.DocumentdbDatabase(\"main\",\n    instance_id=instance.id,\n    name=\"my-new-database\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var instance = new Scaleway.DocumentdbInstance(\"instance\", new()\n    {\n        Name = \"test-document_db-basic\",\n        NodeType = \"docdb-play2-pico\",\n        Engine = \"FerretDB-1\",\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        VolumeSizeInGb = 20,\n    });\n\n    var main = new Scaleway.DocumentdbDatabase(\"main\", new()\n    {\n        InstanceId = instance.Id,\n        Name = \"my-new-database\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinstance, err := scaleway.NewDocumentdbInstance(ctx, \"instance\", \u0026scaleway.DocumentdbInstanceArgs{\n\t\t\tName:           pulumi.String(\"test-document_db-basic\"),\n\t\t\tNodeType:       pulumi.String(\"docdb-play2-pico\"),\n\t\t\tEngine:         pulumi.String(\"FerretDB-1\"),\n\t\t\tUserName:       pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:       pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tVolumeSizeInGb: pulumi.Int(20),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDocumentdbDatabase(ctx, \"main\", \u0026scaleway.DocumentdbDatabaseArgs{\n\t\t\tInstanceId: instance.ID(),\n\t\t\tName:       pulumi.String(\"my-new-database\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DocumentdbInstance;\nimport com.pulumi.scaleway.DocumentdbInstanceArgs;\nimport com.pulumi.scaleway.DocumentdbDatabase;\nimport com.pulumi.scaleway.DocumentdbDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var instance = new DocumentdbInstance(\"instance\", DocumentdbInstanceArgs.builder()\n            .name(\"test-document_db-basic\")\n            .nodeType(\"docdb-play2-pico\")\n            .engine(\"FerretDB-1\")\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .volumeSizeInGb(20)\n            .build());\n\n        var main = new DocumentdbDatabase(\"main\", DocumentdbDatabaseArgs.builder()\n            .instanceId(instance.id())\n            .name(\"my-new-database\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  instance:\n    type: scaleway:DocumentdbInstance\n    properties:\n      name: test-document_db-basic\n      nodeType: docdb-play2-pico\n      engine: FerretDB-1\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n      volumeSizeInGb: 20\n  main:\n    type: scaleway:DocumentdbDatabase\n    properties:\n      instanceId: ${instance.id}\n      name: my-new-database\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nDocumentDB Database can be imported using the `{region}/{id}/{DBNAME}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/documentdbDatabase:DocumentdbDatabase mydb fr-par/11111111-1111-1111-1111-111111111111/mydb\n```\n\n",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the documentdb instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Database.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Whether the database is managed or not.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-new-database`).\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The name of the owner of the database.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the resource exists.\n"
                },
                "size": {
                    "type": "string",
                    "description": "Size in gigabytes of the database.\n"
                }
            },
            "required": [
                "instanceId",
                "managed",
                "name",
                "owner",
                "projectId",
                "region",
                "size"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the documentdb instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Database.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-new-database`).\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the resource exists.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DocumentdbDatabase resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the documentdb instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Database.\n",
                        "willReplaceOnChanges": true
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Whether the database is managed or not.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the database (e.g. `my-new-database`).\n",
                        "willReplaceOnChanges": true
                    },
                    "owner": {
                        "type": "string",
                        "description": "The name of the owner of the database.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project_id you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the resource exists.\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "string",
                        "description": "Size in gigabytes of the database.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/documentdbInstance:DocumentdbInstance": {
            "description": "Creates and manages Scaleway Database Instances.\n\n## Example Usage\n\n### Example Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.DocumentdbInstance(\"main\", {\n    name: \"test-documentdb-instance-basic\",\n    nodeType: \"docdb-play2-pico\",\n    engine: \"FerretDB-1\",\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    tags: [\n        \"terraform-test\",\n        \"scaleway_documentdb_instance\",\n        \"minimal\",\n    ],\n    volumeSizeInGb: 20,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.DocumentdbInstance(\"main\",\n    name=\"test-documentdb-instance-basic\",\n    node_type=\"docdb-play2-pico\",\n    engine=\"FerretDB-1\",\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    tags=[\n        \"terraform-test\",\n        \"scaleway_documentdb_instance\",\n        \"minimal\",\n    ],\n    volume_size_in_gb=20)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.DocumentdbInstance(\"main\", new()\n    {\n        Name = \"test-documentdb-instance-basic\",\n        NodeType = \"docdb-play2-pico\",\n        Engine = \"FerretDB-1\",\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        Tags = new[]\n        {\n            \"terraform-test\",\n            \"scaleway_documentdb_instance\",\n            \"minimal\",\n        },\n        VolumeSizeInGb = 20,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDocumentdbInstance(ctx, \"main\", \u0026scaleway.DocumentdbInstanceArgs{\n\t\t\tName:     pulumi.String(\"test-documentdb-instance-basic\"),\n\t\t\tNodeType: pulumi.String(\"docdb-play2-pico\"),\n\t\t\tEngine:   pulumi.String(\"FerretDB-1\"),\n\t\t\tUserName: pulumi.String(\"my_initial_user\"),\n\t\t\tPassword: pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"terraform-test\"),\n\t\t\t\tpulumi.String(\"scaleway_documentdb_instance\"),\n\t\t\t\tpulumi.String(\"minimal\"),\n\t\t\t},\n\t\t\tVolumeSizeInGb: pulumi.Int(20),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DocumentdbInstance;\nimport com.pulumi.scaleway.DocumentdbInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new DocumentdbInstance(\"main\", DocumentdbInstanceArgs.builder()\n            .name(\"test-documentdb-instance-basic\")\n            .nodeType(\"docdb-play2-pico\")\n            .engine(\"FerretDB-1\")\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .tags(            \n                \"terraform-test\",\n                \"scaleway_documentdb_instance\",\n                \"minimal\")\n            .volumeSizeInGb(20)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:DocumentdbInstance\n    properties:\n      name: test-documentdb-instance-basic\n      nodeType: docdb-play2-pico\n      engine: FerretDB-1\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n      tags:\n        - terraform-test\n        - scaleway_documentdb_instance\n        - minimal\n      volumeSizeInGb: 20\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nDatabase Instance can be imported using the `{region}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/documentdbInstance:DocumentdbInstance db fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "engine": {
                    "type": "string",
                    "description": "Database Instance's engine version (e.g. `FerretDB-1`).\n\n\u003e **Important:** Updates to `engine` will recreate the Database Instance.\n"
                },
                "isHaCluster": {
                    "type": "boolean",
                    "description": "Enable or disable high availability for the database instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Database Instance.\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "The type of database instance you want to create (e.g. `docdb-play2-pico`).\n\n\u003e **Important:** Updates to `node_type` will upgrade the Database Instance to the desired `node_type` without any\ninterruption. Keep in mind that you cannot downgrade a Database Instance.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the first user of the database instance.\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the Database\nInstance is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region\nin which the Database Instance should be created.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Database Instance.\n"
                },
                "telemetryEnabled": {
                    "type": "boolean",
                    "description": "Enable telemetry to collects basic anonymous usage data and sends them to FerretDB telemetry service. More about the telemetry [here](https://docs.ferretdb.io/telemetry/#configure-telemetry).\n\n\u003e **Important:** Updates to `is_ha_cluster` will recreate the Database Instance.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Identifier for the first user of the database instance.\n\n\u003e **Important:** Updates to `user_name` will recreate the Database Instance.\n"
                },
                "volumeSizeInGb": {
                    "type": "integer",
                    "description": "Volume size (in GB) when `volume_type` is set to `bssd`.\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "Type of volume where data are stored (`bssd` or `lssd`).\n"
                }
            },
            "required": [
                "engine",
                "name",
                "nodeType",
                "projectId",
                "region",
                "volumeSizeInGb"
            ],
            "inputProperties": {
                "engine": {
                    "type": "string",
                    "description": "Database Instance's engine version (e.g. `FerretDB-1`).\n\n\u003e **Important:** Updates to `engine` will recreate the Database Instance.\n",
                    "willReplaceOnChanges": true
                },
                "isHaCluster": {
                    "type": "boolean",
                    "description": "Enable or disable high availability for the database instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Database Instance.\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "The type of database instance you want to create (e.g. `docdb-play2-pico`).\n\n\u003e **Important:** Updates to `node_type` will upgrade the Database Instance to the desired `node_type` without any\ninterruption. Keep in mind that you cannot downgrade a Database Instance.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the first user of the database instance.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the Database\nInstance is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region\nin which the Database Instance should be created.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Database Instance.\n"
                },
                "telemetryEnabled": {
                    "type": "boolean",
                    "description": "Enable telemetry to collects basic anonymous usage data and sends them to FerretDB telemetry service. More about the telemetry [here](https://docs.ferretdb.io/telemetry/#configure-telemetry).\n\n\u003e **Important:** Updates to `is_ha_cluster` will recreate the Database Instance.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Identifier for the first user of the database instance.\n\n\u003e **Important:** Updates to `user_name` will recreate the Database Instance.\n",
                    "willReplaceOnChanges": true
                },
                "volumeSizeInGb": {
                    "type": "integer",
                    "description": "Volume size (in GB) when `volume_type` is set to `bssd`.\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "Type of volume where data are stored (`bssd` or `lssd`).\n"
                }
            },
            "requiredInputs": [
                "engine",
                "nodeType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DocumentdbInstance resources.\n",
                "properties": {
                    "engine": {
                        "type": "string",
                        "description": "Database Instance's engine version (e.g. `FerretDB-1`).\n\n\u003e **Important:** Updates to `engine` will recreate the Database Instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "isHaCluster": {
                        "type": "boolean",
                        "description": "Enable or disable high availability for the database instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Database Instance.\n"
                    },
                    "nodeType": {
                        "type": "string",
                        "description": "The type of database instance you want to create (e.g. `docdb-play2-pico`).\n\n\u003e **Important:** Updates to `node_type` will upgrade the Database Instance to the desired `node_type` without any\ninterruption. Keep in mind that you cannot downgrade a Database Instance.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for the first user of the database instance.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the Database\nInstance is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region\nin which the Database Instance should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the Database Instance.\n"
                    },
                    "telemetryEnabled": {
                        "type": "boolean",
                        "description": "Enable telemetry to collects basic anonymous usage data and sends them to FerretDB telemetry service. More about the telemetry [here](https://docs.ferretdb.io/telemetry/#configure-telemetry).\n\n\u003e **Important:** Updates to `is_ha_cluster` will recreate the Database Instance.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "Identifier for the first user of the database instance.\n\n\u003e **Important:** Updates to `user_name` will recreate the Database Instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "volumeSizeInGb": {
                        "type": "integer",
                        "description": "Volume size (in GB) when `volume_type` is set to `bssd`.\n"
                    },
                    "volumeType": {
                        "type": "string",
                        "description": "Type of volume where data are stored (`bssd` or `lssd`).\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/documentdbPrivateNetworkEndpoint:DocumentdbPrivateNetworkEndpoint": {
            "description": "Creates and manages Scaleway Database Private Network Endpoint.\n\n## Example Usage\n\n### Example Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst pn = new scaleway.VpcPrivateNetwork(\"pn\", {name: \"my_private_network\"});\nconst instance = new scaleway.DocumentdbInstance(\"instance\", {\n    name: \"test-document_db-basic\",\n    nodeType: \"docdb-play2-pico\",\n    engine: \"FerretDB-1\",\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    volumeSizeInGb: 20,\n});\nconst main = new scaleway.DocumentdbPrivateNetworkEndpoint(\"main\", {\n    instanceId: instance.id,\n    privateNetwork: {\n        ipNet: \"172.16.32.3/22\",\n        id: pn.id,\n    },\n}, {\n    dependsOn: [pn],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\npn = scaleway.VpcPrivateNetwork(\"pn\", name=\"my_private_network\")\ninstance = scaleway.DocumentdbInstance(\"instance\",\n    name=\"test-document_db-basic\",\n    node_type=\"docdb-play2-pico\",\n    engine=\"FerretDB-1\",\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    volume_size_in_gb=20)\nmain = scaleway.DocumentdbPrivateNetworkEndpoint(\"main\",\n    instance_id=instance.id,\n    private_network={\n        \"ip_net\": \"172.16.32.3/22\",\n        \"id\": pn.id,\n    },\n    opts = pulumi.ResourceOptions(depends_on=[pn]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pn = new Scaleway.VpcPrivateNetwork(\"pn\", new()\n    {\n        Name = \"my_private_network\",\n    });\n\n    var instance = new Scaleway.DocumentdbInstance(\"instance\", new()\n    {\n        Name = \"test-document_db-basic\",\n        NodeType = \"docdb-play2-pico\",\n        Engine = \"FerretDB-1\",\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        VolumeSizeInGb = 20,\n    });\n\n    var main = new Scaleway.DocumentdbPrivateNetworkEndpoint(\"main\", new()\n    {\n        InstanceId = instance.Id,\n        PrivateNetwork = new Scaleway.Inputs.DocumentdbPrivateNetworkEndpointPrivateNetworkArgs\n        {\n            IpNet = \"172.16.32.3/22\",\n            Id = pn.Id,\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn =\n        {\n            pn,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tName: pulumi.String(\"my_private_network\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tinstance, err := scaleway.NewDocumentdbInstance(ctx, \"instance\", \u0026scaleway.DocumentdbInstanceArgs{\n\t\t\tName:           pulumi.String(\"test-document_db-basic\"),\n\t\t\tNodeType:       pulumi.String(\"docdb-play2-pico\"),\n\t\t\tEngine:         pulumi.String(\"FerretDB-1\"),\n\t\t\tUserName:       pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:       pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tVolumeSizeInGb: pulumi.Int(20),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDocumentdbPrivateNetworkEndpoint(ctx, \"main\", \u0026scaleway.DocumentdbPrivateNetworkEndpointArgs{\n\t\t\tInstanceId: instance.ID(),\n\t\t\tPrivateNetwork: \u0026scaleway.DocumentdbPrivateNetworkEndpointPrivateNetworkArgs{\n\t\t\t\tIpNet: pulumi.String(\"172.16.32.3/22\"),\n\t\t\t\tId:    pn.ID(),\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tpn,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.DocumentdbInstance;\nimport com.pulumi.scaleway.DocumentdbInstanceArgs;\nimport com.pulumi.scaleway.DocumentdbPrivateNetworkEndpoint;\nimport com.pulumi.scaleway.DocumentdbPrivateNetworkEndpointArgs;\nimport com.pulumi.scaleway.inputs.DocumentdbPrivateNetworkEndpointPrivateNetworkArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pn = new VpcPrivateNetwork(\"pn\", VpcPrivateNetworkArgs.builder()\n            .name(\"my_private_network\")\n            .build());\n\n        var instance = new DocumentdbInstance(\"instance\", DocumentdbInstanceArgs.builder()\n            .name(\"test-document_db-basic\")\n            .nodeType(\"docdb-play2-pico\")\n            .engine(\"FerretDB-1\")\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .volumeSizeInGb(20)\n            .build());\n\n        var main = new DocumentdbPrivateNetworkEndpoint(\"main\", DocumentdbPrivateNetworkEndpointArgs.builder()\n            .instanceId(instance.id())\n            .privateNetwork(DocumentdbPrivateNetworkEndpointPrivateNetworkArgs.builder()\n                .ipNet(\"172.16.32.3/22\")\n                .id(pn.id())\n                .build())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(pn)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pn:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      name: my_private_network\n  instance:\n    type: scaleway:DocumentdbInstance\n    properties:\n      name: test-document_db-basic\n      nodeType: docdb-play2-pico\n      engine: FerretDB-1\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n      volumeSizeInGb: 20\n  main:\n    type: scaleway:DocumentdbPrivateNetworkEndpoint\n    properties:\n      instanceId: ${instance.id}\n      privateNetwork:\n        ipNet: 172.16.32.3/22\n        id: ${pn.id}\n    options:\n      dependson:\n        - ${pn}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nDatabase Instance Endpoint can be imported using the `{region}/{endpoint_id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/documentdbPrivateNetworkEndpoint:DocumentdbPrivateNetworkEndpoint end fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the documentdb instance.\n"
                },
                "privateNetwork": {
                    "$ref": "#/types/scaleway:index/DocumentdbPrivateNetworkEndpointPrivateNetwork:DocumentdbPrivateNetworkEndpointPrivateNetwork",
                    "description": "The private network specs details. This is a list with maximum one element and supports the following attributes:\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the endpoint.\n\n\n\u003e **NOTE:** Please calculate your host IP.\nusing cirhost. Otherwise, lets IPAM service\nhandle the host IP on the network.\n"
                }
            },
            "required": [
                "instanceId",
                "region"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the documentdb instance.\n"
                },
                "privateNetwork": {
                    "$ref": "#/types/scaleway:index/DocumentdbPrivateNetworkEndpointPrivateNetwork:DocumentdbPrivateNetworkEndpointPrivateNetwork",
                    "description": "The private network specs details. This is a list with maximum one element and supports the following attributes:\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the endpoint.\n\n\n\u003e **NOTE:** Please calculate your host IP.\nusing cirhost. Otherwise, lets IPAM service\nhandle the host IP on the network.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DocumentdbPrivateNetworkEndpoint resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the documentdb instance.\n"
                    },
                    "privateNetwork": {
                        "$ref": "#/types/scaleway:index/DocumentdbPrivateNetworkEndpointPrivateNetwork:DocumentdbPrivateNetworkEndpointPrivateNetwork",
                        "description": "The private network specs details. This is a list with maximum one element and supports the following attributes:\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the endpoint.\n\n\n\u003e **NOTE:** Please calculate your host IP.\nusing cirhost. Otherwise, lets IPAM service\nhandle the host IP on the network.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/documentdbPrivilege:DocumentdbPrivilege": {
            "description": "Create and manage Scaleway DocumentDB database privilege.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst instance = new scaleway.DocumentdbInstance(\"instance\", {\n    name: \"test-document_db-basic\",\n    nodeType: \"docdb-play2-pico\",\n    engine: \"FerretDB-1\",\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    volumeSizeInGb: 20,\n});\nconst main = new scaleway.DocumentdbPrivilege(\"main\", {\n    instanceId: instance.id,\n    userName: \"my-db-user\",\n    databaseName: \"my-db-name\",\n    permission: \"all\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\ninstance = scaleway.DocumentdbInstance(\"instance\",\n    name=\"test-document_db-basic\",\n    node_type=\"docdb-play2-pico\",\n    engine=\"FerretDB-1\",\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    volume_size_in_gb=20)\nmain = scaleway.DocumentdbPrivilege(\"main\",\n    instance_id=instance.id,\n    user_name=\"my-db-user\",\n    database_name=\"my-db-name\",\n    permission=\"all\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var instance = new Scaleway.DocumentdbInstance(\"instance\", new()\n    {\n        Name = \"test-document_db-basic\",\n        NodeType = \"docdb-play2-pico\",\n        Engine = \"FerretDB-1\",\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        VolumeSizeInGb = 20,\n    });\n\n    var main = new Scaleway.DocumentdbPrivilege(\"main\", new()\n    {\n        InstanceId = instance.Id,\n        UserName = \"my-db-user\",\n        DatabaseName = \"my-db-name\",\n        Permission = \"all\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinstance, err := scaleway.NewDocumentdbInstance(ctx, \"instance\", \u0026scaleway.DocumentdbInstanceArgs{\n\t\t\tName:           pulumi.String(\"test-document_db-basic\"),\n\t\t\tNodeType:       pulumi.String(\"docdb-play2-pico\"),\n\t\t\tEngine:         pulumi.String(\"FerretDB-1\"),\n\t\t\tUserName:       pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:       pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tVolumeSizeInGb: pulumi.Int(20),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDocumentdbPrivilege(ctx, \"main\", \u0026scaleway.DocumentdbPrivilegeArgs{\n\t\t\tInstanceId:   instance.ID(),\n\t\t\tUserName:     pulumi.String(\"my-db-user\"),\n\t\t\tDatabaseName: pulumi.String(\"my-db-name\"),\n\t\t\tPermission:   pulumi.String(\"all\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DocumentdbInstance;\nimport com.pulumi.scaleway.DocumentdbInstanceArgs;\nimport com.pulumi.scaleway.DocumentdbPrivilege;\nimport com.pulumi.scaleway.DocumentdbPrivilegeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var instance = new DocumentdbInstance(\"instance\", DocumentdbInstanceArgs.builder()\n            .name(\"test-document_db-basic\")\n            .nodeType(\"docdb-play2-pico\")\n            .engine(\"FerretDB-1\")\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .volumeSizeInGb(20)\n            .build());\n\n        var main = new DocumentdbPrivilege(\"main\", DocumentdbPrivilegeArgs.builder()\n            .instanceId(instance.id())\n            .userName(\"my-db-user\")\n            .databaseName(\"my-db-name\")\n            .permission(\"all\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  instance:\n    type: scaleway:DocumentdbInstance\n    properties:\n      name: test-document_db-basic\n      nodeType: docdb-play2-pico\n      engine: FerretDB-1\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n      volumeSizeInGb: 20\n  main:\n    type: scaleway:DocumentdbPrivilege\n    properties:\n      instanceId: ${instance.id}\n      userName: my-db-user\n      databaseName: my-db-name\n      permission: all\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nThe user privileges can be imported using the `{region}/{instance_id}/{database_name}/{user_name}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/documentdbPrivilege:DocumentdbPrivilege o fr-par/11111111-1111-1111-1111-111111111111/database_name/foo\n```\n\n",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-db-name`).\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the rdb instance.\n"
                },
                "permission": {
                    "type": "string",
                    "description": "Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the resource exists.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Name of the user (e.g. `my-db-user`).\n"
                }
            },
            "required": [
                "databaseName",
                "instanceId",
                "permission",
                "region",
                "userName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "Name of the database (e.g. `my-db-name`).\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the rdb instance.\n",
                    "willReplaceOnChanges": true
                },
                "permission": {
                    "type": "string",
                    "description": "Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the resource exists.\n",
                    "willReplaceOnChanges": true
                },
                "userName": {
                    "type": "string",
                    "description": "Name of the user (e.g. `my-db-user`).\n"
                }
            },
            "requiredInputs": [
                "databaseName",
                "instanceId",
                "permission",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DocumentdbPrivilege resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "Name of the database (e.g. `my-db-name`).\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the rdb instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "permission": {
                        "type": "string",
                        "description": "Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the resource exists.\n",
                        "willReplaceOnChanges": true
                    },
                    "userName": {
                        "type": "string",
                        "description": "Name of the user (e.g. `my-db-user`).\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/documentdbReadReplica:DocumentdbReadReplica": {
            "description": "Creates and manages Scaleway DocumentDB Database read replicas.\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst replica = new scaleway.DocumentdbReadReplica(\"replica\", {\n    instanceId: \"11111111-1111-1111-1111-111111111111\",\n    directAccess: {},\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nreplica = scaleway.DocumentdbReadReplica(\"replica\",\n    instance_id=\"11111111-1111-1111-1111-111111111111\",\n    direct_access={})\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var replica = new Scaleway.DocumentdbReadReplica(\"replica\", new()\n    {\n        InstanceId = \"11111111-1111-1111-1111-111111111111\",\n        DirectAccess = null,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDocumentdbReadReplica(ctx, \"replica\", \u0026scaleway.DocumentdbReadReplicaArgs{\n\t\t\tInstanceId:   pulumi.String(\"11111111-1111-1111-1111-111111111111\"),\n\t\t\tDirectAccess: \u0026scaleway.DocumentdbReadReplicaDirectAccessArgs{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DocumentdbReadReplica;\nimport com.pulumi.scaleway.DocumentdbReadReplicaArgs;\nimport com.pulumi.scaleway.inputs.DocumentdbReadReplicaDirectAccessArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var replica = new DocumentdbReadReplica(\"replica\", DocumentdbReadReplicaArgs.builder()\n            .instanceId(\"11111111-1111-1111-1111-111111111111\")\n            .directAccess()\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  replica:\n    type: scaleway:DocumentdbReadReplica\n    properties:\n      instanceId: 11111111-1111-1111-1111-111111111111\n      directAccess: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Private network\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst pn = new scaleway.VpcPrivateNetwork(\"pn\", {});\nconst instance = new scaleway.DocumentdbInstance(\"instance\", {\n    name: \"document_db-read-replica-basic\",\n    nodeType: \"docdb-play2-pico\",\n    engine: \"FerretDB-1\",\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    volumeSizeInGb: 20,\n});\nconst replica = new scaleway.DocumentdbReadReplica(\"replica\", {\n    instanceId: instance.id,\n    privateNetwork: {\n        privateNetworkId: pn.id,\n        serviceIp: \"192.168.1.254/24\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\npn = scaleway.VpcPrivateNetwork(\"pn\")\ninstance = scaleway.DocumentdbInstance(\"instance\",\n    name=\"document_db-read-replica-basic\",\n    node_type=\"docdb-play2-pico\",\n    engine=\"FerretDB-1\",\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    volume_size_in_gb=20)\nreplica = scaleway.DocumentdbReadReplica(\"replica\",\n    instance_id=instance.id,\n    private_network={\n        \"private_network_id\": pn.id,\n        \"service_ip\": \"192.168.1.254/24\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pn = new Scaleway.VpcPrivateNetwork(\"pn\");\n\n    var instance = new Scaleway.DocumentdbInstance(\"instance\", new()\n    {\n        Name = \"document_db-read-replica-basic\",\n        NodeType = \"docdb-play2-pico\",\n        Engine = \"FerretDB-1\",\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        VolumeSizeInGb = 20,\n    });\n\n    var replica = new Scaleway.DocumentdbReadReplica(\"replica\", new()\n    {\n        InstanceId = instance.Id,\n        PrivateNetwork = new Scaleway.Inputs.DocumentdbReadReplicaPrivateNetworkArgs\n        {\n            PrivateNetworkId = pn.Id,\n            ServiceIp = \"192.168.1.254/24\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tinstance, err := scaleway.NewDocumentdbInstance(ctx, \"instance\", \u0026scaleway.DocumentdbInstanceArgs{\n\t\t\tName:           pulumi.String(\"document_db-read-replica-basic\"),\n\t\t\tNodeType:       pulumi.String(\"docdb-play2-pico\"),\n\t\t\tEngine:         pulumi.String(\"FerretDB-1\"),\n\t\t\tUserName:       pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:       pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tVolumeSizeInGb: pulumi.Int(20),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDocumentdbReadReplica(ctx, \"replica\", \u0026scaleway.DocumentdbReadReplicaArgs{\n\t\t\tInstanceId: instance.ID(),\n\t\t\tPrivateNetwork: \u0026scaleway.DocumentdbReadReplicaPrivateNetworkArgs{\n\t\t\t\tPrivateNetworkId: pn.ID(),\n\t\t\t\tServiceIp:        pulumi.String(\"192.168.1.254/24\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.DocumentdbInstance;\nimport com.pulumi.scaleway.DocumentdbInstanceArgs;\nimport com.pulumi.scaleway.DocumentdbReadReplica;\nimport com.pulumi.scaleway.DocumentdbReadReplicaArgs;\nimport com.pulumi.scaleway.inputs.DocumentdbReadReplicaPrivateNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pn = new VpcPrivateNetwork(\"pn\");\n\n        var instance = new DocumentdbInstance(\"instance\", DocumentdbInstanceArgs.builder()\n            .name(\"document_db-read-replica-basic\")\n            .nodeType(\"docdb-play2-pico\")\n            .engine(\"FerretDB-1\")\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .volumeSizeInGb(20)\n            .build());\n\n        var replica = new DocumentdbReadReplica(\"replica\", DocumentdbReadReplicaArgs.builder()\n            .instanceId(instance.id())\n            .privateNetwork(DocumentdbReadReplicaPrivateNetworkArgs.builder()\n                .privateNetworkId(pn.id())\n                .serviceIp(\"192.168.1.254/24\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pn:\n    type: scaleway:VpcPrivateNetwork\n  instance:\n    type: scaleway:DocumentdbInstance\n    properties:\n      name: document_db-read-replica-basic\n      nodeType: docdb-play2-pico\n      engine: FerretDB-1\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n      volumeSizeInGb: 20\n  replica:\n    type: scaleway:DocumentdbReadReplica\n    properties:\n      instanceId: ${instance.id}\n      privateNetwork:\n        privateNetworkId: ${pn.id}\n        serviceIp: 192.168.1.254/24\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nDatabase Read replica can be imported using the `{region}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/documentdbReadReplica:DocumentdbReadReplica rr fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "directAccess": {
                    "$ref": "#/types/scaleway:index/DocumentdbReadReplicaDirectAccess:DocumentdbReadReplicaDirectAccess",
                    "description": "Creates a direct access endpoint to documentdb replica.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the documentdb instance.\n\n\u003e **Important:** The replica musts contains at least one of `direct_access` or `private_network`. It can contain both.\n"
                },
                "privateNetwork": {
                    "$ref": "#/types/scaleway:index/DocumentdbReadReplicaPrivateNetwork:DocumentdbReadReplicaPrivateNetwork",
                    "description": "Create an endpoint in a private network.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region\nin which the Database read replica should be created.\n"
                }
            },
            "required": [
                "instanceId",
                "region"
            ],
            "inputProperties": {
                "directAccess": {
                    "$ref": "#/types/scaleway:index/DocumentdbReadReplicaDirectAccess:DocumentdbReadReplicaDirectAccess",
                    "description": "Creates a direct access endpoint to documentdb replica.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the documentdb instance.\n\n\u003e **Important:** The replica musts contains at least one of `direct_access` or `private_network`. It can contain both.\n"
                },
                "privateNetwork": {
                    "$ref": "#/types/scaleway:index/DocumentdbReadReplicaPrivateNetwork:DocumentdbReadReplicaPrivateNetwork",
                    "description": "Create an endpoint in a private network.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region\nin which the Database read replica should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DocumentdbReadReplica resources.\n",
                "properties": {
                    "directAccess": {
                        "$ref": "#/types/scaleway:index/DocumentdbReadReplicaDirectAccess:DocumentdbReadReplicaDirectAccess",
                        "description": "Creates a direct access endpoint to documentdb replica.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the documentdb instance.\n\n\u003e **Important:** The replica musts contains at least one of `direct_access` or `private_network`. It can contain both.\n"
                    },
                    "privateNetwork": {
                        "$ref": "#/types/scaleway:index/DocumentdbReadReplicaPrivateNetwork:DocumentdbReadReplicaPrivateNetwork",
                        "description": "Create an endpoint in a private network.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region\nin which the Database read replica should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/documentdbUser:DocumentdbUser": {
            "description": "Creates and manages Scaleway Database DocumentDB Users.\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as random from \"@pulumi/random\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst instance = new scaleway.DocumentdbInstance(\"instance\", {\n    name: \"test-document_db-basic\",\n    nodeType: \"docdb-play2-pico\",\n    engine: \"FerretDB-1\",\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    volumeSizeInGb: 20,\n});\nconst dbPassword = new random.RandomPassword(\"db_password\", {\n    length: 16,\n    special: true,\n});\nconst dbAdmin = new scaleway.DocumentdbUser(\"db_admin\", {\n    instanceId: instance.id,\n    name: \"devtools\",\n    password: dbPassword.result,\n    isAdmin: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_random as random\nimport pulumiverse_scaleway as scaleway\n\ninstance = scaleway.DocumentdbInstance(\"instance\",\n    name=\"test-document_db-basic\",\n    node_type=\"docdb-play2-pico\",\n    engine=\"FerretDB-1\",\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    volume_size_in_gb=20)\ndb_password = random.RandomPassword(\"db_password\",\n    length=16,\n    special=True)\ndb_admin = scaleway.DocumentdbUser(\"db_admin\",\n    instance_id=instance.id,\n    name=\"devtools\",\n    password=db_password.result,\n    is_admin=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Random = Pulumi.Random;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var instance = new Scaleway.DocumentdbInstance(\"instance\", new()\n    {\n        Name = \"test-document_db-basic\",\n        NodeType = \"docdb-play2-pico\",\n        Engine = \"FerretDB-1\",\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        VolumeSizeInGb = 20,\n    });\n\n    var dbPassword = new Random.RandomPassword(\"db_password\", new()\n    {\n        Length = 16,\n        Special = true,\n    });\n\n    var dbAdmin = new Scaleway.DocumentdbUser(\"db_admin\", new()\n    {\n        InstanceId = instance.Id,\n        Name = \"devtools\",\n        Password = dbPassword.Result,\n        IsAdmin = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-random/sdk/v4/go/random\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinstance, err := scaleway.NewDocumentdbInstance(ctx, \"instance\", \u0026scaleway.DocumentdbInstanceArgs{\n\t\t\tName:           pulumi.String(\"test-document_db-basic\"),\n\t\t\tNodeType:       pulumi.String(\"docdb-play2-pico\"),\n\t\t\tEngine:         pulumi.String(\"FerretDB-1\"),\n\t\t\tUserName:       pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:       pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tVolumeSizeInGb: pulumi.Int(20),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdbPassword, err := random.NewRandomPassword(ctx, \"db_password\", \u0026random.RandomPasswordArgs{\n\t\t\tLength:  pulumi.Int(16),\n\t\t\tSpecial: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDocumentdbUser(ctx, \"db_admin\", \u0026scaleway.DocumentdbUserArgs{\n\t\t\tInstanceId: instance.ID(),\n\t\t\tName:       pulumi.String(\"devtools\"),\n\t\t\tPassword:   dbPassword.Result,\n\t\t\tIsAdmin:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DocumentdbInstance;\nimport com.pulumi.scaleway.DocumentdbInstanceArgs;\nimport com.pulumi.random.RandomPassword;\nimport com.pulumi.random.RandomPasswordArgs;\nimport com.pulumi.scaleway.DocumentdbUser;\nimport com.pulumi.scaleway.DocumentdbUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var instance = new DocumentdbInstance(\"instance\", DocumentdbInstanceArgs.builder()\n            .name(\"test-document_db-basic\")\n            .nodeType(\"docdb-play2-pico\")\n            .engine(\"FerretDB-1\")\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .volumeSizeInGb(20)\n            .build());\n\n        var dbPassword = new RandomPassword(\"dbPassword\", RandomPasswordArgs.builder()\n            .length(16)\n            .special(true)\n            .build());\n\n        var dbAdmin = new DocumentdbUser(\"dbAdmin\", DocumentdbUserArgs.builder()\n            .instanceId(instance.id())\n            .name(\"devtools\")\n            .password(dbPassword.result())\n            .isAdmin(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  instance:\n    type: scaleway:DocumentdbInstance\n    properties:\n      name: test-document_db-basic\n      nodeType: docdb-play2-pico\n      engine: FerretDB-1\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n      volumeSizeInGb: 20\n  dbPassword:\n    type: random:RandomPassword\n    name: db_password\n    properties:\n      length: 16\n      special: true\n  dbAdmin:\n    type: scaleway:DocumentdbUser\n    name: db_admin\n    properties:\n      instanceId: ${instance.id}\n      name: devtools\n      password: ${dbPassword.result}\n      isAdmin: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nDatabase User can be imported using `{region}/{instance_id}/{user_name}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/documentdbUser:DocumentdbUser admin fr-par/11111111-1111-1111-1111-111111111111/admin\n```\n\n",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the documentDB instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Database User.\n"
                },
                "isAdmin": {
                    "type": "boolean",
                    "description": "Grant admin permissions to the Database User.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Database Username.\n\n\u003e **Important:** Updates to `name` will recreate the Database User.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Database User password.\n",
                    "secret": true
                },
                "region": {
                    "type": "string",
                    "description": "The Scaleway region this resource resides in.\n"
                }
            },
            "required": [
                "instanceId",
                "name",
                "password",
                "region"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "UUID of the documentDB instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Database User.\n",
                    "willReplaceOnChanges": true
                },
                "isAdmin": {
                    "type": "boolean",
                    "description": "Grant admin permissions to the Database User.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Database Username.\n\n\u003e **Important:** Updates to `name` will recreate the Database User.\n",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "description": "Database User password.\n",
                    "secret": true
                },
                "region": {
                    "type": "string",
                    "description": "The Scaleway region this resource resides in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId",
                "password"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DocumentdbUser resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "UUID of the documentDB instance.\n\n\u003e **Important:** Updates to `instance_id` will recreate the Database User.\n",
                        "willReplaceOnChanges": true
                    },
                    "isAdmin": {
                        "type": "boolean",
                        "description": "Grant admin permissions to the Database User.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Database Username.\n\n\u003e **Important:** Updates to `name` will recreate the Database User.\n",
                        "willReplaceOnChanges": true
                    },
                    "password": {
                        "type": "string",
                        "description": "Database User password.\n",
                        "secret": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The Scaleway region this resource resides in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/domainRecord:DomainRecord": {
            "description": "The `scaleway.DomainRecord` resource allows you to create and manage DNS records for Scaleway domains.\n\nRefer to the Domains and DNS [product documentation](https://www.scaleway.com/en/docs/network/domains-and-dns/) and [API documentation](https://www.scaleway.com/en/developers/api/domains-and-dns/) for more information.\n\n## Example Usage\n\n### Create basic DNS records\n\nThe folllowing commands allow you to:\n\n- create an A record for the `www.domain.tld` domain, pointing to `1.2.3.4` and another one pointing to `1.2.3.5`\n\n- create an MX record with the `mx.online.net.` mail server and a priority of 10, and another one with the `mx-cache.online.net.` mail server and a priority of 20\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst www = new scaleway.DomainRecord(\"www\", {\n    dnsZone: \"domain.tld\",\n    name: \"www\",\n    type: \"A\",\n    data: \"1.2.3.4\",\n    ttl: 3600,\n});\nconst www2 = new scaleway.DomainRecord(\"www2\", {\n    dnsZone: \"domain.tld\",\n    name: \"www\",\n    type: \"A\",\n    data: \"1.2.3.5\",\n    ttl: 3600,\n});\nconst mx = new scaleway.DomainRecord(\"mx\", {\n    dnsZone: \"domain.tld\",\n    name: \"\",\n    type: \"MX\",\n    data: \"mx.online.net.\",\n    ttl: 3600,\n    priority: 10,\n});\nconst mx2 = new scaleway.DomainRecord(\"mx2\", {\n    dnsZone: \"domain.tld\",\n    name: \"\",\n    type: \"MX\",\n    data: \"mx-cache.online.net.\",\n    ttl: 3600,\n    priority: 20,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nwww = scaleway.DomainRecord(\"www\",\n    dns_zone=\"domain.tld\",\n    name=\"www\",\n    type=\"A\",\n    data=\"1.2.3.4\",\n    ttl=3600)\nwww2 = scaleway.DomainRecord(\"www2\",\n    dns_zone=\"domain.tld\",\n    name=\"www\",\n    type=\"A\",\n    data=\"1.2.3.5\",\n    ttl=3600)\nmx = scaleway.DomainRecord(\"mx\",\n    dns_zone=\"domain.tld\",\n    name=\"\",\n    type=\"MX\",\n    data=\"mx.online.net.\",\n    ttl=3600,\n    priority=10)\nmx2 = scaleway.DomainRecord(\"mx2\",\n    dns_zone=\"domain.tld\",\n    name=\"\",\n    type=\"MX\",\n    data=\"mx-cache.online.net.\",\n    ttl=3600,\n    priority=20)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var www = new Scaleway.DomainRecord(\"www\", new()\n    {\n        DnsZone = \"domain.tld\",\n        Name = \"www\",\n        Type = \"A\",\n        Data = \"1.2.3.4\",\n        Ttl = 3600,\n    });\n\n    var www2 = new Scaleway.DomainRecord(\"www2\", new()\n    {\n        DnsZone = \"domain.tld\",\n        Name = \"www\",\n        Type = \"A\",\n        Data = \"1.2.3.5\",\n        Ttl = 3600,\n    });\n\n    var mx = new Scaleway.DomainRecord(\"mx\", new()\n    {\n        DnsZone = \"domain.tld\",\n        Name = \"\",\n        Type = \"MX\",\n        Data = \"mx.online.net.\",\n        Ttl = 3600,\n        Priority = 10,\n    });\n\n    var mx2 = new Scaleway.DomainRecord(\"mx2\", new()\n    {\n        DnsZone = \"domain.tld\",\n        Name = \"\",\n        Type = \"MX\",\n        Data = \"mx-cache.online.net.\",\n        Ttl = 3600,\n        Priority = 20,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDomainRecord(ctx, \"www\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tName:    pulumi.String(\"www\"),\n\t\t\tType:    pulumi.String(\"A\"),\n\t\t\tData:    pulumi.String(\"1.2.3.4\"),\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"www2\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tName:    pulumi.String(\"www\"),\n\t\t\tType:    pulumi.String(\"A\"),\n\t\t\tData:    pulumi.String(\"1.2.3.5\"),\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"mx\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone:  pulumi.String(\"domain.tld\"),\n\t\t\tName:     pulumi.String(\"\"),\n\t\t\tType:     pulumi.String(\"MX\"),\n\t\t\tData:     pulumi.String(\"mx.online.net.\"),\n\t\t\tTtl:      pulumi.Int(3600),\n\t\t\tPriority: pulumi.Int(10),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"mx2\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone:  pulumi.String(\"domain.tld\"),\n\t\t\tName:     pulumi.String(\"\"),\n\t\t\tType:     pulumi.String(\"MX\"),\n\t\t\tData:     pulumi.String(\"mx-cache.online.net.\"),\n\t\t\tTtl:      pulumi.Int(3600),\n\t\t\tPriority: pulumi.Int(20),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DomainRecord;\nimport com.pulumi.scaleway.DomainRecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var www = new DomainRecord(\"www\", DomainRecordArgs.builder()\n            .dnsZone(\"domain.tld\")\n            .name(\"www\")\n            .type(\"A\")\n            .data(\"1.2.3.4\")\n            .ttl(3600)\n            .build());\n\n        var www2 = new DomainRecord(\"www2\", DomainRecordArgs.builder()\n            .dnsZone(\"domain.tld\")\n            .name(\"www\")\n            .type(\"A\")\n            .data(\"1.2.3.5\")\n            .ttl(3600)\n            .build());\n\n        var mx = new DomainRecord(\"mx\", DomainRecordArgs.builder()\n            .dnsZone(\"domain.tld\")\n            .name(\"\")\n            .type(\"MX\")\n            .data(\"mx.online.net.\")\n            .ttl(3600)\n            .priority(10)\n            .build());\n\n        var mx2 = new DomainRecord(\"mx2\", DomainRecordArgs.builder()\n            .dnsZone(\"domain.tld\")\n            .name(\"\")\n            .type(\"MX\")\n            .data(\"mx-cache.online.net.\")\n            .ttl(3600)\n            .priority(20)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  www:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: domain.tld\n      name: www\n      type: A\n      data: 1.2.3.4\n      ttl: 3600\n  www2:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: domain.tld\n      name: www\n      type: A\n      data: 1.2.3.5\n      ttl: 3600\n  mx:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: domain.tld\n      name:\n      type: MX\n      data: mx.online.net.\n      ttl: 3600\n      priority: 10\n  mx2:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: domain.tld\n      name:\n      type: MX\n      data: mx-cache.online.net.\n      ttl: 3600\n      priority: 20\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create dynamic records\n\nThe folllowing commands allow you to:\n\n- create a Geo IP record for `images.domain.tld` that points to different IPs based on the user's location: `1.2.3.5` for users in France (EU), and `4.3.2.1` for users in North America (NA)\n\n- create an HTTP service record for `app.domain.tld` that checks the health of specified IPs and responds based on their status.\n\n- create view-based records for `db.domain.tld` that resolve differently based on the client's subnet.\n\n- create a weighted record for `web.domain.tld` that directs traffic to different IPs based on their weights.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst geoIp = new scaleway.DomainRecord(\"geo_ip\", {\n    dnsZone: \"domain.tld\",\n    name: \"images\",\n    type: \"A\",\n    data: \"1.2.3.4\",\n    ttl: 3600,\n    geoIp: {\n        matches: [\n            {\n                continents: [\"EU\"],\n                countries: [\"FR\"],\n                data: \"1.2.3.5\",\n            },\n            {\n                continents: [\"NA\"],\n                data: \"4.3.2.1\",\n            },\n        ],\n    },\n});\nconst httpService = new scaleway.DomainRecord(\"http_service\", {\n    dnsZone: \"domain.tld\",\n    name: \"app\",\n    type: \"A\",\n    data: \"1.2.3.4\",\n    ttl: 3600,\n    httpService: {\n        ips: [\n            \"1.2.3.5\",\n            \"1.2.3.6\",\n        ],\n        mustContain: \"up\",\n        url: \"http://mywebsite.com/health\",\n        userAgent: \"scw_service_up\",\n        strategy: \"hashed\",\n    },\n});\nconst view = new scaleway.DomainRecord(\"view\", {\n    dnsZone: \"domain.tld\",\n    name: \"db\",\n    type: \"A\",\n    data: \"1.2.3.4\",\n    ttl: 3600,\n    views: [\n        {\n            subnet: \"100.0.0.0/16\",\n            data: \"1.2.3.5\",\n        },\n        {\n            subnet: \"100.1.0.0/16\",\n            data: \"1.2.3.6\",\n        },\n    ],\n});\nconst weighted = new scaleway.DomainRecord(\"weighted\", {\n    dnsZone: \"domain.tld\",\n    name: \"web\",\n    type: \"A\",\n    data: \"1.2.3.4\",\n    ttl: 3600,\n    weighteds: [\n        {\n            ip: \"1.2.3.5\",\n            weight: 1,\n        },\n        {\n            ip: \"1.2.3.6\",\n            weight: 2,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\ngeo_ip = scaleway.DomainRecord(\"geo_ip\",\n    dns_zone=\"domain.tld\",\n    name=\"images\",\n    type=\"A\",\n    data=\"1.2.3.4\",\n    ttl=3600,\n    geo_ip={\n        \"matches\": [\n            {\n                \"continents\": [\"EU\"],\n                \"countries\": [\"FR\"],\n                \"data\": \"1.2.3.5\",\n            },\n            {\n                \"continents\": [\"NA\"],\n                \"data\": \"4.3.2.1\",\n            },\n        ],\n    })\nhttp_service = scaleway.DomainRecord(\"http_service\",\n    dns_zone=\"domain.tld\",\n    name=\"app\",\n    type=\"A\",\n    data=\"1.2.3.4\",\n    ttl=3600,\n    http_service={\n        \"ips\": [\n            \"1.2.3.5\",\n            \"1.2.3.6\",\n        ],\n        \"must_contain\": \"up\",\n        \"url\": \"http://mywebsite.com/health\",\n        \"user_agent\": \"scw_service_up\",\n        \"strategy\": \"hashed\",\n    })\nview = scaleway.DomainRecord(\"view\",\n    dns_zone=\"domain.tld\",\n    name=\"db\",\n    type=\"A\",\n    data=\"1.2.3.4\",\n    ttl=3600,\n    views=[\n        {\n            \"subnet\": \"100.0.0.0/16\",\n            \"data\": \"1.2.3.5\",\n        },\n        {\n            \"subnet\": \"100.1.0.0/16\",\n            \"data\": \"1.2.3.6\",\n        },\n    ])\nweighted = scaleway.DomainRecord(\"weighted\",\n    dns_zone=\"domain.tld\",\n    name=\"web\",\n    type=\"A\",\n    data=\"1.2.3.4\",\n    ttl=3600,\n    weighteds=[\n        {\n            \"ip\": \"1.2.3.5\",\n            \"weight\": 1,\n        },\n        {\n            \"ip\": \"1.2.3.6\",\n            \"weight\": 2,\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var geoIp = new Scaleway.DomainRecord(\"geo_ip\", new()\n    {\n        DnsZone = \"domain.tld\",\n        Name = \"images\",\n        Type = \"A\",\n        Data = \"1.2.3.4\",\n        Ttl = 3600,\n        GeoIp = new Scaleway.Inputs.DomainRecordGeoIpArgs\n        {\n            Matches = new[]\n            {\n                new Scaleway.Inputs.DomainRecordGeoIpMatchArgs\n                {\n                    Continents = new[]\n                    {\n                        \"EU\",\n                    },\n                    Countries = new[]\n                    {\n                        \"FR\",\n                    },\n                    Data = \"1.2.3.5\",\n                },\n                new Scaleway.Inputs.DomainRecordGeoIpMatchArgs\n                {\n                    Continents = new[]\n                    {\n                        \"NA\",\n                    },\n                    Data = \"4.3.2.1\",\n                },\n            },\n        },\n    });\n\n    var httpService = new Scaleway.DomainRecord(\"http_service\", new()\n    {\n        DnsZone = \"domain.tld\",\n        Name = \"app\",\n        Type = \"A\",\n        Data = \"1.2.3.4\",\n        Ttl = 3600,\n        HttpService = new Scaleway.Inputs.DomainRecordHttpServiceArgs\n        {\n            Ips = new[]\n            {\n                \"1.2.3.5\",\n                \"1.2.3.6\",\n            },\n            MustContain = \"up\",\n            Url = \"http://mywebsite.com/health\",\n            UserAgent = \"scw_service_up\",\n            Strategy = \"hashed\",\n        },\n    });\n\n    var view = new Scaleway.DomainRecord(\"view\", new()\n    {\n        DnsZone = \"domain.tld\",\n        Name = \"db\",\n        Type = \"A\",\n        Data = \"1.2.3.4\",\n        Ttl = 3600,\n        Views = new[]\n        {\n            new Scaleway.Inputs.DomainRecordViewArgs\n            {\n                Subnet = \"100.0.0.0/16\",\n                Data = \"1.2.3.5\",\n            },\n            new Scaleway.Inputs.DomainRecordViewArgs\n            {\n                Subnet = \"100.1.0.0/16\",\n                Data = \"1.2.3.6\",\n            },\n        },\n    });\n\n    var weighted = new Scaleway.DomainRecord(\"weighted\", new()\n    {\n        DnsZone = \"domain.tld\",\n        Name = \"web\",\n        Type = \"A\",\n        Data = \"1.2.3.4\",\n        Ttl = 3600,\n        Weighteds = new[]\n        {\n            new Scaleway.Inputs.DomainRecordWeightedArgs\n            {\n                Ip = \"1.2.3.5\",\n                Weight = 1,\n            },\n            new Scaleway.Inputs.DomainRecordWeightedArgs\n            {\n                Ip = \"1.2.3.6\",\n                Weight = 2,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewDomainRecord(ctx, \"geo_ip\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tName:    pulumi.String(\"images\"),\n\t\t\tType:    pulumi.String(\"A\"),\n\t\t\tData:    pulumi.String(\"1.2.3.4\"),\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t\tGeoIp: \u0026scaleway.DomainRecordGeoIpArgs{\n\t\t\t\tMatches: scaleway.DomainRecordGeoIpMatchArray{\n\t\t\t\t\t\u0026scaleway.DomainRecordGeoIpMatchArgs{\n\t\t\t\t\t\tContinents: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"EU\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tCountries: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"FR\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tData: pulumi.String(\"1.2.3.5\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026scaleway.DomainRecordGeoIpMatchArgs{\n\t\t\t\t\t\tContinents: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"NA\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tData: pulumi.String(\"4.3.2.1\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"http_service\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tName:    pulumi.String(\"app\"),\n\t\t\tType:    pulumi.String(\"A\"),\n\t\t\tData:    pulumi.String(\"1.2.3.4\"),\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t\tHttpService: \u0026scaleway.DomainRecordHttpServiceArgs{\n\t\t\t\tIps: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"1.2.3.5\"),\n\t\t\t\t\tpulumi.String(\"1.2.3.6\"),\n\t\t\t\t},\n\t\t\t\tMustContain: pulumi.String(\"up\"),\n\t\t\t\tUrl:         pulumi.String(\"http://mywebsite.com/health\"),\n\t\t\t\tUserAgent:   pulumi.String(\"scw_service_up\"),\n\t\t\t\tStrategy:    pulumi.String(\"hashed\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"view\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tName:    pulumi.String(\"db\"),\n\t\t\tType:    pulumi.String(\"A\"),\n\t\t\tData:    pulumi.String(\"1.2.3.4\"),\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t\tViews: scaleway.DomainRecordViewArray{\n\t\t\t\t\u0026scaleway.DomainRecordViewArgs{\n\t\t\t\t\tSubnet: pulumi.String(\"100.0.0.0/16\"),\n\t\t\t\t\tData:   pulumi.String(\"1.2.3.5\"),\n\t\t\t\t},\n\t\t\t\t\u0026scaleway.DomainRecordViewArgs{\n\t\t\t\t\tSubnet: pulumi.String(\"100.1.0.0/16\"),\n\t\t\t\t\tData:   pulumi.String(\"1.2.3.6\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"weighted\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(\"domain.tld\"),\n\t\t\tName:    pulumi.String(\"web\"),\n\t\t\tType:    pulumi.String(\"A\"),\n\t\t\tData:    pulumi.String(\"1.2.3.4\"),\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t\tWeighteds: scaleway.DomainRecordWeightedArray{\n\t\t\t\t\u0026scaleway.DomainRecordWeightedArgs{\n\t\t\t\t\tIp:     pulumi.String(\"1.2.3.5\"),\n\t\t\t\t\tWeight: pulumi.Int(1),\n\t\t\t\t},\n\t\t\t\t\u0026scaleway.DomainRecordWeightedArgs{\n\t\t\t\t\tIp:     pulumi.String(\"1.2.3.6\"),\n\t\t\t\t\tWeight: pulumi.Int(2),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.DomainRecord;\nimport com.pulumi.scaleway.DomainRecordArgs;\nimport com.pulumi.scaleway.inputs.DomainRecordGeoIpArgs;\nimport com.pulumi.scaleway.inputs.DomainRecordHttpServiceArgs;\nimport com.pulumi.scaleway.inputs.DomainRecordViewArgs;\nimport com.pulumi.scaleway.inputs.DomainRecordWeightedArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var geoIp = new DomainRecord(\"geoIp\", DomainRecordArgs.builder()\n            .dnsZone(\"domain.tld\")\n            .name(\"images\")\n            .type(\"A\")\n            .data(\"1.2.3.4\")\n            .ttl(3600)\n            .geoIp(DomainRecordGeoIpArgs.builder()\n                .matches(                \n                    DomainRecordGeoIpMatchArgs.builder()\n                        .continents(\"EU\")\n                        .countries(\"FR\")\n                        .data(\"1.2.3.5\")\n                        .build(),\n                    DomainRecordGeoIpMatchArgs.builder()\n                        .continents(\"NA\")\n                        .data(\"4.3.2.1\")\n                        .build())\n                .build())\n            .build());\n\n        var httpService = new DomainRecord(\"httpService\", DomainRecordArgs.builder()\n            .dnsZone(\"domain.tld\")\n            .name(\"app\")\n            .type(\"A\")\n            .data(\"1.2.3.4\")\n            .ttl(3600)\n            .httpService(DomainRecordHttpServiceArgs.builder()\n                .ips(                \n                    \"1.2.3.5\",\n                    \"1.2.3.6\")\n                .mustContain(\"up\")\n                .url(\"http://mywebsite.com/health\")\n                .userAgent(\"scw_service_up\")\n                .strategy(\"hashed\")\n                .build())\n            .build());\n\n        var view = new DomainRecord(\"view\", DomainRecordArgs.builder()\n            .dnsZone(\"domain.tld\")\n            .name(\"db\")\n            .type(\"A\")\n            .data(\"1.2.3.4\")\n            .ttl(3600)\n            .views(            \n                DomainRecordViewArgs.builder()\n                    .subnet(\"100.0.0.0/16\")\n                    .data(\"1.2.3.5\")\n                    .build(),\n                DomainRecordViewArgs.builder()\n                    .subnet(\"100.1.0.0/16\")\n                    .data(\"1.2.3.6\")\n                    .build())\n            .build());\n\n        var weighted = new DomainRecord(\"weighted\", DomainRecordArgs.builder()\n            .dnsZone(\"domain.tld\")\n            .name(\"web\")\n            .type(\"A\")\n            .data(\"1.2.3.4\")\n            .ttl(3600)\n            .weighteds(            \n                DomainRecordWeightedArgs.builder()\n                    .ip(\"1.2.3.5\")\n                    .weight(1)\n                    .build(),\n                DomainRecordWeightedArgs.builder()\n                    .ip(\"1.2.3.6\")\n                    .weight(2)\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  geoIp:\n    type: scaleway:DomainRecord\n    name: geo_ip\n    properties:\n      dnsZone: domain.tld\n      name: images\n      type: A\n      data: 1.2.3.4\n      ttl: 3600\n      geoIp:\n        matches:\n          - continents:\n              - EU\n            countries:\n              - FR\n            data: 1.2.3.5\n          - continents:\n              - NA\n            data: 4.3.2.1\n  httpService:\n    type: scaleway:DomainRecord\n    name: http_service\n    properties:\n      dnsZone: domain.tld\n      name: app\n      type: A\n      data: 1.2.3.4\n      ttl: 3600\n      httpService:\n        ips:\n          - 1.2.3.5\n          - 1.2.3.6\n        mustContain: up\n        url: http://mywebsite.com/health\n        userAgent: scw_service_up\n        strategy: hashed\n  view:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: domain.tld\n      name: db\n      type: A\n      data: 1.2.3.4\n      ttl: 3600\n      views:\n        - subnet: 100.0.0.0/16\n          data: 1.2.3.5\n        - subnet: 100.1.0.0/16\n          data: 1.2.3.6\n  weighted:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: domain.tld\n      name: web\n      type: A\n      data: 1.2.3.4\n      ttl: 3600\n      weighteds:\n        - ip: 1.2.3.5\n          weight: 1\n        - ip: 1.2.3.6\n          weight: 2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create an Instance and add records with the new Instance IP\n\nThe following commands allow you to:\n\n- create a Scaleway Instance\n- assign The Instance's IP address to various DNS records for a specified DNS zone\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst config = new pulumi.Config();\n// Your project ID.\nconst projectId = config.require(\"projectId\");\n// The DNS Zone used for testing records.\nconst dnsZone = config.require(\"dnsZone\");\nconst publicIp = new scaleway.InstanceIp(\"public_ip\", {projectId: projectId});\nconst web = new scaleway.InstanceServer(\"web\", {\n    projectId: projectId,\n    type: \"DEV1-S\",\n    image: \"ubuntu_jammy\",\n    tags: [\n        \"front\",\n        \"web\",\n    ],\n    ipId: publicIp.id,\n    rootVolume: {\n        sizeInGb: 20,\n    },\n});\nconst webA = new scaleway.DomainRecord(\"web_A\", {\n    dnsZone: dnsZone,\n    name: \"web\",\n    type: \"A\",\n    data: web.publicIp,\n    ttl: 3600,\n});\nconst webCname = new scaleway.DomainRecord(\"web_cname\", {\n    dnsZone: dnsZone,\n    name: \"www\",\n    type: \"CNAME\",\n    data: `web.${dnsZone}.`,\n    ttl: 3600,\n});\nconst webAlias = new scaleway.DomainRecord(\"web_alias\", {\n    dnsZone: dnsZone,\n    name: \"\",\n    type: \"ALIAS\",\n    data: `web.${dnsZone}.`,\n    ttl: 3600,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nconfig = pulumi.Config()\n# Your project ID.\nproject_id = config.require(\"projectId\")\n# The DNS Zone used for testing records.\ndns_zone = config.require(\"dnsZone\")\npublic_ip = scaleway.InstanceIp(\"public_ip\", project_id=project_id)\nweb = scaleway.InstanceServer(\"web\",\n    project_id=project_id,\n    type=\"DEV1-S\",\n    image=\"ubuntu_jammy\",\n    tags=[\n        \"front\",\n        \"web\",\n    ],\n    ip_id=public_ip.id,\n    root_volume={\n        \"size_in_gb\": 20,\n    })\nweb_a = scaleway.DomainRecord(\"web_A\",\n    dns_zone=dns_zone,\n    name=\"web\",\n    type=\"A\",\n    data=web.public_ip,\n    ttl=3600)\nweb_cname = scaleway.DomainRecord(\"web_cname\",\n    dns_zone=dns_zone,\n    name=\"www\",\n    type=\"CNAME\",\n    data=f\"web.{dns_zone}.\",\n    ttl=3600)\nweb_alias = scaleway.DomainRecord(\"web_alias\",\n    dns_zone=dns_zone,\n    name=\"\",\n    type=\"ALIAS\",\n    data=f\"web.{dns_zone}.\",\n    ttl=3600)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    // Your project ID.\n    var projectId = config.Require(\"projectId\");\n    // The DNS Zone used for testing records.\n    var dnsZone = config.Require(\"dnsZone\");\n    var publicIp = new Scaleway.InstanceIp(\"public_ip\", new()\n    {\n        ProjectId = projectId,\n    });\n\n    var web = new Scaleway.InstanceServer(\"web\", new()\n    {\n        ProjectId = projectId,\n        Type = \"DEV1-S\",\n        Image = \"ubuntu_jammy\",\n        Tags = new[]\n        {\n            \"front\",\n            \"web\",\n        },\n        IpId = publicIp.Id,\n        RootVolume = new Scaleway.Inputs.InstanceServerRootVolumeArgs\n        {\n            SizeInGb = 20,\n        },\n    });\n\n    var webA = new Scaleway.DomainRecord(\"web_A\", new()\n    {\n        DnsZone = dnsZone,\n        Name = \"web\",\n        Type = \"A\",\n        Data = web.PublicIp,\n        Ttl = 3600,\n    });\n\n    var webCname = new Scaleway.DomainRecord(\"web_cname\", new()\n    {\n        DnsZone = dnsZone,\n        Name = \"www\",\n        Type = \"CNAME\",\n        Data = $\"web.{dnsZone}.\",\n        Ttl = 3600,\n    });\n\n    var webAlias = new Scaleway.DomainRecord(\"web_alias\", new()\n    {\n        DnsZone = dnsZone,\n        Name = \"\",\n        Type = \"ALIAS\",\n        Data = $\"web.{dnsZone}.\",\n        Ttl = 3600,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\t// Your project ID.\n\t\tprojectId := cfg.Require(\"projectId\")\n\t\t// The DNS Zone used for testing records.\n\t\tdnsZone := cfg.Require(\"dnsZone\")\n\t\tpublicIp, err := scaleway.NewInstanceIp(ctx, \"public_ip\", \u0026scaleway.InstanceIpArgs{\n\t\t\tProjectId: pulumi.String(projectId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tweb, err := scaleway.NewInstanceServer(ctx, \"web\", \u0026scaleway.InstanceServerArgs{\n\t\t\tProjectId: pulumi.String(projectId),\n\t\t\tType:      pulumi.String(\"DEV1-S\"),\n\t\t\tImage:     pulumi.String(\"ubuntu_jammy\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"front\"),\n\t\t\t\tpulumi.String(\"web\"),\n\t\t\t},\n\t\t\tIpId: publicIp.ID(),\n\t\t\tRootVolume: \u0026scaleway.InstanceServerRootVolumeArgs{\n\t\t\t\tSizeInGb: pulumi.Int(20),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"web_A\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(dnsZone),\n\t\t\tName:    pulumi.String(\"web\"),\n\t\t\tType:    pulumi.String(\"A\"),\n\t\t\tData:    web.PublicIp,\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"web_cname\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(dnsZone),\n\t\t\tName:    pulumi.String(\"www\"),\n\t\t\tType:    pulumi.String(\"CNAME\"),\n\t\t\tData:    pulumi.Sprintf(\"web.%v.\", dnsZone),\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"web_alias\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(dnsZone),\n\t\t\tName:    pulumi.String(\"\"),\n\t\t\tType:    pulumi.String(\"ALIAS\"),\n\t\t\tData:    pulumi.Sprintf(\"web.%v.\", dnsZone),\n\t\t\tTtl:     pulumi.Int(3600),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceIp;\nimport com.pulumi.scaleway.InstanceIpArgs;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.inputs.InstanceServerRootVolumeArgs;\nimport com.pulumi.scaleway.DomainRecord;\nimport com.pulumi.scaleway.DomainRecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var projectId = config.get(\"projectId\");\n        final var dnsZone = config.get(\"dnsZone\");\n        var publicIp = new InstanceIp(\"publicIp\", InstanceIpArgs.builder()\n            .projectId(projectId)\n            .build());\n\n        var web = new InstanceServer(\"web\", InstanceServerArgs.builder()\n            .projectId(projectId)\n            .type(\"DEV1-S\")\n            .image(\"ubuntu_jammy\")\n            .tags(            \n                \"front\",\n                \"web\")\n            .ipId(publicIp.id())\n            .rootVolume(InstanceServerRootVolumeArgs.builder()\n                .sizeInGb(20)\n                .build())\n            .build());\n\n        var webA = new DomainRecord(\"webA\", DomainRecordArgs.builder()\n            .dnsZone(dnsZone)\n            .name(\"web\")\n            .type(\"A\")\n            .data(web.publicIp())\n            .ttl(3600)\n            .build());\n\n        var webCname = new DomainRecord(\"webCname\", DomainRecordArgs.builder()\n            .dnsZone(dnsZone)\n            .name(\"www\")\n            .type(\"CNAME\")\n            .data(String.format(\"web.%s.\", dnsZone))\n            .ttl(3600)\n            .build());\n\n        var webAlias = new DomainRecord(\"webAlias\", DomainRecordArgs.builder()\n            .dnsZone(dnsZone)\n            .name(\"\")\n            .type(\"ALIAS\")\n            .data(String.format(\"web.%s.\", dnsZone))\n            .ttl(3600)\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  projectId:\n    type: string\n  dnsZone:\n    type: string\nresources:\n  publicIp:\n    type: scaleway:InstanceIp\n    name: public_ip\n    properties:\n      projectId: ${projectId}\n  web:\n    type: scaleway:InstanceServer\n    properties:\n      projectId: ${projectId}\n      type: DEV1-S\n      image: ubuntu_jammy\n      tags:\n        - front\n        - web\n      ipId: ${publicIp.id}\n      rootVolume:\n        sizeInGb: 20\n  webA:\n    type: scaleway:DomainRecord\n    name: web_A\n    properties:\n      dnsZone: ${dnsZone}\n      name: web\n      type: A\n      data: ${web.publicIp}\n      ttl: 3600\n  webCname:\n    type: scaleway:DomainRecord\n    name: web_cname\n    properties:\n      dnsZone: ${dnsZone}\n      name: www\n      type: CNAME\n      data: web.${dnsZone}.\n      ttl: 3600\n  webAlias:\n    type: scaleway:DomainRecord\n    name: web_alias\n    properties:\n      dnsZone: ${dnsZone}\n      name:\n      type: ALIAS\n      data: web.${dnsZone}.\n      ttl: 3600\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Multiple records\n\nSome record types can have multiple data with the same name (e.g., `A`, `AAAA`, `MX`, `NS`, etc.). You can duplicate a `scaleway.DomainRecord`  resource with the same `name`, and the records will be added.\n\nNote however, that some records (e.g., CNAME, multiple dynamic records of different types) must be unique.\n\n## Import\n\nThis section explains how to import a record using the `{dns_zone}/{id}` format.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/domainRecord:DomainRecord www subdomain.domain.tld/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "data": {
                    "type": "string",
                    "description": "The content of the record (an IPv4 for an `A` record, a string for a `TXT` record, etc.).\n"
                },
                "dnsZone": {
                    "type": "string",
                    "description": "The DNS zone of the domain. If the domain has no DNS zone, one will be automatically created.\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "The FQDN of the record.\n"
                },
                "geoIp": {
                    "$ref": "#/types/scaleway:index/DomainRecordGeoIp:DomainRecordGeoIp",
                    "description": "Return record based on client localisation\n"
                },
                "httpService": {
                    "$ref": "#/types/scaleway:index/DomainRecordHttpService:DomainRecordHttpService",
                    "description": "Return record based on client localisation\n"
                },
                "keepEmptyZone": {
                    "type": "boolean",
                    "description": "When destroying a resource, if only NS records remain and this is set to `false`, the zone will be deleted. Note that each zone not deleted will [be billed](https://www.scaleway.com/en/dns/).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the record (can be an empty string for a root record).\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the record (mostly used with an `MX` record).\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n"
                },
                "rootZone": {
                    "type": "boolean",
                    "description": "Does the DNS zone is the root zone or not\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "Time To Live of the record in seconds.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).\n"
                },
                "views": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DomainRecordView:DomainRecordView"
                    },
                    "description": "Return record based on client subnet\n"
                },
                "weighteds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DomainRecordWeighted:DomainRecordWeighted"
                    },
                    "description": "Return record based on weight\n"
                }
            },
            "required": [
                "data",
                "dnsZone",
                "fqdn",
                "name",
                "priority",
                "projectId",
                "rootZone",
                "type"
            ],
            "inputProperties": {
                "data": {
                    "type": "string",
                    "description": "The content of the record (an IPv4 for an `A` record, a string for a `TXT` record, etc.).\n"
                },
                "dnsZone": {
                    "type": "string",
                    "description": "The DNS zone of the domain. If the domain has no DNS zone, one will be automatically created.\n",
                    "willReplaceOnChanges": true
                },
                "geoIp": {
                    "$ref": "#/types/scaleway:index/DomainRecordGeoIp:DomainRecordGeoIp",
                    "description": "Return record based on client localisation\n"
                },
                "httpService": {
                    "$ref": "#/types/scaleway:index/DomainRecordHttpService:DomainRecordHttpService",
                    "description": "Return record based on client localisation\n"
                },
                "keepEmptyZone": {
                    "type": "boolean",
                    "description": "When destroying a resource, if only NS records remain and this is set to `false`, the zone will be deleted. Note that each zone not deleted will [be billed](https://www.scaleway.com/en/dns/).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the record (can be an empty string for a root record).\n",
                    "willReplaceOnChanges": true
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the record (mostly used with an `MX` record).\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                },
                "ttl": {
                    "type": "integer",
                    "description": "Time To Live of the record in seconds.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).\n",
                    "willReplaceOnChanges": true
                },
                "views": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DomainRecordView:DomainRecordView"
                    },
                    "description": "Return record based on client subnet\n"
                },
                "weighteds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/DomainRecordWeighted:DomainRecordWeighted"
                    },
                    "description": "Return record based on weight\n"
                }
            },
            "requiredInputs": [
                "data",
                "dnsZone",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DomainRecord resources.\n",
                "properties": {
                    "data": {
                        "type": "string",
                        "description": "The content of the record (an IPv4 for an `A` record, a string for a `TXT` record, etc.).\n"
                    },
                    "dnsZone": {
                        "type": "string",
                        "description": "The DNS zone of the domain. If the domain has no DNS zone, one will be automatically created.\n",
                        "willReplaceOnChanges": true
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "The FQDN of the record.\n"
                    },
                    "geoIp": {
                        "$ref": "#/types/scaleway:index/DomainRecordGeoIp:DomainRecordGeoIp",
                        "description": "Return record based on client localisation\n"
                    },
                    "httpService": {
                        "$ref": "#/types/scaleway:index/DomainRecordHttpService:DomainRecordHttpService",
                        "description": "Return record based on client localisation\n"
                    },
                    "keepEmptyZone": {
                        "type": "boolean",
                        "description": "When destroying a resource, if only NS records remain and this is set to `false`, the zone will be deleted. Note that each zone not deleted will [be billed](https://www.scaleway.com/en/dns/).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the record (can be an empty string for a root record).\n",
                        "willReplaceOnChanges": true
                    },
                    "priority": {
                        "type": "integer",
                        "description": "The priority of the record (mostly used with an `MX` record).\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project_id you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    },
                    "rootZone": {
                        "type": "boolean",
                        "description": "Does the DNS zone is the root zone or not\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "Time To Live of the record in seconds.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).\n",
                        "willReplaceOnChanges": true
                    },
                    "views": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/DomainRecordView:DomainRecordView"
                        },
                        "description": "Return record based on client subnet\n"
                    },
                    "weighteds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/DomainRecordWeighted:DomainRecordWeighted"
                        },
                        "description": "Return record based on weight\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/domainZone:DomainZone": {
            "description": "\n\n## Import\n\nThis section explains how to import a zone using the `{subdomain}.{domain}` format.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/domainZone:DomainZone test test.scaleway-terraform.com\n```\n\n",
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "The main domain where the DNS zone will be created.\n"
                },
                "message": {
                    "type": "string",
                    "description": "Message.\n"
                },
                "ns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of same servers for the zone.\n"
                },
                "nsDefaults": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The default list of same servers for the zone.\n"
                },
                "nsMasters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The master list of same servers for the zone.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project associated with the domain.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the domain zone.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "The name of the subdomain (zone name) to create within the domain.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time at which the DNS zone was last updated.\n"
                }
            },
            "required": [
                "domain",
                "message",
                "ns",
                "nsDefaults",
                "nsMasters",
                "projectId",
                "status",
                "subdomain",
                "updatedAt"
            ],
            "inputProperties": {
                "domain": {
                    "type": "string",
                    "description": "The main domain where the DNS zone will be created.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project associated with the domain.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "The name of the subdomain (zone name) to create within the domain.\n"
                }
            },
            "requiredInputs": [
                "domain",
                "subdomain"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DomainZone resources.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The main domain where the DNS zone will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "message": {
                        "type": "string",
                        "description": "Message.\n"
                    },
                    "ns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of same servers for the zone.\n"
                    },
                    "nsDefaults": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The default list of same servers for the zone.\n"
                    },
                    "nsMasters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The master list of same servers for the zone.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the Project associated with the domain.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the domain zone.\n"
                    },
                    "subdomain": {
                        "type": "string",
                        "description": "The name of the subdomain (zone name) to create within the domain.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time at which the DNS zone was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/flexibleIp:FlexibleIp": {
            "description": "Creates and manages Scaleway flexible IPs.\nFor more information, see [the documentation](https://www.scaleway.com/en/developers/api/elastic-metal-flexible-ip).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.FlexibleIp(\"main\", {reverse: \"my-reverse.com\"});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.FlexibleIp(\"main\", reverse=\"my-reverse.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.FlexibleIp(\"main\", new()\n    {\n        Reverse = \"my-reverse.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewFlexibleIp(ctx, \"main\", \u0026scaleway.FlexibleIpArgs{\n\t\t\tReverse: pulumi.String(\"my-reverse.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FlexibleIp;\nimport com.pulumi.scaleway.FlexibleIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new FlexibleIp(\"main\", FlexibleIpArgs.builder()\n            .reverse(\"my-reverse.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:FlexibleIp\n    properties:\n      reverse: my-reverse.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### With zone\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.FlexibleIp(\"main\", {zone: \"fr-par-2\"});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.FlexibleIp(\"main\", zone=\"fr-par-2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.FlexibleIp(\"main\", new()\n    {\n        Zone = \"fr-par-2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewFlexibleIp(ctx, \"main\", \u0026scaleway.FlexibleIpArgs{\n\t\t\tZone: pulumi.String(\"fr-par-2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FlexibleIp;\nimport com.pulumi.scaleway.FlexibleIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new FlexibleIp(\"main\", FlexibleIpArgs.builder()\n            .zone(\"fr-par-2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:FlexibleIp\n    properties:\n      zone: fr-par-2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### With IPv6\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.FlexibleIp(\"main\", {isIpv6: true});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.FlexibleIp(\"main\", is_ipv6=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.FlexibleIp(\"main\", new()\n    {\n        IsIpv6 = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewFlexibleIp(ctx, \"main\", \u0026scaleway.FlexibleIpArgs{\n\t\t\tIsIpv6: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FlexibleIp;\nimport com.pulumi.scaleway.FlexibleIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new FlexibleIp(\"main\", FlexibleIpArgs.builder()\n            .isIpv6(\"true\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:FlexibleIp\n    properties:\n      isIpv6: 'true'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### With baremetal server\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.AccountSshKey(\"main\", {\n    name: \"main\",\n    publicKey: \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILHy/M5FVm5ydLGcal3e5LNcfTalbeN7QL/ZGCvDEdqJ foobar@example.com\",\n});\nconst byId = scaleway.getBaremetalOs({\n    zone: \"fr-par-2\",\n    name: \"Ubuntu\",\n    version: \"20.04 LTS (Focal Fossa)\",\n});\nconst myOffer = scaleway.getBaremetalOffer({\n    zone: \"fr-par-2\",\n    name: \"EM-A210R-HDD\",\n});\nconst base = new scaleway.BaremetalServer(\"base\", {\n    zone: \"fr-par-2\",\n    offer: myOffer.then(myOffer =\u003e myOffer.offerId),\n    os: byId.then(byId =\u003e byId.osId),\n    sshKeyIds: main.id,\n});\nconst mainFlexibleIp = new scaleway.FlexibleIp(\"main\", {\n    serverId: base.id,\n    zone: \"fr-par-2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.AccountSshKey(\"main\",\n    name=\"main\",\n    public_key=\"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILHy/M5FVm5ydLGcal3e5LNcfTalbeN7QL/ZGCvDEdqJ foobar@example.com\")\nby_id = scaleway.get_baremetal_os(zone=\"fr-par-2\",\n    name=\"Ubuntu\",\n    version=\"20.04 LTS (Focal Fossa)\")\nmy_offer = scaleway.get_baremetal_offer(zone=\"fr-par-2\",\n    name=\"EM-A210R-HDD\")\nbase = scaleway.BaremetalServer(\"base\",\n    zone=\"fr-par-2\",\n    offer=my_offer.offer_id,\n    os=by_id.os_id,\n    ssh_key_ids=main.id)\nmain_flexible_ip = scaleway.FlexibleIp(\"main\",\n    server_id=base.id,\n    zone=\"fr-par-2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.AccountSshKey(\"main\", new()\n    {\n        Name = \"main\",\n        PublicKey = \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILHy/M5FVm5ydLGcal3e5LNcfTalbeN7QL/ZGCvDEdqJ foobar@example.com\",\n    });\n\n    var byId = Scaleway.GetBaremetalOs.Invoke(new()\n    {\n        Zone = \"fr-par-2\",\n        Name = \"Ubuntu\",\n        Version = \"20.04 LTS (Focal Fossa)\",\n    });\n\n    var myOffer = Scaleway.GetBaremetalOffer.Invoke(new()\n    {\n        Zone = \"fr-par-2\",\n        Name = \"EM-A210R-HDD\",\n    });\n\n    var @base = new Scaleway.BaremetalServer(\"base\", new()\n    {\n        Zone = \"fr-par-2\",\n        Offer = myOffer.Apply(getBaremetalOfferResult =\u003e getBaremetalOfferResult.OfferId),\n        Os = byId.Apply(getBaremetalOsResult =\u003e getBaremetalOsResult.OsId),\n        SshKeyIds = main.Id,\n    });\n\n    var mainFlexibleIp = new Scaleway.FlexibleIp(\"main\", new()\n    {\n        ServerId = @base.Id,\n        Zone = \"fr-par-2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewAccountSshKey(ctx, \"main\", \u0026scaleway.AccountSshKeyArgs{\n\t\t\tName:      pulumi.String(\"main\"),\n\t\t\tPublicKey: pulumi.String(\"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILHy/M5FVm5ydLGcal3e5LNcfTalbeN7QL/ZGCvDEdqJ foobar@example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbyId, err := scaleway.GetBaremetalOs(ctx, \u0026scaleway.GetBaremetalOsArgs{\n\t\t\tZone:    pulumi.StringRef(\"fr-par-2\"),\n\t\t\tName:    pulumi.StringRef(\"Ubuntu\"),\n\t\t\tVersion: pulumi.StringRef(\"20.04 LTS (Focal Fossa)\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyOffer, err := scaleway.GetBaremetalOffer(ctx, \u0026scaleway.GetBaremetalOfferArgs{\n\t\t\tZone: pulumi.StringRef(\"fr-par-2\"),\n\t\t\tName: pulumi.StringRef(\"EM-A210R-HDD\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbase, err := scaleway.NewBaremetalServer(ctx, \"base\", \u0026scaleway.BaremetalServerArgs{\n\t\t\tZone:      pulumi.String(\"fr-par-2\"),\n\t\t\tOffer:     pulumi.String(myOffer.OfferId),\n\t\t\tOs:        pulumi.String(byId.OsId),\n\t\t\tSshKeyIds: main.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewFlexibleIp(ctx, \"main\", \u0026scaleway.FlexibleIpArgs{\n\t\t\tServerId: base.ID(),\n\t\t\tZone:     pulumi.String(\"fr-par-2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.AccountSshKey;\nimport com.pulumi.scaleway.AccountSshKeyArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetBaremetalOsArgs;\nimport com.pulumi.scaleway.inputs.GetBaremetalOfferArgs;\nimport com.pulumi.scaleway.BaremetalServer;\nimport com.pulumi.scaleway.BaremetalServerArgs;\nimport com.pulumi.scaleway.FlexibleIp;\nimport com.pulumi.scaleway.FlexibleIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new AccountSshKey(\"main\", AccountSshKeyArgs.builder()\n            .name(\"main\")\n            .publicKey(\"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILHy/M5FVm5ydLGcal3e5LNcfTalbeN7QL/ZGCvDEdqJ foobar@example.com\")\n            .build());\n\n        final var byId = ScalewayFunctions.getBaremetalOs(GetBaremetalOsArgs.builder()\n            .zone(\"fr-par-2\")\n            .name(\"Ubuntu\")\n            .version(\"20.04 LTS (Focal Fossa)\")\n            .build());\n\n        final var myOffer = ScalewayFunctions.getBaremetalOffer(GetBaremetalOfferArgs.builder()\n            .zone(\"fr-par-2\")\n            .name(\"EM-A210R-HDD\")\n            .build());\n\n        var base = new BaremetalServer(\"base\", BaremetalServerArgs.builder()\n            .zone(\"fr-par-2\")\n            .offer(myOffer.applyValue(getBaremetalOfferResult -\u003e getBaremetalOfferResult.offerId()))\n            .os(byId.applyValue(getBaremetalOsResult -\u003e getBaremetalOsResult.osId()))\n            .sshKeyIds(main.id())\n            .build());\n\n        var mainFlexibleIp = new FlexibleIp(\"mainFlexibleIp\", FlexibleIpArgs.builder()\n            .serverId(base.id())\n            .zone(\"fr-par-2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:AccountSshKey\n    properties:\n      name: main\n      publicKey: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILHy/M5FVm5ydLGcal3e5LNcfTalbeN7QL/ZGCvDEdqJ foobar@example.com\n  base:\n    type: scaleway:BaremetalServer\n    properties:\n      zone: fr-par-2\n      offer: ${myOffer.offerId}\n      os: ${byId.osId}\n      sshKeyIds: ${main.id}\n  mainFlexibleIp:\n    type: scaleway:FlexibleIp\n    name: main\n    properties:\n      serverId: ${base.id}\n      zone: fr-par-2\nvariables:\n  byId:\n    fn::invoke:\n      Function: scaleway:getBaremetalOs\n      Arguments:\n        zone: fr-par-2\n        name: Ubuntu\n        version: 20.04 LTS (Focal Fossa)\n  myOffer:\n    fn::invoke:\n      Function: scaleway:getBaremetalOffer\n      Arguments:\n        zone: fr-par-2\n        name: EM-A210R-HDD\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nFlexible IPs can be imported using the `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/flexibleIp:FlexibleIp main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the Flexible IP (Format ISO 8601).\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the flexible IP.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address of the Flexible IP.\n"
                },
                "isIpv6": {
                    "type": "boolean",
                    "description": "Defines whether the flexible IP has an IPv6 address.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization of the Flexible IP.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project of the Flexible IP.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain associated with this flexible IP.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The ID of the associated server.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the flexible IP.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the flexible IP.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the Flexible IP (Format ISO 8601).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone of the Flexible IP.\n"
                }
            },
            "required": [
                "createdAt",
                "ipAddress",
                "organizationId",
                "projectId",
                "reverse",
                "status",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description of the flexible IP.\n"
                },
                "isIpv6": {
                    "type": "boolean",
                    "description": "Defines whether the flexible IP has an IPv6 address.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The project of the Flexible IP.\n",
                    "willReplaceOnChanges": true
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain associated with this flexible IP.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The ID of the associated server.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the flexible IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone of the Flexible IP.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FlexibleIp resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the Flexible IP (Format ISO 8601).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the flexible IP.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address of the Flexible IP.\n"
                    },
                    "isIpv6": {
                        "type": "boolean",
                        "description": "Defines whether the flexible IP has an IPv6 address.\n",
                        "willReplaceOnChanges": true
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization of the Flexible IP.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project of the Flexible IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse domain associated with this flexible IP.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The ID of the associated server.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the flexible IP.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags to apply to the flexible IP.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the Flexible IP (Format ISO 8601).\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone of the Flexible IP.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/flexibleIpMacAddress:FlexibleIpMacAddress": {
            "description": "Creates and manages Scaleway Flexible IP Mac Addresses.\nFor more information, see [the documentation](https://www.scaleway.com/en/developers/api/elastic-metal-flexible-ip/).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.FlexibleIp(\"main\", {});\nconst mainFlexibleIpMacAddress = new scaleway.FlexibleIpMacAddress(\"main\", {\n    flexibleIpId: main.id,\n    type: \"kvm\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.FlexibleIp(\"main\")\nmain_flexible_ip_mac_address = scaleway.FlexibleIpMacAddress(\"main\",\n    flexible_ip_id=main.id,\n    type=\"kvm\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.FlexibleIp(\"main\");\n\n    var mainFlexibleIpMacAddress = new Scaleway.FlexibleIpMacAddress(\"main\", new()\n    {\n        FlexibleIpId = main.Id,\n        Type = \"kvm\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewFlexibleIp(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewFlexibleIpMacAddress(ctx, \"main\", \u0026scaleway.FlexibleIpMacAddressArgs{\n\t\t\tFlexibleIpId: main.ID(),\n\t\t\tType:         pulumi.String(\"kvm\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FlexibleIp;\nimport com.pulumi.scaleway.FlexibleIpMacAddress;\nimport com.pulumi.scaleway.FlexibleIpMacAddressArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new FlexibleIp(\"main\");\n\n        var mainFlexibleIpMacAddress = new FlexibleIpMacAddress(\"mainFlexibleIpMacAddress\", FlexibleIpMacAddressArgs.builder()\n            .flexibleIpId(main.id())\n            .type(\"kvm\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:FlexibleIp\n  mainFlexibleIpMacAddress:\n    type: scaleway:FlexibleIpMacAddress\n    name: main\n    properties:\n      flexibleIpId: ${main.id}\n      type: kvm\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Duplicate on many other flexible IPs\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst myOffer = scaleway.getBaremetalOffer({\n    name: \"EM-B112X-SSD\",\n});\nconst base = new scaleway.BaremetalServer(\"base\", {\n    name: \"TestAccScalewayBaremetalServer_WithoutInstallConfig\",\n    offer: myOffer.then(myOffer =\u003e myOffer.offerId),\n    installConfigAfterward: true,\n});\nconst ip01 = new scaleway.FlexibleIp(\"ip01\", {serverId: base.id});\nconst ip02 = new scaleway.FlexibleIp(\"ip02\", {serverId: base.id});\nconst ip03 = new scaleway.FlexibleIp(\"ip03\", {serverId: base.id});\nconst main = new scaleway.FlexibleIpMacAddress(\"main\", {\n    flexibleIpId: ip01.id,\n    type: \"kvm\",\n    flexibleIpIdsToDuplicates: [\n        ip02.id,\n        ip03.id,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\nmy_offer = scaleway.get_baremetal_offer(name=\"EM-B112X-SSD\")\nbase = scaleway.BaremetalServer(\"base\",\n    name=\"TestAccScalewayBaremetalServer_WithoutInstallConfig\",\n    offer=my_offer.offer_id,\n    install_config_afterward=True)\nip01 = scaleway.FlexibleIp(\"ip01\", server_id=base.id)\nip02 = scaleway.FlexibleIp(\"ip02\", server_id=base.id)\nip03 = scaleway.FlexibleIp(\"ip03\", server_id=base.id)\nmain = scaleway.FlexibleIpMacAddress(\"main\",\n    flexible_ip_id=ip01.id,\n    type=\"kvm\",\n    flexible_ip_ids_to_duplicates=[\n        ip02.id,\n        ip03.id,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myOffer = Scaleway.GetBaremetalOffer.Invoke(new()\n    {\n        Name = \"EM-B112X-SSD\",\n    });\n\n    var @base = new Scaleway.BaremetalServer(\"base\", new()\n    {\n        Name = \"TestAccScalewayBaremetalServer_WithoutInstallConfig\",\n        Offer = myOffer.Apply(getBaremetalOfferResult =\u003e getBaremetalOfferResult.OfferId),\n        InstallConfigAfterward = true,\n    });\n\n    var ip01 = new Scaleway.FlexibleIp(\"ip01\", new()\n    {\n        ServerId = @base.Id,\n    });\n\n    var ip02 = new Scaleway.FlexibleIp(\"ip02\", new()\n    {\n        ServerId = @base.Id,\n    });\n\n    var ip03 = new Scaleway.FlexibleIp(\"ip03\", new()\n    {\n        ServerId = @base.Id,\n    });\n\n    var main = new Scaleway.FlexibleIpMacAddress(\"main\", new()\n    {\n        FlexibleIpId = ip01.Id,\n        Type = \"kvm\",\n        FlexibleIpIdsToDuplicates = new[]\n        {\n            ip02.Id,\n            ip03.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyOffer, err := scaleway.GetBaremetalOffer(ctx, \u0026scaleway.GetBaremetalOfferArgs{\n\t\t\tName: pulumi.StringRef(\"EM-B112X-SSD\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbase, err := scaleway.NewBaremetalServer(ctx, \"base\", \u0026scaleway.BaremetalServerArgs{\n\t\t\tName:                   pulumi.String(\"TestAccScalewayBaremetalServer_WithoutInstallConfig\"),\n\t\t\tOffer:                  pulumi.String(myOffer.OfferId),\n\t\t\tInstallConfigAfterward: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tip01, err := scaleway.NewFlexibleIp(ctx, \"ip01\", \u0026scaleway.FlexibleIpArgs{\n\t\t\tServerId: base.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tip02, err := scaleway.NewFlexibleIp(ctx, \"ip02\", \u0026scaleway.FlexibleIpArgs{\n\t\t\tServerId: base.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tip03, err := scaleway.NewFlexibleIp(ctx, \"ip03\", \u0026scaleway.FlexibleIpArgs{\n\t\t\tServerId: base.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewFlexibleIpMacAddress(ctx, \"main\", \u0026scaleway.FlexibleIpMacAddressArgs{\n\t\t\tFlexibleIpId: ip01.ID(),\n\t\t\tType:         pulumi.String(\"kvm\"),\n\t\t\tFlexibleIpIdsToDuplicates: pulumi.StringArray{\n\t\t\t\tip02.ID(),\n\t\t\t\tip03.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetBaremetalOfferArgs;\nimport com.pulumi.scaleway.BaremetalServer;\nimport com.pulumi.scaleway.BaremetalServerArgs;\nimport com.pulumi.scaleway.FlexibleIp;\nimport com.pulumi.scaleway.FlexibleIpArgs;\nimport com.pulumi.scaleway.FlexibleIpMacAddress;\nimport com.pulumi.scaleway.FlexibleIpMacAddressArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myOffer = ScalewayFunctions.getBaremetalOffer(GetBaremetalOfferArgs.builder()\n            .name(\"EM-B112X-SSD\")\n            .build());\n\n        var base = new BaremetalServer(\"base\", BaremetalServerArgs.builder()\n            .name(\"TestAccScalewayBaremetalServer_WithoutInstallConfig\")\n            .offer(myOffer.applyValue(getBaremetalOfferResult -\u003e getBaremetalOfferResult.offerId()))\n            .installConfigAfterward(true)\n            .build());\n\n        var ip01 = new FlexibleIp(\"ip01\", FlexibleIpArgs.builder()\n            .serverId(base.id())\n            .build());\n\n        var ip02 = new FlexibleIp(\"ip02\", FlexibleIpArgs.builder()\n            .serverId(base.id())\n            .build());\n\n        var ip03 = new FlexibleIp(\"ip03\", FlexibleIpArgs.builder()\n            .serverId(base.id())\n            .build());\n\n        var main = new FlexibleIpMacAddress(\"main\", FlexibleIpMacAddressArgs.builder()\n            .flexibleIpId(ip01.id())\n            .type(\"kvm\")\n            .flexibleIpIdsToDuplicates(            \n                ip02.id(),\n                ip03.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  base:\n    type: scaleway:BaremetalServer\n    properties:\n      name: TestAccScalewayBaremetalServer_WithoutInstallConfig\n      offer: ${myOffer.offerId}\n      installConfigAfterward: true\n  ip01:\n    type: scaleway:FlexibleIp\n    properties:\n      serverId: ${base.id}\n  ip02:\n    type: scaleway:FlexibleIp\n    properties:\n      serverId: ${base.id}\n  ip03:\n    type: scaleway:FlexibleIp\n    properties:\n      serverId: ${base.id}\n  main:\n    type: scaleway:FlexibleIpMacAddress\n    properties:\n      flexibleIpId: ${ip01.id}\n      type: kvm\n      flexibleIpIdsToDuplicates:\n        - ${ip02.id}\n        - ${ip03.id}\nvariables:\n  myOffer:\n    fn::invoke:\n      Function: scaleway:getBaremetalOffer\n      Arguments:\n        name: EM-B112X-SSD\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nFlexible IP Mac Addresses can be imported using the `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/flexibleIpMacAddress:FlexibleIpMacAddress main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The Virtual MAC address.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date at which the Virtual Mac Address was created (RFC 3339 format).\n"
                },
                "flexibleIpId": {
                    "type": "string",
                    "description": "The ID of the flexible IP for which to generate a virtual MAC.\n"
                },
                "flexibleIpIdsToDuplicates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of the flexible IPs on which to duplicate the virtual MAC.\n\u003e **Important:** The flexible IPs need to be attached to the same server for the operation to work.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The Virtual MAC status.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the virtual MAC.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date at which the Virtual Mac Address was last updated (RFC 3339 format).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone of the Virtual Mac Address.\n"
                }
            },
            "required": [
                "address",
                "createdAt",
                "flexibleIpId",
                "status",
                "type",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "flexibleIpId": {
                    "type": "string",
                    "description": "The ID of the flexible IP for which to generate a virtual MAC.\n"
                },
                "flexibleIpIdsToDuplicates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of the flexible IPs on which to duplicate the virtual MAC.\n\u003e **Important:** The flexible IPs need to be attached to the same server for the operation to work.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the virtual MAC.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone of the Virtual Mac Address.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "flexibleIpId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FlexibleIpMacAddress resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The Virtual MAC address.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date at which the Virtual Mac Address was created (RFC 3339 format).\n"
                    },
                    "flexibleIpId": {
                        "type": "string",
                        "description": "The ID of the flexible IP for which to generate a virtual MAC.\n"
                    },
                    "flexibleIpIdsToDuplicates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IDs of the flexible IPs on which to duplicate the virtual MAC.\n\u003e **Important:** The flexible IPs need to be attached to the same server for the operation to work.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The Virtual MAC status.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the virtual MAC.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date at which the Virtual Mac Address was last updated (RFC 3339 format).\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone of the Virtual Mac Address.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/function:Function": {
            "description": "\n\n## Import\n\nFunctions can be imported using, `{region}/{id}`, as shown below:\n\nbash\n\n```sh\n$ pulumi import scaleway:index/function:Function main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "cpuLimit": {
                    "type": "integer",
                    "description": "The CPU limit in mVCPU for your function.\n"
                },
                "deploy": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the function.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "The native domain name of the function.\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The [environment variables](https://www.scaleway.com/en/docs/compute/functions/concepts/#environment-variables) of the function.\n"
                },
                "handler": {
                    "type": "string",
                    "description": "Handler of the function, depends on the runtime. Refer to the [dedicated documentation](https://www.scaleway.com/en/developers/api/serverless-functions/#path-functions-create-a-new-function) for the list of supported runtimes.\n"
                },
                "httpOption": {
                    "type": "string",
                    "description": "HTTP traffic configuration\n"
                },
                "maxScale": {
                    "type": "integer",
                    "description": "The maximum number of instances this function can scale to. Default to 20. Your function will scale automatically based on the incoming workload, but will never exceed the configured `max_scale` value.\n"
                },
                "memoryLimit": {
                    "type": "integer",
                    "description": "The memory resources in MB to allocate to each function. Defaults to 256 MB.\n"
                },
                "minScale": {
                    "type": "integer",
                    "description": "The minimum number of function instances running continuously. Defaults to 0. Functions are billed when executed, and using a `min_scale` greater than 0 will cause your function to run constantly.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the function name.\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The Functions namespace ID of the function.\n\n\u003e **Important** Updating the `name` argument will recreate the function.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the function is associated with.\n"
                },
                "privacy": {
                    "type": "string",
                    "description": "The privacy type defines the way to authenticate to your function. Please check our dedicated [section](https://www.scaleway.com/en/developers/api/serverless-functions/#protocol-9dd4c8).\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the functions namespace is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n"
                },
                "runtime": {
                    "type": "string",
                    "description": "Runtime of the function. Runtimes can be fetched using [specific route](https://www.scaleway.com/en/developers/api/serverless-functions/#path-functions-get-a-function)\n"
                },
                "sandbox": {
                    "type": "string",
                    "description": "Execution environment of the function.\n"
                },
                "secretEnvironmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The [secret environment variables](https://www.scaleway.com/en/docs/compute/functions/concepts/#secrets) of the function.\n",
                    "secret": true
                },
                "timeout": {
                    "type": "integer",
                    "description": "The maximum amount of time your function can spend processing a request before being stopped. Defaults to 300s.\n"
                },
                "zipFile": {
                    "type": "string",
                    "description": "Path to the zip file containing your function sources to upload.\n"
                },
                "zipHash": {
                    "type": "string",
                    "description": "The hash of your source zip file, changing it will re-apply function. Can be any string\n"
                }
            },
            "required": [
                "cpuLimit",
                "domainName",
                "handler",
                "name",
                "namespaceId",
                "organizationId",
                "privacy",
                "projectId",
                "region",
                "runtime",
                "sandbox",
                "timeout"
            ],
            "inputProperties": {
                "deploy": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the function.\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The [environment variables](https://www.scaleway.com/en/docs/compute/functions/concepts/#environment-variables) of the function.\n"
                },
                "handler": {
                    "type": "string",
                    "description": "Handler of the function, depends on the runtime. Refer to the [dedicated documentation](https://www.scaleway.com/en/developers/api/serverless-functions/#path-functions-create-a-new-function) for the list of supported runtimes.\n"
                },
                "httpOption": {
                    "type": "string",
                    "description": "HTTP traffic configuration\n"
                },
                "maxScale": {
                    "type": "integer",
                    "description": "The maximum number of instances this function can scale to. Default to 20. Your function will scale automatically based on the incoming workload, but will never exceed the configured `max_scale` value.\n"
                },
                "memoryLimit": {
                    "type": "integer",
                    "description": "The memory resources in MB to allocate to each function. Defaults to 256 MB.\n"
                },
                "minScale": {
                    "type": "integer",
                    "description": "The minimum number of function instances running continuously. Defaults to 0. Functions are billed when executed, and using a `min_scale` greater than 0 will cause your function to run constantly.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the function name.\n",
                    "willReplaceOnChanges": true
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The Functions namespace ID of the function.\n\n\u003e **Important** Updating the `name` argument will recreate the function.\n",
                    "willReplaceOnChanges": true
                },
                "privacy": {
                    "type": "string",
                    "description": "The privacy type defines the way to authenticate to your function. Please check our dedicated [section](https://www.scaleway.com/en/developers/api/serverless-functions/#protocol-9dd4c8).\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the functions namespace is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n",
                    "willReplaceOnChanges": true
                },
                "runtime": {
                    "type": "string",
                    "description": "Runtime of the function. Runtimes can be fetched using [specific route](https://www.scaleway.com/en/developers/api/serverless-functions/#path-functions-get-a-function)\n"
                },
                "sandbox": {
                    "type": "string",
                    "description": "Execution environment of the function.\n"
                },
                "secretEnvironmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The [secret environment variables](https://www.scaleway.com/en/docs/compute/functions/concepts/#secrets) of the function.\n",
                    "secret": true
                },
                "timeout": {
                    "type": "integer",
                    "description": "The maximum amount of time your function can spend processing a request before being stopped. Defaults to 300s.\n"
                },
                "zipFile": {
                    "type": "string",
                    "description": "Path to the zip file containing your function sources to upload.\n"
                },
                "zipHash": {
                    "type": "string",
                    "description": "The hash of your source zip file, changing it will re-apply function. Can be any string\n"
                }
            },
            "requiredInputs": [
                "handler",
                "namespaceId",
                "privacy",
                "runtime"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Function resources.\n",
                "properties": {
                    "cpuLimit": {
                        "type": "integer",
                        "description": "The CPU limit in mVCPU for your function.\n"
                    },
                    "deploy": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the function.\n"
                    },
                    "domainName": {
                        "type": "string",
                        "description": "The native domain name of the function.\n"
                    },
                    "environmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The [environment variables](https://www.scaleway.com/en/docs/compute/functions/concepts/#environment-variables) of the function.\n"
                    },
                    "handler": {
                        "type": "string",
                        "description": "Handler of the function, depends on the runtime. Refer to the [dedicated documentation](https://www.scaleway.com/en/developers/api/serverless-functions/#path-functions-create-a-new-function) for the list of supported runtimes.\n"
                    },
                    "httpOption": {
                        "type": "string",
                        "description": "HTTP traffic configuration\n"
                    },
                    "maxScale": {
                        "type": "integer",
                        "description": "The maximum number of instances this function can scale to. Default to 20. Your function will scale automatically based on the incoming workload, but will never exceed the configured `max_scale` value.\n"
                    },
                    "memoryLimit": {
                        "type": "integer",
                        "description": "The memory resources in MB to allocate to each function. Defaults to 256 MB.\n"
                    },
                    "minScale": {
                        "type": "integer",
                        "description": "The minimum number of function instances running continuously. Defaults to 0. Functions are billed when executed, and using a `min_scale` greater than 0 will cause your function to run constantly.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the function name.\n",
                        "willReplaceOnChanges": true
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The Functions namespace ID of the function.\n\n\u003e **Important** Updating the `name` argument will recreate the function.\n",
                        "willReplaceOnChanges": true
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the function is associated with.\n"
                    },
                    "privacy": {
                        "type": "string",
                        "description": "The privacy type defines the way to authenticate to your function. Please check our dedicated [section](https://www.scaleway.com/en/developers/api/serverless-functions/#protocol-9dd4c8).\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the functions namespace is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the namespace should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "runtime": {
                        "type": "string",
                        "description": "Runtime of the function. Runtimes can be fetched using [specific route](https://www.scaleway.com/en/developers/api/serverless-functions/#path-functions-get-a-function)\n"
                    },
                    "sandbox": {
                        "type": "string",
                        "description": "Execution environment of the function.\n"
                    },
                    "secretEnvironmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The [secret environment variables](https://www.scaleway.com/en/docs/compute/functions/concepts/#secrets) of the function.\n",
                        "secret": true
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "The maximum amount of time your function can spend processing a request before being stopped. Defaults to 300s.\n"
                    },
                    "zipFile": {
                        "type": "string",
                        "description": "Path to the zip file containing your function sources to upload.\n"
                    },
                    "zipHash": {
                        "type": "string",
                        "description": "The hash of your source zip file, changing it will re-apply function. Can be any string\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/functionCron:FunctionCron": {
            "description": "The `scaleway.FunctionCron` resource allows you to create and manage CRON triggers for Scaleway [Serverless Functions](https://www.scaleway.com/en/docs/serverless/functions/).\n\nRefer to the Functions CRON triggers [documentation](https://www.scaleway.com/en/docs/serverless/functions/how-to/add-trigger-to-a-function/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-functions/#path-triggers-list-all-triggers) for more information.\n\n## Example Usage\n\nThe following command allows you to add a CRON trigger to a Serverless Function.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.FunctionNamespace(\"main\", {name: \"test-cron\"});\nconst mainFunction = new scaleway.Function(\"main\", {\n    name: \"test-cron\",\n    namespaceId: main.id,\n    runtime: \"node14\",\n    privacy: \"private\",\n    handler: \"handler.handle\",\n});\nconst mainFunctionCron = new scaleway.FunctionCron(\"main\", {\n    name: \"test-cron\",\n    functionId: mainFunction.id,\n    schedule: \"0 0 * * *\",\n    args: JSON.stringify({\n        test: \"scw\",\n    }),\n});\nconst func = new scaleway.FunctionCron(\"func\", {\n    functionId: mainFunction.id,\n    schedule: \"0 1 * * *\",\n    args: JSON.stringify({\n        my_var: \"terraform\",\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.FunctionNamespace(\"main\", name=\"test-cron\")\nmain_function = scaleway.Function(\"main\",\n    name=\"test-cron\",\n    namespace_id=main.id,\n    runtime=\"node14\",\n    privacy=\"private\",\n    handler=\"handler.handle\")\nmain_function_cron = scaleway.FunctionCron(\"main\",\n    name=\"test-cron\",\n    function_id=main_function.id,\n    schedule=\"0 0 * * *\",\n    args=json.dumps({\n        \"test\": \"scw\",\n    }))\nfunc = scaleway.FunctionCron(\"func\",\n    function_id=main_function.id,\n    schedule=\"0 1 * * *\",\n    args=json.dumps({\n        \"my_var\": \"terraform\",\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.FunctionNamespace(\"main\", new()\n    {\n        Name = \"test-cron\",\n    });\n\n    var mainFunction = new Scaleway.Function(\"main\", new()\n    {\n        Name = \"test-cron\",\n        NamespaceId = main.Id,\n        Runtime = \"node14\",\n        Privacy = \"private\",\n        Handler = \"handler.handle\",\n    });\n\n    var mainFunctionCron = new Scaleway.FunctionCron(\"main\", new()\n    {\n        Name = \"test-cron\",\n        FunctionId = mainFunction.Id,\n        Schedule = \"0 0 * * *\",\n        Args = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"test\"] = \"scw\",\n        }),\n    });\n\n    var func = new Scaleway.FunctionCron(\"func\", new()\n    {\n        FunctionId = mainFunction.Id,\n        Schedule = \"0 1 * * *\",\n        Args = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"my_var\"] = \"terraform\",\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewFunctionNamespace(ctx, \"main\", \u0026scaleway.FunctionNamespaceArgs{\n\t\t\tName: pulumi.String(\"test-cron\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainFunction, err := scaleway.NewFunction(ctx, \"main\", \u0026scaleway.FunctionArgs{\n\t\t\tName:        pulumi.String(\"test-cron\"),\n\t\t\tNamespaceId: main.ID(),\n\t\t\tRuntime:     pulumi.String(\"node14\"),\n\t\t\tPrivacy:     pulumi.String(\"private\"),\n\t\t\tHandler:     pulumi.String(\"handler.handle\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"test\": \"scw\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = scaleway.NewFunctionCron(ctx, \"main\", \u0026scaleway.FunctionCronArgs{\n\t\t\tName:       pulumi.String(\"test-cron\"),\n\t\t\tFunctionId: mainFunction.ID(),\n\t\t\tSchedule:   pulumi.String(\"0 0 * * *\"),\n\t\t\tArgs:       pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON1, err := json.Marshal(map[string]interface{}{\n\t\t\t\"my_var\": \"terraform\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\t_, err = scaleway.NewFunctionCron(ctx, \"func\", \u0026scaleway.FunctionCronArgs{\n\t\t\tFunctionId: mainFunction.ID(),\n\t\t\tSchedule:   pulumi.String(\"0 1 * * *\"),\n\t\t\tArgs:       pulumi.String(json1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FunctionNamespace;\nimport com.pulumi.scaleway.FunctionNamespaceArgs;\nimport com.pulumi.scaleway.Function;\nimport com.pulumi.scaleway.FunctionArgs;\nimport com.pulumi.scaleway.FunctionCron;\nimport com.pulumi.scaleway.FunctionCronArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new FunctionNamespace(\"main\", FunctionNamespaceArgs.builder()\n            .name(\"test-cron\")\n            .build());\n\n        var mainFunction = new Function(\"mainFunction\", FunctionArgs.builder()\n            .name(\"test-cron\")\n            .namespaceId(main.id())\n            .runtime(\"node14\")\n            .privacy(\"private\")\n            .handler(\"handler.handle\")\n            .build());\n\n        var mainFunctionCron = new FunctionCron(\"mainFunctionCron\", FunctionCronArgs.builder()\n            .name(\"test-cron\")\n            .functionId(mainFunction.id())\n            .schedule(\"0 0 * * *\")\n            .args(serializeJson(\n                jsonObject(\n                    jsonProperty(\"test\", \"scw\")\n                )))\n            .build());\n\n        var func = new FunctionCron(\"func\", FunctionCronArgs.builder()\n            .functionId(mainFunction.id())\n            .schedule(\"0 1 * * *\")\n            .args(serializeJson(\n                jsonObject(\n                    jsonProperty(\"my_var\", \"terraform\")\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:FunctionNamespace\n    properties:\n      name: test-cron\n  mainFunction:\n    type: scaleway:Function\n    name: main\n    properties:\n      name: test-cron\n      namespaceId: ${main.id}\n      runtime: node14\n      privacy: private\n      handler: handler.handle\n  mainFunctionCron:\n    type: scaleway:FunctionCron\n    name: main\n    properties:\n      name: test-cron\n      functionId: ${mainFunction.id}\n      schedule: 0 0 * * *\n      args:\n        fn::toJSON:\n          test: scw\n  func:\n    type: scaleway:FunctionCron\n    properties:\n      functionId: ${mainFunction.id}\n      schedule: 0 1 * * *\n      args:\n        fn::toJSON:\n          my_var: terraform\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nFunction Cron can be imported using `{region}/{id}`, as shown below:\n\nbash\n\n```sh\n$ pulumi import scaleway:index/functionCron:FunctionCron main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "args": {
                    "type": "string",
                    "description": "The key-value mapping to define arguments that will be passed to your function’s event object\n"
                },
                "functionId": {
                    "type": "string",
                    "description": "The unique identifier of the function to link to your CRON trigger.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the function CRON trigger. If not provided, a random name is generated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region\nin which the function was created.\n"
                },
                "schedule": {
                    "type": "string",
                    "description": "CRON format string (refer to the [CRON schedule reference](https://www.scaleway.com/en/docs/serverless/functions/reference-content/cron-schedules/) for more information).\n"
                },
                "status": {
                    "type": "string",
                    "description": "The CRON status.\n"
                }
            },
            "required": [
                "args",
                "functionId",
                "name",
                "region",
                "schedule",
                "status"
            ],
            "inputProperties": {
                "args": {
                    "type": "string",
                    "description": "The key-value mapping to define arguments that will be passed to your function’s event object\n"
                },
                "functionId": {
                    "type": "string",
                    "description": "The unique identifier of the function to link to your CRON trigger.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the function CRON trigger. If not provided, a random name is generated.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region\nin which the function was created.\n",
                    "willReplaceOnChanges": true
                },
                "schedule": {
                    "type": "string",
                    "description": "CRON format string (refer to the [CRON schedule reference](https://www.scaleway.com/en/docs/serverless/functions/reference-content/cron-schedules/) for more information).\n"
                }
            },
            "requiredInputs": [
                "args",
                "functionId",
                "schedule"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionCron resources.\n",
                "properties": {
                    "args": {
                        "type": "string",
                        "description": "The key-value mapping to define arguments that will be passed to your function’s event object\n"
                    },
                    "functionId": {
                        "type": "string",
                        "description": "The unique identifier of the function to link to your CRON trigger.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the function CRON trigger. If not provided, a random name is generated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region\nin which the function was created.\n",
                        "willReplaceOnChanges": true
                    },
                    "schedule": {
                        "type": "string",
                        "description": "CRON format string (refer to the [CRON schedule reference](https://www.scaleway.com/en/docs/serverless/functions/reference-content/cron-schedules/) for more information).\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The CRON status.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/functionDomain:FunctionDomain": {
            "description": "The `scaleway.FunctionDomain` resource allows you to create and manage domain name bindings for Scaleway [Serverless Functions](https://www.scaleway.com/en/docs/serverless/functions/).\n\nRefer to the Functions domain [documentation](https://www.scaleway.com/en/docs/serverless/functions/how-to/add-a-custom-domain-name-to-a-function/) and the [API documentation](https://www.scaleway.com/en/developers/api/serverless-functions/#path-domains-list-all-domain-name-bindings) for more information.\n\n## Example Usage\n\nThis command allows to bind a custom domain name to a function.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst mainFunctionNamespace = new scaleway.FunctionNamespace(\"main\", {});\nconst mainFunction = new scaleway.Function(\"main\", {\n    namespaceId: mainFunctionNamespace.id,\n    runtime: \"go118\",\n    privacy: \"private\",\n    handler: \"Handle\",\n    zipFile: \"testfixture/gofunction.zip\",\n    deploy: true,\n});\nconst main = new scaleway.FunctionDomain(\"main\", {\n    functionId: mainFunction.id,\n    hostname: \"example.com\",\n}, {\n    dependsOn: [mainFunction],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain_function_namespace = scaleway.FunctionNamespace(\"main\")\nmain_function = scaleway.Function(\"main\",\n    namespace_id=main_function_namespace.id,\n    runtime=\"go118\",\n    privacy=\"private\",\n    handler=\"Handle\",\n    zip_file=\"testfixture/gofunction.zip\",\n    deploy=True)\nmain = scaleway.FunctionDomain(\"main\",\n    function_id=main_function.id,\n    hostname=\"example.com\",\n    opts = pulumi.ResourceOptions(depends_on=[main_function]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainFunctionNamespace = new Scaleway.FunctionNamespace(\"main\");\n\n    var mainFunction = new Scaleway.Function(\"main\", new()\n    {\n        NamespaceId = mainFunctionNamespace.Id,\n        Runtime = \"go118\",\n        Privacy = \"private\",\n        Handler = \"Handle\",\n        ZipFile = \"testfixture/gofunction.zip\",\n        Deploy = true,\n    });\n\n    var main = new Scaleway.FunctionDomain(\"main\", new()\n    {\n        FunctionId = mainFunction.Id,\n        Hostname = \"example.com\",\n    }, new CustomResourceOptions\n    {\n        DependsOn =\n        {\n            mainFunction,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainFunctionNamespace, err := scaleway.NewFunctionNamespace(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainFunction, err := scaleway.NewFunction(ctx, \"main\", \u0026scaleway.FunctionArgs{\n\t\t\tNamespaceId: mainFunctionNamespace.ID(),\n\t\t\tRuntime:     pulumi.String(\"go118\"),\n\t\t\tPrivacy:     pulumi.String(\"private\"),\n\t\t\tHandler:     pulumi.String(\"Handle\"),\n\t\t\tZipFile:     pulumi.String(\"testfixture/gofunction.zip\"),\n\t\t\tDeploy:      pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewFunctionDomain(ctx, \"main\", \u0026scaleway.FunctionDomainArgs{\n\t\t\tFunctionId: mainFunction.ID(),\n\t\t\tHostname:   pulumi.String(\"example.com\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmainFunction,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FunctionNamespace;\nimport com.pulumi.scaleway.Function;\nimport com.pulumi.scaleway.FunctionArgs;\nimport com.pulumi.scaleway.FunctionDomain;\nimport com.pulumi.scaleway.FunctionDomainArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainFunctionNamespace = new FunctionNamespace(\"mainFunctionNamespace\");\n\n        var mainFunction = new Function(\"mainFunction\", FunctionArgs.builder()\n            .namespaceId(mainFunctionNamespace.id())\n            .runtime(\"go118\")\n            .privacy(\"private\")\n            .handler(\"Handle\")\n            .zipFile(\"testfixture/gofunction.zip\")\n            .deploy(true)\n            .build());\n\n        var main = new FunctionDomain(\"main\", FunctionDomainArgs.builder()\n            .functionId(mainFunction.id())\n            .hostname(\"example.com\")\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(mainFunction)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:FunctionDomain\n    properties:\n      functionId: ${mainFunction.id}\n      hostname: example.com\n    options:\n      dependson:\n        - ${mainFunction}\n  mainFunctionNamespace:\n    type: scaleway:FunctionNamespace\n    name: main\n  mainFunction:\n    type: scaleway:Function\n    name: main\n    properties:\n      namespaceId: ${mainFunctionNamespace.id}\n      runtime: go118\n      privacy: private\n      handler: Handle\n      zipFile: testfixture/gofunction.zip\n      deploy: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nFunction domain binding can be imported using `{region}/{id}`, as shown below:\n\nbash\n\n```sh\n$ pulumi import scaleway:index/functionDomain:FunctionDomain main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "functionId": {
                    "type": "string",
                    "description": "The unique identifier of the function.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname with a CNAME record.\n\nWe recommend you use a CNAME domain record that point to your native function `domain_name` for it.\n\n\u003e **Important** Updating the `function_id` or `hostname` arguments will recreate the domain.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Defaults to provider `region`) The region in which the domain was created.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL used to query the function.\n"
                }
            },
            "required": [
                "functionId",
                "hostname",
                "region",
                "url"
            ],
            "inputProperties": {
                "functionId": {
                    "type": "string",
                    "description": "The unique identifier of the function.\n",
                    "willReplaceOnChanges": true
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname with a CNAME record.\n\nWe recommend you use a CNAME domain record that point to your native function `domain_name` for it.\n\n\u003e **Important** Updating the `function_id` or `hostname` arguments will recreate the domain.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "(Defaults to provider `region`) The region in which the domain was created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "functionId",
                "hostname"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionDomain resources.\n",
                "properties": {
                    "functionId": {
                        "type": "string",
                        "description": "The unique identifier of the function.\n",
                        "willReplaceOnChanges": true
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname with a CNAME record.\n\nWe recommend you use a CNAME domain record that point to your native function `domain_name` for it.\n\n\u003e **Important** Updating the `function_id` or `hostname` arguments will recreate the domain.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "(Defaults to provider `region`) The region in which the domain was created.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL used to query the function.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/functionNamespace:FunctionNamespace": {
            "description": "The `scaleway.FunctionNamespace` resource allows you to\nfor Scaleway [Serverless Functions](https://www.scaleway.com/en/docs/serverless/functions/).\n\nRefer to the Functions namespace [documentation](https://www.scaleway.com/en/docs/serverless/functions/how-to/create-a-functions-namespace/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-functions/#path-namespaces-list-all-your-namespaces) for more information.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.FunctionNamespace(\"main\", {\n    name: \"main-function-namespace\",\n    description: \"Main function namespace\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.FunctionNamespace(\"main\",\n    name=\"main-function-namespace\",\n    description=\"Main function namespace\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.FunctionNamespace(\"main\", new()\n    {\n        Name = \"main-function-namespace\",\n        Description = \"Main function namespace\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewFunctionNamespace(ctx, \"main\", \u0026scaleway.FunctionNamespaceArgs{\n\t\t\tName:        pulumi.String(\"main-function-namespace\"),\n\t\t\tDescription: pulumi.String(\"Main function namespace\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FunctionNamespace;\nimport com.pulumi.scaleway.FunctionNamespaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new FunctionNamespace(\"main\", FunctionNamespaceArgs.builder()\n            .name(\"main-function-namespace\")\n            .description(\"Main function namespace\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:FunctionNamespace\n    properties:\n      name: main-function-namespace\n      description: Main function namespace\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nFunctions namespaces can be imported using `{region}/{id}`, as shown below:\n\nbash\n\n```sh\n$ pulumi import scaleway:index/functionNamespace:FunctionNamespace main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the namespace.\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The environment variables of the namespace.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the Functions namespace.\n\n\u003e **Important** Updates to the `name` argument will recreate the namespace.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The Organization ID with which the namespace is associated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The unique identifier of the project that contains the namespace.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace is created.\n"
                },
                "registryEndpoint": {
                    "type": "string",
                    "description": "The registry endpoint of the namespace.\n"
                },
                "registryNamespaceId": {
                    "type": "string",
                    "description": "The registry namespace ID of the namespace.\n"
                },
                "secretEnvironmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The secret environment variables of the namespace.\n",
                    "secret": true
                }
            },
            "required": [
                "name",
                "organizationId",
                "projectId",
                "region",
                "registryEndpoint",
                "registryNamespaceId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the namespace.\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The environment variables of the namespace.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the Functions namespace.\n\n\u003e **Important** Updates to the `name` argument will recreate the namespace.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The unique identifier of the project that contains the namespace.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace is created.\n",
                    "willReplaceOnChanges": true
                },
                "secretEnvironmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The secret environment variables of the namespace.\n",
                    "secret": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionNamespace resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the namespace.\n"
                    },
                    "environmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The environment variables of the namespace.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the Functions namespace.\n\n\u003e **Important** Updates to the `name` argument will recreate the namespace.\n",
                        "willReplaceOnChanges": true
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The Organization ID with which the namespace is associated.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The unique identifier of the project that contains the namespace.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the namespace is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "registryEndpoint": {
                        "type": "string",
                        "description": "The registry endpoint of the namespace.\n"
                    },
                    "registryNamespaceId": {
                        "type": "string",
                        "description": "The registry namespace ID of the namespace.\n"
                    },
                    "secretEnvironmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The secret environment variables of the namespace.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/functionToken:FunctionToken": {
            "description": "The `scaleway.FunctionToken` resource allows you to create and manage authentication tokens for Scaleway [Serverless Functions](https://www.scaleway.com/en/docs/serverless/functions/).\n\nRefer to the Functions tokens [documentation](https://www.scaleway.com/en/docs/serverless/functions/how-to/create-auth-token-from-console/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-functions/#path-tokens-list-all-tokens) for more information.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.FunctionNamespace(\"main\", {name: \"test-function-token-ns\"});\nconst mainFunction = new scaleway.Function(\"main\", {\n    namespaceId: main.id,\n    runtime: \"go118\",\n    handler: \"Handle\",\n    privacy: \"private\",\n});\n// Namespace Token\nconst namespace = new scaleway.FunctionToken(\"namespace\", {\n    namespaceId: main.id,\n    expiresAt: \"2022-10-18T11:35:15+02:00\",\n});\n// Function Token\nconst _function = new scaleway.FunctionToken(\"function\", {functionId: mainFunction.id});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.FunctionNamespace(\"main\", name=\"test-function-token-ns\")\nmain_function = scaleway.Function(\"main\",\n    namespace_id=main.id,\n    runtime=\"go118\",\n    handler=\"Handle\",\n    privacy=\"private\")\n# Namespace Token\nnamespace = scaleway.FunctionToken(\"namespace\",\n    namespace_id=main.id,\n    expires_at=\"2022-10-18T11:35:15+02:00\")\n# Function Token\nfunction = scaleway.FunctionToken(\"function\", function_id=main_function.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.FunctionNamespace(\"main\", new()\n    {\n        Name = \"test-function-token-ns\",\n    });\n\n    var mainFunction = new Scaleway.Function(\"main\", new()\n    {\n        NamespaceId = main.Id,\n        Runtime = \"go118\",\n        Handler = \"Handle\",\n        Privacy = \"private\",\n    });\n\n    // Namespace Token\n    var @namespace = new Scaleway.FunctionToken(\"namespace\", new()\n    {\n        NamespaceId = main.Id,\n        ExpiresAt = \"2022-10-18T11:35:15+02:00\",\n    });\n\n    // Function Token\n    var function = new Scaleway.FunctionToken(\"function\", new()\n    {\n        FunctionId = mainFunction.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewFunctionNamespace(ctx, \"main\", \u0026scaleway.FunctionNamespaceArgs{\n\t\t\tName: pulumi.String(\"test-function-token-ns\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainFunction, err := scaleway.NewFunction(ctx, \"main\", \u0026scaleway.FunctionArgs{\n\t\t\tNamespaceId: main.ID(),\n\t\t\tRuntime:     pulumi.String(\"go118\"),\n\t\t\tHandler:     pulumi.String(\"Handle\"),\n\t\t\tPrivacy:     pulumi.String(\"private\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Namespace Token\n\t\t_, err = scaleway.NewFunctionToken(ctx, \"namespace\", \u0026scaleway.FunctionTokenArgs{\n\t\t\tNamespaceId: main.ID(),\n\t\t\tExpiresAt:   pulumi.String(\"2022-10-18T11:35:15+02:00\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Function Token\n\t\t_, err = scaleway.NewFunctionToken(ctx, \"function\", \u0026scaleway.FunctionTokenArgs{\n\t\t\tFunctionId: mainFunction.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FunctionNamespace;\nimport com.pulumi.scaleway.FunctionNamespaceArgs;\nimport com.pulumi.scaleway.Function;\nimport com.pulumi.scaleway.FunctionArgs;\nimport com.pulumi.scaleway.FunctionToken;\nimport com.pulumi.scaleway.FunctionTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new FunctionNamespace(\"main\", FunctionNamespaceArgs.builder()\n            .name(\"test-function-token-ns\")\n            .build());\n\n        var mainFunction = new Function(\"mainFunction\", FunctionArgs.builder()\n            .namespaceId(main.id())\n            .runtime(\"go118\")\n            .handler(\"Handle\")\n            .privacy(\"private\")\n            .build());\n\n        // Namespace Token\n        var namespace = new FunctionToken(\"namespace\", FunctionTokenArgs.builder()\n            .namespaceId(main.id())\n            .expiresAt(\"2022-10-18T11:35:15+02:00\")\n            .build());\n\n        // Function Token\n        var function = new FunctionToken(\"function\", FunctionTokenArgs.builder()\n            .functionId(mainFunction.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:FunctionNamespace\n    properties:\n      name: test-function-token-ns\n  mainFunction:\n    type: scaleway:Function\n    name: main\n    properties:\n      namespaceId: ${main.id}\n      runtime: go118\n      handler: Handle\n      privacy: private\n  # Namespace Token\n  namespace:\n    type: scaleway:FunctionToken\n    properties:\n      namespaceId: ${main.id}\n      expiresAt: 2022-10-18T11:35:15+02:00\n  # Function Token\n  function:\n    type: scaleway:FunctionToken\n    properties:\n      functionId: ${mainFunction.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nTokens can be imported using `{region}/{id}`, as shown below:\n\nbash\n\n```sh\n$ pulumi import scaleway:index/functionToken:FunctionToken main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the token.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The expiration date of the token.\n"
                },
                "functionId": {
                    "type": "string",
                    "description": "The unique identifier of the function.\n\n\u003e Only one of `namespace_id` or `function_id` must be set.\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The unique identifier of the Functions namespace.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace is created.\n\n\u003e **Important** Updating any of the arguments above will recreate the token.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token.\n",
                    "secret": true
                }
            },
            "required": [
                "region",
                "token"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the token.\n",
                    "willReplaceOnChanges": true
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The expiration date of the token.\n",
                    "willReplaceOnChanges": true
                },
                "functionId": {
                    "type": "string",
                    "description": "The unique identifier of the function.\n\n\u003e Only one of `namespace_id` or `function_id` must be set.\n",
                    "willReplaceOnChanges": true
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The unique identifier of the Functions namespace.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace is created.\n\n\u003e **Important** Updating any of the arguments above will recreate the token.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionToken resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the token.\n",
                        "willReplaceOnChanges": true
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "The expiration date of the token.\n",
                        "willReplaceOnChanges": true
                    },
                    "functionId": {
                        "type": "string",
                        "description": "The unique identifier of the function.\n\n\u003e Only one of `namespace_id` or `function_id` must be set.\n",
                        "willReplaceOnChanges": true
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The unique identifier of the Functions namespace.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the namespace is created.\n\n\u003e **Important** Updating any of the arguments above will recreate the token.\n",
                        "willReplaceOnChanges": true
                    },
                    "token": {
                        "type": "string",
                        "description": "The token.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/functionTrigger:FunctionTrigger": {
            "description": "The `scaleway.FunctionTrigger` resource allows you to create and manage triggers for Scaleway [Serverless Functions](https://www.scaleway.com/en/docs/serverless/functions/).\n\nRefer to the Functions triggers [documentation](https://www.scaleway.com/en/docs/serverless/functions/how-to/add-trigger-to-a-function/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-functions/#path-triggers-list-all-triggers) for more information.\n\n## Example Usage\n\n### SQS\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.FunctionTrigger(\"main\", {\n    functionId: mainScalewayFunction.id,\n    name: \"my-trigger\",\n    sqs: {\n        projectId: mainScalewayMnqSqs.projectId,\n        queue: \"MyQueue\",\n        region: mainScalewayMnqSqs.region,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.FunctionTrigger(\"main\",\n    function_id=main_scaleway_function[\"id\"],\n    name=\"my-trigger\",\n    sqs={\n        \"project_id\": main_scaleway_mnq_sqs[\"projectId\"],\n        \"queue\": \"MyQueue\",\n        \"region\": main_scaleway_mnq_sqs[\"region\"],\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.FunctionTrigger(\"main\", new()\n    {\n        FunctionId = mainScalewayFunction.Id,\n        Name = \"my-trigger\",\n        Sqs = new Scaleway.Inputs.FunctionTriggerSqsArgs\n        {\n            ProjectId = mainScalewayMnqSqs.ProjectId,\n            Queue = \"MyQueue\",\n            Region = mainScalewayMnqSqs.Region,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewFunctionTrigger(ctx, \"main\", \u0026scaleway.FunctionTriggerArgs{\n\t\t\tFunctionId: pulumi.Any(mainScalewayFunction.Id),\n\t\t\tName:       pulumi.String(\"my-trigger\"),\n\t\t\tSqs: \u0026scaleway.FunctionTriggerSqsArgs{\n\t\t\t\tProjectId: pulumi.Any(mainScalewayMnqSqs.ProjectId),\n\t\t\t\tQueue:     pulumi.String(\"MyQueue\"),\n\t\t\t\tRegion:    pulumi.Any(mainScalewayMnqSqs.Region),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FunctionTrigger;\nimport com.pulumi.scaleway.FunctionTriggerArgs;\nimport com.pulumi.scaleway.inputs.FunctionTriggerSqsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new FunctionTrigger(\"main\", FunctionTriggerArgs.builder()\n            .functionId(mainScalewayFunction.id())\n            .name(\"my-trigger\")\n            .sqs(FunctionTriggerSqsArgs.builder()\n                .projectId(mainScalewayMnqSqs.projectId())\n                .queue(\"MyQueue\")\n                .region(mainScalewayMnqSqs.region())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:FunctionTrigger\n    properties:\n      functionId: ${mainScalewayFunction.id}\n      name: my-trigger\n      sqs:\n        projectId: ${mainScalewayMnqSqs.projectId}\n        queue: MyQueue\n        region: ${mainScalewayMnqSqs.region}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### NATS\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.FunctionTrigger(\"main\", {\n    functionId: mainScalewayFunction.id,\n    name: \"my-trigger\",\n    nats: {\n        accountId: mainScalewayMnqNatsAccount.id,\n        subject: \"MySubject\",\n        region: mainScalewayMnqNatsAccount.region,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.FunctionTrigger(\"main\",\n    function_id=main_scaleway_function[\"id\"],\n    name=\"my-trigger\",\n    nats={\n        \"account_id\": main_scaleway_mnq_nats_account[\"id\"],\n        \"subject\": \"MySubject\",\n        \"region\": main_scaleway_mnq_nats_account[\"region\"],\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.FunctionTrigger(\"main\", new()\n    {\n        FunctionId = mainScalewayFunction.Id,\n        Name = \"my-trigger\",\n        Nats = new Scaleway.Inputs.FunctionTriggerNatsArgs\n        {\n            AccountId = mainScalewayMnqNatsAccount.Id,\n            Subject = \"MySubject\",\n            Region = mainScalewayMnqNatsAccount.Region,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewFunctionTrigger(ctx, \"main\", \u0026scaleway.FunctionTriggerArgs{\n\t\t\tFunctionId: pulumi.Any(mainScalewayFunction.Id),\n\t\t\tName:       pulumi.String(\"my-trigger\"),\n\t\t\tNats: \u0026scaleway.FunctionTriggerNatsArgs{\n\t\t\t\tAccountId: pulumi.Any(mainScalewayMnqNatsAccount.Id),\n\t\t\t\tSubject:   pulumi.String(\"MySubject\"),\n\t\t\t\tRegion:    pulumi.Any(mainScalewayMnqNatsAccount.Region),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.FunctionTrigger;\nimport com.pulumi.scaleway.FunctionTriggerArgs;\nimport com.pulumi.scaleway.inputs.FunctionTriggerNatsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new FunctionTrigger(\"main\", FunctionTriggerArgs.builder()\n            .functionId(mainScalewayFunction.id())\n            .name(\"my-trigger\")\n            .nats(FunctionTriggerNatsArgs.builder()\n                .accountId(mainScalewayMnqNatsAccount.id())\n                .subject(\"MySubject\")\n                .region(mainScalewayMnqNatsAccount.region())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:FunctionTrigger\n    properties:\n      functionId: ${mainScalewayFunction.id}\n      name: my-trigger\n      nats:\n        accountId: ${mainScalewayMnqNatsAccount.id}\n        subject: MySubject\n        region: ${mainScalewayMnqNatsAccount.region}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nFunction Triggers can be imported using `{region}/{id}`, as shown below:\n\nbash\n\n```sh\n$ pulumi import scaleway:index/functionTrigger:FunctionTrigger main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the trigger.\n"
                },
                "functionId": {
                    "type": "string",
                    "description": "The unique identifier of the function to create a trigger for.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the trigger. If not provided, a random name is generated.\n"
                },
                "nats": {
                    "$ref": "#/types/scaleway:index/FunctionTriggerNats:FunctionTriggerNats",
                    "description": "The configuration for the Scaleway NATS account used by the trigger\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace is created.\n"
                },
                "sqs": {
                    "$ref": "#/types/scaleway:index/FunctionTriggerSqs:FunctionTriggerSqs",
                    "description": "The configuration of the Scaleway SQS queue used by the trigger\n"
                }
            },
            "required": [
                "functionId",
                "name",
                "region"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the trigger.\n"
                },
                "functionId": {
                    "type": "string",
                    "description": "The unique identifier of the function to create a trigger for.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the trigger. If not provided, a random name is generated.\n"
                },
                "nats": {
                    "$ref": "#/types/scaleway:index/FunctionTriggerNats:FunctionTriggerNats",
                    "description": "The configuration for the Scaleway NATS account used by the trigger\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace is created.\n",
                    "willReplaceOnChanges": true
                },
                "sqs": {
                    "$ref": "#/types/scaleway:index/FunctionTriggerSqs:FunctionTriggerSqs",
                    "description": "The configuration of the Scaleway SQS queue used by the trigger\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "functionId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionTrigger resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the trigger.\n"
                    },
                    "functionId": {
                        "type": "string",
                        "description": "The unique identifier of the function to create a trigger for.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the trigger. If not provided, a random name is generated.\n"
                    },
                    "nats": {
                        "$ref": "#/types/scaleway:index/FunctionTriggerNats:FunctionTriggerNats",
                        "description": "The configuration for the Scaleway NATS account used by the trigger\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the namespace is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "sqs": {
                        "$ref": "#/types/scaleway:index/FunctionTriggerSqs:FunctionTriggerSqs",
                        "description": "The configuration of the Scaleway SQS queue used by the trigger\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iamApiKey:IamApiKey": {
            "description": "Creates and manages Scaleway API Keys. For more information, refer to the [IAM API documentation](https://www.scaleway.com/en/developers/api/iam/#api-keys-3665ae).\n\n## Example Usage\n\n### With application\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst ciCd = new scaleway.IamApplication(\"ci_cd\", {name: \"My application\"});\nconst main = new scaleway.IamApiKey(\"main\", {\n    applicationId: mainScalewayIamApplication.id,\n    description: \"a description\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nci_cd = scaleway.IamApplication(\"ci_cd\", name=\"My application\")\nmain = scaleway.IamApiKey(\"main\",\n    application_id=main_scaleway_iam_application[\"id\"],\n    description=\"a description\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ciCd = new Scaleway.IamApplication(\"ci_cd\", new()\n    {\n        Name = \"My application\",\n    });\n\n    var main = new Scaleway.IamApiKey(\"main\", new()\n    {\n        ApplicationId = mainScalewayIamApplication.Id,\n        Description = \"a description\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewIamApplication(ctx, \"ci_cd\", \u0026scaleway.IamApplicationArgs{\n\t\t\tName: pulumi.String(\"My application\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewIamApiKey(ctx, \"main\", \u0026scaleway.IamApiKeyArgs{\n\t\t\tApplicationId: pulumi.Any(mainScalewayIamApplication.Id),\n\t\t\tDescription:   pulumi.String(\"a description\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.IamApplication;\nimport com.pulumi.scaleway.IamApplicationArgs;\nimport com.pulumi.scaleway.IamApiKey;\nimport com.pulumi.scaleway.IamApiKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ciCd = new IamApplication(\"ciCd\", IamApplicationArgs.builder()\n            .name(\"My application\")\n            .build());\n\n        var main = new IamApiKey(\"main\", IamApiKeyArgs.builder()\n            .applicationId(mainScalewayIamApplication.id())\n            .description(\"a description\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ciCd:\n    type: scaleway:IamApplication\n    name: ci_cd\n    properties:\n      name: My application\n  main:\n    type: scaleway:IamApiKey\n    properties:\n      applicationId: ${mainScalewayIamApplication.id}\n      description: a description\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### With user\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.IamUser(\"main\", {email: \"test@test.com\"});\nconst mainIamApiKey = new scaleway.IamApiKey(\"main\", {\n    userId: main.id,\n    description: \"a description\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.IamUser(\"main\", email=\"test@test.com\")\nmain_iam_api_key = scaleway.IamApiKey(\"main\",\n    user_id=main.id,\n    description=\"a description\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.IamUser(\"main\", new()\n    {\n        Email = \"test@test.com\",\n    });\n\n    var mainIamApiKey = new Scaleway.IamApiKey(\"main\", new()\n    {\n        UserId = main.Id,\n        Description = \"a description\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewIamUser(ctx, \"main\", \u0026scaleway.IamUserArgs{\n\t\t\tEmail: pulumi.String(\"test@test.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewIamApiKey(ctx, \"main\", \u0026scaleway.IamApiKeyArgs{\n\t\t\tUserId:      main.ID(),\n\t\t\tDescription: pulumi.String(\"a description\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.IamUser;\nimport com.pulumi.scaleway.IamUserArgs;\nimport com.pulumi.scaleway.IamApiKey;\nimport com.pulumi.scaleway.IamApiKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new IamUser(\"main\", IamUserArgs.builder()\n            .email(\"test@test.com\")\n            .build());\n\n        var mainIamApiKey = new IamApiKey(\"mainIamApiKey\", IamApiKeyArgs.builder()\n            .userId(main.id())\n            .description(\"a description\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:IamUser\n    properties:\n      email: test@test.com\n  mainIamApiKey:\n    type: scaleway:IamApiKey\n    name: main\n    properties:\n      userId: ${main.id}\n      description: a description\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### With expiration\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\nimport * as time from \"@pulumi/time\";\n\nconst rotateAfterAYear = new time.index.Rotating(\"rotate_after_a_year\", {rotationYears: 1});\nconst main = new scaleway.IamApiKey(\"main\", {\n    applicationId: mainScalewayIamApplication.id,\n    expiresAt: rotateAfterAYear.rotationRfc3339,\n});\n```\n```python\nimport pulumi\nimport pulumi_time as time\nimport pulumiverse_scaleway as scaleway\n\nrotate_after_a_year = time.index.Rotating(\"rotate_after_a_year\", rotation_years=1)\nmain = scaleway.IamApiKey(\"main\",\n    application_id=main_scaleway_iam_application[\"id\"],\n    expires_at=rotate_after_a_year[\"rotationRfc3339\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\nusing Time = Pulumi.Time;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var rotateAfterAYear = new Time.Index.Rotating(\"rotate_after_a_year\", new()\n    {\n        RotationYears = 1,\n    });\n\n    var main = new Scaleway.IamApiKey(\"main\", new()\n    {\n        ApplicationId = mainScalewayIamApplication.Id,\n        ExpiresAt = rotateAfterAYear.RotationRfc3339,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-time/sdk/go/time\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trotateAfterAYear, err := time.NewRotating(ctx, \"rotate_after_a_year\", \u0026time.RotatingArgs{\n\t\t\tRotationYears: 1,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewIamApiKey(ctx, \"main\", \u0026scaleway.IamApiKeyArgs{\n\t\t\tApplicationId: pulumi.Any(mainScalewayIamApplication.Id),\n\t\t\tExpiresAt:     rotateAfterAYear.RotationRfc3339,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.time.rotating;\nimport com.pulumi.time.RotatingArgs;\nimport com.pulumi.scaleway.IamApiKey;\nimport com.pulumi.scaleway.IamApiKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var rotateAfterAYear = new Rotating(\"rotateAfterAYear\", RotatingArgs.builder()\n            .rotationYears(1)\n            .build());\n\n        var main = new IamApiKey(\"main\", IamApiKeyArgs.builder()\n            .applicationId(mainScalewayIamApplication.id())\n            .expiresAt(rotateAfterAYear.rotationRfc3339())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  rotateAfterAYear:\n    type: time:rotating\n    name: rotate_after_a_year\n    properties:\n      rotationYears: 1\n  main:\n    type: scaleway:IamApiKey\n    properties:\n      applicationId: ${mainScalewayIamApplication.id}\n      expiresAt: ${rotateAfterAYear.rotationRfc3339}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nApi keys can be imported using the `{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/iamApiKey:IamApiKey main 11111111111111111111\n```\n\n",
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The access key of the IAM API key.\n"
                },
                "applicationId": {
                    "type": "string",
                    "description": "ID of the application attached to the API key.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the IAM API key.\n"
                },
                "creationIp": {
                    "type": "string",
                    "description": "The IP Address of the device which created the API key.\n"
                },
                "defaultProjectId": {
                    "type": "string",
                    "description": "The default Project ID to use with Object Storage.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the API key.\n"
                },
                "editable": {
                    "type": "boolean",
                    "description": "Whether the IAM API key is editable.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The date and time of the expiration of the IAM API key. Please note that in case of any changes,\nthe resource will be recreated.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret Key of the IAM API key.\n",
                    "secret": true
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the IAM API key.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user attached to the API key.\n\u003e **Note** You must specify at least one: `application_id` and/or `user_id`.\n"
                }
            },
            "required": [
                "accessKey",
                "createdAt",
                "creationIp",
                "defaultProjectId",
                "editable",
                "secretKey",
                "updatedAt"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "ID of the application attached to the API key.\n",
                    "willReplaceOnChanges": true
                },
                "defaultProjectId": {
                    "type": "string",
                    "description": "The default Project ID to use with Object Storage.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the API key.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The date and time of the expiration of the IAM API key. Please note that in case of any changes,\nthe resource will be recreated.\n",
                    "willReplaceOnChanges": true
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user attached to the API key.\n\u003e **Note** You must specify at least one: `application_id` and/or `user_id`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamApiKey resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "The access key of the IAM API key.\n"
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "ID of the application attached to the API key.\n",
                        "willReplaceOnChanges": true
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the IAM API key.\n"
                    },
                    "creationIp": {
                        "type": "string",
                        "description": "The IP Address of the device which created the API key.\n"
                    },
                    "defaultProjectId": {
                        "type": "string",
                        "description": "The default Project ID to use with Object Storage.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the API key.\n"
                    },
                    "editable": {
                        "type": "boolean",
                        "description": "Whether the IAM API key is editable.\n"
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "The date and time of the expiration of the IAM API key. Please note that in case of any changes,\nthe resource will be recreated.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "The secret Key of the IAM API key.\n",
                        "secret": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the IAM API key.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "ID of the user attached to the API key.\n\u003e **Note** You must specify at least one: `application_id` and/or `user_id`.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iamApplication:IamApplication": {
            "description": "Creates and manages Scaleway IAM Applications. For more information refer to the [IAM API documentation](https://www.scaleway.com/en/developers/api/iam/#applications-83ce5e).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.IamApplication(\"main\", {\n    name: \"My application\",\n    description: \"a description\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.IamApplication(\"main\",\n    name=\"My application\",\n    description=\"a description\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.IamApplication(\"main\", new()\n    {\n        Name = \"My application\",\n        Description = \"a description\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewIamApplication(ctx, \"main\", \u0026scaleway.IamApplicationArgs{\n\t\t\tName:        pulumi.String(\"My application\"),\n\t\t\tDescription: pulumi.String(\"a description\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.IamApplication;\nimport com.pulumi.scaleway.IamApplicationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new IamApplication(\"main\", IamApplicationArgs.builder()\n            .name(\"My application\")\n            .description(\"a description\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:IamApplication\n    properties:\n      name: My application\n      description: a description\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nApplications can be imported using the `{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/iamApplication:IamApplication main 11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the application.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the iam application.\n"
                },
                "editable": {
                    "type": "boolean",
                    "description": "Whether the application is editable.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the iam application.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "`organization_id`) The ID of the organization the application is associated with.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the application.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the application.\n"
                }
            },
            "required": [
                "createdAt",
                "editable",
                "name",
                "organizationId",
                "updatedAt"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the iam application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the iam application.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "`organization_id`) The ID of the organization the application is associated with.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the application.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamApplication resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the application.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the iam application.\n"
                    },
                    "editable": {
                        "type": "boolean",
                        "description": "Whether the application is editable.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the iam application.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "`organization_id`) The ID of the organization the application is associated with.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the application.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the application.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iamGroup:IamGroup": {
            "description": "Creates and manages Scaleway IAM Groups.\nFor more information refer to the [IAM API documentation](https://www.scaleway.com/en/developers/api/iam/#groups-f592eb).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst basic = new scaleway.IamGroup(\"basic\", {\n    name: \"iam_group_basic\",\n    description: \"basic description\",\n    applicationIds: [],\n    userIds: [],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nbasic = scaleway.IamGroup(\"basic\",\n    name=\"iam_group_basic\",\n    description=\"basic description\",\n    application_ids=[],\n    user_ids=[])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var basic = new Scaleway.IamGroup(\"basic\", new()\n    {\n        Name = \"iam_group_basic\",\n        Description = \"basic description\",\n        ApplicationIds = new[] {},\n        UserIds = new[] {},\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewIamGroup(ctx, \"basic\", \u0026scaleway.IamGroupArgs{\n\t\t\tName:           pulumi.String(\"iam_group_basic\"),\n\t\t\tDescription:    pulumi.String(\"basic description\"),\n\t\t\tApplicationIds: pulumi.StringArray{},\n\t\t\tUserIds:        pulumi.StringArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.IamGroup;\nimport com.pulumi.scaleway.IamGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var basic = new IamGroup(\"basic\", IamGroupArgs.builder()\n            .name(\"iam_group_basic\")\n            .description(\"basic description\")\n            .applicationIds()\n            .userIds()\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  basic:\n    type: scaleway:IamGroup\n    properties:\n      name: iam_group_basic\n      description: basic description\n      applicationIds: []\n      userIds: []\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### With applications\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst app = new scaleway.IamApplication(\"app\", {});\nconst withApp = new scaleway.IamGroup(\"with_app\", {\n    name: \"iam_group_with_app\",\n    applicationIds: [app.id],\n    userIds: [],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\napp = scaleway.IamApplication(\"app\")\nwith_app = scaleway.IamGroup(\"with_app\",\n    name=\"iam_group_with_app\",\n    application_ids=[app.id],\n    user_ids=[])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var app = new Scaleway.IamApplication(\"app\");\n\n    var withApp = new Scaleway.IamGroup(\"with_app\", new()\n    {\n        Name = \"iam_group_with_app\",\n        ApplicationIds = new[]\n        {\n            app.Id,\n        },\n        UserIds = new[] {},\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tapp, err := scaleway.NewIamApplication(ctx, \"app\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewIamGroup(ctx, \"with_app\", \u0026scaleway.IamGroupArgs{\n\t\t\tName: pulumi.String(\"iam_group_with_app\"),\n\t\t\tApplicationIds: pulumi.StringArray{\n\t\t\t\tapp.ID(),\n\t\t\t},\n\t\t\tUserIds: pulumi.StringArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.IamApplication;\nimport com.pulumi.scaleway.IamGroup;\nimport com.pulumi.scaleway.IamGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var app = new IamApplication(\"app\");\n\n        var withApp = new IamGroup(\"withApp\", IamGroupArgs.builder()\n            .name(\"iam_group_with_app\")\n            .applicationIds(app.id())\n            .userIds()\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  app:\n    type: scaleway:IamApplication\n  withApp:\n    type: scaleway:IamGroup\n    name: with_app\n    properties:\n      name: iam_group_with_app\n      applicationIds:\n        - ${app.id}\n      userIds: []\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIAM groups can be imported using the `{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/iamGroup:IamGroup basic 11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "applicationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of IDs of the applications attached to the group.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the group\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the IAM group.\n"
                },
                "externalMembership": {
                    "type": "boolean",
                    "description": "Manage membership externally. This make the resource ignore user_ids and application_ids. Should be used when using iam_group_membership\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IAM group.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "`organization_id`) The ID of the organization the group is associated with.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the group.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the group\n"
                },
                "userIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of IDs of the users attached to the group.\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "organizationId",
                "updatedAt"
            ],
            "inputProperties": {
                "applicationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of IDs of the applications attached to the group.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the IAM group.\n"
                },
                "externalMembership": {
                    "type": "boolean",
                    "description": "Manage membership externally. This make the resource ignore user_ids and application_ids. Should be used when using iam_group_membership\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IAM group.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "`organization_id`) The ID of the organization the group is associated with.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the group.\n"
                },
                "userIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of IDs of the users attached to the group.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamGroup resources.\n",
                "properties": {
                    "applicationIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of IDs of the applications attached to the group.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the group\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the IAM group.\n"
                    },
                    "externalMembership": {
                        "type": "boolean",
                        "description": "Manage membership externally. This make the resource ignore user_ids and application_ids. Should be used when using iam_group_membership\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IAM group.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "`organization_id`) The ID of the organization the group is associated with.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the group.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the group\n"
                    },
                    "userIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of IDs of the users attached to the group.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iamGroupMembership:IamGroupMembership": {
            "description": "Add members to an IAM group.\nFor more information refer to the [IAM API documentation](https://www.scaleway.com/en/developers/api/iam/#groups-f592eb).\n\n## Example Usage\n\n### Application Membership\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst group = new scaleway.IamGroup(\"group\", {\n    name: \"my_group\",\n    externalMembership: true,\n});\nconst app = new scaleway.IamApplication(\"app\", {name: \"my_app\"});\nconst member = new scaleway.IamGroupMembership(\"member\", {\n    groupId: group.id,\n    applicationId: app.id,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\ngroup = scaleway.IamGroup(\"group\",\n    name=\"my_group\",\n    external_membership=True)\napp = scaleway.IamApplication(\"app\", name=\"my_app\")\nmember = scaleway.IamGroupMembership(\"member\",\n    group_id=group.id,\n    application_id=app.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @group = new Scaleway.IamGroup(\"group\", new()\n    {\n        Name = \"my_group\",\n        ExternalMembership = true,\n    });\n\n    var app = new Scaleway.IamApplication(\"app\", new()\n    {\n        Name = \"my_app\",\n    });\n\n    var member = new Scaleway.IamGroupMembership(\"member\", new()\n    {\n        GroupId = @group.Id,\n        ApplicationId = app.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tgroup, err := scaleway.NewIamGroup(ctx, \"group\", \u0026scaleway.IamGroupArgs{\n\t\t\tName:               pulumi.String(\"my_group\"),\n\t\t\tExternalMembership: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tapp, err := scaleway.NewIamApplication(ctx, \"app\", \u0026scaleway.IamApplicationArgs{\n\t\t\tName: pulumi.String(\"my_app\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewIamGroupMembership(ctx, \"member\", \u0026scaleway.IamGroupMembershipArgs{\n\t\t\tGroupId:       group.ID(),\n\t\t\tApplicationId: app.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.IamGroup;\nimport com.pulumi.scaleway.IamGroupArgs;\nimport com.pulumi.scaleway.IamApplication;\nimport com.pulumi.scaleway.IamApplicationArgs;\nimport com.pulumi.scaleway.IamGroupMembership;\nimport com.pulumi.scaleway.IamGroupMembershipArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var group = new IamGroup(\"group\", IamGroupArgs.builder()\n            .name(\"my_group\")\n            .externalMembership(true)\n            .build());\n\n        var app = new IamApplication(\"app\", IamApplicationArgs.builder()\n            .name(\"my_app\")\n            .build());\n\n        var member = new IamGroupMembership(\"member\", IamGroupMembershipArgs.builder()\n            .groupId(group.id())\n            .applicationId(app.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  group:\n    type: scaleway:IamGroup\n    properties:\n      name: my_group\n      externalMembership: true\n  app:\n    type: scaleway:IamApplication\n    properties:\n      name: my_app\n  member:\n    type: scaleway:IamGroupMembership\n    properties:\n      groupId: ${group.id}\n      applicationId: ${app.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIAM group memberships can be imported using two format:\n\n- For user: `{group_id}/user/{user_id}`\n\n- For application: `{group_id}/app/{application_id}`\n\nbash\n\n```sh\n$ pulumi import scaleway:index/iamGroupMembership:IamGroupMembership app 11111111-1111-1111-1111-111111111111/app/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "The ID of the application that will be added to the group.\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "ID of the group to add members to.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user that will be added to the group\n\n\u003e **Note** You must specify at least one: `application_id` and/or `user_id`.\n"
                }
            },
            "required": [
                "groupId"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "The ID of the application that will be added to the group.\n",
                    "willReplaceOnChanges": true
                },
                "groupId": {
                    "type": "string",
                    "description": "ID of the group to add members to.\n",
                    "willReplaceOnChanges": true
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user that will be added to the group\n\n\u003e **Note** You must specify at least one: `application_id` and/or `user_id`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "groupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamGroupMembership resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The ID of the application that will be added to the group.\n",
                        "willReplaceOnChanges": true
                    },
                    "groupId": {
                        "type": "string",
                        "description": "ID of the group to add members to.\n",
                        "willReplaceOnChanges": true
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of the user that will be added to the group\n\n\u003e **Note** You must specify at least one: `application_id` and/or `user_id`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iamPolicy:IamPolicy": {
            "description": "Creates and manages Scaleway IAM Policies. For more information refer to the [IAM API documentation](https://www.scaleway.com/en/developers/api/iam/#path-policies-create-a-new-policy).\n\n\u003e You can find a detailed list of all permission sets available at Scaleway in the permission sets [reference page](https://www.scaleway.com/en/docs/identity-and-access-management/iam/reference-content/permission-sets/).\n\n## Example Usage\n\n### Create a policy for an organization's project\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst default = scaleway.getAccountProject({\n    name: \"default\",\n});\nconst app = new scaleway.IamApplication(\"app\", {name: \"my app\"});\nconst objectReadOnly = new scaleway.IamPolicy(\"object_read_only\", {\n    name: \"my policy\",\n    description: \"gives app readonly access to object storage in project\",\n    applicationId: app.id,\n    rules: [{\n        projectIds: [_default.then(_default =\u003e _default.id)],\n        permissionSetNames: [\"ObjectStorageReadOnly\"],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\ndefault = scaleway.get_account_project(name=\"default\")\napp = scaleway.IamApplication(\"app\", name=\"my app\")\nobject_read_only = scaleway.IamPolicy(\"object_read_only\",\n    name=\"my policy\",\n    description=\"gives app readonly access to object storage in project\",\n    application_id=app.id,\n    rules=[{\n        \"project_ids\": [default.id],\n        \"permission_set_names\": [\"ObjectStorageReadOnly\"],\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Scaleway.GetAccountProject.Invoke(new()\n    {\n        Name = \"default\",\n    });\n\n    var app = new Scaleway.IamApplication(\"app\", new()\n    {\n        Name = \"my app\",\n    });\n\n    var objectReadOnly = new Scaleway.IamPolicy(\"object_read_only\", new()\n    {\n        Name = \"my policy\",\n        Description = \"gives app readonly access to object storage in project\",\n        ApplicationId = app.Id,\n        Rules = new[]\n        {\n            new Scaleway.Inputs.IamPolicyRuleArgs\n            {\n                ProjectIds = new[]\n                {\n                    @default.Apply(@default =\u003e @default.Apply(getAccountProjectResult =\u003e getAccountProjectResult.Id)),\n                },\n                PermissionSetNames = new[]\n                {\n                    \"ObjectStorageReadOnly\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := scaleway.LookupAccountProject(ctx, \u0026scaleway.LookupAccountProjectArgs{\n\t\t\tName: pulumi.StringRef(\"default\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tapp, err := scaleway.NewIamApplication(ctx, \"app\", \u0026scaleway.IamApplicationArgs{\n\t\t\tName: pulumi.String(\"my app\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewIamPolicy(ctx, \"object_read_only\", \u0026scaleway.IamPolicyArgs{\n\t\t\tName:          pulumi.String(\"my policy\"),\n\t\t\tDescription:   pulumi.String(\"gives app readonly access to object storage in project\"),\n\t\t\tApplicationId: app.ID(),\n\t\t\tRules: scaleway.IamPolicyRuleArray{\n\t\t\t\t\u0026scaleway.IamPolicyRuleArgs{\n\t\t\t\t\tProjectIds: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(_default.Id),\n\t\t\t\t\t},\n\t\t\t\t\tPermissionSetNames: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"ObjectStorageReadOnly\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetAccountProjectArgs;\nimport com.pulumi.scaleway.IamApplication;\nimport com.pulumi.scaleway.IamApplicationArgs;\nimport com.pulumi.scaleway.IamPolicy;\nimport com.pulumi.scaleway.IamPolicyArgs;\nimport com.pulumi.scaleway.inputs.IamPolicyRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ScalewayFunctions.getAccountProject(GetAccountProjectArgs.builder()\n            .name(\"default\")\n            .build());\n\n        var app = new IamApplication(\"app\", IamApplicationArgs.builder()\n            .name(\"my app\")\n            .build());\n\n        var objectReadOnly = new IamPolicy(\"objectReadOnly\", IamPolicyArgs.builder()\n            .name(\"my policy\")\n            .description(\"gives app readonly access to object storage in project\")\n            .applicationId(app.id())\n            .rules(IamPolicyRuleArgs.builder()\n                .projectIds(default_.id())\n                .permissionSetNames(\"ObjectStorageReadOnly\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  app:\n    type: scaleway:IamApplication\n    properties:\n      name: my app\n  objectReadOnly:\n    type: scaleway:IamPolicy\n    name: object_read_only\n    properties:\n      name: my policy\n      description: gives app readonly access to object storage in project\n      applicationId: ${app.id}\n      rules:\n        - projectIds:\n            - ${default.id}\n          permissionSetNames:\n            - ObjectStorageReadOnly\nvariables:\n  default:\n    fn::invoke:\n      Function: scaleway:getAccountProject\n      Arguments:\n        name: default\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create a policy for all current and future projects in an organization\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst app = new scaleway.IamApplication(\"app\", {name: \"my app\"});\nconst objectReadOnly = new scaleway.IamPolicy(\"object_read_only\", {\n    name: \"my policy\",\n    description: \"gives app readonly access to object storage in project\",\n    applicationId: app.id,\n    rules: [{\n        organizationId: app.organizationId,\n        permissionSetNames: [\"ObjectStorageReadOnly\"],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\napp = scaleway.IamApplication(\"app\", name=\"my app\")\nobject_read_only = scaleway.IamPolicy(\"object_read_only\",\n    name=\"my policy\",\n    description=\"gives app readonly access to object storage in project\",\n    application_id=app.id,\n    rules=[{\n        \"organization_id\": app.organization_id,\n        \"permission_set_names\": [\"ObjectStorageReadOnly\"],\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var app = new Scaleway.IamApplication(\"app\", new()\n    {\n        Name = \"my app\",\n    });\n\n    var objectReadOnly = new Scaleway.IamPolicy(\"object_read_only\", new()\n    {\n        Name = \"my policy\",\n        Description = \"gives app readonly access to object storage in project\",\n        ApplicationId = app.Id,\n        Rules = new[]\n        {\n            new Scaleway.Inputs.IamPolicyRuleArgs\n            {\n                OrganizationId = app.OrganizationId,\n                PermissionSetNames = new[]\n                {\n                    \"ObjectStorageReadOnly\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tapp, err := scaleway.NewIamApplication(ctx, \"app\", \u0026scaleway.IamApplicationArgs{\n\t\t\tName: pulumi.String(\"my app\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewIamPolicy(ctx, \"object_read_only\", \u0026scaleway.IamPolicyArgs{\n\t\t\tName:          pulumi.String(\"my policy\"),\n\t\t\tDescription:   pulumi.String(\"gives app readonly access to object storage in project\"),\n\t\t\tApplicationId: app.ID(),\n\t\t\tRules: scaleway.IamPolicyRuleArray{\n\t\t\t\t\u0026scaleway.IamPolicyRuleArgs{\n\t\t\t\t\tOrganizationId: app.OrganizationId,\n\t\t\t\t\tPermissionSetNames: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"ObjectStorageReadOnly\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.IamApplication;\nimport com.pulumi.scaleway.IamApplicationArgs;\nimport com.pulumi.scaleway.IamPolicy;\nimport com.pulumi.scaleway.IamPolicyArgs;\nimport com.pulumi.scaleway.inputs.IamPolicyRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var app = new IamApplication(\"app\", IamApplicationArgs.builder()\n            .name(\"my app\")\n            .build());\n\n        var objectReadOnly = new IamPolicy(\"objectReadOnly\", IamPolicyArgs.builder()\n            .name(\"my policy\")\n            .description(\"gives app readonly access to object storage in project\")\n            .applicationId(app.id())\n            .rules(IamPolicyRuleArgs.builder()\n                .organizationId(app.organizationId())\n                .permissionSetNames(\"ObjectStorageReadOnly\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  app:\n    type: scaleway:IamApplication\n    properties:\n      name: my app\n  objectReadOnly:\n    type: scaleway:IamPolicy\n    name: object_read_only\n    properties:\n      name: my policy\n      description: gives app readonly access to object storage in project\n      applicationId: ${app.id}\n      rules:\n        - organizationId: ${app.organizationId}\n          permissionSetNames:\n            - ObjectStorageReadOnly\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create a policy with a particular condition\n\nIAM policy rule can use a condition to be applied.\nThe following variables are available:\n\n- `request.ip`\n- `request.user_agent`\n- `request.time`\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.IamPolicy(\"main\", {\n    name: \"tf_tests_policy_condition\",\n    noPrincipal: true,\n    rules: [{\n        organizationId: \"%s\",\n        permissionSetNames: [\"AllProductsFullAccess\"],\n        condition: \"request.user_agent == 'My User Agent'\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.IamPolicy(\"main\",\n    name=\"tf_tests_policy_condition\",\n    no_principal=True,\n    rules=[{\n        \"organization_id\": \"%s\",\n        \"permission_set_names\": [\"AllProductsFullAccess\"],\n        \"condition\": \"request.user_agent == 'My User Agent'\",\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.IamPolicy(\"main\", new()\n    {\n        Name = \"tf_tests_policy_condition\",\n        NoPrincipal = true,\n        Rules = new[]\n        {\n            new Scaleway.Inputs.IamPolicyRuleArgs\n            {\n                OrganizationId = \"%s\",\n                PermissionSetNames = new[]\n                {\n                    \"AllProductsFullAccess\",\n                },\n                Condition = \"request.user_agent == 'My User Agent'\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewIamPolicy(ctx, \"main\", \u0026scaleway.IamPolicyArgs{\n\t\t\tName:        pulumi.String(\"tf_tests_policy_condition\"),\n\t\t\tNoPrincipal: pulumi.Bool(true),\n\t\t\tRules: scaleway.IamPolicyRuleArray{\n\t\t\t\t\u0026scaleway.IamPolicyRuleArgs{\n\t\t\t\t\tOrganizationId: pulumi.String(\"%s\"),\n\t\t\t\t\tPermissionSetNames: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"AllProductsFullAccess\"),\n\t\t\t\t\t},\n\t\t\t\t\tCondition: pulumi.String(\"request.user_agent == 'My User Agent'\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.IamPolicy;\nimport com.pulumi.scaleway.IamPolicyArgs;\nimport com.pulumi.scaleway.inputs.IamPolicyRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new IamPolicy(\"main\", IamPolicyArgs.builder()\n            .name(\"tf_tests_policy_condition\")\n            .noPrincipal(true)\n            .rules(IamPolicyRuleArgs.builder()\n                .organizationId(\"%s\")\n                .permissionSetNames(\"AllProductsFullAccess\")\n                .condition(\"request.user_agent == 'My User Agent'\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:IamPolicy\n    properties:\n      name: tf_tests_policy_condition\n      noPrincipal: true\n      rules:\n        - organizationId: '%s'\n          permissionSetNames:\n            - AllProductsFullAccess\n          condition: request.user_agent == 'My User Agent'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nPolicies can be imported using the `{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/iamPolicy:IamPolicy main 11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "ID of the application the policy will be linked to\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the policy.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the IAM policy.\n"
                },
                "editable": {
                    "type": "boolean",
                    "description": "Whether the policy is editable.\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "ID of the group the policy will be linked to\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IAM policy.\n"
                },
                "noPrincipal": {
                    "type": "boolean",
                    "description": "If the policy doesn't apply to a principal.\n\n\u003e **Important** Only one of `user_id`, `group_id`, `application_id` and `no_principal` may be set.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "`organization_id`) The ID of the organization the policy is associated with.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/IamPolicyRule:IamPolicyRule"
                    },
                    "description": "List of rules in the policy.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the IAM policy.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the policy.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user the policy will be linked to\n"
                }
            },
            "required": [
                "createdAt",
                "editable",
                "name",
                "organizationId",
                "rules",
                "updatedAt"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "ID of the application the policy will be linked to\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the IAM policy.\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "ID of the group the policy will be linked to\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IAM policy.\n"
                },
                "noPrincipal": {
                    "type": "boolean",
                    "description": "If the policy doesn't apply to a principal.\n\n\u003e **Important** Only one of `user_id`, `group_id`, `application_id` and `no_principal` may be set.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "`organization_id`) The ID of the organization the policy is associated with.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/IamPolicyRule:IamPolicyRule"
                    },
                    "description": "List of rules in the policy.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the IAM policy.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user the policy will be linked to\n"
                }
            },
            "requiredInputs": [
                "rules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamPolicy resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "ID of the application the policy will be linked to\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the policy.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the IAM policy.\n"
                    },
                    "editable": {
                        "type": "boolean",
                        "description": "Whether the policy is editable.\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "ID of the group the policy will be linked to\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IAM policy.\n"
                    },
                    "noPrincipal": {
                        "type": "boolean",
                        "description": "If the policy doesn't apply to a principal.\n\n\u003e **Important** Only one of `user_id`, `group_id`, `application_id` and `no_principal` may be set.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "`organization_id`) The ID of the organization the policy is associated with.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/IamPolicyRule:IamPolicyRule"
                        },
                        "description": "List of rules in the policy.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the IAM policy.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the policy.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "ID of the user the policy will be linked to\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iamSshKey:IamSshKey": {
            "description": "Creates and manages Scaleway IAM SSH Keys.\nFor more information refer to the [IAM API documentation](https://www.scaleway.com/en/developers/api/iam/#ssh-keys-d8ccd4).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.IamSshKey(\"main\", {\n    name: \"main\",\n    publicKey: \"\u003cYOUR-PUBLIC-SSH-KEY\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.IamSshKey(\"main\",\n    name=\"main\",\n    public_key=\"\u003cYOUR-PUBLIC-SSH-KEY\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.IamSshKey(\"main\", new()\n    {\n        Name = \"main\",\n        PublicKey = \"\u003cYOUR-PUBLIC-SSH-KEY\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewIamSshKey(ctx, \"main\", \u0026scaleway.IamSshKeyArgs{\n\t\t\tName:      pulumi.String(\"main\"),\n\t\t\tPublicKey: pulumi.String(\"\u003cYOUR-PUBLIC-SSH-KEY\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.IamSshKey;\nimport com.pulumi.scaleway.IamSshKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new IamSshKey(\"main\", IamSshKeyArgs.builder()\n            .name(\"main\")\n            .publicKey(\"\u003cYOUR-PUBLIC-SSH-KEY\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:IamSshKey\n    properties:\n      name: main\n      publicKey: \u003cYOUR-PUBLIC-SSH-KEY\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nSSH keys can be imported using the `id`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/iamSshKey:IamSshKey main 11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the SSH key.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "The SSH key status.\n"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "The fingerprint of the iam SSH key.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The ID of the organization the SSH key is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the SSH key is\nassociated with.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public SSH key to be added.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the SSH key.\n"
                }
            },
            "required": [
                "createdAt",
                "fingerprint",
                "name",
                "organizationId",
                "projectId",
                "publicKey",
                "updatedAt"
            ],
            "inputProperties": {
                "disabled": {
                    "type": "boolean",
                    "description": "The SSH key status.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SSH key.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the SSH key is\nassociated with.\n",
                    "willReplaceOnChanges": true
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public SSH key to be added.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "publicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamSshKey resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the SSH key.\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "The SSH key status.\n"
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "The fingerprint of the iam SSH key.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSH key.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization the SSH key is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the SSH key is\nassociated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The public SSH key to be added.\n",
                        "willReplaceOnChanges": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the SSH key.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iamUser:IamUser": {
            "description": "Creates and manages Scaleway IAM Users.\nFor more information, see [the documentation](https://www.scaleway.com/en/developers/api/iam/#path-users-list-users-of-an-organization).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst basic = new scaleway.IamUser(\"basic\", {email: \"test@test.com\"});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nbasic = scaleway.IamUser(\"basic\", email=\"test@test.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var basic = new Scaleway.IamUser(\"basic\", new()\n    {\n        Email = \"test@test.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewIamUser(ctx, \"basic\", \u0026scaleway.IamUserArgs{\n\t\t\tEmail: pulumi.String(\"test@test.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.IamUser;\nimport com.pulumi.scaleway.IamUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var basic = new IamUser(\"basic\", IamUserArgs.builder()\n            .email(\"test@test.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  basic:\n    type: scaleway:IamUser\n    properties:\n      email: test@test.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIAM users can be imported using the `{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/iamUser:IamUser basic 11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "accountRootUserId": {
                    "type": "string",
                    "description": "The ID of the account root user associated with the user.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the IAM user.\n"
                },
                "deletable": {
                    "type": "boolean",
                    "description": "Whether the IAM user is deletable.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email of the IAM user.\n"
                },
                "lastLoginAt": {
                    "type": "string",
                    "description": "The date of the last login.\n"
                },
                "mfa": {
                    "type": "boolean",
                    "description": "Whether the MFA is enabled.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "`organization_id`) The ID of the organization the user is associated with.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of user invitation. Check the possible values in the [API doc](https://www.scaleway.com/en/developers/api/iam/#path-users-get-a-given-user).\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of user. Check the possible values in the [API doc](https://www.scaleway.com/en/developers/api/iam/#path-users-get-a-given-user).\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the IAM user.\n"
                }
            },
            "required": [
                "accountRootUserId",
                "createdAt",
                "deletable",
                "email",
                "lastLoginAt",
                "mfa",
                "organizationId",
                "status",
                "type",
                "updatedAt"
            ],
            "inputProperties": {
                "email": {
                    "type": "string",
                    "description": "The email of the IAM user.\n",
                    "willReplaceOnChanges": true
                },
                "organizationId": {
                    "type": "string",
                    "description": "`organization_id`) The ID of the organization the user is associated with.\n"
                }
            },
            "requiredInputs": [
                "email"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamUser resources.\n",
                "properties": {
                    "accountRootUserId": {
                        "type": "string",
                        "description": "The ID of the account root user associated with the user.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the IAM user.\n"
                    },
                    "deletable": {
                        "type": "boolean",
                        "description": "Whether the IAM user is deletable.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email of the IAM user.\n",
                        "willReplaceOnChanges": true
                    },
                    "lastLoginAt": {
                        "type": "string",
                        "description": "The date of the last login.\n"
                    },
                    "mfa": {
                        "type": "boolean",
                        "description": "Whether the MFA is enabled.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "`organization_id`) The ID of the organization the user is associated with.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of user invitation. Check the possible values in the [API doc](https://www.scaleway.com/en/developers/api/iam/#path-users-get-a-given-user).\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of user. Check the possible values in the [API doc](https://www.scaleway.com/en/developers/api/iam/#path-users-get-a-given-user).\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the IAM user.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceImage:InstanceImage": {
            "description": "Creates and manages Scaleway Compute Images.\nFor more information, see [the documentation](https://www.scaleway.com/en/developers/api/instance/#path-images-list-instance-images).\n\n## Example Usage\n\n### From a volume\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst volume = new scaleway.InstanceVolume(\"volume\", {\n    type: \"b_ssd\",\n    sizeInGb: 20,\n});\nconst volumeSnapshot = new scaleway.InstanceSnapshot(\"volume_snapshot\", {volumeId: volume.id});\nconst volumeImage = new scaleway.InstanceImage(\"volume_image\", {\n    name: \"image_from_volume\",\n    rootVolumeId: volumeSnapshot.id,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nvolume = scaleway.InstanceVolume(\"volume\",\n    type=\"b_ssd\",\n    size_in_gb=20)\nvolume_snapshot = scaleway.InstanceSnapshot(\"volume_snapshot\", volume_id=volume.id)\nvolume_image = scaleway.InstanceImage(\"volume_image\",\n    name=\"image_from_volume\",\n    root_volume_id=volume_snapshot.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var volume = new Scaleway.InstanceVolume(\"volume\", new()\n    {\n        Type = \"b_ssd\",\n        SizeInGb = 20,\n    });\n\n    var volumeSnapshot = new Scaleway.InstanceSnapshot(\"volume_snapshot\", new()\n    {\n        VolumeId = volume.Id,\n    });\n\n    var volumeImage = new Scaleway.InstanceImage(\"volume_image\", new()\n    {\n        Name = \"image_from_volume\",\n        RootVolumeId = volumeSnapshot.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tvolume, err := scaleway.NewInstanceVolume(ctx, \"volume\", \u0026scaleway.InstanceVolumeArgs{\n\t\t\tType:     pulumi.String(\"b_ssd\"),\n\t\t\tSizeInGb: pulumi.Int(20),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvolumeSnapshot, err := scaleway.NewInstanceSnapshot(ctx, \"volume_snapshot\", \u0026scaleway.InstanceSnapshotArgs{\n\t\t\tVolumeId: volume.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceImage(ctx, \"volume_image\", \u0026scaleway.InstanceImageArgs{\n\t\t\tName:         pulumi.String(\"image_from_volume\"),\n\t\t\tRootVolumeId: volumeSnapshot.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceVolume;\nimport com.pulumi.scaleway.InstanceVolumeArgs;\nimport com.pulumi.scaleway.InstanceSnapshot;\nimport com.pulumi.scaleway.InstanceSnapshotArgs;\nimport com.pulumi.scaleway.InstanceImage;\nimport com.pulumi.scaleway.InstanceImageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var volume = new InstanceVolume(\"volume\", InstanceVolumeArgs.builder()\n            .type(\"b_ssd\")\n            .sizeInGb(20)\n            .build());\n\n        var volumeSnapshot = new InstanceSnapshot(\"volumeSnapshot\", InstanceSnapshotArgs.builder()\n            .volumeId(volume.id())\n            .build());\n\n        var volumeImage = new InstanceImage(\"volumeImage\", InstanceImageArgs.builder()\n            .name(\"image_from_volume\")\n            .rootVolumeId(volumeSnapshot.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  volume:\n    type: scaleway:InstanceVolume\n    properties:\n      type: b_ssd\n      sizeInGb: 20\n  volumeSnapshot:\n    type: scaleway:InstanceSnapshot\n    name: volume_snapshot\n    properties:\n      volumeId: ${volume.id}\n  volumeImage:\n    type: scaleway:InstanceImage\n    name: volume_image\n    properties:\n      name: image_from_volume\n      rootVolumeId: ${volumeSnapshot.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### From a server\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst server = new scaleway.InstanceServer(\"server\", {\n    image: \"ubuntu_jammy\",\n    type: \"DEV1-S\",\n});\nconst serverSnapshot = new scaleway.InstanceSnapshot(\"server_snapshot\", {volumeId: main.rootVolume[0].volumeId});\nconst serverImage = new scaleway.InstanceImage(\"server_image\", {\n    name: \"image_from_server\",\n    rootVolumeId: serverSnapshot.id,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nserver = scaleway.InstanceServer(\"server\",\n    image=\"ubuntu_jammy\",\n    type=\"DEV1-S\")\nserver_snapshot = scaleway.InstanceSnapshot(\"server_snapshot\", volume_id=main[\"rootVolume\"][0][\"volumeId\"])\nserver_image = scaleway.InstanceImage(\"server_image\",\n    name=\"image_from_server\",\n    root_volume_id=server_snapshot.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var server = new Scaleway.InstanceServer(\"server\", new()\n    {\n        Image = \"ubuntu_jammy\",\n        Type = \"DEV1-S\",\n    });\n\n    var serverSnapshot = new Scaleway.InstanceSnapshot(\"server_snapshot\", new()\n    {\n        VolumeId = main.RootVolume[0].VolumeId,\n    });\n\n    var serverImage = new Scaleway.InstanceImage(\"server_image\", new()\n    {\n        Name = \"image_from_server\",\n        RootVolumeId = serverSnapshot.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstanceServer(ctx, \"server\", \u0026scaleway.InstanceServerArgs{\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tserverSnapshot, err := scaleway.NewInstanceSnapshot(ctx, \"server_snapshot\", \u0026scaleway.InstanceSnapshotArgs{\n\t\t\tVolumeId: pulumi.Any(main.RootVolume[0].VolumeId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceImage(ctx, \"server_image\", \u0026scaleway.InstanceImageArgs{\n\t\t\tName:         pulumi.String(\"image_from_server\"),\n\t\t\tRootVolumeId: serverSnapshot.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.InstanceSnapshot;\nimport com.pulumi.scaleway.InstanceSnapshotArgs;\nimport com.pulumi.scaleway.InstanceImage;\nimport com.pulumi.scaleway.InstanceImageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var server = new InstanceServer(\"server\", InstanceServerArgs.builder()\n            .image(\"ubuntu_jammy\")\n            .type(\"DEV1-S\")\n            .build());\n\n        var serverSnapshot = new InstanceSnapshot(\"serverSnapshot\", InstanceSnapshotArgs.builder()\n            .volumeId(main.rootVolume()[0].volumeId())\n            .build());\n\n        var serverImage = new InstanceImage(\"serverImage\", InstanceImageArgs.builder()\n            .name(\"image_from_server\")\n            .rootVolumeId(serverSnapshot.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  server:\n    type: scaleway:InstanceServer\n    properties:\n      image: ubuntu_jammy\n      type: DEV1-S\n  serverSnapshot:\n    type: scaleway:InstanceSnapshot\n    name: server_snapshot\n    properties:\n      volumeId: ${main.rootVolume[0].volumeId}\n  serverImage:\n    type: scaleway:InstanceImage\n    name: server_image\n    properties:\n      name: image_from_server\n      rootVolumeId: ${serverSnapshot.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### With additional volumes\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  server:\n    type: scaleway:InstanceServer\n    properties:\n      image: ubuntu_jammy\n      type: DEV1-S\n  volume:\n    type: scaleway:InstanceVolume\n    properties:\n      type: b_ssd\n      sizeInGb: 20\n  volumeSnapshot:\n    type: scaleway:InstanceSnapshot\n    name: volume_snapshot\n    properties:\n      volumeId: ${volume.id}\n  serverSnapshot:\n    type: scaleway:InstanceSnapshot\n    name: server_snapshot\n    properties:\n      volumeId: ${main.rootVolume[0].volumeId}\n  image:\n    type: scaleway:InstanceImage\n    properties:\n      name: image_with_extra_volumes\n      rootVolumeId: ${serverSnapshot.id}\n      additionalVolumes:\n        - ${volumeSnapshot.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImages can be imported using the `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/instanceImage:InstanceImage main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "additionalVolumeIds": {
                    "type": "string",
                    "description": "List of IDs of the snapshots of the additional volumes to be attached to the image.\n\n\u003e **Important:** For now it is only possible to have 1 additional_volume.\n"
                },
                "additionalVolumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceImageAdditionalVolume:InstanceImageAdditionalVolume"
                    },
                    "description": "The description of the extra volumes attached to the image.\n"
                },
                "architecture": {
                    "type": "string",
                    "description": "The architecture the image is compatible with. Possible values are: `x86_64` or `arm`.\n"
                },
                "creationDate": {
                    "type": "string",
                    "description": "Date of the volume creation.\n"
                },
                "fromServerId": {
                    "type": "string",
                    "description": "ID of the server the image is based on (in case it is a backup).\n"
                },
                "modificationDate": {
                    "type": "string",
                    "description": "Date of volume latest update.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the image. If not provided it will be randomly generated.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the image is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project the image is associated with.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Set to `true` if the image is public.\n"
                },
                "rootVolumeId": {
                    "type": "string",
                    "description": "The ID of the snapshot of the volume to be used as root in the image.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the volume.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the image.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone in which the image should be created.\n"
                }
            },
            "required": [
                "additionalVolumes",
                "creationDate",
                "fromServerId",
                "modificationDate",
                "name",
                "organizationId",
                "projectId",
                "rootVolumeId",
                "state",
                "zone"
            ],
            "inputProperties": {
                "additionalVolumeIds": {
                    "type": "string",
                    "description": "List of IDs of the snapshots of the additional volumes to be attached to the image.\n\n\u003e **Important:** For now it is only possible to have 1 additional_volume.\n"
                },
                "architecture": {
                    "type": "string",
                    "description": "The architecture the image is compatible with. Possible values are: `x86_64` or `arm`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the image. If not provided it will be randomly generated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project the image is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "public": {
                    "type": "boolean",
                    "description": "Set to `true` if the image is public.\n"
                },
                "rootVolumeId": {
                    "type": "string",
                    "description": "The ID of the snapshot of the volume to be used as root in the image.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the image.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone in which the image should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "rootVolumeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceImage resources.\n",
                "properties": {
                    "additionalVolumeIds": {
                        "type": "string",
                        "description": "List of IDs of the snapshots of the additional volumes to be attached to the image.\n\n\u003e **Important:** For now it is only possible to have 1 additional_volume.\n"
                    },
                    "additionalVolumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/InstanceImageAdditionalVolume:InstanceImageAdditionalVolume"
                        },
                        "description": "The description of the extra volumes attached to the image.\n"
                    },
                    "architecture": {
                        "type": "string",
                        "description": "The architecture the image is compatible with. Possible values are: `x86_64` or `arm`.\n"
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Date of the volume creation.\n"
                    },
                    "fromServerId": {
                        "type": "string",
                        "description": "ID of the server the image is based on (in case it is a backup).\n"
                    },
                    "modificationDate": {
                        "type": "string",
                        "description": "Date of volume latest update.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the image. If not provided it will be randomly generated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the image is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the image is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Set to `true` if the image is public.\n"
                    },
                    "rootVolumeId": {
                        "type": "string",
                        "description": "The ID of the snapshot of the volume to be used as root in the image.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the volume.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags to apply to the image.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone in which the image should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceIp:InstanceIp": {
            "description": "Creates and manages Scaleway compute Instance IPs. For more information, see [the documentation](https://www.scaleway.com/en/developers/api/instance/#path-ips-list-all-flexible-ips).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst serverIp = new scaleway.InstanceIp(\"server_ip\", {});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nserver_ip = scaleway.InstanceIp(\"server_ip\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var serverIp = new Scaleway.InstanceIp(\"server_ip\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstanceIp(ctx, \"server_ip\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceIp;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var serverIp = new InstanceIp(\"serverIp\");\n\n    }\n}\n```\n```yaml\nresources:\n  serverIp:\n    type: scaleway:InstanceIp\n    name: server_ip\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIPs can be imported using the `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/instanceIp:InstanceIp server_ip fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IP address.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the IP is associated with.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "The IP Prefix.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the IP is associated with.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse dns attached to this IP\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The server associated with this IP\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the IP.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the IP (`nat`, `routed_ipv4`, `routed_ipv6`), more information in [the documentation](https://www.scaleway.com/en/docs/compute/instances/api-cli/using-routed-ips/)\n\n\u003e **Important:** An IP can migrate from `nat` to `routed_ipv4` but cannot be converted back\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n"
                }
            },
            "required": [
                "address",
                "organizationId",
                "prefix",
                "projectId",
                "reverse",
                "serverId",
                "type",
                "zone"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the IP is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the IP.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the IP (`nat`, `routed_ipv4`, `routed_ipv6`), more information in [the documentation](https://www.scaleway.com/en/docs/compute/instances/api-cli/using-routed-ips/)\n\n\u003e **Important:** An IP can migrate from `nat` to `routed_ipv4` but cannot be converted back\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceIp resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP address.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the IP is associated with.\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The IP Prefix.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the IP is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse dns attached to this IP\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The server associated with this IP\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the IP.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the IP (`nat`, `routed_ipv4`, `routed_ipv6`), more information in [the documentation](https://www.scaleway.com/en/docs/compute/instances/api-cli/using-routed-ips/)\n\n\u003e **Important:** An IP can migrate from `nat` to `routed_ipv4` but cannot be converted back\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the IP should be reserved.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceIpReverseDns:InstanceIpReverseDns": {
            "description": "Manages Scaleway compute Instance IPs Reverse DNS.\n\nPlease check our [guide](https://www.scaleway.com/en/docs/compute/instances/how-to/configure-reverse-dns/) for more details\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst serverIp = new scaleway.InstanceIp(\"server_ip\", {});\nconst tfA = new scaleway.DomainRecord(\"tf_A\", {\n    dnsZone: \"scaleway.com\",\n    name: \"www\",\n    type: \"A\",\n    data: serverIp.address,\n    ttl: 3600,\n    priority: 1,\n});\nconst reverse = new scaleway.InstanceIpReverseDns(\"reverse\", {\n    ipId: serverIp.id,\n    reverse: \"www.scaleway.com\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nserver_ip = scaleway.InstanceIp(\"server_ip\")\ntf_a = scaleway.DomainRecord(\"tf_A\",\n    dns_zone=\"scaleway.com\",\n    name=\"www\",\n    type=\"A\",\n    data=server_ip.address,\n    ttl=3600,\n    priority=1)\nreverse = scaleway.InstanceIpReverseDns(\"reverse\",\n    ip_id=server_ip.id,\n    reverse=\"www.scaleway.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var serverIp = new Scaleway.InstanceIp(\"server_ip\");\n\n    var tfA = new Scaleway.DomainRecord(\"tf_A\", new()\n    {\n        DnsZone = \"scaleway.com\",\n        Name = \"www\",\n        Type = \"A\",\n        Data = serverIp.Address,\n        Ttl = 3600,\n        Priority = 1,\n    });\n\n    var reverse = new Scaleway.InstanceIpReverseDns(\"reverse\", new()\n    {\n        IpId = serverIp.Id,\n        Reverse = \"www.scaleway.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tserverIp, err := scaleway.NewInstanceIp(ctx, \"server_ip\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"tf_A\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone:  pulumi.String(\"scaleway.com\"),\n\t\t\tName:     pulumi.String(\"www\"),\n\t\t\tType:     pulumi.String(\"A\"),\n\t\t\tData:     serverIp.Address,\n\t\t\tTtl:      pulumi.Int(3600),\n\t\t\tPriority: pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceIpReverseDns(ctx, \"reverse\", \u0026scaleway.InstanceIpReverseDnsArgs{\n\t\t\tIpId:    serverIp.ID(),\n\t\t\tReverse: pulumi.String(\"www.scaleway.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceIp;\nimport com.pulumi.scaleway.DomainRecord;\nimport com.pulumi.scaleway.DomainRecordArgs;\nimport com.pulumi.scaleway.InstanceIpReverseDns;\nimport com.pulumi.scaleway.InstanceIpReverseDnsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var serverIp = new InstanceIp(\"serverIp\");\n\n        var tfA = new DomainRecord(\"tfA\", DomainRecordArgs.builder()\n            .dnsZone(\"scaleway.com\")\n            .name(\"www\")\n            .type(\"A\")\n            .data(serverIp.address())\n            .ttl(3600)\n            .priority(1)\n            .build());\n\n        var reverse = new InstanceIpReverseDns(\"reverse\", InstanceIpReverseDnsArgs.builder()\n            .ipId(serverIp.id())\n            .reverse(\"www.scaleway.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  serverIp:\n    type: scaleway:InstanceIp\n    name: server_ip\n  tfA:\n    type: scaleway:DomainRecord\n    name: tf_A\n    properties:\n      dnsZone: scaleway.com\n      name: www\n      type: A\n      data: ${serverIp.address}\n      ttl: 3600\n      priority: 1\n  reverse:\n    type: scaleway:InstanceIpReverseDns\n    properties:\n      ipId: ${serverIp.id}\n      reverse: www.scaleway.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIPs reverse DNS can be imported using the `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/instanceIpReverseDns:InstanceIpReverseDns reverse fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "ipId": {
                    "type": "string",
                    "description": "The IP ID\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse DNS for this IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n"
                }
            },
            "required": [
                "ipId",
                "reverse",
                "zone"
            ],
            "inputProperties": {
                "ipId": {
                    "type": "string",
                    "description": "The IP ID\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse DNS for this IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "ipId",
                "reverse"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceIpReverseDns resources.\n",
                "properties": {
                    "ipId": {
                        "type": "string",
                        "description": "The IP ID\n"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse DNS for this IP.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the IP should be reserved.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instancePlacementGroup:InstancePlacementGroup": {
            "description": "Creates and manages Compute Instance Placement Groups. For more information, see [the documentation](https://www.scaleway.com/en/developers/api/instance/#path-placement-groups-list-placement-groups).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst availabilityGroup = new scaleway.InstancePlacementGroup(\"availability_group\", {});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\navailability_group = scaleway.InstancePlacementGroup(\"availability_group\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var availabilityGroup = new Scaleway.InstancePlacementGroup(\"availability_group\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstancePlacementGroup(ctx, \"availability_group\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstancePlacementGroup;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var availabilityGroup = new InstancePlacementGroup(\"availabilityGroup\");\n\n    }\n}\n```\n```yaml\nresources:\n  availabilityGroup:\n    type: scaleway:InstancePlacementGroup\n    name: availability_group\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nPlacement groups can be imported using the `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/instancePlacementGroup:InstancePlacementGroup availability_group fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the placement group.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the placement group is associated with.\n"
                },
                "policyMode": {
                    "type": "string",
                    "description": "The [policy mode](https://www.scaleway.com/en/developers/api/instance/#path-placement-groups-create-a-placement-group) of the placement group. Possible values are: `optional` or `enforced`.\n"
                },
                "policyRespected": {
                    "type": "boolean",
                    "description": "Is true when the policy is respected.\n"
                },
                "policyType": {
                    "type": "string",
                    "description": "The [policy type](https://www.scaleway.com/en/developers/api/instance/#path-placement-groups-create-a-placement-grou) of the placement group. Possible values are: `low_latency` or `max_availability`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the placement group is associated with.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the placement group.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the placement group should be created.\n"
                }
            },
            "required": [
                "name",
                "organizationId",
                "policyRespected",
                "projectId",
                "zone"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the placement group.\n"
                },
                "policyMode": {
                    "type": "string",
                    "description": "The [policy mode](https://www.scaleway.com/en/developers/api/instance/#path-placement-groups-create-a-placement-group) of the placement group. Possible values are: `optional` or `enforced`.\n"
                },
                "policyType": {
                    "type": "string",
                    "description": "The [policy type](https://www.scaleway.com/en/developers/api/instance/#path-placement-groups-create-a-placement-grou) of the placement group. Possible values are: `low_latency` or `max_availability`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the placement group is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the placement group.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the placement group should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstancePlacementGroup resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the placement group.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the placement group is associated with.\n"
                    },
                    "policyMode": {
                        "type": "string",
                        "description": "The [policy mode](https://www.scaleway.com/en/developers/api/instance/#path-placement-groups-create-a-placement-group) of the placement group. Possible values are: `optional` or `enforced`.\n"
                    },
                    "policyRespected": {
                        "type": "boolean",
                        "description": "Is true when the policy is respected.\n"
                    },
                    "policyType": {
                        "type": "string",
                        "description": "The [policy type](https://www.scaleway.com/en/developers/api/instance/#path-placement-groups-create-a-placement-grou) of the placement group. Possible values are: `low_latency` or `max_availability`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the placement group is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags to apply to the placement group.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the placement group should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instancePrivateNic:InstancePrivateNic": {
            "description": "Creates and manages Scaleway Instance Private NICs. For more information, see\n[the documentation](https://www.scaleway.com/en/developers/api/instance/#path-private-nics-list-all-private-nics).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst pnic01 = new scaleway.InstancePrivateNic(\"pnic01\", {\n    serverId: \"fr-par-1/11111111-1111-1111-1111-111111111111\",\n    privateNetworkId: \"fr-par-1/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\npnic01 = scaleway.InstancePrivateNic(\"pnic01\",\n    server_id=\"fr-par-1/11111111-1111-1111-1111-111111111111\",\n    private_network_id=\"fr-par-1/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pnic01 = new Scaleway.InstancePrivateNic(\"pnic01\", new()\n    {\n        ServerId = \"fr-par-1/11111111-1111-1111-1111-111111111111\",\n        PrivateNetworkId = \"fr-par-1/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstancePrivateNic(ctx, \"pnic01\", \u0026scaleway.InstancePrivateNicArgs{\n\t\t\tServerId:         pulumi.String(\"fr-par-1/11111111-1111-1111-1111-111111111111\"),\n\t\t\tPrivateNetworkId: pulumi.String(\"fr-par-1/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstancePrivateNic;\nimport com.pulumi.scaleway.InstancePrivateNicArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pnic01 = new InstancePrivateNic(\"pnic01\", InstancePrivateNicArgs.builder()\n            .serverId(\"fr-par-1/11111111-1111-1111-1111-111111111111\")\n            .privateNetworkId(\"fr-par-1/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pnic01:\n    type: scaleway:InstancePrivateNic\n    properties:\n      serverId: fr-par-1/11111111-1111-1111-1111-111111111111\n      privateNetworkId: fr-par-1/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### With zone\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {\n    name: \"private_network_instance\",\n    zone: \"fr-par-2\",\n});\nconst base = new scaleway.InstanceServer(\"base\", {\n    image: \"ubuntu_jammy\",\n    type: \"DEV1-S\",\n    zone: pn01.zone,\n});\nconst pnic01 = new scaleway.InstancePrivateNic(\"pnic01\", {\n    serverId: base.id,\n    privateNetworkId: pn01.id,\n    zone: pn01.zone,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\npn01 = scaleway.VpcPrivateNetwork(\"pn01\",\n    name=\"private_network_instance\",\n    zone=\"fr-par-2\")\nbase = scaleway.InstanceServer(\"base\",\n    image=\"ubuntu_jammy\",\n    type=\"DEV1-S\",\n    zone=pn01.zone)\npnic01 = scaleway.InstancePrivateNic(\"pnic01\",\n    server_id=base.id,\n    private_network_id=pn01.id,\n    zone=pn01.zone)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\", new()\n    {\n        Name = \"private_network_instance\",\n        Zone = \"fr-par-2\",\n    });\n\n    var @base = new Scaleway.InstanceServer(\"base\", new()\n    {\n        Image = \"ubuntu_jammy\",\n        Type = \"DEV1-S\",\n        Zone = pn01.Zone,\n    });\n\n    var pnic01 = new Scaleway.InstancePrivateNic(\"pnic01\", new()\n    {\n        ServerId = @base.Id,\n        PrivateNetworkId = pn01.Id,\n        Zone = pn01.Zone,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tName: pulumi.String(\"private_network_instance\"),\n\t\t\tZone: pulumi.String(\"fr-par-2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbase, err := scaleway.NewInstanceServer(ctx, \"base\", \u0026scaleway.InstanceServerArgs{\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tZone:  pn01.Zone,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstancePrivateNic(ctx, \"pnic01\", \u0026scaleway.InstancePrivateNicArgs{\n\t\t\tServerId:         base.ID(),\n\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\tZone:             pn01.Zone,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.InstancePrivateNic;\nimport com.pulumi.scaleway.InstancePrivateNicArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pn01 = new VpcPrivateNetwork(\"pn01\", VpcPrivateNetworkArgs.builder()\n            .name(\"private_network_instance\")\n            .zone(\"fr-par-2\")\n            .build());\n\n        var base = new InstanceServer(\"base\", InstanceServerArgs.builder()\n            .image(\"ubuntu_jammy\")\n            .type(\"DEV1-S\")\n            .zone(pn01.zone())\n            .build());\n\n        var pnic01 = new InstancePrivateNic(\"pnic01\", InstancePrivateNicArgs.builder()\n            .serverId(base.id())\n            .privateNetworkId(pn01.id())\n            .zone(pn01.zone())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      name: private_network_instance\n      zone: fr-par-2\n  base:\n    type: scaleway:InstanceServer\n    properties:\n      image: ubuntu_jammy\n      type: DEV1-S\n      zone: ${pn01.zone}\n  pnic01:\n    type: scaleway:InstancePrivateNic\n    properties:\n      serverId: ${base.id}\n      privateNetworkId: ${pn01.id}\n      zone: ${pn01.zone}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nPrivate NICs can be imported using the `{zone}/{server_id}/{private_nic_id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/instancePrivateNic:InstancePrivateNic pnic01 fr-par-1/11111111-1111-1111-1111-111111111111/22222222-2222-2222-2222-222222222222\n```\n\n",
            "properties": {
                "ipIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IPAM ip list, should be for internal use only\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "The MAC address of the private NIC.\n"
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "The ID of the private network attached to.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The ID of the server associated with.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the private NIC.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server must be created.\n"
                }
            },
            "required": [
                "macAddress",
                "privateNetworkId",
                "serverId",
                "zone"
            ],
            "inputProperties": {
                "ipIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IPAM ip list, should be for internal use only\n",
                    "willReplaceOnChanges": true
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "The ID of the private network attached to.\n",
                    "willReplaceOnChanges": true
                },
                "serverId": {
                    "type": "string",
                    "description": "The ID of the server associated with.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the private NIC.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server must be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "privateNetworkId",
                "serverId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstancePrivateNic resources.\n",
                "properties": {
                    "ipIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IPAM ip list, should be for internal use only\n",
                        "willReplaceOnChanges": true
                    },
                    "macAddress": {
                        "type": "string",
                        "description": "The MAC address of the private NIC.\n"
                    },
                    "privateNetworkId": {
                        "type": "string",
                        "description": "The ID of the private network attached to.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The ID of the server associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the private NIC.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the server must be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceSecurityGroup:InstanceSecurityGroup": {
            "description": "\n\n## Import\n\nInstance security group can be imported using the `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/instanceSecurityGroup:InstanceSecurityGroup web fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the security group.\n"
                },
                "enableDefaultSecurity": {
                    "type": "boolean",
                    "description": "Whether to block SMTP on IPv4/IPv6 (Port 25, 465, 587). Set to false will unblock SMTP if your account is authorized to. If your organization is not yet authorized to send SMTP traffic, [open a support ticket](https://console.scaleway.com/support/tickets).\n"
                },
                "externalRules": {
                    "type": "boolean",
                    "description": "A boolean to specify whether to use instance_security_group_rules.\nIf `external_rules` is set to `true`, `inbound_rule` and `outbound_rule` can not be set directly in the security group.\n"
                },
                "inboundDefaultPolicy": {
                    "type": "string",
                    "description": "The default policy on incoming traffic. Possible values are: `accept` or `drop`.\n"
                },
                "inboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupInboundRule:InstanceSecurityGroupInboundRule"
                    },
                    "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the security group.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the security group is associated with.\n"
                },
                "outboundDefaultPolicy": {
                    "type": "string",
                    "description": "The default policy on outgoing traffic. Possible values are: `accept` or `drop`.\n"
                },
                "outboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupOutboundRule:InstanceSecurityGroupOutboundRule"
                    },
                    "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the security group is associated with.\n"
                },
                "stateful": {
                    "type": "boolean",
                    "description": "A boolean to specify whether the security group should be stateful or not.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the security group\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the security group should be created.\n"
                }
            },
            "required": [
                "name",
                "organizationId",
                "projectId",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the security group.\n"
                },
                "enableDefaultSecurity": {
                    "type": "boolean",
                    "description": "Whether to block SMTP on IPv4/IPv6 (Port 25, 465, 587). Set to false will unblock SMTP if your account is authorized to. If your organization is not yet authorized to send SMTP traffic, [open a support ticket](https://console.scaleway.com/support/tickets).\n"
                },
                "externalRules": {
                    "type": "boolean",
                    "description": "A boolean to specify whether to use instance_security_group_rules.\nIf `external_rules` is set to `true`, `inbound_rule` and `outbound_rule` can not be set directly in the security group.\n"
                },
                "inboundDefaultPolicy": {
                    "type": "string",
                    "description": "The default policy on incoming traffic. Possible values are: `accept` or `drop`.\n"
                },
                "inboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupInboundRule:InstanceSecurityGroupInboundRule"
                    },
                    "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the security group.\n"
                },
                "outboundDefaultPolicy": {
                    "type": "string",
                    "description": "The default policy on outgoing traffic. Possible values are: `accept` or `drop`.\n"
                },
                "outboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupOutboundRule:InstanceSecurityGroupOutboundRule"
                    },
                    "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the security group is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "stateful": {
                    "type": "boolean",
                    "description": "A boolean to specify whether the security group should be stateful or not.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the security group\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the security group should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceSecurityGroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the security group.\n"
                    },
                    "enableDefaultSecurity": {
                        "type": "boolean",
                        "description": "Whether to block SMTP on IPv4/IPv6 (Port 25, 465, 587). Set to false will unblock SMTP if your account is authorized to. If your organization is not yet authorized to send SMTP traffic, [open a support ticket](https://console.scaleway.com/support/tickets).\n"
                    },
                    "externalRules": {
                        "type": "boolean",
                        "description": "A boolean to specify whether to use instance_security_group_rules.\nIf `external_rules` is set to `true`, `inbound_rule` and `outbound_rule` can not be set directly in the security group.\n"
                    },
                    "inboundDefaultPolicy": {
                        "type": "string",
                        "description": "The default policy on incoming traffic. Possible values are: `accept` or `drop`.\n"
                    },
                    "inboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/InstanceSecurityGroupInboundRule:InstanceSecurityGroupInboundRule"
                        },
                        "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the security group.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the security group is associated with.\n"
                    },
                    "outboundDefaultPolicy": {
                        "type": "string",
                        "description": "The default policy on outgoing traffic. Possible values are: `accept` or `drop`.\n"
                    },
                    "outboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/InstanceSecurityGroupOutboundRule:InstanceSecurityGroupOutboundRule"
                        },
                        "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the security group is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "stateful": {
                        "type": "boolean",
                        "description": "A boolean to specify whether the security group should be stateful or not.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the security group\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the security group should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceSecurityGroupRules:InstanceSecurityGroupRules": {
            "description": "Creates and manages Scaleway compute Instance security group rules. For more information, see [the documentation](https://www.scaleway.com/en/developers/api/instance/#path-security-groups-list-security-groups).\n\nThis resource can be used to externalize rules from a `scaleway.InstanceSecurityGroup` to solve circular dependency problems. When using this resource do not forget to set `external_rules = true` on the security group.\n\n\u003e **Warning:** In order to guaranty rules order in a given security group only one scaleway.InstanceSecurityGroupRules is allowed per security group.\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst sg01 = new scaleway.InstanceSecurityGroup(\"sg01\", {externalRules: true});\nconst sgrs01 = new scaleway.InstanceSecurityGroupRules(\"sgrs01\", {\n    securityGroupId: sg01.id,\n    inboundRules: [{\n        action: \"accept\",\n        port: 80,\n        ipRange: \"0.0.0.0/0\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nsg01 = scaleway.InstanceSecurityGroup(\"sg01\", external_rules=True)\nsgrs01 = scaleway.InstanceSecurityGroupRules(\"sgrs01\",\n    security_group_id=sg01.id,\n    inbound_rules=[{\n        \"action\": \"accept\",\n        \"port\": 80,\n        \"ip_range\": \"0.0.0.0/0\",\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sg01 = new Scaleway.InstanceSecurityGroup(\"sg01\", new()\n    {\n        ExternalRules = true,\n    });\n\n    var sgrs01 = new Scaleway.InstanceSecurityGroupRules(\"sgrs01\", new()\n    {\n        SecurityGroupId = sg01.Id,\n        InboundRules = new[]\n        {\n            new Scaleway.Inputs.InstanceSecurityGroupRulesInboundRuleArgs\n            {\n                Action = \"accept\",\n                Port = 80,\n                IpRange = \"0.0.0.0/0\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsg01, err := scaleway.NewInstanceSecurityGroup(ctx, \"sg01\", \u0026scaleway.InstanceSecurityGroupArgs{\n\t\t\tExternalRules: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceSecurityGroupRules(ctx, \"sgrs01\", \u0026scaleway.InstanceSecurityGroupRulesArgs{\n\t\t\tSecurityGroupId: sg01.ID(),\n\t\t\tInboundRules: scaleway.InstanceSecurityGroupRulesInboundRuleArray{\n\t\t\t\t\u0026scaleway.InstanceSecurityGroupRulesInboundRuleArgs{\n\t\t\t\t\tAction:  pulumi.String(\"accept\"),\n\t\t\t\t\tPort:    pulumi.Int(80),\n\t\t\t\t\tIpRange: pulumi.String(\"0.0.0.0/0\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceSecurityGroup;\nimport com.pulumi.scaleway.InstanceSecurityGroupArgs;\nimport com.pulumi.scaleway.InstanceSecurityGroupRules;\nimport com.pulumi.scaleway.InstanceSecurityGroupRulesArgs;\nimport com.pulumi.scaleway.inputs.InstanceSecurityGroupRulesInboundRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sg01 = new InstanceSecurityGroup(\"sg01\", InstanceSecurityGroupArgs.builder()\n            .externalRules(true)\n            .build());\n\n        var sgrs01 = new InstanceSecurityGroupRules(\"sgrs01\", InstanceSecurityGroupRulesArgs.builder()\n            .securityGroupId(sg01.id())\n            .inboundRules(InstanceSecurityGroupRulesInboundRuleArgs.builder()\n                .action(\"accept\")\n                .port(80)\n                .ipRange(\"0.0.0.0/0\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sg01:\n    type: scaleway:InstanceSecurityGroup\n    properties:\n      externalRules: true\n  sgrs01:\n    type: scaleway:InstanceSecurityGroupRules\n    properties:\n      securityGroupId: ${sg01.id}\n      inboundRules:\n        - action: accept\n          port: 80\n          ipRange: 0.0.0.0/0\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Simplify your rules using dynamic block and `for_each` loop\n\nYou can use `for_each` syntax to simplify the definition of your rules.\nLet's suppose that your inbound default policy is to drop, but you want to build a list of exceptions to accept.\nCreate a local containing your exceptions (`locals.trusted`) and use the `for_each` syntax in a dynamic block:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.InstanceSecurityGroup(\"main\", {\n    description: \"test\",\n    name: \"terraform test\",\n    inboundDefaultPolicy: \"drop\",\n    outboundDefaultPolicy: \"accept\",\n});\nconst trusted = [\n    \"1.2.3.4\",\n    \"4.5.6.7\",\n    \"7.8.9.10\",\n];\nconst mainInstanceSecurityGroupRules = new scaleway.InstanceSecurityGroupRules(\"main\", {\n    inboundRules: trusted.map((v, k) =\u003e ({key: k, value: v})).map(entry =\u003e ({\n        action: \"accept\",\n        ip: entry.value,\n        port: 80,\n    })),\n    securityGroupId: main.id,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.InstanceSecurityGroup(\"main\",\n    description=\"test\",\n    name=\"terraform test\",\n    inbound_default_policy=\"drop\",\n    outbound_default_policy=\"accept\")\ntrusted = [\n    \"1.2.3.4\",\n    \"4.5.6.7\",\n    \"7.8.9.10\",\n]\nmain_instance_security_group_rules = scaleway.InstanceSecurityGroupRules(\"main\",\n    inbound_rules=[{\n        \"action\": \"accept\",\n        \"ip\": entry[\"value\"],\n        \"port\": 80,\n    } for entry in [{\"key\": k, \"value\": v} for k, v in trusted]],\n    security_group_id=main.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.InstanceSecurityGroup(\"main\", new()\n    {\n        Description = \"test\",\n        Name = \"terraform test\",\n        InboundDefaultPolicy = \"drop\",\n        OutboundDefaultPolicy = \"accept\",\n    });\n\n    var trusted = new[]\n    {\n        \"1.2.3.4\",\n        \"4.5.6.7\",\n        \"7.8.9.10\",\n    };\n\n    var mainInstanceSecurityGroupRules = new Scaleway.InstanceSecurityGroupRules(\"main\", new()\n    {\n        InboundRules = trusted.Select((v, k) =\u003e new { Key = k, Value = v }).Select(entry =\u003e \n        {\n            return new Scaleway.Inputs.InstanceSecurityGroupRulesInboundRuleArgs\n            {\n                Action = \"accept\",\n                Ip = entry.Value,\n                Port = 80,\n            };\n        }).ToList(),\n        SecurityGroupId = main.Id,\n    });\n\n});\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nYou can also use object to assign IP and port in the same time.\nIn your locals, you can use objects to encapsulate several values that will be used later on in the loop:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.InstanceSecurityGroup(\"main\", {\n    description: \"test\",\n    name: \"terraform test\",\n    inboundDefaultPolicy: \"drop\",\n    outboundDefaultPolicy: \"accept\",\n});\nconst trusted = [\n    {\n        ip: \"1.2.3.4\",\n        port: \"80\",\n    },\n    {\n        ip: \"5.6.7.8\",\n        port: \"81\",\n    },\n    {\n        ip: \"9.10.11.12\",\n        port: \"81\",\n    },\n];\nconst mainInstanceSecurityGroupRules = new scaleway.InstanceSecurityGroupRules(\"main\", {\n    inboundRules: trusted.map((v, k) =\u003e ({key: k, value: v})).map(entry =\u003e ({\n        action: \"accept\",\n        ip: entry.value.ip,\n        port: entry.value.port,\n    })),\n    securityGroupId: main.id,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.InstanceSecurityGroup(\"main\",\n    description=\"test\",\n    name=\"terraform test\",\n    inbound_default_policy=\"drop\",\n    outbound_default_policy=\"accept\")\ntrusted = [\n    {\n        \"ip\": \"1.2.3.4\",\n        \"port\": \"80\",\n    },\n    {\n        \"ip\": \"5.6.7.8\",\n        \"port\": \"81\",\n    },\n    {\n        \"ip\": \"9.10.11.12\",\n        \"port\": \"81\",\n    },\n]\nmain_instance_security_group_rules = scaleway.InstanceSecurityGroupRules(\"main\",\n    inbound_rules=[{\n        \"action\": \"accept\",\n        \"ip\": entry[\"value\"][\"ip\"],\n        \"port\": entry[\"value\"][\"port\"],\n    } for entry in [{\"key\": k, \"value\": v} for k, v in trusted]],\n    security_group_id=main.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.InstanceSecurityGroup(\"main\", new()\n    {\n        Description = \"test\",\n        Name = \"terraform test\",\n        InboundDefaultPolicy = \"drop\",\n        OutboundDefaultPolicy = \"accept\",\n    });\n\n    var trusted = new[]\n    {\n        \n        {\n            { \"ip\", \"1.2.3.4\" },\n            { \"port\", \"80\" },\n        },\n        \n        {\n            { \"ip\", \"5.6.7.8\" },\n            { \"port\", \"81\" },\n        },\n        \n        {\n            { \"ip\", \"9.10.11.12\" },\n            { \"port\", \"81\" },\n        },\n    };\n\n    var mainInstanceSecurityGroupRules = new Scaleway.InstanceSecurityGroupRules(\"main\", new()\n    {\n        InboundRules = trusted.Select((v, k) =\u003e new { Key = k, Value = v }).Select(entry =\u003e \n        {\n            return new Scaleway.Inputs.InstanceSecurityGroupRulesInboundRuleArgs\n            {\n                Action = \"accept\",\n                Ip = entry.Value.Ip,\n                Port = entry.Value.Port,\n            };\n        }).ToList(),\n        SecurityGroupId = main.Id,\n    });\n\n});\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nInstance security group rules can be imported using the `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/instanceSecurityGroupRules:InstanceSecurityGroupRules web fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "inboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupRulesInboundRule:InstanceSecurityGroupRulesInboundRule"
                    },
                    "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "outboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupRulesOutboundRule:InstanceSecurityGroupRulesOutboundRule"
                    },
                    "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The ID of the security group.\n"
                }
            },
            "required": [
                "securityGroupId"
            ],
            "inputProperties": {
                "inboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupRulesInboundRule:InstanceSecurityGroupRulesInboundRule"
                    },
                    "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "outboundRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceSecurityGroupRulesOutboundRule:InstanceSecurityGroupRulesOutboundRule"
                    },
                    "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The ID of the security group.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "securityGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceSecurityGroupRules resources.\n",
                "properties": {
                    "inboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/InstanceSecurityGroupRulesInboundRule:InstanceSecurityGroupRulesInboundRule"
                        },
                        "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n"
                    },
                    "outboundRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/InstanceSecurityGroupRulesOutboundRule:InstanceSecurityGroupRulesOutboundRule"
                        },
                        "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "The ID of the security group.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceServer:InstanceServer": {
            "description": "Creates and manages Scaleway compute Instances. For more information, see [the documentation](https://www.scaleway.com/en/developers/api/instance/#path-instances-list-all-instances).\n\nPlease check our [FAQ - Instances](https://www.scaleway.com/en/docs/faq/instances).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst publicIp = new scaleway.InstanceIp(\"public_ip\", {});\nconst web = new scaleway.InstanceServer(\"web\", {\n    type: \"DEV1-S\",\n    image: \"ubuntu_jammy\",\n    ipId: publicIp.id,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\npublic_ip = scaleway.InstanceIp(\"public_ip\")\nweb = scaleway.InstanceServer(\"web\",\n    type=\"DEV1-S\",\n    image=\"ubuntu_jammy\",\n    ip_id=public_ip.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var publicIp = new Scaleway.InstanceIp(\"public_ip\");\n\n    var web = new Scaleway.InstanceServer(\"web\", new()\n    {\n        Type = \"DEV1-S\",\n        Image = \"ubuntu_jammy\",\n        IpId = publicIp.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpublicIp, err := scaleway.NewInstanceIp(ctx, \"public_ip\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceServer(ctx, \"web\", \u0026scaleway.InstanceServerArgs{\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tIpId:  publicIp.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceIp;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var publicIp = new InstanceIp(\"publicIp\");\n\n        var web = new InstanceServer(\"web\", InstanceServerArgs.builder()\n            .type(\"DEV1-S\")\n            .image(\"ubuntu_jammy\")\n            .ipId(publicIp.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  publicIp:\n    type: scaleway:InstanceIp\n    name: public_ip\n  web:\n    type: scaleway:InstanceServer\n    properties:\n      type: DEV1-S\n      image: ubuntu_jammy\n      ipId: ${publicIp.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### With additional volumes and tags\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst data = new scaleway.InstanceVolume(\"data\", {\n    sizeInGb: 100,\n    type: \"b_ssd\",\n});\nconst web = new scaleway.InstanceServer(\"web\", {\n    type: \"DEV1-S\",\n    image: \"ubuntu_jammy\",\n    tags: [\n        \"hello\",\n        \"public\",\n    ],\n    rootVolume: {\n        deleteOnTermination: false,\n    },\n    additionalVolumeIds: [data.id],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\ndata = scaleway.InstanceVolume(\"data\",\n    size_in_gb=100,\n    type=\"b_ssd\")\nweb = scaleway.InstanceServer(\"web\",\n    type=\"DEV1-S\",\n    image=\"ubuntu_jammy\",\n    tags=[\n        \"hello\",\n        \"public\",\n    ],\n    root_volume={\n        \"delete_on_termination\": False,\n    },\n    additional_volume_ids=[data.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var data = new Scaleway.InstanceVolume(\"data\", new()\n    {\n        SizeInGb = 100,\n        Type = \"b_ssd\",\n    });\n\n    var web = new Scaleway.InstanceServer(\"web\", new()\n    {\n        Type = \"DEV1-S\",\n        Image = \"ubuntu_jammy\",\n        Tags = new[]\n        {\n            \"hello\",\n            \"public\",\n        },\n        RootVolume = new Scaleway.Inputs.InstanceServerRootVolumeArgs\n        {\n            DeleteOnTermination = false,\n        },\n        AdditionalVolumeIds = new[]\n        {\n            data.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdata, err := scaleway.NewInstanceVolume(ctx, \"data\", \u0026scaleway.InstanceVolumeArgs{\n\t\t\tSizeInGb: pulumi.Int(100),\n\t\t\tType:     pulumi.String(\"b_ssd\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceServer(ctx, \"web\", \u0026scaleway.InstanceServerArgs{\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"hello\"),\n\t\t\t\tpulumi.String(\"public\"),\n\t\t\t},\n\t\t\tRootVolume: \u0026scaleway.InstanceServerRootVolumeArgs{\n\t\t\t\tDeleteOnTermination: pulumi.Bool(false),\n\t\t\t},\n\t\t\tAdditionalVolumeIds: pulumi.StringArray{\n\t\t\t\tdata.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceVolume;\nimport com.pulumi.scaleway.InstanceVolumeArgs;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.inputs.InstanceServerRootVolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var data = new InstanceVolume(\"data\", InstanceVolumeArgs.builder()\n            .sizeInGb(100)\n            .type(\"b_ssd\")\n            .build());\n\n        var web = new InstanceServer(\"web\", InstanceServerArgs.builder()\n            .type(\"DEV1-S\")\n            .image(\"ubuntu_jammy\")\n            .tags(            \n                \"hello\",\n                \"public\")\n            .rootVolume(InstanceServerRootVolumeArgs.builder()\n                .deleteOnTermination(false)\n                .build())\n            .additionalVolumeIds(data.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  data:\n    type: scaleway:InstanceVolume\n    properties:\n      sizeInGb: 100\n      type: b_ssd\n  web:\n    type: scaleway:InstanceServer\n    properties:\n      type: DEV1-S\n      image: ubuntu_jammy\n      tags:\n        - hello\n        - public\n      rootVolume:\n        deleteOnTermination: false\n      additionalVolumeIds:\n        - ${data.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### With a reserved IP\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst ip = new scaleway.InstanceIp(\"ip\", {});\nconst web = new scaleway.InstanceServer(\"web\", {\n    type: \"DEV1-S\",\n    image: \"f974feac-abae-4365-b988-8ec7d1cec10d\",\n    tags: [\n        \"hello\",\n        \"public\",\n    ],\n    ipId: ip.id,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nip = scaleway.InstanceIp(\"ip\")\nweb = scaleway.InstanceServer(\"web\",\n    type=\"DEV1-S\",\n    image=\"f974feac-abae-4365-b988-8ec7d1cec10d\",\n    tags=[\n        \"hello\",\n        \"public\",\n    ],\n    ip_id=ip.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ip = new Scaleway.InstanceIp(\"ip\");\n\n    var web = new Scaleway.InstanceServer(\"web\", new()\n    {\n        Type = \"DEV1-S\",\n        Image = \"f974feac-abae-4365-b988-8ec7d1cec10d\",\n        Tags = new[]\n        {\n            \"hello\",\n            \"public\",\n        },\n        IpId = ip.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tip, err := scaleway.NewInstanceIp(ctx, \"ip\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceServer(ctx, \"web\", \u0026scaleway.InstanceServerArgs{\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tImage: pulumi.String(\"f974feac-abae-4365-b988-8ec7d1cec10d\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"hello\"),\n\t\t\t\tpulumi.String(\"public\"),\n\t\t\t},\n\t\t\tIpId: ip.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceIp;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ip = new InstanceIp(\"ip\");\n\n        var web = new InstanceServer(\"web\", InstanceServerArgs.builder()\n            .type(\"DEV1-S\")\n            .image(\"f974feac-abae-4365-b988-8ec7d1cec10d\")\n            .tags(            \n                \"hello\",\n                \"public\")\n            .ipId(ip.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ip:\n    type: scaleway:InstanceIp\n  web:\n    type: scaleway:InstanceServer\n    properties:\n      type: DEV1-S\n      image: f974feac-abae-4365-b988-8ec7d1cec10d\n      tags:\n        - hello\n        - public\n      ipId: ${ip.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### With security group\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst www = new scaleway.InstanceSecurityGroup(\"www\", {\n    inboundDefaultPolicy: \"drop\",\n    outboundDefaultPolicy: \"accept\",\n    inboundRules: [\n        {\n            action: \"accept\",\n            port: 22,\n            ip: \"212.47.225.64\",\n        },\n        {\n            action: \"accept\",\n            port: 80,\n        },\n        {\n            action: \"accept\",\n            port: 443,\n        },\n    ],\n    outboundRules: [{\n        action: \"drop\",\n        ipRange: \"10.20.0.0/24\",\n    }],\n});\nconst web = new scaleway.InstanceServer(\"web\", {\n    type: \"DEV1-S\",\n    image: \"ubuntu_jammy\",\n    securityGroupId: www.id,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nwww = scaleway.InstanceSecurityGroup(\"www\",\n    inbound_default_policy=\"drop\",\n    outbound_default_policy=\"accept\",\n    inbound_rules=[\n        {\n            \"action\": \"accept\",\n            \"port\": 22,\n            \"ip\": \"212.47.225.64\",\n        },\n        {\n            \"action\": \"accept\",\n            \"port\": 80,\n        },\n        {\n            \"action\": \"accept\",\n            \"port\": 443,\n        },\n    ],\n    outbound_rules=[{\n        \"action\": \"drop\",\n        \"ip_range\": \"10.20.0.0/24\",\n    }])\nweb = scaleway.InstanceServer(\"web\",\n    type=\"DEV1-S\",\n    image=\"ubuntu_jammy\",\n    security_group_id=www.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var www = new Scaleway.InstanceSecurityGroup(\"www\", new()\n    {\n        InboundDefaultPolicy = \"drop\",\n        OutboundDefaultPolicy = \"accept\",\n        InboundRules = new[]\n        {\n            new Scaleway.Inputs.InstanceSecurityGroupInboundRuleArgs\n            {\n                Action = \"accept\",\n                Port = 22,\n                Ip = \"212.47.225.64\",\n            },\n            new Scaleway.Inputs.InstanceSecurityGroupInboundRuleArgs\n            {\n                Action = \"accept\",\n                Port = 80,\n            },\n            new Scaleway.Inputs.InstanceSecurityGroupInboundRuleArgs\n            {\n                Action = \"accept\",\n                Port = 443,\n            },\n        },\n        OutboundRules = new[]\n        {\n            new Scaleway.Inputs.InstanceSecurityGroupOutboundRuleArgs\n            {\n                Action = \"drop\",\n                IpRange = \"10.20.0.0/24\",\n            },\n        },\n    });\n\n    var web = new Scaleway.InstanceServer(\"web\", new()\n    {\n        Type = \"DEV1-S\",\n        Image = \"ubuntu_jammy\",\n        SecurityGroupId = www.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\twww, err := scaleway.NewInstanceSecurityGroup(ctx, \"www\", \u0026scaleway.InstanceSecurityGroupArgs{\n\t\t\tInboundDefaultPolicy:  pulumi.String(\"drop\"),\n\t\t\tOutboundDefaultPolicy: pulumi.String(\"accept\"),\n\t\t\tInboundRules: scaleway.InstanceSecurityGroupInboundRuleArray{\n\t\t\t\t\u0026scaleway.InstanceSecurityGroupInboundRuleArgs{\n\t\t\t\t\tAction: pulumi.String(\"accept\"),\n\t\t\t\t\tPort:   pulumi.Int(22),\n\t\t\t\t\tIp:     pulumi.String(\"212.47.225.64\"),\n\t\t\t\t},\n\t\t\t\t\u0026scaleway.InstanceSecurityGroupInboundRuleArgs{\n\t\t\t\t\tAction: pulumi.String(\"accept\"),\n\t\t\t\t\tPort:   pulumi.Int(80),\n\t\t\t\t},\n\t\t\t\t\u0026scaleway.InstanceSecurityGroupInboundRuleArgs{\n\t\t\t\t\tAction: pulumi.String(\"accept\"),\n\t\t\t\t\tPort:   pulumi.Int(443),\n\t\t\t\t},\n\t\t\t},\n\t\t\tOutboundRules: scaleway.InstanceSecurityGroupOutboundRuleArray{\n\t\t\t\t\u0026scaleway.InstanceSecurityGroupOutboundRuleArgs{\n\t\t\t\t\tAction:  pulumi.String(\"drop\"),\n\t\t\t\t\tIpRange: pulumi.String(\"10.20.0.0/24\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceServer(ctx, \"web\", \u0026scaleway.InstanceServerArgs{\n\t\t\tType:            pulumi.String(\"DEV1-S\"),\n\t\t\tImage:           pulumi.String(\"ubuntu_jammy\"),\n\t\t\tSecurityGroupId: www.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceSecurityGroup;\nimport com.pulumi.scaleway.InstanceSecurityGroupArgs;\nimport com.pulumi.scaleway.inputs.InstanceSecurityGroupInboundRuleArgs;\nimport com.pulumi.scaleway.inputs.InstanceSecurityGroupOutboundRuleArgs;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var www = new InstanceSecurityGroup(\"www\", InstanceSecurityGroupArgs.builder()\n            .inboundDefaultPolicy(\"drop\")\n            .outboundDefaultPolicy(\"accept\")\n            .inboundRules(            \n                InstanceSecurityGroupInboundRuleArgs.builder()\n                    .action(\"accept\")\n                    .port(\"22\")\n                    .ip(\"212.47.225.64\")\n                    .build(),\n                InstanceSecurityGroupInboundRuleArgs.builder()\n                    .action(\"accept\")\n                    .port(\"80\")\n                    .build(),\n                InstanceSecurityGroupInboundRuleArgs.builder()\n                    .action(\"accept\")\n                    .port(\"443\")\n                    .build())\n            .outboundRules(InstanceSecurityGroupOutboundRuleArgs.builder()\n                .action(\"drop\")\n                .ipRange(\"10.20.0.0/24\")\n                .build())\n            .build());\n\n        var web = new InstanceServer(\"web\", InstanceServerArgs.builder()\n            .type(\"DEV1-S\")\n            .image(\"ubuntu_jammy\")\n            .securityGroupId(www.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  www:\n    type: scaleway:InstanceSecurityGroup\n    properties:\n      inboundDefaultPolicy: drop\n      outboundDefaultPolicy: accept\n      inboundRules:\n        - action: accept\n          port: '22'\n          ip: 212.47.225.64\n        - action: accept\n          port: '80'\n        - action: accept\n          port: '443'\n      outboundRules:\n        - action: drop\n          ipRange: 10.20.0.0/24\n  web:\n    type: scaleway:InstanceServer\n    properties:\n      type: DEV1-S\n      image: ubuntu_jammy\n      securityGroupId: ${www.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### With private network\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {name: \"private_network_instance\"});\nconst base = new scaleway.InstanceServer(\"base\", {\n    image: \"ubuntu_jammy\",\n    type: \"DEV1-S\",\n    privateNetworks: [{\n        pnId: pn01.id,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\npn01 = scaleway.VpcPrivateNetwork(\"pn01\", name=\"private_network_instance\")\nbase = scaleway.InstanceServer(\"base\",\n    image=\"ubuntu_jammy\",\n    type=\"DEV1-S\",\n    private_networks=[{\n        \"pn_id\": pn01.id,\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\", new()\n    {\n        Name = \"private_network_instance\",\n    });\n\n    var @base = new Scaleway.InstanceServer(\"base\", new()\n    {\n        Image = \"ubuntu_jammy\",\n        Type = \"DEV1-S\",\n        PrivateNetworks = new[]\n        {\n            new Scaleway.Inputs.InstanceServerPrivateNetworkArgs\n            {\n                PnId = pn01.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tName: pulumi.String(\"private_network_instance\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceServer(ctx, \"base\", \u0026scaleway.InstanceServerArgs{\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tPrivateNetworks: scaleway.InstanceServerPrivateNetworkArray{\n\t\t\t\t\u0026scaleway.InstanceServerPrivateNetworkArgs{\n\t\t\t\t\tPnId: pn01.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.inputs.InstanceServerPrivateNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pn01 = new VpcPrivateNetwork(\"pn01\", VpcPrivateNetworkArgs.builder()\n            .name(\"private_network_instance\")\n            .build());\n\n        var base = new InstanceServer(\"base\", InstanceServerArgs.builder()\n            .image(\"ubuntu_jammy\")\n            .type(\"DEV1-S\")\n            .privateNetworks(InstanceServerPrivateNetworkArgs.builder()\n                .pnId(pn01.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      name: private_network_instance\n  base:\n    type: scaleway:InstanceServer\n    properties:\n      image: ubuntu_jammy\n      type: DEV1-S\n      privateNetworks:\n        - pnId: ${pn01.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Root volume configuration\n\n### Resized block volume with installed image\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst image = new scaleway.InstanceServer(\"image\", {\n    type: \"PRO2-XXS\",\n    image: \"ubuntu_jammy\",\n    rootVolume: {\n        volumeType: \"b_ssd\",\n        sizeInGb: 100,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nimage = scaleway.InstanceServer(\"image\",\n    type=\"PRO2-XXS\",\n    image=\"ubuntu_jammy\",\n    root_volume={\n        \"volume_type\": \"b_ssd\",\n        \"size_in_gb\": 100,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var image = new Scaleway.InstanceServer(\"image\", new()\n    {\n        Type = \"PRO2-XXS\",\n        Image = \"ubuntu_jammy\",\n        RootVolume = new Scaleway.Inputs.InstanceServerRootVolumeArgs\n        {\n            VolumeType = \"b_ssd\",\n            SizeInGb = 100,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstanceServer(ctx, \"image\", \u0026scaleway.InstanceServerArgs{\n\t\t\tType:  pulumi.String(\"PRO2-XXS\"),\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tRootVolume: \u0026scaleway.InstanceServerRootVolumeArgs{\n\t\t\t\tVolumeType: pulumi.String(\"b_ssd\"),\n\t\t\t\tSizeInGb:   pulumi.Int(100),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.inputs.InstanceServerRootVolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var image = new InstanceServer(\"image\", InstanceServerArgs.builder()\n            .type(\"PRO2-XXS\")\n            .image(\"ubuntu_jammy\")\n            .rootVolume(InstanceServerRootVolumeArgs.builder()\n                .volumeType(\"b_ssd\")\n                .sizeInGb(100)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  image:\n    type: scaleway:InstanceServer\n    properties:\n      type: PRO2-XXS\n      image: ubuntu_jammy\n      rootVolume:\n        volumeType: b_ssd\n        sizeInGb: 100\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### From snapshot\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst snapshot = scaleway.getInstanceSnapshot({\n    name: \"my_snapshot\",\n});\nconst fromSnapshot = new scaleway.InstanceVolume(\"from_snapshot\", {\n    fromSnapshotId: snapshot.then(snapshot =\u003e snapshot.id),\n    type: \"b_ssd\",\n});\nconst fromSnapshotInstanceServer = new scaleway.InstanceServer(\"from_snapshot\", {\n    type: \"PRO2-XXS\",\n    rootVolume: {\n        volumeId: fromSnapshot.id,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\nsnapshot = scaleway.get_instance_snapshot(name=\"my_snapshot\")\nfrom_snapshot = scaleway.InstanceVolume(\"from_snapshot\",\n    from_snapshot_id=snapshot.id,\n    type=\"b_ssd\")\nfrom_snapshot_instance_server = scaleway.InstanceServer(\"from_snapshot\",\n    type=\"PRO2-XXS\",\n    root_volume={\n        \"volume_id\": from_snapshot.id,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var snapshot = Scaleway.GetInstanceSnapshot.Invoke(new()\n    {\n        Name = \"my_snapshot\",\n    });\n\n    var fromSnapshot = new Scaleway.InstanceVolume(\"from_snapshot\", new()\n    {\n        FromSnapshotId = snapshot.Apply(getInstanceSnapshotResult =\u003e getInstanceSnapshotResult.Id),\n        Type = \"b_ssd\",\n    });\n\n    var fromSnapshotInstanceServer = new Scaleway.InstanceServer(\"from_snapshot\", new()\n    {\n        Type = \"PRO2-XXS\",\n        RootVolume = new Scaleway.Inputs.InstanceServerRootVolumeArgs\n        {\n            VolumeId = fromSnapshot.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsnapshot, err := scaleway.LookupInstanceSnapshot(ctx, \u0026scaleway.LookupInstanceSnapshotArgs{\n\t\t\tName: pulumi.StringRef(\"my_snapshot\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfromSnapshot, err := scaleway.NewInstanceVolume(ctx, \"from_snapshot\", \u0026scaleway.InstanceVolumeArgs{\n\t\t\tFromSnapshotId: pulumi.String(snapshot.Id),\n\t\t\tType:           pulumi.String(\"b_ssd\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceServer(ctx, \"from_snapshot\", \u0026scaleway.InstanceServerArgs{\n\t\t\tType: pulumi.String(\"PRO2-XXS\"),\n\t\t\tRootVolume: \u0026scaleway.InstanceServerRootVolumeArgs{\n\t\t\t\tVolumeId: fromSnapshot.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetInstanceSnapshotArgs;\nimport com.pulumi.scaleway.InstanceVolume;\nimport com.pulumi.scaleway.InstanceVolumeArgs;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.inputs.InstanceServerRootVolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var snapshot = ScalewayFunctions.getInstanceSnapshot(GetInstanceSnapshotArgs.builder()\n            .name(\"my_snapshot\")\n            .build());\n\n        var fromSnapshot = new InstanceVolume(\"fromSnapshot\", InstanceVolumeArgs.builder()\n            .fromSnapshotId(snapshot.applyValue(getInstanceSnapshotResult -\u003e getInstanceSnapshotResult.id()))\n            .type(\"b_ssd\")\n            .build());\n\n        var fromSnapshotInstanceServer = new InstanceServer(\"fromSnapshotInstanceServer\", InstanceServerArgs.builder()\n            .type(\"PRO2-XXS\")\n            .rootVolume(InstanceServerRootVolumeArgs.builder()\n                .volumeId(fromSnapshot.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fromSnapshot:\n    type: scaleway:InstanceVolume\n    name: from_snapshot\n    properties:\n      fromSnapshotId: ${snapshot.id}\n      type: b_ssd\n  fromSnapshotInstanceServer:\n    type: scaleway:InstanceServer\n    name: from_snapshot\n    properties:\n      type: PRO2-XXS\n      rootVolume:\n        volumeId: ${fromSnapshot.id}\nvariables:\n  snapshot:\n    fn::invoke:\n      Function: scaleway:getInstanceSnapshot\n      Arguments:\n        name: my_snapshot\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Using Scaleway Block Storage (SBS) volume\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst server = new scaleway.InstanceServer(\"server\", {\n    type: \"PLAY2-MICRO\",\n    image: \"ubuntu_jammy\",\n    rootVolume: {\n        volumeType: \"sbs_volume\",\n        sbsIops: 15000,\n        sizeInGb: 50,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nserver = scaleway.InstanceServer(\"server\",\n    type=\"PLAY2-MICRO\",\n    image=\"ubuntu_jammy\",\n    root_volume={\n        \"volume_type\": \"sbs_volume\",\n        \"sbs_iops\": 15000,\n        \"size_in_gb\": 50,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var server = new Scaleway.InstanceServer(\"server\", new()\n    {\n        Type = \"PLAY2-MICRO\",\n        Image = \"ubuntu_jammy\",\n        RootVolume = new Scaleway.Inputs.InstanceServerRootVolumeArgs\n        {\n            VolumeType = \"sbs_volume\",\n            SbsIops = 15000,\n            SizeInGb = 50,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstanceServer(ctx, \"server\", \u0026scaleway.InstanceServerArgs{\n\t\t\tType:  pulumi.String(\"PLAY2-MICRO\"),\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tRootVolume: \u0026scaleway.InstanceServerRootVolumeArgs{\n\t\t\t\tVolumeType: pulumi.String(\"sbs_volume\"),\n\t\t\t\tSbsIops:    pulumi.Int(15000),\n\t\t\t\tSizeInGb:   pulumi.Int(50),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.inputs.InstanceServerRootVolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var server = new InstanceServer(\"server\", InstanceServerArgs.builder()\n            .type(\"PLAY2-MICRO\")\n            .image(\"ubuntu_jammy\")\n            .rootVolume(InstanceServerRootVolumeArgs.builder()\n                .volumeType(\"sbs_volume\")\n                .sbsIops(15000)\n                .sizeInGb(50)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  server:\n    type: scaleway:InstanceServer\n    properties:\n      type: PLAY2-MICRO\n      image: ubuntu_jammy\n      rootVolume:\n        volumeType: sbs_volume\n        sbsIops: 15000\n        sizeInGb: 50\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Private Network\n\n\u003e **Important:** Updates to `private_network` will recreate a new private network interface.\n\n- `pn_id` - (Required) The private network ID where to connect.\n- `mac_address` The private NIC MAC address.\n- `status` The private NIC state.\n- `zone` - (Defaults to provider `zone`) The zone in which the server must be created.\n\n\u003e **Important:**\n\n- You can only attach an instance in the same zone as a private network.\n- Instance supports maximum 8 different private networks.\n\n## Import\n\nInstance servers can be imported using the `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/instanceServer:InstanceServer web fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "additionalVolumeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The [additional volumes](https://www.scaleway.com/en/developers/api/instance/#path-volume-types-list-volume-types)\nattached to the server. Updates to this field will trigger a stop/start of the server.\n\n\u003e **Important:** If this field contains local volumes, the `state` must be set to `stopped`, otherwise it will fail.\n\n\u003e **Important:** If this field contains local volumes, you have to first detach them, in one apply, and then delete the volume in another apply.\n"
                },
                "bootType": {
                    "type": "string",
                    "description": "The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.\n"
                },
                "bootscriptId": {
                    "type": "string",
                    "description": "The ID of the bootscript to use  (set boot_type to `bootscript`).\n",
                    "deprecationMessage": "bootscript is not supported anymore."
                },
                "cloudInit": {
                    "type": "string",
                    "description": "The cloud init script associated with this server\n"
                },
                "enableDynamicIp": {
                    "type": "boolean",
                    "description": "If true a dynamic IP will be attached to the server.\n"
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "Determines if IPv6 is enabled for the server. Useful only with `routed_ip_enabled` as false, otherwise ipv6 is always supported.\nDeprecated: Please use a scaleway.InstanceIp with a `routed_ipv6` type.\n",
                    "deprecationMessage": "Please use a scaleway.InstanceIp with a `routed_ipv6` type"
                },
                "image": {
                    "type": "string",
                    "description": "The UUID or the label of the base image used by the server. You can use [this endpoint](https://www.scaleway.com/en/developers/api/marketplace/#path-marketplace-images-list-marketplace-images)\nto find either the right `label` or the right local image `ID` for a given `type`. Optional when creating an instance with an existing root volume.\n\nYou can check the available labels with our [CLI](https://www.scaleway.com/en/docs/compute/instances/api-cli/creating-managing-instances-with-cliv2/). ```scw marketplace image list```\n\nTo retrieve more information by label please use: ```scw marketplace image get label=\u003cLABEL\u003e```\n"
                },
                "ipId": {
                    "type": "string",
                    "description": "The ID of the reserved IP that is attached to the server.\n"
                },
                "ipIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of ID of reserved IPs that are attached to the server. Cannot be used with `ip_id`.\n\n\u003e `ip_id` to `ip_ids` migration: if moving the ip from the old `ip_id` field to the new `ip_ids`, it should not detach the ip.\n"
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "The default ipv6 address routed to the server. ( Only set when enable_ipv6 is set to true )\nDeprecated: Please use a scaleway.InstanceIp with a `routed_ipv6` type.\n",
                    "deprecationMessage": "Please use a scaleway.InstanceIp with a `routed_ipv6` type"
                },
                "ipv6Gateway": {
                    "type": "string",
                    "description": "The ipv6 gateway address. ( Only set when enable_ipv6 is set to true )\nDeprecated: Please use a scaleway.InstanceIp with a `routed_ipv6` type.\n",
                    "deprecationMessage": "Please use a scaleway.InstanceIp with a `routed_ipv6` type"
                },
                "ipv6PrefixLength": {
                    "type": "integer",
                    "description": "The prefix length of the ipv6 subnet routed to the server. ( Only set when enable_ipv6 is set to true )\nDeprecated: Please use a scaleway.InstanceIp with a `routed_ipv6` type.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the server is associated with.\n"
                },
                "placementGroupId": {
                    "type": "string",
                    "description": "The [placement group](https://www.scaleway.com/en/developers/api/instance/#path-security-groups-update-a-security-group the server is attached to.\n\n\n\u003e **Important:** When updating `placement_group_id` the `state` must be set to `stopped`, otherwise it will fail.\n"
                },
                "placementGroupPolicyRespected": {
                    "type": "boolean",
                    "description": "True when the placement group policy is respected.\n"
                },
                "privateIp": {
                    "type": "string",
                    "description": "The Scaleway internal IP address of the server.\n"
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceServerPrivateNetwork:InstanceServerPrivateNetwork"
                    },
                    "description": "The private network associated with the server.\nUse the `pn_id` key to attach a [private_network](https://www.scaleway.com/en/developers/api/instance/#path-private-nics-list-all-private-nics) on your instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the server is associated with.\n"
                },
                "publicIp": {
                    "type": "string",
                    "description": "The public IP address of the server (Deprecated use `public_ips` instead).\n",
                    "deprecationMessage": "Use public_ips instead"
                },
                "publicIps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceServerPublicIp:InstanceServerPublicIp"
                    },
                    "description": "The list of public IPs of the server.\n"
                },
                "replaceOnTypeChange": {
                    "type": "boolean",
                    "description": "If true, the server will be replaced if `type` is changed. Otherwise, the server will migrate.\n"
                },
                "rootVolume": {
                    "$ref": "#/types/scaleway:index/InstanceServerRootVolume:InstanceServerRootVolume",
                    "description": "Root [volume](https://www.scaleway.com/en/developers/api/instance/#path-volume-types-list-volume-types) attached to the server on creation.\n"
                },
                "routedIpEnabled": {
                    "type": "boolean",
                    "description": "If true, the server will support routed ips only. Changing it to true will migrate the server and its IP to routed type.\n\n\u003e **Important:** Enabling routed ip will restart the server\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The [security group](https://www.scaleway.com/en/developers/api/instance/#path-security-groups-update-a-security-group9) the server is attached to.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the server. Possible values are: `started`, `stopped` or `standby`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the server.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The commercial type of the server.\nYou find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).\nUpdates to this field will migrate the server, local storage constraint must be respected. [More info](https://www.scaleway.com/en/docs/compute/instances/api-cli/migrating-instances/).\nUse `replace_on_type_change` to trigger replacement instead of migration.\n\n\u003e **Important:** If `type` change and migration occurs, the server will be stopped and changed backed to its original state. It will be started again if it was running.\n"
                },
                "userData": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The user data associated with the server.\nUse the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.\nYou can define values using:\n- string\n- UTF-8 encoded file content using file\n- Binary files using filebase64.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server should be created.\n"
                }
            },
            "required": [
                "bootscriptId",
                "cloudInit",
                "ipv6Address",
                "ipv6Gateway",
                "ipv6PrefixLength",
                "name",
                "organizationId",
                "placementGroupPolicyRespected",
                "privateIp",
                "projectId",
                "publicIp",
                "publicIps",
                "rootVolume",
                "routedIpEnabled",
                "securityGroupId",
                "type",
                "userData",
                "zone"
            ],
            "inputProperties": {
                "additionalVolumeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The [additional volumes](https://www.scaleway.com/en/developers/api/instance/#path-volume-types-list-volume-types)\nattached to the server. Updates to this field will trigger a stop/start of the server.\n\n\u003e **Important:** If this field contains local volumes, the `state` must be set to `stopped`, otherwise it will fail.\n\n\u003e **Important:** If this field contains local volumes, you have to first detach them, in one apply, and then delete the volume in another apply.\n"
                },
                "bootType": {
                    "type": "string",
                    "description": "The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.\n"
                },
                "bootscriptId": {
                    "type": "string",
                    "description": "The ID of the bootscript to use  (set boot_type to `bootscript`).\n",
                    "deprecationMessage": "bootscript is not supported anymore."
                },
                "cloudInit": {
                    "type": "string",
                    "description": "The cloud init script associated with this server\n"
                },
                "enableDynamicIp": {
                    "type": "boolean",
                    "description": "If true a dynamic IP will be attached to the server.\n"
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "Determines if IPv6 is enabled for the server. Useful only with `routed_ip_enabled` as false, otherwise ipv6 is always supported.\nDeprecated: Please use a scaleway.InstanceIp with a `routed_ipv6` type.\n",
                    "deprecationMessage": "Please use a scaleway.InstanceIp with a `routed_ipv6` type"
                },
                "image": {
                    "type": "string",
                    "description": "The UUID or the label of the base image used by the server. You can use [this endpoint](https://www.scaleway.com/en/developers/api/marketplace/#path-marketplace-images-list-marketplace-images)\nto find either the right `label` or the right local image `ID` for a given `type`. Optional when creating an instance with an existing root volume.\n\nYou can check the available labels with our [CLI](https://www.scaleway.com/en/docs/compute/instances/api-cli/creating-managing-instances-with-cliv2/). ```scw marketplace image list```\n\nTo retrieve more information by label please use: ```scw marketplace image get label=\u003cLABEL\u003e```\n"
                },
                "ipId": {
                    "type": "string",
                    "description": "The ID of the reserved IP that is attached to the server.\n"
                },
                "ipIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of ID of reserved IPs that are attached to the server. Cannot be used with `ip_id`.\n\n\u003e `ip_id` to `ip_ids` migration: if moving the ip from the old `ip_id` field to the new `ip_ids`, it should not detach the ip.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server.\n"
                },
                "placementGroupId": {
                    "type": "string",
                    "description": "The [placement group](https://www.scaleway.com/en/developers/api/instance/#path-security-groups-update-a-security-group the server is attached to.\n\n\n\u003e **Important:** When updating `placement_group_id` the `state` must be set to `stopped`, otherwise it will fail.\n"
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceServerPrivateNetwork:InstanceServerPrivateNetwork"
                    },
                    "description": "The private network associated with the server.\nUse the `pn_id` key to attach a [private_network](https://www.scaleway.com/en/developers/api/instance/#path-private-nics-list-all-private-nics) on your instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the server is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "publicIps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/InstanceServerPublicIp:InstanceServerPublicIp"
                    },
                    "description": "The list of public IPs of the server.\n"
                },
                "replaceOnTypeChange": {
                    "type": "boolean",
                    "description": "If true, the server will be replaced if `type` is changed. Otherwise, the server will migrate.\n"
                },
                "rootVolume": {
                    "$ref": "#/types/scaleway:index/InstanceServerRootVolume:InstanceServerRootVolume",
                    "description": "Root [volume](https://www.scaleway.com/en/developers/api/instance/#path-volume-types-list-volume-types) attached to the server on creation.\n"
                },
                "routedIpEnabled": {
                    "type": "boolean",
                    "description": "If true, the server will support routed ips only. Changing it to true will migrate the server and its IP to routed type.\n\n\u003e **Important:** Enabling routed ip will restart the server\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The [security group](https://www.scaleway.com/en/developers/api/instance/#path-security-groups-update-a-security-group9) the server is attached to.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the server. Possible values are: `started`, `stopped` or `standby`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the server.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The commercial type of the server.\nYou find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).\nUpdates to this field will migrate the server, local storage constraint must be respected. [More info](https://www.scaleway.com/en/docs/compute/instances/api-cli/migrating-instances/).\nUse `replace_on_type_change` to trigger replacement instead of migration.\n\n\u003e **Important:** If `type` change and migration occurs, the server will be stopped and changed backed to its original state. It will be started again if it was running.\n"
                },
                "userData": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The user data associated with the server.\nUse the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.\nYou can define values using:\n- string\n- UTF-8 encoded file content using file\n- Binary files using filebase64.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceServer resources.\n",
                "properties": {
                    "additionalVolumeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The [additional volumes](https://www.scaleway.com/en/developers/api/instance/#path-volume-types-list-volume-types)\nattached to the server. Updates to this field will trigger a stop/start of the server.\n\n\u003e **Important:** If this field contains local volumes, the `state` must be set to `stopped`, otherwise it will fail.\n\n\u003e **Important:** If this field contains local volumes, you have to first detach them, in one apply, and then delete the volume in another apply.\n"
                    },
                    "bootType": {
                        "type": "string",
                        "description": "The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.\n"
                    },
                    "bootscriptId": {
                        "type": "string",
                        "description": "The ID of the bootscript to use  (set boot_type to `bootscript`).\n",
                        "deprecationMessage": "bootscript is not supported anymore."
                    },
                    "cloudInit": {
                        "type": "string",
                        "description": "The cloud init script associated with this server\n"
                    },
                    "enableDynamicIp": {
                        "type": "boolean",
                        "description": "If true a dynamic IP will be attached to the server.\n"
                    },
                    "enableIpv6": {
                        "type": "boolean",
                        "description": "Determines if IPv6 is enabled for the server. Useful only with `routed_ip_enabled` as false, otherwise ipv6 is always supported.\nDeprecated: Please use a scaleway.InstanceIp with a `routed_ipv6` type.\n",
                        "deprecationMessage": "Please use a scaleway.InstanceIp with a `routed_ipv6` type"
                    },
                    "image": {
                        "type": "string",
                        "description": "The UUID or the label of the base image used by the server. You can use [this endpoint](https://www.scaleway.com/en/developers/api/marketplace/#path-marketplace-images-list-marketplace-images)\nto find either the right `label` or the right local image `ID` for a given `type`. Optional when creating an instance with an existing root volume.\n\nYou can check the available labels with our [CLI](https://www.scaleway.com/en/docs/compute/instances/api-cli/creating-managing-instances-with-cliv2/). ```scw marketplace image list```\n\nTo retrieve more information by label please use: ```scw marketplace image get label=\u003cLABEL\u003e```\n"
                    },
                    "ipId": {
                        "type": "string",
                        "description": "The ID of the reserved IP that is attached to the server.\n"
                    },
                    "ipIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of ID of reserved IPs that are attached to the server. Cannot be used with `ip_id`.\n\n\u003e `ip_id` to `ip_ids` migration: if moving the ip from the old `ip_id` field to the new `ip_ids`, it should not detach the ip.\n"
                    },
                    "ipv6Address": {
                        "type": "string",
                        "description": "The default ipv6 address routed to the server. ( Only set when enable_ipv6 is set to true )\nDeprecated: Please use a scaleway.InstanceIp with a `routed_ipv6` type.\n",
                        "deprecationMessage": "Please use a scaleway.InstanceIp with a `routed_ipv6` type"
                    },
                    "ipv6Gateway": {
                        "type": "string",
                        "description": "The ipv6 gateway address. ( Only set when enable_ipv6 is set to true )\nDeprecated: Please use a scaleway.InstanceIp with a `routed_ipv6` type.\n",
                        "deprecationMessage": "Please use a scaleway.InstanceIp with a `routed_ipv6` type"
                    },
                    "ipv6PrefixLength": {
                        "type": "integer",
                        "description": "The prefix length of the ipv6 subnet routed to the server. ( Only set when enable_ipv6 is set to true )\nDeprecated: Please use a scaleway.InstanceIp with a `routed_ipv6` type.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the server.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the server is associated with.\n"
                    },
                    "placementGroupId": {
                        "type": "string",
                        "description": "The [placement group](https://www.scaleway.com/en/developers/api/instance/#path-security-groups-update-a-security-group the server is attached to.\n\n\n\u003e **Important:** When updating `placement_group_id` the `state` must be set to `stopped`, otherwise it will fail.\n"
                    },
                    "placementGroupPolicyRespected": {
                        "type": "boolean",
                        "description": "True when the placement group policy is respected.\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "The Scaleway internal IP address of the server.\n"
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/InstanceServerPrivateNetwork:InstanceServerPrivateNetwork"
                        },
                        "description": "The private network associated with the server.\nUse the `pn_id` key to attach a [private_network](https://www.scaleway.com/en/developers/api/instance/#path-private-nics-list-all-private-nics) on your instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the server is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicIp": {
                        "type": "string",
                        "description": "The public IP address of the server (Deprecated use `public_ips` instead).\n",
                        "deprecationMessage": "Use public_ips instead"
                    },
                    "publicIps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/InstanceServerPublicIp:InstanceServerPublicIp"
                        },
                        "description": "The list of public IPs of the server.\n"
                    },
                    "replaceOnTypeChange": {
                        "type": "boolean",
                        "description": "If true, the server will be replaced if `type` is changed. Otherwise, the server will migrate.\n"
                    },
                    "rootVolume": {
                        "$ref": "#/types/scaleway:index/InstanceServerRootVolume:InstanceServerRootVolume",
                        "description": "Root [volume](https://www.scaleway.com/en/developers/api/instance/#path-volume-types-list-volume-types) attached to the server on creation.\n"
                    },
                    "routedIpEnabled": {
                        "type": "boolean",
                        "description": "If true, the server will support routed ips only. Changing it to true will migrate the server and its IP to routed type.\n\n\u003e **Important:** Enabling routed ip will restart the server\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "The [security group](https://www.scaleway.com/en/developers/api/instance/#path-security-groups-update-a-security-group9) the server is attached to.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the server. Possible values are: `started`, `stopped` or `standby`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the server.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The commercial type of the server.\nYou find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).\nUpdates to this field will migrate the server, local storage constraint must be respected. [More info](https://www.scaleway.com/en/docs/compute/instances/api-cli/migrating-instances/).\nUse `replace_on_type_change` to trigger replacement instead of migration.\n\n\u003e **Important:** If `type` change and migration occurs, the server will be stopped and changed backed to its original state. It will be started again if it was running.\n"
                    },
                    "userData": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The user data associated with the server.\nUse the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.\nYou can define values using:\n- string\n- UTF-8 encoded file content using file\n- Binary files using filebase64.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the server should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceSnapshot:InstanceSnapshot": {
            "description": "Creates and manages Scaleway Compute Snapshots.\nFor more information,\nsee [the documentation](https://www.scaleway.com/en/developers/api/instance/#path-snapshots-list-snapshots).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.InstanceSnapshot(\"main\", {\n    name: \"some-snapshot-name\",\n    volumeId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.InstanceSnapshot(\"main\",\n    name=\"some-snapshot-name\",\n    volume_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.InstanceSnapshot(\"main\", new()\n    {\n        Name = \"some-snapshot-name\",\n        VolumeId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstanceSnapshot(ctx, \"main\", \u0026scaleway.InstanceSnapshotArgs{\n\t\t\tName:     pulumi.String(\"some-snapshot-name\"),\n\t\t\tVolumeId: pulumi.String(\"11111111-1111-1111-1111-111111111111\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceSnapshot;\nimport com.pulumi.scaleway.InstanceSnapshotArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new InstanceSnapshot(\"main\", InstanceSnapshotArgs.builder()\n            .name(\"some-snapshot-name\")\n            .volumeId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:InstanceSnapshot\n    properties:\n      name: some-snapshot-name\n      volumeId: 11111111-1111-1111-1111-111111111111\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Example with Unified type snapshot\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.InstanceVolume(\"main\", {\n    type: \"l_ssd\",\n    sizeInGb: 10,\n});\nconst mainInstanceServer = new scaleway.InstanceServer(\"main\", {\n    image: \"ubuntu_jammy\",\n    type: \"DEV1-S\",\n    rootVolume: {\n        sizeInGb: 10,\n        volumeType: \"l_ssd\",\n    },\n    additionalVolumeIds: [main.id],\n});\nconst mainInstanceSnapshot = new scaleway.InstanceSnapshot(\"main\", {\n    volumeId: main.id,\n    type: \"unified\",\n}, {\n    dependsOn: [mainInstanceServer],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.InstanceVolume(\"main\",\n    type=\"l_ssd\",\n    size_in_gb=10)\nmain_instance_server = scaleway.InstanceServer(\"main\",\n    image=\"ubuntu_jammy\",\n    type=\"DEV1-S\",\n    root_volume={\n        \"size_in_gb\": 10,\n        \"volume_type\": \"l_ssd\",\n    },\n    additional_volume_ids=[main.id])\nmain_instance_snapshot = scaleway.InstanceSnapshot(\"main\",\n    volume_id=main.id,\n    type=\"unified\",\n    opts = pulumi.ResourceOptions(depends_on=[main_instance_server]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.InstanceVolume(\"main\", new()\n    {\n        Type = \"l_ssd\",\n        SizeInGb = 10,\n    });\n\n    var mainInstanceServer = new Scaleway.InstanceServer(\"main\", new()\n    {\n        Image = \"ubuntu_jammy\",\n        Type = \"DEV1-S\",\n        RootVolume = new Scaleway.Inputs.InstanceServerRootVolumeArgs\n        {\n            SizeInGb = 10,\n            VolumeType = \"l_ssd\",\n        },\n        AdditionalVolumeIds = new[]\n        {\n            main.Id,\n        },\n    });\n\n    var mainInstanceSnapshot = new Scaleway.InstanceSnapshot(\"main\", new()\n    {\n        VolumeId = main.Id,\n        Type = \"unified\",\n    }, new CustomResourceOptions\n    {\n        DependsOn =\n        {\n            mainInstanceServer,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewInstanceVolume(ctx, \"main\", \u0026scaleway.InstanceVolumeArgs{\n\t\t\tType:     pulumi.String(\"l_ssd\"),\n\t\t\tSizeInGb: pulumi.Int(10),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainInstanceServer, err := scaleway.NewInstanceServer(ctx, \"main\", \u0026scaleway.InstanceServerArgs{\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tRootVolume: \u0026scaleway.InstanceServerRootVolumeArgs{\n\t\t\t\tSizeInGb:   pulumi.Int(10),\n\t\t\t\tVolumeType: pulumi.String(\"l_ssd\"),\n\t\t\t},\n\t\t\tAdditionalVolumeIds: pulumi.StringArray{\n\t\t\t\tmain.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceSnapshot(ctx, \"main\", \u0026scaleway.InstanceSnapshotArgs{\n\t\t\tVolumeId: main.ID(),\n\t\t\tType:     pulumi.String(\"unified\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmainInstanceServer,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceVolume;\nimport com.pulumi.scaleway.InstanceVolumeArgs;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.inputs.InstanceServerRootVolumeArgs;\nimport com.pulumi.scaleway.InstanceSnapshot;\nimport com.pulumi.scaleway.InstanceSnapshotArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new InstanceVolume(\"main\", InstanceVolumeArgs.builder()\n            .type(\"l_ssd\")\n            .sizeInGb(10)\n            .build());\n\n        var mainInstanceServer = new InstanceServer(\"mainInstanceServer\", InstanceServerArgs.builder()\n            .image(\"ubuntu_jammy\")\n            .type(\"DEV1-S\")\n            .rootVolume(InstanceServerRootVolumeArgs.builder()\n                .sizeInGb(10)\n                .volumeType(\"l_ssd\")\n                .build())\n            .additionalVolumeIds(main.id())\n            .build());\n\n        var mainInstanceSnapshot = new InstanceSnapshot(\"mainInstanceSnapshot\", InstanceSnapshotArgs.builder()\n            .volumeId(main.id())\n            .type(\"unified\")\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(mainInstanceServer)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:InstanceVolume\n    properties:\n      type: l_ssd\n      sizeInGb: 10\n  mainInstanceServer:\n    type: scaleway:InstanceServer\n    name: main\n    properties:\n      image: ubuntu_jammy\n      type: DEV1-S\n      rootVolume:\n        sizeInGb: 10\n        volumeType: l_ssd\n      additionalVolumeIds:\n        - ${main.id}\n  mainInstanceSnapshot:\n    type: scaleway:InstanceSnapshot\n    name: main\n    properties:\n      volumeId: ${main.id}\n      type: unified\n    options:\n      dependson:\n        - ${mainInstanceServer}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Example importing a local qcow2 file\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst bucket = new scaleway.ObjectBucket(\"bucket\", {name: \"snapshot-qcow-import\"});\nconst qcow = new scaleway.ObjectItem(\"qcow\", {\n    bucket: bucket.name,\n    key: \"server.qcow2\",\n    file: \"myqcow.qcow2\",\n});\nconst snapshot = new scaleway.InstanceSnapshot(\"snapshot\", {\n    type: \"unified\",\n    \"import\": {\n        bucket: qcow.bucket,\n        key: qcow.key,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nbucket = scaleway.ObjectBucket(\"bucket\", name=\"snapshot-qcow-import\")\nqcow = scaleway.ObjectItem(\"qcow\",\n    bucket=bucket.name,\n    key=\"server.qcow2\",\n    file=\"myqcow.qcow2\")\nsnapshot = scaleway.InstanceSnapshot(\"snapshot\",\n    type=\"unified\",\n    import_={\n        \"bucket\": qcow.bucket,\n        \"key\": qcow.key,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var bucket = new Scaleway.ObjectBucket(\"bucket\", new()\n    {\n        Name = \"snapshot-qcow-import\",\n    });\n\n    var qcow = new Scaleway.ObjectItem(\"qcow\", new()\n    {\n        Bucket = bucket.Name,\n        Key = \"server.qcow2\",\n        File = \"myqcow.qcow2\",\n    });\n\n    var snapshot = new Scaleway.InstanceSnapshot(\"snapshot\", new()\n    {\n        Type = \"unified\",\n        Import = new Scaleway.Inputs.InstanceSnapshotImportArgs\n        {\n            Bucket = qcow.Bucket,\n            Key = qcow.Key,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tbucket, err := scaleway.NewObjectBucket(ctx, \"bucket\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tName: pulumi.String(\"snapshot-qcow-import\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tqcow, err := scaleway.NewObjectItem(ctx, \"qcow\", \u0026scaleway.ObjectItemArgs{\n\t\t\tBucket: bucket.Name,\n\t\t\tKey:    pulumi.String(\"server.qcow2\"),\n\t\t\tFile:   pulumi.String(\"myqcow.qcow2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewInstanceSnapshot(ctx, \"snapshot\", \u0026scaleway.InstanceSnapshotArgs{\n\t\t\tType: pulumi.String(\"unified\"),\n\t\t\tImport: \u0026scaleway.InstanceSnapshotImportArgs{\n\t\t\t\tBucket: qcow.Bucket,\n\t\t\t\tKey:    qcow.Key,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketArgs;\nimport com.pulumi.scaleway.ObjectItem;\nimport com.pulumi.scaleway.ObjectItemArgs;\nimport com.pulumi.scaleway.InstanceSnapshot;\nimport com.pulumi.scaleway.InstanceSnapshotArgs;\nimport com.pulumi.scaleway.inputs.InstanceSnapshotImportArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var bucket = new ObjectBucket(\"bucket\", ObjectBucketArgs.builder()\n            .name(\"snapshot-qcow-import\")\n            .build());\n\n        var qcow = new ObjectItem(\"qcow\", ObjectItemArgs.builder()\n            .bucket(bucket.name())\n            .key(\"server.qcow2\")\n            .file(\"myqcow.qcow2\")\n            .build());\n\n        var snapshot = new InstanceSnapshot(\"snapshot\", InstanceSnapshotArgs.builder()\n            .type(\"unified\")\n            .import_(InstanceSnapshotImportArgs.builder()\n                .bucket(qcow.bucket())\n                .key(qcow.key())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  bucket:\n    type: scaleway:ObjectBucket\n    properties:\n      name: snapshot-qcow-import\n  qcow:\n    type: scaleway:ObjectItem\n    properties:\n      bucket: ${bucket.name}\n      key: server.qcow2\n      file: myqcow.qcow2\n  snapshot:\n    type: scaleway:InstanceSnapshot\n    properties:\n      type: unified\n      import:\n        bucket: ${qcow.bucket}\n        key: ${qcow.key}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nSnapshots can be imported using the `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/instanceSnapshot:InstanceSnapshot main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The snapshot creation time.\n"
                },
                "import": {
                    "$ref": "#/types/scaleway:index/InstanceSnapshotImport:InstanceSnapshotImport",
                    "description": "Import a snapshot from a qcow2 file located in a bucket\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the snapshot. If not provided it will be randomly generated.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the snapshot is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the snapshot is\nassociated with.\n"
                },
                "sizeInGb": {
                    "type": "integer",
                    "description": "(Optional) The size of the snapshot.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the snapshot.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The snapshot's volume type.  The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD) and `unified`.\nUpdates to this field will recreate a new resource.\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "The ID of the volume to take a snapshot from.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which\nthe snapshot should be created.\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "organizationId",
                "projectId",
                "sizeInGb",
                "type",
                "zone"
            ],
            "inputProperties": {
                "import": {
                    "$ref": "#/types/scaleway:index/InstanceSnapshotImport:InstanceSnapshotImport",
                    "description": "Import a snapshot from a qcow2 file located in a bucket\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the snapshot. If not provided it will be randomly generated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the snapshot is\nassociated with.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the snapshot.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The snapshot's volume type.  The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD) and `unified`.\nUpdates to this field will recreate a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "volumeId": {
                    "type": "string",
                    "description": "The ID of the volume to take a snapshot from.\n",
                    "willReplaceOnChanges": true
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which\nthe snapshot should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceSnapshot resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The snapshot creation time.\n"
                    },
                    "import": {
                        "$ref": "#/types/scaleway:index/InstanceSnapshotImport:InstanceSnapshotImport",
                        "description": "Import a snapshot from a qcow2 file located in a bucket\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the snapshot. If not provided it will be randomly generated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the snapshot is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the snapshot is\nassociated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "sizeInGb": {
                        "type": "integer",
                        "description": "(Optional) The size of the snapshot.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags to apply to the snapshot.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The snapshot's volume type.  The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD) and `unified`.\nUpdates to this field will recreate a new resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "volumeId": {
                        "type": "string",
                        "description": "The ID of the volume to take a snapshot from.\n",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which\nthe snapshot should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceUserData:InstanceUserData": {
            "description": "Creates and manages Scaleway compute Instance User Data values.\n\nUser data is a key value store API you can use to provide data from and to your server without authentication. It is the mechanism by which a user can pass information contained in a local file to an Instance at launch time.\n\nThe typical use case is to pass something like a shell script or a configuration file as user data.\n\nFor more information about [user_data](https://www.scaleway.com/en/developers/api/instance/#path-user-data-list-user-data)  check our documentation guide [here](https://www.scaleway.com/en/docs/compute/instances/how-to/use-boot-modes/#how-to-use-cloud-init).\n\nAbout cloud-init documentation please check this [link](https://cloudinit.readthedocs.io/en/latest/).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst config = new pulumi.Config();\nconst userData = config.getObject\u003cRecord\u003cstring, any\u003e\u003e(\"userData\") || {\n    \"cloud-init\": `#cloud-config\napt-update: true\napt-upgrade: true\n`,\n    foo: \"bar\",\n};\nconst mainInstanceServer = new scaleway.InstanceServer(\"main\", {\n    image: \"ubuntu_focal\",\n    type: \"DEV1-S\",\n});\n// User data with a single value\nconst main = new scaleway.InstanceUserData(\"main\", {\n    serverId: mainInstanceServer.id,\n    key: \"foo\",\n    value: \"bar\",\n});\n// User Data with many keys.\nconst data: scaleway.InstanceUserData[] = [];\nfor (const range of Object.entries(userData).map(([k, v]) =\u003e ({key: k, value: v}))) {\n    data.push(new scaleway.InstanceUserData(`data-${range.key}`, {\n        serverId: mainInstanceServer.id,\n        key: range.key,\n        value: range.value,\n    }));\n}\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nconfig = pulumi.Config()\nuser_data = config.get_object(\"userData\")\nif user_data is None:\n    user_data = {\n        \"cloud-init\": \"\"\"#cloud-config\napt-update: true\napt-upgrade: true\n\"\"\",\n        \"foo\": \"bar\",\n    }\nmain_instance_server = scaleway.InstanceServer(\"main\",\n    image=\"ubuntu_focal\",\n    type=\"DEV1-S\")\n# User data with a single value\nmain = scaleway.InstanceUserData(\"main\",\n    server_id=main_instance_server.id,\n    key=\"foo\",\n    value=\"bar\")\n# User Data with many keys.\ndata = []\nfor range in [{\"key\": k, \"value\": v} for [k, v] in enumerate(user_data)]:\n    data.append(scaleway.InstanceUserData(f\"data-{range['key']}\",\n        server_id=main_instance_server.id,\n        key=range[\"key\"],\n        value=range[\"value\"]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var userData = config.GetObject\u003cDictionary\u003cstring, dynamic\u003e\u003e(\"userData\") ?? \n    {\n        { \"cloud-init\", @\"#cloud-config\napt-update: true\napt-upgrade: true\n\" },\n        { \"foo\", \"bar\" },\n    };\n    var mainInstanceServer = new Scaleway.InstanceServer(\"main\", new()\n    {\n        Image = \"ubuntu_focal\",\n        Type = \"DEV1-S\",\n    });\n\n    // User data with a single value\n    var main = new Scaleway.InstanceUserData(\"main\", new()\n    {\n        ServerId = mainInstanceServer.Id,\n        Key = \"foo\",\n        Value = \"bar\",\n    });\n\n    // User Data with many keys.\n    var data = new List\u003cScaleway.InstanceUserData\u003e();\n    foreach (var range in userData.Select(pair =\u003e new { pair.Key, pair.Value }))\n    {\n        data.Add(new Scaleway.InstanceUserData($\"data-{range.Key}\", new()\n        {\n            ServerId = mainInstanceServer.Id,\n            Key = range.Key,\n            Value = range.Value,\n        }));\n    }\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tuserData := map[string]interface{}{\n\t\t\t\"cloud-init\": \"#cloud-config\\napt-update: true\\napt-upgrade: true\\n\",\n\t\t\t\"foo\":        \"bar\",\n\t\t}\n\t\tif param := cfg.GetObject(\"userData\"); param != nil {\n\t\t\tuserData = param\n\t\t}\n\t\tmainInstanceServer, err := scaleway.NewInstanceServer(ctx, \"main\", \u0026scaleway.InstanceServerArgs{\n\t\t\tImage: pulumi.String(\"ubuntu_focal\"),\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// User data with a single value\n\t\t_, err = scaleway.NewInstanceUserData(ctx, \"main\", \u0026scaleway.InstanceUserDataArgs{\n\t\t\tServerId: mainInstanceServer.ID(),\n\t\t\tKey:      pulumi.String(\"foo\"),\n\t\t\tValue:    pulumi.String(\"bar\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// User Data with many keys.\n\t\tvar data []*scaleway.InstanceUserData\n\t\tfor key0, val0 := range userData {\n\t\t\t__res, err := scaleway.NewInstanceUserData(ctx, fmt.Sprintf(\"data-%v\", key0), \u0026scaleway.InstanceUserDataArgs{\n\t\t\t\tServerId: mainInstanceServer.ID(),\n\t\t\t\tKey:      pulumi.String(key0),\n\t\t\t\tValue:    pulumi.Any(val0),\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tdata = append(data, __res)\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.InstanceUserData;\nimport com.pulumi.scaleway.InstanceUserDataArgs;\nimport com.pulumi.codegen.internal.KeyedValue;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var userData = config.get(\"userData\").orElse(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference));\n        var mainInstanceServer = new InstanceServer(\"mainInstanceServer\", InstanceServerArgs.builder()\n            .image(\"ubuntu_focal\")\n            .type(\"DEV1-S\")\n            .build());\n\n        // User data with a single value\n        var main = new InstanceUserData(\"main\", InstanceUserDataArgs.builder()\n            .serverId(mainInstanceServer.id())\n            .key(\"foo\")\n            .value(\"bar\")\n            .build());\n\n        // User Data with many keys.\n        for (var range : KeyedValue.of(userData)) {\n            new InstanceUserData(\"data-\" + range.key(), InstanceUserDataArgs.builder()\n                .serverId(mainInstanceServer.id())\n                .key(range.key())\n                .value(range.value())\n                .build());\n        }\n\n    }\n}\n```\n```yaml\nconfiguration:\n  userData:\n    type: map(dynamic)\n    default:\n      cloud-init: |\n        #cloud-config\n        apt-update: true\n        apt-upgrade: true\n      foo: bar\nresources:\n  # User data with a single value\n  main:\n    type: scaleway:InstanceUserData\n    properties:\n      serverId: ${mainInstanceServer.id}\n      key: foo\n      value: bar\n  # User Data with many keys.\n  data:\n    type: scaleway:InstanceUserData\n    properties:\n      serverId: ${mainInstanceServer.id}\n      key: ${range.key}\n      value: ${range.value}\n    options: {}\n  mainInstanceServer:\n    type: scaleway:InstanceServer\n    name: main\n    properties:\n      image: ubuntu_focal\n      type: DEV1-S\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUser data can be imported using the `{zone}/{key}/{server_id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/instanceUserData:InstanceUserData main fr-par-1/cloud-init/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key of the user data.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The ID of the server associated with.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value associated with your key\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server should be created.\n\n\u003e **Important:**   Use the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.\nYou can define values using:\n- string\n- UTF-8 encoded file content using file\n"
                }
            },
            "required": [
                "key",
                "serverId",
                "value",
                "zone"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "Key of the user data.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The ID of the server associated with.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value associated with your key\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the server should be created.\n\n\u003e **Important:**   Use the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.\nYou can define values using:\n- string\n- UTF-8 encoded file content using file\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "key",
                "serverId",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceUserData resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Key of the user data.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The ID of the server associated with.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value associated with your key\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the server should be created.\n\n\u003e **Important:**   Use the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.\nYou can define values using:\n- string\n- UTF-8 encoded file content using file\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/instanceVolume:InstanceVolume": {
            "description": "Creates and manages Scaleway compute Instance Volumes.\nFor more information, see [the documentation](https://www.scaleway.com/en/developers/api/instance/#path-volumes-list-volumes).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst serverVolume = new scaleway.InstanceVolume(\"server_volume\", {\n    type: \"l_ssd\",\n    name: \"some-volume-name\",\n    sizeInGb: 20,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nserver_volume = scaleway.InstanceVolume(\"server_volume\",\n    type=\"l_ssd\",\n    name=\"some-volume-name\",\n    size_in_gb=20)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var serverVolume = new Scaleway.InstanceVolume(\"server_volume\", new()\n    {\n        Type = \"l_ssd\",\n        Name = \"some-volume-name\",\n        SizeInGb = 20,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewInstanceVolume(ctx, \"server_volume\", \u0026scaleway.InstanceVolumeArgs{\n\t\t\tType:     pulumi.String(\"l_ssd\"),\n\t\t\tName:     pulumi.String(\"some-volume-name\"),\n\t\t\tSizeInGb: pulumi.Int(20),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceVolume;\nimport com.pulumi.scaleway.InstanceVolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var serverVolume = new InstanceVolume(\"serverVolume\", InstanceVolumeArgs.builder()\n            .type(\"l_ssd\")\n            .name(\"some-volume-name\")\n            .sizeInGb(20)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  serverVolume:\n    type: scaleway:InstanceVolume\n    name: server_volume\n    properties:\n      type: l_ssd\n      name: some-volume-name\n      sizeInGb: 20\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nvolumes can be imported using the `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/instanceVolume:InstanceVolume server_volume fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "fromSnapshotId": {
                    "type": "string",
                    "description": "If set, the new volume will be created from this snapshot. Only one of `size_in_gb` and `from_snapshot_id` should be specified.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the volume. If not provided it will be randomly generated.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the volume is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the volume is associated with.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The id of the associated server.\n"
                },
                "sizeInGb": {
                    "type": "integer",
                    "description": "The size of the volume. Only one of `size_in_gb` and `from_snapshot_id` should be specified.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the volume.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the volume. The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD), `scratch` (Local Scratch SSD).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the volume should be created.\n"
                }
            },
            "required": [
                "name",
                "organizationId",
                "projectId",
                "serverId",
                "type",
                "zone"
            ],
            "inputProperties": {
                "fromSnapshotId": {
                    "type": "string",
                    "description": "If set, the new volume will be created from this snapshot. Only one of `size_in_gb` and `from_snapshot_id` should be specified.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the volume. If not provided it will be randomly generated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the volume is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "sizeInGb": {
                    "type": "integer",
                    "description": "The size of the volume. Only one of `size_in_gb` and `from_snapshot_id` should be specified.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the volume.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the volume. The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD), `scratch` (Local Scratch SSD).\n",
                    "willReplaceOnChanges": true
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the volume should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceVolume resources.\n",
                "properties": {
                    "fromSnapshotId": {
                        "type": "string",
                        "description": "If set, the new volume will be created from this snapshot. Only one of `size_in_gb` and `from_snapshot_id` should be specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the volume. If not provided it will be randomly generated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the volume is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the volume is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The id of the associated server.\n"
                    },
                    "sizeInGb": {
                        "type": "integer",
                        "description": "The size of the volume. Only one of `size_in_gb` and `from_snapshot_id` should be specified.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags to apply to the volume.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the volume. The possible values are: `b_ssd` (Block SSD), `l_ssd` (Local SSD), `scratch` (Local Scratch SSD).\n",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the volume should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iotDevice:IotDevice": {
            "description": "## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.IotHub(\"main\", {\n    name: \"test-iot\",\n    productPlan: \"plan_shared\",\n});\nconst mainIotDevice = new scaleway.IotDevice(\"main\", {\n    hubId: main.id,\n    name: \"test-iot\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.IotHub(\"main\",\n    name=\"test-iot\",\n    product_plan=\"plan_shared\")\nmain_iot_device = scaleway.IotDevice(\"main\",\n    hub_id=main.id,\n    name=\"test-iot\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.IotHub(\"main\", new()\n    {\n        Name = \"test-iot\",\n        ProductPlan = \"plan_shared\",\n    });\n\n    var mainIotDevice = new Scaleway.IotDevice(\"main\", new()\n    {\n        HubId = main.Id,\n        Name = \"test-iot\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewIotHub(ctx, \"main\", \u0026scaleway.IotHubArgs{\n\t\t\tName:        pulumi.String(\"test-iot\"),\n\t\t\tProductPlan: pulumi.String(\"plan_shared\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewIotDevice(ctx, \"main\", \u0026scaleway.IotDeviceArgs{\n\t\t\tHubId: main.ID(),\n\t\t\tName:  pulumi.String(\"test-iot\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.IotHub;\nimport com.pulumi.scaleway.IotHubArgs;\nimport com.pulumi.scaleway.IotDevice;\nimport com.pulumi.scaleway.IotDeviceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new IotHub(\"main\", IotHubArgs.builder()\n            .name(\"test-iot\")\n            .productPlan(\"plan_shared\")\n            .build());\n\n        var mainIotDevice = new IotDevice(\"mainIotDevice\", IotDeviceArgs.builder()\n            .hubId(main.id())\n            .name(\"test-iot\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:IotHub\n    properties:\n      name: test-iot\n      productPlan: plan_shared\n  mainIotDevice:\n    type: scaleway:IotDevice\n    name: main\n    properties:\n      hubId: ${main.id}\n      name: test-iot\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### With custom certificate\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as local from \"@pulumi/local\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.IotHub(\"main\", {\n    name: \"test-iot\",\n    productPlan: \"plan_shared\",\n});\nconst deviceCert = local.getFile({\n    filename: \"device-certificate.pem\",\n});\nconst mainIotDevice = new scaleway.IotDevice(\"main\", {\n    hubId: main.id,\n    name: \"test-iot\",\n    certificate: {\n        crt: deviceCert.then(deviceCert =\u003e deviceCert.content),\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_local as local\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.IotHub(\"main\",\n    name=\"test-iot\",\n    product_plan=\"plan_shared\")\ndevice_cert = local.get_file(filename=\"device-certificate.pem\")\nmain_iot_device = scaleway.IotDevice(\"main\",\n    hub_id=main.id,\n    name=\"test-iot\",\n    certificate={\n        \"crt\": device_cert.content,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Local = Pulumi.Local;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.IotHub(\"main\", new()\n    {\n        Name = \"test-iot\",\n        ProductPlan = \"plan_shared\",\n    });\n\n    var deviceCert = Local.GetFile.Invoke(new()\n    {\n        Filename = \"device-certificate.pem\",\n    });\n\n    var mainIotDevice = new Scaleway.IotDevice(\"main\", new()\n    {\n        HubId = main.Id,\n        Name = \"test-iot\",\n        Certificate = new Scaleway.Inputs.IotDeviceCertificateArgs\n        {\n            Crt = deviceCert.Apply(getFileResult =\u003e getFileResult.Content),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-local/sdk/go/local\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewIotHub(ctx, \"main\", \u0026scaleway.IotHubArgs{\n\t\t\tName:        pulumi.String(\"test-iot\"),\n\t\t\tProductPlan: pulumi.String(\"plan_shared\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdeviceCert, err := local.LookupFile(ctx, \u0026local.LookupFileArgs{\n\t\t\tFilename: \"device-certificate.pem\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewIotDevice(ctx, \"main\", \u0026scaleway.IotDeviceArgs{\n\t\t\tHubId: main.ID(),\n\t\t\tName:  pulumi.String(\"test-iot\"),\n\t\t\tCertificate: \u0026scaleway.IotDeviceCertificateArgs{\n\t\t\t\tCrt: pulumi.String(deviceCert.Content),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.IotHub;\nimport com.pulumi.scaleway.IotHubArgs;\nimport com.pulumi.local.LocalFunctions;\nimport com.pulumi.local.inputs.GetFileArgs;\nimport com.pulumi.scaleway.IotDevice;\nimport com.pulumi.scaleway.IotDeviceArgs;\nimport com.pulumi.scaleway.inputs.IotDeviceCertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new IotHub(\"main\", IotHubArgs.builder()\n            .name(\"test-iot\")\n            .productPlan(\"plan_shared\")\n            .build());\n\n        final var deviceCert = LocalFunctions.getFile(GetFileArgs.builder()\n            .filename(\"device-certificate.pem\")\n            .build());\n\n        var mainIotDevice = new IotDevice(\"mainIotDevice\", IotDeviceArgs.builder()\n            .hubId(main.id())\n            .name(\"test-iot\")\n            .certificate(IotDeviceCertificateArgs.builder()\n                .crt(deviceCert.applyValue(getFileResult -\u003e getFileResult.content()))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:IotHub\n    properties:\n      name: test-iot\n      productPlan: plan_shared\n  mainIotDevice:\n    type: scaleway:IotDevice\n    name: main\n    properties:\n      hubId: ${main.id}\n      name: test-iot\n      certificate:\n        crt: ${deviceCert.content}\nvariables:\n  deviceCert:\n    fn::invoke:\n      Function: local:getFile\n      Arguments:\n        filename: device-certificate.pem\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIoT devices can be imported using the `{region}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/iotDevice:IotDevice device01 fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "allowInsecure": {
                    "type": "boolean",
                    "description": "Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.\n\n\u003e **Important:** Updates to `allow_insecure` can disconnect eventually connected devices.\n"
                },
                "allowMultipleConnections": {
                    "type": "boolean",
                    "description": "Allow more than one simultaneous connection using the same device credentials.\n\n\u003e **Important:** Updates to `allow_multiple_connections` can disconnect eventually connected devices.\n"
                },
                "certificate": {
                    "$ref": "#/types/scaleway:index/IotDeviceCertificate:IotDeviceCertificate",
                    "description": "The certificate bundle of the device.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time the device was created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the IoT device (e.g. `living room`).\n"
                },
                "hubId": {
                    "type": "string",
                    "description": "The ID of the hub on which this device will be created.\n"
                },
                "isConnected": {
                    "type": "boolean",
                    "description": "The current connection status of the device.\n"
                },
                "lastActivityAt": {
                    "type": "string",
                    "description": "The last MQTT activity of the device.\n"
                },
                "messageFilters": {
                    "$ref": "#/types/scaleway:index/IotDeviceMessageFilters:IotDeviceMessageFilters",
                    "description": "Rules that define which messages are authorized or denied based on their topic.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IoT device you want to create (e.g. `my-device`).\n\n\u003e **Important:** Updates to `name` will destroy and recreate a new resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the device.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time the device resource was updated.\n"
                }
            },
            "required": [
                "certificate",
                "createdAt",
                "hubId",
                "isConnected",
                "lastActivityAt",
                "name",
                "region",
                "status",
                "updatedAt"
            ],
            "inputProperties": {
                "allowInsecure": {
                    "type": "boolean",
                    "description": "Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.\n\n\u003e **Important:** Updates to `allow_insecure` can disconnect eventually connected devices.\n"
                },
                "allowMultipleConnections": {
                    "type": "boolean",
                    "description": "Allow more than one simultaneous connection using the same device credentials.\n\n\u003e **Important:** Updates to `allow_multiple_connections` can disconnect eventually connected devices.\n"
                },
                "certificate": {
                    "$ref": "#/types/scaleway:index/IotDeviceCertificate:IotDeviceCertificate",
                    "description": "The certificate bundle of the device.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the IoT device (e.g. `living room`).\n"
                },
                "hubId": {
                    "type": "string",
                    "description": "The ID of the hub on which this device will be created.\n"
                },
                "messageFilters": {
                    "$ref": "#/types/scaleway:index/IotDeviceMessageFilters:IotDeviceMessageFilters",
                    "description": "Rules that define which messages are authorized or denied based on their topic.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IoT device you want to create (e.g. `my-device`).\n\n\u003e **Important:** Updates to `name` will destroy and recreate a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "hubId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IotDevice resources.\n",
                "properties": {
                    "allowInsecure": {
                        "type": "boolean",
                        "description": "Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.\n\n\u003e **Important:** Updates to `allow_insecure` can disconnect eventually connected devices.\n"
                    },
                    "allowMultipleConnections": {
                        "type": "boolean",
                        "description": "Allow more than one simultaneous connection using the same device credentials.\n\n\u003e **Important:** Updates to `allow_multiple_connections` can disconnect eventually connected devices.\n"
                    },
                    "certificate": {
                        "$ref": "#/types/scaleway:index/IotDeviceCertificate:IotDeviceCertificate",
                        "description": "The certificate bundle of the device.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time the device was created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the IoT device (e.g. `living room`).\n"
                    },
                    "hubId": {
                        "type": "string",
                        "description": "The ID of the hub on which this device will be created.\n"
                    },
                    "isConnected": {
                        "type": "boolean",
                        "description": "The current connection status of the device.\n"
                    },
                    "lastActivityAt": {
                        "type": "string",
                        "description": "The last MQTT activity of the device.\n"
                    },
                    "messageFilters": {
                        "$ref": "#/types/scaleway:index/IotDeviceMessageFilters:IotDeviceMessageFilters",
                        "description": "Rules that define which messages are authorized or denied based on their topic.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IoT device you want to create (e.g. `my-device`).\n\n\u003e **Important:** Updates to `name` will destroy and recreate a new resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of the device.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time the device resource was updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iotHub:IotHub": {
            "description": "## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.IotHub(\"main\", {\n    name: \"test-iot\",\n    productPlan: \"plan_shared\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.IotHub(\"main\",\n    name=\"test-iot\",\n    product_plan=\"plan_shared\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.IotHub(\"main\", new()\n    {\n        Name = \"test-iot\",\n        ProductPlan = \"plan_shared\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewIotHub(ctx, \"main\", \u0026scaleway.IotHubArgs{\n\t\t\tName:        pulumi.String(\"test-iot\"),\n\t\t\tProductPlan: pulumi.String(\"plan_shared\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.IotHub;\nimport com.pulumi.scaleway.IotHubArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new IotHub(\"main\", IotHubArgs.builder()\n            .name(\"test-iot\")\n            .productPlan(\"plan_shared\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:IotHub\n    properties:\n      name: test-iot\n      productPlan: plan_shared\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIoT Hubs can be imported using the `{region}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/iotHub:IotHub hub01 fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "connectedDeviceCount": {
                    "type": "integer",
                    "description": "The current number of connected devices in the Hub.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time the Hub was created.\n"
                },
                "deviceAutoProvisioning": {
                    "type": "boolean",
                    "description": "Wether to enable the device auto provisioning or not\n"
                },
                "deviceCount": {
                    "type": "integer",
                    "description": "The number of registered devices in the Hub.\n"
                },
                "disableEvents": {
                    "type": "boolean",
                    "description": "Whether to enable the hub events or not\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Wether the IoT Hub instance should be enabled or not.\n\n\u003e **Important:** Updates to `enabled` will disconnect eventually connected devices.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The MQTT network endpoint to connect MQTT devices to.\n"
                },
                "eventsTopicPrefix": {
                    "type": "string",
                    "description": "Topic prefix for the hub events\n"
                },
                "hubCa": {
                    "type": "string",
                    "description": "Custom user provided certificate authority\n"
                },
                "hubCaChallenge": {
                    "type": "string",
                    "description": "Challenge certificate for the user provided hub CA\n"
                },
                "mqttCa": {
                    "type": "string",
                    "description": "The MQTT certificat content\n"
                },
                "mqttCaUrl": {
                    "type": "string",
                    "description": "The MQTT ca url\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IoT Hub instance you want to create (e.g. `my-hub`).\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "productPlan": {
                    "type": "string",
                    "description": "Product plan to create the hub, see documentation for available product plans (e.g. `plan_shared`)\n\n\u003e **Important:** Updates to `product_plan` will recreate the IoT Hub Instance.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the IoT Hub Instance is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the Database Instance should be created.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the Hub.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time the Hub resource was updated.\n"
                }
            },
            "required": [
                "connectedDeviceCount",
                "createdAt",
                "deviceCount",
                "endpoint",
                "mqttCa",
                "mqttCaUrl",
                "name",
                "organizationId",
                "productPlan",
                "projectId",
                "region",
                "status",
                "updatedAt"
            ],
            "inputProperties": {
                "deviceAutoProvisioning": {
                    "type": "boolean",
                    "description": "Wether to enable the device auto provisioning or not\n"
                },
                "disableEvents": {
                    "type": "boolean",
                    "description": "Whether to enable the hub events or not\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Wether the IoT Hub instance should be enabled or not.\n\n\u003e **Important:** Updates to `enabled` will disconnect eventually connected devices.\n"
                },
                "eventsTopicPrefix": {
                    "type": "string",
                    "description": "Topic prefix for the hub events\n"
                },
                "hubCa": {
                    "type": "string",
                    "description": "Custom user provided certificate authority\n"
                },
                "hubCaChallenge": {
                    "type": "string",
                    "description": "Challenge certificate for the user provided hub CA\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IoT Hub instance you want to create (e.g. `my-hub`).\n"
                },
                "productPlan": {
                    "type": "string",
                    "description": "Product plan to create the hub, see documentation for available product plans (e.g. `plan_shared`)\n\n\u003e **Important:** Updates to `product_plan` will recreate the IoT Hub Instance.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the IoT Hub Instance is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the Database Instance should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "productPlan"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IotHub resources.\n",
                "properties": {
                    "connectedDeviceCount": {
                        "type": "integer",
                        "description": "The current number of connected devices in the Hub.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time the Hub was created.\n"
                    },
                    "deviceAutoProvisioning": {
                        "type": "boolean",
                        "description": "Wether to enable the device auto provisioning or not\n"
                    },
                    "deviceCount": {
                        "type": "integer",
                        "description": "The number of registered devices in the Hub.\n"
                    },
                    "disableEvents": {
                        "type": "boolean",
                        "description": "Whether to enable the hub events or not\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Wether the IoT Hub instance should be enabled or not.\n\n\u003e **Important:** Updates to `enabled` will disconnect eventually connected devices.\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The MQTT network endpoint to connect MQTT devices to.\n"
                    },
                    "eventsTopicPrefix": {
                        "type": "string",
                        "description": "Topic prefix for the hub events\n"
                    },
                    "hubCa": {
                        "type": "string",
                        "description": "Custom user provided certificate authority\n"
                    },
                    "hubCaChallenge": {
                        "type": "string",
                        "description": "Challenge certificate for the user provided hub CA\n"
                    },
                    "mqttCa": {
                        "type": "string",
                        "description": "The MQTT certificat content\n"
                    },
                    "mqttCaUrl": {
                        "type": "string",
                        "description": "The MQTT ca url\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IoT Hub instance you want to create (e.g. `my-hub`).\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization_id you want to attach the resource to\n"
                    },
                    "productPlan": {
                        "type": "string",
                        "description": "Product plan to create the hub, see documentation for available product plans (e.g. `plan_shared`)\n\n\u003e **Important:** Updates to `product_plan` will recreate the IoT Hub Instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the IoT Hub Instance is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the Database Instance should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of the Hub.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time the Hub resource was updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iotNetwork:IotNetwork": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst mainIotHub = new scaleway.IotHub(\"main\", {\n    name: \"main\",\n    productPlan: \"plan_shared\",\n});\nconst main = new scaleway.IotNetwork(\"main\", {\n    name: \"main\",\n    hubId: mainIotHub.id,\n    type: \"sigfox\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain_iot_hub = scaleway.IotHub(\"main\",\n    name=\"main\",\n    product_plan=\"plan_shared\")\nmain = scaleway.IotNetwork(\"main\",\n    name=\"main\",\n    hub_id=main_iot_hub.id,\n    type=\"sigfox\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainIotHub = new Scaleway.IotHub(\"main\", new()\n    {\n        Name = \"main\",\n        ProductPlan = \"plan_shared\",\n    });\n\n    var main = new Scaleway.IotNetwork(\"main\", new()\n    {\n        Name = \"main\",\n        HubId = mainIotHub.Id,\n        Type = \"sigfox\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainIotHub, err := scaleway.NewIotHub(ctx, \"main\", \u0026scaleway.IotHubArgs{\n\t\t\tName:        pulumi.String(\"main\"),\n\t\t\tProductPlan: pulumi.String(\"plan_shared\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewIotNetwork(ctx, \"main\", \u0026scaleway.IotNetworkArgs{\n\t\t\tName:  pulumi.String(\"main\"),\n\t\t\tHubId: mainIotHub.ID(),\n\t\t\tType:  pulumi.String(\"sigfox\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.IotHub;\nimport com.pulumi.scaleway.IotHubArgs;\nimport com.pulumi.scaleway.IotNetwork;\nimport com.pulumi.scaleway.IotNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainIotHub = new IotHub(\"mainIotHub\", IotHubArgs.builder()\n            .name(\"main\")\n            .productPlan(\"plan_shared\")\n            .build());\n\n        var main = new IotNetwork(\"main\", IotNetworkArgs.builder()\n            .name(\"main\")\n            .hubId(mainIotHub.id())\n            .type(\"sigfox\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:IotNetwork\n    properties:\n      name: main\n      hubId: ${mainIotHub.id}\n      type: sigfox\n  mainIotHub:\n    type: scaleway:IotHub\n    name: main\n    properties:\n      name: main\n      productPlan: plan_shared\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIoT Networks can be imported using the `{region}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/iotNetwork:IotNetwork net01 fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time the Network was created.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint to use when interacting with the network.\n"
                },
                "hubId": {
                    "type": "string",
                    "description": "The hub ID to which the Network will be attached to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IoT Network you want to create (e.g. `my-net`).\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The endpoint key to keep secret.\n",
                    "secret": true
                },
                "topicPrefix": {
                    "type": "string",
                    "description": "The prefix that will be prepended to all topics for this Network.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The network type to create (e.g. `sigfox`).\n"
                }
            },
            "required": [
                "createdAt",
                "endpoint",
                "hubId",
                "name",
                "secret",
                "type"
            ],
            "inputProperties": {
                "hubId": {
                    "type": "string",
                    "description": "The hub ID to which the Network will be attached to.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IoT Network you want to create (e.g. `my-net`).\n",
                    "willReplaceOnChanges": true
                },
                "topicPrefix": {
                    "type": "string",
                    "description": "The prefix that will be prepended to all topics for this Network.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The network type to create (e.g. `sigfox`).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "hubId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IotNetwork resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time the Network was created.\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint to use when interacting with the network.\n"
                    },
                    "hubId": {
                        "type": "string",
                        "description": "The hub ID to which the Network will be attached to.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IoT Network you want to create (e.g. `my-net`).\n",
                        "willReplaceOnChanges": true
                    },
                    "secret": {
                        "type": "string",
                        "description": "The endpoint key to keep secret.\n",
                        "secret": true
                    },
                    "topicPrefix": {
                        "type": "string",
                        "description": "The prefix that will be prepended to all topics for this Network.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The network type to create (e.g. `sigfox`).\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/iotRoute:IotRoute": {
            "description": "## Example Usage\n\n### Database Route\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst mainIotHub = new scaleway.IotHub(\"main\", {\n    name: \"main\",\n    productPlan: \"plan_shared\",\n});\nconst iot = new scaleway.DatabaseInstance(\"iot\", {\n    name: \"iot\",\n    nodeType: \"db-dev-s\",\n    engine: \"PostgreSQL-12\",\n    userName: \"root\",\n    password: \"T3stP4ssw0rdD0N0tUs3!\",\n});\nconst main = new scaleway.IotRoute(\"main\", {\n    name: \"default\",\n    hubId: mainIotHub.id,\n    topic: \"#\",\n    database: {\n        query: `INSERT INTO measurements(\n\\x09push_time,\n\\x09report_time,\n\\x09station_id,\n\\x09temperature,\n\\x09humidity\n) VALUES (\n\\x09NOW(),\n\\x09TIMESTAMP 'epoch' + ((PAYLOAD::jsonb-\u003e'last_reported')::integer * INTERVAL '1 second'),\n\\x09(PAYLOAD::jsonb-\u003e'station_id')::uuid,\n\\x09(PAYLOAD::jsonb-\u003e'temperature')::decimal,\n\\x09(PAYLOAD::jsonb-\u003e'humidity'):decimal:\n);\n`,\n        host: iot.endpointIp,\n        port: iot.endpointPort,\n        dbname: \"rdb\",\n        username: iot.userName,\n        password: iot.password,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain_iot_hub = scaleway.IotHub(\"main\",\n    name=\"main\",\n    product_plan=\"plan_shared\")\niot = scaleway.DatabaseInstance(\"iot\",\n    name=\"iot\",\n    node_type=\"db-dev-s\",\n    engine=\"PostgreSQL-12\",\n    user_name=\"root\",\n    password=\"T3stP4ssw0rdD0N0tUs3!\")\nmain = scaleway.IotRoute(\"main\",\n    name=\"default\",\n    hub_id=main_iot_hub.id,\n    topic=\"#\",\n    database={\n        \"query\": \"\"\"INSERT INTO measurements(\n\\x09push_time,\n\\x09report_time,\n\\x09station_id,\n\\x09temperature,\n\\x09humidity\n) VALUES (\n\\x09NOW(),\n\\x09TIMESTAMP 'epoch' + (($PAYLOAD::jsonb-\u003e'last_reported')::integer * INTERVAL '1 second'),\n\\x09($PAYLOAD::jsonb-\u003e'station_id')::uuid,\n\\x09($PAYLOAD::jsonb-\u003e'temperature')::decimal,\n\\x09($PAYLOAD::jsonb-\u003e'humidity'):decimal:\n);\n\"\"\",\n        \"host\": iot.endpoint_ip,\n        \"port\": iot.endpoint_port,\n        \"dbname\": \"rdb\",\n        \"username\": iot.user_name,\n        \"password\": iot.password,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainIotHub = new Scaleway.IotHub(\"main\", new()\n    {\n        Name = \"main\",\n        ProductPlan = \"plan_shared\",\n    });\n\n    var iot = new Scaleway.DatabaseInstance(\"iot\", new()\n    {\n        Name = \"iot\",\n        NodeType = \"db-dev-s\",\n        Engine = \"PostgreSQL-12\",\n        UserName = \"root\",\n        Password = \"T3stP4ssw0rdD0N0tUs3!\",\n    });\n\n    var main = new Scaleway.IotRoute(\"main\", new()\n    {\n        Name = \"default\",\n        HubId = mainIotHub.Id,\n        Topic = \"#\",\n        Database = new Scaleway.Inputs.IotRouteDatabaseArgs\n        {\n            Query = @\"INSERT INTO measurements(\n\tpush_time,\n\treport_time,\n\tstation_id,\n\ttemperature,\n\thumidity\n) VALUES (\n\tNOW(),\n\tTIMESTAMP 'epoch' + (($PAYLOAD::jsonb-\u003e'last_reported')::integer * INTERVAL '1 second'),\n\t($PAYLOAD::jsonb-\u003e'station_id')::uuid,\n\t($PAYLOAD::jsonb-\u003e'temperature')::decimal,\n\t($PAYLOAD::jsonb-\u003e'humidity'):decimal:\n);\n\",\n            Host = iot.EndpointIp,\n            Port = iot.EndpointPort,\n            Dbname = \"rdb\",\n            Username = iot.UserName,\n            Password = iot.Password,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainIotHub, err := scaleway.NewIotHub(ctx, \"main\", \u0026scaleway.IotHubArgs{\n\t\t\tName:        pulumi.String(\"main\"),\n\t\t\tProductPlan: pulumi.String(\"plan_shared\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tiot, err := scaleway.NewDatabaseInstance(ctx, \"iot\", \u0026scaleway.DatabaseInstanceArgs{\n\t\t\tName:     pulumi.String(\"iot\"),\n\t\t\tNodeType: pulumi.String(\"db-dev-s\"),\n\t\t\tEngine:   pulumi.String(\"PostgreSQL-12\"),\n\t\t\tUserName: pulumi.String(\"root\"),\n\t\t\tPassword: pulumi.String(\"T3stP4ssw0rdD0N0tUs3!\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewIotRoute(ctx, \"main\", \u0026scaleway.IotRouteArgs{\n\t\t\tName:  pulumi.String(\"default\"),\n\t\t\tHubId: mainIotHub.ID(),\n\t\t\tTopic: pulumi.String(\"#\"),\n\t\t\tDatabase: \u0026scaleway.IotRouteDatabaseArgs{\n\t\t\t\tQuery: pulumi.String(`INSERT INTO measurements(\n\tpush_time,\n\treport_time,\n\tstation_id,\n\ttemperature,\n\thumidity\n) VALUES (\n\tNOW(),\n\tTIMESTAMP 'epoch' + (($PAYLOAD::jsonb-\u003e'last_reported')::integer * INTERVAL '1 second'),\n\t($PAYLOAD::jsonb-\u003e'station_id')::uuid,\n\t($PAYLOAD::jsonb-\u003e'temperature')::decimal,\n\t($PAYLOAD::jsonb-\u003e'humidity'):decimal:\n);\n`),\n\t\t\t\tHost:     iot.EndpointIp,\n\t\t\t\tPort:     iot.EndpointPort,\n\t\t\t\tDbname:   pulumi.String(\"rdb\"),\n\t\t\t\tUsername: iot.UserName,\n\t\t\t\tPassword: iot.Password,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.IotHub;\nimport com.pulumi.scaleway.IotHubArgs;\nimport com.pulumi.scaleway.DatabaseInstance;\nimport com.pulumi.scaleway.DatabaseInstanceArgs;\nimport com.pulumi.scaleway.IotRoute;\nimport com.pulumi.scaleway.IotRouteArgs;\nimport com.pulumi.scaleway.inputs.IotRouteDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainIotHub = new IotHub(\"mainIotHub\", IotHubArgs.builder()\n            .name(\"main\")\n            .productPlan(\"plan_shared\")\n            .build());\n\n        var iot = new DatabaseInstance(\"iot\", DatabaseInstanceArgs.builder()\n            .name(\"iot\")\n            .nodeType(\"db-dev-s\")\n            .engine(\"PostgreSQL-12\")\n            .userName(\"root\")\n            .password(\"T3stP4ssw0rdD0N0tUs3!\")\n            .build());\n\n        var main = new IotRoute(\"main\", IotRouteArgs.builder()\n            .name(\"default\")\n            .hubId(mainIotHub.id())\n            .topic(\"#\")\n            .database(IotRouteDatabaseArgs.builder()\n                .query(\"\"\"\nINSERT INTO measurements(\n\tpush_time,\n\treport_time,\n\tstation_id,\n\ttemperature,\n\thumidity\n) VALUES (\n\tNOW(),\n\tTIMESTAMP 'epoch' + (($PAYLOAD::jsonb-\u003e'last_reported')::integer * INTERVAL '1 second'),\n\t($PAYLOAD::jsonb-\u003e'station_id')::uuid,\n\t($PAYLOAD::jsonb-\u003e'temperature')::decimal,\n\t($PAYLOAD::jsonb-\u003e'humidity'):decimal:\n);\n                \"\"\")\n                .host(iot.endpointIp())\n                .port(iot.endpointPort())\n                .dbname(\"rdb\")\n                .username(iot.userName())\n                .password(iot.password())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:IotRoute\n    properties:\n      name: default\n      hubId: ${mainIotHub.id}\n      topic: '#'\n      database:\n        query: |\n          INSERT INTO measurements(\n          \tpush_time,\n          \treport_time,\n          \tstation_id,\n          \ttemperature,\n          \thumidity\n          ) VALUES (\n          \tNOW(),\n          \tTIMESTAMP 'epoch' + (($PAYLOAD::jsonb-\u003e'last_reported')::integer * INTERVAL '1 second'),\n          \t($PAYLOAD::jsonb-\u003e'station_id')::uuid,\n          \t($PAYLOAD::jsonb-\u003e'temperature')::decimal,\n          \t($PAYLOAD::jsonb-\u003e'humidity'):decimal:\n          );\n        host: ${iot.endpointIp}\n        port: ${iot.endpointPort}\n        dbname: rdb\n        username: ${iot.userName}\n        password: ${iot.password}\n  mainIotHub:\n    type: scaleway:IotHub\n    name: main\n    properties:\n      name: main\n      productPlan: plan_shared\n  iot:\n    type: scaleway:DatabaseInstance\n    properties:\n      name: iot\n      nodeType: db-dev-s\n      engine: PostgreSQL-12\n      userName: root\n      password: T3stP4ssw0rdD0N0tUs3!\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### S3 Route\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst mainIotHub = new scaleway.IotHub(\"main\", {\n    name: \"main\",\n    productPlan: \"plan_shared\",\n});\nconst mainObjectBucket = new scaleway.ObjectBucket(\"main\", {\n    region: \"fr-par\",\n    name: \"my_awesome-bucket\",\n});\nconst main = new scaleway.IotRoute(\"main\", {\n    name: \"main\",\n    hubId: mainIotHub.id,\n    topic: \"#\",\n    s3: {\n        bucketRegion: mainObjectBucket.region,\n        bucketName: mainObjectBucket.name,\n        objectPrefix: \"foo\",\n        strategy: \"per_topic\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain_iot_hub = scaleway.IotHub(\"main\",\n    name=\"main\",\n    product_plan=\"plan_shared\")\nmain_object_bucket = scaleway.ObjectBucket(\"main\",\n    region=\"fr-par\",\n    name=\"my_awesome-bucket\")\nmain = scaleway.IotRoute(\"main\",\n    name=\"main\",\n    hub_id=main_iot_hub.id,\n    topic=\"#\",\n    s3={\n        \"bucket_region\": main_object_bucket.region,\n        \"bucket_name\": main_object_bucket.name,\n        \"object_prefix\": \"foo\",\n        \"strategy\": \"per_topic\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainIotHub = new Scaleway.IotHub(\"main\", new()\n    {\n        Name = \"main\",\n        ProductPlan = \"plan_shared\",\n    });\n\n    var mainObjectBucket = new Scaleway.ObjectBucket(\"main\", new()\n    {\n        Region = \"fr-par\",\n        Name = \"my_awesome-bucket\",\n    });\n\n    var main = new Scaleway.IotRoute(\"main\", new()\n    {\n        Name = \"main\",\n        HubId = mainIotHub.Id,\n        Topic = \"#\",\n        S3 = new Scaleway.Inputs.IotRouteS3Args\n        {\n            BucketRegion = mainObjectBucket.Region,\n            BucketName = mainObjectBucket.Name,\n            ObjectPrefix = \"foo\",\n            Strategy = \"per_topic\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainIotHub, err := scaleway.NewIotHub(ctx, \"main\", \u0026scaleway.IotHubArgs{\n\t\t\tName:        pulumi.String(\"main\"),\n\t\t\tProductPlan: pulumi.String(\"plan_shared\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainObjectBucket, err := scaleway.NewObjectBucket(ctx, \"main\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tRegion: pulumi.String(\"fr-par\"),\n\t\t\tName:   pulumi.String(\"my_awesome-bucket\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewIotRoute(ctx, \"main\", \u0026scaleway.IotRouteArgs{\n\t\t\tName:  pulumi.String(\"main\"),\n\t\t\tHubId: mainIotHub.ID(),\n\t\t\tTopic: pulumi.String(\"#\"),\n\t\t\tS3: \u0026scaleway.IotRouteS3Args{\n\t\t\t\tBucketRegion: mainObjectBucket.Region,\n\t\t\t\tBucketName:   mainObjectBucket.Name,\n\t\t\t\tObjectPrefix: pulumi.String(\"foo\"),\n\t\t\t\tStrategy:     pulumi.String(\"per_topic\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.IotHub;\nimport com.pulumi.scaleway.IotHubArgs;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketArgs;\nimport com.pulumi.scaleway.IotRoute;\nimport com.pulumi.scaleway.IotRouteArgs;\nimport com.pulumi.scaleway.inputs.IotRouteS3Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainIotHub = new IotHub(\"mainIotHub\", IotHubArgs.builder()\n            .name(\"main\")\n            .productPlan(\"plan_shared\")\n            .build());\n\n        var mainObjectBucket = new ObjectBucket(\"mainObjectBucket\", ObjectBucketArgs.builder()\n            .region(\"fr-par\")\n            .name(\"my_awesome-bucket\")\n            .build());\n\n        var main = new IotRoute(\"main\", IotRouteArgs.builder()\n            .name(\"main\")\n            .hubId(mainIotHub.id())\n            .topic(\"#\")\n            .s3(IotRouteS3Args.builder()\n                .bucketRegion(mainObjectBucket.region())\n                .bucketName(mainObjectBucket.name())\n                .objectPrefix(\"foo\")\n                .strategy(\"per_topic\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:IotRoute\n    properties:\n      name: main\n      hubId: ${mainIotHub.id}\n      topic: '#'\n      s3:\n        bucketRegion: ${mainObjectBucket.region}\n        bucketName: ${mainObjectBucket.name}\n        objectPrefix: foo\n        strategy: per_topic\n  mainIotHub:\n    type: scaleway:IotHub\n    name: main\n    properties:\n      name: main\n      productPlan: plan_shared\n  mainObjectBucket:\n    type: scaleway:ObjectBucket\n    name: main\n    properties:\n      region: fr-par\n      name: my_awesome-bucket\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Rest Route\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst mainIotHub = new scaleway.IotHub(\"main\", {\n    name: \"main\",\n    productPlan: \"plan_shared\",\n});\nconst main = new scaleway.IotRoute(\"main\", {\n    name: \"main\",\n    hubId: mainIotHub.id,\n    topic: \"#\",\n    rest: {\n        verb: \"get\",\n        uri: \"http://scaleway.com\",\n        headers: {\n            \"X-awesome-header\": \"my-awesome-value\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain_iot_hub = scaleway.IotHub(\"main\",\n    name=\"main\",\n    product_plan=\"plan_shared\")\nmain = scaleway.IotRoute(\"main\",\n    name=\"main\",\n    hub_id=main_iot_hub.id,\n    topic=\"#\",\n    rest={\n        \"verb\": \"get\",\n        \"uri\": \"http://scaleway.com\",\n        \"headers\": {\n            \"x_awesome_header\": \"my-awesome-value\",\n        },\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mainIotHub = new Scaleway.IotHub(\"main\", new()\n    {\n        Name = \"main\",\n        ProductPlan = \"plan_shared\",\n    });\n\n    var main = new Scaleway.IotRoute(\"main\", new()\n    {\n        Name = \"main\",\n        HubId = mainIotHub.Id,\n        Topic = \"#\",\n        Rest = new Scaleway.Inputs.IotRouteRestArgs\n        {\n            Verb = \"get\",\n            Uri = \"http://scaleway.com\",\n            Headers = \n            {\n                { \"X-awesome-header\", \"my-awesome-value\" },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmainIotHub, err := scaleway.NewIotHub(ctx, \"main\", \u0026scaleway.IotHubArgs{\n\t\t\tName:        pulumi.String(\"main\"),\n\t\t\tProductPlan: pulumi.String(\"plan_shared\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewIotRoute(ctx, \"main\", \u0026scaleway.IotRouteArgs{\n\t\t\tName:  pulumi.String(\"main\"),\n\t\t\tHubId: mainIotHub.ID(),\n\t\t\tTopic: pulumi.String(\"#\"),\n\t\t\tRest: \u0026scaleway.IotRouteRestArgs{\n\t\t\t\tVerb: pulumi.String(\"get\"),\n\t\t\t\tUri:  pulumi.String(\"http://scaleway.com\"),\n\t\t\t\tHeaders: pulumi.StringMap{\n\t\t\t\t\t\"X-awesome-header\": pulumi.String(\"my-awesome-value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.IotHub;\nimport com.pulumi.scaleway.IotHubArgs;\nimport com.pulumi.scaleway.IotRoute;\nimport com.pulumi.scaleway.IotRouteArgs;\nimport com.pulumi.scaleway.inputs.IotRouteRestArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mainIotHub = new IotHub(\"mainIotHub\", IotHubArgs.builder()\n            .name(\"main\")\n            .productPlan(\"plan_shared\")\n            .build());\n\n        var main = new IotRoute(\"main\", IotRouteArgs.builder()\n            .name(\"main\")\n            .hubId(mainIotHub.id())\n            .topic(\"#\")\n            .rest(IotRouteRestArgs.builder()\n                .verb(\"get\")\n                .uri(\"http://scaleway.com\")\n                .headers(Map.of(\"X-awesome-header\", \"my-awesome-value\"))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:IotRoute\n    properties:\n      name: main\n      hubId: ${mainIotHub.id}\n      topic: '#'\n      rest:\n        verb: get\n        uri: http://scaleway.com\n        headers:\n          X-awesome-header: my-awesome-value\n  mainIotHub:\n    type: scaleway:IotHub\n    name: main\n    properties:\n      name: main\n      productPlan: plan_shared\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIoT Routes can be imported using the `{region}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/iotRoute:IotRoute route01 fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time the Route was created.\n"
                },
                "database": {
                    "$ref": "#/types/scaleway:index/IotRouteDatabase:IotRouteDatabase",
                    "description": "Configuration block for the database routes. See  [product documentation](https://www.scaleway.com/en/docs/scaleway-iothub-route/#-Database-Route) for a better understanding of the parameters.\n"
                },
                "hubId": {
                    "type": "string",
                    "description": "The hub ID to which the Route will be attached to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IoT Route you want to create (e.g. `my-route`).\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Defaults to provider `region`) The region in which the Route is attached to.\n"
                },
                "rest": {
                    "$ref": "#/types/scaleway:index/IotRouteRest:IotRouteRest",
                    "description": "Configuration block for the rest routes. See [product documentation](https://www.scaleway.com/en/docs/scaleway-iothub-route/#-REST-Route) for a better understanding of the parameters.\n"
                },
                "s3": {
                    "$ref": "#/types/scaleway:index/IotRouteS3:IotRouteS3",
                    "description": "Configuration block for the S3 routes. See [product documentation](https://www.scaleway.com/en/docs/scaleway-iothub-route/#-Scaleway-Object-Storage-Route) for a better understanding of the parameters.\n"
                },
                "topic": {
                    "type": "string",
                    "description": "The topic the Route subscribes to, wildcards allowed (e.g. `thelab/+/temperature/#`).\n"
                }
            },
            "required": [
                "createdAt",
                "hubId",
                "name",
                "region",
                "topic"
            ],
            "inputProperties": {
                "database": {
                    "$ref": "#/types/scaleway:index/IotRouteDatabase:IotRouteDatabase",
                    "description": "Configuration block for the database routes. See  [product documentation](https://www.scaleway.com/en/docs/scaleway-iothub-route/#-Database-Route) for a better understanding of the parameters.\n",
                    "willReplaceOnChanges": true
                },
                "hubId": {
                    "type": "string",
                    "description": "The hub ID to which the Route will be attached to.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IoT Route you want to create (e.g. `my-route`).\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "(Defaults to provider `region`) The region in which the Route is attached to.\n",
                    "willReplaceOnChanges": true
                },
                "rest": {
                    "$ref": "#/types/scaleway:index/IotRouteRest:IotRouteRest",
                    "description": "Configuration block for the rest routes. See [product documentation](https://www.scaleway.com/en/docs/scaleway-iothub-route/#-REST-Route) for a better understanding of the parameters.\n",
                    "willReplaceOnChanges": true
                },
                "s3": {
                    "$ref": "#/types/scaleway:index/IotRouteS3:IotRouteS3",
                    "description": "Configuration block for the S3 routes. See [product documentation](https://www.scaleway.com/en/docs/scaleway-iothub-route/#-Scaleway-Object-Storage-Route) for a better understanding of the parameters.\n",
                    "willReplaceOnChanges": true
                },
                "topic": {
                    "type": "string",
                    "description": "The topic the Route subscribes to, wildcards allowed (e.g. `thelab/+/temperature/#`).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "hubId",
                "topic"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IotRoute resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time the Route was created.\n"
                    },
                    "database": {
                        "$ref": "#/types/scaleway:index/IotRouteDatabase:IotRouteDatabase",
                        "description": "Configuration block for the database routes. See  [product documentation](https://www.scaleway.com/en/docs/scaleway-iothub-route/#-Database-Route) for a better understanding of the parameters.\n",
                        "willReplaceOnChanges": true
                    },
                    "hubId": {
                        "type": "string",
                        "description": "The hub ID to which the Route will be attached to.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IoT Route you want to create (e.g. `my-route`).\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "(Defaults to provider `region`) The region in which the Route is attached to.\n",
                        "willReplaceOnChanges": true
                    },
                    "rest": {
                        "$ref": "#/types/scaleway:index/IotRouteRest:IotRouteRest",
                        "description": "Configuration block for the rest routes. See [product documentation](https://www.scaleway.com/en/docs/scaleway-iothub-route/#-REST-Route) for a better understanding of the parameters.\n",
                        "willReplaceOnChanges": true
                    },
                    "s3": {
                        "$ref": "#/types/scaleway:index/IotRouteS3:IotRouteS3",
                        "description": "Configuration block for the S3 routes. See [product documentation](https://www.scaleway.com/en/docs/scaleway-iothub-route/#-Scaleway-Object-Storage-Route) for a better understanding of the parameters.\n",
                        "willReplaceOnChanges": true
                    },
                    "topic": {
                        "type": "string",
                        "description": "The topic the Route subscribes to, wildcards allowed (e.g. `thelab/+/temperature/#`).\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/ipamIp:IpamIp": {
            "description": "Books and manages IPAM IPs.\n\nFor more information about IPAM, see the main [documentation](https://www.scaleway.com/en/docs/network/vpc/concepts/#ipam).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst vpc01 = new scaleway.Vpc(\"vpc01\", {name: \"my vpc\"});\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {\n    vpcId: vpc01.id,\n    ipv4Subnet: {\n        subnet: \"172.16.32.0/22\",\n    },\n});\nconst ip01 = new scaleway.IpamIp(\"ip01\", {sources: [{\n    privateNetworkId: pn01.id,\n}]});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nvpc01 = scaleway.Vpc(\"vpc01\", name=\"my vpc\")\npn01 = scaleway.VpcPrivateNetwork(\"pn01\",\n    vpc_id=vpc01.id,\n    ipv4_subnet={\n        \"subnet\": \"172.16.32.0/22\",\n    })\nip01 = scaleway.IpamIp(\"ip01\", sources=[{\n    \"private_network_id\": pn01.id,\n}])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vpc01 = new Scaleway.Vpc(\"vpc01\", new()\n    {\n        Name = \"my vpc\",\n    });\n\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\", new()\n    {\n        VpcId = vpc01.Id,\n        Ipv4Subnet = new Scaleway.Inputs.VpcPrivateNetworkIpv4SubnetArgs\n        {\n            Subnet = \"172.16.32.0/22\",\n        },\n    });\n\n    var ip01 = new Scaleway.IpamIp(\"ip01\", new()\n    {\n        Sources = new[]\n        {\n            new Scaleway.Inputs.IpamIpSourceArgs\n            {\n                PrivateNetworkId = pn01.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tvpc01, err := scaleway.NewVpc(ctx, \"vpc01\", \u0026scaleway.VpcArgs{\n\t\t\tName: pulumi.String(\"my vpc\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tVpcId: vpc01.ID(),\n\t\t\tIpv4Subnet: \u0026scaleway.VpcPrivateNetworkIpv4SubnetArgs{\n\t\t\t\tSubnet: pulumi.String(\"172.16.32.0/22\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewIpamIp(ctx, \"ip01\", \u0026scaleway.IpamIpArgs{\n\t\t\tSources: scaleway.IpamIpSourceArray{\n\t\t\t\t\u0026scaleway.IpamIpSourceArgs{\n\t\t\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Vpc;\nimport com.pulumi.scaleway.VpcArgs;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.inputs.VpcPrivateNetworkIpv4SubnetArgs;\nimport com.pulumi.scaleway.IpamIp;\nimport com.pulumi.scaleway.IpamIpArgs;\nimport com.pulumi.scaleway.inputs.IpamIpSourceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vpc01 = new Vpc(\"vpc01\", VpcArgs.builder()\n            .name(\"my vpc\")\n            .build());\n\n        var pn01 = new VpcPrivateNetwork(\"pn01\", VpcPrivateNetworkArgs.builder()\n            .vpcId(vpc01.id())\n            .ipv4Subnet(VpcPrivateNetworkIpv4SubnetArgs.builder()\n                .subnet(\"172.16.32.0/22\")\n                .build())\n            .build());\n\n        var ip01 = new IpamIp(\"ip01\", IpamIpArgs.builder()\n            .sources(IpamIpSourceArgs.builder()\n                .privateNetworkId(pn01.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vpc01:\n    type: scaleway:Vpc\n    properties:\n      name: my vpc\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      vpcId: ${vpc01.id}\n      ipv4Subnet:\n        subnet: 172.16.32.0/22\n  ip01:\n    type: scaleway:IpamIp\n    properties:\n      sources:\n        - privateNetworkId: ${pn01.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Request a specific IPv4 address\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst vpc01 = new scaleway.Vpc(\"vpc01\", {name: \"my vpc\"});\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {\n    vpcId: vpc01.id,\n    ipv4Subnet: {\n        subnet: \"172.16.32.0/22\",\n    },\n});\nconst ip01 = new scaleway.IpamIp(\"ip01\", {\n    address: \"172.16.32.7\",\n    sources: [{\n        privateNetworkId: pn01.id,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nvpc01 = scaleway.Vpc(\"vpc01\", name=\"my vpc\")\npn01 = scaleway.VpcPrivateNetwork(\"pn01\",\n    vpc_id=vpc01.id,\n    ipv4_subnet={\n        \"subnet\": \"172.16.32.0/22\",\n    })\nip01 = scaleway.IpamIp(\"ip01\",\n    address=\"172.16.32.7\",\n    sources=[{\n        \"private_network_id\": pn01.id,\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vpc01 = new Scaleway.Vpc(\"vpc01\", new()\n    {\n        Name = \"my vpc\",\n    });\n\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\", new()\n    {\n        VpcId = vpc01.Id,\n        Ipv4Subnet = new Scaleway.Inputs.VpcPrivateNetworkIpv4SubnetArgs\n        {\n            Subnet = \"172.16.32.0/22\",\n        },\n    });\n\n    var ip01 = new Scaleway.IpamIp(\"ip01\", new()\n    {\n        Address = \"172.16.32.7\",\n        Sources = new[]\n        {\n            new Scaleway.Inputs.IpamIpSourceArgs\n            {\n                PrivateNetworkId = pn01.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tvpc01, err := scaleway.NewVpc(ctx, \"vpc01\", \u0026scaleway.VpcArgs{\n\t\t\tName: pulumi.String(\"my vpc\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tVpcId: vpc01.ID(),\n\t\t\tIpv4Subnet: \u0026scaleway.VpcPrivateNetworkIpv4SubnetArgs{\n\t\t\t\tSubnet: pulumi.String(\"172.16.32.0/22\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewIpamIp(ctx, \"ip01\", \u0026scaleway.IpamIpArgs{\n\t\t\tAddress: pulumi.String(\"172.16.32.7\"),\n\t\t\tSources: scaleway.IpamIpSourceArray{\n\t\t\t\t\u0026scaleway.IpamIpSourceArgs{\n\t\t\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Vpc;\nimport com.pulumi.scaleway.VpcArgs;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.inputs.VpcPrivateNetworkIpv4SubnetArgs;\nimport com.pulumi.scaleway.IpamIp;\nimport com.pulumi.scaleway.IpamIpArgs;\nimport com.pulumi.scaleway.inputs.IpamIpSourceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vpc01 = new Vpc(\"vpc01\", VpcArgs.builder()\n            .name(\"my vpc\")\n            .build());\n\n        var pn01 = new VpcPrivateNetwork(\"pn01\", VpcPrivateNetworkArgs.builder()\n            .vpcId(vpc01.id())\n            .ipv4Subnet(VpcPrivateNetworkIpv4SubnetArgs.builder()\n                .subnet(\"172.16.32.0/22\")\n                .build())\n            .build());\n\n        var ip01 = new IpamIp(\"ip01\", IpamIpArgs.builder()\n            .address(\"172.16.32.7\")\n            .sources(IpamIpSourceArgs.builder()\n                .privateNetworkId(pn01.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vpc01:\n    type: scaleway:Vpc\n    properties:\n      name: my vpc\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      vpcId: ${vpc01.id}\n      ipv4Subnet:\n        subnet: 172.16.32.0/22\n  ip01:\n    type: scaleway:IpamIp\n    properties:\n      address: 172.16.32.7\n      sources:\n        - privateNetworkId: ${pn01.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Request an IPv6 address\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst vpc01 = new scaleway.Vpc(\"vpc01\", {name: \"my vpc\"});\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {\n    vpcId: vpc01.id,\n    ipv6Subnets: [{\n        subnet: \"fd46:78ab:30b8:177c::/64\",\n    }],\n});\nconst ip01 = new scaleway.IpamIp(\"ip01\", {\n    isIpv6: true,\n    sources: [{\n        privateNetworkId: pn01.id,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nvpc01 = scaleway.Vpc(\"vpc01\", name=\"my vpc\")\npn01 = scaleway.VpcPrivateNetwork(\"pn01\",\n    vpc_id=vpc01.id,\n    ipv6_subnets=[{\n        \"subnet\": \"fd46:78ab:30b8:177c::/64\",\n    }])\nip01 = scaleway.IpamIp(\"ip01\",\n    is_ipv6=True,\n    sources=[{\n        \"private_network_id\": pn01.id,\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vpc01 = new Scaleway.Vpc(\"vpc01\", new()\n    {\n        Name = \"my vpc\",\n    });\n\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\", new()\n    {\n        VpcId = vpc01.Id,\n        Ipv6Subnets = new[]\n        {\n            new Scaleway.Inputs.VpcPrivateNetworkIpv6SubnetArgs\n            {\n                Subnet = \"fd46:78ab:30b8:177c::/64\",\n            },\n        },\n    });\n\n    var ip01 = new Scaleway.IpamIp(\"ip01\", new()\n    {\n        IsIpv6 = true,\n        Sources = new[]\n        {\n            new Scaleway.Inputs.IpamIpSourceArgs\n            {\n                PrivateNetworkId = pn01.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tvpc01, err := scaleway.NewVpc(ctx, \"vpc01\", \u0026scaleway.VpcArgs{\n\t\t\tName: pulumi.String(\"my vpc\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tVpcId: vpc01.ID(),\n\t\t\tIpv6Subnets: scaleway.VpcPrivateNetworkIpv6SubnetArray{\n\t\t\t\t\u0026scaleway.VpcPrivateNetworkIpv6SubnetArgs{\n\t\t\t\t\tSubnet: pulumi.String(\"fd46:78ab:30b8:177c::/64\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewIpamIp(ctx, \"ip01\", \u0026scaleway.IpamIpArgs{\n\t\t\tIsIpv6: pulumi.Bool(true),\n\t\t\tSources: scaleway.IpamIpSourceArray{\n\t\t\t\t\u0026scaleway.IpamIpSourceArgs{\n\t\t\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Vpc;\nimport com.pulumi.scaleway.VpcArgs;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.inputs.VpcPrivateNetworkIpv6SubnetArgs;\nimport com.pulumi.scaleway.IpamIp;\nimport com.pulumi.scaleway.IpamIpArgs;\nimport com.pulumi.scaleway.inputs.IpamIpSourceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vpc01 = new Vpc(\"vpc01\", VpcArgs.builder()\n            .name(\"my vpc\")\n            .build());\n\n        var pn01 = new VpcPrivateNetwork(\"pn01\", VpcPrivateNetworkArgs.builder()\n            .vpcId(vpc01.id())\n            .ipv6Subnets(VpcPrivateNetworkIpv6SubnetArgs.builder()\n                .subnet(\"fd46:78ab:30b8:177c::/64\")\n                .build())\n            .build());\n\n        var ip01 = new IpamIp(\"ip01\", IpamIpArgs.builder()\n            .isIpv6(true)\n            .sources(IpamIpSourceArgs.builder()\n                .privateNetworkId(pn01.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vpc01:\n    type: scaleway:Vpc\n    properties:\n      name: my vpc\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      vpcId: ${vpc01.id}\n      ipv6Subnets:\n        - subnet: fd46:78ab:30b8:177c::/64\n  ip01:\n    type: scaleway:IpamIp\n    properties:\n      isIpv6: true\n      sources:\n        - privateNetworkId: ${pn01.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIPAM IPs can be imported using `{region}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/ipamIp:IpamIp ip_demo fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Request a specific IP in the requested source pool\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date and time of IP's creation (RFC 3339 format).\n"
                },
                "isIpv6": {
                    "type": "boolean",
                    "description": "Defines whether to request an IPv6 address instead of IPv4.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project the IP is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region of the IP.\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/IpamIpResource:IpamIpResource"
                    },
                    "description": "The IP resource.\n"
                },
                "reverses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/IpamIpReverse:IpamIpReverse"
                    },
                    "description": "The reverse DNS for this IP.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/IpamIpSource:IpamIpSource"
                    },
                    "description": "The source in which to book the IP.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the IP.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date and time of IP's last update (RFC 3339 format).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone of the IP.\n"
                }
            },
            "required": [
                "address",
                "createdAt",
                "projectId",
                "region",
                "resources",
                "reverses",
                "sources",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "Request a specific IP in the requested source pool\n",
                    "willReplaceOnChanges": true
                },
                "isIpv6": {
                    "type": "boolean",
                    "description": "Defines whether to request an IPv6 address instead of IPv4.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project the IP is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region of the IP.\n",
                    "willReplaceOnChanges": true
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/IpamIpSource:IpamIpSource"
                    },
                    "description": "The source in which to book the IP.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the IP.\n"
                }
            },
            "requiredInputs": [
                "sources"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpamIp resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "Request a specific IP in the requested source pool\n",
                        "willReplaceOnChanges": true
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date and time of IP's creation (RFC 3339 format).\n"
                    },
                    "isIpv6": {
                        "type": "boolean",
                        "description": "Defines whether to request an IPv6 address instead of IPv4.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the Project the IP is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region of the IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "resources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/IpamIpResource:IpamIpResource"
                        },
                        "description": "The IP resource.\n"
                    },
                    "reverses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/IpamIpReverse:IpamIpReverse"
                        },
                        "description": "The reverse DNS for this IP.\n"
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/IpamIpSource:IpamIpSource"
                        },
                        "description": "The source in which to book the IP.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the IP.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date and time of IP's last update (RFC 3339 format).\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone of the IP.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/ipamIpReverseDns:IpamIpReverseDns": {
            "description": "Manage the reverse DNS of IP addresses managed by Scaleway's IP Address Management (IPAM) service.\n\nFor more information about IPAM, see the main [documentation](https://www.scaleway.com/en/docs/network/vpc/concepts/#ipam).\n\n## Import\n\nIPAM IP reverse DNS can be imported using `{region}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/ipamIpReverseDns:IpamIpReverseDns main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IP corresponding to the hostname.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The reverse domain name.\n"
                },
                "ipamIpId": {
                    "type": "string",
                    "description": "The IPAM IP ID.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region of the IP reverse DNS.\n"
                }
            },
            "required": [
                "address",
                "hostname",
                "ipamIpId",
                "region"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The IP corresponding to the hostname.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The reverse domain name.\n"
                },
                "ipamIpId": {
                    "type": "string",
                    "description": "The IPAM IP ID.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region of the IP reverse DNS.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "address",
                "hostname",
                "ipamIpId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpamIpReverseDns resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP corresponding to the hostname.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The reverse domain name.\n"
                    },
                    "ipamIpId": {
                        "type": "string",
                        "description": "The IPAM IP ID.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region of the IP reverse DNS.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/jobDefinition:JobDefinition": {
            "description": "Creates and manages a Scaleway Serverless Job Definition. For more information, see [the documentation](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/jobs/v1alpha1).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.JobDefinition(\"main\", {\n    name: \"testjob\",\n    cpuLimit: 140,\n    memoryLimit: 256,\n    imageUri: \"docker.io/alpine:latest\",\n    command: \"ls\",\n    timeout: \"10m\",\n    env: {\n        foo: \"bar\",\n    },\n    cron: {\n        schedule: \"5 4 1 * *\",\n        timezone: \"Europe/Paris\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.JobDefinition(\"main\",\n    name=\"testjob\",\n    cpu_limit=140,\n    memory_limit=256,\n    image_uri=\"docker.io/alpine:latest\",\n    command=\"ls\",\n    timeout=\"10m\",\n    env={\n        \"foo\": \"bar\",\n    },\n    cron={\n        \"schedule\": \"5 4 1 * *\",\n        \"timezone\": \"Europe/Paris\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.JobDefinition(\"main\", new()\n    {\n        Name = \"testjob\",\n        CpuLimit = 140,\n        MemoryLimit = 256,\n        ImageUri = \"docker.io/alpine:latest\",\n        Command = \"ls\",\n        Timeout = \"10m\",\n        Env = \n        {\n            { \"foo\", \"bar\" },\n        },\n        Cron = new Scaleway.Inputs.JobDefinitionCronArgs\n        {\n            Schedule = \"5 4 1 * *\",\n            Timezone = \"Europe/Paris\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewJobDefinition(ctx, \"main\", \u0026scaleway.JobDefinitionArgs{\n\t\t\tName:        pulumi.String(\"testjob\"),\n\t\t\tCpuLimit:    pulumi.Int(140),\n\t\t\tMemoryLimit: pulumi.Int(256),\n\t\t\tImageUri:    pulumi.String(\"docker.io/alpine:latest\"),\n\t\t\tCommand:     pulumi.String(\"ls\"),\n\t\t\tTimeout:     pulumi.String(\"10m\"),\n\t\t\tEnv: pulumi.StringMap{\n\t\t\t\t\"foo\": pulumi.String(\"bar\"),\n\t\t\t},\n\t\t\tCron: \u0026scaleway.JobDefinitionCronArgs{\n\t\t\t\tSchedule: pulumi.String(\"5 4 1 * *\"),\n\t\t\t\tTimezone: pulumi.String(\"Europe/Paris\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.JobDefinition;\nimport com.pulumi.scaleway.JobDefinitionArgs;\nimport com.pulumi.scaleway.inputs.JobDefinitionCronArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new JobDefinition(\"main\", JobDefinitionArgs.builder()\n            .name(\"testjob\")\n            .cpuLimit(140)\n            .memoryLimit(256)\n            .imageUri(\"docker.io/alpine:latest\")\n            .command(\"ls\")\n            .timeout(\"10m\")\n            .env(Map.of(\"foo\", \"bar\"))\n            .cron(JobDefinitionCronArgs.builder()\n                .schedule(\"5 4 1 * *\")\n                .timezone(\"Europe/Paris\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:JobDefinition\n    properties:\n      name: testjob\n      cpuLimit: 140\n      memoryLimit: 256\n      imageUri: docker.io/alpine:latest\n      command: ls\n      timeout: 10m\n      env:\n        foo: bar\n      cron:\n        schedule: 5 4 1 * *\n        timezone: Europe/Paris\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nServerless Jobs can be imported using the `{region}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/jobDefinition:JobDefinition job fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "command": {
                    "type": "string",
                    "description": "The command that will be run in the container if specified.\n"
                },
                "cpuLimit": {
                    "type": "integer",
                    "description": "The amount of vCPU computing resources to allocate to each container running the job.\n"
                },
                "cron": {
                    "$ref": "#/types/scaleway:index/JobDefinitionCron:JobDefinitionCron",
                    "description": "The cron configuration\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the job\n"
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The environment variables of the container.\n"
                },
                "imageUri": {
                    "type": "string",
                    "description": "The uri of the container image that will be used for the job run.\n"
                },
                "memoryLimit": {
                    "type": "integer",
                    "description": "The memory computing resources in MB to allocate to each container running the job.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the job.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the Job is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region of the Job.\n"
                },
                "timeout": {
                    "type": "string",
                    "description": "The job run timeout, in Go Time format (ex: `2h30m25s`)\n"
                }
            },
            "required": [
                "cpuLimit",
                "memoryLimit",
                "name",
                "projectId",
                "region",
                "timeout"
            ],
            "inputProperties": {
                "command": {
                    "type": "string",
                    "description": "The command that will be run in the container if specified.\n"
                },
                "cpuLimit": {
                    "type": "integer",
                    "description": "The amount of vCPU computing resources to allocate to each container running the job.\n"
                },
                "cron": {
                    "$ref": "#/types/scaleway:index/JobDefinitionCron:JobDefinitionCron",
                    "description": "The cron configuration\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the job\n"
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The environment variables of the container.\n"
                },
                "imageUri": {
                    "type": "string",
                    "description": "The uri of the container image that will be used for the job run.\n"
                },
                "memoryLimit": {
                    "type": "integer",
                    "description": "The memory computing resources in MB to allocate to each container running the job.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the job.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the Job is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region of the Job.\n",
                    "willReplaceOnChanges": true
                },
                "timeout": {
                    "type": "string",
                    "description": "The job run timeout, in Go Time format (ex: `2h30m25s`)\n"
                }
            },
            "requiredInputs": [
                "cpuLimit",
                "memoryLimit"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering JobDefinition resources.\n",
                "properties": {
                    "command": {
                        "type": "string",
                        "description": "The command that will be run in the container if specified.\n"
                    },
                    "cpuLimit": {
                        "type": "integer",
                        "description": "The amount of vCPU computing resources to allocate to each container running the job.\n"
                    },
                    "cron": {
                        "$ref": "#/types/scaleway:index/JobDefinitionCron:JobDefinitionCron",
                        "description": "The cron configuration\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the job\n"
                    },
                    "env": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The environment variables of the container.\n"
                    },
                    "imageUri": {
                        "type": "string",
                        "description": "The uri of the container image that will be used for the job run.\n"
                    },
                    "memoryLimit": {
                        "type": "integer",
                        "description": "The memory computing resources in MB to allocate to each container running the job.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the job.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the Job is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region of the Job.\n",
                        "willReplaceOnChanges": true
                    },
                    "timeout": {
                        "type": "string",
                        "description": "The job run timeout, in Go Time format (ex: `2h30m25s`)\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/kubernetesCluster:KubernetesCluster": {
            "description": "Creates and manages Scaleway Kubernetes clusters. For more information, see [the documentation](https://www.scaleway.com/en/developers/api/kubernetes/).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst pn = new scaleway.VpcPrivateNetwork(\"pn\", {});\nconst cluster = new scaleway.KubernetesCluster(\"cluster\", {\n    name: \"tf-cluster\",\n    version: \"1.29.1\",\n    cni: \"cilium\",\n    privateNetworkId: pn.id,\n    deleteAdditionalResources: false,\n});\nconst pool = new scaleway.KubernetesNodePool(\"pool\", {\n    clusterId: cluster.id,\n    name: \"tf-pool\",\n    nodeType: \"DEV1-M\",\n    size: 1,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\npn = scaleway.VpcPrivateNetwork(\"pn\")\ncluster = scaleway.KubernetesCluster(\"cluster\",\n    name=\"tf-cluster\",\n    version=\"1.29.1\",\n    cni=\"cilium\",\n    private_network_id=pn.id,\n    delete_additional_resources=False)\npool = scaleway.KubernetesNodePool(\"pool\",\n    cluster_id=cluster.id,\n    name=\"tf-pool\",\n    node_type=\"DEV1-M\",\n    size=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pn = new Scaleway.VpcPrivateNetwork(\"pn\");\n\n    var cluster = new Scaleway.KubernetesCluster(\"cluster\", new()\n    {\n        Name = \"tf-cluster\",\n        Version = \"1.29.1\",\n        Cni = \"cilium\",\n        PrivateNetworkId = pn.Id,\n        DeleteAdditionalResources = false,\n    });\n\n    var pool = new Scaleway.KubernetesNodePool(\"pool\", new()\n    {\n        ClusterId = cluster.Id,\n        Name = \"tf-pool\",\n        NodeType = \"DEV1-M\",\n        Size = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcluster, err := scaleway.NewKubernetesCluster(ctx, \"cluster\", \u0026scaleway.KubernetesClusterArgs{\n\t\t\tName:                      pulumi.String(\"tf-cluster\"),\n\t\t\tVersion:                   pulumi.String(\"1.29.1\"),\n\t\t\tCni:                       pulumi.String(\"cilium\"),\n\t\t\tPrivateNetworkId:          pn.ID(),\n\t\t\tDeleteAdditionalResources: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewKubernetesNodePool(ctx, \"pool\", \u0026scaleway.KubernetesNodePoolArgs{\n\t\t\tClusterId: cluster.ID(),\n\t\t\tName:      pulumi.String(\"tf-pool\"),\n\t\t\tNodeType:  pulumi.String(\"DEV1-M\"),\n\t\t\tSize:      pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.KubernetesCluster;\nimport com.pulumi.scaleway.KubernetesClusterArgs;\nimport com.pulumi.scaleway.KubernetesNodePool;\nimport com.pulumi.scaleway.KubernetesNodePoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pn = new VpcPrivateNetwork(\"pn\");\n\n        var cluster = new KubernetesCluster(\"cluster\", KubernetesClusterArgs.builder()\n            .name(\"tf-cluster\")\n            .version(\"1.29.1\")\n            .cni(\"cilium\")\n            .privateNetworkId(pn.id())\n            .deleteAdditionalResources(false)\n            .build());\n\n        var pool = new KubernetesNodePool(\"pool\", KubernetesNodePoolArgs.builder()\n            .clusterId(cluster.id())\n            .name(\"tf-pool\")\n            .nodeType(\"DEV1-M\")\n            .size(1)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pn:\n    type: scaleway:VpcPrivateNetwork\n  cluster:\n    type: scaleway:KubernetesCluster\n    properties:\n      name: tf-cluster\n      version: 1.29.1\n      cni: cilium\n      privateNetworkId: ${pn.id}\n      deleteAdditionalResources: false\n  pool:\n    type: scaleway:KubernetesNodePool\n    properties:\n      clusterId: ${cluster.id}\n      name: tf-pool\n      nodeType: DEV1-M\n      size: 1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Multicloud\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst cluster = new scaleway.KubernetesCluster(\"cluster\", {\n    name: \"tf-cluster\",\n    type: \"multicloud\",\n    version: \"1.29.1\",\n    cni: \"kilo\",\n    deleteAdditionalResources: false,\n});\nconst pool = new scaleway.KubernetesNodePool(\"pool\", {\n    clusterId: cluster.id,\n    name: \"tf-pool\",\n    nodeType: \"external\",\n    size: 0,\n    minSize: 0,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\ncluster = scaleway.KubernetesCluster(\"cluster\",\n    name=\"tf-cluster\",\n    type=\"multicloud\",\n    version=\"1.29.1\",\n    cni=\"kilo\",\n    delete_additional_resources=False)\npool = scaleway.KubernetesNodePool(\"pool\",\n    cluster_id=cluster.id,\n    name=\"tf-pool\",\n    node_type=\"external\",\n    size=0,\n    min_size=0)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var cluster = new Scaleway.KubernetesCluster(\"cluster\", new()\n    {\n        Name = \"tf-cluster\",\n        Type = \"multicloud\",\n        Version = \"1.29.1\",\n        Cni = \"kilo\",\n        DeleteAdditionalResources = false,\n    });\n\n    var pool = new Scaleway.KubernetesNodePool(\"pool\", new()\n    {\n        ClusterId = cluster.Id,\n        Name = \"tf-pool\",\n        NodeType = \"external\",\n        Size = 0,\n        MinSize = 0,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcluster, err := scaleway.NewKubernetesCluster(ctx, \"cluster\", \u0026scaleway.KubernetesClusterArgs{\n\t\t\tName:                      pulumi.String(\"tf-cluster\"),\n\t\t\tType:                      pulumi.String(\"multicloud\"),\n\t\t\tVersion:                   pulumi.String(\"1.29.1\"),\n\t\t\tCni:                       pulumi.String(\"kilo\"),\n\t\t\tDeleteAdditionalResources: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewKubernetesNodePool(ctx, \"pool\", \u0026scaleway.KubernetesNodePoolArgs{\n\t\t\tClusterId: cluster.ID(),\n\t\t\tName:      pulumi.String(\"tf-pool\"),\n\t\t\tNodeType:  pulumi.String(\"external\"),\n\t\t\tSize:      pulumi.Int(0),\n\t\t\tMinSize:   pulumi.Int(0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.KubernetesCluster;\nimport com.pulumi.scaleway.KubernetesClusterArgs;\nimport com.pulumi.scaleway.KubernetesNodePool;\nimport com.pulumi.scaleway.KubernetesNodePoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var cluster = new KubernetesCluster(\"cluster\", KubernetesClusterArgs.builder()\n            .name(\"tf-cluster\")\n            .type(\"multicloud\")\n            .version(\"1.29.1\")\n            .cni(\"kilo\")\n            .deleteAdditionalResources(false)\n            .build());\n\n        var pool = new KubernetesNodePool(\"pool\", KubernetesNodePoolArgs.builder()\n            .clusterId(cluster.id())\n            .name(\"tf-pool\")\n            .nodeType(\"external\")\n            .size(0)\n            .minSize(0)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  cluster:\n    type: scaleway:KubernetesCluster\n    properties:\n      name: tf-cluster\n      type: multicloud\n      version: 1.29.1\n      cni: kilo\n      deleteAdditionalResources: false\n  pool:\n    type: scaleway:KubernetesNodePool\n    properties:\n      clusterId: ${cluster.id}\n      name: tf-pool\n      nodeType: external\n      size: 0\n      minSize: 0\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nFor a detailed example of how to add or run Elastic Metal servers instead of Instances on your cluster, please refer to this guide.\n\n### With additional configuration\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst pn = new scaleway.VpcPrivateNetwork(\"pn\", {});\nconst cluster = new scaleway.KubernetesCluster(\"cluster\", {\n    name: \"tf-cluster\",\n    description: \"cluster made in terraform\",\n    version: \"1.29.1\",\n    cni: \"calico\",\n    tags: [\"terraform\"],\n    privateNetworkId: pn.id,\n    deleteAdditionalResources: false,\n    autoscalerConfig: {\n        disableScaleDown: false,\n        scaleDownDelayAfterAdd: \"5m\",\n        estimator: \"binpacking\",\n        expander: \"random\",\n        ignoreDaemonsetsUtilization: true,\n        balanceSimilarNodeGroups: true,\n        expendablePodsPriorityCutoff: -5,\n    },\n});\nconst pool = new scaleway.KubernetesNodePool(\"pool\", {\n    clusterId: cluster.id,\n    name: \"tf-pool\",\n    nodeType: \"DEV1-M\",\n    size: 3,\n    autoscaling: true,\n    autohealing: true,\n    minSize: 1,\n    maxSize: 5,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\npn = scaleway.VpcPrivateNetwork(\"pn\")\ncluster = scaleway.KubernetesCluster(\"cluster\",\n    name=\"tf-cluster\",\n    description=\"cluster made in terraform\",\n    version=\"1.29.1\",\n    cni=\"calico\",\n    tags=[\"terraform\"],\n    private_network_id=pn.id,\n    delete_additional_resources=False,\n    autoscaler_config={\n        \"disable_scale_down\": False,\n        \"scale_down_delay_after_add\": \"5m\",\n        \"estimator\": \"binpacking\",\n        \"expander\": \"random\",\n        \"ignore_daemonsets_utilization\": True,\n        \"balance_similar_node_groups\": True,\n        \"expendable_pods_priority_cutoff\": -5,\n    })\npool = scaleway.KubernetesNodePool(\"pool\",\n    cluster_id=cluster.id,\n    name=\"tf-pool\",\n    node_type=\"DEV1-M\",\n    size=3,\n    autoscaling=True,\n    autohealing=True,\n    min_size=1,\n    max_size=5)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pn = new Scaleway.VpcPrivateNetwork(\"pn\");\n\n    var cluster = new Scaleway.KubernetesCluster(\"cluster\", new()\n    {\n        Name = \"tf-cluster\",\n        Description = \"cluster made in terraform\",\n        Version = \"1.29.1\",\n        Cni = \"calico\",\n        Tags = new[]\n        {\n            \"terraform\",\n        },\n        PrivateNetworkId = pn.Id,\n        DeleteAdditionalResources = false,\n        AutoscalerConfig = new Scaleway.Inputs.KubernetesClusterAutoscalerConfigArgs\n        {\n            DisableScaleDown = false,\n            ScaleDownDelayAfterAdd = \"5m\",\n            Estimator = \"binpacking\",\n            Expander = \"random\",\n            IgnoreDaemonsetsUtilization = true,\n            BalanceSimilarNodeGroups = true,\n            ExpendablePodsPriorityCutoff = -5,\n        },\n    });\n\n    var pool = new Scaleway.KubernetesNodePool(\"pool\", new()\n    {\n        ClusterId = cluster.Id,\n        Name = \"tf-pool\",\n        NodeType = \"DEV1-M\",\n        Size = 3,\n        Autoscaling = true,\n        Autohealing = true,\n        MinSize = 1,\n        MaxSize = 5,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcluster, err := scaleway.NewKubernetesCluster(ctx, \"cluster\", \u0026scaleway.KubernetesClusterArgs{\n\t\t\tName:        pulumi.String(\"tf-cluster\"),\n\t\t\tDescription: pulumi.String(\"cluster made in terraform\"),\n\t\t\tVersion:     pulumi.String(\"1.29.1\"),\n\t\t\tCni:         pulumi.String(\"calico\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"terraform\"),\n\t\t\t},\n\t\t\tPrivateNetworkId:          pn.ID(),\n\t\t\tDeleteAdditionalResources: pulumi.Bool(false),\n\t\t\tAutoscalerConfig: \u0026scaleway.KubernetesClusterAutoscalerConfigArgs{\n\t\t\t\tDisableScaleDown:             pulumi.Bool(false),\n\t\t\t\tScaleDownDelayAfterAdd:       pulumi.String(\"5m\"),\n\t\t\t\tEstimator:                    pulumi.String(\"binpacking\"),\n\t\t\t\tExpander:                     pulumi.String(\"random\"),\n\t\t\t\tIgnoreDaemonsetsUtilization:  pulumi.Bool(true),\n\t\t\t\tBalanceSimilarNodeGroups:     pulumi.Bool(true),\n\t\t\t\tExpendablePodsPriorityCutoff: pulumi.Int(-5),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewKubernetesNodePool(ctx, \"pool\", \u0026scaleway.KubernetesNodePoolArgs{\n\t\t\tClusterId:   cluster.ID(),\n\t\t\tName:        pulumi.String(\"tf-pool\"),\n\t\t\tNodeType:    pulumi.String(\"DEV1-M\"),\n\t\t\tSize:        pulumi.Int(3),\n\t\t\tAutoscaling: pulumi.Bool(true),\n\t\t\tAutohealing: pulumi.Bool(true),\n\t\t\tMinSize:     pulumi.Int(1),\n\t\t\tMaxSize:     pulumi.Int(5),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.KubernetesCluster;\nimport com.pulumi.scaleway.KubernetesClusterArgs;\nimport com.pulumi.scaleway.inputs.KubernetesClusterAutoscalerConfigArgs;\nimport com.pulumi.scaleway.KubernetesNodePool;\nimport com.pulumi.scaleway.KubernetesNodePoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pn = new VpcPrivateNetwork(\"pn\");\n\n        var cluster = new KubernetesCluster(\"cluster\", KubernetesClusterArgs.builder()\n            .name(\"tf-cluster\")\n            .description(\"cluster made in terraform\")\n            .version(\"1.29.1\")\n            .cni(\"calico\")\n            .tags(\"terraform\")\n            .privateNetworkId(pn.id())\n            .deleteAdditionalResources(false)\n            .autoscalerConfig(KubernetesClusterAutoscalerConfigArgs.builder()\n                .disableScaleDown(false)\n                .scaleDownDelayAfterAdd(\"5m\")\n                .estimator(\"binpacking\")\n                .expander(\"random\")\n                .ignoreDaemonsetsUtilization(true)\n                .balanceSimilarNodeGroups(true)\n                .expendablePodsPriorityCutoff(-5)\n                .build())\n            .build());\n\n        var pool = new KubernetesNodePool(\"pool\", KubernetesNodePoolArgs.builder()\n            .clusterId(cluster.id())\n            .name(\"tf-pool\")\n            .nodeType(\"DEV1-M\")\n            .size(3)\n            .autoscaling(true)\n            .autohealing(true)\n            .minSize(1)\n            .maxSize(5)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pn:\n    type: scaleway:VpcPrivateNetwork\n  cluster:\n    type: scaleway:KubernetesCluster\n    properties:\n      name: tf-cluster\n      description: cluster made in terraform\n      version: 1.29.1\n      cni: calico\n      tags:\n        - terraform\n      privateNetworkId: ${pn.id}\n      deleteAdditionalResources: false\n      autoscalerConfig:\n        disableScaleDown: false\n        scaleDownDelayAfterAdd: 5m\n        estimator: binpacking\n        expander: random\n        ignoreDaemonsetsUtilization: true\n        balanceSimilarNodeGroups: true\n        expendablePodsPriorityCutoff: -5\n  pool:\n    type: scaleway:KubernetesNodePool\n    properties:\n      clusterId: ${cluster.id}\n      name: tf-pool\n      nodeType: DEV1-M\n      size: 3\n      autoscaling: true\n      autohealing: true\n      minSize: 1\n      maxSize: 5\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### With the kubernetes provider\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as _null from \"@pulumi/null\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst pn = new scaleway.VpcPrivateNetwork(\"pn\", {});\nconst cluster = new scaleway.KubernetesCluster(\"cluster\", {\n    name: \"tf-cluster\",\n    version: \"1.29.1\",\n    cni: \"cilium\",\n    privateNetworkId: pn.id,\n    deleteAdditionalResources: false,\n});\nconst pool = new scaleway.KubernetesNodePool(\"pool\", {\n    clusterId: cluster.id,\n    name: \"tf-pool\",\n    nodeType: \"DEV1-M\",\n    size: 1,\n});\nconst kubeconfig = new _null.Resource(\"kubeconfig\", {triggers: {\n    host: cluster.kubeconfigs.apply(kubeconfigs =\u003e kubeconfigs[0].host),\n    token: cluster.kubeconfigs.apply(kubeconfigs =\u003e kubeconfigs[0].token),\n    cluster_ca_certificate: cluster.kubeconfigs.apply(kubeconfigs =\u003e kubeconfigs[0].clusterCaCertificate),\n}}, {\n    dependsOn: [pool],\n});\n```\n```python\nimport pulumi\nimport pulumi_null as null\nimport pulumiverse_scaleway as scaleway\n\npn = scaleway.VpcPrivateNetwork(\"pn\")\ncluster = scaleway.KubernetesCluster(\"cluster\",\n    name=\"tf-cluster\",\n    version=\"1.29.1\",\n    cni=\"cilium\",\n    private_network_id=pn.id,\n    delete_additional_resources=False)\npool = scaleway.KubernetesNodePool(\"pool\",\n    cluster_id=cluster.id,\n    name=\"tf-pool\",\n    node_type=\"DEV1-M\",\n    size=1)\nkubeconfig = null.Resource(\"kubeconfig\", triggers={\n    \"host\": cluster.kubeconfigs[0].host,\n    \"token\": cluster.kubeconfigs[0].token,\n    \"cluster_ca_certificate\": cluster.kubeconfigs[0].cluster_ca_certificate,\n},\nopts = pulumi.ResourceOptions(depends_on=[pool]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Null = Pulumi.Null;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pn = new Scaleway.VpcPrivateNetwork(\"pn\");\n\n    var cluster = new Scaleway.KubernetesCluster(\"cluster\", new()\n    {\n        Name = \"tf-cluster\",\n        Version = \"1.29.1\",\n        Cni = \"cilium\",\n        PrivateNetworkId = pn.Id,\n        DeleteAdditionalResources = false,\n    });\n\n    var pool = new Scaleway.KubernetesNodePool(\"pool\", new()\n    {\n        ClusterId = cluster.Id,\n        Name = \"tf-pool\",\n        NodeType = \"DEV1-M\",\n        Size = 1,\n    });\n\n    var kubeconfig = new Null.Resource(\"kubeconfig\", new()\n    {\n        Triggers = \n        {\n            { \"host\", cluster.Kubeconfigs.Apply(kubeconfigs =\u003e kubeconfigs[0].Host) },\n            { \"token\", cluster.Kubeconfigs.Apply(kubeconfigs =\u003e kubeconfigs[0].Token) },\n            { \"cluster_ca_certificate\", cluster.Kubeconfigs.Apply(kubeconfigs =\u003e kubeconfigs[0].ClusterCaCertificate) },\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn =\n        {\n            pool,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-null/sdk/go/null\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcluster, err := scaleway.NewKubernetesCluster(ctx, \"cluster\", \u0026scaleway.KubernetesClusterArgs{\n\t\t\tName:                      pulumi.String(\"tf-cluster\"),\n\t\t\tVersion:                   pulumi.String(\"1.29.1\"),\n\t\t\tCni:                       pulumi.String(\"cilium\"),\n\t\t\tPrivateNetworkId:          pn.ID(),\n\t\t\tDeleteAdditionalResources: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpool, err := scaleway.NewKubernetesNodePool(ctx, \"pool\", \u0026scaleway.KubernetesNodePoolArgs{\n\t\t\tClusterId: cluster.ID(),\n\t\t\tName:      pulumi.String(\"tf-pool\"),\n\t\t\tNodeType:  pulumi.String(\"DEV1-M\"),\n\t\t\tSize:      pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = null.NewResource(ctx, \"kubeconfig\", \u0026null.ResourceArgs{\n\t\t\tTriggers: pulumi.StringMap{\n\t\t\t\t\"host\": pulumi.String(cluster.Kubeconfigs.ApplyT(func(kubeconfigs []scaleway.KubernetesClusterKubeconfig) (*string, error) {\n\t\t\t\t\treturn \u0026kubeconfigs[0].Host, nil\n\t\t\t\t}).(pulumi.StringPtrOutput)),\n\t\t\t\t\"token\": pulumi.String(cluster.Kubeconfigs.ApplyT(func(kubeconfigs []scaleway.KubernetesClusterKubeconfig) (*string, error) {\n\t\t\t\t\treturn \u0026kubeconfigs[0].Token, nil\n\t\t\t\t}).(pulumi.StringPtrOutput)),\n\t\t\t\t\"cluster_ca_certificate\": pulumi.String(cluster.Kubeconfigs.ApplyT(func(kubeconfigs []scaleway.KubernetesClusterKubeconfig) (*string, error) {\n\t\t\t\t\treturn \u0026kubeconfigs[0].ClusterCaCertificate, nil\n\t\t\t\t}).(pulumi.StringPtrOutput)),\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tpool,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.KubernetesCluster;\nimport com.pulumi.scaleway.KubernetesClusterArgs;\nimport com.pulumi.scaleway.KubernetesNodePool;\nimport com.pulumi.scaleway.KubernetesNodePoolArgs;\nimport com.pulumi.null.Resource;\nimport com.pulumi.null.ResourceArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pn = new VpcPrivateNetwork(\"pn\");\n\n        var cluster = new KubernetesCluster(\"cluster\", KubernetesClusterArgs.builder()\n            .name(\"tf-cluster\")\n            .version(\"1.29.1\")\n            .cni(\"cilium\")\n            .privateNetworkId(pn.id())\n            .deleteAdditionalResources(false)\n            .build());\n\n        var pool = new KubernetesNodePool(\"pool\", KubernetesNodePoolArgs.builder()\n            .clusterId(cluster.id())\n            .name(\"tf-pool\")\n            .nodeType(\"DEV1-M\")\n            .size(1)\n            .build());\n\n        var kubeconfig = new Resource(\"kubeconfig\", ResourceArgs.builder()\n            .triggers(Map.ofEntries(\n                Map.entry(\"host\", cluster.kubeconfigs().applyValue(kubeconfigs -\u003e kubeconfigs[0].host())),\n                Map.entry(\"token\", cluster.kubeconfigs().applyValue(kubeconfigs -\u003e kubeconfigs[0].token())),\n                Map.entry(\"cluster_ca_certificate\", cluster.kubeconfigs().applyValue(kubeconfigs -\u003e kubeconfigs[0].clusterCaCertificate()))\n            ))\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(pool)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pn:\n    type: scaleway:VpcPrivateNetwork\n  cluster:\n    type: scaleway:KubernetesCluster\n    properties:\n      name: tf-cluster\n      version: 1.29.1\n      cni: cilium\n      privateNetworkId: ${pn.id}\n      deleteAdditionalResources: false\n  pool:\n    type: scaleway:KubernetesNodePool\n    properties:\n      clusterId: ${cluster.id}\n      name: tf-pool\n      nodeType: DEV1-M\n      size: 1\n  kubeconfig:\n    type: null:Resource\n    properties:\n      triggers:\n        host: ${cluster.kubeconfigs[0].host}\n        token: ${cluster.kubeconfigs[0].token}\n        cluster_ca_certificate: ${cluster.kubeconfigs[0].clusterCaCertificate}\n    options:\n      dependson:\n        - ${pool}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nThe `null_resource` is needed because when the cluster is created, it's status is `pool_required`, but the kubeconfig can already be downloaded.\nIt leads the `kubernetes` provider to start creating its objects, but the DNS entry for the Kubernetes master is not yet ready, that's why it's needed to wait for at least a pool.\n\n### With the Helm provider\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as _null from \"@pulumi/null\";\nimport * as helm from \"@pulumi/helm\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst pn = new scaleway.VpcPrivateNetwork(\"pn\", {});\nconst cluster = new scaleway.KubernetesCluster(\"cluster\", {\n    name: \"tf-cluster\",\n    version: \"1.29.1\",\n    cni: \"cilium\",\n    deleteAdditionalResources: false,\n    privateNetworkId: pn.id,\n});\nconst pool = new scaleway.KubernetesNodePool(\"pool\", {\n    clusterId: cluster.id,\n    name: \"tf-pool\",\n    nodeType: \"DEV1-M\",\n    size: 1,\n});\nconst kubeconfig = new _null.Resource(\"kubeconfig\", {triggers: {\n    host: cluster.kubeconfigs.apply(kubeconfigs =\u003e kubeconfigs[0].host),\n    token: cluster.kubeconfigs.apply(kubeconfigs =\u003e kubeconfigs[0].token),\n    cluster_ca_certificate: cluster.kubeconfigs.apply(kubeconfigs =\u003e kubeconfigs[0].clusterCaCertificate),\n}}, {\n    dependsOn: [pool],\n});\nconst nginxIp = new scaleway.LoadbalancerIp(\"nginx_ip\", {\n    zone: \"fr-par-1\",\n    projectId: cluster.projectId,\n});\nconst nginxIngress = new helm.index.Release(\"nginx_ingress\", {\n    name: \"nginx-ingress\",\n    namespace: \"kube-system\",\n    repository: \"https://kubernetes.github.io/ingress-nginx\",\n    chart: \"ingress-nginx\",\n    set: [\n        {\n            name: \"controller.service.loadBalancerIP\",\n            value: nginxIp.ipAddress,\n        },\n        {\n            name: \"controller.config.use-proxy-protocol\",\n            value: \"true\",\n        },\n        {\n            name: \"controller.service.annotations.service\\\\.beta\\\\.kubernetes\\\\.io/scw-loadbalancer-proxy-protocol-v2\",\n            value: \"true\",\n        },\n        {\n            name: \"controller.service.annotations.service\\\\.beta\\\\.kubernetes\\\\.io/scw-loadbalancer-zone\",\n            value: nginxIp.zone,\n        },\n        {\n            name: \"controller.service.externalTrafficPolicy\",\n            value: \"Local\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_helm as helm\nimport pulumi_null as null\nimport pulumiverse_scaleway as scaleway\n\npn = scaleway.VpcPrivateNetwork(\"pn\")\ncluster = scaleway.KubernetesCluster(\"cluster\",\n    name=\"tf-cluster\",\n    version=\"1.29.1\",\n    cni=\"cilium\",\n    delete_additional_resources=False,\n    private_network_id=pn.id)\npool = scaleway.KubernetesNodePool(\"pool\",\n    cluster_id=cluster.id,\n    name=\"tf-pool\",\n    node_type=\"DEV1-M\",\n    size=1)\nkubeconfig = null.Resource(\"kubeconfig\", triggers={\n    \"host\": cluster.kubeconfigs[0].host,\n    \"token\": cluster.kubeconfigs[0].token,\n    \"cluster_ca_certificate\": cluster.kubeconfigs[0].cluster_ca_certificate,\n},\nopts = pulumi.ResourceOptions(depends_on=[pool]))\nnginx_ip = scaleway.LoadbalancerIp(\"nginx_ip\",\n    zone=\"fr-par-1\",\n    project_id=cluster.project_id)\nnginx_ingress = helm.index.Release(\"nginx_ingress\",\n    name=nginx-ingress,\n    namespace=kube-system,\n    repository=https://kubernetes.github.io/ingress-nginx,\n    chart=ingress-nginx,\n    set=[\n        {\n            name: controller.service.loadBalancerIP,\n            value: nginx_ip.ip_address,\n        },\n        {\n            name: controller.config.use-proxy-protocol,\n            value: true,\n        },\n        {\n            name: controller.service.annotations.service\\.beta\\.kubernetes\\.io/scw-loadbalancer-proxy-protocol-v2,\n            value: true,\n        },\n        {\n            name: controller.service.annotations.service\\.beta\\.kubernetes\\.io/scw-loadbalancer-zone,\n            value: nginx_ip.zone,\n        },\n        {\n            name: controller.service.externalTrafficPolicy,\n            value: Local,\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Helm = Pulumi.Helm;\nusing Null = Pulumi.Null;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pn = new Scaleway.VpcPrivateNetwork(\"pn\");\n\n    var cluster = new Scaleway.KubernetesCluster(\"cluster\", new()\n    {\n        Name = \"tf-cluster\",\n        Version = \"1.29.1\",\n        Cni = \"cilium\",\n        DeleteAdditionalResources = false,\n        PrivateNetworkId = pn.Id,\n    });\n\n    var pool = new Scaleway.KubernetesNodePool(\"pool\", new()\n    {\n        ClusterId = cluster.Id,\n        Name = \"tf-pool\",\n        NodeType = \"DEV1-M\",\n        Size = 1,\n    });\n\n    var kubeconfig = new Null.Resource(\"kubeconfig\", new()\n    {\n        Triggers = \n        {\n            { \"host\", cluster.Kubeconfigs.Apply(kubeconfigs =\u003e kubeconfigs[0].Host) },\n            { \"token\", cluster.Kubeconfigs.Apply(kubeconfigs =\u003e kubeconfigs[0].Token) },\n            { \"cluster_ca_certificate\", cluster.Kubeconfigs.Apply(kubeconfigs =\u003e kubeconfigs[0].ClusterCaCertificate) },\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn =\n        {\n            pool,\n        },\n    });\n\n    var nginxIp = new Scaleway.LoadbalancerIp(\"nginx_ip\", new()\n    {\n        Zone = \"fr-par-1\",\n        ProjectId = cluster.ProjectId,\n    });\n\n    var nginxIngress = new Helm.Index.Release(\"nginx_ingress\", new()\n    {\n        Name = \"nginx-ingress\",\n        Namespace = \"kube-system\",\n        Repository = \"https://kubernetes.github.io/ingress-nginx\",\n        Chart = \"ingress-nginx\",\n        Set = new[]\n        {\n            \n            {\n                { \"name\", \"controller.service.loadBalancerIP\" },\n                { \"value\", nginxIp.IpAddress },\n            },\n            \n            {\n                { \"name\", \"controller.config.use-proxy-protocol\" },\n                { \"value\", \"true\" },\n            },\n            \n            {\n                { \"name\", \"controller.service.annotations.service\\\\.beta\\\\.kubernetes\\\\.io/scw-loadbalancer-proxy-protocol-v2\" },\n                { \"value\", \"true\" },\n            },\n            \n            {\n                { \"name\", \"controller.service.annotations.service\\\\.beta\\\\.kubernetes\\\\.io/scw-loadbalancer-zone\" },\n                { \"value\", nginxIp.Zone },\n            },\n            \n            {\n                { \"name\", \"controller.service.externalTrafficPolicy\" },\n                { \"value\", \"Local\" },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-helm/sdk/go/helm\"\n\t\"github.com/pulumi/pulumi-null/sdk/go/null\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcluster, err := scaleway.NewKubernetesCluster(ctx, \"cluster\", \u0026scaleway.KubernetesClusterArgs{\n\t\t\tName:                      pulumi.String(\"tf-cluster\"),\n\t\t\tVersion:                   pulumi.String(\"1.29.1\"),\n\t\t\tCni:                       pulumi.String(\"cilium\"),\n\t\t\tDeleteAdditionalResources: pulumi.Bool(false),\n\t\t\tPrivateNetworkId:          pn.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpool, err := scaleway.NewKubernetesNodePool(ctx, \"pool\", \u0026scaleway.KubernetesNodePoolArgs{\n\t\t\tClusterId: cluster.ID(),\n\t\t\tName:      pulumi.String(\"tf-pool\"),\n\t\t\tNodeType:  pulumi.String(\"DEV1-M\"),\n\t\t\tSize:      pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = null.NewResource(ctx, \"kubeconfig\", \u0026null.ResourceArgs{\n\t\t\tTriggers: pulumi.StringMap{\n\t\t\t\t\"host\": pulumi.String(cluster.Kubeconfigs.ApplyT(func(kubeconfigs []scaleway.KubernetesClusterKubeconfig) (*string, error) {\n\t\t\t\t\treturn \u0026kubeconfigs[0].Host, nil\n\t\t\t\t}).(pulumi.StringPtrOutput)),\n\t\t\t\t\"token\": pulumi.String(cluster.Kubeconfigs.ApplyT(func(kubeconfigs []scaleway.KubernetesClusterKubeconfig) (*string, error) {\n\t\t\t\t\treturn \u0026kubeconfigs[0].Token, nil\n\t\t\t\t}).(pulumi.StringPtrOutput)),\n\t\t\t\t\"cluster_ca_certificate\": pulumi.String(cluster.Kubeconfigs.ApplyT(func(kubeconfigs []scaleway.KubernetesClusterKubeconfig) (*string, error) {\n\t\t\t\t\treturn \u0026kubeconfigs[0].ClusterCaCertificate, nil\n\t\t\t\t}).(pulumi.StringPtrOutput)),\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tpool,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tnginxIp, err := scaleway.NewLoadbalancerIp(ctx, \"nginx_ip\", \u0026scaleway.LoadbalancerIpArgs{\n\t\t\tZone:      pulumi.String(\"fr-par-1\"),\n\t\t\tProjectId: cluster.ProjectId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = helm.NewRelease(ctx, \"nginx_ingress\", \u0026helm.ReleaseArgs{\n\t\t\tName:       \"nginx-ingress\",\n\t\t\tNamespace:  \"kube-system\",\n\t\t\tRepository: \"https://kubernetes.github.io/ingress-nginx\",\n\t\t\tChart:      \"ingress-nginx\",\n\t\t\tSet: []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"name\":  \"controller.service.loadBalancerIP\",\n\t\t\t\t\t\"value\": nginxIp.IpAddress,\n\t\t\t\t},\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"name\":  \"controller.config.use-proxy-protocol\",\n\t\t\t\t\t\"value\": \"true\",\n\t\t\t\t},\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"name\":  \"controller.service.annotations.service\\\\.beta\\\\.kubernetes\\\\.io/scw-loadbalancer-proxy-protocol-v2\",\n\t\t\t\t\t\"value\": \"true\",\n\t\t\t\t},\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"name\":  \"controller.service.annotations.service\\\\.beta\\\\.kubernetes\\\\.io/scw-loadbalancer-zone\",\n\t\t\t\t\t\"value\": nginxIp.Zone,\n\t\t\t\t},\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"name\":  \"controller.service.externalTrafficPolicy\",\n\t\t\t\t\t\"value\": \"Local\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.KubernetesCluster;\nimport com.pulumi.scaleway.KubernetesClusterArgs;\nimport com.pulumi.scaleway.KubernetesNodePool;\nimport com.pulumi.scaleway.KubernetesNodePoolArgs;\nimport com.pulumi.null.Resource;\nimport com.pulumi.null.ResourceArgs;\nimport com.pulumi.scaleway.LoadbalancerIp;\nimport com.pulumi.scaleway.LoadbalancerIpArgs;\nimport com.pulumi.helm.release;\nimport com.pulumi.helm.ReleaseArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pn = new VpcPrivateNetwork(\"pn\");\n\n        var cluster = new KubernetesCluster(\"cluster\", KubernetesClusterArgs.builder()\n            .name(\"tf-cluster\")\n            .version(\"1.29.1\")\n            .cni(\"cilium\")\n            .deleteAdditionalResources(false)\n            .privateNetworkId(pn.id())\n            .build());\n\n        var pool = new KubernetesNodePool(\"pool\", KubernetesNodePoolArgs.builder()\n            .clusterId(cluster.id())\n            .name(\"tf-pool\")\n            .nodeType(\"DEV1-M\")\n            .size(1)\n            .build());\n\n        var kubeconfig = new Resource(\"kubeconfig\", ResourceArgs.builder()\n            .triggers(Map.ofEntries(\n                Map.entry(\"host\", cluster.kubeconfigs().applyValue(kubeconfigs -\u003e kubeconfigs[0].host())),\n                Map.entry(\"token\", cluster.kubeconfigs().applyValue(kubeconfigs -\u003e kubeconfigs[0].token())),\n                Map.entry(\"cluster_ca_certificate\", cluster.kubeconfigs().applyValue(kubeconfigs -\u003e kubeconfigs[0].clusterCaCertificate()))\n            ))\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(pool)\n                .build());\n\n        var nginxIp = new LoadbalancerIp(\"nginxIp\", LoadbalancerIpArgs.builder()\n            .zone(\"fr-par-1\")\n            .projectId(cluster.projectId())\n            .build());\n\n        var nginxIngress = new Release(\"nginxIngress\", ReleaseArgs.builder()\n            .name(\"nginx-ingress\")\n            .namespace(\"kube-system\")\n            .repository(\"https://kubernetes.github.io/ingress-nginx\")\n            .chart(\"ingress-nginx\")\n            .set(            \n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pn:\n    type: scaleway:VpcPrivateNetwork\n  cluster:\n    type: scaleway:KubernetesCluster\n    properties:\n      name: tf-cluster\n      version: 1.29.1\n      cni: cilium\n      deleteAdditionalResources: false\n      privateNetworkId: ${pn.id}\n  pool:\n    type: scaleway:KubernetesNodePool\n    properties:\n      clusterId: ${cluster.id}\n      name: tf-pool\n      nodeType: DEV1-M\n      size: 1\n  kubeconfig:\n    type: null:Resource\n    properties:\n      triggers:\n        host: ${cluster.kubeconfigs[0].host}\n        token: ${cluster.kubeconfigs[0].token}\n        cluster_ca_certificate: ${cluster.kubeconfigs[0].clusterCaCertificate}\n    options:\n      dependson:\n        - ${pool}\n  nginxIp:\n    type: scaleway:LoadbalancerIp\n    name: nginx_ip\n    properties:\n      zone: fr-par-1\n      projectId: ${cluster.projectId}\n  nginxIngress:\n    type: helm:release\n    name: nginx_ingress\n    properties:\n      name: nginx-ingress\n      namespace: kube-system\n      repository: https://kubernetes.github.io/ingress-nginx\n      chart: ingress-nginx\n      set:\n        - name: controller.service.loadBalancerIP\n          value: ${nginxIp.ipAddress}\n        - name: controller.config.use-proxy-protocol\n          value: 'true'\n        - name: controller.service.annotations.service\\.beta\\.kubernetes\\.io/scw-loadbalancer-proxy-protocol-v2\n          value: 'true'\n        - name: controller.service.annotations.service\\.beta\\.kubernetes\\.io/scw-loadbalancer-zone\n          value: ${nginxIp.zone}\n        - name: controller.service.externalTrafficPolicy\n          value: Local\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Deprecation of default_pool\n\n`default_pool` is deprecated in favour the `scaleway.KubernetesNodePool` resource. Here is a migration example.\n\nBefore:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  cluster:\n    type: scaleway:KubernetesCluster\n    properties:\n      name: tf-cluster\n      version: 1.18.0\n      cni: cilium\n      defaultPool:\n        - nodeType: DEV1-M\n          size: 1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nAfter:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst cluster = new scaleway.KubernetesCluster(\"cluster\", {\n    name: \"tf-cluster\",\n    version: \"1.18.0\",\n    cni: \"cilium\",\n});\nconst _default = new scaleway.KubernetesNodePool(\"default\", {\n    clusterId: jack.id,\n    name: \"default\",\n    nodeType: \"DEV1-M\",\n    size: 1,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\ncluster = scaleway.KubernetesCluster(\"cluster\",\n    name=\"tf-cluster\",\n    version=\"1.18.0\",\n    cni=\"cilium\")\ndefault = scaleway.KubernetesNodePool(\"default\",\n    cluster_id=jack[\"id\"],\n    name=\"default\",\n    node_type=\"DEV1-M\",\n    size=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var cluster = new Scaleway.KubernetesCluster(\"cluster\", new()\n    {\n        Name = \"tf-cluster\",\n        Version = \"1.18.0\",\n        Cni = \"cilium\",\n    });\n\n    var @default = new Scaleway.KubernetesNodePool(\"default\", new()\n    {\n        ClusterId = jack.Id,\n        Name = \"default\",\n        NodeType = \"DEV1-M\",\n        Size = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewKubernetesCluster(ctx, \"cluster\", \u0026scaleway.KubernetesClusterArgs{\n\t\t\tName:    pulumi.String(\"tf-cluster\"),\n\t\t\tVersion: pulumi.String(\"1.18.0\"),\n\t\t\tCni:     pulumi.String(\"cilium\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewKubernetesNodePool(ctx, \"default\", \u0026scaleway.KubernetesNodePoolArgs{\n\t\t\tClusterId: pulumi.Any(jack.Id),\n\t\t\tName:      pulumi.String(\"default\"),\n\t\t\tNodeType:  pulumi.String(\"DEV1-M\"),\n\t\t\tSize:      pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.KubernetesCluster;\nimport com.pulumi.scaleway.KubernetesClusterArgs;\nimport com.pulumi.scaleway.KubernetesNodePool;\nimport com.pulumi.scaleway.KubernetesNodePoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var cluster = new KubernetesCluster(\"cluster\", KubernetesClusterArgs.builder()\n            .name(\"tf-cluster\")\n            .version(\"1.18.0\")\n            .cni(\"cilium\")\n            .build());\n\n        var default_ = new KubernetesNodePool(\"default\", KubernetesNodePoolArgs.builder()\n            .clusterId(jack.id())\n            .name(\"default\")\n            .nodeType(\"DEV1-M\")\n            .size(1)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  cluster:\n    type: scaleway:KubernetesCluster\n    properties:\n      name: tf-cluster\n      version: 1.18.0\n      cni: cilium\n  default:\n    type: scaleway:KubernetesNodePool\n    properties:\n      clusterId: ${jack.id}\n      name: default\n      nodeType: DEV1-M\n      size: 1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nOnce you have moved all the `default_pool` into their own object, you will need to import them. If your pool had the ID 11111111-1111-1111-1111-111111111111 in the `fr-par` region, you can import it by typing:\n\n```bash\nterraform import scaleway_k8s_pool.default fr-par/11111111-1111-1111-1111-111111111111\n```\n\nThen you will only need to type `pulumi up` to have a smooth migration.\n\n## Import\n\nKubernetes clusters can be imported using the `{region}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/kubernetesCluster:KubernetesCluster mycluster fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "admissionPlugins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of [admission plugins](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/) to enable on the cluster.\n"
                },
                "apiserverCertSans": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional Subject Alternative Names for the Kubernetes API server certificate\n"
                },
                "apiserverUrl": {
                    "type": "string",
                    "description": "The URL of the Kubernetes API server.\n"
                },
                "autoUpgrade": {
                    "$ref": "#/types/scaleway:index/KubernetesClusterAutoUpgrade:KubernetesClusterAutoUpgrade",
                    "description": "The auto upgrade configuration.\n"
                },
                "autoscalerConfig": {
                    "$ref": "#/types/scaleway:index/KubernetesClusterAutoscalerConfig:KubernetesClusterAutoscalerConfig",
                    "description": "The configuration options for the [Kubernetes cluster autoscaler](https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler).\n"
                },
                "cni": {
                    "type": "string",
                    "description": "The Container Network Interface (CNI) for the Kubernetes cluster.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The creation date of the cluster.\n"
                },
                "deleteAdditionalResources": {
                    "type": "boolean",
                    "description": "Delete additional resources like block volumes, load-balancers and the cluster's private network (if empty) that were created in Kubernetes on cluster deletion.\n\u003e **Important:** Setting this field to `true` means that you will lose all your cluster data and network configuration when you delete your cluster.\nIf you prefer keeping it, you should instead set it as `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the Kubernetes cluster.\n"
                },
                "featureGates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of [feature gates](https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/) to enable on the cluster.\n"
                },
                "kubeconfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/KubernetesClusterKubeconfig:KubernetesClusterKubeconfig"
                    },
                    "description": "The kubeconfig configuration file of the Kubernetes cluster\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Kubernetes cluster.\n"
                },
                "openIdConnectConfig": {
                    "$ref": "#/types/scaleway:index/KubernetesClusterOpenIdConnectConfig:KubernetesClusterOpenIdConnectConfig",
                    "description": "The OpenID Connect configuration of the cluster\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the cluster is associated with.\n"
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "The ID of the private network of the cluster.\n\n\u003e **Important:** Changes to this field will recreate a new resource.\n\n\u003e **Important:** Private Networks are now mandatory with Kapsule Clusters. If you have a legacy cluster (no `private_network_id` set),\nyou can still set it now. In this case it will not destroy and recreate your cluster but migrate it to the Private Network.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the cluster is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the cluster should be created.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the Kubernetes cluster.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Kubernetes cluster.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of Kubernetes cluster. Possible values are:\n\n- for mutualized clusters: `kapsule` or `multicloud`\n\n- for dedicated Kapsule clusters: `kapsule-dedicated-4`, `kapsule-dedicated-8` or `kapsule-dedicated-16`.\n\n- for dedicated Kosmos clusters: `multicloud-dedicated-4`, `multicloud-dedicated-8` or `multicloud-dedicated-16`.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The last update date of the cluster.\n"
                },
                "upgradeAvailable": {
                    "type": "boolean",
                    "description": "Set to `true` if a newer Kubernetes version is available.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the Kubernetes cluster.\n"
                },
                "wildcardDns": {
                    "type": "string",
                    "description": "The DNS wildcard that points to all ready nodes.\n"
                }
            },
            "required": [
                "apiserverUrl",
                "autoUpgrade",
                "autoscalerConfig",
                "cni",
                "createdAt",
                "deleteAdditionalResources",
                "kubeconfigs",
                "name",
                "openIdConnectConfig",
                "organizationId",
                "projectId",
                "region",
                "status",
                "type",
                "updatedAt",
                "upgradeAvailable",
                "version",
                "wildcardDns"
            ],
            "inputProperties": {
                "admissionPlugins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of [admission plugins](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/) to enable on the cluster.\n"
                },
                "apiserverCertSans": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional Subject Alternative Names for the Kubernetes API server certificate\n"
                },
                "autoUpgrade": {
                    "$ref": "#/types/scaleway:index/KubernetesClusterAutoUpgrade:KubernetesClusterAutoUpgrade",
                    "description": "The auto upgrade configuration.\n"
                },
                "autoscalerConfig": {
                    "$ref": "#/types/scaleway:index/KubernetesClusterAutoscalerConfig:KubernetesClusterAutoscalerConfig",
                    "description": "The configuration options for the [Kubernetes cluster autoscaler](https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler).\n"
                },
                "cni": {
                    "type": "string",
                    "description": "The Container Network Interface (CNI) for the Kubernetes cluster.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "deleteAdditionalResources": {
                    "type": "boolean",
                    "description": "Delete additional resources like block volumes, load-balancers and the cluster's private network (if empty) that were created in Kubernetes on cluster deletion.\n\u003e **Important:** Setting this field to `true` means that you will lose all your cluster data and network configuration when you delete your cluster.\nIf you prefer keeping it, you should instead set it as `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the Kubernetes cluster.\n"
                },
                "featureGates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of [feature gates](https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/) to enable on the cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Kubernetes cluster.\n"
                },
                "openIdConnectConfig": {
                    "$ref": "#/types/scaleway:index/KubernetesClusterOpenIdConnectConfig:KubernetesClusterOpenIdConnectConfig",
                    "description": "The OpenID Connect configuration of the cluster\n"
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "The ID of the private network of the cluster.\n\n\u003e **Important:** Changes to this field will recreate a new resource.\n\n\u003e **Important:** Private Networks are now mandatory with Kapsule Clusters. If you have a legacy cluster (no `private_network_id` set),\nyou can still set it now. In this case it will not destroy and recreate your cluster but migrate it to the Private Network.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the cluster is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the cluster should be created.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Kubernetes cluster.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of Kubernetes cluster. Possible values are:\n\n- for mutualized clusters: `kapsule` or `multicloud`\n\n- for dedicated Kapsule clusters: `kapsule-dedicated-4`, `kapsule-dedicated-8` or `kapsule-dedicated-16`.\n\n- for dedicated Kosmos clusters: `multicloud-dedicated-4`, `multicloud-dedicated-8` or `multicloud-dedicated-16`.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the Kubernetes cluster.\n"
                }
            },
            "requiredInputs": [
                "cni",
                "deleteAdditionalResources",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KubernetesCluster resources.\n",
                "properties": {
                    "admissionPlugins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of [admission plugins](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/) to enable on the cluster.\n"
                    },
                    "apiserverCertSans": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Additional Subject Alternative Names for the Kubernetes API server certificate\n"
                    },
                    "apiserverUrl": {
                        "type": "string",
                        "description": "The URL of the Kubernetes API server.\n"
                    },
                    "autoUpgrade": {
                        "$ref": "#/types/scaleway:index/KubernetesClusterAutoUpgrade:KubernetesClusterAutoUpgrade",
                        "description": "The auto upgrade configuration.\n"
                    },
                    "autoscalerConfig": {
                        "$ref": "#/types/scaleway:index/KubernetesClusterAutoscalerConfig:KubernetesClusterAutoscalerConfig",
                        "description": "The configuration options for the [Kubernetes cluster autoscaler](https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler).\n"
                    },
                    "cni": {
                        "type": "string",
                        "description": "The Container Network Interface (CNI) for the Kubernetes cluster.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the cluster.\n"
                    },
                    "deleteAdditionalResources": {
                        "type": "boolean",
                        "description": "Delete additional resources like block volumes, load-balancers and the cluster's private network (if empty) that were created in Kubernetes on cluster deletion.\n\u003e **Important:** Setting this field to `true` means that you will lose all your cluster data and network configuration when you delete your cluster.\nIf you prefer keeping it, you should instead set it as `false`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for the Kubernetes cluster.\n"
                    },
                    "featureGates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of [feature gates](https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/) to enable on the cluster.\n"
                    },
                    "kubeconfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/KubernetesClusterKubeconfig:KubernetesClusterKubeconfig"
                        },
                        "description": "The kubeconfig configuration file of the Kubernetes cluster\n",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the Kubernetes cluster.\n"
                    },
                    "openIdConnectConfig": {
                        "$ref": "#/types/scaleway:index/KubernetesClusterOpenIdConnectConfig:KubernetesClusterOpenIdConnectConfig",
                        "description": "The OpenID Connect configuration of the cluster\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the cluster is associated with.\n"
                    },
                    "privateNetworkId": {
                        "type": "string",
                        "description": "The ID of the private network of the cluster.\n\n\u003e **Important:** Changes to this field will recreate a new resource.\n\n\u003e **Important:** Private Networks are now mandatory with Kapsule Clusters. If you have a legacy cluster (no `private_network_id` set),\nyou can still set it now. In this case it will not destroy and recreate your cluster but migrate it to the Private Network.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the cluster is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the cluster should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Kubernetes cluster.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the Kubernetes cluster.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of Kubernetes cluster. Possible values are:\n\n- for mutualized clusters: `kapsule` or `multicloud`\n\n- for dedicated Kapsule clusters: `kapsule-dedicated-4`, `kapsule-dedicated-8` or `kapsule-dedicated-16`.\n\n- for dedicated Kosmos clusters: `multicloud-dedicated-4`, `multicloud-dedicated-8` or `multicloud-dedicated-16`.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The last update date of the cluster.\n"
                    },
                    "upgradeAvailable": {
                        "type": "boolean",
                        "description": "Set to `true` if a newer Kubernetes version is available.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the Kubernetes cluster.\n"
                    },
                    "wildcardDns": {
                        "type": "string",
                        "description": "The DNS wildcard that points to all ready nodes.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/kubernetesNodePool:KubernetesNodePool": {
            "description": "\n\n## Import\n\nKubernetes pools can be imported using the `{region}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/kubernetesNodePool:KubernetesNodePool mypool fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "autohealing": {
                    "type": "boolean",
                    "description": "Enables the autohealing feature for this pool.\n"
                },
                "autoscaling": {
                    "type": "boolean",
                    "description": "Enables the autoscaling feature for this pool.\n\u003e **Important:** When enabled, an update of the `size` will not be taken into account.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The ID of the Kubernetes cluster on which this pool will be created.\n"
                },
                "containerRuntime": {
                    "type": "string",
                    "description": "The container runtime of the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The creation date of the pool.\n"
                },
                "currentSize": {
                    "type": "integer",
                    "description": "The actual size of the pool\n"
                },
                "kubeletArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The Kubelet arguments to be used by this pool\n"
                },
                "maxSize": {
                    "type": "integer",
                    "description": "The maximum size of the pool, used by the autoscaling feature.\n"
                },
                "minSize": {
                    "type": "integer",
                    "description": "The minimum size of the pool, used by the autoscaling feature.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "The commercial type of the pool instances. Instances with insufficient memory are not eligible (DEV1-S, PLAY2-PICO, STARDUST). `external` is a special node type used to provision from other Cloud providers.\n\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/KubernetesNodePoolNode:KubernetesNodePoolNode"
                    },
                    "description": "(List of) The nodes in the default pool.\n"
                },
                "placementGroupId": {
                    "type": "string",
                    "description": "The [placement group](https://www.scaleway.com/en/developers/api/instance/#path-placement-groups-create-a-placement-group) the nodes of the pool will be attached to.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "publicIpDisabled": {
                    "type": "boolean",
                    "description": "Defines if the public IP should be removed from Nodes. To use this feature, your Cluster must have an attached Private Network set up with a Public Gateway.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the pool should be created.\n"
                },
                "rootVolumeSizeInGb": {
                    "type": "integer",
                    "description": "The size of the system volume of the nodes in gigabyte\n"
                },
                "rootVolumeType": {
                    "type": "string",
                    "description": "System volume type of the nodes composing the pool\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the pool.\n\u003e **Important:** This field will only be used at creation if autoscaling is enabled.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the node.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the pool.\n\u003e Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (Example: \"taint=taintName=taineValue:Effect\")\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The last update date of the pool.\n"
                },
                "upgradePolicy": {
                    "$ref": "#/types/scaleway:index/KubernetesNodePoolUpgradePolicy:KubernetesNodePoolUpgradePolicy",
                    "description": "The Pool upgrade policy\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the pool.\n"
                },
                "waitForPoolReady": {
                    "type": "boolean",
                    "description": "Whether to wait for the pool to be ready.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the pool should be created.\n\u003e **Important:** Updates to this field will recreate a new resource.\n"
                }
            },
            "required": [
                "clusterId",
                "createdAt",
                "currentSize",
                "maxSize",
                "name",
                "nodeType",
                "nodes",
                "region",
                "rootVolumeSizeInGb",
                "rootVolumeType",
                "size",
                "status",
                "updatedAt",
                "upgradePolicy",
                "version",
                "zone"
            ],
            "inputProperties": {
                "autohealing": {
                    "type": "boolean",
                    "description": "Enables the autohealing feature for this pool.\n"
                },
                "autoscaling": {
                    "type": "boolean",
                    "description": "Enables the autoscaling feature for this pool.\n\u003e **Important:** When enabled, an update of the `size` will not be taken into account.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The ID of the Kubernetes cluster on which this pool will be created.\n",
                    "willReplaceOnChanges": true
                },
                "containerRuntime": {
                    "type": "string",
                    "description": "The container runtime of the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "kubeletArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The Kubelet arguments to be used by this pool\n"
                },
                "maxSize": {
                    "type": "integer",
                    "description": "The maximum size of the pool, used by the autoscaling feature.\n"
                },
                "minSize": {
                    "type": "integer",
                    "description": "The minimum size of the pool, used by the autoscaling feature.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "nodeType": {
                    "type": "string",
                    "description": "The commercial type of the pool instances. Instances with insufficient memory are not eligible (DEV1-S, PLAY2-PICO, STARDUST). `external` is a special node type used to provision from other Cloud providers.\n\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "placementGroupId": {
                    "type": "string",
                    "description": "The [placement group](https://www.scaleway.com/en/developers/api/instance/#path-placement-groups-create-a-placement-group) the nodes of the pool will be attached to.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "publicIpDisabled": {
                    "type": "boolean",
                    "description": "Defines if the public IP should be removed from Nodes. To use this feature, your Cluster must have an attached Private Network set up with a Public Gateway.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the pool should be created.\n",
                    "willReplaceOnChanges": true
                },
                "rootVolumeSizeInGb": {
                    "type": "integer",
                    "description": "The size of the system volume of the nodes in gigabyte\n",
                    "willReplaceOnChanges": true
                },
                "rootVolumeType": {
                    "type": "string",
                    "description": "System volume type of the nodes composing the pool\n",
                    "willReplaceOnChanges": true
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the pool.\n\u003e **Important:** This field will only be used at creation if autoscaling is enabled.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the pool.\n\u003e Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (Example: \"taint=taintName=taineValue:Effect\")\n"
                },
                "upgradePolicy": {
                    "$ref": "#/types/scaleway:index/KubernetesNodePoolUpgradePolicy:KubernetesNodePoolUpgradePolicy",
                    "description": "The Pool upgrade policy\n"
                },
                "waitForPoolReady": {
                    "type": "boolean",
                    "description": "Whether to wait for the pool to be ready.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the pool should be created.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clusterId",
                "nodeType",
                "size"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KubernetesNodePool resources.\n",
                "properties": {
                    "autohealing": {
                        "type": "boolean",
                        "description": "Enables the autohealing feature for this pool.\n"
                    },
                    "autoscaling": {
                        "type": "boolean",
                        "description": "Enables the autoscaling feature for this pool.\n\u003e **Important:** When enabled, an update of the `size` will not be taken into account.\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The ID of the Kubernetes cluster on which this pool will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "containerRuntime": {
                        "type": "string",
                        "description": "The container runtime of the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the pool.\n"
                    },
                    "currentSize": {
                        "type": "integer",
                        "description": "The actual size of the pool\n"
                    },
                    "kubeletArgs": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The Kubelet arguments to be used by this pool\n"
                    },
                    "maxSize": {
                        "type": "integer",
                        "description": "The maximum size of the pool, used by the autoscaling feature.\n"
                    },
                    "minSize": {
                        "type": "integer",
                        "description": "The minimum size of the pool, used by the autoscaling feature.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the pool.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "nodeType": {
                        "type": "string",
                        "description": "The commercial type of the pool instances. Instances with insufficient memory are not eligible (DEV1-S, PLAY2-PICO, STARDUST). `external` is a special node type used to provision from other Cloud providers.\n\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/KubernetesNodePoolNode:KubernetesNodePoolNode"
                        },
                        "description": "(List of) The nodes in the default pool.\n"
                    },
                    "placementGroupId": {
                        "type": "string",
                        "description": "The [placement group](https://www.scaleway.com/en/developers/api/instance/#path-placement-groups-create-a-placement-group) the nodes of the pool will be attached to.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicIpDisabled": {
                        "type": "boolean",
                        "description": "Defines if the public IP should be removed from Nodes. To use this feature, your Cluster must have an attached Private Network set up with a Public Gateway.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the pool should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "rootVolumeSizeInGb": {
                        "type": "integer",
                        "description": "The size of the system volume of the nodes in gigabyte\n",
                        "willReplaceOnChanges": true
                    },
                    "rootVolumeType": {
                        "type": "string",
                        "description": "System volume type of the nodes composing the pool\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the pool.\n\u003e **Important:** This field will only be used at creation if autoscaling is enabled.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the node.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the pool.\n\u003e Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (Example: \"taint=taintName=taineValue:Effect\")\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The last update date of the pool.\n"
                    },
                    "upgradePolicy": {
                        "$ref": "#/types/scaleway:index/KubernetesNodePoolUpgradePolicy:KubernetesNodePoolUpgradePolicy",
                        "description": "The Pool upgrade policy\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the pool.\n"
                    },
                    "waitForPoolReady": {
                        "type": "boolean",
                        "description": "Whether to wait for the pool to be ready.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the pool should be created.\n\u003e **Important:** Updates to this field will recreate a new resource.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/loadbalancer:Loadbalancer": {
            "description": "Creates and manages Scaleway Load Balancers.\n\nFor more information, see the [main documentation](https://www.scaleway.com/en/docs/network/load-balancer/concepts/#load-balancers) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-load-balancer-list-load-balancers).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.LoadbalancerIp(\"main\", {zone: \"fr-par-1\"});\nconst base = new scaleway.Loadbalancer(\"base\", {\n    ipIds: [main.id],\n    zone: main.zone,\n    type: \"LB-S\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.LoadbalancerIp(\"main\", zone=\"fr-par-1\")\nbase = scaleway.Loadbalancer(\"base\",\n    ip_ids=[main.id],\n    zone=main.zone,\n    type=\"LB-S\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.LoadbalancerIp(\"main\", new()\n    {\n        Zone = \"fr-par-1\",\n    });\n\n    var @base = new Scaleway.Loadbalancer(\"base\", new()\n    {\n        IpIds = new[]\n        {\n            main.Id,\n        },\n        Zone = main.Zone,\n        Type = \"LB-S\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewLoadbalancerIp(ctx, \"main\", \u0026scaleway.LoadbalancerIpArgs{\n\t\t\tZone: pulumi.String(\"fr-par-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewLoadbalancer(ctx, \"base\", \u0026scaleway.LoadbalancerArgs{\n\t\t\tIpIds: pulumi.StringArray{\n\t\t\t\tmain.ID(),\n\t\t\t},\n\t\t\tZone: main.Zone,\n\t\t\tType: pulumi.String(\"LB-S\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LoadbalancerIp;\nimport com.pulumi.scaleway.LoadbalancerIpArgs;\nimport com.pulumi.scaleway.Loadbalancer;\nimport com.pulumi.scaleway.LoadbalancerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new LoadbalancerIp(\"main\", LoadbalancerIpArgs.builder()\n            .zone(\"fr-par-1\")\n            .build());\n\n        var base = new Loadbalancer(\"base\", LoadbalancerArgs.builder()\n            .ipIds(main.id())\n            .zone(main.zone())\n            .type(\"LB-S\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:LoadbalancerIp\n    properties:\n      zone: fr-par-1\n  base:\n    type: scaleway:Loadbalancer\n    properties:\n      ipIds:\n        - ${main.id}\n      zone: ${main.zone}\n      type: LB-S\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Private LB\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst base = new scaleway.Loadbalancer(\"base\", {\n    name: \"private-lb\",\n    type: \"LB-S\",\n    assignFlexibleIp: false,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nbase = scaleway.Loadbalancer(\"base\",\n    name=\"private-lb\",\n    type=\"LB-S\",\n    assign_flexible_ip=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @base = new Scaleway.Loadbalancer(\"base\", new()\n    {\n        Name = \"private-lb\",\n        Type = \"LB-S\",\n        AssignFlexibleIp = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLoadbalancer(ctx, \"base\", \u0026scaleway.LoadbalancerArgs{\n\t\t\tName:             pulumi.String(\"private-lb\"),\n\t\t\tType:             pulumi.String(\"LB-S\"),\n\t\t\tAssignFlexibleIp: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Loadbalancer;\nimport com.pulumi.scaleway.LoadbalancerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var base = new Loadbalancer(\"base\", LoadbalancerArgs.builder()\n            .name(\"private-lb\")\n            .type(\"LB-S\")\n            .assignFlexibleIp(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  base:\n    type: scaleway:Loadbalancer\n    properties:\n      name: private-lb\n      type: LB-S\n      assignFlexibleIp: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### With IPv6\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst v4 = new scaleway.LoadbalancerIp(\"v4\", {});\nconst v6 = new scaleway.LoadbalancerIp(\"v6\", {isIpv6: true});\nconst main = new scaleway.Loadbalancer(\"main\", {\n    ipIds: [\n        v4.id,\n        v6.id,\n    ],\n    name: \"ipv6-lb\",\n    type: \"LB-S\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nv4 = scaleway.LoadbalancerIp(\"v4\")\nv6 = scaleway.LoadbalancerIp(\"v6\", is_ipv6=True)\nmain = scaleway.Loadbalancer(\"main\",\n    ip_ids=[\n        v4.id,\n        v6.id,\n    ],\n    name=\"ipv6-lb\",\n    type=\"LB-S\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var v4 = new Scaleway.LoadbalancerIp(\"v4\");\n\n    var v6 = new Scaleway.LoadbalancerIp(\"v6\", new()\n    {\n        IsIpv6 = true,\n    });\n\n    var main = new Scaleway.Loadbalancer(\"main\", new()\n    {\n        IpIds = new[]\n        {\n            v4.Id,\n            v6.Id,\n        },\n        Name = \"ipv6-lb\",\n        Type = \"LB-S\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tv4, err := scaleway.NewLoadbalancerIp(ctx, \"v4\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tv6, err := scaleway.NewLoadbalancerIp(ctx, \"v6\", \u0026scaleway.LoadbalancerIpArgs{\n\t\t\tIsIpv6: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewLoadbalancer(ctx, \"main\", \u0026scaleway.LoadbalancerArgs{\n\t\t\tIpIds: pulumi.StringArray{\n\t\t\t\tv4.ID(),\n\t\t\t\tv6.ID(),\n\t\t\t},\n\t\t\tName: pulumi.String(\"ipv6-lb\"),\n\t\t\tType: pulumi.String(\"LB-S\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LoadbalancerIp;\nimport com.pulumi.scaleway.LoadbalancerIpArgs;\nimport com.pulumi.scaleway.Loadbalancer;\nimport com.pulumi.scaleway.LoadbalancerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var v4 = new LoadbalancerIp(\"v4\");\n\n        var v6 = new LoadbalancerIp(\"v6\", LoadbalancerIpArgs.builder()\n            .isIpv6(true)\n            .build());\n\n        var main = new Loadbalancer(\"main\", LoadbalancerArgs.builder()\n            .ipIds(            \n                v4.id(),\n                v6.id())\n            .name(\"ipv6-lb\")\n            .type(\"LB-S\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  v4:\n    type: scaleway:LoadbalancerIp\n  v6:\n    type: scaleway:LoadbalancerIp\n    properties:\n      isIpv6: true\n  main:\n    type: scaleway:Loadbalancer\n    properties:\n      ipIds:\n        - ${v4.id}\n        - ${v6.id}\n      name: ipv6-lb\n      type: LB-S\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### With IPAM IDs\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst vpc01 = new scaleway.Vpc(\"vpc01\", {name: \"my vpc\"});\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {\n    vpcId: vpc01.id,\n    ipv4Subnet: {\n        subnet: \"172.16.32.0/22\",\n    },\n});\nconst ip01 = new scaleway.IpamIp(\"ip01\", {\n    address: \"172.16.32.7\",\n    sources: [{\n        privateNetworkId: pn01.id,\n    }],\n});\nconst v4 = new scaleway.LoadbalancerIp(\"v4\", {});\nconst main = new scaleway.Loadbalancer(\"main\", {\n    ipIds: [v4.id],\n    name: \"my-lb\",\n    type: \"LB-S\",\n    privateNetworks: [{\n        privateNetworkId: pn01.id,\n        ipamIds: ip01.id,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nvpc01 = scaleway.Vpc(\"vpc01\", name=\"my vpc\")\npn01 = scaleway.VpcPrivateNetwork(\"pn01\",\n    vpc_id=vpc01.id,\n    ipv4_subnet={\n        \"subnet\": \"172.16.32.0/22\",\n    })\nip01 = scaleway.IpamIp(\"ip01\",\n    address=\"172.16.32.7\",\n    sources=[{\n        \"private_network_id\": pn01.id,\n    }])\nv4 = scaleway.LoadbalancerIp(\"v4\")\nmain = scaleway.Loadbalancer(\"main\",\n    ip_ids=[v4.id],\n    name=\"my-lb\",\n    type=\"LB-S\",\n    private_networks=[{\n        \"private_network_id\": pn01.id,\n        \"ipam_ids\": ip01.id,\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vpc01 = new Scaleway.Vpc(\"vpc01\", new()\n    {\n        Name = \"my vpc\",\n    });\n\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\", new()\n    {\n        VpcId = vpc01.Id,\n        Ipv4Subnet = new Scaleway.Inputs.VpcPrivateNetworkIpv4SubnetArgs\n        {\n            Subnet = \"172.16.32.0/22\",\n        },\n    });\n\n    var ip01 = new Scaleway.IpamIp(\"ip01\", new()\n    {\n        Address = \"172.16.32.7\",\n        Sources = new[]\n        {\n            new Scaleway.Inputs.IpamIpSourceArgs\n            {\n                PrivateNetworkId = pn01.Id,\n            },\n        },\n    });\n\n    var v4 = new Scaleway.LoadbalancerIp(\"v4\");\n\n    var main = new Scaleway.Loadbalancer(\"main\", new()\n    {\n        IpIds = new[]\n        {\n            v4.Id,\n        },\n        Name = \"my-lb\",\n        Type = \"LB-S\",\n        PrivateNetworks = new[]\n        {\n            new Scaleway.Inputs.LoadbalancerPrivateNetworkArgs\n            {\n                PrivateNetworkId = pn01.Id,\n                IpamIds = ip01.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tvpc01, err := scaleway.NewVpc(ctx, \"vpc01\", \u0026scaleway.VpcArgs{\n\t\t\tName: pulumi.String(\"my vpc\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tVpcId: vpc01.ID(),\n\t\t\tIpv4Subnet: \u0026scaleway.VpcPrivateNetworkIpv4SubnetArgs{\n\t\t\t\tSubnet: pulumi.String(\"172.16.32.0/22\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tip01, err := scaleway.NewIpamIp(ctx, \"ip01\", \u0026scaleway.IpamIpArgs{\n\t\t\tAddress: pulumi.String(\"172.16.32.7\"),\n\t\t\tSources: scaleway.IpamIpSourceArray{\n\t\t\t\t\u0026scaleway.IpamIpSourceArgs{\n\t\t\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tv4, err := scaleway.NewLoadbalancerIp(ctx, \"v4\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewLoadbalancer(ctx, \"main\", \u0026scaleway.LoadbalancerArgs{\n\t\t\tIpIds: pulumi.StringArray{\n\t\t\t\tv4.ID(),\n\t\t\t},\n\t\t\tName: pulumi.String(\"my-lb\"),\n\t\t\tType: pulumi.String(\"LB-S\"),\n\t\t\tPrivateNetworks: scaleway.LoadbalancerPrivateNetworkArray{\n\t\t\t\t\u0026scaleway.LoadbalancerPrivateNetworkArgs{\n\t\t\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\t\t\tIpamIds:          ip01.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Vpc;\nimport com.pulumi.scaleway.VpcArgs;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.inputs.VpcPrivateNetworkIpv4SubnetArgs;\nimport com.pulumi.scaleway.IpamIp;\nimport com.pulumi.scaleway.IpamIpArgs;\nimport com.pulumi.scaleway.inputs.IpamIpSourceArgs;\nimport com.pulumi.scaleway.LoadbalancerIp;\nimport com.pulumi.scaleway.Loadbalancer;\nimport com.pulumi.scaleway.LoadbalancerArgs;\nimport com.pulumi.scaleway.inputs.LoadbalancerPrivateNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vpc01 = new Vpc(\"vpc01\", VpcArgs.builder()\n            .name(\"my vpc\")\n            .build());\n\n        var pn01 = new VpcPrivateNetwork(\"pn01\", VpcPrivateNetworkArgs.builder()\n            .vpcId(vpc01.id())\n            .ipv4Subnet(VpcPrivateNetworkIpv4SubnetArgs.builder()\n                .subnet(\"172.16.32.0/22\")\n                .build())\n            .build());\n\n        var ip01 = new IpamIp(\"ip01\", IpamIpArgs.builder()\n            .address(\"172.16.32.7\")\n            .sources(IpamIpSourceArgs.builder()\n                .privateNetworkId(pn01.id())\n                .build())\n            .build());\n\n        var v4 = new LoadbalancerIp(\"v4\");\n\n        var main = new Loadbalancer(\"main\", LoadbalancerArgs.builder()\n            .ipIds(v4.id())\n            .name(\"my-lb\")\n            .type(\"LB-S\")\n            .privateNetworks(LoadbalancerPrivateNetworkArgs.builder()\n                .privateNetworkId(pn01.id())\n                .ipamIds(ip01.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vpc01:\n    type: scaleway:Vpc\n    properties:\n      name: my vpc\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      vpcId: ${vpc01.id}\n      ipv4Subnet:\n        subnet: 172.16.32.0/22\n  ip01:\n    type: scaleway:IpamIp\n    properties:\n      address: 172.16.32.7\n      sources:\n        - privateNetworkId: ${pn01.id}\n  v4:\n    type: scaleway:LoadbalancerIp\n  main:\n    type: scaleway:Loadbalancer\n    properties:\n      ipIds:\n        - ${v4.id}\n      name: my-lb\n      type: LB-S\n      privateNetworks:\n        - privateNetworkId: ${pn01.id}\n          ipamIds: ${ip01.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## IP ID\n\nSince v1.15.0, `ip_id` is a required field. This means that now a separate `scaleway.LoadbalancerIp` is required.\nWhen importing, the IP needs to be imported as well as the Load Balancer.\nWhen upgrading to v1.15.0, you will need to create a new `scaleway.LoadbalancerIp` resource and import it.\n\nFor instance, if you had the following:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.Loadbalancer(\"main\", {\n    zone: \"fr-par-1\",\n    type: \"LB-S\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.Loadbalancer(\"main\",\n    zone=\"fr-par-1\",\n    type=\"LB-S\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.Loadbalancer(\"main\", new()\n    {\n        Zone = \"fr-par-1\",\n        Type = \"LB-S\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLoadbalancer(ctx, \"main\", \u0026scaleway.LoadbalancerArgs{\n\t\t\tZone: pulumi.String(\"fr-par-1\"),\n\t\t\tType: pulumi.String(\"LB-S\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Loadbalancer;\nimport com.pulumi.scaleway.LoadbalancerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new Loadbalancer(\"main\", LoadbalancerArgs.builder()\n            .zone(\"fr-par-1\")\n            .type(\"LB-S\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:Loadbalancer\n    properties:\n      zone: fr-par-1\n      type: LB-S\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nYou will need to update it to:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.LoadbalancerIp(\"main\", {});\nconst mainLoadbalancer = new scaleway.Loadbalancer(\"main\", {\n    ipId: main.id,\n    zone: \"fr-par-1\",\n    type: \"LB-S\",\n    releaseIp: false,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.LoadbalancerIp(\"main\")\nmain_loadbalancer = scaleway.Loadbalancer(\"main\",\n    ip_id=main.id,\n    zone=\"fr-par-1\",\n    type=\"LB-S\",\n    release_ip=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.LoadbalancerIp(\"main\");\n\n    var mainLoadbalancer = new Scaleway.Loadbalancer(\"main\", new()\n    {\n        IpId = main.Id,\n        Zone = \"fr-par-1\",\n        Type = \"LB-S\",\n        ReleaseIp = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewLoadbalancerIp(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewLoadbalancer(ctx, \"main\", \u0026scaleway.LoadbalancerArgs{\n\t\t\tIpId:      main.ID(),\n\t\t\tZone:      pulumi.String(\"fr-par-1\"),\n\t\t\tType:      pulumi.String(\"LB-S\"),\n\t\t\tReleaseIp: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LoadbalancerIp;\nimport com.pulumi.scaleway.Loadbalancer;\nimport com.pulumi.scaleway.LoadbalancerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new LoadbalancerIp(\"main\");\n\n        var mainLoadbalancer = new Loadbalancer(\"mainLoadbalancer\", LoadbalancerArgs.builder()\n            .ipId(main.id())\n            .zone(\"fr-par-1\")\n            .type(\"LB-S\")\n            .releaseIp(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:LoadbalancerIp\n  mainLoadbalancer:\n    type: scaleway:Loadbalancer\n    name: main\n    properties:\n      ipId: ${main.id}\n      zone: fr-par-1\n      type: LB-S\n      releaseIp: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nLoad Balancers can be imported using `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/loadbalancer:Loadbalancer main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\nBe aware that you will also need to import the `scaleway_lb_ip` resource.\n\n",
            "properties": {
                "assignFlexibleIp": {
                    "type": "boolean",
                    "description": "Defines whether to automatically assign a flexible public IPv4 to the Load Balancer.\n"
                },
                "assignFlexibleIpv6": {
                    "type": "boolean",
                    "description": "Defines whether to automatically assign a flexible public IPv6 to the Load Balancer.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Load Balancer.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The Load Balancer public IPv4 address.\n"
                },
                "ipId": {
                    "type": "string",
                    "description": "The ID of the associated Load Balancer IP. See below.\n\n\u003e **Important:** Updates to `ip_id` will recreate the Load Balancer.\n",
                    "deprecationMessage": "Please use ip_ids"
                },
                "ipIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The List of IP IDs to attach to the Load Balancer.\n"
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "The Load Balancer public IPv6 address.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Load Balancer.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The ID of the Organization ID the Load Balancer is associated with.\n"
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/LoadbalancerPrivateNetwork:LoadbalancerPrivateNetwork"
                    },
                    "description": "List of private network to connect with your load balancer\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project the Load Balancer is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the resource\n"
                },
                "releaseIp": {
                    "type": "boolean",
                    "description": "The `release_ip` allow the release of the IP address associated with the Load Balancer.\n",
                    "deprecationMessage": "The resource ip will be destroyed by it's own resource. Please set this to `false`"
                },
                "sslCompatibilityLevel": {
                    "type": "string",
                    "description": "Enforces minimal SSL version (in SSL/TLS offloading context). Please check [possible values](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-load-balancer-create-a-load-balancer).\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Load Balancer.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Load Balancer. Please check the migration section to upgrade the type.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone of the Load Balancer.\n"
                }
            },
            "required": [
                "ipAddress",
                "ipId",
                "ipIds",
                "ipv6Address",
                "name",
                "organizationId",
                "projectId",
                "region",
                "type",
                "zone"
            ],
            "inputProperties": {
                "assignFlexibleIp": {
                    "type": "boolean",
                    "description": "Defines whether to automatically assign a flexible public IPv4 to the Load Balancer.\n",
                    "willReplaceOnChanges": true
                },
                "assignFlexibleIpv6": {
                    "type": "boolean",
                    "description": "Defines whether to automatically assign a flexible public IPv6 to the Load Balancer.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Load Balancer.\n"
                },
                "ipId": {
                    "type": "string",
                    "description": "The ID of the associated Load Balancer IP. See below.\n\n\u003e **Important:** Updates to `ip_id` will recreate the Load Balancer.\n",
                    "deprecationMessage": "Please use ip_ids"
                },
                "ipIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The List of IP IDs to attach to the Load Balancer.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Load Balancer.\n"
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/LoadbalancerPrivateNetwork:LoadbalancerPrivateNetwork"
                    },
                    "description": "List of private network to connect with your load balancer\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project the Load Balancer is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "releaseIp": {
                    "type": "boolean",
                    "description": "The `release_ip` allow the release of the IP address associated with the Load Balancer.\n",
                    "deprecationMessage": "The resource ip will be destroyed by it's own resource. Please set this to `false`"
                },
                "sslCompatibilityLevel": {
                    "type": "string",
                    "description": "Enforces minimal SSL version (in SSL/TLS offloading context). Please check [possible values](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-load-balancer-create-a-load-balancer).\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Load Balancer.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Load Balancer. Please check the migration section to upgrade the type.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone of the Load Balancer.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Loadbalancer resources.\n",
                "properties": {
                    "assignFlexibleIp": {
                        "type": "boolean",
                        "description": "Defines whether to automatically assign a flexible public IPv4 to the Load Balancer.\n",
                        "willReplaceOnChanges": true
                    },
                    "assignFlexibleIpv6": {
                        "type": "boolean",
                        "description": "Defines whether to automatically assign a flexible public IPv6 to the Load Balancer.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Load Balancer.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The Load Balancer public IPv4 address.\n"
                    },
                    "ipId": {
                        "type": "string",
                        "description": "The ID of the associated Load Balancer IP. See below.\n\n\u003e **Important:** Updates to `ip_id` will recreate the Load Balancer.\n",
                        "deprecationMessage": "Please use ip_ids"
                    },
                    "ipIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The List of IP IDs to attach to the Load Balancer.\n"
                    },
                    "ipv6Address": {
                        "type": "string",
                        "description": "The Load Balancer public IPv6 address.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Load Balancer.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the Organization ID the Load Balancer is associated with.\n"
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/LoadbalancerPrivateNetwork:LoadbalancerPrivateNetwork"
                        },
                        "description": "List of private network to connect with your load balancer\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the Project the Load Balancer is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the resource\n"
                    },
                    "releaseIp": {
                        "type": "boolean",
                        "description": "The `release_ip` allow the release of the IP address associated with the Load Balancer.\n",
                        "deprecationMessage": "The resource ip will be destroyed by it's own resource. Please set this to `false`"
                    },
                    "sslCompatibilityLevel": {
                        "type": "string",
                        "description": "Enforces minimal SSL version (in SSL/TLS offloading context). Please check [possible values](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-load-balancer-create-a-load-balancer).\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the Load Balancer.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the Load Balancer. Please check the migration section to upgrade the type.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone of the Load Balancer.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/loadbalancerAcl:LoadbalancerAcl": {
            "description": "Creates and manages Scaleway Load Balancer ACLs.\n\nFor more information, see the [main documentation](https://www.scaleway.com/en/docs/network/load-balancer/reference-content/acls/) or [API reference](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-acls-get-an-acl).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst acl01 = new scaleway.LoadbalancerAcl(\"acl01\", {\n    frontendId: frt01.id,\n    name: \"acl01\",\n    description: \"Exclude well-known IPs\",\n    index: 0,\n    action: {\n        type: \"allow\",\n    },\n    match: {\n        ipSubnets: [\n            \"192.168.0.1\",\n            \"192.168.0.2\",\n            \"192.168.10.0/24\",\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nacl01 = scaleway.LoadbalancerAcl(\"acl01\",\n    frontend_id=frt01[\"id\"],\n    name=\"acl01\",\n    description=\"Exclude well-known IPs\",\n    index=0,\n    action={\n        \"type\": \"allow\",\n    },\n    match={\n        \"ip_subnets\": [\n            \"192.168.0.1\",\n            \"192.168.0.2\",\n            \"192.168.10.0/24\",\n        ],\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var acl01 = new Scaleway.LoadbalancerAcl(\"acl01\", new()\n    {\n        FrontendId = frt01.Id,\n        Name = \"acl01\",\n        Description = \"Exclude well-known IPs\",\n        Index = 0,\n        Action = new Scaleway.Inputs.LoadbalancerAclActionArgs\n        {\n            Type = \"allow\",\n        },\n        Match = new Scaleway.Inputs.LoadbalancerAclMatchArgs\n        {\n            IpSubnets = new[]\n            {\n                \"192.168.0.1\",\n                \"192.168.0.2\",\n                \"192.168.10.0/24\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLoadbalancerAcl(ctx, \"acl01\", \u0026scaleway.LoadbalancerAclArgs{\n\t\t\tFrontendId:  pulumi.Any(frt01.Id),\n\t\t\tName:        pulumi.String(\"acl01\"),\n\t\t\tDescription: pulumi.String(\"Exclude well-known IPs\"),\n\t\t\tIndex:       pulumi.Int(0),\n\t\t\tAction: \u0026scaleway.LoadbalancerAclActionArgs{\n\t\t\t\tType: pulumi.String(\"allow\"),\n\t\t\t},\n\t\t\tMatch: \u0026scaleway.LoadbalancerAclMatchArgs{\n\t\t\t\tIpSubnets: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"192.168.0.1\"),\n\t\t\t\t\tpulumi.String(\"192.168.0.2\"),\n\t\t\t\t\tpulumi.String(\"192.168.10.0/24\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LoadbalancerAcl;\nimport com.pulumi.scaleway.LoadbalancerAclArgs;\nimport com.pulumi.scaleway.inputs.LoadbalancerAclActionArgs;\nimport com.pulumi.scaleway.inputs.LoadbalancerAclMatchArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var acl01 = new LoadbalancerAcl(\"acl01\", LoadbalancerAclArgs.builder()\n            .frontendId(frt01.id())\n            .name(\"acl01\")\n            .description(\"Exclude well-known IPs\")\n            .index(0)\n            .action(LoadbalancerAclActionArgs.builder()\n                .type(\"allow\")\n                .build())\n            .match(LoadbalancerAclMatchArgs.builder()\n                .ipSubnets(                \n                    \"192.168.0.1\",\n                    \"192.168.0.2\",\n                    \"192.168.10.0/24\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  acl01:\n    type: scaleway:LoadbalancerAcl\n    properties:\n      frontendId: ${frt01.id}\n      name: acl01\n      description: Exclude well-known IPs\n      index: 0 # Allow downstream requests from: 192.168.0.1, 192.168.0.2 or 192.168.10.0/24\n      action:\n        type: allow\n      match:\n        ipSubnets:\n          - 192.168.0.1\n          - 192.168.0.2\n          - 192.168.10.0/24\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nLoad Balancer ACLs can be imported using `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/loadbalancerAcl:LoadbalancerAcl acl01 fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "action": {
                    "$ref": "#/types/scaleway:index/LoadbalancerAclAction:LoadbalancerAclAction",
                    "description": "Action to undertake when an ACL filter matches.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "IsDate and time of ACL's creation (RFC 3339 format)\n"
                },
                "description": {
                    "type": "string",
                    "description": "The ACL description.\n"
                },
                "frontendId": {
                    "type": "string",
                    "description": "The ID of the Load Balancer frontend to attach the ACL to.\n"
                },
                "index": {
                    "type": "integer",
                    "description": "The priority of this ACL (ACLs are applied in ascending order, 0 is the first ACL executed).\n"
                },
                "match": {
                    "$ref": "#/types/scaleway:index/LoadbalancerAclMatch:LoadbalancerAclMatch",
                    "description": "The ACL match rule. At least `ip_subnet` or `http_filter` and `http_filter_value` are required.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ACL name. If not provided it will be randomly generated.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "IsDate and time of ACL's update (RFC 3339 format)\n"
                }
            },
            "required": [
                "action",
                "createdAt",
                "frontendId",
                "index",
                "name",
                "updatedAt"
            ],
            "inputProperties": {
                "action": {
                    "$ref": "#/types/scaleway:index/LoadbalancerAclAction:LoadbalancerAclAction",
                    "description": "Action to undertake when an ACL filter matches.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The ACL description.\n"
                },
                "frontendId": {
                    "type": "string",
                    "description": "The ID of the Load Balancer frontend to attach the ACL to.\n",
                    "willReplaceOnChanges": true
                },
                "index": {
                    "type": "integer",
                    "description": "The priority of this ACL (ACLs are applied in ascending order, 0 is the first ACL executed).\n"
                },
                "match": {
                    "$ref": "#/types/scaleway:index/LoadbalancerAclMatch:LoadbalancerAclMatch",
                    "description": "The ACL match rule. At least `ip_subnet` or `http_filter` and `http_filter_value` are required.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ACL name. If not provided it will be randomly generated.\n"
                }
            },
            "requiredInputs": [
                "action",
                "frontendId",
                "index"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadbalancerAcl resources.\n",
                "properties": {
                    "action": {
                        "$ref": "#/types/scaleway:index/LoadbalancerAclAction:LoadbalancerAclAction",
                        "description": "Action to undertake when an ACL filter matches.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "IsDate and time of ACL's creation (RFC 3339 format)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The ACL description.\n"
                    },
                    "frontendId": {
                        "type": "string",
                        "description": "The ID of the Load Balancer frontend to attach the ACL to.\n",
                        "willReplaceOnChanges": true
                    },
                    "index": {
                        "type": "integer",
                        "description": "The priority of this ACL (ACLs are applied in ascending order, 0 is the first ACL executed).\n"
                    },
                    "match": {
                        "$ref": "#/types/scaleway:index/LoadbalancerAclMatch:LoadbalancerAclMatch",
                        "description": "The ACL match rule. At least `ip_subnet` or `http_filter` and `http_filter_value` are required.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The ACL name. If not provided it will be randomly generated.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "IsDate and time of ACL's update (RFC 3339 format)\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/loadbalancerBackend:LoadbalancerBackend": {
            "description": "Creates and manages Scaleway Load Balancer backends.\n\nor more information, see the [main documentation](https://www.scaleway.com/en/docs/network/load-balancer/reference-content/configuring-backends/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-backends).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst backend01 = new scaleway.LoadbalancerBackend(\"backend01\", {\n    lbId: lb01.id,\n    name: \"backend01\",\n    forwardProtocol: \"http\",\n    forwardPort: 80,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nbackend01 = scaleway.LoadbalancerBackend(\"backend01\",\n    lb_id=lb01[\"id\"],\n    name=\"backend01\",\n    forward_protocol=\"http\",\n    forward_port=80)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var backend01 = new Scaleway.LoadbalancerBackend(\"backend01\", new()\n    {\n        LbId = lb01.Id,\n        Name = \"backend01\",\n        ForwardProtocol = \"http\",\n        ForwardPort = 80,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLoadbalancerBackend(ctx, \"backend01\", \u0026scaleway.LoadbalancerBackendArgs{\n\t\t\tLbId:            pulumi.Any(lb01.Id),\n\t\t\tName:            pulumi.String(\"backend01\"),\n\t\t\tForwardProtocol: pulumi.String(\"http\"),\n\t\t\tForwardPort:     pulumi.Int(80),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LoadbalancerBackend;\nimport com.pulumi.scaleway.LoadbalancerBackendArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var backend01 = new LoadbalancerBackend(\"backend01\", LoadbalancerBackendArgs.builder()\n            .lbId(lb01.id())\n            .name(\"backend01\")\n            .forwardProtocol(\"http\")\n            .forwardPort(\"80\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  backend01:\n    type: scaleway:LoadbalancerBackend\n    properties:\n      lbId: ${lb01.id}\n      name: backend01\n      forwardProtocol: http\n      forwardPort: '80'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### With HTTP Health Check\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst backend01 = new scaleway.LoadbalancerBackend(\"backend01\", {\n    lbId: lb01.id,\n    name: \"backend01\",\n    forwardProtocol: \"http\",\n    forwardPort: 80,\n    healthCheckHttp: {\n        uri: \"www.test.com/health\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nbackend01 = scaleway.LoadbalancerBackend(\"backend01\",\n    lb_id=lb01[\"id\"],\n    name=\"backend01\",\n    forward_protocol=\"http\",\n    forward_port=80,\n    health_check_http={\n        \"uri\": \"www.test.com/health\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var backend01 = new Scaleway.LoadbalancerBackend(\"backend01\", new()\n    {\n        LbId = lb01.Id,\n        Name = \"backend01\",\n        ForwardProtocol = \"http\",\n        ForwardPort = 80,\n        HealthCheckHttp = new Scaleway.Inputs.LoadbalancerBackendHealthCheckHttpArgs\n        {\n            Uri = \"www.test.com/health\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLoadbalancerBackend(ctx, \"backend01\", \u0026scaleway.LoadbalancerBackendArgs{\n\t\t\tLbId:            pulumi.Any(lb01.Id),\n\t\t\tName:            pulumi.String(\"backend01\"),\n\t\t\tForwardProtocol: pulumi.String(\"http\"),\n\t\t\tForwardPort:     pulumi.Int(80),\n\t\t\tHealthCheckHttp: \u0026scaleway.LoadbalancerBackendHealthCheckHttpArgs{\n\t\t\t\tUri: pulumi.String(\"www.test.com/health\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LoadbalancerBackend;\nimport com.pulumi.scaleway.LoadbalancerBackendArgs;\nimport com.pulumi.scaleway.inputs.LoadbalancerBackendHealthCheckHttpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var backend01 = new LoadbalancerBackend(\"backend01\", LoadbalancerBackendArgs.builder()\n            .lbId(lb01.id())\n            .name(\"backend01\")\n            .forwardProtocol(\"http\")\n            .forwardPort(\"80\")\n            .healthCheckHttp(LoadbalancerBackendHealthCheckHttpArgs.builder()\n                .uri(\"www.test.com/health\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  backend01:\n    type: scaleway:LoadbalancerBackend\n    properties:\n      lbId: ${lb01.id}\n      name: backend01\n      forwardProtocol: http\n      forwardPort: '80'\n      healthCheckHttp:\n        uri: www.test.com/health\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nLoad Balancer backends can be imported using `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/loadbalancerBackend:LoadbalancerBackend backend01 fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "failoverHost": {
                    "type": "string",
                    "description": "Scaleway S3 bucket website to be served in case all backend servers are down **NOTE** : Only the host part of the\nScaleway S3 bucket website is expected. E.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL\nis 'https://failover-website.s3-website.fr-par.scw.cloud/'.\n"
                },
                "forwardPort": {
                    "type": "integer",
                    "description": "User sessions will be forwarded to this port of backend servers\n"
                },
                "forwardPortAlgorithm": {
                    "type": "string",
                    "description": "Load balancing algorithm\n"
                },
                "forwardProtocol": {
                    "type": "string",
                    "description": "Backend protocol\n"
                },
                "healthCheckDelay": {
                    "type": "string",
                    "description": "Interval between two HC requests\n"
                },
                "healthCheckHttp": {
                    "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckHttp:LoadbalancerBackendHealthCheckHttp"
                },
                "healthCheckHttps": {
                    "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckHttps:LoadbalancerBackendHealthCheckHttps"
                },
                "healthCheckMaxRetries": {
                    "type": "integer",
                    "description": "Number of allowed failed HC requests before the backend server is marked down\n"
                },
                "healthCheckPort": {
                    "type": "integer",
                    "description": "Port the HC requests will be send to. Default to `forward_port`\n"
                },
                "healthCheckSendProxy": {
                    "type": "boolean",
                    "description": "Defines whether proxy protocol should be activated for the health check\n"
                },
                "healthCheckTcp": {
                    "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckTcp:LoadbalancerBackendHealthCheckTcp"
                },
                "healthCheckTimeout": {
                    "type": "string",
                    "description": "Timeout before we consider a HC request failed\n"
                },
                "healthCheckTransientDelay": {
                    "type": "string",
                    "description": "Time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN)\n"
                },
                "ignoreSslServerVerify": {
                    "type": "boolean",
                    "description": "Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID\n"
                },
                "maxConnections": {
                    "type": "integer",
                    "description": "Maximum number of connections allowed per backend server\n"
                },
                "maxRetries": {
                    "type": "integer",
                    "description": "Number of retries when a backend server connection failed\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the backend\n"
                },
                "onMarkedDownAction": {
                    "type": "string",
                    "description": "Modify what occurs when a backend server is marked down\n"
                },
                "proxyProtocol": {
                    "type": "string",
                    "description": "Type of PROXY protocol to enable\n"
                },
                "redispatchAttemptCount": {
                    "type": "integer",
                    "description": "Whether to use another backend server on each attempt\n"
                },
                "sendProxyV2": {
                    "type": "boolean",
                    "description": "Enables PROXY protocol version 2\n",
                    "deprecationMessage": "Please use proxy_protocol instead"
                },
                "serverIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Backend server IP addresses list (IPv4 or IPv6)\n"
                },
                "sslBridging": {
                    "type": "boolean",
                    "description": "Enables SSL between load balancer and backend servers\n"
                },
                "stickySessions": {
                    "type": "string",
                    "description": "The type of sticky sessions\n"
                },
                "stickySessionsCookieName": {
                    "type": "string",
                    "description": "Cookie name for sticky sessions\n"
                },
                "timeoutConnect": {
                    "type": "string",
                    "description": "Maximum initial server connection establishment time\n"
                },
                "timeoutQueue": {
                    "type": "string",
                    "description": "Maximum time (in seconds) for a request to be left pending in queue when `max_connections` is reached\n"
                },
                "timeoutServer": {
                    "type": "string",
                    "description": "Maximum server connection inactivity time\n"
                },
                "timeoutTunnel": {
                    "type": "string",
                    "description": "Maximum tunnel inactivity time\n"
                }
            },
            "required": [
                "forwardPort",
                "forwardProtocol",
                "healthCheckPort",
                "healthCheckTcp",
                "lbId",
                "name",
                "sendProxyV2"
            ],
            "inputProperties": {
                "failoverHost": {
                    "type": "string",
                    "description": "Scaleway S3 bucket website to be served in case all backend servers are down **NOTE** : Only the host part of the\nScaleway S3 bucket website is expected. E.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL\nis 'https://failover-website.s3-website.fr-par.scw.cloud/'.\n"
                },
                "forwardPort": {
                    "type": "integer",
                    "description": "User sessions will be forwarded to this port of backend servers\n"
                },
                "forwardPortAlgorithm": {
                    "type": "string",
                    "description": "Load balancing algorithm\n"
                },
                "forwardProtocol": {
                    "type": "string",
                    "description": "Backend protocol\n"
                },
                "healthCheckDelay": {
                    "type": "string",
                    "description": "Interval between two HC requests\n"
                },
                "healthCheckHttp": {
                    "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckHttp:LoadbalancerBackendHealthCheckHttp"
                },
                "healthCheckHttps": {
                    "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckHttps:LoadbalancerBackendHealthCheckHttps"
                },
                "healthCheckMaxRetries": {
                    "type": "integer",
                    "description": "Number of allowed failed HC requests before the backend server is marked down\n"
                },
                "healthCheckPort": {
                    "type": "integer",
                    "description": "Port the HC requests will be send to. Default to `forward_port`\n"
                },
                "healthCheckSendProxy": {
                    "type": "boolean",
                    "description": "Defines whether proxy protocol should be activated for the health check\n"
                },
                "healthCheckTcp": {
                    "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckTcp:LoadbalancerBackendHealthCheckTcp"
                },
                "healthCheckTimeout": {
                    "type": "string",
                    "description": "Timeout before we consider a HC request failed\n"
                },
                "healthCheckTransientDelay": {
                    "type": "string",
                    "description": "Time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN)\n"
                },
                "ignoreSslServerVerify": {
                    "type": "boolean",
                    "description": "Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID\n",
                    "willReplaceOnChanges": true
                },
                "maxConnections": {
                    "type": "integer",
                    "description": "Maximum number of connections allowed per backend server\n"
                },
                "maxRetries": {
                    "type": "integer",
                    "description": "Number of retries when a backend server connection failed\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the backend\n"
                },
                "onMarkedDownAction": {
                    "type": "string",
                    "description": "Modify what occurs when a backend server is marked down\n"
                },
                "proxyProtocol": {
                    "type": "string",
                    "description": "Type of PROXY protocol to enable\n"
                },
                "redispatchAttemptCount": {
                    "type": "integer",
                    "description": "Whether to use another backend server on each attempt\n"
                },
                "sendProxyV2": {
                    "type": "boolean",
                    "description": "Enables PROXY protocol version 2\n",
                    "deprecationMessage": "Please use proxy_protocol instead"
                },
                "serverIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Backend server IP addresses list (IPv4 or IPv6)\n"
                },
                "sslBridging": {
                    "type": "boolean",
                    "description": "Enables SSL between load balancer and backend servers\n"
                },
                "stickySessions": {
                    "type": "string",
                    "description": "The type of sticky sessions\n"
                },
                "stickySessionsCookieName": {
                    "type": "string",
                    "description": "Cookie name for sticky sessions\n"
                },
                "timeoutConnect": {
                    "type": "string",
                    "description": "Maximum initial server connection establishment time\n"
                },
                "timeoutQueue": {
                    "type": "string",
                    "description": "Maximum time (in seconds) for a request to be left pending in queue when `max_connections` is reached\n"
                },
                "timeoutServer": {
                    "type": "string",
                    "description": "Maximum server connection inactivity time\n"
                },
                "timeoutTunnel": {
                    "type": "string",
                    "description": "Maximum tunnel inactivity time\n"
                }
            },
            "requiredInputs": [
                "forwardPort",
                "forwardProtocol",
                "lbId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadbalancerBackend resources.\n",
                "properties": {
                    "failoverHost": {
                        "type": "string",
                        "description": "Scaleway S3 bucket website to be served in case all backend servers are down **NOTE** : Only the host part of the\nScaleway S3 bucket website is expected. E.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL\nis 'https://failover-website.s3-website.fr-par.scw.cloud/'.\n"
                    },
                    "forwardPort": {
                        "type": "integer",
                        "description": "User sessions will be forwarded to this port of backend servers\n"
                    },
                    "forwardPortAlgorithm": {
                        "type": "string",
                        "description": "Load balancing algorithm\n"
                    },
                    "forwardProtocol": {
                        "type": "string",
                        "description": "Backend protocol\n"
                    },
                    "healthCheckDelay": {
                        "type": "string",
                        "description": "Interval between two HC requests\n"
                    },
                    "healthCheckHttp": {
                        "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckHttp:LoadbalancerBackendHealthCheckHttp"
                    },
                    "healthCheckHttps": {
                        "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckHttps:LoadbalancerBackendHealthCheckHttps"
                    },
                    "healthCheckMaxRetries": {
                        "type": "integer",
                        "description": "Number of allowed failed HC requests before the backend server is marked down\n"
                    },
                    "healthCheckPort": {
                        "type": "integer",
                        "description": "Port the HC requests will be send to. Default to `forward_port`\n"
                    },
                    "healthCheckSendProxy": {
                        "type": "boolean",
                        "description": "Defines whether proxy protocol should be activated for the health check\n"
                    },
                    "healthCheckTcp": {
                        "$ref": "#/types/scaleway:index/LoadbalancerBackendHealthCheckTcp:LoadbalancerBackendHealthCheckTcp"
                    },
                    "healthCheckTimeout": {
                        "type": "string",
                        "description": "Timeout before we consider a HC request failed\n"
                    },
                    "healthCheckTransientDelay": {
                        "type": "string",
                        "description": "Time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN)\n"
                    },
                    "ignoreSslServerVerify": {
                        "type": "boolean",
                        "description": "Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection\n"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The load-balancer ID\n",
                        "willReplaceOnChanges": true
                    },
                    "maxConnections": {
                        "type": "integer",
                        "description": "Maximum number of connections allowed per backend server\n"
                    },
                    "maxRetries": {
                        "type": "integer",
                        "description": "Number of retries when a backend server connection failed\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the backend\n"
                    },
                    "onMarkedDownAction": {
                        "type": "string",
                        "description": "Modify what occurs when a backend server is marked down\n"
                    },
                    "proxyProtocol": {
                        "type": "string",
                        "description": "Type of PROXY protocol to enable\n"
                    },
                    "redispatchAttemptCount": {
                        "type": "integer",
                        "description": "Whether to use another backend server on each attempt\n"
                    },
                    "sendProxyV2": {
                        "type": "boolean",
                        "description": "Enables PROXY protocol version 2\n",
                        "deprecationMessage": "Please use proxy_protocol instead"
                    },
                    "serverIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Backend server IP addresses list (IPv4 or IPv6)\n"
                    },
                    "sslBridging": {
                        "type": "boolean",
                        "description": "Enables SSL between load balancer and backend servers\n"
                    },
                    "stickySessions": {
                        "type": "string",
                        "description": "The type of sticky sessions\n"
                    },
                    "stickySessionsCookieName": {
                        "type": "string",
                        "description": "Cookie name for sticky sessions\n"
                    },
                    "timeoutConnect": {
                        "type": "string",
                        "description": "Maximum initial server connection establishment time\n"
                    },
                    "timeoutQueue": {
                        "type": "string",
                        "description": "Maximum time (in seconds) for a request to be left pending in queue when `max_connections` is reached\n"
                    },
                    "timeoutServer": {
                        "type": "string",
                        "description": "Maximum server connection inactivity time\n"
                    },
                    "timeoutTunnel": {
                        "type": "string",
                        "description": "Maximum tunnel inactivity time\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/loadbalancerCertificate:LoadbalancerCertificate": {
            "properties": {
                "commonName": {
                    "type": "string",
                    "description": "Main domain of the certificate\n"
                },
                "customCertificate": {
                    "$ref": "#/types/scaleway:index/LoadbalancerCertificateCustomCertificate:LoadbalancerCertificateCustomCertificate",
                    "description": "The custom type certificate type configuration\n"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "The identifier (SHA-1) of the certificate\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID\n"
                },
                "letsencrypt": {
                    "$ref": "#/types/scaleway:index/LoadbalancerCertificateLetsencrypt:LoadbalancerCertificateLetsencrypt",
                    "description": "The Let's Encrypt type certificate configuration\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the load-balancer certificate\n"
                },
                "notValidAfter": {
                    "type": "string",
                    "description": "The not valid after validity bound timestamp\n"
                },
                "notValidBefore": {
                    "type": "string",
                    "description": "The not valid before validity bound timestamp\n"
                },
                "status": {
                    "type": "string",
                    "description": "Certificate status\n"
                },
                "subjectAlternativeNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The alternative domain names of the certificate\n"
                }
            },
            "required": [
                "commonName",
                "fingerprint",
                "lbId",
                "name",
                "notValidAfter",
                "notValidBefore",
                "status",
                "subjectAlternativeNames"
            ],
            "inputProperties": {
                "customCertificate": {
                    "$ref": "#/types/scaleway:index/LoadbalancerCertificateCustomCertificate:LoadbalancerCertificateCustomCertificate",
                    "description": "The custom type certificate type configuration\n",
                    "willReplaceOnChanges": true
                },
                "lbId": {
                    "type": "string",
                    "description": "The load-balancer ID\n",
                    "willReplaceOnChanges": true
                },
                "letsencrypt": {
                    "$ref": "#/types/scaleway:index/LoadbalancerCertificateLetsencrypt:LoadbalancerCertificateLetsencrypt",
                    "description": "The Let's Encrypt type certificate configuration\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the load-balancer certificate\n"
                }
            },
            "requiredInputs": [
                "lbId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadbalancerCertificate resources.\n",
                "properties": {
                    "commonName": {
                        "type": "string",
                        "description": "Main domain of the certificate\n"
                    },
                    "customCertificate": {
                        "$ref": "#/types/scaleway:index/LoadbalancerCertificateCustomCertificate:LoadbalancerCertificateCustomCertificate",
                        "description": "The custom type certificate type configuration\n",
                        "willReplaceOnChanges": true
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "The identifier (SHA-1) of the certificate\n"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The load-balancer ID\n",
                        "willReplaceOnChanges": true
                    },
                    "letsencrypt": {
                        "$ref": "#/types/scaleway:index/LoadbalancerCertificateLetsencrypt:LoadbalancerCertificateLetsencrypt",
                        "description": "The Let's Encrypt type certificate configuration\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the load-balancer certificate\n"
                    },
                    "notValidAfter": {
                        "type": "string",
                        "description": "The not valid after validity bound timestamp\n"
                    },
                    "notValidBefore": {
                        "type": "string",
                        "description": "The not valid before validity bound timestamp\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Certificate status\n"
                    },
                    "subjectAlternativeNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The alternative domain names of the certificate\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/loadbalancerFrontend:LoadbalancerFrontend": {
            "description": "Creates and manages Scaleway Load Balancer frontends.\n\nFor more information, see the [main documentation](https://www.scaleway.com/en/docs/network/load-balancer/reference-content/configuring-frontends/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-frontends).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst frontend01 = new scaleway.LoadbalancerFrontend(\"frontend01\", {\n    lbId: lb01.id,\n    backendId: backend01.id,\n    name: \"frontend01\",\n    inboundPort: 80,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nfrontend01 = scaleway.LoadbalancerFrontend(\"frontend01\",\n    lb_id=lb01[\"id\"],\n    backend_id=backend01[\"id\"],\n    name=\"frontend01\",\n    inbound_port=80)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var frontend01 = new Scaleway.LoadbalancerFrontend(\"frontend01\", new()\n    {\n        LbId = lb01.Id,\n        BackendId = backend01.Id,\n        Name = \"frontend01\",\n        InboundPort = 80,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLoadbalancerFrontend(ctx, \"frontend01\", \u0026scaleway.LoadbalancerFrontendArgs{\n\t\t\tLbId:        pulumi.Any(lb01.Id),\n\t\t\tBackendId:   pulumi.Any(backend01.Id),\n\t\t\tName:        pulumi.String(\"frontend01\"),\n\t\t\tInboundPort: pulumi.Int(80),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LoadbalancerFrontend;\nimport com.pulumi.scaleway.LoadbalancerFrontendArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var frontend01 = new LoadbalancerFrontend(\"frontend01\", LoadbalancerFrontendArgs.builder()\n            .lbId(lb01.id())\n            .backendId(backend01.id())\n            .name(\"frontend01\")\n            .inboundPort(\"80\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  frontend01:\n    type: scaleway:LoadbalancerFrontend\n    properties:\n      lbId: ${lb01.id}\n      backendId: ${backend01.id}\n      name: frontend01\n      inboundPort: '80'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## With ACLs\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst frontend01 = new scaleway.LoadbalancerFrontend(\"frontend01\", {\n    lbId: lb01.id,\n    backendId: backend01.id,\n    name: \"frontend01\",\n    inboundPort: 80,\n    acls: [\n        {\n            name: \"blacklist wellknwon IPs\",\n            action: {\n                type: \"allow\",\n            },\n            match: {\n                ipSubnets: [\n                    \"192.168.0.1\",\n                    \"192.168.0.2\",\n                    \"192.168.10.0/24\",\n                ],\n            },\n        },\n        {\n            action: {\n                type: \"deny\",\n            },\n            match: {\n                ipSubnets: [\"51.51.51.51\"],\n                httpFilter: \"regex\",\n                httpFilterValues: [\"^foo*bar$\"],\n            },\n        },\n        {\n            action: {\n                type: \"allow\",\n            },\n            match: {\n                httpFilter: \"path_begin\",\n                httpFilterValues: [\n                    \"foo\",\n                    \"bar\",\n                ],\n            },\n        },\n        {\n            action: {\n                type: \"allow\",\n            },\n            match: {\n                httpFilter: \"path_begin\",\n                httpFilterValues: [\"hi\"],\n                invert: true,\n            },\n        },\n        {\n            action: {\n                type: \"allow\",\n            },\n            match: {\n                httpFilter: \"http_header_match\",\n                httpFilterValues: \"foo\",\n                httpFilterOption: \"bar\",\n            },\n        },\n        {\n            action: {\n                type: \"redirect\",\n                redirects: [{\n                    type: \"location\",\n                    target: \"https://example.com\",\n                    code: 307,\n                }],\n            },\n            match: {\n                ipSubnets: [\"10.0.0.10\"],\n                httpFilter: \"path_begin\",\n                httpFilterValues: [\n                    \"foo\",\n                    \"bar\",\n                ],\n            },\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nfrontend01 = scaleway.LoadbalancerFrontend(\"frontend01\",\n    lb_id=lb01[\"id\"],\n    backend_id=backend01[\"id\"],\n    name=\"frontend01\",\n    inbound_port=80,\n    acls=[\n        {\n            \"name\": \"blacklist wellknwon IPs\",\n            \"action\": {\n                \"type\": \"allow\",\n            },\n            \"match\": {\n                \"ip_subnets\": [\n                    \"192.168.0.1\",\n                    \"192.168.0.2\",\n                    \"192.168.10.0/24\",\n                ],\n            },\n        },\n        {\n            \"action\": {\n                \"type\": \"deny\",\n            },\n            \"match\": {\n                \"ip_subnets\": [\"51.51.51.51\"],\n                \"http_filter\": \"regex\",\n                \"http_filter_values\": [\"^foo*bar$\"],\n            },\n        },\n        {\n            \"action\": {\n                \"type\": \"allow\",\n            },\n            \"match\": {\n                \"http_filter\": \"path_begin\",\n                \"http_filter_values\": [\n                    \"foo\",\n                    \"bar\",\n                ],\n            },\n        },\n        {\n            \"action\": {\n                \"type\": \"allow\",\n            },\n            \"match\": {\n                \"http_filter\": \"path_begin\",\n                \"http_filter_values\": [\"hi\"],\n                \"invert\": True,\n            },\n        },\n        {\n            \"action\": {\n                \"type\": \"allow\",\n            },\n            \"match\": {\n                \"http_filter\": \"http_header_match\",\n                \"http_filter_values\": \"foo\",\n                \"http_filter_option\": \"bar\",\n            },\n        },\n        {\n            \"action\": {\n                \"type\": \"redirect\",\n                \"redirects\": [{\n                    \"type\": \"location\",\n                    \"target\": \"https://example.com\",\n                    \"code\": 307,\n                }],\n            },\n            \"match\": {\n                \"ip_subnets\": [\"10.0.0.10\"],\n                \"http_filter\": \"path_begin\",\n                \"http_filter_values\": [\n                    \"foo\",\n                    \"bar\",\n                ],\n            },\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var frontend01 = new Scaleway.LoadbalancerFrontend(\"frontend01\", new()\n    {\n        LbId = lb01.Id,\n        BackendId = backend01.Id,\n        Name = \"frontend01\",\n        InboundPort = 80,\n        Acls = new[]\n        {\n            new Scaleway.Inputs.LoadbalancerFrontendAclArgs\n            {\n                Name = \"blacklist wellknwon IPs\",\n                Action = new Scaleway.Inputs.LoadbalancerFrontendAclActionArgs\n                {\n                    Type = \"allow\",\n                },\n                Match = new Scaleway.Inputs.LoadbalancerFrontendAclMatchArgs\n                {\n                    IpSubnets = new[]\n                    {\n                        \"192.168.0.1\",\n                        \"192.168.0.2\",\n                        \"192.168.10.0/24\",\n                    },\n                },\n            },\n            new Scaleway.Inputs.LoadbalancerFrontendAclArgs\n            {\n                Action = new Scaleway.Inputs.LoadbalancerFrontendAclActionArgs\n                {\n                    Type = \"deny\",\n                },\n                Match = new Scaleway.Inputs.LoadbalancerFrontendAclMatchArgs\n                {\n                    IpSubnets = new[]\n                    {\n                        \"51.51.51.51\",\n                    },\n                    HttpFilter = \"regex\",\n                    HttpFilterValues = new[]\n                    {\n                        \"^foo*bar$\",\n                    },\n                },\n            },\n            new Scaleway.Inputs.LoadbalancerFrontendAclArgs\n            {\n                Action = new Scaleway.Inputs.LoadbalancerFrontendAclActionArgs\n                {\n                    Type = \"allow\",\n                },\n                Match = new Scaleway.Inputs.LoadbalancerFrontendAclMatchArgs\n                {\n                    HttpFilter = \"path_begin\",\n                    HttpFilterValues = new[]\n                    {\n                        \"foo\",\n                        \"bar\",\n                    },\n                },\n            },\n            new Scaleway.Inputs.LoadbalancerFrontendAclArgs\n            {\n                Action = new Scaleway.Inputs.LoadbalancerFrontendAclActionArgs\n                {\n                    Type = \"allow\",\n                },\n                Match = new Scaleway.Inputs.LoadbalancerFrontendAclMatchArgs\n                {\n                    HttpFilter = \"path_begin\",\n                    HttpFilterValues = new[]\n                    {\n                        \"hi\",\n                    },\n                    Invert = true,\n                },\n            },\n            new Scaleway.Inputs.LoadbalancerFrontendAclArgs\n            {\n                Action = new Scaleway.Inputs.LoadbalancerFrontendAclActionArgs\n                {\n                    Type = \"allow\",\n                },\n                Match = new Scaleway.Inputs.LoadbalancerFrontendAclMatchArgs\n                {\n                    HttpFilter = \"http_header_match\",\n                    HttpFilterValues = \"foo\",\n                    HttpFilterOption = \"bar\",\n                },\n            },\n            new Scaleway.Inputs.LoadbalancerFrontendAclArgs\n            {\n                Action = new Scaleway.Inputs.LoadbalancerFrontendAclActionArgs\n                {\n                    Type = \"redirect\",\n                    Redirects = new[]\n                    {\n                        new Scaleway.Inputs.LoadbalancerFrontendAclActionRedirectArgs\n                        {\n                            Type = \"location\",\n                            Target = \"https://example.com\",\n                            Code = 307,\n                        },\n                    },\n                },\n                Match = new Scaleway.Inputs.LoadbalancerFrontendAclMatchArgs\n                {\n                    IpSubnets = new[]\n                    {\n                        \"10.0.0.10\",\n                    },\n                    HttpFilter = \"path_begin\",\n                    HttpFilterValues = new[]\n                    {\n                        \"foo\",\n                        \"bar\",\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLoadbalancerFrontend(ctx, \"frontend01\", \u0026scaleway.LoadbalancerFrontendArgs{\n\t\t\tLbId:        pulumi.Any(lb01.Id),\n\t\t\tBackendId:   pulumi.Any(backend01.Id),\n\t\t\tName:        pulumi.String(\"frontend01\"),\n\t\t\tInboundPort: pulumi.Int(80),\n\t\t\tAcls: scaleway.LoadbalancerFrontendAclArray{\n\t\t\t\t\u0026scaleway.LoadbalancerFrontendAclArgs{\n\t\t\t\t\tName: pulumi.String(\"blacklist wellknwon IPs\"),\n\t\t\t\t\tAction: \u0026scaleway.LoadbalancerFrontendAclActionArgs{\n\t\t\t\t\t\tType: pulumi.String(\"allow\"),\n\t\t\t\t\t},\n\t\t\t\t\tMatch: \u0026scaleway.LoadbalancerFrontendAclMatchArgs{\n\t\t\t\t\t\tIpSubnets: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"192.168.0.1\"),\n\t\t\t\t\t\t\tpulumi.String(\"192.168.0.2\"),\n\t\t\t\t\t\t\tpulumi.String(\"192.168.10.0/24\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026scaleway.LoadbalancerFrontendAclArgs{\n\t\t\t\t\tAction: \u0026scaleway.LoadbalancerFrontendAclActionArgs{\n\t\t\t\t\t\tType: pulumi.String(\"deny\"),\n\t\t\t\t\t},\n\t\t\t\t\tMatch: \u0026scaleway.LoadbalancerFrontendAclMatchArgs{\n\t\t\t\t\t\tIpSubnets: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"51.51.51.51\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tHttpFilter: pulumi.String(\"regex\"),\n\t\t\t\t\t\tHttpFilterValues: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"^foo*bar$\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026scaleway.LoadbalancerFrontendAclArgs{\n\t\t\t\t\tAction: \u0026scaleway.LoadbalancerFrontendAclActionArgs{\n\t\t\t\t\t\tType: pulumi.String(\"allow\"),\n\t\t\t\t\t},\n\t\t\t\t\tMatch: \u0026scaleway.LoadbalancerFrontendAclMatchArgs{\n\t\t\t\t\t\tHttpFilter: pulumi.String(\"path_begin\"),\n\t\t\t\t\t\tHttpFilterValues: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"foo\"),\n\t\t\t\t\t\t\tpulumi.String(\"bar\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026scaleway.LoadbalancerFrontendAclArgs{\n\t\t\t\t\tAction: \u0026scaleway.LoadbalancerFrontendAclActionArgs{\n\t\t\t\t\t\tType: pulumi.String(\"allow\"),\n\t\t\t\t\t},\n\t\t\t\t\tMatch: \u0026scaleway.LoadbalancerFrontendAclMatchArgs{\n\t\t\t\t\t\tHttpFilter: pulumi.String(\"path_begin\"),\n\t\t\t\t\t\tHttpFilterValues: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"hi\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tInvert: pulumi.Bool(true),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026scaleway.LoadbalancerFrontendAclArgs{\n\t\t\t\t\tAction: \u0026scaleway.LoadbalancerFrontendAclActionArgs{\n\t\t\t\t\t\tType: pulumi.String(\"allow\"),\n\t\t\t\t\t},\n\t\t\t\t\tMatch: \u0026scaleway.LoadbalancerFrontendAclMatchArgs{\n\t\t\t\t\t\tHttpFilter:       pulumi.String(\"http_header_match\"),\n\t\t\t\t\t\tHttpFilterValues: pulumi.StringArray(\"foo\"),\n\t\t\t\t\t\tHttpFilterOption: pulumi.String(\"bar\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026scaleway.LoadbalancerFrontendAclArgs{\n\t\t\t\t\tAction: \u0026scaleway.LoadbalancerFrontendAclActionArgs{\n\t\t\t\t\t\tType: pulumi.String(\"redirect\"),\n\t\t\t\t\t\tRedirects: scaleway.LoadbalancerFrontendAclActionRedirectArray{\n\t\t\t\t\t\t\t\u0026scaleway.LoadbalancerFrontendAclActionRedirectArgs{\n\t\t\t\t\t\t\t\tType:   pulumi.String(\"location\"),\n\t\t\t\t\t\t\t\tTarget: pulumi.String(\"https://example.com\"),\n\t\t\t\t\t\t\t\tCode:   pulumi.Int(307),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tMatch: \u0026scaleway.LoadbalancerFrontendAclMatchArgs{\n\t\t\t\t\t\tIpSubnets: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"10.0.0.10\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tHttpFilter: pulumi.String(\"path_begin\"),\n\t\t\t\t\t\tHttpFilterValues: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"foo\"),\n\t\t\t\t\t\t\tpulumi.String(\"bar\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LoadbalancerFrontend;\nimport com.pulumi.scaleway.LoadbalancerFrontendArgs;\nimport com.pulumi.scaleway.inputs.LoadbalancerFrontendAclArgs;\nimport com.pulumi.scaleway.inputs.LoadbalancerFrontendAclActionArgs;\nimport com.pulumi.scaleway.inputs.LoadbalancerFrontendAclMatchArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var frontend01 = new LoadbalancerFrontend(\"frontend01\", LoadbalancerFrontendArgs.builder()\n            .lbId(lb01.id())\n            .backendId(backend01.id())\n            .name(\"frontend01\")\n            .inboundPort(\"80\")\n            .acls(            \n                LoadbalancerFrontendAclArgs.builder()\n                    .name(\"blacklist wellknwon IPs\")\n                    .action(LoadbalancerFrontendAclActionArgs.builder()\n                        .type(\"allow\")\n                        .build())\n                    .match(LoadbalancerFrontendAclMatchArgs.builder()\n                        .ipSubnets(                        \n                            \"192.168.0.1\",\n                            \"192.168.0.2\",\n                            \"192.168.10.0/24\")\n                        .build())\n                    .build(),\n                LoadbalancerFrontendAclArgs.builder()\n                    .action(LoadbalancerFrontendAclActionArgs.builder()\n                        .type(\"deny\")\n                        .build())\n                    .match(LoadbalancerFrontendAclMatchArgs.builder()\n                        .ipSubnets(\"51.51.51.51\")\n                        .httpFilter(\"regex\")\n                        .httpFilterValues(\"^foo*bar$\")\n                        .build())\n                    .build(),\n                LoadbalancerFrontendAclArgs.builder()\n                    .action(LoadbalancerFrontendAclActionArgs.builder()\n                        .type(\"allow\")\n                        .build())\n                    .match(LoadbalancerFrontendAclMatchArgs.builder()\n                        .httpFilter(\"path_begin\")\n                        .httpFilterValues(                        \n                            \"foo\",\n                            \"bar\")\n                        .build())\n                    .build(),\n                LoadbalancerFrontendAclArgs.builder()\n                    .action(LoadbalancerFrontendAclActionArgs.builder()\n                        .type(\"allow\")\n                        .build())\n                    .match(LoadbalancerFrontendAclMatchArgs.builder()\n                        .httpFilter(\"path_begin\")\n                        .httpFilterValues(\"hi\")\n                        .invert(\"true\")\n                        .build())\n                    .build(),\n                LoadbalancerFrontendAclArgs.builder()\n                    .action(LoadbalancerFrontendAclActionArgs.builder()\n                        .type(\"allow\")\n                        .build())\n                    .match(LoadbalancerFrontendAclMatchArgs.builder()\n                        .httpFilter(\"http_header_match\")\n                        .httpFilterValues(\"foo\")\n                        .httpFilterOption(\"bar\")\n                        .build())\n                    .build(),\n                LoadbalancerFrontendAclArgs.builder()\n                    .action(LoadbalancerFrontendAclActionArgs.builder()\n                        .type(\"redirect\")\n                        .redirects(LoadbalancerFrontendAclActionRedirectArgs.builder()\n                            .type(\"location\")\n                            .target(\"https://example.com\")\n                            .code(307)\n                            .build())\n                        .build())\n                    .match(LoadbalancerFrontendAclMatchArgs.builder()\n                        .ipSubnets(\"10.0.0.10\")\n                        .httpFilter(\"path_begin\")\n                        .httpFilterValues(                        \n                            \"foo\",\n                            \"bar\")\n                        .build())\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  frontend01:\n    type: scaleway:LoadbalancerFrontend\n    properties:\n      lbId: ${lb01.id}\n      backendId: ${backend01.id}\n      name: frontend01\n      inboundPort: '80'\n      acls:\n        - name: blacklist wellknwon IPs\n          action:\n            type: allow\n          match:\n            ipSubnets:\n              - 192.168.0.1\n              - 192.168.0.2\n              - 192.168.10.0/24\n        - action:\n            type: deny\n          match:\n            ipSubnets:\n              - 51.51.51.51\n            httpFilter: regex\n            httpFilterValues:\n              - ^foo*bar$\n        - action:\n            type: allow\n          match:\n            httpFilter: path_begin\n            httpFilterValues:\n              - foo\n              - bar\n        - action:\n            type: allow\n          match:\n            httpFilter: path_begin\n            httpFilterValues:\n              - hi\n            invert: 'true'\n        - action:\n            type: allow\n          match:\n            httpFilter: http_header_match\n            httpFilterValues: foo\n            httpFilterOption: bar\n        - action:\n            type: redirect\n            redirects:\n              - type: location\n                target: https://example.com\n                code: 307\n          match:\n            ipSubnets:\n              - 10.0.0.10\n            httpFilter: path_begin\n            httpFilterValues:\n              - foo\n              - bar\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nLoad Balancer frontends can be imported using `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/loadbalancerFrontend:LoadbalancerFrontend frontend01 fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/LoadbalancerFrontendAcl:LoadbalancerFrontendAcl"
                    },
                    "description": "A list of ACL rules to apply to the Load Balancer frontend.  Defined below.\n"
                },
                "backendId": {
                    "type": "string",
                    "description": "The ID of the Load Balancer backend this frontend is attached to.\n\n\u003e **Important:** Updates to `lb_id` or `backend_id` will recreate the frontend.\n"
                },
                "certificateId": {
                    "type": "string",
                    "description": "(Deprecated, use `certificate_ids` instead) First certificate ID used by the frontend.\n",
                    "deprecationMessage": "Please use certificate_ids"
                },
                "certificateIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of certificate IDs that should be used by the frontend.\n\n\u003e **Important:** Certificates are not allowed on port 80.\n"
                },
                "enableHttp3": {
                    "type": "boolean",
                    "description": "Activates HTTP/3 protocol.\n"
                },
                "externalAcls": {
                    "type": "boolean",
                    "description": "A boolean to specify whether to use lb_acl.\nIf `external_acls` is set to `true`, `acl` can not be set directly in the Load Balancer frontend.\n"
                },
                "inboundPort": {
                    "type": "integer",
                    "description": "TCP port to listen to on the front side.\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The ID of the Load Balancer this frontend is attached to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The ACL name. If not provided it will be randomly generated.\n"
                },
                "timeoutClient": {
                    "type": "string",
                    "description": "Maximum inactivity time on the client side. (e.g. `1s`)\n"
                }
            },
            "required": [
                "backendId",
                "certificateId",
                "inboundPort",
                "lbId",
                "name"
            ],
            "inputProperties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/LoadbalancerFrontendAcl:LoadbalancerFrontendAcl"
                    },
                    "description": "A list of ACL rules to apply to the Load Balancer frontend.  Defined below.\n"
                },
                "backendId": {
                    "type": "string",
                    "description": "The ID of the Load Balancer backend this frontend is attached to.\n\n\u003e **Important:** Updates to `lb_id` or `backend_id` will recreate the frontend.\n",
                    "willReplaceOnChanges": true
                },
                "certificateIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of certificate IDs that should be used by the frontend.\n\n\u003e **Important:** Certificates are not allowed on port 80.\n"
                },
                "enableHttp3": {
                    "type": "boolean",
                    "description": "Activates HTTP/3 protocol.\n"
                },
                "externalAcls": {
                    "type": "boolean",
                    "description": "A boolean to specify whether to use lb_acl.\nIf `external_acls` is set to `true`, `acl` can not be set directly in the Load Balancer frontend.\n"
                },
                "inboundPort": {
                    "type": "integer",
                    "description": "TCP port to listen to on the front side.\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The ID of the Load Balancer this frontend is attached to.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The ACL name. If not provided it will be randomly generated.\n"
                },
                "timeoutClient": {
                    "type": "string",
                    "description": "Maximum inactivity time on the client side. (e.g. `1s`)\n"
                }
            },
            "requiredInputs": [
                "backendId",
                "inboundPort",
                "lbId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadbalancerFrontend resources.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/LoadbalancerFrontendAcl:LoadbalancerFrontendAcl"
                        },
                        "description": "A list of ACL rules to apply to the Load Balancer frontend.  Defined below.\n"
                    },
                    "backendId": {
                        "type": "string",
                        "description": "The ID of the Load Balancer backend this frontend is attached to.\n\n\u003e **Important:** Updates to `lb_id` or `backend_id` will recreate the frontend.\n",
                        "willReplaceOnChanges": true
                    },
                    "certificateId": {
                        "type": "string",
                        "description": "(Deprecated, use `certificate_ids` instead) First certificate ID used by the frontend.\n",
                        "deprecationMessage": "Please use certificate_ids"
                    },
                    "certificateIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of certificate IDs that should be used by the frontend.\n\n\u003e **Important:** Certificates are not allowed on port 80.\n"
                    },
                    "enableHttp3": {
                        "type": "boolean",
                        "description": "Activates HTTP/3 protocol.\n"
                    },
                    "externalAcls": {
                        "type": "boolean",
                        "description": "A boolean to specify whether to use lb_acl.\nIf `external_acls` is set to `true`, `acl` can not be set directly in the Load Balancer frontend.\n"
                    },
                    "inboundPort": {
                        "type": "integer",
                        "description": "TCP port to listen to on the front side.\n"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The ID of the Load Balancer this frontend is attached to.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The ACL name. If not provided it will be randomly generated.\n"
                    },
                    "timeoutClient": {
                        "type": "string",
                        "description": "Maximum inactivity time on the client side. (e.g. `1s`)\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/loadbalancerIp:LoadbalancerIp": {
            "description": "Creates and manages Scaleway Load Balancer IP addresses.\n\nFor more information, see the [main documentation](https://www.scaleway.com/en/docs/network/load-balancer/how-to/create-manage-flex-ips/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-ip-addresses-list-ip-addresses).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst ip = new scaleway.LoadbalancerIp(\"ip\", {reverse: \"my-reverse.com\"});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nip = scaleway.LoadbalancerIp(\"ip\", reverse=\"my-reverse.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ip = new Scaleway.LoadbalancerIp(\"ip\", new()\n    {\n        Reverse = \"my-reverse.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLoadbalancerIp(ctx, \"ip\", \u0026scaleway.LoadbalancerIpArgs{\n\t\t\tReverse: pulumi.String(\"my-reverse.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LoadbalancerIp;\nimport com.pulumi.scaleway.LoadbalancerIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ip = new LoadbalancerIp(\"ip\", LoadbalancerIpArgs.builder()\n            .reverse(\"my-reverse.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ip:\n    type: scaleway:LoadbalancerIp\n    properties:\n      reverse: my-reverse.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### With IPv6\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst ipv6 = new scaleway.LoadbalancerIp(\"ipv6\", {isIpv6: true});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nipv6 = scaleway.LoadbalancerIp(\"ipv6\", is_ipv6=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ipv6 = new Scaleway.LoadbalancerIp(\"ipv6\", new()\n    {\n        IsIpv6 = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewLoadbalancerIp(ctx, \"ipv6\", \u0026scaleway.LoadbalancerIpArgs{\n\t\t\tIsIpv6: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LoadbalancerIp;\nimport com.pulumi.scaleway.LoadbalancerIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ipv6 = new LoadbalancerIp(\"ipv6\", LoadbalancerIpArgs.builder()\n            .isIpv6(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ipv6:\n    type: scaleway:LoadbalancerIp\n    properties:\n      isIpv6: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIPs can be imported using `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/loadbalancerIp:LoadbalancerIp ip01 fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address\n"
                },
                "isIpv6": {
                    "type": "boolean",
                    "description": "If true, creates a flexible IP with an IPv6 address.\n"
                },
                "lbId": {
                    "type": "string",
                    "description": "The associated Load Balancer ID if any\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization_id you want to attach the resource to\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project the IP is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the resource\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain associated with this IP.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with this IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n"
                }
            },
            "required": [
                "ipAddress",
                "lbId",
                "organizationId",
                "projectId",
                "region",
                "reverse",
                "zone"
            ],
            "inputProperties": {
                "isIpv6": {
                    "type": "boolean",
                    "description": "If true, creates a flexible IP with an IPv6 address.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project the IP is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain associated with this IP.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with this IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadbalancerIp resources.\n",
                "properties": {
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address\n"
                    },
                    "isIpv6": {
                        "type": "boolean",
                        "description": "If true, creates a flexible IP with an IPv6 address.\n",
                        "willReplaceOnChanges": true
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The associated Load Balancer ID if any\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization_id you want to attach the resource to\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the Project the IP is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the resource\n"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse domain associated with this IP.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with this IP.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the IP should be reserved.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/loadbalancerRoute:LoadbalancerRoute": {
            "description": "Creates and manages Scaleway Load Balancer routes.\n\nFor more information, see the [main documentation](https://www.scaleway.com/en/docs/network/load-balancer/how-to/create-manage-routes/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-route).\n\n## Example Usage\n\n### With SNI for direction to TCP backends\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst ip01 = new scaleway.LoadbalancerIp(\"ip01\", {});\nconst lb01 = new scaleway.Loadbalancer(\"lb01\", {\n    ipId: ip01.id,\n    name: \"test-lb\",\n    type: \"lb-s\",\n});\nconst bkd01 = new scaleway.LoadbalancerBackend(\"bkd01\", {\n    lbId: lb01.id,\n    forwardProtocol: \"tcp\",\n    forwardPort: 80,\n    proxyProtocol: \"none\",\n});\nconst frt01 = new scaleway.LoadbalancerFrontend(\"frt01\", {\n    lbId: lb01.id,\n    backendId: bkd01.id,\n    inboundPort: 80,\n});\nconst rt01 = new scaleway.LoadbalancerRoute(\"rt01\", {\n    frontendId: frt01.id,\n    backendId: bkd01.id,\n    matchSni: \"sni.scaleway.com\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nip01 = scaleway.LoadbalancerIp(\"ip01\")\nlb01 = scaleway.Loadbalancer(\"lb01\",\n    ip_id=ip01.id,\n    name=\"test-lb\",\n    type=\"lb-s\")\nbkd01 = scaleway.LoadbalancerBackend(\"bkd01\",\n    lb_id=lb01.id,\n    forward_protocol=\"tcp\",\n    forward_port=80,\n    proxy_protocol=\"none\")\nfrt01 = scaleway.LoadbalancerFrontend(\"frt01\",\n    lb_id=lb01.id,\n    backend_id=bkd01.id,\n    inbound_port=80)\nrt01 = scaleway.LoadbalancerRoute(\"rt01\",\n    frontend_id=frt01.id,\n    backend_id=bkd01.id,\n    match_sni=\"sni.scaleway.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ip01 = new Scaleway.LoadbalancerIp(\"ip01\");\n\n    var lb01 = new Scaleway.Loadbalancer(\"lb01\", new()\n    {\n        IpId = ip01.Id,\n        Name = \"test-lb\",\n        Type = \"lb-s\",\n    });\n\n    var bkd01 = new Scaleway.LoadbalancerBackend(\"bkd01\", new()\n    {\n        LbId = lb01.Id,\n        ForwardProtocol = \"tcp\",\n        ForwardPort = 80,\n        ProxyProtocol = \"none\",\n    });\n\n    var frt01 = new Scaleway.LoadbalancerFrontend(\"frt01\", new()\n    {\n        LbId = lb01.Id,\n        BackendId = bkd01.Id,\n        InboundPort = 80,\n    });\n\n    var rt01 = new Scaleway.LoadbalancerRoute(\"rt01\", new()\n    {\n        FrontendId = frt01.Id,\n        BackendId = bkd01.Id,\n        MatchSni = \"sni.scaleway.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tip01, err := scaleway.NewLoadbalancerIp(ctx, \"ip01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlb01, err := scaleway.NewLoadbalancer(ctx, \"lb01\", \u0026scaleway.LoadbalancerArgs{\n\t\t\tIpId: ip01.ID(),\n\t\t\tName: pulumi.String(\"test-lb\"),\n\t\t\tType: pulumi.String(\"lb-s\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbkd01, err := scaleway.NewLoadbalancerBackend(ctx, \"bkd01\", \u0026scaleway.LoadbalancerBackendArgs{\n\t\t\tLbId:            lb01.ID(),\n\t\t\tForwardProtocol: pulumi.String(\"tcp\"),\n\t\t\tForwardPort:     pulumi.Int(80),\n\t\t\tProxyProtocol:   pulumi.String(\"none\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfrt01, err := scaleway.NewLoadbalancerFrontend(ctx, \"frt01\", \u0026scaleway.LoadbalancerFrontendArgs{\n\t\t\tLbId:        lb01.ID(),\n\t\t\tBackendId:   bkd01.ID(),\n\t\t\tInboundPort: pulumi.Int(80),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewLoadbalancerRoute(ctx, \"rt01\", \u0026scaleway.LoadbalancerRouteArgs{\n\t\t\tFrontendId: frt01.ID(),\n\t\t\tBackendId:  bkd01.ID(),\n\t\t\tMatchSni:   pulumi.String(\"sni.scaleway.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LoadbalancerIp;\nimport com.pulumi.scaleway.Loadbalancer;\nimport com.pulumi.scaleway.LoadbalancerArgs;\nimport com.pulumi.scaleway.LoadbalancerBackend;\nimport com.pulumi.scaleway.LoadbalancerBackendArgs;\nimport com.pulumi.scaleway.LoadbalancerFrontend;\nimport com.pulumi.scaleway.LoadbalancerFrontendArgs;\nimport com.pulumi.scaleway.LoadbalancerRoute;\nimport com.pulumi.scaleway.LoadbalancerRouteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ip01 = new LoadbalancerIp(\"ip01\");\n\n        var lb01 = new Loadbalancer(\"lb01\", LoadbalancerArgs.builder()\n            .ipId(ip01.id())\n            .name(\"test-lb\")\n            .type(\"lb-s\")\n            .build());\n\n        var bkd01 = new LoadbalancerBackend(\"bkd01\", LoadbalancerBackendArgs.builder()\n            .lbId(lb01.id())\n            .forwardProtocol(\"tcp\")\n            .forwardPort(80)\n            .proxyProtocol(\"none\")\n            .build());\n\n        var frt01 = new LoadbalancerFrontend(\"frt01\", LoadbalancerFrontendArgs.builder()\n            .lbId(lb01.id())\n            .backendId(bkd01.id())\n            .inboundPort(80)\n            .build());\n\n        var rt01 = new LoadbalancerRoute(\"rt01\", LoadbalancerRouteArgs.builder()\n            .frontendId(frt01.id())\n            .backendId(bkd01.id())\n            .matchSni(\"sni.scaleway.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ip01:\n    type: scaleway:LoadbalancerIp\n  lb01:\n    type: scaleway:Loadbalancer\n    properties:\n      ipId: ${ip01.id}\n      name: test-lb\n      type: lb-s\n  bkd01:\n    type: scaleway:LoadbalancerBackend\n    properties:\n      lbId: ${lb01.id}\n      forwardProtocol: tcp\n      forwardPort: 80\n      proxyProtocol: none\n  frt01:\n    type: scaleway:LoadbalancerFrontend\n    properties:\n      lbId: ${lb01.id}\n      backendId: ${bkd01.id}\n      inboundPort: 80\n  rt01:\n    type: scaleway:LoadbalancerRoute\n    properties:\n      frontendId: ${frt01.id}\n      backendId: ${bkd01.id}\n      matchSni: sni.scaleway.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### With host-header for direction to HTTP backends\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst ip01 = new scaleway.LoadbalancerIp(\"ip01\", {});\nconst lb01 = new scaleway.Loadbalancer(\"lb01\", {\n    ipId: ip01.id,\n    name: \"test-lb\",\n    type: \"lb-s\",\n});\nconst bkd01 = new scaleway.LoadbalancerBackend(\"bkd01\", {\n    lbId: lb01.id,\n    forwardProtocol: \"http\",\n    forwardPort: 80,\n    proxyProtocol: \"none\",\n});\nconst frt01 = new scaleway.LoadbalancerFrontend(\"frt01\", {\n    lbId: lb01.id,\n    backendId: bkd01.id,\n    inboundPort: 80,\n});\nconst rt01 = new scaleway.LoadbalancerRoute(\"rt01\", {\n    frontendId: frt01.id,\n    backendId: bkd01.id,\n    matchHostHeader: \"host.scaleway.com\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nip01 = scaleway.LoadbalancerIp(\"ip01\")\nlb01 = scaleway.Loadbalancer(\"lb01\",\n    ip_id=ip01.id,\n    name=\"test-lb\",\n    type=\"lb-s\")\nbkd01 = scaleway.LoadbalancerBackend(\"bkd01\",\n    lb_id=lb01.id,\n    forward_protocol=\"http\",\n    forward_port=80,\n    proxy_protocol=\"none\")\nfrt01 = scaleway.LoadbalancerFrontend(\"frt01\",\n    lb_id=lb01.id,\n    backend_id=bkd01.id,\n    inbound_port=80)\nrt01 = scaleway.LoadbalancerRoute(\"rt01\",\n    frontend_id=frt01.id,\n    backend_id=bkd01.id,\n    match_host_header=\"host.scaleway.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ip01 = new Scaleway.LoadbalancerIp(\"ip01\");\n\n    var lb01 = new Scaleway.Loadbalancer(\"lb01\", new()\n    {\n        IpId = ip01.Id,\n        Name = \"test-lb\",\n        Type = \"lb-s\",\n    });\n\n    var bkd01 = new Scaleway.LoadbalancerBackend(\"bkd01\", new()\n    {\n        LbId = lb01.Id,\n        ForwardProtocol = \"http\",\n        ForwardPort = 80,\n        ProxyProtocol = \"none\",\n    });\n\n    var frt01 = new Scaleway.LoadbalancerFrontend(\"frt01\", new()\n    {\n        LbId = lb01.Id,\n        BackendId = bkd01.Id,\n        InboundPort = 80,\n    });\n\n    var rt01 = new Scaleway.LoadbalancerRoute(\"rt01\", new()\n    {\n        FrontendId = frt01.Id,\n        BackendId = bkd01.Id,\n        MatchHostHeader = \"host.scaleway.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tip01, err := scaleway.NewLoadbalancerIp(ctx, \"ip01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlb01, err := scaleway.NewLoadbalancer(ctx, \"lb01\", \u0026scaleway.LoadbalancerArgs{\n\t\t\tIpId: ip01.ID(),\n\t\t\tName: pulumi.String(\"test-lb\"),\n\t\t\tType: pulumi.String(\"lb-s\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbkd01, err := scaleway.NewLoadbalancerBackend(ctx, \"bkd01\", \u0026scaleway.LoadbalancerBackendArgs{\n\t\t\tLbId:            lb01.ID(),\n\t\t\tForwardProtocol: pulumi.String(\"http\"),\n\t\t\tForwardPort:     pulumi.Int(80),\n\t\t\tProxyProtocol:   pulumi.String(\"none\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfrt01, err := scaleway.NewLoadbalancerFrontend(ctx, \"frt01\", \u0026scaleway.LoadbalancerFrontendArgs{\n\t\t\tLbId:        lb01.ID(),\n\t\t\tBackendId:   bkd01.ID(),\n\t\t\tInboundPort: pulumi.Int(80),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewLoadbalancerRoute(ctx, \"rt01\", \u0026scaleway.LoadbalancerRouteArgs{\n\t\t\tFrontendId:      frt01.ID(),\n\t\t\tBackendId:       bkd01.ID(),\n\t\t\tMatchHostHeader: pulumi.String(\"host.scaleway.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LoadbalancerIp;\nimport com.pulumi.scaleway.Loadbalancer;\nimport com.pulumi.scaleway.LoadbalancerArgs;\nimport com.pulumi.scaleway.LoadbalancerBackend;\nimport com.pulumi.scaleway.LoadbalancerBackendArgs;\nimport com.pulumi.scaleway.LoadbalancerFrontend;\nimport com.pulumi.scaleway.LoadbalancerFrontendArgs;\nimport com.pulumi.scaleway.LoadbalancerRoute;\nimport com.pulumi.scaleway.LoadbalancerRouteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ip01 = new LoadbalancerIp(\"ip01\");\n\n        var lb01 = new Loadbalancer(\"lb01\", LoadbalancerArgs.builder()\n            .ipId(ip01.id())\n            .name(\"test-lb\")\n            .type(\"lb-s\")\n            .build());\n\n        var bkd01 = new LoadbalancerBackend(\"bkd01\", LoadbalancerBackendArgs.builder()\n            .lbId(lb01.id())\n            .forwardProtocol(\"http\")\n            .forwardPort(80)\n            .proxyProtocol(\"none\")\n            .build());\n\n        var frt01 = new LoadbalancerFrontend(\"frt01\", LoadbalancerFrontendArgs.builder()\n            .lbId(lb01.id())\n            .backendId(bkd01.id())\n            .inboundPort(80)\n            .build());\n\n        var rt01 = new LoadbalancerRoute(\"rt01\", LoadbalancerRouteArgs.builder()\n            .frontendId(frt01.id())\n            .backendId(bkd01.id())\n            .matchHostHeader(\"host.scaleway.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ip01:\n    type: scaleway:LoadbalancerIp\n  lb01:\n    type: scaleway:Loadbalancer\n    properties:\n      ipId: ${ip01.id}\n      name: test-lb\n      type: lb-s\n  bkd01:\n    type: scaleway:LoadbalancerBackend\n    properties:\n      lbId: ${lb01.id}\n      forwardProtocol: http\n      forwardPort: 80\n      proxyProtocol: none\n  frt01:\n    type: scaleway:LoadbalancerFrontend\n    properties:\n      lbId: ${lb01.id}\n      backendId: ${bkd01.id}\n      inboundPort: 80\n  rt01:\n    type: scaleway:LoadbalancerRoute\n    properties:\n      frontendId: ${frt01.id}\n      backendId: ${bkd01.id}\n      matchHostHeader: host.scaleway.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nLoad Balancer frontends can be imported using `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/loadbalancerRoute:LoadbalancerRoute main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "backendId": {
                    "type": "string",
                    "description": "The ID of the backend the route is associated with.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date on which the route was created.\n"
                },
                "frontendId": {
                    "type": "string",
                    "description": "The ID of the frontend the route is associated with.\n"
                },
                "matchHostHeader": {
                    "type": "string",
                    "description": "The HTTP host header to match. Value to match in the HTTP Host request header from an incoming connection.\nOnly one of `match_sni` and `match_host_header` should be specified.\n\n\u003e **Important:** This field should be set for routes on HTTP Load Balancers.\n"
                },
                "matchSni": {
                    "type": "string",
                    "description": "The Server Name Indication (SNI) value to match. Value to match in the Server Name Indication TLS extension (SNI) field from an incoming connection made via an SSL/TLS transport layer.\nOnly one of `match_sni` and `match_host_header` should be specified.\n\n\u003e **Important:** This field should be set for routes on TCP Load Balancers.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date on which the route was last updated.\n"
                }
            },
            "required": [
                "backendId",
                "createdAt",
                "frontendId",
                "updatedAt"
            ],
            "inputProperties": {
                "backendId": {
                    "type": "string",
                    "description": "The ID of the backend the route is associated with.\n"
                },
                "frontendId": {
                    "type": "string",
                    "description": "The ID of the frontend the route is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "matchHostHeader": {
                    "type": "string",
                    "description": "The HTTP host header to match. Value to match in the HTTP Host request header from an incoming connection.\nOnly one of `match_sni` and `match_host_header` should be specified.\n\n\u003e **Important:** This field should be set for routes on HTTP Load Balancers.\n"
                },
                "matchSni": {
                    "type": "string",
                    "description": "The Server Name Indication (SNI) value to match. Value to match in the Server Name Indication TLS extension (SNI) field from an incoming connection made via an SSL/TLS transport layer.\nOnly one of `match_sni` and `match_host_header` should be specified.\n\n\u003e **Important:** This field should be set for routes on TCP Load Balancers.\n"
                }
            },
            "requiredInputs": [
                "backendId",
                "frontendId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadbalancerRoute resources.\n",
                "properties": {
                    "backendId": {
                        "type": "string",
                        "description": "The ID of the backend the route is associated with.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date on which the route was created.\n"
                    },
                    "frontendId": {
                        "type": "string",
                        "description": "The ID of the frontend the route is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "matchHostHeader": {
                        "type": "string",
                        "description": "The HTTP host header to match. Value to match in the HTTP Host request header from an incoming connection.\nOnly one of `match_sni` and `match_host_header` should be specified.\n\n\u003e **Important:** This field should be set for routes on HTTP Load Balancers.\n"
                    },
                    "matchSni": {
                        "type": "string",
                        "description": "The Server Name Indication (SNI) value to match. Value to match in the Server Name Indication TLS extension (SNI) field from an incoming connection made via an SSL/TLS transport layer.\nOnly one of `match_sni` and `match_host_header` should be specified.\n\n\u003e **Important:** This field should be set for routes on TCP Load Balancers.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date on which the route was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/mnqNatsAccount:MnqNatsAccount": {
            "description": "Creates and manages Scaleway Messaging and Queuing NATS accounts.\nFor further information, see\nour [main documentation](https://www.scaleway.com/en/docs/serverless/messaging/reference-content/nats-overview/)\nTo use the Scaleway provider with the official NATS JetStream provider, check out the corresponding guide.\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.MnqNatsAccount(\"main\", {name: \"nats-account\"});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.MnqNatsAccount(\"main\", name=\"nats-account\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.MnqNatsAccount(\"main\", new()\n    {\n        Name = \"nats-account\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewMnqNatsAccount(ctx, \"main\", \u0026scaleway.MnqNatsAccountArgs{\n\t\t\tName: pulumi.String(\"nats-account\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.MnqNatsAccount;\nimport com.pulumi.scaleway.MnqNatsAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new MnqNatsAccount(\"main\", MnqNatsAccountArgs.builder()\n            .name(\"nats-account\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:MnqNatsAccount\n    properties:\n      name: nats-account\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nNamespaces can be imported using `{region}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/mnqNatsAccount:MnqNatsAccount main fr-par/11111111111111111111111111111111\n```\n\n",
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint of the NATS service for this account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the NATS account.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project the\naccount is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region\nin which the account should be created.\n"
                }
            },
            "required": [
                "endpoint",
                "name",
                "projectId",
                "region"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The unique name of the NATS account.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project the\naccount is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region\nin which the account should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MnqNatsAccount resources.\n",
                "properties": {
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint of the NATS service for this account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the NATS account.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the Project the\naccount is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region\nin which the account should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/mnqNatsCredentials:MnqNatsCredentials": {
            "description": "Creates and manages Scaleway Messaging and Queuing NATS credentials.\nFor further information, see\nour [main documentation](https://www.scaleway.com/en/docs/serverless/messaging/reference-content/nats-overview/).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.MnqNatsAccount(\"main\", {name: \"nats-account\"});\nconst mainMnqNatsCredentials = new scaleway.MnqNatsCredentials(\"main\", {accountId: main.id});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.MnqNatsAccount(\"main\", name=\"nats-account\")\nmain_mnq_nats_credentials = scaleway.MnqNatsCredentials(\"main\", account_id=main.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.MnqNatsAccount(\"main\", new()\n    {\n        Name = \"nats-account\",\n    });\n\n    var mainMnqNatsCredentials = new Scaleway.MnqNatsCredentials(\"main\", new()\n    {\n        AccountId = main.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewMnqNatsAccount(ctx, \"main\", \u0026scaleway.MnqNatsAccountArgs{\n\t\t\tName: pulumi.String(\"nats-account\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewMnqNatsCredentials(ctx, \"main\", \u0026scaleway.MnqNatsCredentialsArgs{\n\t\t\tAccountId: main.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.MnqNatsAccount;\nimport com.pulumi.scaleway.MnqNatsAccountArgs;\nimport com.pulumi.scaleway.MnqNatsCredentials;\nimport com.pulumi.scaleway.MnqNatsCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new MnqNatsAccount(\"main\", MnqNatsAccountArgs.builder()\n            .name(\"nats-account\")\n            .build());\n\n        var mainMnqNatsCredentials = new MnqNatsCredentials(\"mainMnqNatsCredentials\", MnqNatsCredentialsArgs.builder()\n            .accountId(main.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:MnqNatsAccount\n    properties:\n      name: nats-account\n  mainMnqNatsCredentials:\n    type: scaleway:MnqNatsCredentials\n    name: main\n    properties:\n      accountId: ${main.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nNamespaces can be imported using `{region}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/mnqNatsCredentials:MnqNatsCredentials main fr-par/11111111111111111111111111111111\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The ID of the NATS account the credentials are generated from\n"
                },
                "file": {
                    "type": "string",
                    "description": "The content of the credentials file.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the NATS credentials.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region\nin which the account exists.\n"
                }
            },
            "required": [
                "accountId",
                "file",
                "name",
                "region"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "The ID of the NATS account the credentials are generated from\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the NATS credentials.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region\nin which the account exists.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accountId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MnqNatsCredentials resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The ID of the NATS account the credentials are generated from\n",
                        "willReplaceOnChanges": true
                    },
                    "file": {
                        "type": "string",
                        "description": "The content of the credentials file.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the NATS credentials.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region\nin which the account exists.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/mnqSns:MnqSns": {
            "description": "Activates Scaleway Messaging and Queuing SNS in a Project.\nFor further information, see\nour [main documentation](https://www.scaleway.com/en/docs/serverless/messaging/reference-content/sns-overview/).\n\n## Example Usage\n\n### Basic\n\nActivate SNS in the default Project\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.MnqSns(\"main\", {});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.MnqSns(\"main\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.MnqSns(\"main\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewMnqSns(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.MnqSns;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new MnqSns(\"main\");\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:MnqSns\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nActivate SNS in a specific Project\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst project = scaleway.getAccountProject({\n    name: \"default\",\n});\n// For specific Project in default region\nconst forProject = new scaleway.MnqSns(\"for_project\", {projectId: project.then(project =\u003e project.id)});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\nproject = scaleway.get_account_project(name=\"default\")\n# For specific Project in default region\nfor_project = scaleway.MnqSns(\"for_project\", project_id=project.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var project = Scaleway.GetAccountProject.Invoke(new()\n    {\n        Name = \"default\",\n    });\n\n    // For specific Project in default region\n    var forProject = new Scaleway.MnqSns(\"for_project\", new()\n    {\n        ProjectId = project.Apply(getAccountProjectResult =\u003e getAccountProjectResult.Id),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := scaleway.LookupAccountProject(ctx, \u0026scaleway.LookupAccountProjectArgs{\n\t\t\tName: pulumi.StringRef(\"default\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// For specific Project in default region\n\t\t_, err = scaleway.NewMnqSns(ctx, \"for_project\", \u0026scaleway.MnqSnsArgs{\n\t\t\tProjectId: pulumi.String(project.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetAccountProjectArgs;\nimport com.pulumi.scaleway.MnqSns;\nimport com.pulumi.scaleway.MnqSnsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var project = ScalewayFunctions.getAccountProject(GetAccountProjectArgs.builder()\n            .name(\"default\")\n            .build());\n\n        // For specific Project in default region\n        var forProject = new MnqSns(\"forProject\", MnqSnsArgs.builder()\n            .projectId(project.applyValue(getAccountProjectResult -\u003e getAccountProjectResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # For specific Project in default region\n  forProject:\n    type: scaleway:MnqSns\n    name: for_project\n    properties:\n      projectId: ${project.id}\nvariables:\n  project:\n    fn::invoke:\n      Function: scaleway:getAccountProject\n      Arguments:\n        name: default\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nSNS status can be imported using `{region}/{project_id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/mnqSns:MnqSns main fr-par/11111111111111111111111111111111\n```\n\n",
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint of the SNS service for this Project.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project in which SNS will be enabled.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region\nin which SNS will be enabled.\n"
                }
            },
            "required": [
                "endpoint",
                "projectId",
                "region"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project in which SNS will be enabled.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region\nin which SNS will be enabled.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MnqSns resources.\n",
                "properties": {
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint of the SNS service for this Project.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project in which SNS will be enabled.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region\nin which SNS will be enabled.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/mnqSnsCredentials:MnqSnsCredentials": {
            "description": "Creates and manages Scaleway Messaging and Queuing SNS credentials.\nFor further information, see\nour [main documentation](https://www.scaleway.com/en/docs/serverless/messaging/reference-content/sns-overview/)\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.MnqSns(\"main\", {});\nconst mainMnqSnsCredentials = new scaleway.MnqSnsCredentials(\"main\", {\n    projectId: main.projectId,\n    name: \"sns-credentials\",\n    permissions: {\n        canManage: false,\n        canReceive: true,\n        canPublish: false,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.MnqSns(\"main\")\nmain_mnq_sns_credentials = scaleway.MnqSnsCredentials(\"main\",\n    project_id=main.project_id,\n    name=\"sns-credentials\",\n    permissions={\n        \"can_manage\": False,\n        \"can_receive\": True,\n        \"can_publish\": False,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.MnqSns(\"main\");\n\n    var mainMnqSnsCredentials = new Scaleway.MnqSnsCredentials(\"main\", new()\n    {\n        ProjectId = main.ProjectId,\n        Name = \"sns-credentials\",\n        Permissions = new Scaleway.Inputs.MnqSnsCredentialsPermissionsArgs\n        {\n            CanManage = false,\n            CanReceive = true,\n            CanPublish = false,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewMnqSns(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewMnqSnsCredentials(ctx, \"main\", \u0026scaleway.MnqSnsCredentialsArgs{\n\t\t\tProjectId: main.ProjectId,\n\t\t\tName:      pulumi.String(\"sns-credentials\"),\n\t\t\tPermissions: \u0026scaleway.MnqSnsCredentialsPermissionsArgs{\n\t\t\t\tCanManage:  pulumi.Bool(false),\n\t\t\t\tCanReceive: pulumi.Bool(true),\n\t\t\t\tCanPublish: pulumi.Bool(false),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.MnqSns;\nimport com.pulumi.scaleway.MnqSnsCredentials;\nimport com.pulumi.scaleway.MnqSnsCredentialsArgs;\nimport com.pulumi.scaleway.inputs.MnqSnsCredentialsPermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new MnqSns(\"main\");\n\n        var mainMnqSnsCredentials = new MnqSnsCredentials(\"mainMnqSnsCredentials\", MnqSnsCredentialsArgs.builder()\n            .projectId(main.projectId())\n            .name(\"sns-credentials\")\n            .permissions(MnqSnsCredentialsPermissionsArgs.builder()\n                .canManage(false)\n                .canReceive(true)\n                .canPublish(false)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:MnqSns\n  mainMnqSnsCredentials:\n    type: scaleway:MnqSnsCredentials\n    name: main\n    properties:\n      projectId: ${main.projectId}\n      name: sns-credentials\n      permissions:\n        canManage: false\n        canReceive: true\n        canPublish: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nSNS credentials can be imported using `{region}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/mnqSnsCredentials:MnqSnsCredentials main fr-par/11111111111111111111111111111111\n```\n\n",
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The ID of the key.\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the SNS credentials.\n"
                },
                "permissions": {
                    "$ref": "#/types/scaleway:index/MnqSnsCredentialsPermissions:MnqSnsCredentialsPermissions",
                    "description": ". List of permissions associated with these credentials. Only one of the following permissions may be set:\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project in which SNS is enabled.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which SNS is enabled.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret value of the key.\n",
                    "secret": true
                }
            },
            "required": [
                "accessKey",
                "name",
                "permissions",
                "projectId",
                "region",
                "secretKey"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The unique name of the SNS credentials.\n"
                },
                "permissions": {
                    "$ref": "#/types/scaleway:index/MnqSnsCredentialsPermissions:MnqSnsCredentialsPermissions",
                    "description": ". List of permissions associated with these credentials. Only one of the following permissions may be set:\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project in which SNS is enabled.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which SNS is enabled.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MnqSnsCredentials resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "The ID of the key.\n",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the SNS credentials.\n"
                    },
                    "permissions": {
                        "$ref": "#/types/scaleway:index/MnqSnsCredentialsPermissions:MnqSnsCredentialsPermissions",
                        "description": ". List of permissions associated with these credentials. Only one of the following permissions may be set:\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the Project in which SNS is enabled.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which SNS is enabled.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "The secret value of the key.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/mnqSnsTopic:MnqSnsTopic": {
            "description": "Manage Scaleway Messaging and queuing SNS topics.\nFor further information, see\nour [main documentation](https://www.scaleway.com/en/docs/serverless/messaging/how-to/create-manage-topics/).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.MnqSns(\"main\", {});\nconst mainMnqSnsCredentials = new scaleway.MnqSnsCredentials(\"main\", {\n    projectId: main.projectId,\n    permissions: {\n        canManage: true,\n    },\n});\nconst topic = new scaleway.MnqSnsTopic(\"topic\", {\n    projectId: main.projectId,\n    name: \"my-topic\",\n    accessKey: mainMnqSnsCredentials.accessKey,\n    secretKey: mainMnqSnsCredentials.secretKey,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.MnqSns(\"main\")\nmain_mnq_sns_credentials = scaleway.MnqSnsCredentials(\"main\",\n    project_id=main.project_id,\n    permissions={\n        \"can_manage\": True,\n    })\ntopic = scaleway.MnqSnsTopic(\"topic\",\n    project_id=main.project_id,\n    name=\"my-topic\",\n    access_key=main_mnq_sns_credentials.access_key,\n    secret_key=main_mnq_sns_credentials.secret_key)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.MnqSns(\"main\");\n\n    var mainMnqSnsCredentials = new Scaleway.MnqSnsCredentials(\"main\", new()\n    {\n        ProjectId = main.ProjectId,\n        Permissions = new Scaleway.Inputs.MnqSnsCredentialsPermissionsArgs\n        {\n            CanManage = true,\n        },\n    });\n\n    var topic = new Scaleway.MnqSnsTopic(\"topic\", new()\n    {\n        ProjectId = main.ProjectId,\n        Name = \"my-topic\",\n        AccessKey = mainMnqSnsCredentials.AccessKey,\n        SecretKey = mainMnqSnsCredentials.SecretKey,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewMnqSns(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainMnqSnsCredentials, err := scaleway.NewMnqSnsCredentials(ctx, \"main\", \u0026scaleway.MnqSnsCredentialsArgs{\n\t\t\tProjectId: main.ProjectId,\n\t\t\tPermissions: \u0026scaleway.MnqSnsCredentialsPermissionsArgs{\n\t\t\t\tCanManage: pulumi.Bool(true),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewMnqSnsTopic(ctx, \"topic\", \u0026scaleway.MnqSnsTopicArgs{\n\t\t\tProjectId: main.ProjectId,\n\t\t\tName:      pulumi.String(\"my-topic\"),\n\t\t\tAccessKey: mainMnqSnsCredentials.AccessKey,\n\t\t\tSecretKey: mainMnqSnsCredentials.SecretKey,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.MnqSns;\nimport com.pulumi.scaleway.MnqSnsCredentials;\nimport com.pulumi.scaleway.MnqSnsCredentialsArgs;\nimport com.pulumi.scaleway.inputs.MnqSnsCredentialsPermissionsArgs;\nimport com.pulumi.scaleway.MnqSnsTopic;\nimport com.pulumi.scaleway.MnqSnsTopicArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new MnqSns(\"main\");\n\n        var mainMnqSnsCredentials = new MnqSnsCredentials(\"mainMnqSnsCredentials\", MnqSnsCredentialsArgs.builder()\n            .projectId(main.projectId())\n            .permissions(MnqSnsCredentialsPermissionsArgs.builder()\n                .canManage(true)\n                .build())\n            .build());\n\n        var topic = new MnqSnsTopic(\"topic\", MnqSnsTopicArgs.builder()\n            .projectId(main.projectId())\n            .name(\"my-topic\")\n            .accessKey(mainMnqSnsCredentials.accessKey())\n            .secretKey(mainMnqSnsCredentials.secretKey())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:MnqSns\n  mainMnqSnsCredentials:\n    type: scaleway:MnqSnsCredentials\n    name: main\n    properties:\n      projectId: ${main.projectId}\n      permissions:\n        canManage: true\n  topic:\n    type: scaleway:MnqSnsTopic\n    properties:\n      projectId: ${main.projectId}\n      name: my-topic\n      accessKey: ${mainMnqSnsCredentials.accessKey}\n      secretKey: ${mainMnqSnsCredentials.secretKey}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nSNS topics can be imported using `{region}/{project-id}/{topic-name}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/mnqSnsTopic:MnqSnsTopic main fr-par/11111111111111111111111111111111/my-topic\n```\n\n",
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The access key of the SNS credentials.\n",
                    "secret": true
                },
                "arn": {
                    "type": "string",
                    "description": "The ARN of the topic\n"
                },
                "contentBasedDeduplication": {
                    "type": "boolean",
                    "description": "Specifies whether to enable content-based deduplication.\n"
                },
                "fifoTopic": {
                    "type": "boolean",
                    "description": "Whether the topic is a FIFO topic. If true, the topic name must end with .fifo.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the SNS topic. Either `name` or `name_prefix` is required. Conflicts with `name_prefix`.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Creates a unique name beginning with the specified prefix. Conflicts with `name`.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owner of the SNS topic, should have format 'project-${project_id}'\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project in which SNS is enabled.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region\nin which SNS is enabled.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key of the SNS credentials.\n",
                    "secret": true
                },
                "snsEndpoint": {
                    "type": "string",
                    "description": "The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.\n"
                }
            },
            "required": [
                "accessKey",
                "arn",
                "contentBasedDeduplication",
                "fifoTopic",
                "name",
                "namePrefix",
                "owner",
                "projectId",
                "region",
                "secretKey"
            ],
            "inputProperties": {
                "accessKey": {
                    "type": "string",
                    "description": "The access key of the SNS credentials.\n",
                    "secret": true
                },
                "contentBasedDeduplication": {
                    "type": "boolean",
                    "description": "Specifies whether to enable content-based deduplication.\n"
                },
                "fifoTopic": {
                    "type": "boolean",
                    "description": "Whether the topic is a FIFO topic. If true, the topic name must end with .fifo.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the SNS topic. Either `name` or `name_prefix` is required. Conflicts with `name_prefix`.\n",
                    "willReplaceOnChanges": true
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Creates a unique name beginning with the specified prefix. Conflicts with `name`.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project in which SNS is enabled.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region\nin which SNS is enabled.\n",
                    "willReplaceOnChanges": true
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key of the SNS credentials.\n",
                    "secret": true
                },
                "snsEndpoint": {
                    "type": "string",
                    "description": "The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.\n"
                }
            },
            "requiredInputs": [
                "accessKey",
                "secretKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MnqSnsTopic resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "The access key of the SNS credentials.\n",
                        "secret": true
                    },
                    "arn": {
                        "type": "string",
                        "description": "The ARN of the topic\n"
                    },
                    "contentBasedDeduplication": {
                        "type": "boolean",
                        "description": "Specifies whether to enable content-based deduplication.\n"
                    },
                    "fifoTopic": {
                        "type": "boolean",
                        "description": "Whether the topic is a FIFO topic. If true, the topic name must end with .fifo.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the SNS topic. Either `name` or `name_prefix` is required. Conflicts with `name_prefix`.\n",
                        "willReplaceOnChanges": true
                    },
                    "namePrefix": {
                        "type": "string",
                        "description": "Creates a unique name beginning with the specified prefix. Conflicts with `name`.\n",
                        "willReplaceOnChanges": true
                    },
                    "owner": {
                        "type": "string",
                        "description": "Owner of the SNS topic, should have format 'project-${project_id}'\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the Project in which SNS is enabled.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region\nin which SNS is enabled.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "The secret key of the SNS credentials.\n",
                        "secret": true
                    },
                    "snsEndpoint": {
                        "type": "string",
                        "description": "The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/mnqSnsTopicSubscription:MnqSnsTopicSubscription": {
            "description": "Manages Scaleway Messaging and Queuing SNS topic subscriptions.\nFor further information, see\nour [main documentation](https://www.scaleway.com/en/docs/serverless/messaging/reference-content/sns-overview/).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\n// For default project in default region\nconst main = new scaleway.MnqSns(\"main\", {});\nconst mainMnqSnsCredentials = new scaleway.MnqSnsCredentials(\"main\", {\n    projectId: main.projectId,\n    permissions: {\n        canManage: true,\n        canPublish: true,\n        canReceive: true,\n    },\n});\nconst topic = new scaleway.MnqSnsTopic(\"topic\", {\n    projectId: main.projectId,\n    name: \"my-topic\",\n    accessKey: mainMnqSnsCredentials.accessKey,\n    secretKey: mainMnqSnsCredentials.secretKey,\n});\nconst mainMnqSnsTopicSubscription = new scaleway.MnqSnsTopicSubscription(\"main\", {\n    projectId: main.projectId,\n    accessKey: mainMnqSnsCredentials.accessKey,\n    secretKey: mainMnqSnsCredentials.secretKey,\n    topicId: topic.id,\n    protocol: \"http\",\n    endpoint: \"http://example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\n# For default project in default region\nmain = scaleway.MnqSns(\"main\")\nmain_mnq_sns_credentials = scaleway.MnqSnsCredentials(\"main\",\n    project_id=main.project_id,\n    permissions={\n        \"can_manage\": True,\n        \"can_publish\": True,\n        \"can_receive\": True,\n    })\ntopic = scaleway.MnqSnsTopic(\"topic\",\n    project_id=main.project_id,\n    name=\"my-topic\",\n    access_key=main_mnq_sns_credentials.access_key,\n    secret_key=main_mnq_sns_credentials.secret_key)\nmain_mnq_sns_topic_subscription = scaleway.MnqSnsTopicSubscription(\"main\",\n    project_id=main.project_id,\n    access_key=main_mnq_sns_credentials.access_key,\n    secret_key=main_mnq_sns_credentials.secret_key,\n    topic_id=topic.id,\n    protocol=\"http\",\n    endpoint=\"http://example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // For default project in default region\n    var main = new Scaleway.MnqSns(\"main\");\n\n    var mainMnqSnsCredentials = new Scaleway.MnqSnsCredentials(\"main\", new()\n    {\n        ProjectId = main.ProjectId,\n        Permissions = new Scaleway.Inputs.MnqSnsCredentialsPermissionsArgs\n        {\n            CanManage = true,\n            CanPublish = true,\n            CanReceive = true,\n        },\n    });\n\n    var topic = new Scaleway.MnqSnsTopic(\"topic\", new()\n    {\n        ProjectId = main.ProjectId,\n        Name = \"my-topic\",\n        AccessKey = mainMnqSnsCredentials.AccessKey,\n        SecretKey = mainMnqSnsCredentials.SecretKey,\n    });\n\n    var mainMnqSnsTopicSubscription = new Scaleway.MnqSnsTopicSubscription(\"main\", new()\n    {\n        ProjectId = main.ProjectId,\n        AccessKey = mainMnqSnsCredentials.AccessKey,\n        SecretKey = mainMnqSnsCredentials.SecretKey,\n        TopicId = topic.Id,\n        Protocol = \"http\",\n        Endpoint = \"http://example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// For default project in default region\n\t\tmain, err := scaleway.NewMnqSns(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainMnqSnsCredentials, err := scaleway.NewMnqSnsCredentials(ctx, \"main\", \u0026scaleway.MnqSnsCredentialsArgs{\n\t\t\tProjectId: main.ProjectId,\n\t\t\tPermissions: \u0026scaleway.MnqSnsCredentialsPermissionsArgs{\n\t\t\t\tCanManage:  pulumi.Bool(true),\n\t\t\t\tCanPublish: pulumi.Bool(true),\n\t\t\t\tCanReceive: pulumi.Bool(true),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttopic, err := scaleway.NewMnqSnsTopic(ctx, \"topic\", \u0026scaleway.MnqSnsTopicArgs{\n\t\t\tProjectId: main.ProjectId,\n\t\t\tName:      pulumi.String(\"my-topic\"),\n\t\t\tAccessKey: mainMnqSnsCredentials.AccessKey,\n\t\t\tSecretKey: mainMnqSnsCredentials.SecretKey,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewMnqSnsTopicSubscription(ctx, \"main\", \u0026scaleway.MnqSnsTopicSubscriptionArgs{\n\t\t\tProjectId: main.ProjectId,\n\t\t\tAccessKey: mainMnqSnsCredentials.AccessKey,\n\t\t\tSecretKey: mainMnqSnsCredentials.SecretKey,\n\t\t\tTopicId:   topic.ID(),\n\t\t\tProtocol:  pulumi.String(\"http\"),\n\t\t\tEndpoint:  pulumi.String(\"http://example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.MnqSns;\nimport com.pulumi.scaleway.MnqSnsCredentials;\nimport com.pulumi.scaleway.MnqSnsCredentialsArgs;\nimport com.pulumi.scaleway.inputs.MnqSnsCredentialsPermissionsArgs;\nimport com.pulumi.scaleway.MnqSnsTopic;\nimport com.pulumi.scaleway.MnqSnsTopicArgs;\nimport com.pulumi.scaleway.MnqSnsTopicSubscription;\nimport com.pulumi.scaleway.MnqSnsTopicSubscriptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // For default project in default region\n        var main = new MnqSns(\"main\");\n\n        var mainMnqSnsCredentials = new MnqSnsCredentials(\"mainMnqSnsCredentials\", MnqSnsCredentialsArgs.builder()\n            .projectId(main.projectId())\n            .permissions(MnqSnsCredentialsPermissionsArgs.builder()\n                .canManage(true)\n                .canPublish(true)\n                .canReceive(true)\n                .build())\n            .build());\n\n        var topic = new MnqSnsTopic(\"topic\", MnqSnsTopicArgs.builder()\n            .projectId(main.projectId())\n            .name(\"my-topic\")\n            .accessKey(mainMnqSnsCredentials.accessKey())\n            .secretKey(mainMnqSnsCredentials.secretKey())\n            .build());\n\n        var mainMnqSnsTopicSubscription = new MnqSnsTopicSubscription(\"mainMnqSnsTopicSubscription\", MnqSnsTopicSubscriptionArgs.builder()\n            .projectId(main.projectId())\n            .accessKey(mainMnqSnsCredentials.accessKey())\n            .secretKey(mainMnqSnsCredentials.secretKey())\n            .topicId(topic.id())\n            .protocol(\"http\")\n            .endpoint(\"http://example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # For default project in default region\n  main:\n    type: scaleway:MnqSns\n  mainMnqSnsCredentials:\n    type: scaleway:MnqSnsCredentials\n    name: main\n    properties:\n      projectId: ${main.projectId}\n      permissions:\n        canManage: true\n        canPublish: true\n        canReceive: true\n  topic:\n    type: scaleway:MnqSnsTopic\n    properties:\n      projectId: ${main.projectId}\n      name: my-topic\n      accessKey: ${mainMnqSnsCredentials.accessKey}\n      secretKey: ${mainMnqSnsCredentials.secretKey}\n  mainMnqSnsTopicSubscription:\n    type: scaleway:MnqSnsTopicSubscription\n    name: main\n    properties:\n      projectId: ${main.projectId}\n      accessKey: ${mainMnqSnsCredentials.accessKey}\n      secretKey: ${mainMnqSnsCredentials.secretKey}\n      topicId: ${topic.id}\n      protocol: http\n      endpoint: http://example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nSNS topic subscriptions can be imported using `{region}/{project-id}/{topic-name}/{subscription-id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/mnqSnsTopicSubscription:MnqSnsTopicSubscription main fr-par/11111111111111111111111111111111/my-topic/11111111111111111111111111111111\n```\n\n",
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The access key of the SNS credentials.\n",
                    "secret": true
                },
                "arn": {
                    "type": "string",
                    "description": "The ARN of the topic subscription\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Endpoint of the subscription\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project in which SNS is enabled.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol of the SNS topic subscription.\n"
                },
                "redrivePolicy": {
                    "type": "boolean",
                    "description": "Activate JSON redrive policy.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region\nin which SNS is enabled.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key of the SNS credentials.\n",
                    "secret": true
                },
                "snsEndpoint": {
                    "type": "string",
                    "description": "The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.\n"
                },
                "topicArn": {
                    "type": "string",
                    "description": "The ARN of the topic. Either `topic_id` or `topic_arn` is required.\n"
                },
                "topicId": {
                    "type": "string",
                    "description": "The ID of the topic. Either `topic_id` or `topic_arn` is required. Conflicts with `topic_arn`.\n"
                }
            },
            "required": [
                "accessKey",
                "arn",
                "projectId",
                "protocol",
                "redrivePolicy",
                "region",
                "secretKey"
            ],
            "inputProperties": {
                "accessKey": {
                    "type": "string",
                    "description": "The access key of the SNS credentials.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "endpoint": {
                    "type": "string",
                    "description": "Endpoint of the subscription\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project in which SNS is enabled.\n",
                    "willReplaceOnChanges": true
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol of the SNS topic subscription.\n",
                    "willReplaceOnChanges": true
                },
                "redrivePolicy": {
                    "type": "boolean",
                    "description": "Activate JSON redrive policy.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region\nin which SNS is enabled.\n",
                    "willReplaceOnChanges": true
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key of the SNS credentials.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "snsEndpoint": {
                    "type": "string",
                    "description": "The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.\n",
                    "willReplaceOnChanges": true
                },
                "topicArn": {
                    "type": "string",
                    "description": "The ARN of the topic. Either `topic_id` or `topic_arn` is required.\n",
                    "willReplaceOnChanges": true
                },
                "topicId": {
                    "type": "string",
                    "description": "The ID of the topic. Either `topic_id` or `topic_arn` is required. Conflicts with `topic_arn`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accessKey",
                "protocol",
                "secretKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MnqSnsTopicSubscription resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "The access key of the SNS credentials.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "arn": {
                        "type": "string",
                        "description": "The ARN of the topic subscription\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "Endpoint of the subscription\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the Project in which SNS is enabled.\n",
                        "willReplaceOnChanges": true
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Protocol of the SNS topic subscription.\n",
                        "willReplaceOnChanges": true
                    },
                    "redrivePolicy": {
                        "type": "boolean",
                        "description": "Activate JSON redrive policy.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region\nin which SNS is enabled.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "The secret key of the SNS credentials.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "snsEndpoint": {
                        "type": "string",
                        "description": "The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.\n",
                        "willReplaceOnChanges": true
                    },
                    "topicArn": {
                        "type": "string",
                        "description": "The ARN of the topic. Either `topic_id` or `topic_arn` is required.\n",
                        "willReplaceOnChanges": true
                    },
                    "topicId": {
                        "type": "string",
                        "description": "The ID of the topic. Either `topic_id` or `topic_arn` is required. Conflicts with `topic_arn`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/mnqSqs:MnqSqs": {
            "description": "Activate Scaleway Messaging and Queuing SQS in a Project.\nFor further information, see\nour [main documentation](https://www.scaleway.com/en/docs/serverless/messaging/reference-content/sqs-overview/).\n\n## Example Usage\n\n### Basic\n\nActivate SQS in the default Project\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.MnqSqs(\"main\", {});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.MnqSqs(\"main\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.MnqSqs(\"main\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewMnqSqs(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.MnqSqs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new MnqSqs(\"main\");\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:MnqSqs\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nActivate SQS for a specific project\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst project = scaleway.getAccountProject({\n    name: \"default\",\n});\nconst forProject = new scaleway.MnqSqs(\"for_project\", {projectId: project.then(project =\u003e project.id)});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\nproject = scaleway.get_account_project(name=\"default\")\nfor_project = scaleway.MnqSqs(\"for_project\", project_id=project.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var project = Scaleway.GetAccountProject.Invoke(new()\n    {\n        Name = \"default\",\n    });\n\n    var forProject = new Scaleway.MnqSqs(\"for_project\", new()\n    {\n        ProjectId = project.Apply(getAccountProjectResult =\u003e getAccountProjectResult.Id),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := scaleway.LookupAccountProject(ctx, \u0026scaleway.LookupAccountProjectArgs{\n\t\t\tName: pulumi.StringRef(\"default\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewMnqSqs(ctx, \"for_project\", \u0026scaleway.MnqSqsArgs{\n\t\t\tProjectId: pulumi.String(project.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetAccountProjectArgs;\nimport com.pulumi.scaleway.MnqSqs;\nimport com.pulumi.scaleway.MnqSqsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var project = ScalewayFunctions.getAccountProject(GetAccountProjectArgs.builder()\n            .name(\"default\")\n            .build());\n\n        var forProject = new MnqSqs(\"forProject\", MnqSqsArgs.builder()\n            .projectId(project.applyValue(getAccountProjectResult -\u003e getAccountProjectResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  forProject:\n    type: scaleway:MnqSqs\n    name: for_project\n    properties:\n      projectId: ${project.id}\nvariables:\n  project:\n    fn::invoke:\n      Function: scaleway:getAccountProject\n      Arguments:\n        name: default\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nSQS status can be imported using the `{region}/{project_id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/mnqSqs:MnqSqs main fr-par/11111111111111111111111111111111\n```\n\n",
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint of the SQS service for this Project.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project in which SQS will be enabled.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region\nin which SQS will be enabled.\n"
                }
            },
            "required": [
                "endpoint",
                "projectId",
                "region"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project in which SQS will be enabled.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region\nin which SQS will be enabled.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MnqSqs resources.\n",
                "properties": {
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint of the SQS service for this Project.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the Project in which SQS will be enabled.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region\nin which SQS will be enabled.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/mnqSqsCredentials:MnqSqsCredentials": {
            "description": "Creates and manages Scaleway Messaging and Queuing SQS credentials.\nFor further information, see\nour [main documentation](https://www.scaleway.com/en/docs/serverless/messaging/reference-content/sqs-overview/)\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.MnqSqs(\"main\", {});\nconst mainMnqSqsCredentials = new scaleway.MnqSqsCredentials(\"main\", {\n    projectId: main.projectId,\n    name: \"sqs-credentials\",\n    permissions: {\n        canManage: false,\n        canReceive: true,\n        canPublish: false,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.MnqSqs(\"main\")\nmain_mnq_sqs_credentials = scaleway.MnqSqsCredentials(\"main\",\n    project_id=main.project_id,\n    name=\"sqs-credentials\",\n    permissions={\n        \"can_manage\": False,\n        \"can_receive\": True,\n        \"can_publish\": False,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.MnqSqs(\"main\");\n\n    var mainMnqSqsCredentials = new Scaleway.MnqSqsCredentials(\"main\", new()\n    {\n        ProjectId = main.ProjectId,\n        Name = \"sqs-credentials\",\n        Permissions = new Scaleway.Inputs.MnqSqsCredentialsPermissionsArgs\n        {\n            CanManage = false,\n            CanReceive = true,\n            CanPublish = false,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewMnqSqs(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewMnqSqsCredentials(ctx, \"main\", \u0026scaleway.MnqSqsCredentialsArgs{\n\t\t\tProjectId: main.ProjectId,\n\t\t\tName:      pulumi.String(\"sqs-credentials\"),\n\t\t\tPermissions: \u0026scaleway.MnqSqsCredentialsPermissionsArgs{\n\t\t\t\tCanManage:  pulumi.Bool(false),\n\t\t\t\tCanReceive: pulumi.Bool(true),\n\t\t\t\tCanPublish: pulumi.Bool(false),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.MnqSqs;\nimport com.pulumi.scaleway.MnqSqsCredentials;\nimport com.pulumi.scaleway.MnqSqsCredentialsArgs;\nimport com.pulumi.scaleway.inputs.MnqSqsCredentialsPermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new MnqSqs(\"main\");\n\n        var mainMnqSqsCredentials = new MnqSqsCredentials(\"mainMnqSqsCredentials\", MnqSqsCredentialsArgs.builder()\n            .projectId(main.projectId())\n            .name(\"sqs-credentials\")\n            .permissions(MnqSqsCredentialsPermissionsArgs.builder()\n                .canManage(false)\n                .canReceive(true)\n                .canPublish(false)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:MnqSqs\n  mainMnqSqsCredentials:\n    type: scaleway:MnqSqsCredentials\n    name: main\n    properties:\n      projectId: ${main.projectId}\n      name: sqs-credentials\n      permissions:\n        canManage: false\n        canReceive: true\n        canPublish: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nSQS credentials can be imported using `{region}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/mnqSqsCredentials:MnqSqsCredentials main fr-par/11111111111111111111111111111111\n```\n\n",
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The ID of the key.\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the SQS credentials.\n"
                },
                "permissions": {
                    "$ref": "#/types/scaleway:index/MnqSqsCredentialsPermissions:MnqSqsCredentialsPermissions",
                    "description": ". List of permissions associated with these credentials. Only one of the following permissions may be set:\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project in which SQS is enabled.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which SQS is enabled.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret value of the key.\n",
                    "secret": true
                }
            },
            "required": [
                "accessKey",
                "name",
                "permissions",
                "projectId",
                "region",
                "secretKey"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The unique name of the SQS credentials.\n"
                },
                "permissions": {
                    "$ref": "#/types/scaleway:index/MnqSqsCredentialsPermissions:MnqSqsCredentialsPermissions",
                    "description": ". List of permissions associated with these credentials. Only one of the following permissions may be set:\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project in which SQS is enabled.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which SQS is enabled.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MnqSqsCredentials resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "The ID of the key.\n",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the SQS credentials.\n"
                    },
                    "permissions": {
                        "$ref": "#/types/scaleway:index/MnqSqsCredentialsPermissions:MnqSqsCredentialsPermissions",
                        "description": ". List of permissions associated with these credentials. Only one of the following permissions may be set:\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the Project in which SQS is enabled.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which SQS is enabled.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "The secret value of the key.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/mnqSqsQueue:MnqSqsQueue": {
            "description": "Creates and manages Scaleway Messaging and Queuing SQS queues.\nFor further information, see\nour [main documentation](https://www.scaleway.com/en/docs/serverless/messaging/how-to/create-manage-queues/).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.MnqSqs(\"main\", {});\nconst mainMnqSqsCredentials = new scaleway.MnqSqsCredentials(\"main\", {\n    projectId: main.projectId,\n    name: \"sqs-credentials\",\n    permissions: {\n        canManage: true,\n        canReceive: false,\n        canPublish: false,\n    },\n});\nconst mainMnqSqsQueue = new scaleway.MnqSqsQueue(\"main\", {\n    projectId: main.projectId,\n    name: \"my-queue\",\n    sqsEndpoint: main.endpoint,\n    accessKey: mainMnqSqsCredentials.accessKey,\n    secretKey: mainMnqSqsCredentials.secretKey,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.MnqSqs(\"main\")\nmain_mnq_sqs_credentials = scaleway.MnqSqsCredentials(\"main\",\n    project_id=main.project_id,\n    name=\"sqs-credentials\",\n    permissions={\n        \"can_manage\": True,\n        \"can_receive\": False,\n        \"can_publish\": False,\n    })\nmain_mnq_sqs_queue = scaleway.MnqSqsQueue(\"main\",\n    project_id=main.project_id,\n    name=\"my-queue\",\n    sqs_endpoint=main.endpoint,\n    access_key=main_mnq_sqs_credentials.access_key,\n    secret_key=main_mnq_sqs_credentials.secret_key)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.MnqSqs(\"main\");\n\n    var mainMnqSqsCredentials = new Scaleway.MnqSqsCredentials(\"main\", new()\n    {\n        ProjectId = main.ProjectId,\n        Name = \"sqs-credentials\",\n        Permissions = new Scaleway.Inputs.MnqSqsCredentialsPermissionsArgs\n        {\n            CanManage = true,\n            CanReceive = false,\n            CanPublish = false,\n        },\n    });\n\n    var mainMnqSqsQueue = new Scaleway.MnqSqsQueue(\"main\", new()\n    {\n        ProjectId = main.ProjectId,\n        Name = \"my-queue\",\n        SqsEndpoint = main.Endpoint,\n        AccessKey = mainMnqSqsCredentials.AccessKey,\n        SecretKey = mainMnqSqsCredentials.SecretKey,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewMnqSqs(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainMnqSqsCredentials, err := scaleway.NewMnqSqsCredentials(ctx, \"main\", \u0026scaleway.MnqSqsCredentialsArgs{\n\t\t\tProjectId: main.ProjectId,\n\t\t\tName:      pulumi.String(\"sqs-credentials\"),\n\t\t\tPermissions: \u0026scaleway.MnqSqsCredentialsPermissionsArgs{\n\t\t\t\tCanManage:  pulumi.Bool(true),\n\t\t\t\tCanReceive: pulumi.Bool(false),\n\t\t\t\tCanPublish: pulumi.Bool(false),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewMnqSqsQueue(ctx, \"main\", \u0026scaleway.MnqSqsQueueArgs{\n\t\t\tProjectId:   main.ProjectId,\n\t\t\tName:        pulumi.String(\"my-queue\"),\n\t\t\tSqsEndpoint: main.Endpoint,\n\t\t\tAccessKey:   mainMnqSqsCredentials.AccessKey,\n\t\t\tSecretKey:   mainMnqSqsCredentials.SecretKey,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.MnqSqs;\nimport com.pulumi.scaleway.MnqSqsCredentials;\nimport com.pulumi.scaleway.MnqSqsCredentialsArgs;\nimport com.pulumi.scaleway.inputs.MnqSqsCredentialsPermissionsArgs;\nimport com.pulumi.scaleway.MnqSqsQueue;\nimport com.pulumi.scaleway.MnqSqsQueueArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new MnqSqs(\"main\");\n\n        var mainMnqSqsCredentials = new MnqSqsCredentials(\"mainMnqSqsCredentials\", MnqSqsCredentialsArgs.builder()\n            .projectId(main.projectId())\n            .name(\"sqs-credentials\")\n            .permissions(MnqSqsCredentialsPermissionsArgs.builder()\n                .canManage(true)\n                .canReceive(false)\n                .canPublish(false)\n                .build())\n            .build());\n\n        var mainMnqSqsQueue = new MnqSqsQueue(\"mainMnqSqsQueue\", MnqSqsQueueArgs.builder()\n            .projectId(main.projectId())\n            .name(\"my-queue\")\n            .sqsEndpoint(main.endpoint())\n            .accessKey(mainMnqSqsCredentials.accessKey())\n            .secretKey(mainMnqSqsCredentials.secretKey())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:MnqSqs\n  mainMnqSqsCredentials:\n    type: scaleway:MnqSqsCredentials\n    name: main\n    properties:\n      projectId: ${main.projectId}\n      name: sqs-credentials\n      permissions:\n        canManage: true\n        canReceive: false\n        canPublish: false\n  mainMnqSqsQueue:\n    type: scaleway:MnqSqsQueue\n    name: main\n    properties:\n      projectId: ${main.projectId}\n      name: my-queue\n      sqsEndpoint: ${main.endpoint}\n      accessKey: ${mainMnqSqsCredentials.accessKey}\n      secretKey: ${mainMnqSqsCredentials.secretKey}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The access key of the SQS queue.\n",
                    "secret": true
                },
                "contentBasedDeduplication": {
                    "type": "boolean",
                    "description": "Specifies whether to enable content-based deduplication. Defaults to `false`.\n"
                },
                "fifoQueue": {
                    "type": "boolean",
                    "description": "Whether the queue is a FIFO queue. If true, the queue name must end with .fifo. Defaults to `false`.\n"
                },
                "messageMaxAge": {
                    "type": "integer",
                    "description": "The number of seconds the queue retains a message. Must be between 60 and 1_209_600. Defaults to 345_600.\n"
                },
                "messageMaxSize": {
                    "type": "integer",
                    "description": "The maximum size of a message. Should be in bytes. Must be between 1024 and 262_144. Defaults to 262_144.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the SQS queue. Either `name` or `name_prefix` is required. Conflicts with `name_prefix`.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Creates a unique name beginning with the specified prefix. Conflicts with `name`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project in which SQS is enabled.\n"
                },
                "receiveWaitTimeSeconds": {
                    "type": "integer",
                    "description": "The number of seconds to wait for a message to arrive in the queue before returning. Must be between 0 and 20. Defaults to 0.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which SQS is enabled.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key of the SQS queue.\n",
                    "secret": true
                },
                "sqsEndpoint": {
                    "type": "string",
                    "description": "The endpoint of the SQS queue. Can contain a {region} placeholder. Defaults to `https://sqs.mnq.{region}.scaleway.com`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the queue.\n"
                },
                "visibilityTimeoutSeconds": {
                    "type": "integer",
                    "description": "The number of seconds a message is hidden from other consumers. Must be between 0 and 43_200. Defaults to 30.\n"
                }
            },
            "required": [
                "accessKey",
                "contentBasedDeduplication",
                "fifoQueue",
                "name",
                "namePrefix",
                "projectId",
                "region",
                "secretKey",
                "url"
            ],
            "inputProperties": {
                "accessKey": {
                    "type": "string",
                    "description": "The access key of the SQS queue.\n",
                    "secret": true
                },
                "contentBasedDeduplication": {
                    "type": "boolean",
                    "description": "Specifies whether to enable content-based deduplication. Defaults to `false`.\n"
                },
                "fifoQueue": {
                    "type": "boolean",
                    "description": "Whether the queue is a FIFO queue. If true, the queue name must end with .fifo. Defaults to `false`.\n"
                },
                "messageMaxAge": {
                    "type": "integer",
                    "description": "The number of seconds the queue retains a message. Must be between 60 and 1_209_600. Defaults to 345_600.\n"
                },
                "messageMaxSize": {
                    "type": "integer",
                    "description": "The maximum size of a message. Should be in bytes. Must be between 1024 and 262_144. Defaults to 262_144.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the SQS queue. Either `name` or `name_prefix` is required. Conflicts with `name_prefix`.\n",
                    "willReplaceOnChanges": true
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Creates a unique name beginning with the specified prefix. Conflicts with `name`.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project in which SQS is enabled.\n",
                    "willReplaceOnChanges": true
                },
                "receiveWaitTimeSeconds": {
                    "type": "integer",
                    "description": "The number of seconds to wait for a message to arrive in the queue before returning. Must be between 0 and 20. Defaults to 0.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which SQS is enabled.\n",
                    "willReplaceOnChanges": true
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key of the SQS queue.\n",
                    "secret": true
                },
                "sqsEndpoint": {
                    "type": "string",
                    "description": "The endpoint of the SQS queue. Can contain a {region} placeholder. Defaults to `https://sqs.mnq.{region}.scaleway.com`.\n"
                },
                "visibilityTimeoutSeconds": {
                    "type": "integer",
                    "description": "The number of seconds a message is hidden from other consumers. Must be between 0 and 43_200. Defaults to 30.\n"
                }
            },
            "requiredInputs": [
                "accessKey",
                "secretKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MnqSqsQueue resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "The access key of the SQS queue.\n",
                        "secret": true
                    },
                    "contentBasedDeduplication": {
                        "type": "boolean",
                        "description": "Specifies whether to enable content-based deduplication. Defaults to `false`.\n"
                    },
                    "fifoQueue": {
                        "type": "boolean",
                        "description": "Whether the queue is a FIFO queue. If true, the queue name must end with .fifo. Defaults to `false`.\n"
                    },
                    "messageMaxAge": {
                        "type": "integer",
                        "description": "The number of seconds the queue retains a message. Must be between 60 and 1_209_600. Defaults to 345_600.\n"
                    },
                    "messageMaxSize": {
                        "type": "integer",
                        "description": "The maximum size of a message. Should be in bytes. Must be between 1024 and 262_144. Defaults to 262_144.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the SQS queue. Either `name` or `name_prefix` is required. Conflicts with `name_prefix`.\n",
                        "willReplaceOnChanges": true
                    },
                    "namePrefix": {
                        "type": "string",
                        "description": "Creates a unique name beginning with the specified prefix. Conflicts with `name`.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the Project in which SQS is enabled.\n",
                        "willReplaceOnChanges": true
                    },
                    "receiveWaitTimeSeconds": {
                        "type": "integer",
                        "description": "The number of seconds to wait for a message to arrive in the queue before returning. Must be between 0 and 20. Defaults to 0.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which SQS is enabled.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "The secret key of the SQS queue.\n",
                        "secret": true
                    },
                    "sqsEndpoint": {
                        "type": "string",
                        "description": "The endpoint of the SQS queue. Can contain a {region} placeholder. Defaults to `https://sqs.mnq.{region}.scaleway.com`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the queue.\n"
                    },
                    "visibilityTimeoutSeconds": {
                        "type": "integer",
                        "description": "The number of seconds a message is hidden from other consumers. Must be between 0 and 43_200. Defaults to 30.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/objectBucket:ObjectBucket": {
            "description": "The `scaleway.ObjectBucket` resource allows you to create and manage buckets for [Scaleway Object storage](https://www.scaleway.com/en/docs/storage/object/).\n\nRefer to the [dedicated documentation](https://www.scaleway.com/en/docs/storage/object/how-to/create-a-bucket/) for more information on Object Storage buckets.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst someBucket = new scaleway.ObjectBucket(\"some_bucket\", {\n    name: \"some-unique-name\",\n    tags: {\n        key: \"value\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nsome_bucket = scaleway.ObjectBucket(\"some_bucket\",\n    name=\"some-unique-name\",\n    tags={\n        \"key\": \"value\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var someBucket = new Scaleway.ObjectBucket(\"some_bucket\", new()\n    {\n        Name = \"some-unique-name\",\n        Tags = \n        {\n            { \"key\", \"value\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewObjectBucket(ctx, \"some_bucket\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tName: pulumi.String(\"some-unique-name\"),\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"key\": pulumi.String(\"value\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var someBucket = new ObjectBucket(\"someBucket\", ObjectBucketArgs.builder()\n            .name(\"some-unique-name\")\n            .tags(Map.of(\"key\", \"value\"))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  someBucket:\n    type: scaleway:ObjectBucket\n    name: some_bucket\n    properties:\n      name: some-unique-name\n      tags:\n        key: value\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Creating the bucket in a specific project\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst someBucket = new scaleway.ObjectBucket(\"some_bucket\", {\n    name: \"some-unique-name\",\n    projectId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nsome_bucket = scaleway.ObjectBucket(\"some_bucket\",\n    name=\"some-unique-name\",\n    project_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var someBucket = new Scaleway.ObjectBucket(\"some_bucket\", new()\n    {\n        Name = \"some-unique-name\",\n        ProjectId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewObjectBucket(ctx, \"some_bucket\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tName:      pulumi.String(\"some-unique-name\"),\n\t\t\tProjectId: pulumi.String(\"11111111-1111-1111-1111-111111111111\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var someBucket = new ObjectBucket(\"someBucket\", ObjectBucketArgs.builder()\n            .name(\"some-unique-name\")\n            .projectId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  someBucket:\n    type: scaleway:ObjectBucket\n    name: some_bucket\n    properties:\n      name: some-unique-name\n      projectId: 11111111-1111-1111-1111-111111111111\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Using object lifecycle\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.ObjectBucket(\"main\", {\n    name: \"mybuckectid\",\n    region: \"fr-par\",\n    lifecycleRules: [\n        {\n            id: \"id1\",\n            prefix: \"path1/\",\n            enabled: true,\n            expiration: {\n                days: 365,\n            },\n            transitions: [{\n                days: 120,\n                storageClass: \"GLACIER\",\n            }],\n        },\n        {\n            id: \"id2\",\n            prefix: \"path2/\",\n            enabled: true,\n            expiration: {\n                days: 50,\n            },\n        },\n        {\n            id: \"id3\",\n            prefix: \"path3/\",\n            enabled: false,\n            tags: {\n                tagKey: \"tagValue\",\n                terraform: \"hashicorp\",\n            },\n            expiration: {\n                days: 1,\n            },\n        },\n        {\n            id: \"id4\",\n            enabled: true,\n            tags: {\n                tag1: \"value1\",\n            },\n            transitions: [{\n                days: 1,\n                storageClass: \"GLACIER\",\n            }],\n        },\n        {\n            enabled: true,\n            abortIncompleteMultipartUploadDays: 30,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.ObjectBucket(\"main\",\n    name=\"mybuckectid\",\n    region=\"fr-par\",\n    lifecycle_rules=[\n        {\n            \"id\": \"id1\",\n            \"prefix\": \"path1/\",\n            \"enabled\": True,\n            \"expiration\": {\n                \"days\": 365,\n            },\n            \"transitions\": [{\n                \"days\": 120,\n                \"storage_class\": \"GLACIER\",\n            }],\n        },\n        {\n            \"id\": \"id2\",\n            \"prefix\": \"path2/\",\n            \"enabled\": True,\n            \"expiration\": {\n                \"days\": 50,\n            },\n        },\n        {\n            \"id\": \"id3\",\n            \"prefix\": \"path3/\",\n            \"enabled\": False,\n            \"tags\": {\n                \"tag_key\": \"tagValue\",\n                \"terraform\": \"hashicorp\",\n            },\n            \"expiration\": {\n                \"days\": 1,\n            },\n        },\n        {\n            \"id\": \"id4\",\n            \"enabled\": True,\n            \"tags\": {\n                \"tag1\": \"value1\",\n            },\n            \"transitions\": [{\n                \"days\": 1,\n                \"storage_class\": \"GLACIER\",\n            }],\n        },\n        {\n            \"enabled\": True,\n            \"abort_incomplete_multipart_upload_days\": 30,\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.ObjectBucket(\"main\", new()\n    {\n        Name = \"mybuckectid\",\n        Region = \"fr-par\",\n        LifecycleRules = new[]\n        {\n            new Scaleway.Inputs.ObjectBucketLifecycleRuleArgs\n            {\n                Id = \"id1\",\n                Prefix = \"path1/\",\n                Enabled = true,\n                Expiration = new Scaleway.Inputs.ObjectBucketLifecycleRuleExpirationArgs\n                {\n                    Days = 365,\n                },\n                Transitions = new[]\n                {\n                    new Scaleway.Inputs.ObjectBucketLifecycleRuleTransitionArgs\n                    {\n                        Days = 120,\n                        StorageClass = \"GLACIER\",\n                    },\n                },\n            },\n            new Scaleway.Inputs.ObjectBucketLifecycleRuleArgs\n            {\n                Id = \"id2\",\n                Prefix = \"path2/\",\n                Enabled = true,\n                Expiration = new Scaleway.Inputs.ObjectBucketLifecycleRuleExpirationArgs\n                {\n                    Days = 50,\n                },\n            },\n            new Scaleway.Inputs.ObjectBucketLifecycleRuleArgs\n            {\n                Id = \"id3\",\n                Prefix = \"path3/\",\n                Enabled = false,\n                Tags = \n                {\n                    { \"tagKey\", \"tagValue\" },\n                    { \"terraform\", \"hashicorp\" },\n                },\n                Expiration = new Scaleway.Inputs.ObjectBucketLifecycleRuleExpirationArgs\n                {\n                    Days = 1,\n                },\n            },\n            new Scaleway.Inputs.ObjectBucketLifecycleRuleArgs\n            {\n                Id = \"id4\",\n                Enabled = true,\n                Tags = \n                {\n                    { \"tag1\", \"value1\" },\n                },\n                Transitions = new[]\n                {\n                    new Scaleway.Inputs.ObjectBucketLifecycleRuleTransitionArgs\n                    {\n                        Days = 1,\n                        StorageClass = \"GLACIER\",\n                    },\n                },\n            },\n            new Scaleway.Inputs.ObjectBucketLifecycleRuleArgs\n            {\n                Enabled = true,\n                AbortIncompleteMultipartUploadDays = 30,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewObjectBucket(ctx, \"main\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tName:   pulumi.String(\"mybuckectid\"),\n\t\t\tRegion: pulumi.String(\"fr-par\"),\n\t\t\tLifecycleRules: scaleway.ObjectBucketLifecycleRuleArray{\n\t\t\t\t\u0026scaleway.ObjectBucketLifecycleRuleArgs{\n\t\t\t\t\tId:      pulumi.String(\"id1\"),\n\t\t\t\t\tPrefix:  pulumi.String(\"path1/\"),\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\tExpiration: \u0026scaleway.ObjectBucketLifecycleRuleExpirationArgs{\n\t\t\t\t\t\tDays: pulumi.Int(365),\n\t\t\t\t\t},\n\t\t\t\t\tTransitions: scaleway.ObjectBucketLifecycleRuleTransitionArray{\n\t\t\t\t\t\t\u0026scaleway.ObjectBucketLifecycleRuleTransitionArgs{\n\t\t\t\t\t\t\tDays:         pulumi.Int(120),\n\t\t\t\t\t\t\tStorageClass: pulumi.String(\"GLACIER\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026scaleway.ObjectBucketLifecycleRuleArgs{\n\t\t\t\t\tId:      pulumi.String(\"id2\"),\n\t\t\t\t\tPrefix:  pulumi.String(\"path2/\"),\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\tExpiration: \u0026scaleway.ObjectBucketLifecycleRuleExpirationArgs{\n\t\t\t\t\t\tDays: pulumi.Int(50),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026scaleway.ObjectBucketLifecycleRuleArgs{\n\t\t\t\t\tId:      pulumi.String(\"id3\"),\n\t\t\t\t\tPrefix:  pulumi.String(\"path3/\"),\n\t\t\t\t\tEnabled: pulumi.Bool(false),\n\t\t\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\t\t\"tagKey\":    pulumi.String(\"tagValue\"),\n\t\t\t\t\t\t\"terraform\": pulumi.String(\"hashicorp\"),\n\t\t\t\t\t},\n\t\t\t\t\tExpiration: \u0026scaleway.ObjectBucketLifecycleRuleExpirationArgs{\n\t\t\t\t\t\tDays: pulumi.Int(1),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026scaleway.ObjectBucketLifecycleRuleArgs{\n\t\t\t\t\tId:      pulumi.String(\"id4\"),\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\t\t\"tag1\": pulumi.String(\"value1\"),\n\t\t\t\t\t},\n\t\t\t\t\tTransitions: scaleway.ObjectBucketLifecycleRuleTransitionArray{\n\t\t\t\t\t\t\u0026scaleway.ObjectBucketLifecycleRuleTransitionArgs{\n\t\t\t\t\t\t\tDays:         pulumi.Int(1),\n\t\t\t\t\t\t\tStorageClass: pulumi.String(\"GLACIER\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026scaleway.ObjectBucketLifecycleRuleArgs{\n\t\t\t\t\tEnabled:                            pulumi.Bool(true),\n\t\t\t\t\tAbortIncompleteMultipartUploadDays: pulumi.Int(30),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketArgs;\nimport com.pulumi.scaleway.inputs.ObjectBucketLifecycleRuleArgs;\nimport com.pulumi.scaleway.inputs.ObjectBucketLifecycleRuleExpirationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new ObjectBucket(\"main\", ObjectBucketArgs.builder()\n            .name(\"mybuckectid\")\n            .region(\"fr-par\")\n            .lifecycleRules(            \n                ObjectBucketLifecycleRuleArgs.builder()\n                    .id(\"id1\")\n                    .prefix(\"path1/\")\n                    .enabled(true)\n                    .expiration(ObjectBucketLifecycleRuleExpirationArgs.builder()\n                        .days(365)\n                        .build())\n                    .transitions(ObjectBucketLifecycleRuleTransitionArgs.builder()\n                        .days(120)\n                        .storageClass(\"GLACIER\")\n                        .build())\n                    .build(),\n                ObjectBucketLifecycleRuleArgs.builder()\n                    .id(\"id2\")\n                    .prefix(\"path2/\")\n                    .enabled(true)\n                    .expiration(ObjectBucketLifecycleRuleExpirationArgs.builder()\n                        .days(\"50\")\n                        .build())\n                    .build(),\n                ObjectBucketLifecycleRuleArgs.builder()\n                    .id(\"id3\")\n                    .prefix(\"path3/\")\n                    .enabled(false)\n                    .tags(Map.ofEntries(\n                        Map.entry(\"tagKey\", \"tagValue\"),\n                        Map.entry(\"terraform\", \"hashicorp\")\n                    ))\n                    .expiration(ObjectBucketLifecycleRuleExpirationArgs.builder()\n                        .days(\"1\")\n                        .build())\n                    .build(),\n                ObjectBucketLifecycleRuleArgs.builder()\n                    .id(\"id4\")\n                    .enabled(true)\n                    .tags(Map.of(\"tag1\", \"value1\"))\n                    .transitions(ObjectBucketLifecycleRuleTransitionArgs.builder()\n                        .days(1)\n                        .storageClass(\"GLACIER\")\n                        .build())\n                    .build(),\n                ObjectBucketLifecycleRuleArgs.builder()\n                    .enabled(true)\n                    .abortIncompleteMultipartUploadDays(30)\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:ObjectBucket\n    properties:\n      name: mybuckectid\n      region: fr-par\n      lifecycleRules:\n        - id: id1\n          prefix: path1/\n          enabled: true\n          expiration:\n            days: 365\n          transitions:\n            - days: 120\n              storageClass: GLACIER\n        - id: id2\n          prefix: path2/\n          enabled: true\n          expiration:\n            days: '50'\n        - id: id3\n          prefix: path3/\n          enabled: false\n          tags:\n            tagKey: tagValue\n            terraform: hashicorp\n          expiration:\n            days: '1'\n        - id: id4\n          enabled: true\n          tags:\n            tag1: value1\n          transitions:\n            - days: 1\n              storageClass: GLACIER\n        - enabled: true\n          abortIncompleteMultipartUploadDays: 30\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nBuckets can be imported using the `{region}/{bucketName}` identifier, as shown below:\n\nbash\n\n```sh\n$ pulumi import scaleway:index/objectBucket:ObjectBucket some_bucket fr-par/some-bucket\n```\n\n~\u003e **Important:** The `project_id` attribute has a particular behavior with s3 products because the s3 API is scoped by project.\n\nIf you are using a project different from the default one, you have to specify the project ID at the end of the import command.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/objectBucket:ObjectBucket some_bucket fr-par/some-bucket@11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "acl": {
                    "type": "string",
                    "description": "(Deprecated) The canned ACL you want to apply to the bucket.\n\n\u003e **Note:** The `acl` attribute is deprecated. See scaleway.ObjectBucketAcl resource documentation. Refer to the [official canned ACL documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl_overview.html#canned-acl) for more information on the different roles.\n",
                    "deprecationMessage": "ACL attribute is deprecated. Please use the resource scaleway.ObjectBucketAcl instead."
                },
                "apiEndpoint": {
                    "type": "string",
                    "description": "API URL of the bucket\n"
                },
                "corsRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/ObjectBucketCorsRule:ObjectBucketCorsRule"
                    }
                },
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint URL of the bucket.\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Enable deletion of objects in the bucket before destroying, locked objects or under legal hold are also deleted and **not** recoverable\n"
                },
                "lifecycleRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/ObjectBucketLifecycleRule:ObjectBucketLifecycleRule"
                    },
                    "description": "Lifecycle configuration is a set of rules that define actions that Scaleway Object Storage applies to a group of objects\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the bucket.\n"
                },
                "objectLockEnabled": {
                    "type": "boolean",
                    "description": "Enable object lock\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the bucket is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The [region](https://www.scaleway.com/en/developers/api/#region-definition) in which the bucket will be created.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of tags (key/value) for the bucket.\n\n* \u003e **Important:** The Scaleway console does not support `key/value` tags yet, so only the tags' values will be displayed.\nIf you make any change to your bucket's tags using the console, it will overwrite them with the format `value/value`.\n"
                },
                "versioning": {
                    "$ref": "#/types/scaleway:index/ObjectBucketVersioning:ObjectBucketVersioning",
                    "description": "Allow multiple versions of an object in the same bucket\n"
                }
            },
            "required": [
                "apiEndpoint",
                "endpoint",
                "name",
                "projectId",
                "region",
                "versioning"
            ],
            "inputProperties": {
                "acl": {
                    "type": "string",
                    "description": "(Deprecated) The canned ACL you want to apply to the bucket.\n\n\u003e **Note:** The `acl` attribute is deprecated. See scaleway.ObjectBucketAcl resource documentation. Refer to the [official canned ACL documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl_overview.html#canned-acl) for more information on the different roles.\n",
                    "deprecationMessage": "ACL attribute is deprecated. Please use the resource scaleway.ObjectBucketAcl instead."
                },
                "corsRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/ObjectBucketCorsRule:ObjectBucketCorsRule"
                    }
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Enable deletion of objects in the bucket before destroying, locked objects or under legal hold are also deleted and **not** recoverable\n"
                },
                "lifecycleRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/ObjectBucketLifecycleRule:ObjectBucketLifecycleRule"
                    },
                    "description": "Lifecycle configuration is a set of rules that define actions that Scaleway Object Storage applies to a group of objects\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the bucket.\n",
                    "willReplaceOnChanges": true
                },
                "objectLockEnabled": {
                    "type": "boolean",
                    "description": "Enable object lock\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the bucket is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The [region](https://www.scaleway.com/en/developers/api/#region-definition) in which the bucket will be created.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A list of tags (key/value) for the bucket.\n\n* \u003e **Important:** The Scaleway console does not support `key/value` tags yet, so only the tags' values will be displayed.\nIf you make any change to your bucket's tags using the console, it will overwrite them with the format `value/value`.\n"
                },
                "versioning": {
                    "$ref": "#/types/scaleway:index/ObjectBucketVersioning:ObjectBucketVersioning",
                    "description": "Allow multiple versions of an object in the same bucket\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectBucket resources.\n",
                "properties": {
                    "acl": {
                        "type": "string",
                        "description": "(Deprecated) The canned ACL you want to apply to the bucket.\n\n\u003e **Note:** The `acl` attribute is deprecated. See scaleway.ObjectBucketAcl resource documentation. Refer to the [official canned ACL documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl_overview.html#canned-acl) for more information on the different roles.\n",
                        "deprecationMessage": "ACL attribute is deprecated. Please use the resource scaleway.ObjectBucketAcl instead."
                    },
                    "apiEndpoint": {
                        "type": "string",
                        "description": "API URL of the bucket\n"
                    },
                    "corsRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/ObjectBucketCorsRule:ObjectBucketCorsRule"
                        }
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint URL of the bucket.\n"
                    },
                    "forceDestroy": {
                        "type": "boolean",
                        "description": "Enable deletion of objects in the bucket before destroying, locked objects or under legal hold are also deleted and **not** recoverable\n"
                    },
                    "lifecycleRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/ObjectBucketLifecycleRule:ObjectBucketLifecycleRule"
                        },
                        "description": "Lifecycle configuration is a set of rules that define actions that Scaleway Object Storage applies to a group of objects\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "objectLockEnabled": {
                        "type": "boolean",
                        "description": "Enable object lock\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the bucket is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The [region](https://www.scaleway.com/en/developers/api/#region-definition) in which the bucket will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A list of tags (key/value) for the bucket.\n\n* \u003e **Important:** The Scaleway console does not support `key/value` tags yet, so only the tags' values will be displayed.\nIf you make any change to your bucket's tags using the console, it will overwrite them with the format `value/value`.\n"
                    },
                    "versioning": {
                        "$ref": "#/types/scaleway:index/ObjectBucketVersioning:ObjectBucketVersioning",
                        "description": "Allow multiple versions of an object in the same bucket\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/objectBucketAcl:ObjectBucketAcl": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst someBucket = new scaleway.ObjectBucket(\"some_bucket\", {name: \"unique-name\"});\nconst main = new scaleway.ObjectBucketAcl(\"main\", {\n    bucket: mainScalewayObjectBucket.id,\n    acl: \"private\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nsome_bucket = scaleway.ObjectBucket(\"some_bucket\", name=\"unique-name\")\nmain = scaleway.ObjectBucketAcl(\"main\",\n    bucket=main_scaleway_object_bucket[\"id\"],\n    acl=\"private\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var someBucket = new Scaleway.ObjectBucket(\"some_bucket\", new()\n    {\n        Name = \"unique-name\",\n    });\n\n    var main = new Scaleway.ObjectBucketAcl(\"main\", new()\n    {\n        Bucket = mainScalewayObjectBucket.Id,\n        Acl = \"private\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewObjectBucket(ctx, \"some_bucket\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tName: pulumi.String(\"unique-name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewObjectBucketAcl(ctx, \"main\", \u0026scaleway.ObjectBucketAclArgs{\n\t\t\tBucket: pulumi.Any(mainScalewayObjectBucket.Id),\n\t\t\tAcl:    pulumi.String(\"private\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketArgs;\nimport com.pulumi.scaleway.ObjectBucketAcl;\nimport com.pulumi.scaleway.ObjectBucketAclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var someBucket = new ObjectBucket(\"someBucket\", ObjectBucketArgs.builder()\n            .name(\"unique-name\")\n            .build());\n\n        var main = new ObjectBucketAcl(\"main\", ObjectBucketAclArgs.builder()\n            .bucket(mainScalewayObjectBucket.id())\n            .acl(\"private\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  someBucket:\n    type: scaleway:ObjectBucket\n    name: some_bucket\n    properties:\n      name: unique-name\n  main:\n    type: scaleway:ObjectBucketAcl\n    properties:\n      bucket: ${mainScalewayObjectBucket.id}\n      acl: private\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nFor more information, refer to the [PutBucketAcl API call documentation](https://www.scaleway.com/en/docs/storage/object/api-cli/bucket-operations/#putbucketacl).\n\n\n### With Grants\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.ObjectBucket(\"main\", {name: \"your-bucket\"});\nconst mainObjectBucketAcl = new scaleway.ObjectBucketAcl(\"main\", {\n    bucket: main.id,\n    accessControlPolicy: {\n        grants: [\n            {\n                grantee: {\n                    id: \"\u003cproject-id\u003e:\u003cproject-id\u003e\",\n                    type: \"CanonicalUser\",\n                },\n                permission: \"FULL_CONTROL\",\n            },\n            {\n                grantee: {\n                    id: \"\u003cproject-id\u003e\",\n                    type: \"CanonicalUser\",\n                },\n                permission: \"WRITE\",\n            },\n        ],\n        owner: {\n            id: \"\u003cproject-id\u003e\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.ObjectBucket(\"main\", name=\"your-bucket\")\nmain_object_bucket_acl = scaleway.ObjectBucketAcl(\"main\",\n    bucket=main.id,\n    access_control_policy={\n        \"grants\": [\n            {\n                \"grantee\": {\n                    \"id\": \"\u003cproject-id\u003e:\u003cproject-id\u003e\",\n                    \"type\": \"CanonicalUser\",\n                },\n                \"permission\": \"FULL_CONTROL\",\n            },\n            {\n                \"grantee\": {\n                    \"id\": \"\u003cproject-id\u003e\",\n                    \"type\": \"CanonicalUser\",\n                },\n                \"permission\": \"WRITE\",\n            },\n        ],\n        \"owner\": {\n            \"id\": \"\u003cproject-id\u003e\",\n        },\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.ObjectBucket(\"main\", new()\n    {\n        Name = \"your-bucket\",\n    });\n\n    var mainObjectBucketAcl = new Scaleway.ObjectBucketAcl(\"main\", new()\n    {\n        Bucket = main.Id,\n        AccessControlPolicy = new Scaleway.Inputs.ObjectBucketAclAccessControlPolicyArgs\n        {\n            Grants = new[]\n            {\n                new Scaleway.Inputs.ObjectBucketAclAccessControlPolicyGrantArgs\n                {\n                    Grantee = new Scaleway.Inputs.ObjectBucketAclAccessControlPolicyGrantGranteeArgs\n                    {\n                        Id = \"\u003cproject-id\u003e:\u003cproject-id\u003e\",\n                        Type = \"CanonicalUser\",\n                    },\n                    Permission = \"FULL_CONTROL\",\n                },\n                new Scaleway.Inputs.ObjectBucketAclAccessControlPolicyGrantArgs\n                {\n                    Grantee = new Scaleway.Inputs.ObjectBucketAclAccessControlPolicyGrantGranteeArgs\n                    {\n                        Id = \"\u003cproject-id\u003e\",\n                        Type = \"CanonicalUser\",\n                    },\n                    Permission = \"WRITE\",\n                },\n            },\n            Owner = new Scaleway.Inputs.ObjectBucketAclAccessControlPolicyOwnerArgs\n            {\n                Id = \"\u003cproject-id\u003e\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewObjectBucket(ctx, \"main\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tName: pulumi.String(\"your-bucket\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewObjectBucketAcl(ctx, \"main\", \u0026scaleway.ObjectBucketAclArgs{\n\t\t\tBucket: main.ID(),\n\t\t\tAccessControlPolicy: \u0026scaleway.ObjectBucketAclAccessControlPolicyArgs{\n\t\t\t\tGrants: scaleway.ObjectBucketAclAccessControlPolicyGrantArray{\n\t\t\t\t\t\u0026scaleway.ObjectBucketAclAccessControlPolicyGrantArgs{\n\t\t\t\t\t\tGrantee: \u0026scaleway.ObjectBucketAclAccessControlPolicyGrantGranteeArgs{\n\t\t\t\t\t\t\tId:   pulumi.String(\"\u003cproject-id\u003e:\u003cproject-id\u003e\"),\n\t\t\t\t\t\t\tType: pulumi.String(\"CanonicalUser\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tPermission: pulumi.String(\"FULL_CONTROL\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026scaleway.ObjectBucketAclAccessControlPolicyGrantArgs{\n\t\t\t\t\t\tGrantee: \u0026scaleway.ObjectBucketAclAccessControlPolicyGrantGranteeArgs{\n\t\t\t\t\t\t\tId:   pulumi.String(\"\u003cproject-id\u003e\"),\n\t\t\t\t\t\t\tType: pulumi.String(\"CanonicalUser\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tPermission: pulumi.String(\"WRITE\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tOwner: \u0026scaleway.ObjectBucketAclAccessControlPolicyOwnerArgs{\n\t\t\t\t\tId: pulumi.String(\"\u003cproject-id\u003e\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketArgs;\nimport com.pulumi.scaleway.ObjectBucketAcl;\nimport com.pulumi.scaleway.ObjectBucketAclArgs;\nimport com.pulumi.scaleway.inputs.ObjectBucketAclAccessControlPolicyArgs;\nimport com.pulumi.scaleway.inputs.ObjectBucketAclAccessControlPolicyOwnerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new ObjectBucket(\"main\", ObjectBucketArgs.builder()\n            .name(\"your-bucket\")\n            .build());\n\n        var mainObjectBucketAcl = new ObjectBucketAcl(\"mainObjectBucketAcl\", ObjectBucketAclArgs.builder()\n            .bucket(main.id())\n            .accessControlPolicy(ObjectBucketAclAccessControlPolicyArgs.builder()\n                .grants(                \n                    ObjectBucketAclAccessControlPolicyGrantArgs.builder()\n                        .grantee(ObjectBucketAclAccessControlPolicyGrantGranteeArgs.builder()\n                            .id(\"\u003cproject-id\u003e:\u003cproject-id\u003e\")\n                            .type(\"CanonicalUser\")\n                            .build())\n                        .permission(\"FULL_CONTROL\")\n                        .build(),\n                    ObjectBucketAclAccessControlPolicyGrantArgs.builder()\n                        .grantee(ObjectBucketAclAccessControlPolicyGrantGranteeArgs.builder()\n                            .id(\"\u003cproject-id\u003e\")\n                            .type(\"CanonicalUser\")\n                            .build())\n                        .permission(\"WRITE\")\n                        .build())\n                .owner(ObjectBucketAclAccessControlPolicyOwnerArgs.builder()\n                    .id(\"\u003cproject-id\u003e\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:ObjectBucket\n    properties:\n      name: your-bucket\n  mainObjectBucketAcl:\n    type: scaleway:ObjectBucketAcl\n    name: main\n    properties:\n      bucket: ${main.id}\n      accessControlPolicy:\n        grants:\n          - grantee:\n              id: \u003cproject-id\u003e:\u003cproject-id\u003e\n              type: CanonicalUser\n            permission: FULL_CONTROL\n          - grantee:\n              id: \u003cproject-id\u003e\n              type: CanonicalUser\n            permission: WRITE\n        owner:\n          id: \u003cproject-id\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## The ACL\n\nRefer to the [official canned ACL documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl_overview.html#canned-acl) for more information on the different roles.\n\n## The access control policy\n\nThe `access_control_policy` configuration block supports the following arguments:\n\n* `grant` - (Required) Set of grant configuration blocks documented below.\n* `owner` - (Required) Configuration block of the bucket owner's display name and ID documented below.\n\n## The grant\n\nThe `grant` configuration block supports the following arguments:\n\n* `grantee` - (Required) Configuration block for the project being granted permissions documented below.\n* `permission` - (Required) Logging permissions assigned to the grantee for the bucket.\n\n## The permission\n\nThe following list shows each access policy permissions supported.\n\n`READ`, `WRITE`, `READ_ACP`, `WRITE_ACP`, `FULL_CONTROL`\n\nFor more information about ACL permissions in the S3 bucket, see [ACL permissions](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html).\n\n## The owner\n\nThe `owner` configuration block supports the following arguments:\n\n* `id` - (Required) The ID of the project owner.\n* `display_name` - (Optional) The display name of the owner.\n\n## the grantee\n\nThe `grantee` configuration block supports the following arguments:\n\n* `id` - (Required) The canonical user ID of the grantee.\n* `type` - (Required) Type of grantee. Valid values: CanonicalUser.\n\n## Import\n\nBucket ACLs can be imported using the `{region}/{bucketName}/{acl}` identifier, as shown below:\n\nbash\n\n```sh\n$ pulumi import scaleway:index/objectBucketAcl:ObjectBucketAcl some_bucket fr-par/some-bucket/private\n```\n\n~\u003e **Important:** The `project_id` attribute has a particular behavior with s3 products because the s3 API is scoped by project.\n\nIf you are using a project different from the default one, you have to specify the project ID at the end of the import command.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/objectBucketAcl:ObjectBucketAcl some_bucket fr-par/some-bucket/private@xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\n```\n\n",
            "properties": {
                "accessControlPolicy": {
                    "$ref": "#/types/scaleway:index/ObjectBucketAclAccessControlPolicy:ObjectBucketAclAccessControlPolicy",
                    "description": "A configuration block that sets the ACL permissions for an object per grantee documented below.\n"
                },
                "acl": {
                    "type": "string",
                    "description": "The canned ACL you want to apply to the bucket. Refer to the [AWS Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl_overview.html#canned-acl) documentation page to find a list of all the supported canned ACLs.\n"
                },
                "bucket": {
                    "type": "string",
                    "description": "The bucket's name or regional ID.\n"
                },
                "expectedBucketOwner": {
                    "type": "string",
                    "description": "The project ID of the expected bucket owner.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n"
                },
                "region": {
                    "type": "string",
                    "description": "The [region](https://www.scaleway.com/en/developers/api/#regions-and-zones) in which the bucket should be created.\n"
                }
            },
            "required": [
                "accessControlPolicy",
                "bucket",
                "projectId",
                "region"
            ],
            "inputProperties": {
                "accessControlPolicy": {
                    "$ref": "#/types/scaleway:index/ObjectBucketAclAccessControlPolicy:ObjectBucketAclAccessControlPolicy",
                    "description": "A configuration block that sets the ACL permissions for an object per grantee documented below.\n"
                },
                "acl": {
                    "type": "string",
                    "description": "The canned ACL you want to apply to the bucket. Refer to the [AWS Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl_overview.html#canned-acl) documentation page to find a list of all the supported canned ACLs.\n"
                },
                "bucket": {
                    "type": "string",
                    "description": "The bucket's name or regional ID.\n",
                    "willReplaceOnChanges": true
                },
                "expectedBucketOwner": {
                    "type": "string",
                    "description": "The project ID of the expected bucket owner.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The [region](https://www.scaleway.com/en/developers/api/#regions-and-zones) in which the bucket should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "bucket"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectBucketAcl resources.\n",
                "properties": {
                    "accessControlPolicy": {
                        "$ref": "#/types/scaleway:index/ObjectBucketAclAccessControlPolicy:ObjectBucketAclAccessControlPolicy",
                        "description": "A configuration block that sets the ACL permissions for an object per grantee documented below.\n"
                    },
                    "acl": {
                        "type": "string",
                        "description": "The canned ACL you want to apply to the bucket. Refer to the [AWS Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl_overview.html#canned-acl) documentation page to find a list of all the supported canned ACLs.\n"
                    },
                    "bucket": {
                        "type": "string",
                        "description": "The bucket's name or regional ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "expectedBucketOwner": {
                        "type": "string",
                        "description": "The project ID of the expected bucket owner.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project_id you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The [region](https://www.scaleway.com/en/developers/api/#regions-and-zones) in which the bucket should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/objectBucketLockConfiguration:ObjectBucketLockConfiguration": {
            "description": "The `scaleway.ObjectBucketLockConfiguration` resource allows you to create and manage an object lock configuration for [Scaleway Object storage](https://www.scaleway.com/en/docs/storage/object/).\n\nRefer to the [dedicated documentation](https://www.scaleway.com/en/docs/storage/object/api-cli/object-lock/) for more information on object lock.\n\n## Example Usage\n\n### Configure an Object Lock for a new bucket\n\n\u003e **Note:** `object_lock_enabled` must be set to `true` before configuring the lock.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.ObjectBucket(\"main\", {\n    name: \"MyBucket\",\n    acl: \"public-read\",\n    objectLockEnabled: true,\n});\nconst mainObjectBucketLockConfiguration = new scaleway.ObjectBucketLockConfiguration(\"main\", {\n    bucket: main.name,\n    rule: {\n        defaultRetention: {\n            mode: \"GOVERNANCE\",\n            days: 1,\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.ObjectBucket(\"main\",\n    name=\"MyBucket\",\n    acl=\"public-read\",\n    object_lock_enabled=True)\nmain_object_bucket_lock_configuration = scaleway.ObjectBucketLockConfiguration(\"main\",\n    bucket=main.name,\n    rule={\n        \"default_retention\": {\n            \"mode\": \"GOVERNANCE\",\n            \"days\": 1,\n        },\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.ObjectBucket(\"main\", new()\n    {\n        Name = \"MyBucket\",\n        Acl = \"public-read\",\n        ObjectLockEnabled = true,\n    });\n\n    var mainObjectBucketLockConfiguration = new Scaleway.ObjectBucketLockConfiguration(\"main\", new()\n    {\n        Bucket = main.Name,\n        Rule = new Scaleway.Inputs.ObjectBucketLockConfigurationRuleArgs\n        {\n            DefaultRetention = new Scaleway.Inputs.ObjectBucketLockConfigurationRuleDefaultRetentionArgs\n            {\n                Mode = \"GOVERNANCE\",\n                Days = 1,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewObjectBucket(ctx, \"main\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tName:              pulumi.String(\"MyBucket\"),\n\t\t\tAcl:               pulumi.String(\"public-read\"),\n\t\t\tObjectLockEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewObjectBucketLockConfiguration(ctx, \"main\", \u0026scaleway.ObjectBucketLockConfigurationArgs{\n\t\t\tBucket: main.Name,\n\t\t\tRule: \u0026scaleway.ObjectBucketLockConfigurationRuleArgs{\n\t\t\t\tDefaultRetention: \u0026scaleway.ObjectBucketLockConfigurationRuleDefaultRetentionArgs{\n\t\t\t\t\tMode: pulumi.String(\"GOVERNANCE\"),\n\t\t\t\t\tDays: pulumi.Int(1),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketArgs;\nimport com.pulumi.scaleway.ObjectBucketLockConfiguration;\nimport com.pulumi.scaleway.ObjectBucketLockConfigurationArgs;\nimport com.pulumi.scaleway.inputs.ObjectBucketLockConfigurationRuleArgs;\nimport com.pulumi.scaleway.inputs.ObjectBucketLockConfigurationRuleDefaultRetentionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new ObjectBucket(\"main\", ObjectBucketArgs.builder()\n            .name(\"MyBucket\")\n            .acl(\"public-read\")\n            .objectLockEnabled(true)\n            .build());\n\n        var mainObjectBucketLockConfiguration = new ObjectBucketLockConfiguration(\"mainObjectBucketLockConfiguration\", ObjectBucketLockConfigurationArgs.builder()\n            .bucket(main.name())\n            .rule(ObjectBucketLockConfigurationRuleArgs.builder()\n                .defaultRetention(ObjectBucketLockConfigurationRuleDefaultRetentionArgs.builder()\n                    .mode(\"GOVERNANCE\")\n                    .days(1)\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:ObjectBucket\n    properties:\n      name: MyBucket\n      acl: public-read\n      objectLockEnabled: true\n  mainObjectBucketLockConfiguration:\n    type: scaleway:ObjectBucketLockConfiguration\n    name: main\n    properties:\n      bucket: ${main.name}\n      rule:\n        defaultRetention:\n          mode: GOVERNANCE\n          days: 1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Configure an object Lock for an existing bucket\n\n[Contact Scaleway support](https://console.scaleway.com/support/tickets/create) to enable object lock on an existing bucket.\n\n## Import\n\nBucket lock configurations can be imported using the `{region}/{bucketName}` identifier, as shown below:\n\nbash\n\n```sh\n$ pulumi import scaleway:index/objectBucketLockConfiguration:ObjectBucketLockConfiguration some_bucket fr-par/some-bucket\n```\n\n~\u003e **Important:** The `project_id` attribute has a particular behavior with s3 products because the s3 API is scoped by project.\n\nIf you are using a project different from the default one, you have to specify the project ID at the end of the import command.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/objectBucketLockConfiguration:ObjectBucketLockConfiguration some_bucket fr-par/some-bucket@xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\n```\n\n",
            "properties": {
                "bucket": {
                    "type": "string",
                    "description": "The bucket's name or regional ID.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                },
                "rule": {
                    "$ref": "#/types/scaleway:index/ObjectBucketLockConfigurationRule:ObjectBucketLockConfigurationRule",
                    "description": "Specifies the object lock rule for the specified object.\n"
                }
            },
            "required": [
                "bucket",
                "projectId",
                "region",
                "rule"
            ],
            "inputProperties": {
                "bucket": {
                    "type": "string",
                    "description": "The bucket's name or regional ID.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                },
                "rule": {
                    "$ref": "#/types/scaleway:index/ObjectBucketLockConfigurationRule:ObjectBucketLockConfigurationRule",
                    "description": "Specifies the object lock rule for the specified object.\n"
                }
            },
            "requiredInputs": [
                "bucket",
                "rule"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectBucketLockConfiguration resources.\n",
                "properties": {
                    "bucket": {
                        "type": "string",
                        "description": "The bucket's name or regional ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project_id you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    },
                    "rule": {
                        "$ref": "#/types/scaleway:index/ObjectBucketLockConfigurationRule:ObjectBucketLockConfigurationRule",
                        "description": "Specifies the object lock rule for the specified object.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/objectBucketPolicy:ObjectBucketPolicy": {
            "description": "The `scaleway.ObjectBucketPolicy` resource allows you to create and manage bucket policies for [Scaleway Object storage](https://www.scaleway.com/en/docs/storage/object/).\n\nRefer to the [dedicated documentation](https://www.scaleway.com/en/docs/storage/object/api-cli/bucket-policy/) for more information on Object Storage bucket policies.\n\n## Example Usage\n\n### Example Usage with an IAM user\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\n// Project ID\nconst default = scaleway.getAccountProject({\n    name: \"default\",\n});\n// IAM configuration\nconst user = scaleway.getIamUser({\n    email: \"user@scaleway.com\",\n});\nconst policy = new scaleway.IamPolicy(\"policy\", {\n    name: \"object-storage-policy\",\n    userId: user.then(user =\u003e user.id),\n    rules: [{\n        projectIds: [_default.then(_default =\u003e _default.id)],\n        permissionSetNames: [\"ObjectStorageFullAccess\"],\n    }],\n});\n// Object storage configuration\nconst bucket = new scaleway.ObjectBucket(\"bucket\", {name: \"some-unique-name\"});\nconst policyObjectBucketPolicy = new scaleway.ObjectBucketPolicy(\"policy\", {\n    bucket: bucket.name,\n    policy: pulumi.jsonStringify({\n        Version: \"2023-04-17\",\n        Id: \"MyBucketPolicy\",\n        Statement: [{\n            Effect: \"Allow\",\n            Action: [\"s3:*\"],\n            Principal: {\n                SCW: user.then(user =\u003e `user_id:${user.id}`),\n            },\n            Resource: [\n                bucket.name,\n                pulumi.interpolate`${bucket.name}/*`,\n            ],\n        }],\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\n# Project ID\ndefault = scaleway.get_account_project(name=\"default\")\n# IAM configuration\nuser = scaleway.get_iam_user(email=\"user@scaleway.com\")\npolicy = scaleway.IamPolicy(\"policy\",\n    name=\"object-storage-policy\",\n    user_id=user.id,\n    rules=[{\n        \"project_ids\": [default.id],\n        \"permission_set_names\": [\"ObjectStorageFullAccess\"],\n    }])\n# Object storage configuration\nbucket = scaleway.ObjectBucket(\"bucket\", name=\"some-unique-name\")\npolicy_object_bucket_policy = scaleway.ObjectBucketPolicy(\"policy\",\n    bucket=bucket.name,\n    policy=pulumi.Output.json_dumps({\n        \"Version\": \"2023-04-17\",\n        \"Id\": \"MyBucketPolicy\",\n        \"Statement\": [{\n            \"Effect\": \"Allow\",\n            \"Action\": [\"s3:*\"],\n            \"Principal\": {\n                \"SCW\": f\"user_id:{user.id}\",\n            },\n            \"Resource\": [\n                bucket.name,\n                bucket.name.apply(lambda name: f\"{name}/*\"),\n            ],\n        }],\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Project ID\n    var @default = Scaleway.GetAccountProject.Invoke(new()\n    {\n        Name = \"default\",\n    });\n\n    // IAM configuration\n    var user = Scaleway.GetIamUser.Invoke(new()\n    {\n        Email = \"user@scaleway.com\",\n    });\n\n    var policy = new Scaleway.IamPolicy(\"policy\", new()\n    {\n        Name = \"object-storage-policy\",\n        UserId = user.Apply(getIamUserResult =\u003e getIamUserResult.Id),\n        Rules = new[]\n        {\n            new Scaleway.Inputs.IamPolicyRuleArgs\n            {\n                ProjectIds = new[]\n                {\n                    @default.Apply(@default =\u003e @default.Apply(getAccountProjectResult =\u003e getAccountProjectResult.Id)),\n                },\n                PermissionSetNames = new[]\n                {\n                    \"ObjectStorageFullAccess\",\n                },\n            },\n        },\n    });\n\n    // Object storage configuration\n    var bucket = new Scaleway.ObjectBucket(\"bucket\", new()\n    {\n        Name = \"some-unique-name\",\n    });\n\n    var policyObjectBucketPolicy = new Scaleway.ObjectBucketPolicy(\"policy\", new()\n    {\n        Bucket = bucket.Name,\n        Policy = Output.JsonSerialize(Output.Create(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"Version\"] = \"2023-04-17\",\n            [\"Id\"] = \"MyBucketPolicy\",\n            [\"Statement\"] = new[]\n            {\n                new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"Effect\"] = \"Allow\",\n                    [\"Action\"] = new[]\n                    {\n                        \"s3:*\",\n                    },\n                    [\"Principal\"] = new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"SCW\"] = $\"user_id:{user.Apply(getIamUserResult =\u003e getIamUserResult.Id)}\",\n                    },\n                    [\"Resource\"] = new[]\n                    {\n                        bucket.Name,\n                        bucket.Name.Apply(name =\u003e $\"{name}/*\"),\n                    },\n                },\n            },\n        })),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Project ID\n\t\t_default, err := scaleway.LookupAccountProject(ctx, \u0026scaleway.LookupAccountProjectArgs{\n\t\t\tName: pulumi.StringRef(\"default\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// IAM configuration\n\t\tuser, err := scaleway.LookupIamUser(ctx, \u0026scaleway.LookupIamUserArgs{\n\t\t\tEmail: pulumi.StringRef(\"user@scaleway.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewIamPolicy(ctx, \"policy\", \u0026scaleway.IamPolicyArgs{\n\t\t\tName:   pulumi.String(\"object-storage-policy\"),\n\t\t\tUserId: pulumi.String(user.Id),\n\t\t\tRules: scaleway.IamPolicyRuleArray{\n\t\t\t\t\u0026scaleway.IamPolicyRuleArgs{\n\t\t\t\t\tProjectIds: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(_default.Id),\n\t\t\t\t\t},\n\t\t\t\t\tPermissionSetNames: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"ObjectStorageFullAccess\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Object storage configuration\n\t\tbucket, err := scaleway.NewObjectBucket(ctx, \"bucket\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tName: pulumi.String(\"some-unique-name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewObjectBucketPolicy(ctx, \"policy\", \u0026scaleway.ObjectBucketPolicyArgs{\n\t\t\tBucket: bucket.Name,\n\t\t\tPolicy: pulumi.All(bucket.Name, bucket.Name).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\tbucketName := _args[0].(string)\n\t\t\t\tbucketName1 := _args[1].(string)\n\t\t\t\tvar _zero string\n\t\t\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\t\t\"Version\": \"2023-04-17\",\n\t\t\t\t\t\"Id\":      \"MyBucketPolicy\",\n\t\t\t\t\t\"Statement\": []map[string]interface{}{\n\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\"Effect\": \"Allow\",\n\t\t\t\t\t\t\t\"Action\": []string{\n\t\t\t\t\t\t\t\t\"s3:*\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"Principal\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\"SCW\": fmt.Sprintf(\"user_id:%v\", user.Id),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"Resource\": []string{\n\t\t\t\t\t\t\t\tbucketName,\n\t\t\t\t\t\t\t\tfmt.Sprintf(\"%v/*\", bucketName1),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn _zero, err\n\t\t\t\t}\n\t\t\t\tjson0 := string(tmpJSON0)\n\t\t\t\treturn json0, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetAccountProjectArgs;\nimport com.pulumi.scaleway.inputs.GetIamUserArgs;\nimport com.pulumi.scaleway.IamPolicy;\nimport com.pulumi.scaleway.IamPolicyArgs;\nimport com.pulumi.scaleway.inputs.IamPolicyRuleArgs;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketArgs;\nimport com.pulumi.scaleway.ObjectBucketPolicy;\nimport com.pulumi.scaleway.ObjectBucketPolicyArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Project ID\n        final var default = ScalewayFunctions.getAccountProject(GetAccountProjectArgs.builder()\n            .name(\"default\")\n            .build());\n\n        // IAM configuration\n        final var user = ScalewayFunctions.getIamUser(GetIamUserArgs.builder()\n            .email(\"user@scaleway.com\")\n            .build());\n\n        var policy = new IamPolicy(\"policy\", IamPolicyArgs.builder()\n            .name(\"object-storage-policy\")\n            .userId(user.applyValue(getIamUserResult -\u003e getIamUserResult.id()))\n            .rules(IamPolicyRuleArgs.builder()\n                .projectIds(default_.id())\n                .permissionSetNames(\"ObjectStorageFullAccess\")\n                .build())\n            .build());\n\n        // Object storage configuration\n        var bucket = new ObjectBucket(\"bucket\", ObjectBucketArgs.builder()\n            .name(\"some-unique-name\")\n            .build());\n\n        var policyObjectBucketPolicy = new ObjectBucketPolicy(\"policyObjectBucketPolicy\", ObjectBucketPolicyArgs.builder()\n            .bucket(bucket.name())\n            .policy(Output.tuple(bucket.name(), bucket.name()).applyValue(values -\u003e {\n                var bucketName = values.t1;\n                var bucketName1 = values.t2;\n                return serializeJson(\n                    jsonObject(\n                        jsonProperty(\"Version\", \"2023-04-17\"),\n                        jsonProperty(\"Id\", \"MyBucketPolicy\"),\n                        jsonProperty(\"Statement\", jsonArray(jsonObject(\n                            jsonProperty(\"Effect\", \"Allow\"),\n                            jsonProperty(\"Action\", jsonArray(\"s3:*\")),\n                            jsonProperty(\"Principal\", jsonObject(\n                                jsonProperty(\"SCW\", String.format(\"user_id:%s\", user.applyValue(getIamUserResult -\u003e getIamUserResult.id())))\n                            )),\n                            jsonProperty(\"Resource\", jsonArray(\n                                bucketName, \n                                String.format(\"%s/*\", bucketName1)\n                            ))\n                        )))\n                    ));\n            }))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  policy:\n    type: scaleway:IamPolicy\n    properties:\n      name: object-storage-policy\n      userId: ${user.id}\n      rules:\n        - projectIds:\n            - ${default.id}\n          permissionSetNames:\n            - ObjectStorageFullAccess\n  # Object storage configuration\n  bucket:\n    type: scaleway:ObjectBucket\n    properties:\n      name: some-unique-name\n  policyObjectBucketPolicy:\n    type: scaleway:ObjectBucketPolicy\n    name: policy\n    properties:\n      bucket: ${bucket.name}\n      policy:\n        fn::toJSON:\n          Version: 2023-04-17\n          Id: MyBucketPolicy\n          Statement:\n            - Effect: Allow\n              Action:\n                - s3:*\n              Principal:\n                SCW: user_id:${user.id}\n              Resource:\n                - ${bucket.name}\n                - ${bucket.name}/*\nvariables:\n  # Project ID\n  default:\n    fn::invoke:\n      Function: scaleway:getAccountProject\n      Arguments:\n        name: default\n  # IAM configuration\n  user:\n    fn::invoke:\n      Function: scaleway:getIamUser\n      Arguments:\n        email: user@scaleway.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Example with an IAM application\n\n### Creating a bucket and delegating read access to an application\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\n// Project ID\nconst default = scaleway.getAccountProject({\n    name: \"default\",\n});\n// IAM configuration\nconst reading_app = new scaleway.IamApplication(\"reading-app\", {name: \"reading-app\"});\nconst policy = new scaleway.IamPolicy(\"policy\", {\n    name: \"object-storage-policy\",\n    applicationId: reading_app.id,\n    rules: [{\n        projectIds: [_default.then(_default =\u003e _default.id)],\n        permissionSetNames: [\"ObjectStorageBucketsRead\"],\n    }],\n});\n// Object storage configuration\nconst bucket = new scaleway.ObjectBucket(\"bucket\", {name: \"some-unique-name\"});\nconst policyObjectBucketPolicy = new scaleway.ObjectBucketPolicy(\"policy\", {\n    bucket: bucket.id,\n    policy: pulumi.jsonStringify({\n        Version: \"2023-04-17\",\n        Statement: [{\n            Sid: \"Delegate read access\",\n            Effect: \"Allow\",\n            Principal: {\n                SCW: pulumi.interpolate`application_id:${reading_app.id}`,\n            },\n            Action: [\n                \"s3:ListBucket\",\n                \"s3:GetObject\",\n            ],\n            Resource: [\n                bucket.name,\n                pulumi.interpolate`${bucket.name}/*`,\n            ],\n        }],\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\n# Project ID\ndefault = scaleway.get_account_project(name=\"default\")\n# IAM configuration\nreading_app = scaleway.IamApplication(\"reading-app\", name=\"reading-app\")\npolicy = scaleway.IamPolicy(\"policy\",\n    name=\"object-storage-policy\",\n    application_id=reading_app.id,\n    rules=[{\n        \"project_ids\": [default.id],\n        \"permission_set_names\": [\"ObjectStorageBucketsRead\"],\n    }])\n# Object storage configuration\nbucket = scaleway.ObjectBucket(\"bucket\", name=\"some-unique-name\")\npolicy_object_bucket_policy = scaleway.ObjectBucketPolicy(\"policy\",\n    bucket=bucket.id,\n    policy=pulumi.Output.json_dumps({\n        \"Version\": \"2023-04-17\",\n        \"Statement\": [{\n            \"Sid\": \"Delegate read access\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"SCW\": reading_app.id.apply(lambda id: f\"application_id:{id}\"),\n            },\n            \"Action\": [\n                \"s3:ListBucket\",\n                \"s3:GetObject\",\n            ],\n            \"Resource\": [\n                bucket.name,\n                bucket.name.apply(lambda name: f\"{name}/*\"),\n            ],\n        }],\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Project ID\n    var @default = Scaleway.GetAccountProject.Invoke(new()\n    {\n        Name = \"default\",\n    });\n\n    // IAM configuration\n    var reading_app = new Scaleway.IamApplication(\"reading-app\", new()\n    {\n        Name = \"reading-app\",\n    });\n\n    var policy = new Scaleway.IamPolicy(\"policy\", new()\n    {\n        Name = \"object-storage-policy\",\n        ApplicationId = reading_app.Id,\n        Rules = new[]\n        {\n            new Scaleway.Inputs.IamPolicyRuleArgs\n            {\n                ProjectIds = new[]\n                {\n                    @default.Apply(@default =\u003e @default.Apply(getAccountProjectResult =\u003e getAccountProjectResult.Id)),\n                },\n                PermissionSetNames = new[]\n                {\n                    \"ObjectStorageBucketsRead\",\n                },\n            },\n        },\n    });\n\n    // Object storage configuration\n    var bucket = new Scaleway.ObjectBucket(\"bucket\", new()\n    {\n        Name = \"some-unique-name\",\n    });\n\n    var policyObjectBucketPolicy = new Scaleway.ObjectBucketPolicy(\"policy\", new()\n    {\n        Bucket = bucket.Id,\n        Policy = Output.JsonSerialize(Output.Create(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"Version\"] = \"2023-04-17\",\n            [\"Statement\"] = new[]\n            {\n                new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"Sid\"] = \"Delegate read access\",\n                    [\"Effect\"] = \"Allow\",\n                    [\"Principal\"] = new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"SCW\"] = reading_app.Id.Apply(id =\u003e $\"application_id:{id}\"),\n                    },\n                    [\"Action\"] = new[]\n                    {\n                        \"s3:ListBucket\",\n                        \"s3:GetObject\",\n                    },\n                    [\"Resource\"] = new[]\n                    {\n                        bucket.Name,\n                        bucket.Name.Apply(name =\u003e $\"{name}/*\"),\n                    },\n                },\n            },\n        })),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Project ID\n\t\t_default, err := scaleway.LookupAccountProject(ctx, \u0026scaleway.LookupAccountProjectArgs{\n\t\t\tName: pulumi.StringRef(\"default\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// IAM configuration\n\t\t_, err = scaleway.NewIamApplication(ctx, \"reading-app\", \u0026scaleway.IamApplicationArgs{\n\t\t\tName: pulumi.String(\"reading-app\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewIamPolicy(ctx, \"policy\", \u0026scaleway.IamPolicyArgs{\n\t\t\tName:          pulumi.String(\"object-storage-policy\"),\n\t\t\tApplicationId: reading_app.ID(),\n\t\t\tRules: scaleway.IamPolicyRuleArray{\n\t\t\t\t\u0026scaleway.IamPolicyRuleArgs{\n\t\t\t\t\tProjectIds: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(_default.Id),\n\t\t\t\t\t},\n\t\t\t\t\tPermissionSetNames: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"ObjectStorageBucketsRead\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Object storage configuration\n\t\tbucket, err := scaleway.NewObjectBucket(ctx, \"bucket\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tName: pulumi.String(\"some-unique-name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewObjectBucketPolicy(ctx, \"policy\", \u0026scaleway.ObjectBucketPolicyArgs{\n\t\t\tBucket: bucket.ID(),\n\t\t\tPolicy: pulumi.All(reading_app.ID(), bucket.Name, bucket.Name).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\tid := _args[0].(string)\n\t\t\t\tbucketName := _args[1].(string)\n\t\t\t\tbucketName1 := _args[2].(string)\n\t\t\t\tvar _zero string\n\t\t\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\t\t\"Version\": \"2023-04-17\",\n\t\t\t\t\t\"Statement\": []map[string]interface{}{\n\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\"Sid\":    \"Delegate read access\",\n\t\t\t\t\t\t\t\"Effect\": \"Allow\",\n\t\t\t\t\t\t\t\"Principal\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\"SCW\": fmt.Sprintf(\"application_id:%v\", id),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"Action\": []string{\n\t\t\t\t\t\t\t\t\"s3:ListBucket\",\n\t\t\t\t\t\t\t\t\"s3:GetObject\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"Resource\": []string{\n\t\t\t\t\t\t\t\tbucketName,\n\t\t\t\t\t\t\t\tfmt.Sprintf(\"%v/*\", bucketName1),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn _zero, err\n\t\t\t\t}\n\t\t\t\tjson0 := string(tmpJSON0)\n\t\t\t\treturn json0, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetAccountProjectArgs;\nimport com.pulumi.scaleway.IamApplication;\nimport com.pulumi.scaleway.IamApplicationArgs;\nimport com.pulumi.scaleway.IamPolicy;\nimport com.pulumi.scaleway.IamPolicyArgs;\nimport com.pulumi.scaleway.inputs.IamPolicyRuleArgs;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketArgs;\nimport com.pulumi.scaleway.ObjectBucketPolicy;\nimport com.pulumi.scaleway.ObjectBucketPolicyArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Project ID\n        final var default = ScalewayFunctions.getAccountProject(GetAccountProjectArgs.builder()\n            .name(\"default\")\n            .build());\n\n        // IAM configuration\n        var reading_app = new IamApplication(\"reading-app\", IamApplicationArgs.builder()\n            .name(\"reading-app\")\n            .build());\n\n        var policy = new IamPolicy(\"policy\", IamPolicyArgs.builder()\n            .name(\"object-storage-policy\")\n            .applicationId(reading_app.id())\n            .rules(IamPolicyRuleArgs.builder()\n                .projectIds(default_.id())\n                .permissionSetNames(\"ObjectStorageBucketsRead\")\n                .build())\n            .build());\n\n        // Object storage configuration\n        var bucket = new ObjectBucket(\"bucket\", ObjectBucketArgs.builder()\n            .name(\"some-unique-name\")\n            .build());\n\n        var policyObjectBucketPolicy = new ObjectBucketPolicy(\"policyObjectBucketPolicy\", ObjectBucketPolicyArgs.builder()\n            .bucket(bucket.id())\n            .policy(Output.tuple(reading_app.id(), bucket.name(), bucket.name()).applyValue(values -\u003e {\n                var id = values.t1;\n                var bucketName = values.t2;\n                var bucketName1 = values.t3;\n                return serializeJson(\n                    jsonObject(\n                        jsonProperty(\"Version\", \"2023-04-17\"),\n                        jsonProperty(\"Statement\", jsonArray(jsonObject(\n                            jsonProperty(\"Sid\", \"Delegate read access\"),\n                            jsonProperty(\"Effect\", \"Allow\"),\n                            jsonProperty(\"Principal\", jsonObject(\n                                jsonProperty(\"SCW\", String.format(\"application_id:%s\", id))\n                            )),\n                            jsonProperty(\"Action\", jsonArray(\n                                \"s3:ListBucket\", \n                                \"s3:GetObject\"\n                            )),\n                            jsonProperty(\"Resource\", jsonArray(\n                                bucketName, \n                                String.format(\"%s/*\", bucketName1)\n                            ))\n                        )))\n                    ));\n            }))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # IAM configuration\n  reading-app:\n    type: scaleway:IamApplication\n    properties:\n      name: reading-app\n  policy:\n    type: scaleway:IamPolicy\n    properties:\n      name: object-storage-policy\n      applicationId: ${[\"reading-app\"].id}\n      rules:\n        - projectIds:\n            - ${default.id}\n          permissionSetNames:\n            - ObjectStorageBucketsRead\n  # Object storage configuration\n  bucket:\n    type: scaleway:ObjectBucket\n    properties:\n      name: some-unique-name\n  policyObjectBucketPolicy:\n    type: scaleway:ObjectBucketPolicy\n    name: policy\n    properties:\n      bucket: ${bucket.id}\n      policy:\n        fn::toJSON:\n          Version: 2023-04-17\n          Statement:\n            - Sid: Delegate read access\n              Effect: Allow\n              Principal:\n                SCW: application_id:${[\"reading-app\"].id}\n              Action:\n                - s3:ListBucket\n                - s3:GetObject\n              Resource:\n                - ${bucket.name}\n                - ${bucket.name}/*\nvariables:\n  # Project ID\n  default:\n    fn::invoke:\n      Function: scaleway:getAccountProject\n      Arguments:\n        name: default\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Reading the bucket with the application\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst reading-app = scaleway.getIamApplication({\n    name: \"reading-app\",\n});\nconst reading_api_key = new scaleway.IamApiKey(\"reading-api-key\", {applicationId: reading_app.then(reading_app =\u003e reading_app.id)});\nconst bucket = scaleway.getObjectBucket({\n    name: \"some-unique-name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\nreading_app = scaleway.get_iam_application(name=\"reading-app\")\nreading_api_key = scaleway.IamApiKey(\"reading-api-key\", application_id=reading_app.id)\nbucket = scaleway.get_object_bucket(name=\"some-unique-name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var reading_app = Scaleway.GetIamApplication.Invoke(new()\n    {\n        Name = \"reading-app\",\n    });\n\n    var reading_api_key = new Scaleway.IamApiKey(\"reading-api-key\", new()\n    {\n        ApplicationId = reading_app.Apply(reading_app =\u003e reading_app.Apply(getIamApplicationResult =\u003e getIamApplicationResult.Id)),\n    });\n\n    var bucket = Scaleway.GetObjectBucket.Invoke(new()\n    {\n        Name = \"some-unique-name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treading_app, err := scaleway.LookupIamApplication(ctx, \u0026scaleway.LookupIamApplicationArgs{\n\t\t\tName: pulumi.StringRef(\"reading-app\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewIamApiKey(ctx, \"reading-api-key\", \u0026scaleway.IamApiKeyArgs{\n\t\t\tApplicationId: pulumi.String(reading_app.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupObjectBucket(ctx, \u0026scaleway.LookupObjectBucketArgs{\n\t\t\tName: pulumi.StringRef(\"some-unique-name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetIamApplicationArgs;\nimport com.pulumi.scaleway.IamApiKey;\nimport com.pulumi.scaleway.IamApiKeyArgs;\nimport com.pulumi.scaleway.inputs.GetObjectBucketArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var reading-app = ScalewayFunctions.getIamApplication(GetIamApplicationArgs.builder()\n            .name(\"reading-app\")\n            .build());\n\n        var reading_api_key = new IamApiKey(\"reading-api-key\", IamApiKeyArgs.builder()\n            .applicationId(reading_app.id())\n            .build());\n\n        final var bucket = ScalewayFunctions.getObjectBucket(GetObjectBucketArgs.builder()\n            .name(\"some-unique-name\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  reading-api-key:\n    type: scaleway:IamApiKey\n    properties:\n      applicationId: ${[\"reading-app\"].id}\nvariables:\n  reading-app:\n    fn::invoke:\n      Function: scaleway:getIamApplication\n      Arguments:\n        name: reading-app\n  bucket:\n    fn::invoke:\n      Function: scaleway:getObjectBucket\n      Arguments:\n        name: some-unique-name\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Example with AWS provider\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\n// Scaleway project ID\nconst default = scaleway.getAccountProject({\n    name: \"default\",\n});\n// Object storage configuration\nconst bucket = new scaleway.ObjectBucket(\"bucket\", {name: \"some-unique-name\"});\n// AWS data source\nconst policy = aws.iam.getPolicyDocumentOutput({\n    version: \"2012-10-17\",\n    statements: [{\n        sid: \"Delegate access\",\n        effect: \"Allow\",\n        principals: [{\n            type: \"SCW\",\n            identifiers: [_default.then(_default =\u003e `project_id:${_default.id}`)],\n        }],\n        actions: [\"s3:ListBucket\"],\n        resources: [\n            bucket.name,\n            pulumi.interpolate`${bucket.name}/*`,\n        ],\n    }],\n});\nconst main = new scaleway.ObjectBucketPolicy(\"main\", {\n    bucket: bucket.id,\n    policy: policy.apply(policy =\u003e policy.json),\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\n# Scaleway project ID\ndefault = scaleway.get_account_project(name=\"default\")\n# Object storage configuration\nbucket = scaleway.ObjectBucket(\"bucket\", name=\"some-unique-name\")\n# AWS data source\npolicy = aws.iam.get_policy_document_output(version=\"2012-10-17\",\n    statements=[{\n        \"sid\": \"Delegate access\",\n        \"effect\": \"Allow\",\n        \"principals\": [{\n            \"type\": \"SCW\",\n            \"identifiers\": [f\"project_id:{default.id}\"],\n        }],\n        \"actions\": [\"s3:ListBucket\"],\n        \"resources\": [\n            bucket.name,\n            bucket.name.apply(lambda name: f\"{name}/*\"),\n        ],\n    }])\nmain = scaleway.ObjectBucketPolicy(\"main\",\n    bucket=bucket.id,\n    policy=policy.json)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Scaleway project ID\n    var @default = Scaleway.GetAccountProject.Invoke(new()\n    {\n        Name = \"default\",\n    });\n\n    // Object storage configuration\n    var bucket = new Scaleway.ObjectBucket(\"bucket\", new()\n    {\n        Name = \"some-unique-name\",\n    });\n\n    // AWS data source\n    var policy = Aws.Iam.GetPolicyDocument.Invoke(new()\n    {\n        Version = \"2012-10-17\",\n        Statements = new[]\n        {\n            new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs\n            {\n                Sid = \"Delegate access\",\n                Effect = \"Allow\",\n                Principals = new[]\n                {\n                    new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs\n                    {\n                        Type = \"SCW\",\n                        Identifiers = new[]\n                        {\n                            $\"project_id:{@default.Apply(getAccountProjectResult =\u003e getAccountProjectResult.Id)}\",\n                        },\n                    },\n                },\n                Actions = new[]\n                {\n                    \"s3:ListBucket\",\n                },\n                Resources = new[]\n                {\n                    bucket.Name,\n                    $\"{bucket.Name}/*\",\n                },\n            },\n        },\n    });\n\n    var main = new Scaleway.ObjectBucketPolicy(\"main\", new()\n    {\n        Bucket = bucket.Id,\n        Policy = policy.Apply(getPolicyDocumentResult =\u003e getPolicyDocumentResult.Json),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Scaleway project ID\n\t\t_default, err := scaleway.LookupAccountProject(ctx, \u0026scaleway.LookupAccountProjectArgs{\n\t\t\tName: pulumi.StringRef(\"default\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Object storage configuration\n\t\tbucket, err := scaleway.NewObjectBucket(ctx, \"bucket\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tName: pulumi.String(\"some-unique-name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// AWS data source\n\t\tpolicy := iam.GetPolicyDocumentOutput(ctx, iam.GetPolicyDocumentOutputArgs{\n\t\t\tVersion: pulumi.String(\"2012-10-17\"),\n\t\t\tStatements: iam.GetPolicyDocumentStatementArray{\n\t\t\t\t\u0026iam.GetPolicyDocumentStatementArgs{\n\t\t\t\t\tSid:    pulumi.String(\"Delegate access\"),\n\t\t\t\t\tEffect: pulumi.String(\"Allow\"),\n\t\t\t\t\tPrincipals: iam.GetPolicyDocumentStatementPrincipalArray{\n\t\t\t\t\t\t\u0026iam.GetPolicyDocumentStatementPrincipalArgs{\n\t\t\t\t\t\t\tType: pulumi.String(\"SCW\"),\n\t\t\t\t\t\t\tIdentifiers: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.Sprintf(\"project_id:%v\", _default.Id),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tActions: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"s3:ListBucket\"),\n\t\t\t\t\t},\n\t\t\t\t\tResources: pulumi.StringArray{\n\t\t\t\t\t\tbucket.Name,\n\t\t\t\t\t\tbucket.Name.ApplyT(func(name string) (string, error) {\n\t\t\t\t\t\t\treturn fmt.Sprintf(\"%v/*\", name), nil\n\t\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\t_, err = scaleway.NewObjectBucketPolicy(ctx, \"main\", \u0026scaleway.ObjectBucketPolicyArgs{\n\t\t\tBucket: bucket.ID(),\n\t\t\tPolicy: pulumi.String(policy.ApplyT(func(policy iam.GetPolicyDocumentResult) (*string, error) {\n\t\t\t\treturn \u0026policy.Json, nil\n\t\t\t}).(pulumi.StringPtrOutput)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetAccountProjectArgs;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketArgs;\nimport com.pulumi.aws.iam.IamFunctions;\nimport com.pulumi.aws.iam.inputs.GetPolicyDocumentArgs;\nimport com.pulumi.scaleway.ObjectBucketPolicy;\nimport com.pulumi.scaleway.ObjectBucketPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Scaleway project ID\n        final var default = ScalewayFunctions.getAccountProject(GetAccountProjectArgs.builder()\n            .name(\"default\")\n            .build());\n\n        // Object storage configuration\n        var bucket = new ObjectBucket(\"bucket\", ObjectBucketArgs.builder()\n            .name(\"some-unique-name\")\n            .build());\n\n        // AWS data source\n        final var policy = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()\n            .version(\"2012-10-17\")\n            .statements(GetPolicyDocumentStatementArgs.builder()\n                .sid(\"Delegate access\")\n                .effect(\"Allow\")\n                .principals(GetPolicyDocumentStatementPrincipalArgs.builder()\n                    .type(\"SCW\")\n                    .identifiers(String.format(\"project_id:%s\", default_.id()))\n                    .build())\n                .actions(\"s3:ListBucket\")\n                .resources(                \n                    bucket.name(),\n                    bucket.name().applyValue(name -\u003e String.format(\"%s/*\", name)))\n                .build())\n            .build());\n\n        var main = new ObjectBucketPolicy(\"main\", ObjectBucketPolicyArgs.builder()\n            .bucket(bucket.id())\n            .policy(policy.applyValue(getPolicyDocumentResult -\u003e getPolicyDocumentResult).applyValue(policy -\u003e policy.applyValue(getPolicyDocumentResult -\u003e getPolicyDocumentResult.json())))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Object storage configuration\n  bucket:\n    type: scaleway:ObjectBucket\n    properties:\n      name: some-unique-name\n  main:\n    type: scaleway:ObjectBucketPolicy\n    properties:\n      bucket: ${bucket.id}\n      policy: ${policy.json}\nvariables:\n  # Scaleway project ID\n  default:\n    fn::invoke:\n      Function: scaleway:getAccountProject\n      Arguments:\n        name: default\n  # AWS data source\n  policy:\n    fn::invoke:\n      Function: aws:iam:getPolicyDocument\n      Arguments:\n        version: 2012-10-17\n        statements:\n          - sid: Delegate access\n            effect: Allow\n            principals:\n              - type: SCW\n                identifiers:\n                  - project_id:${default.id}\n            actions:\n              - s3:ListBucket\n            resources:\n              - ${bucket.name}\n              - ${bucket.name}/*\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Example with deprecated version 2012-10-17\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\n// Project ID\nconst default = scaleway.getAccountProject({\n    name: \"default\",\n});\n// Object storage configuration\nconst bucket = new scaleway.ObjectBucket(\"bucket\", {\n    name: \"mia-cross-crash-tests\",\n    region: \"fr-par\",\n});\nconst policy = new scaleway.ObjectBucketPolicy(\"policy\", {\n    bucket: bucket.name,\n    policy: pulumi.jsonStringify({\n        Version: \"2012-10-17\",\n        Statement: [{\n            Effect: \"Allow\",\n            Action: [\n                \"s3:ListBucket\",\n                \"s3:GetObjectTagging\",\n            ],\n            Principal: {\n                SCW: _default.then(_default =\u003e `project_id:${_default.id}`),\n            },\n            Resource: [\n                bucket.name,\n                pulumi.interpolate`${bucket.name}/*`,\n            ],\n        }],\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\n# Project ID\ndefault = scaleway.get_account_project(name=\"default\")\n# Object storage configuration\nbucket = scaleway.ObjectBucket(\"bucket\",\n    name=\"mia-cross-crash-tests\",\n    region=\"fr-par\")\npolicy = scaleway.ObjectBucketPolicy(\"policy\",\n    bucket=bucket.name,\n    policy=pulumi.Output.json_dumps({\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [{\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:ListBucket\",\n                \"s3:GetObjectTagging\",\n            ],\n            \"Principal\": {\n                \"SCW\": f\"project_id:{default.id}\",\n            },\n            \"Resource\": [\n                bucket.name,\n                bucket.name.apply(lambda name: f\"{name}/*\"),\n            ],\n        }],\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Project ID\n    var @default = Scaleway.GetAccountProject.Invoke(new()\n    {\n        Name = \"default\",\n    });\n\n    // Object storage configuration\n    var bucket = new Scaleway.ObjectBucket(\"bucket\", new()\n    {\n        Name = \"mia-cross-crash-tests\",\n        Region = \"fr-par\",\n    });\n\n    var policy = new Scaleway.ObjectBucketPolicy(\"policy\", new()\n    {\n        Bucket = bucket.Name,\n        Policy = Output.JsonSerialize(Output.Create(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"Version\"] = \"2012-10-17\",\n            [\"Statement\"] = new[]\n            {\n                new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"Effect\"] = \"Allow\",\n                    [\"Action\"] = new[]\n                    {\n                        \"s3:ListBucket\",\n                        \"s3:GetObjectTagging\",\n                    },\n                    [\"Principal\"] = new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"SCW\"] = @default.Apply(@default =\u003e $\"project_id:{@default.Apply(getAccountProjectResult =\u003e getAccountProjectResult.Id)}\"),\n                    },\n                    [\"Resource\"] = new[]\n                    {\n                        bucket.Name,\n                        bucket.Name.Apply(name =\u003e $\"{name}/*\"),\n                    },\n                },\n            },\n        })),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Project ID\n\t\t_default, err := scaleway.LookupAccountProject(ctx, \u0026scaleway.LookupAccountProjectArgs{\n\t\t\tName: pulumi.StringRef(\"default\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Object storage configuration\n\t\tbucket, err := scaleway.NewObjectBucket(ctx, \"bucket\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tName:   pulumi.String(\"mia-cross-crash-tests\"),\n\t\t\tRegion: pulumi.String(\"fr-par\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewObjectBucketPolicy(ctx, \"policy\", \u0026scaleway.ObjectBucketPolicyArgs{\n\t\t\tBucket: bucket.Name,\n\t\t\tPolicy: pulumi.All(bucket.Name, bucket.Name).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\tbucketName := _args[0].(string)\n\t\t\t\tbucketName1 := _args[1].(string)\n\t\t\t\tvar _zero string\n\t\t\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\t\t\"Version\": \"2012-10-17\",\n\t\t\t\t\t\"Statement\": []map[string]interface{}{\n\t\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\t\"Effect\": \"Allow\",\n\t\t\t\t\t\t\t\"Action\": []string{\n\t\t\t\t\t\t\t\t\"s3:ListBucket\",\n\t\t\t\t\t\t\t\t\"s3:GetObjectTagging\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"Principal\": map[string]interface{}{\n\t\t\t\t\t\t\t\t\"SCW\": fmt.Sprintf(\"project_id:%v\", _default.Id),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"Resource\": []string{\n\t\t\t\t\t\t\t\tbucketName,\n\t\t\t\t\t\t\t\tfmt.Sprintf(\"%v/*\", bucketName1),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn _zero, err\n\t\t\t\t}\n\t\t\t\tjson0 := string(tmpJSON0)\n\t\t\t\treturn json0, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetAccountProjectArgs;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketArgs;\nimport com.pulumi.scaleway.ObjectBucketPolicy;\nimport com.pulumi.scaleway.ObjectBucketPolicyArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Project ID\n        final var default = ScalewayFunctions.getAccountProject(GetAccountProjectArgs.builder()\n            .name(\"default\")\n            .build());\n\n        // Object storage configuration\n        var bucket = new ObjectBucket(\"bucket\", ObjectBucketArgs.builder()\n            .name(\"mia-cross-crash-tests\")\n            .region(\"fr-par\")\n            .build());\n\n        var policy = new ObjectBucketPolicy(\"policy\", ObjectBucketPolicyArgs.builder()\n            .bucket(bucket.name())\n            .policy(Output.tuple(bucket.name(), bucket.name()).applyValue(values -\u003e {\n                var bucketName = values.t1;\n                var bucketName1 = values.t2;\n                return serializeJson(\n                    jsonObject(\n                        jsonProperty(\"Version\", \"2012-10-17\"),\n                        jsonProperty(\"Statement\", jsonArray(jsonObject(\n                            jsonProperty(\"Effect\", \"Allow\"),\n                            jsonProperty(\"Action\", jsonArray(\n                                \"s3:ListBucket\", \n                                \"s3:GetObjectTagging\"\n                            )),\n                            jsonProperty(\"Principal\", jsonObject(\n                                jsonProperty(\"SCW\", String.format(\"project_id:%s\", default_.id()))\n                            )),\n                            jsonProperty(\"Resource\", jsonArray(\n                                bucketName, \n                                String.format(\"%s/*\", bucketName1)\n                            ))\n                        )))\n                    ));\n            }))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Object storage configuration\n  bucket:\n    type: scaleway:ObjectBucket\n    properties:\n      name: mia-cross-crash-tests\n      region: fr-par\n  policy:\n    type: scaleway:ObjectBucketPolicy\n    properties:\n      bucket: ${bucket.name}\n      policy:\n        fn::toJSON:\n          Version: 2012-10-17\n          Statement:\n            - Effect: Allow\n              Action:\n                - s3:ListBucket\n                - s3:GetObjectTagging\n              Principal:\n                SCW: project_id:${default.id}\n              Resource:\n                - ${bucket.name}\n                - ${bucket.name}/*\nvariables:\n  # Project ID\n  default:\n    fn::invoke:\n      Function: scaleway:getAccountProject\n      Arguments:\n        name: default\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n**NB:** To configure the AWS provider with Scaleway credentials, refer to the [dedicated documentation](https://www.scaleway.com/en/docs/storage/object/api-cli/object-storage-aws-cli/).\n\n## Import\n\nBucket policies can be imported using the `{region}/{bucketName}` identifier, as shown below:\n\nbash\n\n```sh\n$ pulumi import scaleway:index/objectBucketPolicy:ObjectBucketPolicy some_bucket fr-par/some-bucket\n```\n\n~\u003e **Important:** The `project_id` attribute has a particular behavior with s3 products because the s3 API is scoped by project.\n\nIf you are using a project different from the default one, you have to specify the project ID at the end of the import command.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/objectBucketPolicy:ObjectBucketPolicy some_bucket fr-par/some-bucket@xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\n```\n\n",
            "properties": {
                "bucket": {
                    "type": "string",
                    "description": "The bucket's name or regional ID.\n"
                },
                "policy": {
                    "type": "string",
                    "description": "The text of the policy.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n"
                },
                "region": {
                    "type": "string",
                    "description": "The Scaleway region this bucket resides in.\n"
                }
            },
            "required": [
                "bucket",
                "policy",
                "projectId",
                "region"
            ],
            "inputProperties": {
                "bucket": {
                    "type": "string",
                    "description": "The bucket's name or regional ID.\n"
                },
                "policy": {
                    "type": "string",
                    "description": "The text of the policy.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The Scaleway region this bucket resides in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "bucket",
                "policy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectBucketPolicy resources.\n",
                "properties": {
                    "bucket": {
                        "type": "string",
                        "description": "The bucket's name or regional ID.\n"
                    },
                    "policy": {
                        "type": "string",
                        "description": "The text of the policy.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project_id you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The Scaleway region this bucket resides in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/objectBucketWebsiteConfiguration:ObjectBucketWebsiteConfiguration": {
            "description": "The `scaleway.ObjectBucketWebsiteConfiguration` resource allows you to deploy and manage a bucket website with [Scaleway Object storage](https://www.scaleway.com/en/docs/storage/object/).\n\nRefer to the [dedicated documentation](https://www.scaleway.com/en/docs/storage/object/how-to/use-bucket-website/) for more information on bucket websites.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.ObjectBucket(\"main\", {\n    name: \"MyBucket\",\n    acl: \"public-read\",\n});\nconst mainObjectBucketWebsiteConfiguration = new scaleway.ObjectBucketWebsiteConfiguration(\"main\", {\n    bucket: main.id,\n    indexDocument: {\n        suffix: \"index.html\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.ObjectBucket(\"main\",\n    name=\"MyBucket\",\n    acl=\"public-read\")\nmain_object_bucket_website_configuration = scaleway.ObjectBucketWebsiteConfiguration(\"main\",\n    bucket=main.id,\n    index_document={\n        \"suffix\": \"index.html\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.ObjectBucket(\"main\", new()\n    {\n        Name = \"MyBucket\",\n        Acl = \"public-read\",\n    });\n\n    var mainObjectBucketWebsiteConfiguration = new Scaleway.ObjectBucketWebsiteConfiguration(\"main\", new()\n    {\n        Bucket = main.Id,\n        IndexDocument = new Scaleway.Inputs.ObjectBucketWebsiteConfigurationIndexDocumentArgs\n        {\n            Suffix = \"index.html\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewObjectBucket(ctx, \"main\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tName: pulumi.String(\"MyBucket\"),\n\t\t\tAcl:  pulumi.String(\"public-read\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewObjectBucketWebsiteConfiguration(ctx, \"main\", \u0026scaleway.ObjectBucketWebsiteConfigurationArgs{\n\t\t\tBucket: main.ID(),\n\t\t\tIndexDocument: \u0026scaleway.ObjectBucketWebsiteConfigurationIndexDocumentArgs{\n\t\t\t\tSuffix: pulumi.String(\"index.html\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketArgs;\nimport com.pulumi.scaleway.ObjectBucketWebsiteConfiguration;\nimport com.pulumi.scaleway.ObjectBucketWebsiteConfigurationArgs;\nimport com.pulumi.scaleway.inputs.ObjectBucketWebsiteConfigurationIndexDocumentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new ObjectBucket(\"main\", ObjectBucketArgs.builder()\n            .name(\"MyBucket\")\n            .acl(\"public-read\")\n            .build());\n\n        var mainObjectBucketWebsiteConfiguration = new ObjectBucketWebsiteConfiguration(\"mainObjectBucketWebsiteConfiguration\", ObjectBucketWebsiteConfigurationArgs.builder()\n            .bucket(main.id())\n            .indexDocument(ObjectBucketWebsiteConfigurationIndexDocumentArgs.builder()\n                .suffix(\"index.html\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:ObjectBucket\n    properties:\n      name: MyBucket\n      acl: public-read\n  mainObjectBucketWebsiteConfiguration:\n    type: scaleway:ObjectBucketWebsiteConfiguration\n    name: main\n    properties:\n      bucket: ${main.id}\n      indexDocument:\n        suffix: index.html\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\n### With A Bucket Policy\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.ObjectBucket(\"main\", {\n    name: \"MyBucket\",\n    acl: \"public-read\",\n});\nconst mainObjectBucketPolicy = new scaleway.ObjectBucketPolicy(\"main\", {\n    bucket: main.id,\n    policy: JSON.stringify({\n        Version: \"2012-10-17\",\n        Id: \"MyPolicy\",\n        Statement: [{\n            Sid: \"GrantToEveryone\",\n            Effect: \"Allow\",\n            Principal: \"*\",\n            Action: [\"s3:GetObject\"],\n            Resource: [\"\u003cbucket-name\u003e/*\"],\n        }],\n    }),\n});\nconst mainObjectBucketWebsiteConfiguration = new scaleway.ObjectBucketWebsiteConfiguration(\"main\", {\n    bucket: main.id,\n    indexDocument: {\n        suffix: \"index.html\",\n    },\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.ObjectBucket(\"main\",\n    name=\"MyBucket\",\n    acl=\"public-read\")\nmain_object_bucket_policy = scaleway.ObjectBucketPolicy(\"main\",\n    bucket=main.id,\n    policy=json.dumps({\n        \"Version\": \"2012-10-17\",\n        \"Id\": \"MyPolicy\",\n        \"Statement\": [{\n            \"Sid\": \"GrantToEveryone\",\n            \"Effect\": \"Allow\",\n            \"Principal\": \"*\",\n            \"Action\": [\"s3:GetObject\"],\n            \"Resource\": [\"\u003cbucket-name\u003e/*\"],\n        }],\n    }))\nmain_object_bucket_website_configuration = scaleway.ObjectBucketWebsiteConfiguration(\"main\",\n    bucket=main.id,\n    index_document={\n        \"suffix\": \"index.html\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.ObjectBucket(\"main\", new()\n    {\n        Name = \"MyBucket\",\n        Acl = \"public-read\",\n    });\n\n    var mainObjectBucketPolicy = new Scaleway.ObjectBucketPolicy(\"main\", new()\n    {\n        Bucket = main.Id,\n        Policy = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"Version\"] = \"2012-10-17\",\n            [\"Id\"] = \"MyPolicy\",\n            [\"Statement\"] = new[]\n            {\n                new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"Sid\"] = \"GrantToEveryone\",\n                    [\"Effect\"] = \"Allow\",\n                    [\"Principal\"] = \"*\",\n                    [\"Action\"] = new[]\n                    {\n                        \"s3:GetObject\",\n                    },\n                    [\"Resource\"] = new[]\n                    {\n                        \"\u003cbucket-name\u003e/*\",\n                    },\n                },\n            },\n        }),\n    });\n\n    var mainObjectBucketWebsiteConfiguration = new Scaleway.ObjectBucketWebsiteConfiguration(\"main\", new()\n    {\n        Bucket = main.Id,\n        IndexDocument = new Scaleway.Inputs.ObjectBucketWebsiteConfigurationIndexDocumentArgs\n        {\n            Suffix = \"index.html\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewObjectBucket(ctx, \"main\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tName: pulumi.String(\"MyBucket\"),\n\t\t\tAcl:  pulumi.String(\"public-read\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"Version\": \"2012-10-17\",\n\t\t\t\"Id\":      \"MyPolicy\",\n\t\t\t\"Statement\": []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"Sid\":       \"GrantToEveryone\",\n\t\t\t\t\t\"Effect\":    \"Allow\",\n\t\t\t\t\t\"Principal\": \"*\",\n\t\t\t\t\t\"Action\": []string{\n\t\t\t\t\t\t\"s3:GetObject\",\n\t\t\t\t\t},\n\t\t\t\t\t\"Resource\": []string{\n\t\t\t\t\t\t\"\u003cbucket-name\u003e/*\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = scaleway.NewObjectBucketPolicy(ctx, \"main\", \u0026scaleway.ObjectBucketPolicyArgs{\n\t\t\tBucket: main.ID(),\n\t\t\tPolicy: pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewObjectBucketWebsiteConfiguration(ctx, \"main\", \u0026scaleway.ObjectBucketWebsiteConfigurationArgs{\n\t\t\tBucket: main.ID(),\n\t\t\tIndexDocument: \u0026scaleway.ObjectBucketWebsiteConfigurationIndexDocumentArgs{\n\t\t\t\tSuffix: pulumi.String(\"index.html\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketArgs;\nimport com.pulumi.scaleway.ObjectBucketPolicy;\nimport com.pulumi.scaleway.ObjectBucketPolicyArgs;\nimport com.pulumi.scaleway.ObjectBucketWebsiteConfiguration;\nimport com.pulumi.scaleway.ObjectBucketWebsiteConfigurationArgs;\nimport com.pulumi.scaleway.inputs.ObjectBucketWebsiteConfigurationIndexDocumentArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new ObjectBucket(\"main\", ObjectBucketArgs.builder()\n            .name(\"MyBucket\")\n            .acl(\"public-read\")\n            .build());\n\n        var mainObjectBucketPolicy = new ObjectBucketPolicy(\"mainObjectBucketPolicy\", ObjectBucketPolicyArgs.builder()\n            .bucket(main.id())\n            .policy(serializeJson(\n                jsonObject(\n                    jsonProperty(\"Version\", \"2012-10-17\"),\n                    jsonProperty(\"Id\", \"MyPolicy\"),\n                    jsonProperty(\"Statement\", jsonArray(jsonObject(\n                        jsonProperty(\"Sid\", \"GrantToEveryone\"),\n                        jsonProperty(\"Effect\", \"Allow\"),\n                        jsonProperty(\"Principal\", \"*\"),\n                        jsonProperty(\"Action\", jsonArray(\"s3:GetObject\")),\n                        jsonProperty(\"Resource\", jsonArray(\"\u003cbucket-name\u003e/*\"))\n                    )))\n                )))\n            .build());\n\n        var mainObjectBucketWebsiteConfiguration = new ObjectBucketWebsiteConfiguration(\"mainObjectBucketWebsiteConfiguration\", ObjectBucketWebsiteConfigurationArgs.builder()\n            .bucket(main.id())\n            .indexDocument(ObjectBucketWebsiteConfigurationIndexDocumentArgs.builder()\n                .suffix(\"index.html\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:ObjectBucket\n    properties:\n      name: MyBucket\n      acl: public-read\n  mainObjectBucketPolicy:\n    type: scaleway:ObjectBucketPolicy\n    name: main\n    properties:\n      bucket: ${main.id}\n      policy:\n        fn::toJSON:\n          Version: 2012-10-17\n          Id: MyPolicy\n          Statement:\n            - Sid: GrantToEveryone\n              Effect: Allow\n              Principal: '*'\n              Action:\n                - s3:GetObject\n              Resource:\n                - \u003cbucket-name\u003e/*\n  mainObjectBucketWebsiteConfiguration:\n    type: scaleway:ObjectBucketWebsiteConfiguration\n    name: main\n    properties:\n      bucket: ${main.id}\n      indexDocument:\n        suffix: index.html\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nBucket website configurations can be imported using the `{region}/{bucketName}` identifier, as shown below:\n\nbash\n\n```sh\n$ pulumi import scaleway:index/objectBucketWebsiteConfiguration:ObjectBucketWebsiteConfiguration some_bucket fr-par/some-bucket\n```\n\n~\u003e **Important:** The `project_id` attribute has a particular behavior with s3 products because the s3 API is scoped by project.\n\nIf you are using a project different from the default one, you have to specify the project ID at the end of the import command.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/objectBucketWebsiteConfiguration:ObjectBucketWebsiteConfiguration some_bucket fr-par/some-bucket@xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\n```\n\n",
            "properties": {
                "bucket": {
                    "type": "string",
                    "description": "The name of the bucket.\n"
                },
                "errorDocument": {
                    "$ref": "#/types/scaleway:index/ObjectBucketWebsiteConfigurationErrorDocument:ObjectBucketWebsiteConfigurationErrorDocument",
                    "description": "The name of the error file for the website detailed below.\n"
                },
                "indexDocument": {
                    "$ref": "#/types/scaleway:index/ObjectBucketWebsiteConfigurationIndexDocument:ObjectBucketWebsiteConfigurationIndexDocument",
                    "description": "The name of the index file for the website detailed below.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n"
                },
                "websiteDomain": {
                    "type": "string",
                    "description": "The domain of the website endpoint. This is used to create DNS alias [records](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/).\n"
                },
                "websiteEndpoint": {
                    "type": "string",
                    "description": "The website endpoint.\n"
                }
            },
            "required": [
                "bucket",
                "indexDocument",
                "projectId",
                "region",
                "websiteDomain",
                "websiteEndpoint"
            ],
            "inputProperties": {
                "bucket": {
                    "type": "string",
                    "description": "The name of the bucket.\n",
                    "willReplaceOnChanges": true
                },
                "errorDocument": {
                    "$ref": "#/types/scaleway:index/ObjectBucketWebsiteConfigurationErrorDocument:ObjectBucketWebsiteConfigurationErrorDocument",
                    "description": "The name of the error file for the website detailed below.\n"
                },
                "indexDocument": {
                    "$ref": "#/types/scaleway:index/ObjectBucketWebsiteConfigurationIndexDocument:ObjectBucketWebsiteConfigurationIndexDocument",
                    "description": "The name of the index file for the website detailed below.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "bucket",
                "indexDocument"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectBucketWebsiteConfiguration resources.\n",
                "properties": {
                    "bucket": {
                        "type": "string",
                        "description": "The name of the bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "errorDocument": {
                        "$ref": "#/types/scaleway:index/ObjectBucketWebsiteConfigurationErrorDocument:ObjectBucketWebsiteConfigurationErrorDocument",
                        "description": "The name of the error file for the website detailed below.\n"
                    },
                    "indexDocument": {
                        "$ref": "#/types/scaleway:index/ObjectBucketWebsiteConfigurationIndexDocument:ObjectBucketWebsiteConfigurationIndexDocument",
                        "description": "The name of the index file for the website detailed below.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project_id you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    },
                    "websiteDomain": {
                        "type": "string",
                        "description": "The domain of the website endpoint. This is used to create DNS alias [records](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/).\n"
                    },
                    "websiteEndpoint": {
                        "type": "string",
                        "description": "The website endpoint.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/objectItem:ObjectItem": {
            "description": "The `scaleway.ObjectItem` resource allows you to create and manage objects for [Scaleway Object storage](https://www.scaleway.com/en/docs/storage/object/).\n\nRefer to the [dedicated documentation](https://www.scaleway.com/en/docs/storage/object/how-to/upload-files-into-a-bucket/) for more information on Object Storage objects.\n\n## Import\n\nObjects can be imported using the `{region}/{bucketName}/{objectKey}` identifier, as shown below:\n\nbash\n\n```sh\n$ pulumi import scaleway:index/objectItem:ObjectItem some_object fr-par/some-bucket/some-file\n```\n\n~\u003e **Important:** The `project_id` attribute has a particular behavior with s3 products because the s3 API is scoped by project.\n\nIf you are using a project different from the default one, you have to specify the project ID at the end of the import command.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/objectItem:ObjectItem some_object fr-par/some-bucket/some-file@xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\n```\n\n",
            "properties": {
                "bucket": {
                    "type": "string",
                    "description": "The bucket's name or regional ID.\n"
                },
                "content": {
                    "type": "string",
                    "description": "The content of the file to upload. Only one of `file`, `content` or `content_base64` can be defined.\n"
                },
                "contentBase64": {
                    "type": "string",
                    "description": "The base64-encoded content of the file to upload. Only one of `file`, `content` or `content_base64` can be defined.\n\n\u003e **Note:** Only one of `file`, `content` or `content_base64` can be defined.\n"
                },
                "file": {
                    "type": "string",
                    "description": "The name of the file to upload, defaults to an empty file.\n"
                },
                "hash": {
                    "type": "string",
                    "description": "Hash of the file, used to trigger the upload on file change.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The path to the object.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of metadata used for the object (keys must be lowercase).\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n"
                },
                "region": {
                    "type": "string",
                    "description": "The Scaleway region the bucket resides in.\n"
                },
                "storageClass": {
                    "type": "string",
                    "description": "Specifies the Scaleway [storage class](https://www.scaleway.com/en/docs/storage/object/concepts/#storage-class) (`STANDARD`, `GLACIER`, or `ONEZONE_IA`) used to store the object.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of tags.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Visibility of the object, `public-read` or `private`.\n"
                }
            },
            "required": [
                "bucket",
                "key",
                "projectId",
                "region",
                "visibility"
            ],
            "inputProperties": {
                "bucket": {
                    "type": "string",
                    "description": "The bucket's name or regional ID.\n"
                },
                "content": {
                    "type": "string",
                    "description": "The content of the file to upload. Only one of `file`, `content` or `content_base64` can be defined.\n"
                },
                "contentBase64": {
                    "type": "string",
                    "description": "The base64-encoded content of the file to upload. Only one of `file`, `content` or `content_base64` can be defined.\n\n\u003e **Note:** Only one of `file`, `content` or `content_base64` can be defined.\n"
                },
                "file": {
                    "type": "string",
                    "description": "The name of the file to upload, defaults to an empty file.\n"
                },
                "hash": {
                    "type": "string",
                    "description": "Hash of the file, used to trigger the upload on file change.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The path to the object.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of metadata used for the object (keys must be lowercase).\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The Scaleway region the bucket resides in.\n",
                    "willReplaceOnChanges": true
                },
                "storageClass": {
                    "type": "string",
                    "description": "Specifies the Scaleway [storage class](https://www.scaleway.com/en/docs/storage/object/concepts/#storage-class) (`STANDARD`, `GLACIER`, or `ONEZONE_IA`) used to store the object.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of tags.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Visibility of the object, `public-read` or `private`.\n"
                }
            },
            "requiredInputs": [
                "bucket",
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectItem resources.\n",
                "properties": {
                    "bucket": {
                        "type": "string",
                        "description": "The bucket's name or regional ID.\n"
                    },
                    "content": {
                        "type": "string",
                        "description": "The content of the file to upload. Only one of `file`, `content` or `content_base64` can be defined.\n"
                    },
                    "contentBase64": {
                        "type": "string",
                        "description": "The base64-encoded content of the file to upload. Only one of `file`, `content` or `content_base64` can be defined.\n\n\u003e **Note:** Only one of `file`, `content` or `content_base64` can be defined.\n"
                    },
                    "file": {
                        "type": "string",
                        "description": "The name of the file to upload, defaults to an empty file.\n"
                    },
                    "hash": {
                        "type": "string",
                        "description": "Hash of the file, used to trigger the upload on file change.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The path to the object.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of metadata used for the object (keys must be lowercase).\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project_id you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The Scaleway region the bucket resides in.\n",
                        "willReplaceOnChanges": true
                    },
                    "storageClass": {
                        "type": "string",
                        "description": "Specifies the Scaleway [storage class](https://www.scaleway.com/en/docs/storage/object/concepts/#storage-class) (`STANDARD`, `GLACIER`, or `ONEZONE_IA`) used to store the object.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of tags.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Visibility of the object, `public-read` or `private`.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/redisCluster:RedisCluster": {
            "description": "Creates and manages Scaleway Redis™ clusters.\nFor more information refer to [the API documentation](https://www.scaleway.com/en/developers/api/managed-database-redis).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.RedisCluster(\"main\", {\n    name: \"test_redis_basic\",\n    version: \"6.2.7\",\n    nodeType: \"RED1-MICRO\",\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    tags: [\n        \"test\",\n        \"redis\",\n    ],\n    clusterSize: 1,\n    tlsEnabled: true,\n    acls: [{\n        ip: \"0.0.0.0/0\",\n        description: \"Allow all\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.RedisCluster(\"main\",\n    name=\"test_redis_basic\",\n    version=\"6.2.7\",\n    node_type=\"RED1-MICRO\",\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    tags=[\n        \"test\",\n        \"redis\",\n    ],\n    cluster_size=1,\n    tls_enabled=True,\n    acls=[{\n        \"ip\": \"0.0.0.0/0\",\n        \"description\": \"Allow all\",\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.RedisCluster(\"main\", new()\n    {\n        Name = \"test_redis_basic\",\n        Version = \"6.2.7\",\n        NodeType = \"RED1-MICRO\",\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        Tags = new[]\n        {\n            \"test\",\n            \"redis\",\n        },\n        ClusterSize = 1,\n        TlsEnabled = true,\n        Acls = new[]\n        {\n            new Scaleway.Inputs.RedisClusterAclArgs\n            {\n                Ip = \"0.0.0.0/0\",\n                Description = \"Allow all\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewRedisCluster(ctx, \"main\", \u0026scaleway.RedisClusterArgs{\n\t\t\tName:     pulumi.String(\"test_redis_basic\"),\n\t\t\tVersion:  pulumi.String(\"6.2.7\"),\n\t\t\tNodeType: pulumi.String(\"RED1-MICRO\"),\n\t\t\tUserName: pulumi.String(\"my_initial_user\"),\n\t\t\tPassword: pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"test\"),\n\t\t\t\tpulumi.String(\"redis\"),\n\t\t\t},\n\t\t\tClusterSize: pulumi.Int(1),\n\t\t\tTlsEnabled:  pulumi.Bool(true),\n\t\t\tAcls: scaleway.RedisClusterAclArray{\n\t\t\t\t\u0026scaleway.RedisClusterAclArgs{\n\t\t\t\t\tIp:          pulumi.String(\"0.0.0.0/0\"),\n\t\t\t\t\tDescription: pulumi.String(\"Allow all\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.RedisCluster;\nimport com.pulumi.scaleway.RedisClusterArgs;\nimport com.pulumi.scaleway.inputs.RedisClusterAclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new RedisCluster(\"main\", RedisClusterArgs.builder()\n            .name(\"test_redis_basic\")\n            .version(\"6.2.7\")\n            .nodeType(\"RED1-MICRO\")\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .tags(            \n                \"test\",\n                \"redis\")\n            .clusterSize(1)\n            .tlsEnabled(\"true\")\n            .acls(RedisClusterAclArgs.builder()\n                .ip(\"0.0.0.0/0\")\n                .description(\"Allow all\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:RedisCluster\n    properties:\n      name: test_redis_basic\n      version: 6.2.7\n      nodeType: RED1-MICRO\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n      tags:\n        - test\n        - redis\n      clusterSize: 1\n      tlsEnabled: 'true'\n      acls:\n        - ip: 0.0.0.0/0\n          description: Allow all\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### With settings\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.RedisCluster(\"main\", {\n    name: \"test_redis_basic\",\n    version: \"6.2.7\",\n    nodeType: \"RED1-MICRO\",\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    settings: {\n        maxclients: \"1000\",\n        \"tcp-keepalive\": \"120\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.RedisCluster(\"main\",\n    name=\"test_redis_basic\",\n    version=\"6.2.7\",\n    node_type=\"RED1-MICRO\",\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    settings={\n        \"maxclients\": \"1000\",\n        \"tcp-keepalive\": \"120\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.RedisCluster(\"main\", new()\n    {\n        Name = \"test_redis_basic\",\n        Version = \"6.2.7\",\n        NodeType = \"RED1-MICRO\",\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        Settings = \n        {\n            { \"maxclients\", \"1000\" },\n            { \"tcp-keepalive\", \"120\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewRedisCluster(ctx, \"main\", \u0026scaleway.RedisClusterArgs{\n\t\t\tName:     pulumi.String(\"test_redis_basic\"),\n\t\t\tVersion:  pulumi.String(\"6.2.7\"),\n\t\t\tNodeType: pulumi.String(\"RED1-MICRO\"),\n\t\t\tUserName: pulumi.String(\"my_initial_user\"),\n\t\t\tPassword: pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tSettings: pulumi.StringMap{\n\t\t\t\t\"maxclients\":    pulumi.String(\"1000\"),\n\t\t\t\t\"tcp-keepalive\": pulumi.String(\"120\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.RedisCluster;\nimport com.pulumi.scaleway.RedisClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new RedisCluster(\"main\", RedisClusterArgs.builder()\n            .name(\"test_redis_basic\")\n            .version(\"6.2.7\")\n            .nodeType(\"RED1-MICRO\")\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .settings(Map.ofEntries(\n                Map.entry(\"maxclients\", \"1000\"),\n                Map.entry(\"tcp-keepalive\", \"120\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:RedisCluster\n    properties:\n      name: test_redis_basic\n      version: 6.2.7\n      nodeType: RED1-MICRO\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n      settings:\n        maxclients: '1000'\n        tcp-keepalive: '120'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### With a Private Network\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst pn = new scaleway.VpcPrivateNetwork(\"pn\", {name: \"private-network\"});\nconst main = new scaleway.RedisCluster(\"main\", {\n    name: \"test_redis_endpoints\",\n    version: \"6.2.7\",\n    nodeType: \"RED1-MICRO\",\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    clusterSize: 1,\n    privateNetworks: [{\n        id: pn.id,\n        serviceIps: [\"10.12.1.1/20\"],\n    }],\n}, {\n    dependsOn: [pn],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\npn = scaleway.VpcPrivateNetwork(\"pn\", name=\"private-network\")\nmain = scaleway.RedisCluster(\"main\",\n    name=\"test_redis_endpoints\",\n    version=\"6.2.7\",\n    node_type=\"RED1-MICRO\",\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    cluster_size=1,\n    private_networks=[{\n        \"id\": pn.id,\n        \"service_ips\": [\"10.12.1.1/20\"],\n    }],\n    opts = pulumi.ResourceOptions(depends_on=[pn]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pn = new Scaleway.VpcPrivateNetwork(\"pn\", new()\n    {\n        Name = \"private-network\",\n    });\n\n    var main = new Scaleway.RedisCluster(\"main\", new()\n    {\n        Name = \"test_redis_endpoints\",\n        Version = \"6.2.7\",\n        NodeType = \"RED1-MICRO\",\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        ClusterSize = 1,\n        PrivateNetworks = new[]\n        {\n            new Scaleway.Inputs.RedisClusterPrivateNetworkArgs\n            {\n                Id = pn.Id,\n                ServiceIps = new[]\n                {\n                    \"10.12.1.1/20\",\n                },\n            },\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn =\n        {\n            pn,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tName: pulumi.String(\"private-network\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewRedisCluster(ctx, \"main\", \u0026scaleway.RedisClusterArgs{\n\t\t\tName:        pulumi.String(\"test_redis_endpoints\"),\n\t\t\tVersion:     pulumi.String(\"6.2.7\"),\n\t\t\tNodeType:    pulumi.String(\"RED1-MICRO\"),\n\t\t\tUserName:    pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:    pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tClusterSize: pulumi.Int(1),\n\t\t\tPrivateNetworks: scaleway.RedisClusterPrivateNetworkArray{\n\t\t\t\t\u0026scaleway.RedisClusterPrivateNetworkArgs{\n\t\t\t\t\tId: pn.ID(),\n\t\t\t\t\tServiceIps: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"10.12.1.1/20\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tpn,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.RedisCluster;\nimport com.pulumi.scaleway.RedisClusterArgs;\nimport com.pulumi.scaleway.inputs.RedisClusterPrivateNetworkArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pn = new VpcPrivateNetwork(\"pn\", VpcPrivateNetworkArgs.builder()\n            .name(\"private-network\")\n            .build());\n\n        var main = new RedisCluster(\"main\", RedisClusterArgs.builder()\n            .name(\"test_redis_endpoints\")\n            .version(\"6.2.7\")\n            .nodeType(\"RED1-MICRO\")\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .clusterSize(1)\n            .privateNetworks(RedisClusterPrivateNetworkArgs.builder()\n                .id(pn.id())\n                .serviceIps(\"10.12.1.1/20\")\n                .build())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(pn)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pn:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      name: private-network\n  main:\n    type: scaleway:RedisCluster\n    properties:\n      name: test_redis_endpoints\n      version: 6.2.7\n      nodeType: RED1-MICRO\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n      clusterSize: 1\n      privateNetworks:\n        - id: ${pn.id}\n          serviceIps:\n            - 10.12.1.1/20\n    options:\n      dependson:\n        - ${pn}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nRedis™ cluster can be imported using the `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/redisCluster:RedisCluster main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/RedisClusterAcl:RedisClusterAcl"
                    },
                    "description": "List of acl rules, this is cluster's authorized IPs. More details on the ACL section.\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "The PEM of the certificate used by redis, only when `tls_enabled` is true\n"
                },
                "clusterSize": {
                    "type": "integer",
                    "description": "The number of nodes in the Redis™ cluster.\n\n\u003e **Important:** You cannot set `cluster_size` to 2, you either have to choose Standalone mode (1 node) or cluster mode\nwhich is minimum 3 (1 main node + 2 secondary nodes)\n\n\u003e **Important:** If you are using the cluster mode (\u003e=3 nodes), you can set a bigger `cluster_size` than you initially\ndid, it will migrate the Redis™ cluster but keep in mind that you cannot downgrade a Redis™ cluster, so setting a smaller\n`cluster_size` will destroy and recreate your cluster.\n\n\u003e **Important:** If you are using the Standalone mode (1 node), setting a bigger `cluster_size` will destroy and\nrecreate your cluster as you will be switching to the cluster mode.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of creation of the Redis™ cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Redis™ cluster.\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "The type of Redis™ cluster you want to create (e.g. `RED1-M`).\n\n\u003e **Important:** Updates to `node_type` will migrate the Redis™ cluster to the desired `node_type`. Keep in mind that\nyou cannot downgrade a Redis™ cluster.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the first user of the Redis™ cluster.\n",
                    "secret": true
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/RedisClusterPrivateNetwork:RedisClusterPrivateNetwork"
                    },
                    "description": "Describes the Private Network you want to connect to your cluster. If not set, a public\nnetwork will be provided. More details on the Private Network section\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the Redis™ cluster is\nassociated with.\n"
                },
                "publicNetwork": {
                    "$ref": "#/types/scaleway:index/RedisClusterPublicNetwork:RedisClusterPublicNetwork",
                    "description": "(Optional) Public network details. Only one of `private_network` and `public_network` may be set.\n\u003e The `public_network` block exports:\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of settings for Redis™ cluster. Available settings can be found by listing Redis™ versions\nwith scaleway API or CLI\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Redis™ cluster.\n"
                },
                "tlsEnabled": {
                    "type": "boolean",
                    "description": "Whether TLS is enabled or not.\n\n\u003e The changes on `tls_enabled` will force the resource creation.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the Redis™ cluster.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Identifier for the first user of the Redis™ cluster.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Redis™ cluster's version (e.g. `6.2.7`).\n\n\u003e **Important:** Updates to `version` will migrate the Redis™ cluster to the desired `version`. Keep in mind that you\ncannot downgrade a Redis™ cluster.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the\nRedis™ cluster should be created.\n"
                }
            },
            "required": [
                "certificate",
                "clusterSize",
                "createdAt",
                "name",
                "nodeType",
                "password",
                "projectId",
                "publicNetwork",
                "updatedAt",
                "userName",
                "version",
                "zone"
            ],
            "inputProperties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/RedisClusterAcl:RedisClusterAcl"
                    },
                    "description": "List of acl rules, this is cluster's authorized IPs. More details on the ACL section.\n"
                },
                "clusterSize": {
                    "type": "integer",
                    "description": "The number of nodes in the Redis™ cluster.\n\n\u003e **Important:** You cannot set `cluster_size` to 2, you either have to choose Standalone mode (1 node) or cluster mode\nwhich is minimum 3 (1 main node + 2 secondary nodes)\n\n\u003e **Important:** If you are using the cluster mode (\u003e=3 nodes), you can set a bigger `cluster_size` than you initially\ndid, it will migrate the Redis™ cluster but keep in mind that you cannot downgrade a Redis™ cluster, so setting a smaller\n`cluster_size` will destroy and recreate your cluster.\n\n\u003e **Important:** If you are using the Standalone mode (1 node), setting a bigger `cluster_size` will destroy and\nrecreate your cluster as you will be switching to the cluster mode.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Redis™ cluster.\n"
                },
                "nodeType": {
                    "type": "string",
                    "description": "The type of Redis™ cluster you want to create (e.g. `RED1-M`).\n\n\u003e **Important:** Updates to `node_type` will migrate the Redis™ cluster to the desired `node_type`. Keep in mind that\nyou cannot downgrade a Redis™ cluster.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the first user of the Redis™ cluster.\n",
                    "secret": true
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/RedisClusterPrivateNetwork:RedisClusterPrivateNetwork"
                    },
                    "description": "Describes the Private Network you want to connect to your cluster. If not set, a public\nnetwork will be provided. More details on the Private Network section\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the Redis™ cluster is\nassociated with.\n",
                    "willReplaceOnChanges": true
                },
                "publicNetwork": {
                    "$ref": "#/types/scaleway:index/RedisClusterPublicNetwork:RedisClusterPublicNetwork",
                    "description": "(Optional) Public network details. Only one of `private_network` and `public_network` may be set.\n\u003e The `public_network` block exports:\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of settings for Redis™ cluster. Available settings can be found by listing Redis™ versions\nwith scaleway API or CLI\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Redis™ cluster.\n"
                },
                "tlsEnabled": {
                    "type": "boolean",
                    "description": "Whether TLS is enabled or not.\n\n\u003e The changes on `tls_enabled` will force the resource creation.\n",
                    "willReplaceOnChanges": true
                },
                "userName": {
                    "type": "string",
                    "description": "Identifier for the first user of the Redis™ cluster.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Redis™ cluster's version (e.g. `6.2.7`).\n\n\u003e **Important:** Updates to `version` will migrate the Redis™ cluster to the desired `version`. Keep in mind that you\ncannot downgrade a Redis™ cluster.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the\nRedis™ cluster should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "nodeType",
                "password",
                "userName",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RedisCluster resources.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/RedisClusterAcl:RedisClusterAcl"
                        },
                        "description": "List of acl rules, this is cluster's authorized IPs. More details on the ACL section.\n"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "The PEM of the certificate used by redis, only when `tls_enabled` is true\n"
                    },
                    "clusterSize": {
                        "type": "integer",
                        "description": "The number of nodes in the Redis™ cluster.\n\n\u003e **Important:** You cannot set `cluster_size` to 2, you either have to choose Standalone mode (1 node) or cluster mode\nwhich is minimum 3 (1 main node + 2 secondary nodes)\n\n\u003e **Important:** If you are using the cluster mode (\u003e=3 nodes), you can set a bigger `cluster_size` than you initially\ndid, it will migrate the Redis™ cluster but keep in mind that you cannot downgrade a Redis™ cluster, so setting a smaller\n`cluster_size` will destroy and recreate your cluster.\n\n\u003e **Important:** If you are using the Standalone mode (1 node), setting a bigger `cluster_size` will destroy and\nrecreate your cluster as you will be switching to the cluster mode.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of creation of the Redis™ cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Redis™ cluster.\n"
                    },
                    "nodeType": {
                        "type": "string",
                        "description": "The type of Redis™ cluster you want to create (e.g. `RED1-M`).\n\n\u003e **Important:** Updates to `node_type` will migrate the Redis™ cluster to the desired `node_type`. Keep in mind that\nyou cannot downgrade a Redis™ cluster.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for the first user of the Redis™ cluster.\n",
                        "secret": true
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/RedisClusterPrivateNetwork:RedisClusterPrivateNetwork"
                        },
                        "description": "Describes the Private Network you want to connect to your cluster. If not set, a public\nnetwork will be provided. More details on the Private Network section\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the Redis™ cluster is\nassociated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicNetwork": {
                        "$ref": "#/types/scaleway:index/RedisClusterPublicNetwork:RedisClusterPublicNetwork",
                        "description": "(Optional) Public network details. Only one of `private_network` and `public_network` may be set.\n\u003e The `public_network` block exports:\n"
                    },
                    "settings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of settings for Redis™ cluster. Available settings can be found by listing Redis™ versions\nwith scaleway API or CLI\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the Redis™ cluster.\n"
                    },
                    "tlsEnabled": {
                        "type": "boolean",
                        "description": "Whether TLS is enabled or not.\n\n\u003e The changes on `tls_enabled` will force the resource creation.\n",
                        "willReplaceOnChanges": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the Redis™ cluster.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "Identifier for the first user of the Redis™ cluster.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Redis™ cluster's version (e.g. `6.2.7`).\n\n\u003e **Important:** Updates to `version` will migrate the Redis™ cluster to the desired `version`. Keep in mind that you\ncannot downgrade a Redis™ cluster.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the\nRedis™ cluster should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/registryNamespace:RegistryNamespace": {
            "description": "Creates and manages Scaleway Container Registry.\nFor more information refer to [the API documentation](https://www.scaleway.com/en/developers/api/registry).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.RegistryNamespace(\"main\", {\n    name: \"main-cr\",\n    description: \"Main container registry\",\n    isPublic: false,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.RegistryNamespace(\"main\",\n    name=\"main-cr\",\n    description=\"Main container registry\",\n    is_public=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.RegistryNamespace(\"main\", new()\n    {\n        Name = \"main-cr\",\n        Description = \"Main container registry\",\n        IsPublic = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewRegistryNamespace(ctx, \"main\", \u0026scaleway.RegistryNamespaceArgs{\n\t\t\tName:        pulumi.String(\"main-cr\"),\n\t\t\tDescription: pulumi.String(\"Main container registry\"),\n\t\t\tIsPublic:    pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.RegistryNamespace;\nimport com.pulumi.scaleway.RegistryNamespaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new RegistryNamespace(\"main\", RegistryNamespaceArgs.builder()\n            .name(\"main-cr\")\n            .description(\"Main container registry\")\n            .isPublic(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:RegistryNamespace\n    properties:\n      name: main-cr\n      description: Main container registry\n      isPublic: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nNamespaces can be imported using the `{region}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/registryNamespace:RegistryNamespace main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the namespace.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Endpoint reachable by Docker.\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "Whether the images stored in the namespace should be downloadable publicly (docker pull).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the namespace.\n\n\u003e **Important** Updates to `name` will recreate the namespace.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The Organization ID the namespace is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the namespace is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n"
                }
            },
            "required": [
                "endpoint",
                "name",
                "organizationId",
                "projectId",
                "region"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the namespace.\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "Whether the images stored in the namespace should be downloadable publicly (docker pull).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the namespace.\n\n\u003e **Important** Updates to `name` will recreate the namespace.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the namespace is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the namespace should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RegistryNamespace resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the namespace.\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "Endpoint reachable by Docker.\n"
                    },
                    "isPublic": {
                        "type": "boolean",
                        "description": "Whether the images stored in the namespace should be downloadable publicly (docker pull).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the namespace.\n\n\u003e **Important** Updates to `name` will recreate the namespace.\n",
                        "willReplaceOnChanges": true
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The Organization ID the namespace is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the namespace is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the namespace should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/sdbDatabase:SdbDatabase": {
            "description": "The `scaleway.SdbDatabase` resource allows you to create and manage databases for Scaleway Serverless SQL Databases.\n\nRefer to the Serverless SQL Databases [documentation](https://www.scaleway.com/en/docs/serverless/sql-databases/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-databases/) for more information.\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst database = new scaleway.SdbDatabase(\"database\", {\n    name: \"my-database\",\n    minCpu: 0,\n    maxCpu: 8,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\ndatabase = scaleway.SdbDatabase(\"database\",\n    name=\"my-database\",\n    min_cpu=0,\n    max_cpu=8)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var database = new Scaleway.SdbDatabase(\"database\", new()\n    {\n        Name = \"my-database\",\n        MinCpu = 0,\n        MaxCpu = 8,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewSdbDatabase(ctx, \"database\", \u0026scaleway.SdbDatabaseArgs{\n\t\t\tName:   pulumi.String(\"my-database\"),\n\t\t\tMinCpu: pulumi.Int(0),\n\t\t\tMaxCpu: pulumi.Int(8),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.SdbDatabase;\nimport com.pulumi.scaleway.SdbDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var database = new SdbDatabase(\"database\", SdbDatabaseArgs.builder()\n            .name(\"my-database\")\n            .minCpu(0)\n            .maxCpu(8)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  database:\n    type: scaleway:SdbDatabase\n    properties:\n      name: my-database\n      minCpu: 0\n      maxCpu: 8\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nServerless SQL Databases can be imported using the `{region}/{id}`, as shown below:\n\nbash\n\n```sh\n$ pulumi import scaleway:index/sdbDatabase:SdbDatabase database fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint of the database.\n"
                },
                "maxCpu": {
                    "type": "integer",
                    "description": "The maximum number of CPU units for your database. Defaults to 15.\n"
                },
                "minCpu": {
                    "type": "integer",
                    "description": "The minimum number of CPU units for your database. Defaults to 0.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the database (e.g. `my-new-database`).\n\n\u003e **Important:** Updates to the `name` argument will recreate the database.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the resource exists.\n"
                }
            },
            "required": [
                "endpoint",
                "name",
                "projectId",
                "region"
            ],
            "inputProperties": {
                "maxCpu": {
                    "type": "integer",
                    "description": "The maximum number of CPU units for your database. Defaults to 15.\n"
                },
                "minCpu": {
                    "type": "integer",
                    "description": "The minimum number of CPU units for your database. Defaults to 0.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the database (e.g. `my-new-database`).\n\n\u003e **Important:** Updates to the `name` argument will recreate the database.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The project_id you want to attach the resource to\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region in which the resource exists.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SdbDatabase resources.\n",
                "properties": {
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint of the database.\n"
                    },
                    "maxCpu": {
                        "type": "integer",
                        "description": "The maximum number of CPU units for your database. Defaults to 15.\n"
                    },
                    "minCpu": {
                        "type": "integer",
                        "description": "The minimum number of CPU units for your database. Defaults to 0.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the database (e.g. `my-new-database`).\n\n\u003e **Important:** Updates to the `name` argument will recreate the database.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project_id you want to attach the resource to\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the resource exists.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/secret:Secret": {
            "description": "\n\n## Import\n\nThis section explains how to import a secret using the `{region}/{id}` format.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/secret:Secret main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date and time of the secret's creation (in RFC 3339 format).\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the secret (e.g. `my-new-description`).\n"
                },
                "ephemeralPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/SecretEphemeralPolicy:SecretEphemeralPolicy"
                    },
                    "description": "Ephemeral policy of the secret. Policy that defines whether/when a secret's versions expire. By default, the policy is applied to all the secret's versions.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the secret (e.g. `my-secret`).\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path of the secret, defaults to `/`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID containing is the secret.\n"
                },
                "protected": {
                    "type": "boolean",
                    "description": "True if secret protection is enabled on a given secret. A protected secret cannot be deleted.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region\nin which the resource exists.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the secret.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags of the secret (e.g. `[\"tag\", \"secret\"]`).\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the secret. If not specified, the type is Opaque. Available values can be found in [SDK Constants](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/secret/v1beta1#pkg-constants).\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date and time of the secret's last update (in RFC 3339 format).\n"
                },
                "versionCount": {
                    "type": "integer",
                    "description": "The amount of secret versions.\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "projectId",
                "region",
                "status",
                "updatedAt",
                "versionCount"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the secret (e.g. `my-new-description`).\n"
                },
                "ephemeralPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/SecretEphemeralPolicy:SecretEphemeralPolicy"
                    },
                    "description": "Ephemeral policy of the secret. Policy that defines whether/when a secret's versions expire. By default, the policy is applied to all the secret's versions.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the secret (e.g. `my-secret`).\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path of the secret, defaults to `/`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID containing is the secret.\n",
                    "willReplaceOnChanges": true
                },
                "protected": {
                    "type": "boolean",
                    "description": "True if secret protection is enabled on a given secret. A protected secret cannot be deleted.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region\nin which the resource exists.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags of the secret (e.g. `[\"tag\", \"secret\"]`).\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the secret. If not specified, the type is Opaque. Available values can be found in [SDK Constants](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/secret/v1beta1#pkg-constants).\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Secret resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date and time of the secret's creation (in RFC 3339 format).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the secret (e.g. `my-new-description`).\n"
                    },
                    "ephemeralPolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/SecretEphemeralPolicy:SecretEphemeralPolicy"
                        },
                        "description": "Ephemeral policy of the secret. Policy that defines whether/when a secret's versions expire. By default, the policy is applied to all the secret's versions.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the secret (e.g. `my-secret`).\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "Path of the secret, defaults to `/`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID containing is the secret.\n",
                        "willReplaceOnChanges": true
                    },
                    "protected": {
                        "type": "boolean",
                        "description": "True if secret protection is enabled on a given secret. A protected secret cannot be deleted.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region\nin which the resource exists.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the secret.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags of the secret (e.g. `[\"tag\", \"secret\"]`).\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the secret. If not specified, the type is Opaque. Available values can be found in [SDK Constants](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/secret/v1beta1#pkg-constants).\n",
                        "willReplaceOnChanges": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date and time of the secret's last update (in RFC 3339 format).\n"
                    },
                    "versionCount": {
                        "type": "integer",
                        "description": "The amount of secret versions.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/secretVersion:SecretVersion": {
            "description": "The `scaleway.SecretVersion` resource allows you to create and manage secret versions in Scaleway Secret Manager.\n\nRefer to the Secret Manager [product documentation](https://www.scaleway.com/en/docs/identity-and-access-management/secret-manager/) and [API documentation](https://www.scaleway.com/en/developers/api/secret-manager/) for more information.\n\n## Example Usage\n\n### Create a secret and a version\n\nThe following commands allow you to:\n\n- create a secret named `foo`\n- create a version of this secret containing the `my_new_secret` data\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.Secret(\"main\", {\n    name: \"foo\",\n    description: \"barr\",\n    tags: [\n        \"foo\",\n        \"terraform\",\n    ],\n});\nconst v1 = new scaleway.SecretVersion(\"v1\", {\n    description: \"version1\",\n    secretId: main.id,\n    data: \"my_new_secret\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.Secret(\"main\",\n    name=\"foo\",\n    description=\"barr\",\n    tags=[\n        \"foo\",\n        \"terraform\",\n    ])\nv1 = scaleway.SecretVersion(\"v1\",\n    description=\"version1\",\n    secret_id=main.id,\n    data=\"my_new_secret\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.Secret(\"main\", new()\n    {\n        Name = \"foo\",\n        Description = \"barr\",\n        Tags = new[]\n        {\n            \"foo\",\n            \"terraform\",\n        },\n    });\n\n    var v1 = new Scaleway.SecretVersion(\"v1\", new()\n    {\n        Description = \"version1\",\n        SecretId = main.Id,\n        Data = \"my_new_secret\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewSecret(ctx, \"main\", \u0026scaleway.SecretArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tDescription: pulumi.String(\"barr\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo\"),\n\t\t\t\tpulumi.String(\"terraform\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewSecretVersion(ctx, \"v1\", \u0026scaleway.SecretVersionArgs{\n\t\t\tDescription: pulumi.String(\"version1\"),\n\t\t\tSecretId:    main.ID(),\n\t\t\tData:        pulumi.String(\"my_new_secret\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Secret;\nimport com.pulumi.scaleway.SecretArgs;\nimport com.pulumi.scaleway.SecretVersion;\nimport com.pulumi.scaleway.SecretVersionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new Secret(\"main\", SecretArgs.builder()\n            .name(\"foo\")\n            .description(\"barr\")\n            .tags(            \n                \"foo\",\n                \"terraform\")\n            .build());\n\n        var v1 = new SecretVersion(\"v1\", SecretVersionArgs.builder()\n            .description(\"version1\")\n            .secretId(main.id())\n            .data(\"my_new_secret\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:Secret\n    properties:\n      name: foo\n      description: barr\n      tags:\n        - foo\n        - terraform\n  v1:\n    type: scaleway:SecretVersion\n    properties:\n      description: version1\n      secretId: ${main.id}\n      data: my_new_secret\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nThis section explains how to import a secret version using the `{region}/{id}/{revision}` format.\n\n~\u003e **Important:** Keep in mind that if you import with the `latest` revision, you will overwrite the previous version you might have been using.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/secretVersion:SecretVersion main fr-par/11111111-1111-1111-1111-111111111111/2\n```\n\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the secret version's creation (in RFC 3339 format).\n"
                },
                "data": {
                    "type": "string",
                    "description": "The data payload of the secret version. Must not exceed 64KiB in size (e.g. `my-secret-version-payload`). Find out more on the [data section](https://www.terraform.io/#data-information).\n",
                    "secret": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the secret version (e.g. `my-new-description`).\n"
                },
                "region": {
                    "type": "string",
                    "description": "). The region where the resource exists.\n"
                },
                "revision": {
                    "type": "string",
                    "description": "The revision number of the secret version.\n"
                },
                "secretId": {
                    "type": "string",
                    "description": "The ID of the secret associated with the version.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the secret version.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the secret version's last update (in RFC 3339 format).\n"
                }
            },
            "required": [
                "createdAt",
                "data",
                "region",
                "revision",
                "secretId",
                "status",
                "updatedAt"
            ],
            "inputProperties": {
                "data": {
                    "type": "string",
                    "description": "The data payload of the secret version. Must not exceed 64KiB in size (e.g. `my-secret-version-payload`). Find out more on the [data section](https://www.terraform.io/#data-information).\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the secret version (e.g. `my-new-description`).\n"
                },
                "region": {
                    "type": "string",
                    "description": "). The region where the resource exists.\n",
                    "willReplaceOnChanges": true
                },
                "secretId": {
                    "type": "string",
                    "description": "The ID of the secret associated with the version.\n"
                }
            },
            "requiredInputs": [
                "data",
                "secretId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretVersion resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the secret version's creation (in RFC 3339 format).\n"
                    },
                    "data": {
                        "type": "string",
                        "description": "The data payload of the secret version. Must not exceed 64KiB in size (e.g. `my-secret-version-payload`). Find out more on the [data section](https://www.terraform.io/#data-information).\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the secret version (e.g. `my-new-description`).\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "). The region where the resource exists.\n",
                        "willReplaceOnChanges": true
                    },
                    "revision": {
                        "type": "string",
                        "description": "The revision number of the secret version.\n"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "The ID of the secret associated with the version.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the secret version.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the secret version's last update (in RFC 3339 format).\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/temDomain:TemDomain": {
            "description": "Creates and manages Scaleway Transactional Email Domains.\nFor more information refer to [the API documentation](https://www.scaleway.com/en/developers/api/transactional-email).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.TemDomain(\"main\", {\n    acceptTos: true,\n    name: \"example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.TemDomain(\"main\",\n    accept_tos=True,\n    name=\"example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.TemDomain(\"main\", new()\n    {\n        AcceptTos = true,\n        Name = \"example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewTemDomain(ctx, \"main\", \u0026scaleway.TemDomainArgs{\n\t\t\tAcceptTos: pulumi.Bool(true),\n\t\t\tName:      pulumi.String(\"example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.TemDomain;\nimport com.pulumi.scaleway.TemDomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new TemDomain(\"main\", TemDomainArgs.builder()\n            .acceptTos(true)\n            .name(\"example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:TemDomain\n    properties:\n      acceptTos: true\n      name: example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Add the required records to your DNS zone\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst config = new pulumi.Config();\nconst domainName = config.require(\"domainName\");\nconst main = new scaleway.TemDomain(\"main\", {\n    name: domainName,\n    acceptTos: true,\n});\nconst spf = new scaleway.DomainRecord(\"spf\", {\n    dnsZone: domainName,\n    type: \"TXT\",\n    data: pulumi.interpolate`v=spf1 ${main.spfConfig} -all`,\n});\nconst dkim = new scaleway.DomainRecord(\"dkim\", {\n    dnsZone: domainName,\n    name: pulumi.interpolate`${main.projectId}._domainkey`,\n    type: \"TXT\",\n    data: main.dkimConfig,\n});\nconst mx = new scaleway.DomainRecord(\"mx\", {\n    dnsZone: domainName,\n    type: \"MX\",\n    data: \".\",\n});\nconst dmarc = new scaleway.DomainRecord(\"dmarc\", {\n    dnsZone: domainName,\n    name: main.dmarcName,\n    type: \"TXT\",\n    data: main.dmarcConfig,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nconfig = pulumi.Config()\ndomain_name = config.require(\"domainName\")\nmain = scaleway.TemDomain(\"main\",\n    name=domain_name,\n    accept_tos=True)\nspf = scaleway.DomainRecord(\"spf\",\n    dns_zone=domain_name,\n    type=\"TXT\",\n    data=main.spf_config.apply(lambda spf_config: f\"v=spf1 {spf_config} -all\"))\ndkim = scaleway.DomainRecord(\"dkim\",\n    dns_zone=domain_name,\n    name=main.project_id.apply(lambda project_id: f\"{project_id}._domainkey\"),\n    type=\"TXT\",\n    data=main.dkim_config)\nmx = scaleway.DomainRecord(\"mx\",\n    dns_zone=domain_name,\n    type=\"MX\",\n    data=\".\")\ndmarc = scaleway.DomainRecord(\"dmarc\",\n    dns_zone=domain_name,\n    name=main.dmarc_name,\n    type=\"TXT\",\n    data=main.dmarc_config)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var domainName = config.Require(\"domainName\");\n    var main = new Scaleway.TemDomain(\"main\", new()\n    {\n        Name = domainName,\n        AcceptTos = true,\n    });\n\n    var spf = new Scaleway.DomainRecord(\"spf\", new()\n    {\n        DnsZone = domainName,\n        Type = \"TXT\",\n        Data = main.SpfConfig.Apply(spfConfig =\u003e $\"v=spf1 {spfConfig} -all\"),\n    });\n\n    var dkim = new Scaleway.DomainRecord(\"dkim\", new()\n    {\n        DnsZone = domainName,\n        Name = main.ProjectId.Apply(projectId =\u003e $\"{projectId}._domainkey\"),\n        Type = \"TXT\",\n        Data = main.DkimConfig,\n    });\n\n    var mx = new Scaleway.DomainRecord(\"mx\", new()\n    {\n        DnsZone = domainName,\n        Type = \"MX\",\n        Data = \".\",\n    });\n\n    var dmarc = new Scaleway.DomainRecord(\"dmarc\", new()\n    {\n        DnsZone = domainName,\n        Name = main.DmarcName,\n        Type = \"TXT\",\n        Data = main.DmarcConfig,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdomainName := cfg.Require(\"domainName\")\n\t\tmain, err := scaleway.NewTemDomain(ctx, \"main\", \u0026scaleway.TemDomainArgs{\n\t\t\tName:      pulumi.String(domainName),\n\t\t\tAcceptTos: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"spf\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(domainName),\n\t\t\tType:    pulumi.String(\"TXT\"),\n\t\t\tData: main.SpfConfig.ApplyT(func(spfConfig string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"v=spf1 %v -all\", spfConfig), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"dkim\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(domainName),\n\t\t\tName: main.ProjectId.ApplyT(func(projectId string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"%v._domainkey\", projectId), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tType: pulumi.String(\"TXT\"),\n\t\t\tData: main.DkimConfig,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"mx\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(domainName),\n\t\t\tType:    pulumi.String(\"MX\"),\n\t\t\tData:    pulumi.String(\".\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"dmarc\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(domainName),\n\t\t\tName:    main.DmarcName,\n\t\t\tType:    pulumi.String(\"TXT\"),\n\t\t\tData:    main.DmarcConfig,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.TemDomain;\nimport com.pulumi.scaleway.TemDomainArgs;\nimport com.pulumi.scaleway.DomainRecord;\nimport com.pulumi.scaleway.DomainRecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var domainName = config.get(\"domainName\");\n        var main = new TemDomain(\"main\", TemDomainArgs.builder()\n            .name(domainName)\n            .acceptTos(true)\n            .build());\n\n        var spf = new DomainRecord(\"spf\", DomainRecordArgs.builder()\n            .dnsZone(domainName)\n            .type(\"TXT\")\n            .data(main.spfConfig().applyValue(spfConfig -\u003e String.format(\"v=spf1 %s -all\", spfConfig)))\n            .build());\n\n        var dkim = new DomainRecord(\"dkim\", DomainRecordArgs.builder()\n            .dnsZone(domainName)\n            .name(main.projectId().applyValue(projectId -\u003e String.format(\"%s._domainkey\", projectId)))\n            .type(\"TXT\")\n            .data(main.dkimConfig())\n            .build());\n\n        var mx = new DomainRecord(\"mx\", DomainRecordArgs.builder()\n            .dnsZone(domainName)\n            .type(\"MX\")\n            .data(\".\")\n            .build());\n\n        var dmarc = new DomainRecord(\"dmarc\", DomainRecordArgs.builder()\n            .dnsZone(domainName)\n            .name(main.dmarcName())\n            .type(\"TXT\")\n            .data(main.dmarcConfig())\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  domainName:\n    type: string\nresources:\n  main:\n    type: scaleway:TemDomain\n    properties:\n      name: ${domainName}\n      acceptTos: true\n  spf:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: ${domainName}\n      type: TXT\n      data: v=spf1 ${main.spfConfig} -all\n  dkim:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: ${domainName}\n      name: ${main.projectId}._domainkey\n      type: TXT\n      data: ${main.dkimConfig}\n  mx:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: ${domainName}\n      type: MX\n      data: .\n  dmarc:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: ${domainName}\n      name: ${main.dmarcName}\n      type: TXT\n      data: ${main.dmarcConfig}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Automatically Configure DNS Settings for Your Domain\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst config = new pulumi.Config();\nconst domainName = config.require(\"domainName\");\nconst main = new scaleway.TemDomain(\"main\", {\n    name: domainName,\n    acceptTos: true,\n    autoconfig: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nconfig = pulumi.Config()\ndomain_name = config.require(\"domainName\")\nmain = scaleway.TemDomain(\"main\",\n    name=domain_name,\n    accept_tos=True,\n    autoconfig=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var domainName = config.Require(\"domainName\");\n    var main = new Scaleway.TemDomain(\"main\", new()\n    {\n        Name = domainName,\n        AcceptTos = true,\n        Autoconfig = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdomainName := cfg.Require(\"domainName\")\n\t\t_, err := scaleway.NewTemDomain(ctx, \"main\", \u0026scaleway.TemDomainArgs{\n\t\t\tName:       pulumi.String(domainName),\n\t\t\tAcceptTos:  pulumi.Bool(true),\n\t\t\tAutoconfig: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.TemDomain;\nimport com.pulumi.scaleway.TemDomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var domainName = config.get(\"domainName\");\n        var main = new TemDomain(\"main\", TemDomainArgs.builder()\n            .name(domainName)\n            .acceptTos(true)\n            .autoconfig(true)\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  domainName:\n    type: string\nresources:\n  main:\n    type: scaleway:TemDomain\n    properties:\n      name: ${domainName}\n      acceptTos: true\n      autoconfig: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nDomains can be imported using the `{region}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/temDomain:TemDomain main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "acceptTos": {
                    "type": "boolean",
                    "description": "Acceptation of the [Term of Service](https://tem.s3.fr-par.scw.cloud/antispam_policy.pdf).\n\u003e **Important:** This attribute must be set to `true`.\n"
                },
                "autoconfig": {
                    "type": "boolean",
                    "description": "Automatically configures DNS settings for the domain, simplifying the setup process by applying predefined configurations.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the Transaction Email Domain's creation (RFC 3339 format).\n"
                },
                "dkimConfig": {
                    "type": "string",
                    "description": "The DKIM public key, as should be recorded in the DNS zone.\n"
                },
                "dmarcConfig": {
                    "type": "string",
                    "description": "DMARC record for the domain, as should be recorded in the DNS zone.\n"
                },
                "dmarcName": {
                    "type": "string",
                    "description": "DMARC name for the domain, as should be recorded in the DNS zone.\n"
                },
                "lastError": {
                    "type": "string",
                    "description": "(Deprecated) The error message if the last check failed.\n",
                    "deprecationMessage": "last_error is deprecated"
                },
                "lastValidAt": {
                    "type": "string",
                    "description": "The date and time the domain was last found to be valid (RFC 3339 format).\n"
                },
                "mxBlackhole": {
                    "type": "string",
                    "description": "The Scaleway's blackhole MX server to use if you do not have one.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The domain name, must not be used in another Transactional Email Domain.\n\u003e **Important:** Updates to `name` will recreate the domain.\n"
                },
                "nextCheckAt": {
                    "type": "string",
                    "description": "The date and time of the next scheduled check (RFC 3339 format).\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the domain is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the domain should be created.\n"
                },
                "reputations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/TemDomainReputation:TemDomainReputation"
                    },
                    "description": "The domain's reputation.\n"
                },
                "revokedAt": {
                    "type": "string",
                    "description": "The date and time of the revocation of the domain (RFC 3339 format).\n"
                },
                "smtpHost": {
                    "type": "string",
                    "description": "The SMTP host to use to send emails.\n"
                },
                "smtpPort": {
                    "type": "integer",
                    "description": "The SMTP port to use to send emails over TLS.\n"
                },
                "smtpPortAlternative": {
                    "type": "integer",
                    "description": "The SMTP port to use to send emails over TLS.\n"
                },
                "smtpPortUnsecure": {
                    "type": "integer",
                    "description": "The SMTP port to use to send emails.\n"
                },
                "smtpsAuthUser": {
                    "type": "string",
                    "description": "SMTPS auth user refers to the identifier for a user authorized to send emails via SMTPS, ensuring secure email transmission.\n"
                },
                "smtpsPort": {
                    "type": "integer",
                    "description": "The SMTPS port to use to send emails over TLS Wrapper.\n"
                },
                "smtpsPortAlternative": {
                    "type": "integer",
                    "description": "The SMTPS port to use to send emails over TLS Wrapper.\n"
                },
                "spfConfig": {
                    "type": "string",
                    "description": "The snippet of the SPF record that should be registered in the DNS zone.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the domain's reputation.\n"
                }
            },
            "required": [
                "acceptTos",
                "createdAt",
                "dkimConfig",
                "dmarcConfig",
                "dmarcName",
                "lastError",
                "lastValidAt",
                "mxBlackhole",
                "name",
                "nextCheckAt",
                "projectId",
                "region",
                "reputations",
                "revokedAt",
                "smtpHost",
                "smtpPort",
                "smtpPortAlternative",
                "smtpPortUnsecure",
                "smtpsAuthUser",
                "smtpsPort",
                "smtpsPortAlternative",
                "spfConfig",
                "status"
            ],
            "inputProperties": {
                "acceptTos": {
                    "type": "boolean",
                    "description": "Acceptation of the [Term of Service](https://tem.s3.fr-par.scw.cloud/antispam_policy.pdf).\n\u003e **Important:** This attribute must be set to `true`.\n",
                    "willReplaceOnChanges": true
                },
                "autoconfig": {
                    "type": "boolean",
                    "description": "Automatically configures DNS settings for the domain, simplifying the setup process by applying predefined configurations.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The domain name, must not be used in another Transactional Email Domain.\n\u003e **Important:** Updates to `name` will recreate the domain.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the domain is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). The region in which the domain should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "acceptTos"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TemDomain resources.\n",
                "properties": {
                    "acceptTos": {
                        "type": "boolean",
                        "description": "Acceptation of the [Term of Service](https://tem.s3.fr-par.scw.cloud/antispam_policy.pdf).\n\u003e **Important:** This attribute must be set to `true`.\n",
                        "willReplaceOnChanges": true
                    },
                    "autoconfig": {
                        "type": "boolean",
                        "description": "Automatically configures DNS settings for the domain, simplifying the setup process by applying predefined configurations.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the Transaction Email Domain's creation (RFC 3339 format).\n"
                    },
                    "dkimConfig": {
                        "type": "string",
                        "description": "The DKIM public key, as should be recorded in the DNS zone.\n"
                    },
                    "dmarcConfig": {
                        "type": "string",
                        "description": "DMARC record for the domain, as should be recorded in the DNS zone.\n"
                    },
                    "dmarcName": {
                        "type": "string",
                        "description": "DMARC name for the domain, as should be recorded in the DNS zone.\n"
                    },
                    "lastError": {
                        "type": "string",
                        "description": "(Deprecated) The error message if the last check failed.\n",
                        "deprecationMessage": "last_error is deprecated"
                    },
                    "lastValidAt": {
                        "type": "string",
                        "description": "The date and time the domain was last found to be valid (RFC 3339 format).\n"
                    },
                    "mxBlackhole": {
                        "type": "string",
                        "description": "The Scaleway's blackhole MX server to use if you do not have one.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The domain name, must not be used in another Transactional Email Domain.\n\u003e **Important:** Updates to `name` will recreate the domain.\n",
                        "willReplaceOnChanges": true
                    },
                    "nextCheckAt": {
                        "type": "string",
                        "description": "The date and time of the next scheduled check (RFC 3339 format).\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the domain is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the domain should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "reputations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/TemDomainReputation:TemDomainReputation"
                        },
                        "description": "The domain's reputation.\n"
                    },
                    "revokedAt": {
                        "type": "string",
                        "description": "The date and time of the revocation of the domain (RFC 3339 format).\n"
                    },
                    "smtpHost": {
                        "type": "string",
                        "description": "The SMTP host to use to send emails.\n"
                    },
                    "smtpPort": {
                        "type": "integer",
                        "description": "The SMTP port to use to send emails over TLS.\n"
                    },
                    "smtpPortAlternative": {
                        "type": "integer",
                        "description": "The SMTP port to use to send emails over TLS.\n"
                    },
                    "smtpPortUnsecure": {
                        "type": "integer",
                        "description": "The SMTP port to use to send emails.\n"
                    },
                    "smtpsAuthUser": {
                        "type": "string",
                        "description": "SMTPS auth user refers to the identifier for a user authorized to send emails via SMTPS, ensuring secure email transmission.\n"
                    },
                    "smtpsPort": {
                        "type": "integer",
                        "description": "The SMTPS port to use to send emails over TLS Wrapper.\n"
                    },
                    "smtpsPortAlternative": {
                        "type": "integer",
                        "description": "The SMTPS port to use to send emails over TLS Wrapper.\n"
                    },
                    "spfConfig": {
                        "type": "string",
                        "description": "The snippet of the SPF record that should be registered in the DNS zone.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the domain's reputation.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/temDomainValidation:TemDomainValidation": {
            "description": "## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.TemDomain(\"main\", {\n    acceptTos: true,\n    name: \"example.com\",\n});\nconst example = new scaleway.TemDomainValidation(\"example\", {\n    domainId: main.id,\n    region: \"fr-par\",\n    timeout: 300,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.TemDomain(\"main\",\n    accept_tos=True,\n    name=\"example.com\")\nexample = scaleway.TemDomainValidation(\"example\",\n    domain_id=main.id,\n    region=\"fr-par\",\n    timeout=300)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.TemDomain(\"main\", new()\n    {\n        AcceptTos = true,\n        Name = \"example.com\",\n    });\n\n    var example = new Scaleway.TemDomainValidation(\"example\", new()\n    {\n        DomainId = main.Id,\n        Region = \"fr-par\",\n        Timeout = 300,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewTemDomain(ctx, \"main\", \u0026scaleway.TemDomainArgs{\n\t\t\tAcceptTos: pulumi.Bool(true),\n\t\t\tName:      pulumi.String(\"example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewTemDomainValidation(ctx, \"example\", \u0026scaleway.TemDomainValidationArgs{\n\t\t\tDomainId: main.ID(),\n\t\t\tRegion:   pulumi.String(\"fr-par\"),\n\t\t\tTimeout:  pulumi.Int(300),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.TemDomain;\nimport com.pulumi.scaleway.TemDomainArgs;\nimport com.pulumi.scaleway.TemDomainValidation;\nimport com.pulumi.scaleway.TemDomainValidationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new TemDomain(\"main\", TemDomainArgs.builder()\n            .acceptTos(true)\n            .name(\"example.com\")\n            .build());\n\n        var example = new TemDomainValidation(\"example\", TemDomainValidationArgs.builder()\n            .domainId(main.id())\n            .region(\"fr-par\")\n            .timeout(300)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:TemDomain\n    properties:\n      acceptTos: true\n      name: example.com\n  example:\n    type: scaleway:TemDomainValidation\n    properties:\n      domainId: ${main.id}\n      region: fr-par\n      timeout: 300\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "domainId": {
                    "type": "string",
                    "description": "The ID of the domain name used when sending emails. This ID must correspond to a domain already registered with Scaleway's Transactional Email service.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`). Specifies the region where the domain is registered. If not specified, it defaults to the provider's region.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "The maximum wait time in seconds before returning an error if the domain validation does not complete. The default is 300 seconds.\n"
                },
                "validated": {
                    "type": "boolean",
                    "description": "Indicates if the domain has been verified for email sending. This is computed after the creation or update of the domain validation resource.\n"
                }
            },
            "required": [
                "domainId",
                "region",
                "validated"
            ],
            "inputProperties": {
                "domainId": {
                    "type": "string",
                    "description": "The ID of the domain name used when sending emails. This ID must correspond to a domain already registered with Scaleway's Transactional Email service.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`). Specifies the region where the domain is registered. If not specified, it defaults to the provider's region.\n",
                    "willReplaceOnChanges": true
                },
                "timeout": {
                    "type": "integer",
                    "description": "The maximum wait time in seconds before returning an error if the domain validation does not complete. The default is 300 seconds.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "domainId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TemDomainValidation resources.\n",
                "properties": {
                    "domainId": {
                        "type": "string",
                        "description": "The ID of the domain name used when sending emails. This ID must correspond to a domain already registered with Scaleway's Transactional Email service.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). Specifies the region where the domain is registered. If not specified, it defaults to the provider's region.\n",
                        "willReplaceOnChanges": true
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "The maximum wait time in seconds before returning an error if the domain validation does not complete. The default is 300 seconds.\n",
                        "willReplaceOnChanges": true
                    },
                    "validated": {
                        "type": "boolean",
                        "description": "Indicates if the domain has been verified for email sending. This is computed after the creation or update of the domain validation resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/temWebhook:TemWebhook": {
            "description": "Creates and manages Scaleway Transactional Email Webhooks.\nFor more information, refer to [the API documentation](https://www.scaleway.com/en/developers/api/transactional-email).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.TemWebhook(\"main\", {\n    domainId: \"your-domain-id\",\n    eventTypes: [\n        \"email_delivered\",\n        \"email_bounced\",\n    ],\n    snsArn: \"arn:scw:sns:fr-par:project-xxxx:your-sns-topic\",\n    name: \"example-webhook\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.TemWebhook(\"main\",\n    domain_id=\"your-domain-id\",\n    event_types=[\n        \"email_delivered\",\n        \"email_bounced\",\n    ],\n    sns_arn=\"arn:scw:sns:fr-par:project-xxxx:your-sns-topic\",\n    name=\"example-webhook\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.TemWebhook(\"main\", new()\n    {\n        DomainId = \"your-domain-id\",\n        EventTypes = new[]\n        {\n            \"email_delivered\",\n            \"email_bounced\",\n        },\n        SnsArn = \"arn:scw:sns:fr-par:project-xxxx:your-sns-topic\",\n        Name = \"example-webhook\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewTemWebhook(ctx, \"main\", \u0026scaleway.TemWebhookArgs{\n\t\t\tDomainId: pulumi.String(\"your-domain-id\"),\n\t\t\tEventTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"email_delivered\"),\n\t\t\t\tpulumi.String(\"email_bounced\"),\n\t\t\t},\n\t\t\tSnsArn: pulumi.String(\"arn:scw:sns:fr-par:project-xxxx:your-sns-topic\"),\n\t\t\tName:   pulumi.String(\"example-webhook\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.TemWebhook;\nimport com.pulumi.scaleway.TemWebhookArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new TemWebhook(\"main\", TemWebhookArgs.builder()\n            .domainId(\"your-domain-id\")\n            .eventTypes(            \n                \"email_delivered\",\n                \"email_bounced\")\n            .snsArn(\"arn:scw:sns:fr-par:project-xxxx:your-sns-topic\")\n            .name(\"example-webhook\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:TemWebhook\n    properties:\n      domainId: your-domain-id\n      eventTypes:\n        - email_delivered\n        - email_bounced\n      snsArn: arn:scw:sns:fr-par:project-xxxx:your-sns-topic\n      name: example-webhook\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Complete Example with Dependencies\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst config = new pulumi.Config();\nconst domainName = config.require(\"domainName\");\nconst sns = new scaleway.MnqSns(\"sns\", {});\nconst snsCredentials = new scaleway.MnqSnsCredentials(\"sns_credentials\", {permissions: {\n    canManage: true,\n}});\nconst snsTopic = new scaleway.MnqSnsTopic(\"sns_topic\", {\n    name: \"test-mnq-sns-topic-basic\",\n    accessKey: snsCredentials.accessKey,\n    secretKey: snsCredentials.secretKey,\n});\nconst cr01 = new scaleway.TemDomain(\"cr01\", {\n    name: domainName,\n    acceptTos: true,\n});\nconst spf = new scaleway.DomainRecord(\"spf\", {\n    dnsZone: domainName,\n    type: \"TXT\",\n    data: pulumi.interpolate`v=spf1 ${cr01.spfConfig} -all`,\n});\nconst dkim = new scaleway.DomainRecord(\"dkim\", {\n    dnsZone: domainName,\n    name: pulumi.interpolate`${cr01.projectId}._domainkey`,\n    type: \"TXT\",\n    data: cr01.dkimConfig,\n});\nconst mx = new scaleway.DomainRecord(\"mx\", {\n    dnsZone: domainName,\n    type: \"MX\",\n    data: \".\",\n});\nconst dmarc = new scaleway.DomainRecord(\"dmarc\", {\n    dnsZone: domainName,\n    name: cr01.dmarcName,\n    type: \"TXT\",\n    data: cr01.dmarcConfig,\n});\nconst valid = new scaleway.TemDomainValidation(\"valid\", {\n    domainId: cr01.id,\n    region: cr01.region,\n    timeout: 3600,\n});\nconst webhook = new scaleway.TemWebhook(\"webhook\", {\n    name: \"example-webhook\",\n    domainId: cr01.id,\n    eventTypes: [\n        \"email_delivered\",\n        \"email_bounced\",\n    ],\n    snsArn: snsTopic.arn,\n}, {\n    dependsOn: [\n        valid,\n        snsTopic,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nconfig = pulumi.Config()\ndomain_name = config.require(\"domainName\")\nsns = scaleway.MnqSns(\"sns\")\nsns_credentials = scaleway.MnqSnsCredentials(\"sns_credentials\", permissions={\n    \"can_manage\": True,\n})\nsns_topic = scaleway.MnqSnsTopic(\"sns_topic\",\n    name=\"test-mnq-sns-topic-basic\",\n    access_key=sns_credentials.access_key,\n    secret_key=sns_credentials.secret_key)\ncr01 = scaleway.TemDomain(\"cr01\",\n    name=domain_name,\n    accept_tos=True)\nspf = scaleway.DomainRecord(\"spf\",\n    dns_zone=domain_name,\n    type=\"TXT\",\n    data=cr01.spf_config.apply(lambda spf_config: f\"v=spf1 {spf_config} -all\"))\ndkim = scaleway.DomainRecord(\"dkim\",\n    dns_zone=domain_name,\n    name=cr01.project_id.apply(lambda project_id: f\"{project_id}._domainkey\"),\n    type=\"TXT\",\n    data=cr01.dkim_config)\nmx = scaleway.DomainRecord(\"mx\",\n    dns_zone=domain_name,\n    type=\"MX\",\n    data=\".\")\ndmarc = scaleway.DomainRecord(\"dmarc\",\n    dns_zone=domain_name,\n    name=cr01.dmarc_name,\n    type=\"TXT\",\n    data=cr01.dmarc_config)\nvalid = scaleway.TemDomainValidation(\"valid\",\n    domain_id=cr01.id,\n    region=cr01.region,\n    timeout=3600)\nwebhook = scaleway.TemWebhook(\"webhook\",\n    name=\"example-webhook\",\n    domain_id=cr01.id,\n    event_types=[\n        \"email_delivered\",\n        \"email_bounced\",\n    ],\n    sns_arn=sns_topic.arn,\n    opts = pulumi.ResourceOptions(depends_on=[\n            valid,\n            sns_topic,\n        ]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var domainName = config.Require(\"domainName\");\n    var sns = new Scaleway.MnqSns(\"sns\");\n\n    var snsCredentials = new Scaleway.MnqSnsCredentials(\"sns_credentials\", new()\n    {\n        Permissions = new Scaleway.Inputs.MnqSnsCredentialsPermissionsArgs\n        {\n            CanManage = true,\n        },\n    });\n\n    var snsTopic = new Scaleway.MnqSnsTopic(\"sns_topic\", new()\n    {\n        Name = \"test-mnq-sns-topic-basic\",\n        AccessKey = snsCredentials.AccessKey,\n        SecretKey = snsCredentials.SecretKey,\n    });\n\n    var cr01 = new Scaleway.TemDomain(\"cr01\", new()\n    {\n        Name = domainName,\n        AcceptTos = true,\n    });\n\n    var spf = new Scaleway.DomainRecord(\"spf\", new()\n    {\n        DnsZone = domainName,\n        Type = \"TXT\",\n        Data = cr01.SpfConfig.Apply(spfConfig =\u003e $\"v=spf1 {spfConfig} -all\"),\n    });\n\n    var dkim = new Scaleway.DomainRecord(\"dkim\", new()\n    {\n        DnsZone = domainName,\n        Name = cr01.ProjectId.Apply(projectId =\u003e $\"{projectId}._domainkey\"),\n        Type = \"TXT\",\n        Data = cr01.DkimConfig,\n    });\n\n    var mx = new Scaleway.DomainRecord(\"mx\", new()\n    {\n        DnsZone = domainName,\n        Type = \"MX\",\n        Data = \".\",\n    });\n\n    var dmarc = new Scaleway.DomainRecord(\"dmarc\", new()\n    {\n        DnsZone = domainName,\n        Name = cr01.DmarcName,\n        Type = \"TXT\",\n        Data = cr01.DmarcConfig,\n    });\n\n    var valid = new Scaleway.TemDomainValidation(\"valid\", new()\n    {\n        DomainId = cr01.Id,\n        Region = cr01.Region,\n        Timeout = 3600,\n    });\n\n    var webhook = new Scaleway.TemWebhook(\"webhook\", new()\n    {\n        Name = \"example-webhook\",\n        DomainId = cr01.Id,\n        EventTypes = new[]\n        {\n            \"email_delivered\",\n            \"email_bounced\",\n        },\n        SnsArn = snsTopic.Arn,\n    }, new CustomResourceOptions\n    {\n        DependsOn =\n        {\n            valid,\n            snsTopic,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdomainName := cfg.Require(\"domainName\")\n\t\t_, err := scaleway.NewMnqSns(ctx, \"sns\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsnsCredentials, err := scaleway.NewMnqSnsCredentials(ctx, \"sns_credentials\", \u0026scaleway.MnqSnsCredentialsArgs{\n\t\t\tPermissions: \u0026scaleway.MnqSnsCredentialsPermissionsArgs{\n\t\t\t\tCanManage: pulumi.Bool(true),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsnsTopic, err := scaleway.NewMnqSnsTopic(ctx, \"sns_topic\", \u0026scaleway.MnqSnsTopicArgs{\n\t\t\tName:      pulumi.String(\"test-mnq-sns-topic-basic\"),\n\t\t\tAccessKey: snsCredentials.AccessKey,\n\t\t\tSecretKey: snsCredentials.SecretKey,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcr01, err := scaleway.NewTemDomain(ctx, \"cr01\", \u0026scaleway.TemDomainArgs{\n\t\t\tName:      pulumi.String(domainName),\n\t\t\tAcceptTos: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"spf\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(domainName),\n\t\t\tType:    pulumi.String(\"TXT\"),\n\t\t\tData: cr01.SpfConfig.ApplyT(func(spfConfig string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"v=spf1 %v -all\", spfConfig), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"dkim\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(domainName),\n\t\t\tName: cr01.ProjectId.ApplyT(func(projectId string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"%v._domainkey\", projectId), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tType: pulumi.String(\"TXT\"),\n\t\t\tData: cr01.DkimConfig,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"mx\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(domainName),\n\t\t\tType:    pulumi.String(\"MX\"),\n\t\t\tData:    pulumi.String(\".\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"dmarc\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone: pulumi.String(domainName),\n\t\t\tName:    cr01.DmarcName,\n\t\t\tType:    pulumi.String(\"TXT\"),\n\t\t\tData:    cr01.DmarcConfig,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvalid, err := scaleway.NewTemDomainValidation(ctx, \"valid\", \u0026scaleway.TemDomainValidationArgs{\n\t\t\tDomainId: cr01.ID(),\n\t\t\tRegion:   cr01.Region,\n\t\t\tTimeout:  pulumi.Int(3600),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewTemWebhook(ctx, \"webhook\", \u0026scaleway.TemWebhookArgs{\n\t\t\tName:     pulumi.String(\"example-webhook\"),\n\t\t\tDomainId: cr01.ID(),\n\t\t\tEventTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"email_delivered\"),\n\t\t\t\tpulumi.String(\"email_bounced\"),\n\t\t\t},\n\t\t\tSnsArn: snsTopic.Arn,\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tvalid,\n\t\t\tsnsTopic,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.MnqSns;\nimport com.pulumi.scaleway.MnqSnsCredentials;\nimport com.pulumi.scaleway.MnqSnsCredentialsArgs;\nimport com.pulumi.scaleway.inputs.MnqSnsCredentialsPermissionsArgs;\nimport com.pulumi.scaleway.MnqSnsTopic;\nimport com.pulumi.scaleway.MnqSnsTopicArgs;\nimport com.pulumi.scaleway.TemDomain;\nimport com.pulumi.scaleway.TemDomainArgs;\nimport com.pulumi.scaleway.DomainRecord;\nimport com.pulumi.scaleway.DomainRecordArgs;\nimport com.pulumi.scaleway.TemDomainValidation;\nimport com.pulumi.scaleway.TemDomainValidationArgs;\nimport com.pulumi.scaleway.TemWebhook;\nimport com.pulumi.scaleway.TemWebhookArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var domainName = config.get(\"domainName\");\n        var sns = new MnqSns(\"sns\");\n\n        var snsCredentials = new MnqSnsCredentials(\"snsCredentials\", MnqSnsCredentialsArgs.builder()\n            .permissions(MnqSnsCredentialsPermissionsArgs.builder()\n                .canManage(true)\n                .build())\n            .build());\n\n        var snsTopic = new MnqSnsTopic(\"snsTopic\", MnqSnsTopicArgs.builder()\n            .name(\"test-mnq-sns-topic-basic\")\n            .accessKey(snsCredentials.accessKey())\n            .secretKey(snsCredentials.secretKey())\n            .build());\n\n        var cr01 = new TemDomain(\"cr01\", TemDomainArgs.builder()\n            .name(domainName)\n            .acceptTos(true)\n            .build());\n\n        var spf = new DomainRecord(\"spf\", DomainRecordArgs.builder()\n            .dnsZone(domainName)\n            .type(\"TXT\")\n            .data(cr01.spfConfig().applyValue(spfConfig -\u003e String.format(\"v=spf1 %s -all\", spfConfig)))\n            .build());\n\n        var dkim = new DomainRecord(\"dkim\", DomainRecordArgs.builder()\n            .dnsZone(domainName)\n            .name(cr01.projectId().applyValue(projectId -\u003e String.format(\"%s._domainkey\", projectId)))\n            .type(\"TXT\")\n            .data(cr01.dkimConfig())\n            .build());\n\n        var mx = new DomainRecord(\"mx\", DomainRecordArgs.builder()\n            .dnsZone(domainName)\n            .type(\"MX\")\n            .data(\".\")\n            .build());\n\n        var dmarc = new DomainRecord(\"dmarc\", DomainRecordArgs.builder()\n            .dnsZone(domainName)\n            .name(cr01.dmarcName())\n            .type(\"TXT\")\n            .data(cr01.dmarcConfig())\n            .build());\n\n        var valid = new TemDomainValidation(\"valid\", TemDomainValidationArgs.builder()\n            .domainId(cr01.id())\n            .region(cr01.region())\n            .timeout(3600)\n            .build());\n\n        var webhook = new TemWebhook(\"webhook\", TemWebhookArgs.builder()\n            .name(\"example-webhook\")\n            .domainId(cr01.id())\n            .eventTypes(            \n                \"email_delivered\",\n                \"email_bounced\")\n            .snsArn(snsTopic.arn())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(                \n                    valid,\n                    snsTopic)\n                .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  domainName:\n    type: string\nresources:\n  sns:\n    type: scaleway:MnqSns\n  snsCredentials:\n    type: scaleway:MnqSnsCredentials\n    name: sns_credentials\n    properties:\n      permissions:\n        canManage: true\n  snsTopic:\n    type: scaleway:MnqSnsTopic\n    name: sns_topic\n    properties:\n      name: test-mnq-sns-topic-basic\n      accessKey: ${snsCredentials.accessKey}\n      secretKey: ${snsCredentials.secretKey}\n  cr01:\n    type: scaleway:TemDomain\n    properties:\n      name: ${domainName}\n      acceptTos: true\n  spf:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: ${domainName}\n      type: TXT\n      data: v=spf1 ${cr01.spfConfig} -all\n  dkim:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: ${domainName}\n      name: ${cr01.projectId}._domainkey\n      type: TXT\n      data: ${cr01.dkimConfig}\n  mx:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: ${domainName}\n      type: MX\n      data: .\n  dmarc:\n    type: scaleway:DomainRecord\n    properties:\n      dnsZone: ${domainName}\n      name: ${cr01.dmarcName}\n      type: TXT\n      data: ${cr01.dmarcConfig}\n  valid:\n    type: scaleway:TemDomainValidation\n    properties:\n      domainId: ${cr01.id}\n      region: ${cr01.region}\n      timeout: 3600\n  webhook:\n    type: scaleway:TemWebhook\n    properties:\n      name: example-webhook\n      domainId: ${cr01.id}\n      eventTypes:\n        - email_delivered\n        - email_bounced\n      snsArn: ${snsTopic.arn}\n    options:\n      dependson:\n        - ${valid}\n        - ${snsTopic}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nWebhooks can be imported using the {region}/{id}, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/temWebhook:TemWebhook main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the webhook's creation (RFC 3339 format).\n"
                },
                "domainId": {
                    "type": "string",
                    "description": "The ID of the domain the webhook is associated with.\n"
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of event types that trigger the webhook.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the webhook. Defaults to an autogenerated name if not provided.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The ID of the organization the webhook belongs to.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project the webhook is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": ". The region in which the webhook should be created.\n"
                },
                "snsArn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of the SNS topic.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the webhook's last update (RFC 3339 format).\n"
                }
            },
            "required": [
                "createdAt",
                "domainId",
                "eventTypes",
                "name",
                "organizationId",
                "projectId",
                "region",
                "snsArn",
                "updatedAt"
            ],
            "inputProperties": {
                "domainId": {
                    "type": "string",
                    "description": "The ID of the domain the webhook is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of event types that trigger the webhook.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the webhook. Defaults to an autogenerated name if not provided.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project the webhook is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": ". The region in which the webhook should be created.\n",
                    "willReplaceOnChanges": true
                },
                "snsArn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of the SNS topic.\n"
                }
            },
            "requiredInputs": [
                "domainId",
                "eventTypes",
                "snsArn"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TemWebhook resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the webhook's creation (RFC 3339 format).\n"
                    },
                    "domainId": {
                        "type": "string",
                        "description": "The ID of the domain the webhook is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "eventTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of event types that trigger the webhook.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the webhook. Defaults to an autogenerated name if not provided.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization the webhook belongs to.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the webhook is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": ". The region in which the webhook should be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "snsArn": {
                        "type": "string",
                        "description": "The Amazon Resource Name (ARN) of the SNS topic.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the webhook's last update (RFC 3339 format).\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpc:Vpc": {
            "description": "Creates and manages Scaleway Virtual Private Clouds.\nFor more information, see [the main documentation](https://www.scaleway.com/en/docs/network/vpc/concepts/).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst vpc01 = new scaleway.Vpc(\"vpc01\", {\n    name: \"my-vpc\",\n    tags: [\n        \"demo\",\n        \"terraform\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nvpc01 = scaleway.Vpc(\"vpc01\",\n    name=\"my-vpc\",\n    tags=[\n        \"demo\",\n        \"terraform\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vpc01 = new Scaleway.Vpc(\"vpc01\", new()\n    {\n        Name = \"my-vpc\",\n        Tags = new[]\n        {\n            \"demo\",\n            \"terraform\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewVpc(ctx, \"vpc01\", \u0026scaleway.VpcArgs{\n\t\t\tName: pulumi.String(\"my-vpc\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"demo\"),\n\t\t\t\tpulumi.String(\"terraform\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Vpc;\nimport com.pulumi.scaleway.VpcArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vpc01 = new Vpc(\"vpc01\", VpcArgs.builder()\n            .name(\"my-vpc\")\n            .tags(            \n                \"demo\",\n                \"terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vpc01:\n    type: scaleway:Vpc\n    properties:\n      name: my-vpc\n      tags:\n        - demo\n        - terraform\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Enable routing\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst vpc01 = new scaleway.Vpc(\"vpc01\", {\n    name: \"my-vpc\",\n    tags: [\n        \"demo\",\n        \"terraform\",\n        \"routing\",\n    ],\n    enableRouting: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nvpc01 = scaleway.Vpc(\"vpc01\",\n    name=\"my-vpc\",\n    tags=[\n        \"demo\",\n        \"terraform\",\n        \"routing\",\n    ],\n    enable_routing=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vpc01 = new Scaleway.Vpc(\"vpc01\", new()\n    {\n        Name = \"my-vpc\",\n        Tags = new[]\n        {\n            \"demo\",\n            \"terraform\",\n            \"routing\",\n        },\n        EnableRouting = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewVpc(ctx, \"vpc01\", \u0026scaleway.VpcArgs{\n\t\t\tName: pulumi.String(\"my-vpc\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"demo\"),\n\t\t\t\tpulumi.String(\"terraform\"),\n\t\t\t\tpulumi.String(\"routing\"),\n\t\t\t},\n\t\t\tEnableRouting: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Vpc;\nimport com.pulumi.scaleway.VpcArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vpc01 = new Vpc(\"vpc01\", VpcArgs.builder()\n            .name(\"my-vpc\")\n            .tags(            \n                \"demo\",\n                \"terraform\",\n                \"routing\")\n            .enableRouting(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vpc01:\n    type: scaleway:Vpc\n    properties:\n      name: my-vpc\n      tags:\n        - demo\n        - terraform\n        - routing\n      enableRouting: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nVPCs can be imported using `{region}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/vpc:Vpc vpc_demo fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date and time of VPC's creation (RFC 3339 format).\n"
                },
                "enableRouting": {
                    "type": "boolean",
                    "description": "Enable routing between Private Networks in the VPC. Note that you will not be able to deactivate it afterwards.\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Defines whether the VPC is the default one for its Project.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the VPC. If not provided it will be randomly generated.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The Organization ID the VPC is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project the VPC is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region of the VPC.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags to associate with the VPC.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date and time of VPC's last update (RFC 3339 format).\n"
                }
            },
            "required": [
                "createdAt",
                "enableRouting",
                "isDefault",
                "name",
                "organizationId",
                "projectId",
                "region",
                "updatedAt"
            ],
            "inputProperties": {
                "enableRouting": {
                    "type": "boolean",
                    "description": "Enable routing between Private Networks in the VPC. Note that you will not be able to deactivate it afterwards.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the VPC. If not provided it will be randomly generated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project the VPC is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region of the VPC.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags to associate with the VPC.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vpc resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date and time of VPC's creation (RFC 3339 format).\n"
                    },
                    "enableRouting": {
                        "type": "boolean",
                        "description": "Enable routing between Private Networks in the VPC. Note that you will not be able to deactivate it afterwards.\n"
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Defines whether the VPC is the default one for its Project.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the VPC. If not provided it will be randomly generated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The Organization ID the VPC is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the Project the VPC is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region of the VPC.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags to associate with the VPC.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date and time of VPC's last update (RFC 3339 format).\n"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcGatewayNetwork:VpcGatewayNetwork": {
            "description": "Creates and manages GatewayNetworks (connections between a Public Gateway and a Private Network).\n\nIt allows the attachment of Private Networks to Public Gateways and DHCP configurations.\nFor more information, see [the API documentation](https://www.scaleway.com/en/developers/api/public-gateway/#step-3-attach-private-networks-to-the-vpc-public-gateway).\n\n## Example Usage\n\n### Create a GatewayNetwork with IPAM configuration\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst vpc01 = new scaleway.Vpc(\"vpc01\", {name: \"my vpc\"});\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {\n    name: \"pn_test_network\",\n    ipv4Subnet: {\n        subnet: \"172.16.64.0/22\",\n    },\n    vpcId: vpc01.id,\n});\nconst pg01 = new scaleway.VpcPublicGateway(\"pg01\", {\n    name: \"foobar\",\n    type: \"VPC-GW-S\",\n});\nconst main = new scaleway.VpcGatewayNetwork(\"main\", {\n    gatewayId: pg01.id,\n    privateNetworkId: pn01.id,\n    enableMasquerade: true,\n    ipamConfigs: [{\n        pushDefaultRoute: true,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nvpc01 = scaleway.Vpc(\"vpc01\", name=\"my vpc\")\npn01 = scaleway.VpcPrivateNetwork(\"pn01\",\n    name=\"pn_test_network\",\n    ipv4_subnet={\n        \"subnet\": \"172.16.64.0/22\",\n    },\n    vpc_id=vpc01.id)\npg01 = scaleway.VpcPublicGateway(\"pg01\",\n    name=\"foobar\",\n    type=\"VPC-GW-S\")\nmain = scaleway.VpcGatewayNetwork(\"main\",\n    gateway_id=pg01.id,\n    private_network_id=pn01.id,\n    enable_masquerade=True,\n    ipam_configs=[{\n        \"push_default_route\": True,\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vpc01 = new Scaleway.Vpc(\"vpc01\", new()\n    {\n        Name = \"my vpc\",\n    });\n\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\", new()\n    {\n        Name = \"pn_test_network\",\n        Ipv4Subnet = new Scaleway.Inputs.VpcPrivateNetworkIpv4SubnetArgs\n        {\n            Subnet = \"172.16.64.0/22\",\n        },\n        VpcId = vpc01.Id,\n    });\n\n    var pg01 = new Scaleway.VpcPublicGateway(\"pg01\", new()\n    {\n        Name = \"foobar\",\n        Type = \"VPC-GW-S\",\n    });\n\n    var main = new Scaleway.VpcGatewayNetwork(\"main\", new()\n    {\n        GatewayId = pg01.Id,\n        PrivateNetworkId = pn01.Id,\n        EnableMasquerade = true,\n        IpamConfigs = new[]\n        {\n            new Scaleway.Inputs.VpcGatewayNetworkIpamConfigArgs\n            {\n                PushDefaultRoute = true,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tvpc01, err := scaleway.NewVpc(ctx, \"vpc01\", \u0026scaleway.VpcArgs{\n\t\t\tName: pulumi.String(\"my vpc\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tName: pulumi.String(\"pn_test_network\"),\n\t\t\tIpv4Subnet: \u0026scaleway.VpcPrivateNetworkIpv4SubnetArgs{\n\t\t\t\tSubnet: pulumi.String(\"172.16.64.0/22\"),\n\t\t\t},\n\t\t\tVpcId: vpc01.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpg01, err := scaleway.NewVpcPublicGateway(ctx, \"pg01\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tName: pulumi.String(\"foobar\"),\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewVpcGatewayNetwork(ctx, \"main\", \u0026scaleway.VpcGatewayNetworkArgs{\n\t\t\tGatewayId:        pg01.ID(),\n\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\tEnableMasquerade: pulumi.Bool(true),\n\t\t\tIpamConfigs: scaleway.VpcGatewayNetworkIpamConfigArray{\n\t\t\t\t\u0026scaleway.VpcGatewayNetworkIpamConfigArgs{\n\t\t\t\t\tPushDefaultRoute: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Vpc;\nimport com.pulumi.scaleway.VpcArgs;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.inputs.VpcPrivateNetworkIpv4SubnetArgs;\nimport com.pulumi.scaleway.VpcPublicGateway;\nimport com.pulumi.scaleway.VpcPublicGatewayArgs;\nimport com.pulumi.scaleway.VpcGatewayNetwork;\nimport com.pulumi.scaleway.VpcGatewayNetworkArgs;\nimport com.pulumi.scaleway.inputs.VpcGatewayNetworkIpamConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vpc01 = new Vpc(\"vpc01\", VpcArgs.builder()\n            .name(\"my vpc\")\n            .build());\n\n        var pn01 = new VpcPrivateNetwork(\"pn01\", VpcPrivateNetworkArgs.builder()\n            .name(\"pn_test_network\")\n            .ipv4Subnet(VpcPrivateNetworkIpv4SubnetArgs.builder()\n                .subnet(\"172.16.64.0/22\")\n                .build())\n            .vpcId(vpc01.id())\n            .build());\n\n        var pg01 = new VpcPublicGateway(\"pg01\", VpcPublicGatewayArgs.builder()\n            .name(\"foobar\")\n            .type(\"VPC-GW-S\")\n            .build());\n\n        var main = new VpcGatewayNetwork(\"main\", VpcGatewayNetworkArgs.builder()\n            .gatewayId(pg01.id())\n            .privateNetworkId(pn01.id())\n            .enableMasquerade(true)\n            .ipamConfigs(VpcGatewayNetworkIpamConfigArgs.builder()\n                .pushDefaultRoute(true)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vpc01:\n    type: scaleway:Vpc\n    properties:\n      name: my vpc\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      name: pn_test_network\n      ipv4Subnet:\n        subnet: 172.16.64.0/22\n      vpcId: ${vpc01.id}\n  pg01:\n    type: scaleway:VpcPublicGateway\n    properties:\n      name: foobar\n      type: VPC-GW-S\n  main:\n    type: scaleway:VpcGatewayNetwork\n    properties:\n      gatewayId: ${pg01.id}\n      privateNetworkId: ${pn01.id}\n      enableMasquerade: true\n      ipamConfigs:\n        - pushDefaultRoute: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create a GatewayNetwork with a booked IPAM IP\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst vpc01 = new scaleway.Vpc(\"vpc01\", {name: \"my vpc\"});\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {\n    name: \"pn_test_network\",\n    ipv4Subnet: {\n        subnet: \"172.16.64.0/22\",\n    },\n    vpcId: vpc01.id,\n});\nconst ip01 = new scaleway.IpamIp(\"ip01\", {\n    address: \"172.16.64.7\",\n    sources: [{\n        privateNetworkId: pn01.id,\n    }],\n});\nconst pg01 = new scaleway.VpcPublicGateway(\"pg01\", {\n    name: \"foobar\",\n    type: \"VPC-GW-S\",\n});\nconst main = new scaleway.VpcGatewayNetwork(\"main\", {\n    gatewayId: pg01.id,\n    privateNetworkId: pn01.id,\n    enableMasquerade: true,\n    ipamConfigs: [{\n        pushDefaultRoute: true,\n        ipamIpId: ip01.id,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nvpc01 = scaleway.Vpc(\"vpc01\", name=\"my vpc\")\npn01 = scaleway.VpcPrivateNetwork(\"pn01\",\n    name=\"pn_test_network\",\n    ipv4_subnet={\n        \"subnet\": \"172.16.64.0/22\",\n    },\n    vpc_id=vpc01.id)\nip01 = scaleway.IpamIp(\"ip01\",\n    address=\"172.16.64.7\",\n    sources=[{\n        \"private_network_id\": pn01.id,\n    }])\npg01 = scaleway.VpcPublicGateway(\"pg01\",\n    name=\"foobar\",\n    type=\"VPC-GW-S\")\nmain = scaleway.VpcGatewayNetwork(\"main\",\n    gateway_id=pg01.id,\n    private_network_id=pn01.id,\n    enable_masquerade=True,\n    ipam_configs=[{\n        \"push_default_route\": True,\n        \"ipam_ip_id\": ip01.id,\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vpc01 = new Scaleway.Vpc(\"vpc01\", new()\n    {\n        Name = \"my vpc\",\n    });\n\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\", new()\n    {\n        Name = \"pn_test_network\",\n        Ipv4Subnet = new Scaleway.Inputs.VpcPrivateNetworkIpv4SubnetArgs\n        {\n            Subnet = \"172.16.64.0/22\",\n        },\n        VpcId = vpc01.Id,\n    });\n\n    var ip01 = new Scaleway.IpamIp(\"ip01\", new()\n    {\n        Address = \"172.16.64.7\",\n        Sources = new[]\n        {\n            new Scaleway.Inputs.IpamIpSourceArgs\n            {\n                PrivateNetworkId = pn01.Id,\n            },\n        },\n    });\n\n    var pg01 = new Scaleway.VpcPublicGateway(\"pg01\", new()\n    {\n        Name = \"foobar\",\n        Type = \"VPC-GW-S\",\n    });\n\n    var main = new Scaleway.VpcGatewayNetwork(\"main\", new()\n    {\n        GatewayId = pg01.Id,\n        PrivateNetworkId = pn01.Id,\n        EnableMasquerade = true,\n        IpamConfigs = new[]\n        {\n            new Scaleway.Inputs.VpcGatewayNetworkIpamConfigArgs\n            {\n                PushDefaultRoute = true,\n                IpamIpId = ip01.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tvpc01, err := scaleway.NewVpc(ctx, \"vpc01\", \u0026scaleway.VpcArgs{\n\t\t\tName: pulumi.String(\"my vpc\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tName: pulumi.String(\"pn_test_network\"),\n\t\t\tIpv4Subnet: \u0026scaleway.VpcPrivateNetworkIpv4SubnetArgs{\n\t\t\t\tSubnet: pulumi.String(\"172.16.64.0/22\"),\n\t\t\t},\n\t\t\tVpcId: vpc01.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tip01, err := scaleway.NewIpamIp(ctx, \"ip01\", \u0026scaleway.IpamIpArgs{\n\t\t\tAddress: pulumi.String(\"172.16.64.7\"),\n\t\t\tSources: scaleway.IpamIpSourceArray{\n\t\t\t\t\u0026scaleway.IpamIpSourceArgs{\n\t\t\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpg01, err := scaleway.NewVpcPublicGateway(ctx, \"pg01\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tName: pulumi.String(\"foobar\"),\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewVpcGatewayNetwork(ctx, \"main\", \u0026scaleway.VpcGatewayNetworkArgs{\n\t\t\tGatewayId:        pg01.ID(),\n\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\tEnableMasquerade: pulumi.Bool(true),\n\t\t\tIpamConfigs: scaleway.VpcGatewayNetworkIpamConfigArray{\n\t\t\t\t\u0026scaleway.VpcGatewayNetworkIpamConfigArgs{\n\t\t\t\t\tPushDefaultRoute: pulumi.Bool(true),\n\t\t\t\t\tIpamIpId:         ip01.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Vpc;\nimport com.pulumi.scaleway.VpcArgs;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.inputs.VpcPrivateNetworkIpv4SubnetArgs;\nimport com.pulumi.scaleway.IpamIp;\nimport com.pulumi.scaleway.IpamIpArgs;\nimport com.pulumi.scaleway.inputs.IpamIpSourceArgs;\nimport com.pulumi.scaleway.VpcPublicGateway;\nimport com.pulumi.scaleway.VpcPublicGatewayArgs;\nimport com.pulumi.scaleway.VpcGatewayNetwork;\nimport com.pulumi.scaleway.VpcGatewayNetworkArgs;\nimport com.pulumi.scaleway.inputs.VpcGatewayNetworkIpamConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vpc01 = new Vpc(\"vpc01\", VpcArgs.builder()\n            .name(\"my vpc\")\n            .build());\n\n        var pn01 = new VpcPrivateNetwork(\"pn01\", VpcPrivateNetworkArgs.builder()\n            .name(\"pn_test_network\")\n            .ipv4Subnet(VpcPrivateNetworkIpv4SubnetArgs.builder()\n                .subnet(\"172.16.64.0/22\")\n                .build())\n            .vpcId(vpc01.id())\n            .build());\n\n        var ip01 = new IpamIp(\"ip01\", IpamIpArgs.builder()\n            .address(\"172.16.64.7\")\n            .sources(IpamIpSourceArgs.builder()\n                .privateNetworkId(pn01.id())\n                .build())\n            .build());\n\n        var pg01 = new VpcPublicGateway(\"pg01\", VpcPublicGatewayArgs.builder()\n            .name(\"foobar\")\n            .type(\"VPC-GW-S\")\n            .build());\n\n        var main = new VpcGatewayNetwork(\"main\", VpcGatewayNetworkArgs.builder()\n            .gatewayId(pg01.id())\n            .privateNetworkId(pn01.id())\n            .enableMasquerade(true)\n            .ipamConfigs(VpcGatewayNetworkIpamConfigArgs.builder()\n                .pushDefaultRoute(true)\n                .ipamIpId(ip01.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vpc01:\n    type: scaleway:Vpc\n    properties:\n      name: my vpc\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      name: pn_test_network\n      ipv4Subnet:\n        subnet: 172.16.64.0/22\n      vpcId: ${vpc01.id}\n  ip01:\n    type: scaleway:IpamIp\n    properties:\n      address: 172.16.64.7\n      sources:\n        - privateNetworkId: ${pn01.id}\n  pg01:\n    type: scaleway:VpcPublicGateway\n    properties:\n      name: foobar\n      type: VPC-GW-S\n  main:\n    type: scaleway:VpcGatewayNetwork\n    properties:\n      gatewayId: ${pg01.id}\n      privateNetworkId: ${pn01.id}\n      enableMasquerade: true\n      ipamConfigs:\n        - pushDefaultRoute: true\n          ipamIpId: ${ip01.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create a GatewayNetwork with DHCP\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {name: \"pn_test_network\"});\nconst gw01 = new scaleway.VpcPublicGatewayIp(\"gw01\", {});\nconst dhcp01 = new scaleway.VpcPublicGatewayDhcp(\"dhcp01\", {\n    subnet: \"192.168.1.0/24\",\n    pushDefaultRoute: true,\n});\nconst pg01 = new scaleway.VpcPublicGateway(\"pg01\", {\n    name: \"foobar\",\n    type: \"VPC-GW-S\",\n    ipId: gw01.id,\n});\nconst main = new scaleway.VpcGatewayNetwork(\"main\", {\n    gatewayId: pg01.id,\n    privateNetworkId: pn01.id,\n    dhcpId: dhcp01.id,\n    cleanupDhcp: true,\n    enableMasquerade: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\npn01 = scaleway.VpcPrivateNetwork(\"pn01\", name=\"pn_test_network\")\ngw01 = scaleway.VpcPublicGatewayIp(\"gw01\")\ndhcp01 = scaleway.VpcPublicGatewayDhcp(\"dhcp01\",\n    subnet=\"192.168.1.0/24\",\n    push_default_route=True)\npg01 = scaleway.VpcPublicGateway(\"pg01\",\n    name=\"foobar\",\n    type=\"VPC-GW-S\",\n    ip_id=gw01.id)\nmain = scaleway.VpcGatewayNetwork(\"main\",\n    gateway_id=pg01.id,\n    private_network_id=pn01.id,\n    dhcp_id=dhcp01.id,\n    cleanup_dhcp=True,\n    enable_masquerade=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\", new()\n    {\n        Name = \"pn_test_network\",\n    });\n\n    var gw01 = new Scaleway.VpcPublicGatewayIp(\"gw01\");\n\n    var dhcp01 = new Scaleway.VpcPublicGatewayDhcp(\"dhcp01\", new()\n    {\n        Subnet = \"192.168.1.0/24\",\n        PushDefaultRoute = true,\n    });\n\n    var pg01 = new Scaleway.VpcPublicGateway(\"pg01\", new()\n    {\n        Name = \"foobar\",\n        Type = \"VPC-GW-S\",\n        IpId = gw01.Id,\n    });\n\n    var main = new Scaleway.VpcGatewayNetwork(\"main\", new()\n    {\n        GatewayId = pg01.Id,\n        PrivateNetworkId = pn01.Id,\n        DhcpId = dhcp01.Id,\n        CleanupDhcp = true,\n        EnableMasquerade = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tName: pulumi.String(\"pn_test_network\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgw01, err := scaleway.NewVpcPublicGatewayIp(ctx, \"gw01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdhcp01, err := scaleway.NewVpcPublicGatewayDhcp(ctx, \"dhcp01\", \u0026scaleway.VpcPublicGatewayDhcpArgs{\n\t\t\tSubnet:           pulumi.String(\"192.168.1.0/24\"),\n\t\t\tPushDefaultRoute: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpg01, err := scaleway.NewVpcPublicGateway(ctx, \"pg01\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tName: pulumi.String(\"foobar\"),\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t\tIpId: gw01.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewVpcGatewayNetwork(ctx, \"main\", \u0026scaleway.VpcGatewayNetworkArgs{\n\t\t\tGatewayId:        pg01.ID(),\n\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\tDhcpId:           dhcp01.ID(),\n\t\t\tCleanupDhcp:      pulumi.Bool(true),\n\t\t\tEnableMasquerade: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayIp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpArgs;\nimport com.pulumi.scaleway.VpcPublicGateway;\nimport com.pulumi.scaleway.VpcPublicGatewayArgs;\nimport com.pulumi.scaleway.VpcGatewayNetwork;\nimport com.pulumi.scaleway.VpcGatewayNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pn01 = new VpcPrivateNetwork(\"pn01\", VpcPrivateNetworkArgs.builder()\n            .name(\"pn_test_network\")\n            .build());\n\n        var gw01 = new VpcPublicGatewayIp(\"gw01\");\n\n        var dhcp01 = new VpcPublicGatewayDhcp(\"dhcp01\", VpcPublicGatewayDhcpArgs.builder()\n            .subnet(\"192.168.1.0/24\")\n            .pushDefaultRoute(true)\n            .build());\n\n        var pg01 = new VpcPublicGateway(\"pg01\", VpcPublicGatewayArgs.builder()\n            .name(\"foobar\")\n            .type(\"VPC-GW-S\")\n            .ipId(gw01.id())\n            .build());\n\n        var main = new VpcGatewayNetwork(\"main\", VpcGatewayNetworkArgs.builder()\n            .gatewayId(pg01.id())\n            .privateNetworkId(pn01.id())\n            .dhcpId(dhcp01.id())\n            .cleanupDhcp(true)\n            .enableMasquerade(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      name: pn_test_network\n  gw01:\n    type: scaleway:VpcPublicGatewayIp\n  dhcp01:\n    type: scaleway:VpcPublicGatewayDhcp\n    properties:\n      subnet: 192.168.1.0/24\n      pushDefaultRoute: true\n  pg01:\n    type: scaleway:VpcPublicGateway\n    properties:\n      name: foobar\n      type: VPC-GW-S\n      ipId: ${gw01.id}\n  main:\n    type: scaleway:VpcGatewayNetwork\n    properties:\n      gatewayId: ${pg01.id}\n      privateNetworkId: ${pn01.id}\n      dhcpId: ${dhcp01.id}\n      cleanupDhcp: true\n      enableMasquerade: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create a GatewayNetwork with a static IP address\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {name: \"pn_test_network\"});\nconst pg01 = new scaleway.VpcPublicGateway(\"pg01\", {\n    name: \"foobar\",\n    type: \"VPC-GW-S\",\n});\nconst main = new scaleway.VpcGatewayNetwork(\"main\", {\n    gatewayId: pg01.id,\n    privateNetworkId: pn01.id,\n    enableDhcp: false,\n    enableMasquerade: true,\n    staticAddress: \"192.168.1.42/24\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\npn01 = scaleway.VpcPrivateNetwork(\"pn01\", name=\"pn_test_network\")\npg01 = scaleway.VpcPublicGateway(\"pg01\",\n    name=\"foobar\",\n    type=\"VPC-GW-S\")\nmain = scaleway.VpcGatewayNetwork(\"main\",\n    gateway_id=pg01.id,\n    private_network_id=pn01.id,\n    enable_dhcp=False,\n    enable_masquerade=True,\n    static_address=\"192.168.1.42/24\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\", new()\n    {\n        Name = \"pn_test_network\",\n    });\n\n    var pg01 = new Scaleway.VpcPublicGateway(\"pg01\", new()\n    {\n        Name = \"foobar\",\n        Type = \"VPC-GW-S\",\n    });\n\n    var main = new Scaleway.VpcGatewayNetwork(\"main\", new()\n    {\n        GatewayId = pg01.Id,\n        PrivateNetworkId = pn01.Id,\n        EnableDhcp = false,\n        EnableMasquerade = true,\n        StaticAddress = \"192.168.1.42/24\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tName: pulumi.String(\"pn_test_network\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpg01, err := scaleway.NewVpcPublicGateway(ctx, \"pg01\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tName: pulumi.String(\"foobar\"),\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewVpcGatewayNetwork(ctx, \"main\", \u0026scaleway.VpcGatewayNetworkArgs{\n\t\t\tGatewayId:        pg01.ID(),\n\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\tEnableDhcp:       pulumi.Bool(false),\n\t\t\tEnableMasquerade: pulumi.Bool(true),\n\t\t\tStaticAddress:    pulumi.String(\"192.168.1.42/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.VpcPublicGateway;\nimport com.pulumi.scaleway.VpcPublicGatewayArgs;\nimport com.pulumi.scaleway.VpcGatewayNetwork;\nimport com.pulumi.scaleway.VpcGatewayNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pn01 = new VpcPrivateNetwork(\"pn01\", VpcPrivateNetworkArgs.builder()\n            .name(\"pn_test_network\")\n            .build());\n\n        var pg01 = new VpcPublicGateway(\"pg01\", VpcPublicGatewayArgs.builder()\n            .name(\"foobar\")\n            .type(\"VPC-GW-S\")\n            .build());\n\n        var main = new VpcGatewayNetwork(\"main\", VpcGatewayNetworkArgs.builder()\n            .gatewayId(pg01.id())\n            .privateNetworkId(pn01.id())\n            .enableDhcp(false)\n            .enableMasquerade(true)\n            .staticAddress(\"192.168.1.42/24\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      name: pn_test_network\n  pg01:\n    type: scaleway:VpcPublicGateway\n    properties:\n      name: foobar\n      type: VPC-GW-S\n  main:\n    type: scaleway:VpcGatewayNetwork\n    properties:\n      gatewayId: ${pg01.id}\n      privateNetworkId: ${pn01.id}\n      enableDhcp: false\n      enableMasquerade: true\n      staticAddress: 192.168.1.42/24\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nGatewayNetwork can be imported using `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/vpcGatewayNetwork:VpcGatewayNetwork main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "cleanupDhcp": {
                    "type": "boolean",
                    "description": "Whether to remove DHCP configuration on this GatewayNetwork upon destroy. Requires DHCP ID.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the GatewayNetwork.\n"
                },
                "dhcpId": {
                    "type": "string",
                    "description": "The ID of the Public Gateway DHCP configuration. Only one of `dhcp_id`, `static_address` and `ipam_config` should be specified.\n"
                },
                "enableDhcp": {
                    "type": "boolean",
                    "description": "WWhether a DHCP configuration should be enabled on this GatewayNetwork. Requires a DHCP ID.\n"
                },
                "enableMasquerade": {
                    "type": "boolean",
                    "description": "Whether masquerade (dynamic NAT) should be enabled on this GatewayNetwork\n"
                },
                "gatewayId": {
                    "type": "string",
                    "description": "The ID of the Public Gateway.\n"
                },
                "ipamConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/VpcGatewayNetworkIpamConfig:VpcGatewayNetworkIpamConfig"
                    },
                    "description": "Auto-configure the GatewayNetwork using Scaleway's IPAM (IP address management service). Only one of `dhcp_id`, `static_address` and `ipam_config` should be specified.\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "The MAC address of the GatewayNetwork.\n"
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "The ID of the Private Network.\n"
                },
                "staticAddress": {
                    "type": "string",
                    "description": "Enable DHCP configration on this GatewayNetwork. Only one of `dhcp_id`, `static_address` and `ipam_config` should be specified.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the Public Gateway's connection to the Private Network.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the GatewayNetwork.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the gateway network should be created.\n"
                }
            },
            "required": [
                "createdAt",
                "gatewayId",
                "ipamConfigs",
                "macAddress",
                "privateNetworkId",
                "staticAddress",
                "status",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "cleanupDhcp": {
                    "type": "boolean",
                    "description": "Whether to remove DHCP configuration on this GatewayNetwork upon destroy. Requires DHCP ID.\n"
                },
                "dhcpId": {
                    "type": "string",
                    "description": "The ID of the Public Gateway DHCP configuration. Only one of `dhcp_id`, `static_address` and `ipam_config` should be specified.\n"
                },
                "enableDhcp": {
                    "type": "boolean",
                    "description": "WWhether a DHCP configuration should be enabled on this GatewayNetwork. Requires a DHCP ID.\n"
                },
                "enableMasquerade": {
                    "type": "boolean",
                    "description": "Whether masquerade (dynamic NAT) should be enabled on this GatewayNetwork\n"
                },
                "gatewayId": {
                    "type": "string",
                    "description": "The ID of the Public Gateway.\n",
                    "willReplaceOnChanges": true
                },
                "ipamConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/VpcGatewayNetworkIpamConfig:VpcGatewayNetworkIpamConfig"
                    },
                    "description": "Auto-configure the GatewayNetwork using Scaleway's IPAM (IP address management service). Only one of `dhcp_id`, `static_address` and `ipam_config` should be specified.\n"
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "The ID of the Private Network.\n",
                    "willReplaceOnChanges": true
                },
                "staticAddress": {
                    "type": "string",
                    "description": "Enable DHCP configration on this GatewayNetwork. Only one of `dhcp_id`, `static_address` and `ipam_config` should be specified.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the gateway network should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "gatewayId",
                "privateNetworkId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcGatewayNetwork resources.\n",
                "properties": {
                    "cleanupDhcp": {
                        "type": "boolean",
                        "description": "Whether to remove DHCP configuration on this GatewayNetwork upon destroy. Requires DHCP ID.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the GatewayNetwork.\n"
                    },
                    "dhcpId": {
                        "type": "string",
                        "description": "The ID of the Public Gateway DHCP configuration. Only one of `dhcp_id`, `static_address` and `ipam_config` should be specified.\n"
                    },
                    "enableDhcp": {
                        "type": "boolean",
                        "description": "WWhether a DHCP configuration should be enabled on this GatewayNetwork. Requires a DHCP ID.\n"
                    },
                    "enableMasquerade": {
                        "type": "boolean",
                        "description": "Whether masquerade (dynamic NAT) should be enabled on this GatewayNetwork\n"
                    },
                    "gatewayId": {
                        "type": "string",
                        "description": "The ID of the Public Gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "ipamConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/VpcGatewayNetworkIpamConfig:VpcGatewayNetworkIpamConfig"
                        },
                        "description": "Auto-configure the GatewayNetwork using Scaleway's IPAM (IP address management service). Only one of `dhcp_id`, `static_address` and `ipam_config` should be specified.\n"
                    },
                    "macAddress": {
                        "type": "string",
                        "description": "The MAC address of the GatewayNetwork.\n"
                    },
                    "privateNetworkId": {
                        "type": "string",
                        "description": "The ID of the Private Network.\n",
                        "willReplaceOnChanges": true
                    },
                    "staticAddress": {
                        "type": "string",
                        "description": "Enable DHCP configration on this GatewayNetwork. Only one of `dhcp_id`, `static_address` and `ipam_config` should be specified.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Public Gateway's connection to the Private Network.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the GatewayNetwork.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the gateway network should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcPrivateNetwork:VpcPrivateNetwork": {
            "description": "Creates and manages Scaleway VPC Private Networks.\nFor more information, see [the API documentation](https://www.scaleway.com/en/developers/api/vpc/#private-networks-ac2df4).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst pnPriv = new scaleway.VpcPrivateNetwork(\"pn_priv\", {\n    name: \"subnet_demo\",\n    tags: [\n        \"demo\",\n        \"terraform\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\npn_priv = scaleway.VpcPrivateNetwork(\"pn_priv\",\n    name=\"subnet_demo\",\n    tags=[\n        \"demo\",\n        \"terraform\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pnPriv = new Scaleway.VpcPrivateNetwork(\"pn_priv\", new()\n    {\n        Name = \"subnet_demo\",\n        Tags = new[]\n        {\n            \"demo\",\n            \"terraform\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn_priv\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tName: pulumi.String(\"subnet_demo\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"demo\"),\n\t\t\t\tpulumi.String(\"terraform\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pnPriv = new VpcPrivateNetwork(\"pnPriv\", VpcPrivateNetworkArgs.builder()\n            .name(\"subnet_demo\")\n            .tags(            \n                \"demo\",\n                \"terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pnPriv:\n    type: scaleway:VpcPrivateNetwork\n    name: pn_priv\n    properties:\n      name: subnet_demo\n      tags:\n        - demo\n        - terraform\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### With subnets\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst pnPriv = new scaleway.VpcPrivateNetwork(\"pn_priv\", {\n    name: \"subnet_demo\",\n    tags: [\n        \"demo\",\n        \"terraform\",\n    ],\n    ipv4Subnet: {\n        subnet: \"192.168.0.0/24\",\n    },\n    ipv6Subnets: [\n        {\n            subnet: \"fd46:78ab:30b8:177c::/64\",\n        },\n        {\n            subnet: \"fd46:78ab:30b8:c7df::/64\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\npn_priv = scaleway.VpcPrivateNetwork(\"pn_priv\",\n    name=\"subnet_demo\",\n    tags=[\n        \"demo\",\n        \"terraform\",\n    ],\n    ipv4_subnet={\n        \"subnet\": \"192.168.0.0/24\",\n    },\n    ipv6_subnets=[\n        {\n            \"subnet\": \"fd46:78ab:30b8:177c::/64\",\n        },\n        {\n            \"subnet\": \"fd46:78ab:30b8:c7df::/64\",\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pnPriv = new Scaleway.VpcPrivateNetwork(\"pn_priv\", new()\n    {\n        Name = \"subnet_demo\",\n        Tags = new[]\n        {\n            \"demo\",\n            \"terraform\",\n        },\n        Ipv4Subnet = new Scaleway.Inputs.VpcPrivateNetworkIpv4SubnetArgs\n        {\n            Subnet = \"192.168.0.0/24\",\n        },\n        Ipv6Subnets = new[]\n        {\n            new Scaleway.Inputs.VpcPrivateNetworkIpv6SubnetArgs\n            {\n                Subnet = \"fd46:78ab:30b8:177c::/64\",\n            },\n            new Scaleway.Inputs.VpcPrivateNetworkIpv6SubnetArgs\n            {\n                Subnet = \"fd46:78ab:30b8:c7df::/64\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn_priv\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tName: pulumi.String(\"subnet_demo\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"demo\"),\n\t\t\t\tpulumi.String(\"terraform\"),\n\t\t\t},\n\t\t\tIpv4Subnet: \u0026scaleway.VpcPrivateNetworkIpv4SubnetArgs{\n\t\t\t\tSubnet: pulumi.String(\"192.168.0.0/24\"),\n\t\t\t},\n\t\t\tIpv6Subnets: scaleway.VpcPrivateNetworkIpv6SubnetArray{\n\t\t\t\t\u0026scaleway.VpcPrivateNetworkIpv6SubnetArgs{\n\t\t\t\t\tSubnet: pulumi.String(\"fd46:78ab:30b8:177c::/64\"),\n\t\t\t\t},\n\t\t\t\t\u0026scaleway.VpcPrivateNetworkIpv6SubnetArgs{\n\t\t\t\t\tSubnet: pulumi.String(\"fd46:78ab:30b8:c7df::/64\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.inputs.VpcPrivateNetworkIpv4SubnetArgs;\nimport com.pulumi.scaleway.inputs.VpcPrivateNetworkIpv6SubnetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pnPriv = new VpcPrivateNetwork(\"pnPriv\", VpcPrivateNetworkArgs.builder()\n            .name(\"subnet_demo\")\n            .tags(            \n                \"demo\",\n                \"terraform\")\n            .ipv4Subnet(VpcPrivateNetworkIpv4SubnetArgs.builder()\n                .subnet(\"192.168.0.0/24\")\n                .build())\n            .ipv6Subnets(            \n                VpcPrivateNetworkIpv6SubnetArgs.builder()\n                    .subnet(\"fd46:78ab:30b8:177c::/64\")\n                    .build(),\n                VpcPrivateNetworkIpv6SubnetArgs.builder()\n                    .subnet(\"fd46:78ab:30b8:c7df::/64\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pnPriv:\n    type: scaleway:VpcPrivateNetwork\n    name: pn_priv\n    properties:\n      name: subnet_demo\n      tags:\n        - demo\n        - terraform\n      ipv4Subnet:\n        subnet: 192.168.0.0/24\n      ipv6Subnets:\n        - subnet: fd46:78ab:30b8:177c::/64\n        - subnet: fd46:78ab:30b8:c7df::/64\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nPrivate Networks can be imported using `{region}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/vpcPrivateNetwork:VpcPrivateNetwork main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the subnet.\n"
                },
                "ipv4Subnet": {
                    "$ref": "#/types/scaleway:index/VpcPrivateNetworkIpv4Subnet:VpcPrivateNetworkIpv4Subnet",
                    "description": "The IPv4 subnet to associate with the Private Network.\n"
                },
                "ipv6Subnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/VpcPrivateNetworkIpv6Subnet:VpcPrivateNetworkIpv6Subnet"
                    },
                    "description": "The IPv6 subnets to associate with the private network.\n"
                },
                "isRegional": {
                    "type": "boolean",
                    "description": "Private Networks are now all necessarily regional.\n",
                    "deprecationMessage": "This field is deprecated and will be removed in the next major version"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Private Network. If not provided, it will be randomly generated.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The Organization ID the Private Network is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project the private network is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region of the Private Network.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Private Network.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the subnet.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC in which to create the Private Network.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "Use `region` instead.\n",
                    "deprecationMessage": "This field is deprecated and will be removed in the next major version, please use `region` instead"
                }
            },
            "required": [
                "createdAt",
                "ipv4Subnet",
                "ipv6Subnets",
                "isRegional",
                "name",
                "organizationId",
                "projectId",
                "region",
                "updatedAt",
                "vpcId",
                "zone"
            ],
            "inputProperties": {
                "ipv4Subnet": {
                    "$ref": "#/types/scaleway:index/VpcPrivateNetworkIpv4Subnet:VpcPrivateNetworkIpv4Subnet",
                    "description": "The IPv4 subnet to associate with the Private Network.\n"
                },
                "ipv6Subnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/VpcPrivateNetworkIpv6Subnet:VpcPrivateNetworkIpv6Subnet"
                    },
                    "description": "The IPv6 subnets to associate with the private network.\n"
                },
                "isRegional": {
                    "type": "boolean",
                    "description": "Private Networks are now all necessarily regional.\n",
                    "deprecationMessage": "This field is deprecated and will be removed in the next major version"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Private Network. If not provided, it will be randomly generated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project the private network is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region of the Private Network.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Private Network.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC in which to create the Private Network.\n",
                    "willReplaceOnChanges": true
                },
                "zone": {
                    "type": "string",
                    "description": "Use `region` instead.\n",
                    "deprecationMessage": "This field is deprecated and will be removed in the next major version, please use `region` instead"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPrivateNetwork resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the subnet.\n"
                    },
                    "ipv4Subnet": {
                        "$ref": "#/types/scaleway:index/VpcPrivateNetworkIpv4Subnet:VpcPrivateNetworkIpv4Subnet",
                        "description": "The IPv4 subnet to associate with the Private Network.\n"
                    },
                    "ipv6Subnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/VpcPrivateNetworkIpv6Subnet:VpcPrivateNetworkIpv6Subnet"
                        },
                        "description": "The IPv6 subnets to associate with the private network.\n"
                    },
                    "isRegional": {
                        "type": "boolean",
                        "description": "Private Networks are now all necessarily regional.\n",
                        "deprecationMessage": "This field is deprecated and will be removed in the next major version"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Private Network. If not provided, it will be randomly generated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The Organization ID the Private Network is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the Project the private network is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region of the Private Network.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the Private Network.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the subnet.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The VPC in which to create the Private Network.\n",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "Use `region` instead.\n",
                        "deprecationMessage": "This field is deprecated and will be removed in the next major version, please use `region` instead"
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcPublicGateway:VpcPublicGateway": {
            "description": "Creates and manages Scaleway Public Gateways.\nFor more information, see [the API documentation](https://www.scaleway.com/en/developers/api/public-gateway).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.VpcPublicGateway(\"main\", {\n    name: \"public_gateway_demo\",\n    type: \"VPC-GW-S\",\n    tags: [\n        \"demo\",\n        \"terraform\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.VpcPublicGateway(\"main\",\n    name=\"public_gateway_demo\",\n    type=\"VPC-GW-S\",\n    tags=[\n        \"demo\",\n        \"terraform\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.VpcPublicGateway(\"main\", new()\n    {\n        Name = \"public_gateway_demo\",\n        Type = \"VPC-GW-S\",\n        Tags = new[]\n        {\n            \"demo\",\n            \"terraform\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewVpcPublicGateway(ctx, \"main\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tName: pulumi.String(\"public_gateway_demo\"),\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"demo\"),\n\t\t\t\tpulumi.String(\"terraform\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPublicGateway;\nimport com.pulumi.scaleway.VpcPublicGatewayArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new VpcPublicGateway(\"main\", VpcPublicGatewayArgs.builder()\n            .name(\"public_gateway_demo\")\n            .type(\"VPC-GW-S\")\n            .tags(            \n                \"demo\",\n                \"terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:VpcPublicGateway\n    properties:\n      name: public_gateway_demo\n      type: VPC-GW-S\n      tags:\n        - demo\n        - terraform\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nPublic Gateways can be imported using `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/vpcPublicGateway:VpcPublicGateway main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "bastionEnabled": {
                    "type": "boolean",
                    "description": "Enable SSH bastion on the gateway.\n"
                },
                "bastionPort": {
                    "type": "integer",
                    "description": "The port on which the SSH bastion will listen.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the Public Gateway.\n"
                },
                "enableSmtp": {
                    "type": "boolean",
                    "description": "Enable SMTP on the gateway.\n"
                },
                "ipId": {
                    "type": "string",
                    "description": "Attach an existing flexible IP to the gateway.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Public Gateway. If not provided it will be randomly generated.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The Organization ID the Public Gateway is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the public gateway is associated with.\n"
                },
                "refreshSshKeys": {
                    "type": "string",
                    "description": "Trigger a refresh of the SSH keys on the Public Gateway by changing this field's value.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the public gateway.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags to associate with the Public Gateway.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The gateway type.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the Public Gateway.\n"
                },
                "upstreamDnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Override the gateway's default recursive DNS servers, if DNS features are enabled.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the Public Gateway should be created.\n"
                }
            },
            "required": [
                "bastionPort",
                "createdAt",
                "enableSmtp",
                "ipId",
                "name",
                "organizationId",
                "projectId",
                "status",
                "type",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "bastionEnabled": {
                    "type": "boolean",
                    "description": "Enable SSH bastion on the gateway.\n"
                },
                "bastionPort": {
                    "type": "integer",
                    "description": "The port on which the SSH bastion will listen.\n"
                },
                "enableSmtp": {
                    "type": "boolean",
                    "description": "Enable SMTP on the gateway.\n"
                },
                "ipId": {
                    "type": "string",
                    "description": "Attach an existing flexible IP to the gateway.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name for the Public Gateway. If not provided it will be randomly generated.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the public gateway is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "refreshSshKeys": {
                    "type": "string",
                    "description": "Trigger a refresh of the SSH keys on the Public Gateway by changing this field's value.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags to associate with the Public Gateway.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The gateway type.\n"
                },
                "upstreamDnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Override the gateway's default recursive DNS servers, if DNS features are enabled.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the Public Gateway should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPublicGateway resources.\n",
                "properties": {
                    "bastionEnabled": {
                        "type": "boolean",
                        "description": "Enable SSH bastion on the gateway.\n"
                    },
                    "bastionPort": {
                        "type": "integer",
                        "description": "The port on which the SSH bastion will listen.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the Public Gateway.\n"
                    },
                    "enableSmtp": {
                        "type": "boolean",
                        "description": "Enable SMTP on the gateway.\n"
                    },
                    "ipId": {
                        "type": "string",
                        "description": "Attach an existing flexible IP to the gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the Public Gateway. If not provided it will be randomly generated.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The Organization ID the Public Gateway is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the public gateway is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "refreshSshKeys": {
                        "type": "string",
                        "description": "Trigger a refresh of the SSH keys on the Public Gateway by changing this field's value.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the public gateway.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags to associate with the Public Gateway.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The gateway type.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the Public Gateway.\n"
                    },
                    "upstreamDnsServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Override the gateway's default recursive DNS servers, if DNS features are enabled.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the Public Gateway should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcPublicGatewayDhcp:VpcPublicGatewayDhcp": {
            "description": "Creates and manages Scaleway VPC Public Gateway DHCP configurations.\nFor more information, see [the documentation](https://www.scaleway.com/en/developers/api/public-gateway/#dhcp-c05544).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.VpcPublicGatewayDhcp(\"main\", {subnet: \"192.168.1.0/24\"});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.VpcPublicGatewayDhcp(\"main\", subnet=\"192.168.1.0/24\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.VpcPublicGatewayDhcp(\"main\", new()\n    {\n        Subnet = \"192.168.1.0/24\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.NewVpcPublicGatewayDhcp(ctx, \"main\", \u0026scaleway.VpcPublicGatewayDhcpArgs{\n\t\t\tSubnet: pulumi.String(\"192.168.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new VpcPublicGatewayDhcp(\"main\", VpcPublicGatewayDhcpArgs.builder()\n            .subnet(\"192.168.1.0/24\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:VpcPublicGatewayDhcp\n    properties:\n      subnet: 192.168.1.0/24\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nPublic Gateway DHCP configuration can be imported using `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/vpcPublicGatewayDhcp:VpcPublicGatewayDhcp main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IP address of the DHCP server. This will be the gateway's address in the Private Network.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the Public Gateway DHCP configuration.\n"
                },
                "dnsLocalName": {
                    "type": "string",
                    "description": "TLD given to hostnames in the Private Network. Allowed characters are `a-z0-9-.`. Defaults to the slugified Private Network name if created along a GatewayNetwork, or else to `priv`.\n"
                },
                "dnsSearches": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional DNS search paths\n"
                },
                "dnsServersOverrides": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Override the DNS server list pushed to DHCP clients, instead of the gateway itself.\n"
                },
                "enableDynamic": {
                    "type": "boolean",
                    "description": "Whether to enable dynamic pooling of IPs. By turning the dynamic pool off, only pre-existing DHCP reservations will be handed out. Defaults to `true`.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The Organization ID the Public Gateway DHCP config is associated with.\n"
                },
                "poolHigh": {
                    "type": "string",
                    "description": "High IP (excluded) of the dynamic address pool. Defaults to the last address of the subnet.\n"
                },
                "poolLow": {
                    "type": "string",
                    "description": "Low IP (included) of the dynamic address pool. Defaults to the second address of the subnet.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project the Public Gateway DHCP configuration is associated with.\n"
                },
                "pushDefaultRoute": {
                    "type": "boolean",
                    "description": "Whether the gateway should push a default route to DHCP clients or only hand out IPs. Defaults to `true`.\n"
                },
                "pushDnsServer": {
                    "type": "boolean",
                    "description": "Whether the gateway should push custom DNS servers to clients. This allows for instance hostname \u003e IP resolution. Defaults to `true`.\n"
                },
                "rebindTimer": {
                    "type": "integer",
                    "description": "After how long, in seconds, a DHCP client will query for a new lease if previous renews fail. Must be 30s lower than `valid_lifetime`. Defaults to 51m (3060s).\n"
                },
                "renewTimer": {
                    "type": "integer",
                    "description": "After how long, in seconds, a renewal will be attempted. Must be 30s lower than `rebind_timer`. Defaults to 50m (3000s).\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "The subnet to associate with the Public Gateway DHCP configuration.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the Public Gateway DHCP configuration.\n"
                },
                "validLifetime": {
                    "type": "integer",
                    "description": "How long, in seconds, DHCP entries will be valid. Defaults to 1h (3600s).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the Public Gateway DHCP configuration should be created.\n"
                }
            },
            "required": [
                "address",
                "createdAt",
                "dnsLocalName",
                "dnsSearches",
                "dnsServersOverrides",
                "enableDynamic",
                "organizationId",
                "poolHigh",
                "poolLow",
                "projectId",
                "pushDefaultRoute",
                "pushDnsServer",
                "rebindTimer",
                "renewTimer",
                "subnet",
                "updatedAt",
                "validLifetime",
                "zone"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The IP address of the DHCP server. This will be the gateway's address in the Private Network.\n"
                },
                "dnsLocalName": {
                    "type": "string",
                    "description": "TLD given to hostnames in the Private Network. Allowed characters are `a-z0-9-.`. Defaults to the slugified Private Network name if created along a GatewayNetwork, or else to `priv`.\n"
                },
                "dnsSearches": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional DNS search paths\n"
                },
                "dnsServersOverrides": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Override the DNS server list pushed to DHCP clients, instead of the gateway itself.\n"
                },
                "enableDynamic": {
                    "type": "boolean",
                    "description": "Whether to enable dynamic pooling of IPs. By turning the dynamic pool off, only pre-existing DHCP reservations will be handed out. Defaults to `true`.\n"
                },
                "poolHigh": {
                    "type": "string",
                    "description": "High IP (excluded) of the dynamic address pool. Defaults to the last address of the subnet.\n"
                },
                "poolLow": {
                    "type": "string",
                    "description": "Low IP (included) of the dynamic address pool. Defaults to the second address of the subnet.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project the Public Gateway DHCP configuration is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "pushDefaultRoute": {
                    "type": "boolean",
                    "description": "Whether the gateway should push a default route to DHCP clients or only hand out IPs. Defaults to `true`.\n"
                },
                "pushDnsServer": {
                    "type": "boolean",
                    "description": "Whether the gateway should push custom DNS servers to clients. This allows for instance hostname \u003e IP resolution. Defaults to `true`.\n"
                },
                "rebindTimer": {
                    "type": "integer",
                    "description": "After how long, in seconds, a DHCP client will query for a new lease if previous renews fail. Must be 30s lower than `valid_lifetime`. Defaults to 51m (3060s).\n"
                },
                "renewTimer": {
                    "type": "integer",
                    "description": "After how long, in seconds, a renewal will be attempted. Must be 30s lower than `rebind_timer`. Defaults to 50m (3000s).\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "The subnet to associate with the Public Gateway DHCP configuration.\n"
                },
                "validLifetime": {
                    "type": "integer",
                    "description": "How long, in seconds, DHCP entries will be valid. Defaults to 1h (3600s).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the Public Gateway DHCP configuration should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "subnet"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPublicGatewayDhcp resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP address of the DHCP server. This will be the gateway's address in the Private Network.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the Public Gateway DHCP configuration.\n"
                    },
                    "dnsLocalName": {
                        "type": "string",
                        "description": "TLD given to hostnames in the Private Network. Allowed characters are `a-z0-9-.`. Defaults to the slugified Private Network name if created along a GatewayNetwork, or else to `priv`.\n"
                    },
                    "dnsSearches": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Additional DNS search paths\n"
                    },
                    "dnsServersOverrides": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Override the DNS server list pushed to DHCP clients, instead of the gateway itself.\n"
                    },
                    "enableDynamic": {
                        "type": "boolean",
                        "description": "Whether to enable dynamic pooling of IPs. By turning the dynamic pool off, only pre-existing DHCP reservations will be handed out. Defaults to `true`.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The Organization ID the Public Gateway DHCP config is associated with.\n"
                    },
                    "poolHigh": {
                        "type": "string",
                        "description": "High IP (excluded) of the dynamic address pool. Defaults to the last address of the subnet.\n"
                    },
                    "poolLow": {
                        "type": "string",
                        "description": "Low IP (included) of the dynamic address pool. Defaults to the second address of the subnet.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the Project the Public Gateway DHCP configuration is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "pushDefaultRoute": {
                        "type": "boolean",
                        "description": "Whether the gateway should push a default route to DHCP clients or only hand out IPs. Defaults to `true`.\n"
                    },
                    "pushDnsServer": {
                        "type": "boolean",
                        "description": "Whether the gateway should push custom DNS servers to clients. This allows for instance hostname \u003e IP resolution. Defaults to `true`.\n"
                    },
                    "rebindTimer": {
                        "type": "integer",
                        "description": "After how long, in seconds, a DHCP client will query for a new lease if previous renews fail. Must be 30s lower than `valid_lifetime`. Defaults to 51m (3060s).\n"
                    },
                    "renewTimer": {
                        "type": "integer",
                        "description": "After how long, in seconds, a renewal will be attempted. Must be 30s lower than `rebind_timer`. Defaults to 50m (3000s).\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "The subnet to associate with the Public Gateway DHCP configuration.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the Public Gateway DHCP configuration.\n"
                    },
                    "validLifetime": {
                        "type": "integer",
                        "description": "How long, in seconds, DHCP entries will be valid. Defaults to 1h (3600s).\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the Public Gateway DHCP configuration should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcPublicGatewayDhcpReservation:VpcPublicGatewayDhcpReservation": {
            "description": "Creates and manages [Scaleway DHCP Reservations](https://www.scaleway.com/en/docs/network/vpc/concepts/#dhcp).\n\nThese static associations are used to assign IP addresses based on the MAC addresses of the resource.\n\nStatically assigned IP addresses should fall within the configured subnet, but be outside of the dynamic range.\n\nFor more information, see [the API documentation](https://www.scaleway.com/en/developers/api/public-gateway/#dhcp-c05544).\n\n[DHCP reservations](https://www.scaleway.com/en/developers/api/public-gateway/#dhcp-entries-e40fb6) hold both dynamic DHCP leases (IP addresses dynamically assigned by the gateway to resources) and static user-created DHCP reservations.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.VpcPrivateNetwork(\"main\", {name: \"your_private_network\"});\nconst mainInstanceServer = new scaleway.InstanceServer(\"main\", {\n    image: \"ubuntu_jammy\",\n    type: \"DEV1-S\",\n    zone: \"fr-par-1\",\n    privateNetworks: [{\n        pnId: main.id,\n    }],\n});\nconst mainVpcPublicGatewayIp = new scaleway.VpcPublicGatewayIp(\"main\", {});\nconst mainVpcPublicGatewayDhcp = new scaleway.VpcPublicGatewayDhcp(\"main\", {subnet: \"192.168.1.0/24\"});\nconst mainVpcPublicGateway = new scaleway.VpcPublicGateway(\"main\", {\n    name: \"foobar\",\n    type: \"VPC-GW-S\",\n    ipId: mainVpcPublicGatewayIp.id,\n});\nconst mainVpcGatewayNetwork = new scaleway.VpcGatewayNetwork(\"main\", {\n    gatewayId: mainVpcPublicGateway.id,\n    privateNetworkId: main.id,\n    dhcpId: mainVpcPublicGatewayDhcp.id,\n    cleanupDhcp: true,\n    enableMasquerade: true,\n}, {\n    dependsOn: [\n        mainVpcPublicGatewayIp,\n        main,\n    ],\n});\nconst mainVpcPublicGatewayDhcpReservation = new scaleway.VpcPublicGatewayDhcpReservation(\"main\", {\n    gatewayNetworkId: mainVpcGatewayNetwork.id,\n    macAddress: mainInstanceServer.privateNetworks.apply(privateNetworks =\u003e privateNetworks?.[0]?.macAddress),\n    ipAddress: \"192.168.1.1\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.VpcPrivateNetwork(\"main\", name=\"your_private_network\")\nmain_instance_server = scaleway.InstanceServer(\"main\",\n    image=\"ubuntu_jammy\",\n    type=\"DEV1-S\",\n    zone=\"fr-par-1\",\n    private_networks=[{\n        \"pn_id\": main.id,\n    }])\nmain_vpc_public_gateway_ip = scaleway.VpcPublicGatewayIp(\"main\")\nmain_vpc_public_gateway_dhcp = scaleway.VpcPublicGatewayDhcp(\"main\", subnet=\"192.168.1.0/24\")\nmain_vpc_public_gateway = scaleway.VpcPublicGateway(\"main\",\n    name=\"foobar\",\n    type=\"VPC-GW-S\",\n    ip_id=main_vpc_public_gateway_ip.id)\nmain_vpc_gateway_network = scaleway.VpcGatewayNetwork(\"main\",\n    gateway_id=main_vpc_public_gateway.id,\n    private_network_id=main.id,\n    dhcp_id=main_vpc_public_gateway_dhcp.id,\n    cleanup_dhcp=True,\n    enable_masquerade=True,\n    opts = pulumi.ResourceOptions(depends_on=[\n            main_vpc_public_gateway_ip,\n            main,\n        ]))\nmain_vpc_public_gateway_dhcp_reservation = scaleway.VpcPublicGatewayDhcpReservation(\"main\",\n    gateway_network_id=main_vpc_gateway_network.id,\n    mac_address=main_instance_server.private_networks[0].mac_address,\n    ip_address=\"192.168.1.1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.VpcPrivateNetwork(\"main\", new()\n    {\n        Name = \"your_private_network\",\n    });\n\n    var mainInstanceServer = new Scaleway.InstanceServer(\"main\", new()\n    {\n        Image = \"ubuntu_jammy\",\n        Type = \"DEV1-S\",\n        Zone = \"fr-par-1\",\n        PrivateNetworks = new[]\n        {\n            new Scaleway.Inputs.InstanceServerPrivateNetworkArgs\n            {\n                PnId = main.Id,\n            },\n        },\n    });\n\n    var mainVpcPublicGatewayIp = new Scaleway.VpcPublicGatewayIp(\"main\");\n\n    var mainVpcPublicGatewayDhcp = new Scaleway.VpcPublicGatewayDhcp(\"main\", new()\n    {\n        Subnet = \"192.168.1.0/24\",\n    });\n\n    var mainVpcPublicGateway = new Scaleway.VpcPublicGateway(\"main\", new()\n    {\n        Name = \"foobar\",\n        Type = \"VPC-GW-S\",\n        IpId = mainVpcPublicGatewayIp.Id,\n    });\n\n    var mainVpcGatewayNetwork = new Scaleway.VpcGatewayNetwork(\"main\", new()\n    {\n        GatewayId = mainVpcPublicGateway.Id,\n        PrivateNetworkId = main.Id,\n        DhcpId = mainVpcPublicGatewayDhcp.Id,\n        CleanupDhcp = true,\n        EnableMasquerade = true,\n    }, new CustomResourceOptions\n    {\n        DependsOn =\n        {\n            mainVpcPublicGatewayIp,\n            main,\n        },\n    });\n\n    var mainVpcPublicGatewayDhcpReservation = new Scaleway.VpcPublicGatewayDhcpReservation(\"main\", new()\n    {\n        GatewayNetworkId = mainVpcGatewayNetwork.Id,\n        MacAddress = mainInstanceServer.PrivateNetworks.Apply(privateNetworks =\u003e privateNetworks[0]?.MacAddress),\n        IpAddress = \"192.168.1.1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewVpcPrivateNetwork(ctx, \"main\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tName: pulumi.String(\"your_private_network\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainInstanceServer, err := scaleway.NewInstanceServer(ctx, \"main\", \u0026scaleway.InstanceServerArgs{\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tZone:  pulumi.String(\"fr-par-1\"),\n\t\t\tPrivateNetworks: scaleway.InstanceServerPrivateNetworkArray{\n\t\t\t\t\u0026scaleway.InstanceServerPrivateNetworkArgs{\n\t\t\t\t\tPnId: main.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcPublicGatewayIp, err := scaleway.NewVpcPublicGatewayIp(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcPublicGatewayDhcp, err := scaleway.NewVpcPublicGatewayDhcp(ctx, \"main\", \u0026scaleway.VpcPublicGatewayDhcpArgs{\n\t\t\tSubnet: pulumi.String(\"192.168.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcPublicGateway, err := scaleway.NewVpcPublicGateway(ctx, \"main\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tName: pulumi.String(\"foobar\"),\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t\tIpId: mainVpcPublicGatewayIp.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcGatewayNetwork, err := scaleway.NewVpcGatewayNetwork(ctx, \"main\", \u0026scaleway.VpcGatewayNetworkArgs{\n\t\t\tGatewayId:        mainVpcPublicGateway.ID(),\n\t\t\tPrivateNetworkId: main.ID(),\n\t\t\tDhcpId:           mainVpcPublicGatewayDhcp.ID(),\n\t\t\tCleanupDhcp:      pulumi.Bool(true),\n\t\t\tEnableMasquerade: pulumi.Bool(true),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmainVpcPublicGatewayIp,\n\t\t\tmain,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewVpcPublicGatewayDhcpReservation(ctx, \"main\", \u0026scaleway.VpcPublicGatewayDhcpReservationArgs{\n\t\t\tGatewayNetworkId: mainVpcGatewayNetwork.ID(),\n\t\t\tMacAddress: pulumi.String(mainInstanceServer.PrivateNetworks.ApplyT(func(privateNetworks []scaleway.InstanceServerPrivateNetwork) (*string, error) {\n\t\t\t\treturn \u0026privateNetworks[0].MacAddress, nil\n\t\t\t}).(pulumi.StringPtrOutput)),\n\t\t\tIpAddress: pulumi.String(\"192.168.1.1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.inputs.InstanceServerPrivateNetworkArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayIp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpArgs;\nimport com.pulumi.scaleway.VpcPublicGateway;\nimport com.pulumi.scaleway.VpcPublicGatewayArgs;\nimport com.pulumi.scaleway.VpcGatewayNetwork;\nimport com.pulumi.scaleway.VpcGatewayNetworkArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpReservation;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpReservationArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new VpcPrivateNetwork(\"main\", VpcPrivateNetworkArgs.builder()\n            .name(\"your_private_network\")\n            .build());\n\n        var mainInstanceServer = new InstanceServer(\"mainInstanceServer\", InstanceServerArgs.builder()\n            .image(\"ubuntu_jammy\")\n            .type(\"DEV1-S\")\n            .zone(\"fr-par-1\")\n            .privateNetworks(InstanceServerPrivateNetworkArgs.builder()\n                .pnId(main.id())\n                .build())\n            .build());\n\n        var mainVpcPublicGatewayIp = new VpcPublicGatewayIp(\"mainVpcPublicGatewayIp\");\n\n        var mainVpcPublicGatewayDhcp = new VpcPublicGatewayDhcp(\"mainVpcPublicGatewayDhcp\", VpcPublicGatewayDhcpArgs.builder()\n            .subnet(\"192.168.1.0/24\")\n            .build());\n\n        var mainVpcPublicGateway = new VpcPublicGateway(\"mainVpcPublicGateway\", VpcPublicGatewayArgs.builder()\n            .name(\"foobar\")\n            .type(\"VPC-GW-S\")\n            .ipId(mainVpcPublicGatewayIp.id())\n            .build());\n\n        var mainVpcGatewayNetwork = new VpcGatewayNetwork(\"mainVpcGatewayNetwork\", VpcGatewayNetworkArgs.builder()\n            .gatewayId(mainVpcPublicGateway.id())\n            .privateNetworkId(main.id())\n            .dhcpId(mainVpcPublicGatewayDhcp.id())\n            .cleanupDhcp(true)\n            .enableMasquerade(true)\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(                \n                    mainVpcPublicGatewayIp,\n                    main)\n                .build());\n\n        var mainVpcPublicGatewayDhcpReservation = new VpcPublicGatewayDhcpReservation(\"mainVpcPublicGatewayDhcpReservation\", VpcPublicGatewayDhcpReservationArgs.builder()\n            .gatewayNetworkId(mainVpcGatewayNetwork.id())\n            .macAddress(mainInstanceServer.privateNetworks().applyValue(privateNetworks -\u003e privateNetworks[0].macAddress()))\n            .ipAddress(\"192.168.1.1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      name: your_private_network\n  mainInstanceServer:\n    type: scaleway:InstanceServer\n    name: main\n    properties:\n      image: ubuntu_jammy\n      type: DEV1-S\n      zone: fr-par-1\n      privateNetworks:\n        - pnId: ${main.id}\n  mainVpcPublicGatewayIp:\n    type: scaleway:VpcPublicGatewayIp\n    name: main\n  mainVpcPublicGatewayDhcp:\n    type: scaleway:VpcPublicGatewayDhcp\n    name: main\n    properties:\n      subnet: 192.168.1.0/24\n  mainVpcPublicGateway:\n    type: scaleway:VpcPublicGateway\n    name: main\n    properties:\n      name: foobar\n      type: VPC-GW-S\n      ipId: ${mainVpcPublicGatewayIp.id}\n  mainVpcGatewayNetwork:\n    type: scaleway:VpcGatewayNetwork\n    name: main\n    properties:\n      gatewayId: ${mainVpcPublicGateway.id}\n      privateNetworkId: ${main.id}\n      dhcpId: ${mainVpcPublicGatewayDhcp.id}\n      cleanupDhcp: true\n      enableMasquerade: true\n    options:\n      dependson:\n        - ${mainVpcPublicGatewayIp}\n        - ${main}\n  mainVpcPublicGatewayDhcpReservation:\n    type: scaleway:VpcPublicGatewayDhcpReservation\n    name: main\n    properties:\n      gatewayNetworkId: ${mainVpcGatewayNetwork.id}\n      macAddress: ${mainInstanceServer.privateNetworks[0].macAddress}\n      ipAddress: 192.168.1.1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nPublic Gateway DHCP reservation configurations can be imported using `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/vpcPublicGatewayDhcpReservation:VpcPublicGatewayDhcpReservation main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the Public Gateway DHCP configuration.\n"
                },
                "gatewayNetworkId": {
                    "type": "string",
                    "description": "The ID of the owning GatewayNetwork.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname of the client machine.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address to give to the machine.\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "The MAC address for the static entry.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The reservation type, either static (DHCP reservation) or dynamic (DHCP lease). Possible values are `reservation` and `lease`.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the Public Gateway DHCP configuration.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n"
                }
            },
            "required": [
                "createdAt",
                "gatewayNetworkId",
                "hostname",
                "ipAddress",
                "macAddress",
                "type",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "gatewayNetworkId": {
                    "type": "string",
                    "description": "The ID of the owning GatewayNetwork.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address to give to the machine.\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "The MAC address for the static entry.\n",
                    "willReplaceOnChanges": true
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "gatewayNetworkId",
                "ipAddress",
                "macAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPublicGatewayDhcpReservation resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the Public Gateway DHCP configuration.\n"
                    },
                    "gatewayNetworkId": {
                        "type": "string",
                        "description": "The ID of the owning GatewayNetwork.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname of the client machine.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address to give to the machine.\n"
                    },
                    "macAddress": {
                        "type": "string",
                        "description": "The MAC address for the static entry.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The reservation type, either static (DHCP reservation) or dynamic (DHCP lease). Possible values are `reservation` and `lease`.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the Public Gateway DHCP configuration.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the public gateway DHCP config should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcPublicGatewayIp:VpcPublicGatewayIp": {
            "description": "Creates and manages Scaleway VPC Public Gateway public (flexible) IP addresses.\nFor more information, see [the API documentation](https://www.scaleway.com/en/developers/api/public-gateway/#path-ips-list-ips).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.VpcPublicGatewayIp(\"main\", {reverse: \"tf.example.com\"});\nconst tfA = new scaleway.DomainRecord(\"tf_A\", {\n    dnsZone: \"example.com\",\n    name: \"tf\",\n    type: \"A\",\n    data: main.address,\n    ttl: 3600,\n    priority: 1,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.VpcPublicGatewayIp(\"main\", reverse=\"tf.example.com\")\ntf_a = scaleway.DomainRecord(\"tf_A\",\n    dns_zone=\"example.com\",\n    name=\"tf\",\n    type=\"A\",\n    data=main.address,\n    ttl=3600,\n    priority=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.VpcPublicGatewayIp(\"main\", new()\n    {\n        Reverse = \"tf.example.com\",\n    });\n\n    var tfA = new Scaleway.DomainRecord(\"tf_A\", new()\n    {\n        DnsZone = \"example.com\",\n        Name = \"tf\",\n        Type = \"A\",\n        Data = main.Address,\n        Ttl = 3600,\n        Priority = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewVpcPublicGatewayIp(ctx, \"main\", \u0026scaleway.VpcPublicGatewayIpArgs{\n\t\t\tReverse: pulumi.String(\"tf.example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"tf_A\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone:  pulumi.String(\"example.com\"),\n\t\t\tName:     pulumi.String(\"tf\"),\n\t\t\tType:     pulumi.String(\"A\"),\n\t\t\tData:     main.Address,\n\t\t\tTtl:      pulumi.Int(3600),\n\t\t\tPriority: pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPublicGatewayIp;\nimport com.pulumi.scaleway.VpcPublicGatewayIpArgs;\nimport com.pulumi.scaleway.DomainRecord;\nimport com.pulumi.scaleway.DomainRecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new VpcPublicGatewayIp(\"main\", VpcPublicGatewayIpArgs.builder()\n            .reverse(\"tf.example.com\")\n            .build());\n\n        var tfA = new DomainRecord(\"tfA\", DomainRecordArgs.builder()\n            .dnsZone(\"example.com\")\n            .name(\"tf\")\n            .type(\"A\")\n            .data(main.address())\n            .ttl(3600)\n            .priority(1)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tfA:\n    type: scaleway:DomainRecord\n    name: tf_A\n    properties:\n      dnsZone: example.com\n      name: tf\n      type: A\n      data: ${main.address}\n      ttl: 3600\n      priority: 1\n  main:\n    type: scaleway:VpcPublicGatewayIp\n    properties:\n      reverse: tf.example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nPublic Gateway IPs can be imported using `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/vpcPublicGatewayIp:VpcPublicGatewayIp main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IP address itself.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the Public Gateway IP.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The Organization ID the Public Gateway IP is associated with.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project the Public Gateway IP is associated with.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain name for the IP address\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Public Gateway IP.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the Public Gateway IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the Public Gateway IP should be created.\n"
                }
            },
            "required": [
                "address",
                "createdAt",
                "organizationId",
                "projectId",
                "reverse",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the Project the Public Gateway IP is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain name for the IP address\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the Public Gateway IP.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the Public Gateway IP should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPublicGatewayIp resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP address itself.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the Public Gateway IP.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The Organization ID the Public Gateway IP is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the Project the Public Gateway IP is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse domain name for the IP address\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the Public Gateway IP.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the Public Gateway IP.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the Public Gateway IP should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcPublicGatewayIpReverseDns:VpcPublicGatewayIpReverseDns": {
            "description": "Manages Scaleway Public Gateway public (flexible) IPs' reverse DNS.\nFor more information, see [the API documentation](https://www.scaleway.com/en/developers/api/public-gateway/#path-ips-list-ips).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.VpcPublicGatewayIp(\"main\", {});\nconst tfA = new scaleway.DomainRecord(\"tf_A\", {\n    dnsZone: \"example.com\",\n    name: \"tf\",\n    type: \"A\",\n    data: main.address,\n    ttl: 3600,\n    priority: 1,\n});\nconst mainVpcPublicGatewayIpReverseDns = new scaleway.VpcPublicGatewayIpReverseDns(\"main\", {\n    gatewayIpId: main.id,\n    reverse: \"tf.example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.VpcPublicGatewayIp(\"main\")\ntf_a = scaleway.DomainRecord(\"tf_A\",\n    dns_zone=\"example.com\",\n    name=\"tf\",\n    type=\"A\",\n    data=main.address,\n    ttl=3600,\n    priority=1)\nmain_vpc_public_gateway_ip_reverse_dns = scaleway.VpcPublicGatewayIpReverseDns(\"main\",\n    gateway_ip_id=main.id,\n    reverse=\"tf.example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.VpcPublicGatewayIp(\"main\");\n\n    var tfA = new Scaleway.DomainRecord(\"tf_A\", new()\n    {\n        DnsZone = \"example.com\",\n        Name = \"tf\",\n        Type = \"A\",\n        Data = main.Address,\n        Ttl = 3600,\n        Priority = 1,\n    });\n\n    var mainVpcPublicGatewayIpReverseDns = new Scaleway.VpcPublicGatewayIpReverseDns(\"main\", new()\n    {\n        GatewayIpId = main.Id,\n        Reverse = \"tf.example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewVpcPublicGatewayIp(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewDomainRecord(ctx, \"tf_A\", \u0026scaleway.DomainRecordArgs{\n\t\t\tDnsZone:  pulumi.String(\"example.com\"),\n\t\t\tName:     pulumi.String(\"tf\"),\n\t\t\tType:     pulumi.String(\"A\"),\n\t\t\tData:     main.Address,\n\t\t\tTtl:      pulumi.Int(3600),\n\t\t\tPriority: pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewVpcPublicGatewayIpReverseDns(ctx, \"main\", \u0026scaleway.VpcPublicGatewayIpReverseDnsArgs{\n\t\t\tGatewayIpId: main.ID(),\n\t\t\tReverse:     pulumi.String(\"tf.example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPublicGatewayIp;\nimport com.pulumi.scaleway.DomainRecord;\nimport com.pulumi.scaleway.DomainRecordArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayIpReverseDns;\nimport com.pulumi.scaleway.VpcPublicGatewayIpReverseDnsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new VpcPublicGatewayIp(\"main\");\n\n        var tfA = new DomainRecord(\"tfA\", DomainRecordArgs.builder()\n            .dnsZone(\"example.com\")\n            .name(\"tf\")\n            .type(\"A\")\n            .data(main.address())\n            .ttl(3600)\n            .priority(1)\n            .build());\n\n        var mainVpcPublicGatewayIpReverseDns = new VpcPublicGatewayIpReverseDns(\"mainVpcPublicGatewayIpReverseDns\", VpcPublicGatewayIpReverseDnsArgs.builder()\n            .gatewayIpId(main.id())\n            .reverse(\"tf.example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:VpcPublicGatewayIp\n  tfA:\n    type: scaleway:DomainRecord\n    name: tf_A\n    properties:\n      dnsZone: example.com\n      name: tf\n      type: A\n      data: ${main.address}\n      ttl: 3600\n      priority: 1\n  mainVpcPublicGatewayIpReverseDns:\n    type: scaleway:VpcPublicGatewayIpReverseDns\n    name: main\n    properties:\n      gatewayIpId: ${main.id}\n      reverse: tf.example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nPublic Gateway IP reverse DNS can be imported using `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/vpcPublicGatewayIpReverseDns:VpcPublicGatewayIpReverseDns reverse fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "gatewayIpId": {
                    "type": "string",
                    "description": "The Public Gateway IP ID\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain name for this IP address\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n"
                }
            },
            "required": [
                "gatewayIpId",
                "reverse",
                "zone"
            ],
            "inputProperties": {
                "gatewayIpId": {
                    "type": "string",
                    "description": "The Public Gateway IP ID\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse domain name for this IP address\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the IP should be reserved.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "gatewayIpId",
                "reverse"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPublicGatewayIpReverseDns resources.\n",
                "properties": {
                    "gatewayIpId": {
                        "type": "string",
                        "description": "The Public Gateway IP ID\n"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse domain name for this IP address\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the IP should be reserved.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcPublicGatewayPatRule:VpcPublicGatewayPatRule": {
            "description": "Creates and manages Scaleway Public Gateway PAT (Port Address Translation).\nFor more information, see [the API documentation](https://www.scaleway.com/en/developers/api/public-gateway/#pat-rules-e75d10).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst sg01 = new scaleway.InstanceSecurityGroup(\"sg01\", {\n    inboundDefaultPolicy: \"drop\",\n    outboundDefaultPolicy: \"accept\",\n    inboundRules: [{\n        action: \"accept\",\n        port: 22,\n        protocol: \"TCP\",\n    }],\n});\nconst srv01 = new scaleway.InstanceServer(\"srv01\", {\n    name: \"my-server\",\n    type: \"PLAY2-NANO\",\n    image: \"ubuntu_jammy\",\n    securityGroupId: sg01.id,\n});\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {name: \"my-pn\"});\nconst pnic01 = new scaleway.InstancePrivateNic(\"pnic01\", {\n    serverId: srv01.id,\n    privateNetworkId: pn01.id,\n});\nconst dhcp01 = new scaleway.VpcPublicGatewayDhcp(\"dhcp01\", {subnet: \"192.168.0.0/24\"});\nconst ip01 = new scaleway.VpcPublicGatewayIp(\"ip01\", {});\nconst pg01 = new scaleway.VpcPublicGateway(\"pg01\", {\n    name: \"my-pg\",\n    type: \"VPC-GW-S\",\n    ipId: ip01.id,\n});\nconst gn01 = new scaleway.VpcGatewayNetwork(\"gn01\", {\n    gatewayId: pg01.id,\n    privateNetworkId: pn01.id,\n    dhcpId: dhcp01.id,\n    cleanupDhcp: true,\n    enableMasquerade: true,\n});\nconst rsv01 = new scaleway.VpcPublicGatewayDhcpReservation(\"rsv01\", {\n    gatewayNetworkId: gn01.id,\n    macAddress: pnic01.macAddress,\n    ipAddress: \"192.168.0.7\",\n});\n// PAT rule for SSH traffic\nconst pat01 = new scaleway.VpcPublicGatewayPatRule(\"pat01\", {\n    gatewayId: pg01.id,\n    privateIp: rsv01.ipAddress,\n    privatePort: 22,\n    publicPort: 2202,\n    protocol: \"tcp\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nsg01 = scaleway.InstanceSecurityGroup(\"sg01\",\n    inbound_default_policy=\"drop\",\n    outbound_default_policy=\"accept\",\n    inbound_rules=[{\n        \"action\": \"accept\",\n        \"port\": 22,\n        \"protocol\": \"TCP\",\n    }])\nsrv01 = scaleway.InstanceServer(\"srv01\",\n    name=\"my-server\",\n    type=\"PLAY2-NANO\",\n    image=\"ubuntu_jammy\",\n    security_group_id=sg01.id)\npn01 = scaleway.VpcPrivateNetwork(\"pn01\", name=\"my-pn\")\npnic01 = scaleway.InstancePrivateNic(\"pnic01\",\n    server_id=srv01.id,\n    private_network_id=pn01.id)\ndhcp01 = scaleway.VpcPublicGatewayDhcp(\"dhcp01\", subnet=\"192.168.0.0/24\")\nip01 = scaleway.VpcPublicGatewayIp(\"ip01\")\npg01 = scaleway.VpcPublicGateway(\"pg01\",\n    name=\"my-pg\",\n    type=\"VPC-GW-S\",\n    ip_id=ip01.id)\ngn01 = scaleway.VpcGatewayNetwork(\"gn01\",\n    gateway_id=pg01.id,\n    private_network_id=pn01.id,\n    dhcp_id=dhcp01.id,\n    cleanup_dhcp=True,\n    enable_masquerade=True)\nrsv01 = scaleway.VpcPublicGatewayDhcpReservation(\"rsv01\",\n    gateway_network_id=gn01.id,\n    mac_address=pnic01.mac_address,\n    ip_address=\"192.168.0.7\")\n# PAT rule for SSH traffic\npat01 = scaleway.VpcPublicGatewayPatRule(\"pat01\",\n    gateway_id=pg01.id,\n    private_ip=rsv01.ip_address,\n    private_port=22,\n    public_port=2202,\n    protocol=\"tcp\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sg01 = new Scaleway.InstanceSecurityGroup(\"sg01\", new()\n    {\n        InboundDefaultPolicy = \"drop\",\n        OutboundDefaultPolicy = \"accept\",\n        InboundRules = new[]\n        {\n            new Scaleway.Inputs.InstanceSecurityGroupInboundRuleArgs\n            {\n                Action = \"accept\",\n                Port = 22,\n                Protocol = \"TCP\",\n            },\n        },\n    });\n\n    var srv01 = new Scaleway.InstanceServer(\"srv01\", new()\n    {\n        Name = \"my-server\",\n        Type = \"PLAY2-NANO\",\n        Image = \"ubuntu_jammy\",\n        SecurityGroupId = sg01.Id,\n    });\n\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\", new()\n    {\n        Name = \"my-pn\",\n    });\n\n    var pnic01 = new Scaleway.InstancePrivateNic(\"pnic01\", new()\n    {\n        ServerId = srv01.Id,\n        PrivateNetworkId = pn01.Id,\n    });\n\n    var dhcp01 = new Scaleway.VpcPublicGatewayDhcp(\"dhcp01\", new()\n    {\n        Subnet = \"192.168.0.0/24\",\n    });\n\n    var ip01 = new Scaleway.VpcPublicGatewayIp(\"ip01\");\n\n    var pg01 = new Scaleway.VpcPublicGateway(\"pg01\", new()\n    {\n        Name = \"my-pg\",\n        Type = \"VPC-GW-S\",\n        IpId = ip01.Id,\n    });\n\n    var gn01 = new Scaleway.VpcGatewayNetwork(\"gn01\", new()\n    {\n        GatewayId = pg01.Id,\n        PrivateNetworkId = pn01.Id,\n        DhcpId = dhcp01.Id,\n        CleanupDhcp = true,\n        EnableMasquerade = true,\n    });\n\n    var rsv01 = new Scaleway.VpcPublicGatewayDhcpReservation(\"rsv01\", new()\n    {\n        GatewayNetworkId = gn01.Id,\n        MacAddress = pnic01.MacAddress,\n        IpAddress = \"192.168.0.7\",\n    });\n\n    // PAT rule for SSH traffic\n    var pat01 = new Scaleway.VpcPublicGatewayPatRule(\"pat01\", new()\n    {\n        GatewayId = pg01.Id,\n        PrivateIp = rsv01.IpAddress,\n        PrivatePort = 22,\n        PublicPort = 2202,\n        Protocol = \"tcp\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsg01, err := scaleway.NewInstanceSecurityGroup(ctx, \"sg01\", \u0026scaleway.InstanceSecurityGroupArgs{\n\t\t\tInboundDefaultPolicy:  pulumi.String(\"drop\"),\n\t\t\tOutboundDefaultPolicy: pulumi.String(\"accept\"),\n\t\t\tInboundRules: scaleway.InstanceSecurityGroupInboundRuleArray{\n\t\t\t\t\u0026scaleway.InstanceSecurityGroupInboundRuleArgs{\n\t\t\t\t\tAction:   pulumi.String(\"accept\"),\n\t\t\t\t\tPort:     pulumi.Int(22),\n\t\t\t\t\tProtocol: pulumi.String(\"TCP\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrv01, err := scaleway.NewInstanceServer(ctx, \"srv01\", \u0026scaleway.InstanceServerArgs{\n\t\t\tName:            pulumi.String(\"my-server\"),\n\t\t\tType:            pulumi.String(\"PLAY2-NANO\"),\n\t\t\tImage:           pulumi.String(\"ubuntu_jammy\"),\n\t\t\tSecurityGroupId: sg01.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tName: pulumi.String(\"my-pn\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpnic01, err := scaleway.NewInstancePrivateNic(ctx, \"pnic01\", \u0026scaleway.InstancePrivateNicArgs{\n\t\t\tServerId:         srv01.ID(),\n\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdhcp01, err := scaleway.NewVpcPublicGatewayDhcp(ctx, \"dhcp01\", \u0026scaleway.VpcPublicGatewayDhcpArgs{\n\t\t\tSubnet: pulumi.String(\"192.168.0.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tip01, err := scaleway.NewVpcPublicGatewayIp(ctx, \"ip01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpg01, err := scaleway.NewVpcPublicGateway(ctx, \"pg01\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tName: pulumi.String(\"my-pg\"),\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t\tIpId: ip01.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgn01, err := scaleway.NewVpcGatewayNetwork(ctx, \"gn01\", \u0026scaleway.VpcGatewayNetworkArgs{\n\t\t\tGatewayId:        pg01.ID(),\n\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\tDhcpId:           dhcp01.ID(),\n\t\t\tCleanupDhcp:      pulumi.Bool(true),\n\t\t\tEnableMasquerade: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\trsv01, err := scaleway.NewVpcPublicGatewayDhcpReservation(ctx, \"rsv01\", \u0026scaleway.VpcPublicGatewayDhcpReservationArgs{\n\t\t\tGatewayNetworkId: gn01.ID(),\n\t\t\tMacAddress:       pnic01.MacAddress,\n\t\t\tIpAddress:        pulumi.String(\"192.168.0.7\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// PAT rule for SSH traffic\n\t\t_, err = scaleway.NewVpcPublicGatewayPatRule(ctx, \"pat01\", \u0026scaleway.VpcPublicGatewayPatRuleArgs{\n\t\t\tGatewayId:   pg01.ID(),\n\t\t\tPrivateIp:   rsv01.IpAddress,\n\t\t\tPrivatePort: pulumi.Int(22),\n\t\t\tPublicPort:  pulumi.Int(2202),\n\t\t\tProtocol:    pulumi.String(\"tcp\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceSecurityGroup;\nimport com.pulumi.scaleway.InstanceSecurityGroupArgs;\nimport com.pulumi.scaleway.inputs.InstanceSecurityGroupInboundRuleArgs;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.InstancePrivateNic;\nimport com.pulumi.scaleway.InstancePrivateNicArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayIp;\nimport com.pulumi.scaleway.VpcPublicGateway;\nimport com.pulumi.scaleway.VpcPublicGatewayArgs;\nimport com.pulumi.scaleway.VpcGatewayNetwork;\nimport com.pulumi.scaleway.VpcGatewayNetworkArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpReservation;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpReservationArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayPatRule;\nimport com.pulumi.scaleway.VpcPublicGatewayPatRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sg01 = new InstanceSecurityGroup(\"sg01\", InstanceSecurityGroupArgs.builder()\n            .inboundDefaultPolicy(\"drop\")\n            .outboundDefaultPolicy(\"accept\")\n            .inboundRules(InstanceSecurityGroupInboundRuleArgs.builder()\n                .action(\"accept\")\n                .port(22)\n                .protocol(\"TCP\")\n                .build())\n            .build());\n\n        var srv01 = new InstanceServer(\"srv01\", InstanceServerArgs.builder()\n            .name(\"my-server\")\n            .type(\"PLAY2-NANO\")\n            .image(\"ubuntu_jammy\")\n            .securityGroupId(sg01.id())\n            .build());\n\n        var pn01 = new VpcPrivateNetwork(\"pn01\", VpcPrivateNetworkArgs.builder()\n            .name(\"my-pn\")\n            .build());\n\n        var pnic01 = new InstancePrivateNic(\"pnic01\", InstancePrivateNicArgs.builder()\n            .serverId(srv01.id())\n            .privateNetworkId(pn01.id())\n            .build());\n\n        var dhcp01 = new VpcPublicGatewayDhcp(\"dhcp01\", VpcPublicGatewayDhcpArgs.builder()\n            .subnet(\"192.168.0.0/24\")\n            .build());\n\n        var ip01 = new VpcPublicGatewayIp(\"ip01\");\n\n        var pg01 = new VpcPublicGateway(\"pg01\", VpcPublicGatewayArgs.builder()\n            .name(\"my-pg\")\n            .type(\"VPC-GW-S\")\n            .ipId(ip01.id())\n            .build());\n\n        var gn01 = new VpcGatewayNetwork(\"gn01\", VpcGatewayNetworkArgs.builder()\n            .gatewayId(pg01.id())\n            .privateNetworkId(pn01.id())\n            .dhcpId(dhcp01.id())\n            .cleanupDhcp(true)\n            .enableMasquerade(true)\n            .build());\n\n        var rsv01 = new VpcPublicGatewayDhcpReservation(\"rsv01\", VpcPublicGatewayDhcpReservationArgs.builder()\n            .gatewayNetworkId(gn01.id())\n            .macAddress(pnic01.macAddress())\n            .ipAddress(\"192.168.0.7\")\n            .build());\n\n        // PAT rule for SSH traffic\n        var pat01 = new VpcPublicGatewayPatRule(\"pat01\", VpcPublicGatewayPatRuleArgs.builder()\n            .gatewayId(pg01.id())\n            .privateIp(rsv01.ipAddress())\n            .privatePort(22)\n            .publicPort(2202)\n            .protocol(\"tcp\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sg01:\n    type: scaleway:InstanceSecurityGroup\n    properties:\n      inboundDefaultPolicy: drop\n      outboundDefaultPolicy: accept\n      inboundRules:\n        - action: accept\n          port: 22\n          protocol: TCP\n  srv01:\n    type: scaleway:InstanceServer\n    properties:\n      name: my-server\n      type: PLAY2-NANO\n      image: ubuntu_jammy\n      securityGroupId: ${sg01.id}\n  pnic01:\n    type: scaleway:InstancePrivateNic\n    properties:\n      serverId: ${srv01.id}\n      privateNetworkId: ${pn01.id}\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      name: my-pn\n  dhcp01:\n    type: scaleway:VpcPublicGatewayDhcp\n    properties:\n      subnet: 192.168.0.0/24\n  ip01:\n    type: scaleway:VpcPublicGatewayIp\n  pg01:\n    type: scaleway:VpcPublicGateway\n    properties:\n      name: my-pg\n      type: VPC-GW-S\n      ipId: ${ip01.id}\n  gn01:\n    type: scaleway:VpcGatewayNetwork\n    properties:\n      gatewayId: ${pg01.id}\n      privateNetworkId: ${pn01.id}\n      dhcpId: ${dhcp01.id}\n      cleanupDhcp: true\n      enableMasquerade: true\n  rsv01:\n    type: scaleway:VpcPublicGatewayDhcpReservation\n    properties:\n      gatewayNetworkId: ${gn01.id}\n      macAddress: ${pnic01.macAddress}\n      ipAddress: 192.168.0.7\n  # PAT rule for SSH traffic\n  pat01:\n    type: scaleway:VpcPublicGatewayPatRule\n    properties:\n      gatewayId: ${pg01.id}\n      privateIp: ${rsv01.ipAddress}\n      privatePort: 22\n      publicPort: 2202\n      protocol: tcp\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nPublic Gateway PAT rule configurations can be imported using `{zone}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/vpcPublicGatewayPatRule:VpcPublicGatewayPatRule main fr-par-1/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the PAT rule configuration.\n"
                },
                "gatewayId": {
                    "type": "string",
                    "description": "The ID of the Public Gateway.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The Organization ID the PAT rule configuration is associated with.\n"
                },
                "privateIp": {
                    "type": "string",
                    "description": "The private IP address to forward data to.\n"
                },
                "privatePort": {
                    "type": "integer",
                    "description": "The private port to translate to.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol the rule should apply to. Possible values are `both`, `tcp` and `udp`.\n"
                },
                "publicPort": {
                    "type": "integer",
                    "description": "The public port to listen on.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the last update of the PAT rule configuration.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the Public Gateway DHCP configuration should be created.\n"
                }
            },
            "required": [
                "createdAt",
                "gatewayId",
                "organizationId",
                "privateIp",
                "privatePort",
                "publicPort",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "gatewayId": {
                    "type": "string",
                    "description": "The ID of the Public Gateway.\n"
                },
                "privateIp": {
                    "type": "string",
                    "description": "The private IP address to forward data to.\n"
                },
                "privatePort": {
                    "type": "integer",
                    "description": "The private port to translate to.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol the rule should apply to. Possible values are `both`, `tcp` and `udp`.\n"
                },
                "publicPort": {
                    "type": "integer",
                    "description": "The public port to listen on.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "`zone`) The zone in which the Public Gateway DHCP configuration should be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "gatewayId",
                "privateIp",
                "privatePort",
                "publicPort"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcPublicGatewayPatRule resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the PAT rule configuration.\n"
                    },
                    "gatewayId": {
                        "type": "string",
                        "description": "The ID of the Public Gateway.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The Organization ID the PAT rule configuration is associated with.\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "The private IP address to forward data to.\n"
                    },
                    "privatePort": {
                        "type": "integer",
                        "description": "The private port to translate to.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The protocol the rule should apply to. Possible values are `both`, `tcp` and `udp`.\n"
                    },
                    "publicPort": {
                        "type": "integer",
                        "description": "The public port to listen on.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the last update of the PAT rule configuration.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the Public Gateway DHCP configuration should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/vpcRoute:VpcRoute": {
            "description": "Creates and manages Scaleway VPC Routes.\nFor more information, see [the main documentation](https://www.scaleway.com/en/docs/network/vpc/concepts/).\n\n## Example Usage\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst vpc01 = new scaleway.Vpc(\"vpc01\", {name: \"tf-vpc-vpn\"});\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {\n    name: \"tf-pn-vpn\",\n    ipv4Subnet: {\n        subnet: \"172.16.64.0/22\",\n    },\n    vpcId: vpc01.id,\n});\nconst server01 = new scaleway.InstanceServer(\"server01\", {\n    name: \"tf-server-vpn\",\n    type: \"PLAY2-MICRO\",\n    image: \"openvpn\",\n});\nconst pnic01 = new scaleway.InstancePrivateNic(\"pnic01\", {\n    privateNetworkId: pn01.id,\n    serverId: server01.id,\n});\nconst rt01 = new scaleway.VpcRoute(\"rt01\", {\n    vpcId: vpc01.id,\n    description: \"tf-route-vpn\",\n    tags: [\n        \"tf\",\n        \"route\",\n    ],\n    destination: \"10.0.0.0/24\",\n    nexthopResourceId: pnic01.id,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_scaleway as scaleway\n\nvpc01 = scaleway.Vpc(\"vpc01\", name=\"tf-vpc-vpn\")\npn01 = scaleway.VpcPrivateNetwork(\"pn01\",\n    name=\"tf-pn-vpn\",\n    ipv4_subnet={\n        \"subnet\": \"172.16.64.0/22\",\n    },\n    vpc_id=vpc01.id)\nserver01 = scaleway.InstanceServer(\"server01\",\n    name=\"tf-server-vpn\",\n    type=\"PLAY2-MICRO\",\n    image=\"openvpn\")\npnic01 = scaleway.InstancePrivateNic(\"pnic01\",\n    private_network_id=pn01.id,\n    server_id=server01.id)\nrt01 = scaleway.VpcRoute(\"rt01\",\n    vpc_id=vpc01.id,\n    description=\"tf-route-vpn\",\n    tags=[\n        \"tf\",\n        \"route\",\n    ],\n    destination=\"10.0.0.0/24\",\n    nexthop_resource_id=pnic01.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vpc01 = new Scaleway.Vpc(\"vpc01\", new()\n    {\n        Name = \"tf-vpc-vpn\",\n    });\n\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\", new()\n    {\n        Name = \"tf-pn-vpn\",\n        Ipv4Subnet = new Scaleway.Inputs.VpcPrivateNetworkIpv4SubnetArgs\n        {\n            Subnet = \"172.16.64.0/22\",\n        },\n        VpcId = vpc01.Id,\n    });\n\n    var server01 = new Scaleway.InstanceServer(\"server01\", new()\n    {\n        Name = \"tf-server-vpn\",\n        Type = \"PLAY2-MICRO\",\n        Image = \"openvpn\",\n    });\n\n    var pnic01 = new Scaleway.InstancePrivateNic(\"pnic01\", new()\n    {\n        PrivateNetworkId = pn01.Id,\n        ServerId = server01.Id,\n    });\n\n    var rt01 = new Scaleway.VpcRoute(\"rt01\", new()\n    {\n        VpcId = vpc01.Id,\n        Description = \"tf-route-vpn\",\n        Tags = new[]\n        {\n            \"tf\",\n            \"route\",\n        },\n        Destination = \"10.0.0.0/24\",\n        NexthopResourceId = pnic01.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tvpc01, err := scaleway.NewVpc(ctx, \"vpc01\", \u0026scaleway.VpcArgs{\n\t\t\tName: pulumi.String(\"tf-vpc-vpn\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tName: pulumi.String(\"tf-pn-vpn\"),\n\t\t\tIpv4Subnet: \u0026scaleway.VpcPrivateNetworkIpv4SubnetArgs{\n\t\t\t\tSubnet: pulumi.String(\"172.16.64.0/22\"),\n\t\t\t},\n\t\t\tVpcId: vpc01.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tserver01, err := scaleway.NewInstanceServer(ctx, \"server01\", \u0026scaleway.InstanceServerArgs{\n\t\t\tName:  pulumi.String(\"tf-server-vpn\"),\n\t\t\tType:  pulumi.String(\"PLAY2-MICRO\"),\n\t\t\tImage: pulumi.String(\"openvpn\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpnic01, err := scaleway.NewInstancePrivateNic(ctx, \"pnic01\", \u0026scaleway.InstancePrivateNicArgs{\n\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\tServerId:         server01.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewVpcRoute(ctx, \"rt01\", \u0026scaleway.VpcRouteArgs{\n\t\t\tVpcId:       vpc01.ID(),\n\t\t\tDescription: pulumi.String(\"tf-route-vpn\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tf\"),\n\t\t\t\tpulumi.String(\"route\"),\n\t\t\t},\n\t\t\tDestination:       pulumi.String(\"10.0.0.0/24\"),\n\t\t\tNexthopResourceId: pnic01.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Vpc;\nimport com.pulumi.scaleway.VpcArgs;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.inputs.VpcPrivateNetworkIpv4SubnetArgs;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.InstancePrivateNic;\nimport com.pulumi.scaleway.InstancePrivateNicArgs;\nimport com.pulumi.scaleway.VpcRoute;\nimport com.pulumi.scaleway.VpcRouteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vpc01 = new Vpc(\"vpc01\", VpcArgs.builder()\n            .name(\"tf-vpc-vpn\")\n            .build());\n\n        var pn01 = new VpcPrivateNetwork(\"pn01\", VpcPrivateNetworkArgs.builder()\n            .name(\"tf-pn-vpn\")\n            .ipv4Subnet(VpcPrivateNetworkIpv4SubnetArgs.builder()\n                .subnet(\"172.16.64.0/22\")\n                .build())\n            .vpcId(vpc01.id())\n            .build());\n\n        var server01 = new InstanceServer(\"server01\", InstanceServerArgs.builder()\n            .name(\"tf-server-vpn\")\n            .type(\"PLAY2-MICRO\")\n            .image(\"openvpn\")\n            .build());\n\n        var pnic01 = new InstancePrivateNic(\"pnic01\", InstancePrivateNicArgs.builder()\n            .privateNetworkId(pn01.id())\n            .serverId(server01.id())\n            .build());\n\n        var rt01 = new VpcRoute(\"rt01\", VpcRouteArgs.builder()\n            .vpcId(vpc01.id())\n            .description(\"tf-route-vpn\")\n            .tags(            \n                \"tf\",\n                \"route\")\n            .destination(\"10.0.0.0/24\")\n            .nexthopResourceId(pnic01.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vpc01:\n    type: scaleway:Vpc\n    properties:\n      name: tf-vpc-vpn\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      name: tf-pn-vpn\n      ipv4Subnet:\n        subnet: 172.16.64.0/22\n      vpcId: ${vpc01.id}\n  server01:\n    type: scaleway:InstanceServer\n    properties:\n      name: tf-server-vpn\n      type: PLAY2-MICRO\n      image: openvpn\n  pnic01:\n    type: scaleway:InstancePrivateNic\n    properties:\n      privateNetworkId: ${pn01.id}\n      serverId: ${server01.id}\n  rt01:\n    type: scaleway:VpcRoute\n    properties:\n      vpcId: ${vpc01.id}\n      description: tf-route-vpn\n      tags:\n        - tf\n        - route\n      destination: 10.0.0.0/24\n      nexthopResourceId: ${pnic01.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nRoutes can be imported using `{region}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/vpcRoute:VpcRoute main fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the route (RFC 3339 format).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The route description.\n"
                },
                "destination": {
                    "type": "string",
                    "description": "The destination of the route.\n"
                },
                "nexthopPrivateNetworkId": {
                    "type": "string",
                    "description": "The ID of the nexthop private network.\n"
                },
                "nexthopResourceId": {
                    "type": "string",
                    "description": "The ID of the nexthop resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region of the route.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags to associate with the route.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date and time of the creation of the route (RFC 3339 format).\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC ID the route belongs to.\n"
                }
            },
            "required": [
                "createdAt",
                "region",
                "updatedAt",
                "vpcId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The route description.\n"
                },
                "destination": {
                    "type": "string",
                    "description": "The destination of the route.\n"
                },
                "nexthopPrivateNetworkId": {
                    "type": "string",
                    "description": "The ID of the nexthop private network.\n"
                },
                "nexthopResourceId": {
                    "type": "string",
                    "description": "The ID of the nexthop resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region of the route.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags to associate with the route.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC ID the route belongs to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcRoute resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the route (RFC 3339 format).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The route description.\n"
                    },
                    "destination": {
                        "type": "string",
                        "description": "The destination of the route.\n"
                    },
                    "nexthopPrivateNetworkId": {
                        "type": "string",
                        "description": "The ID of the nexthop private network.\n"
                    },
                    "nexthopResourceId": {
                        "type": "string",
                        "description": "The ID of the nexthop resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region of the route.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags to associate with the route.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the creation of the route (RFC 3339 format).\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The VPC ID the route belongs to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "scaleway:index/webhosting:Webhosting": {
            "description": "Creates and manages Scaleway Web Hostings.\nFor more information, see [the documentation](https://www.scaleway.com/en/developers/api/webhosting/).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst byName = scaleway.getWebHostOffer({\n    name: \"lite\",\n});\nconst main = new scaleway.Webhosting(\"main\", {\n    offerId: byName.then(byName =\u003e byName.offerId),\n    email: \"your@email.com\",\n    domain: \"yourdomain.com\",\n    tags: [\n        \"webhosting\",\n        \"provider\",\n        \"terraform\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\nby_name = scaleway.get_web_host_offer(name=\"lite\")\nmain = scaleway.Webhosting(\"main\",\n    offer_id=by_name.offer_id,\n    email=\"your@email.com\",\n    domain=\"yourdomain.com\",\n    tags=[\n        \"webhosting\",\n        \"provider\",\n        \"terraform\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byName = Scaleway.GetWebHostOffer.Invoke(new()\n    {\n        Name = \"lite\",\n    });\n\n    var main = new Scaleway.Webhosting(\"main\", new()\n    {\n        OfferId = byName.Apply(getWebHostOfferResult =\u003e getWebHostOfferResult.OfferId),\n        Email = \"your@email.com\",\n        Domain = \"yourdomain.com\",\n        Tags = new[]\n        {\n            \"webhosting\",\n            \"provider\",\n            \"terraform\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tbyName, err := scaleway.GetWebHostOffer(ctx, \u0026scaleway.GetWebHostOfferArgs{\n\t\t\tName: pulumi.StringRef(\"lite\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewWebhosting(ctx, \"main\", \u0026scaleway.WebhostingArgs{\n\t\t\tOfferId: pulumi.String(byName.OfferId),\n\t\t\tEmail:   pulumi.String(\"your@email.com\"),\n\t\t\tDomain:  pulumi.String(\"yourdomain.com\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"webhosting\"),\n\t\t\t\tpulumi.String(\"provider\"),\n\t\t\t\tpulumi.String(\"terraform\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetWebHostOfferArgs;\nimport com.pulumi.scaleway.Webhosting;\nimport com.pulumi.scaleway.WebhostingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byName = ScalewayFunctions.getWebHostOffer(GetWebHostOfferArgs.builder()\n            .name(\"lite\")\n            .build());\n\n        var main = new Webhosting(\"main\", WebhostingArgs.builder()\n            .offerId(byName.applyValue(getWebHostOfferResult -\u003e getWebHostOfferResult.offerId()))\n            .email(\"your@email.com\")\n            .domain(\"yourdomain.com\")\n            .tags(            \n                \"webhosting\",\n                \"provider\",\n                \"terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:Webhosting\n    properties:\n      offerId: ${byName.offerId}\n      email: your@email.com\n      domain: yourdomain.com\n      tags:\n        - webhosting\n        - provider\n        - terraform\nvariables:\n  byName:\n    fn::invoke:\n      Function: scaleway:getWebHostOffer\n      Arguments:\n        name: lite\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nHostings can be imported using the `{region}/{id}`, e.g.\n\nbash\n\n```sh\n$ pulumi import scaleway:index/webhosting:Webhosting hosting01 fr-par/11111111-1111-1111-1111-111111111111\n```\n\n",
            "properties": {
                "cpanelUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/WebhostingCpanelUrl:WebhostingCpanelUrl"
                    },
                    "description": "The URL to connect to cPanel Dashboard and to Webmail interface.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date and time of hosting's creation (RFC 3339 format).\n"
                },
                "dnsStatus": {
                    "type": "string",
                    "description": "The DNS status of the hosting.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain name of the hosting.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The contact email of the client for the hosting.\n"
                },
                "offerId": {
                    "type": "string",
                    "description": "The ID of the selected offer for the hosting.\n"
                },
                "offerName": {
                    "type": "string",
                    "description": "The name of the active offer.\n"
                },
                "optionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of the selected options for the hosting.\n"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/scaleway:index/WebhostingOption:WebhostingOption"
                    },
                    "description": "The active options of the hosting.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization ID the hosting is associated with.\n"
                },
                "platformHostname": {
                    "type": "string",
                    "description": "The hostname of the host platform.\n"
                },
                "platformNumber": {
                    "type": "integer",
                    "description": "The number of the host platform.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the VPC is associated with.\n"
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region of the Hosting.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The hosting status.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the hosting.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date and time of hosting's last update (RFC 3339 format).\n"
                },
                "username": {
                    "type": "string",
                    "description": "The main hosting cPanel username.\n"
                }
            },
            "required": [
                "cpanelUrls",
                "createdAt",
                "dnsStatus",
                "domain",
                "email",
                "offerId",
                "offerName",
                "options",
                "organizationId",
                "platformHostname",
                "platformNumber",
                "projectId",
                "region",
                "status",
                "tags",
                "updatedAt",
                "username"
            ],
            "inputProperties": {
                "domain": {
                    "type": "string",
                    "description": "The domain name of the hosting.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The contact email of the client for the hosting.\n"
                },
                "offerId": {
                    "type": "string",
                    "description": "The ID of the selected offer for the hosting.\n"
                },
                "optionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of the selected options for the hosting.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "`project_id`) The ID of the project the VPC is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "`region`) The region of the Hosting.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags associated with the hosting.\n"
                }
            },
            "requiredInputs": [
                "domain",
                "email",
                "offerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Webhosting resources.\n",
                "properties": {
                    "cpanelUrls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/WebhostingCpanelUrl:WebhostingCpanelUrl"
                        },
                        "description": "The URL to connect to cPanel Dashboard and to Webmail interface.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date and time of hosting's creation (RFC 3339 format).\n"
                    },
                    "dnsStatus": {
                        "type": "string",
                        "description": "The DNS status of the hosting.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain name of the hosting.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The contact email of the client for the hosting.\n"
                    },
                    "offerId": {
                        "type": "string",
                        "description": "The ID of the selected offer for the hosting.\n"
                    },
                    "offerName": {
                        "type": "string",
                        "description": "The name of the active offer.\n"
                    },
                    "optionIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IDs of the selected options for the hosting.\n"
                    },
                    "options": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/scaleway:index/WebhostingOption:WebhostingOption"
                        },
                        "description": "The active options of the hosting.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization ID the hosting is associated with.\n"
                    },
                    "platformHostname": {
                        "type": "string",
                        "description": "The hostname of the host platform.\n"
                    },
                    "platformNumber": {
                        "type": "integer",
                        "description": "The number of the host platform.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the VPC is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region of the Hosting.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The hosting status.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the hosting.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date and time of hosting's last update (RFC 3339 format).\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The main hosting cPanel username.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "scaleway:index/getAccountProject:getAccountProject": {
            "description": "The `scaleway.AccountProject` data source is used to retrieve information about a Scaleway project.\n\nRefer to the Organizations and Projects [documentation](https://www.scaleway.com/en/docs/identity-and-access-management/organizations-and-projects/) and [API documentation](https://www.scaleway.com/en/developers/api/account/project-api/) for more information.\n\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAccountProject.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Project.\nOnly one of the `name` and `project_id` should be specified.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The unique identifier of the Organization with which the Project is associated.\n\nIf no default `organization_id` is set, one must be set explicitly in this datasource\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The unique identifier of the Project.\nOnly one of the `name` and `project_id` should be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccountProject.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "description",
                    "projectId",
                    "updatedAt",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getAccountSshKey:getAccountSshKey": {
            "description": "The `scaleway.AccountSshKey` data source is used to retrieve information about a the SSH key of a Scaleway account.\n\nRefer to the Organizations and Projects [documentation](https://www.scaleway.com/en/docs/identity-and-access-management/organizations-and-projects/how-to/create-ssh-key/) and [API documentation](https://www.scaleway.com/en/developers/api/iam/#path-ssh-keys) for more information.\n\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAccountSshKey.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the SSH key.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The unique identifier of the project with which the SSH key is associated.\n"
                    },
                    "sshKeyId": {
                        "type": "string",
                        "description": "The unique identifier of the SSH key.\n\n\u003e **Note** You must specify at least one: `name` and/or `ssh_key_id`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccountSshKey.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "disabled": {
                        "type": "boolean"
                    },
                    "fingerprint": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "description": "The unique identifier of the Organization with which the SSH key is associated.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "publicKey": {
                        "description": "The string of the SSH public key.\n",
                        "type": "string"
                    },
                    "sshKeyId": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "disabled",
                    "fingerprint",
                    "organizationId",
                    "publicKey",
                    "updatedAt",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getAvailabilityZones:getAvailabilityZones": {
            "description": "The `scaleway.getAvailabilityZones` data source is used to retrieve information about the available zones based on its Region.\n\nFor technical and legal reasons, some products are split by Region or by Availability Zones. When using such product,\nyou can choose the location that better fits your need (country, latency, etc.).\n\nRefer to the Account [documentation](https://www.scaleway.com/en/docs/console/account/reference-content/products-availability/) for more information.\n\n## Retrieve the Availability Zones of a Region\n\nThe following command allow you to retrieve a the AZs of a Region.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by Region key\nconst main = scaleway.getAvailabilityZones({\n    region: \"nl-ams\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Get info by Region key\nmain = scaleway.get_availability_zones(region=\"nl-ams\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Get info by Region key\n    var main = Scaleway.GetAvailabilityZones.Invoke(new()\n    {\n        Region = \"nl-ams\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Get info by Region key\n\t\t_, err := scaleway.GetAvailabilityZones(ctx, \u0026scaleway.GetAvailabilityZonesArgs{\n\t\t\tRegion: pulumi.StringRef(\"nl-ams\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetAvailabilityZonesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Get info by Region key\n        final var main = ScalewayFunctions.getAvailabilityZones(GetAvailabilityZonesArgs.builder()\n            .region(\"nl-ams\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Get info by Region key\n  main:\n    fn::invoke:\n      Function: scaleway:getAvailabilityZones\n      Arguments:\n        region: nl-ams\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAvailabilityZones.\n",
                "properties": {
                    "region": {
                        "type": "string",
                        "description": "Region is represented as a Geographical area, such as France. Defaults to `fr-par`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAvailabilityZones.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "zones": {
                        "description": "The list of availability zones in each Region\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "zones",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getBaremetalOffer:getBaremetalOffer": {
            "description": "Gets information about a baremetal offer. For more information, see [the documentation](https://developers.scaleway.com/en/products/baremetal/api).\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getBaremetalOffer.\n",
                "properties": {
                    "includeDisabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "The offer name. Only one of `name` and `offer_id` should be specified.\n"
                    },
                    "offerId": {
                        "type": "string",
                        "description": "The offer id. Only one of `name` and `offer_id` should be specified.\n"
                    },
                    "subscriptionPeriod": {
                        "type": "string",
                        "description": "Period of subscription the desired offer. Should be `hourly` or `monthly`.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the offer should be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBaremetalOffer.\n",
                "properties": {
                    "bandwidth": {
                        "description": "Available Bandwidth with the offer.\n",
                        "type": "integer"
                    },
                    "commercialRange": {
                        "description": "Commercial range of the offer.\n",
                        "type": "string"
                    },
                    "cpu": {
                        "$ref": "#/types/scaleway:index/getBaremetalOfferCpu:getBaremetalOfferCpu",
                        "description": "A list of cpu specifications. (Structure is documented below.)\n"
                    },
                    "disks": {
                        "description": "A list of disk specifications. (Structure is documented below.)\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getBaremetalOfferDisk:getBaremetalOfferDisk"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "includeDisabled": {
                        "type": "boolean"
                    },
                    "memories": {
                        "description": "A list of memory specifications. (Structure is documented below.)\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getBaremetalOfferMemory:getBaremetalOfferMemory"
                        },
                        "type": "array"
                    },
                    "name": {
                        "description": "Name of the CPU.\n",
                        "type": "string"
                    },
                    "offerId": {
                        "type": "string"
                    },
                    "stock": {
                        "description": "Stock status for this offer. Possible values are: `empty`, `low` or `available`.\n",
                        "type": "string"
                    },
                    "subscriptionPeriod": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "bandwidth",
                    "commercialRange",
                    "cpu",
                    "disks",
                    "memories",
                    "stock",
                    "zone",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getBaremetalOption:getBaremetalOption": {
            "description": "Gets information about a baremetal option.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/baremetal/api).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by option name \nconst byName = scaleway.getBaremetalOption({\n    name: \"Remote Access\",\n});\n// Get info by option id\nconst byId = scaleway.getBaremetalOption({\n    optionId: \"931df052-d713-4674-8b58-96a63244c8e2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Get info by option name \nby_name = scaleway.get_baremetal_option(name=\"Remote Access\")\n# Get info by option id\nby_id = scaleway.get_baremetal_option(option_id=\"931df052-d713-4674-8b58-96a63244c8e2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Get info by option name \n    var byName = Scaleway.GetBaremetalOption.Invoke(new()\n    {\n        Name = \"Remote Access\",\n    });\n\n    // Get info by option id\n    var byId = Scaleway.GetBaremetalOption.Invoke(new()\n    {\n        OptionId = \"931df052-d713-4674-8b58-96a63244c8e2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Get info by option name\n\t\t_, err := scaleway.GetBaremetalOption(ctx, \u0026scaleway.GetBaremetalOptionArgs{\n\t\t\tName: pulumi.StringRef(\"Remote Access\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Get info by option id\n\t\t_, err = scaleway.GetBaremetalOption(ctx, \u0026scaleway.GetBaremetalOptionArgs{\n\t\t\tOptionId: pulumi.StringRef(\"931df052-d713-4674-8b58-96a63244c8e2\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetBaremetalOptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Get info by option name \n        final var byName = ScalewayFunctions.getBaremetalOption(GetBaremetalOptionArgs.builder()\n            .name(\"Remote Access\")\n            .build());\n\n        // Get info by option id\n        final var byId = ScalewayFunctions.getBaremetalOption(GetBaremetalOptionArgs.builder()\n            .optionId(\"931df052-d713-4674-8b58-96a63244c8e2\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Get info by option name\n  byName:\n    fn::invoke:\n      Function: scaleway:getBaremetalOption\n      Arguments:\n        name: Remote Access\n  # Get info by option id\n  byId:\n    fn::invoke:\n      Function: scaleway:getBaremetalOption\n      Arguments:\n        optionId: 931df052-d713-4674-8b58-96a63244c8e2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getBaremetalOption.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The option name. Only one of `name` and `option_id` should be specified.\n"
                    },
                    "optionId": {
                        "type": "string",
                        "description": "The option id. Only one of `name` and `option_id` should be specified.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the option exists.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBaremetalOption.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "manageable": {
                        "description": "Is false if the option could not be added or removed.\n",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "The name of the option.\n",
                        "type": "string"
                    },
                    "optionId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "manageable",
                    "zone",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getBaremetalOs:getBaremetalOs": {
            "description": "Gets information about a baremetal operating system.\nFor more information, see [the documentation](https://www.scaleway.com/en/developers/api/elastic-metal/#path-os-list-available-oses).\n\nYou can also use the [scaleway-cli](https://github.com/scaleway/scaleway-cli) with `scw baremetal os list` to list all available operating systems.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by os name and version\nconst byName = scaleway.getBaremetalOs({\n    name: \"Ubuntu\",\n    version: \"20.04 LTS (Focal Fossa)\",\n});\n// Get info by os id\nconst byId = scaleway.getBaremetalOs({\n    osId: \"03b7f4ba-a6a1-4305-984e-b54fafbf1681\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Get info by os name and version\nby_name = scaleway.get_baremetal_os(name=\"Ubuntu\",\n    version=\"20.04 LTS (Focal Fossa)\")\n# Get info by os id\nby_id = scaleway.get_baremetal_os(os_id=\"03b7f4ba-a6a1-4305-984e-b54fafbf1681\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Get info by os name and version\n    var byName = Scaleway.GetBaremetalOs.Invoke(new()\n    {\n        Name = \"Ubuntu\",\n        Version = \"20.04 LTS (Focal Fossa)\",\n    });\n\n    // Get info by os id\n    var byId = Scaleway.GetBaremetalOs.Invoke(new()\n    {\n        OsId = \"03b7f4ba-a6a1-4305-984e-b54fafbf1681\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Get info by os name and version\n\t\t_, err := scaleway.GetBaremetalOs(ctx, \u0026scaleway.GetBaremetalOsArgs{\n\t\t\tName:    pulumi.StringRef(\"Ubuntu\"),\n\t\t\tVersion: pulumi.StringRef(\"20.04 LTS (Focal Fossa)\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Get info by os id\n\t\t_, err = scaleway.GetBaremetalOs(ctx, \u0026scaleway.GetBaremetalOsArgs{\n\t\t\tOsId: pulumi.StringRef(\"03b7f4ba-a6a1-4305-984e-b54fafbf1681\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetBaremetalOsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Get info by os name and version\n        final var byName = ScalewayFunctions.getBaremetalOs(GetBaremetalOsArgs.builder()\n            .name(\"Ubuntu\")\n            .version(\"20.04 LTS (Focal Fossa)\")\n            .build());\n\n        // Get info by os id\n        final var byId = ScalewayFunctions.getBaremetalOs(GetBaremetalOsArgs.builder()\n            .osId(\"03b7f4ba-a6a1-4305-984e-b54fafbf1681\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Get info by os name and version\n  byName:\n    fn::invoke:\n      Function: scaleway:getBaremetalOs\n      Arguments:\n        name: Ubuntu\n        version: 20.04 LTS (Focal Fossa)\n  # Get info by os id\n  byId:\n    fn::invoke:\n      Function: scaleway:getBaremetalOs\n      Arguments:\n        osId: 03b7f4ba-a6a1-4305-984e-b54fafbf1681\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getBaremetalOs.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The os name. Only one of `name` and `os_id` should be specified.\n"
                    },
                    "osId": {
                        "type": "string",
                        "description": "The operating system id. Only one of `name` and `os_id` should be specified.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The os version.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the os exists.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBaremetalOs.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "osId": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "zone",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getBaremetalServer:getBaremetalServer": {
            "description": "Gets information about a baremetal server.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/baremetal/api).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by server name\nconst byName = scaleway.getBaremetalServer({\n    name: \"foobar\",\n    zone: \"fr-par-2\",\n});\n// Get info by server id\nconst byId = scaleway.getBaremetalServer({\n    serverId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Get info by server name\nby_name = scaleway.get_baremetal_server(name=\"foobar\",\n    zone=\"fr-par-2\")\n# Get info by server id\nby_id = scaleway.get_baremetal_server(server_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Get info by server name\n    var byName = Scaleway.GetBaremetalServer.Invoke(new()\n    {\n        Name = \"foobar\",\n        Zone = \"fr-par-2\",\n    });\n\n    // Get info by server id\n    var byId = Scaleway.GetBaremetalServer.Invoke(new()\n    {\n        ServerId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Get info by server name\n\t\t_, err := scaleway.LookupBaremetalServer(ctx, \u0026scaleway.LookupBaremetalServerArgs{\n\t\t\tName: pulumi.StringRef(\"foobar\"),\n\t\t\tZone: pulumi.StringRef(\"fr-par-2\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Get info by server id\n\t\t_, err = scaleway.LookupBaremetalServer(ctx, \u0026scaleway.LookupBaremetalServerArgs{\n\t\t\tServerId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetBaremetalServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Get info by server name\n        final var byName = ScalewayFunctions.getBaremetalServer(GetBaremetalServerArgs.builder()\n            .name(\"foobar\")\n            .zone(\"fr-par-2\")\n            .build());\n\n        // Get info by server id\n        final var byId = ScalewayFunctions.getBaremetalServer(GetBaremetalServerArgs.builder()\n            .serverId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Get info by server name\n  byName:\n    fn::invoke:\n      Function: scaleway:getBaremetalServer\n      Arguments:\n        name: foobar\n        zone: fr-par-2\n  # Get info by server id\n  byId:\n    fn::invoke:\n      Function: scaleway:getBaremetalServer\n      Arguments:\n        serverId: 11111111-1111-1111-1111-111111111111\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getBaremetalServer.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The server name. Only one of `name` and `server_id` should be specified.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the baremetal server is associated with.\n"
                    },
                    "serverId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the server exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBaremetalServer.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "hostname": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "installConfigAfterward": {
                        "type": "boolean"
                    },
                    "ips": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getBaremetalServerIp:getBaremetalServerIp"
                        },
                        "type": "array"
                    },
                    "ipv4s": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getBaremetalServerIpv4:getBaremetalServerIpv4"
                        },
                        "type": "array"
                    },
                    "ipv6s": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getBaremetalServerIpv6:getBaremetalServerIpv6"
                        },
                        "type": "array"
                    },
                    "name": {
                        "type": "string"
                    },
                    "offer": {
                        "type": "string"
                    },
                    "offerId": {
                        "type": "string"
                    },
                    "offerName": {
                        "type": "string"
                    },
                    "options": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getBaremetalServerOption:getBaremetalServerOption"
                        },
                        "type": "array"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "os": {
                        "type": "string"
                    },
                    "osName": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "privateNetworks": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getBaremetalServerPrivateNetwork:getBaremetalServerPrivateNetwork"
                        },
                        "type": "array"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "reinstallOnConfigChanges": {
                        "type": "boolean"
                    },
                    "serverId": {
                        "type": "string"
                    },
                    "servicePassword": {
                        "type": "string"
                    },
                    "serviceUser": {
                        "type": "string"
                    },
                    "sshKeyIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "user": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "description",
                    "domain",
                    "hostname",
                    "installConfigAfterward",
                    "ips",
                    "ipv4s",
                    "ipv6s",
                    "offer",
                    "offerId",
                    "offerName",
                    "options",
                    "organizationId",
                    "os",
                    "osName",
                    "password",
                    "privateNetworks",
                    "reinstallOnConfigChanges",
                    "servicePassword",
                    "serviceUser",
                    "sshKeyIds",
                    "tags",
                    "user",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getBillingConsumptions:getBillingConsumptions": {
            "description": "Gets information about your Consumptions.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetBillingConsumptionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Find your detailed monthly consumption list\n        final var my-consumption = ScalewayFunctions.getBillingConsumptions(GetBillingConsumptionsArgs.builder()\n            .organizationId(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Find your detailed monthly consumption list\n  my-consumption:\n    fn::invoke:\n      Function: scaleway:getBillingConsumptions\n      Arguments:\n        organizationId: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getBillingConsumptions.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the consumption list is associated with.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBillingConsumptions.\n",
                "properties": {
                    "consumptions": {
                        "description": "List of found consumptions\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getBillingConsumptionsConsumption:getBillingConsumptionsConsumption"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "description": "The project ID of the consumption.\n",
                        "type": "string"
                    },
                    "updatedAt": {
                        "description": "The last consumption update date.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "consumptions",
                    "organizationId",
                    "projectId",
                    "updatedAt",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getBillingInvoices:getBillingInvoices": {
            "description": "Gets information about your Scaleway invoices.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getBillingInvoices.\n",
                "properties": {
                    "invoiceType": {
                        "type": "string",
                        "description": "Invoices with the given type are listed. Valid values are `periodic` and `purchase`.\n"
                    },
                    "startedAfter": {
                        "type": "string",
                        "description": "Invoices with a start date that are greater or equal to `started_after` are listed (RFC 3339 format).\n"
                    },
                    "startedBefore": {
                        "type": "string",
                        "description": "Invoices with a start date that precedes `started_before` are listed (RFC 3339 format).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBillingInvoices.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "invoiceType": {
                        "description": "The type of invoice.\n",
                        "type": "string"
                    },
                    "invoices": {
                        "description": "List of found invoices\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getBillingInvoicesInvoice:getBillingInvoicesInvoice"
                        },
                        "type": "array"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "startedAfter": {
                        "type": "string"
                    },
                    "startedBefore": {
                        "type": "string"
                    }
                },
                "required": [
                    "invoices",
                    "organizationId",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getBlockSnapshot:getBlockSnapshot": {
            "description": "The `scaleway.BlockSnapshot` data source is used to retrieve information about a Block Storage volume snapshot.\n\nRefer to the Block Storage [product documentation](https://www.scaleway.com/en/docs/storage/block/) and [API documentation](https://www.scaleway.com/en/developers/api/block/) for more information.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getBlockSnapshot.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the snapshot. Only one of name or snapshot_id should be specified.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The unique identifier of the Project to which the snapshot is associated.\n"
                    },
                    "snapshotId": {
                        "type": "string",
                        "description": "The unique identifier of the snapshot. Only one of `name` and `snapshot_id` should be specified.\n"
                    },
                    "volumeId": {
                        "type": "string",
                        "description": "The unique identifier of the volume from which the snapshot was created.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": ") The zone in which the snapshot exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBlockSnapshot.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "snapshotId": {
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "volumeId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getBlockVolume:getBlockVolume": {
            "description": "The `scaleway.BlockVolume` data source is used to retrieve information about a Block Storage volume.\nRefer to the Block Storage [product documentation](https://www.scaleway.com/en/docs/storage/block/) and [API documentation](https://www.scaleway.com/en/developers/api/block/) for more information.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getBlockVolume.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the volume. Only one of `name` and `volume_id` should be specified.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The unique identifier of the Project to which the volume is associated.\n"
                    },
                    "volumeId": {
                        "type": "string",
                        "description": "The unique identifier of the volume. Only one of `name` and `volume_id` should be specified.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "). The zone in which the volume exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBlockVolume.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "iops": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "sizeInGb": {
                        "type": "integer"
                    },
                    "snapshotId": {
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "volumeId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "iops",
                    "sizeInGb",
                    "snapshotId",
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getCockpit:getCockpit": {
            "description": "\u003e **Important:**  The data source `scaleway.Cockpit` has been deprecated and will no longer be supported. Instead, use resource `scaleway.Cockpit`.\n\n\u003e **Note:**\nAs of April 2024, Cockpit has introduced [regionalization](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#region) to offer more flexibility and resilience.\nIf you have created customized dashboards with data for your Scaleway resources before April 2024, you will need to update your queries in Grafana, with the new regionalized data sources.\n\nThe `scaleway.Cockpit` data source is used to retrieve information about a Scaleway Cockpit associated with a given Project. This can be the default Project or a specific Project identified by its ID.\n\nRefer to Cockpit's [product documentation](https://www.scaleway.com/en/docs/observability/cockpit/concepts/) and [API documentation](https://www.scaleway.com/en/developers/api/cockpit/regional-api) for more information.\n\n## Retrieve a Cockpit\n\nThe following commands allow you to:\n\n- get information on the Cockpit associated with your Scaleway default Project\n- get information on the Cockpit associated with a specific Scaleway Project\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get the default Project's Cockpit\nconst main = scaleway.getCockpit({});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Get the default Project's Cockpit\nmain = scaleway.get_cockpit()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Get the default Project's Cockpit\n    var main = Scaleway.GetCockpit.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Get the default Project's Cockpit\n\t\t_, err := scaleway.LookupCockpit(ctx, \u0026scaleway.LookupCockpitArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetCockpitArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Get the default Project's Cockpit\n        final var main = ScalewayFunctions.getCockpit();\n\n    }\n}\n```\n```yaml\nvariables:\n  # Get the default Project's Cockpit\n  main:\n    fn::invoke:\n      Function: scaleway:getCockpit\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get a specific Project's Cockpit\nconst main = scaleway.getCockpit({\n    projectId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Get a specific Project's Cockpit\nmain = scaleway.get_cockpit(project_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Get a specific Project's Cockpit\n    var main = Scaleway.GetCockpit.Invoke(new()\n    {\n        ProjectId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Get a specific Project's Cockpit\n\t\t_, err := scaleway.LookupCockpit(ctx, \u0026scaleway.LookupCockpitArgs{\n\t\t\tProjectId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetCockpitArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Get a specific Project's Cockpit\n        final var main = ScalewayFunctions.getCockpit(GetCockpitArgs.builder()\n            .projectId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Get a specific Project's Cockpit\n  main:\n    fn::invoke:\n      Function: scaleway:getCockpit\n      Arguments:\n        projectId: 11111111-1111-1111-1111-111111111111\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCockpit.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "Specifies the ID of the Scaleway Project that the Cockpit is associated with. If not specified, it defaults to the Project ID specified in the provider configuration.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCockpit.\n",
                "properties": {
                    "endpoints": {
                        "description": "(Deprecated) A list of [endpoints](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#endpoints) related to Cockpit, each with specific URLs:\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getCockpitEndpoint:getCockpitEndpoint"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "plan": {
                        "type": "string"
                    },
                    "planId": {
                        "description": "(Deprecated) ID of the current pricing plan\n",
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "pushUrls": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getCockpitPushUrl:getCockpitPushUrl"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "endpoints",
                    "plan",
                    "planId",
                    "pushUrls",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getCockpitPlan:getCockpitPlan": {
            "description": "The `scaleway.getCockpitPlan` data source is used to fetch details about a specific Scaleway Cockpit pricing plan. This information can then be used to configure resources like `scaleway.Cockpit`.\n\nFind out more about [pricing plans](https://console.scaleway.com/cockpit/plans) in the Scaleway console.\n\nRefer to Cockpit's [product documentation](https://www.scaleway.com/en/docs/observability/cockpit/concepts/) and [API documentation](https://www.scaleway.com/en/developers/api/cockpit/regional-api) for more information.\n\n## Fetch and associate a pricing plan to a Cockpit\n\nThe following command shows how to fetch information about the `premium` pricing plan and how to associate it with the Cockpit of your Scaleway default Project.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst premium = scaleway.getCockpitPlan({\n    name: \"premium\",\n});\nconst main = new scaleway.Cockpit(\"main\", {plan: premium.then(premium =\u003e premium.id)});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\npremium = scaleway.get_cockpit_plan(name=\"premium\")\nmain = scaleway.Cockpit(\"main\", plan=premium.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var premium = Scaleway.GetCockpitPlan.Invoke(new()\n    {\n        Name = \"premium\",\n    });\n\n    var main = new Scaleway.Cockpit(\"main\", new()\n    {\n        Plan = premium.Apply(getCockpitPlanResult =\u003e getCockpitPlanResult.Id),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpremium, err := scaleway.GetCockpitPlan(ctx, \u0026scaleway.GetCockpitPlanArgs{\n\t\t\tName: \"premium\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewCockpit(ctx, \"main\", \u0026scaleway.CockpitArgs{\n\t\t\tPlan: pulumi.String(premium.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetCockpitPlanArgs;\nimport com.pulumi.scaleway.Cockpit;\nimport com.pulumi.scaleway.CockpitArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var premium = ScalewayFunctions.getCockpitPlan(GetCockpitPlanArgs.builder()\n            .name(\"premium\")\n            .build());\n\n        var main = new Cockpit(\"main\", CockpitArgs.builder()\n            .plan(premium.applyValue(getCockpitPlanResult -\u003e getCockpitPlanResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:Cockpit\n    properties:\n      plan: ${premium.id}\nvariables:\n  premium:\n    fn::invoke:\n      Function: scaleway:getCockpitPlan\n      Arguments:\n        name: premium\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCockpitPlan.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the pricing plan you want to retrieve information about.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCockpitPlan.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getConfig:getConfig": {
            "outputs": {
                "description": "A collection of values returned by getConfig.\n",
                "properties": {
                    "accessKey": {
                        "type": "string"
                    },
                    "accessKeySource": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "projectIdSource": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "regionSource": {
                        "type": "string"
                    },
                    "secretKey": {
                        "secret": true,
                        "type": "string"
                    },
                    "secretKeySource": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    },
                    "zoneSource": {
                        "type": "string"
                    }
                },
                "required": [
                    "accessKey",
                    "accessKeySource",
                    "projectId",
                    "projectIdSource",
                    "region",
                    "regionSource",
                    "secretKey",
                    "secretKeySource",
                    "zone",
                    "zoneSource",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getContainer:getContainer": {
            "description": "The `scaleway.Container` data source is used to retrieve information about a Serverless Container.\n\nRefer to the Serverless Containers [product documentation](https://www.scaleway.com/en/docs/serverless/containers/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-containers/) for more information.\n\nFor more information on the limitations of Serverless Containers, refer to the [dedicated documentation](https://www.scaleway.com/en/docs/compute/containers/reference-content/containers-limitations/).\n\n## Retrieve a Serverless Container\n\nThe following commands allow you to:\n\n- retrieve a container by its name\n- retrieve a container by its ID\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.ContainerNamespace(\"main\", {});\nconst mainContainer = new scaleway.Container(\"main\", {\n    name: \"test-container-data\",\n    namespaceId: main.id,\n});\n// Get info by container name\nconst byName = scaleway.getContainerOutput({\n    namespaceId: main.id,\n    name: mainContainer.name,\n});\n// Get info by container ID\nconst byId = scaleway.getContainerOutput({\n    namespaceId: main.id,\n    containerId: mainContainer.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.ContainerNamespace(\"main\")\nmain_container = scaleway.Container(\"main\",\n    name=\"test-container-data\",\n    namespace_id=main.id)\n# Get info by container name\nby_name = scaleway.get_container_output(namespace_id=main.id,\n    name=main_container.name)\n# Get info by container ID\nby_id = scaleway.get_container_output(namespace_id=main.id,\n    container_id=main_container.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.ContainerNamespace(\"main\");\n\n    var mainContainer = new Scaleway.Container(\"main\", new()\n    {\n        Name = \"test-container-data\",\n        NamespaceId = main.Id,\n    });\n\n    // Get info by container name\n    var byName = Scaleway.GetContainer.Invoke(new()\n    {\n        NamespaceId = main.Id,\n        Name = mainContainer.Name,\n    });\n\n    // Get info by container ID\n    var byId = Scaleway.GetContainer.Invoke(new()\n    {\n        NamespaceId = main.Id,\n        ContainerId = mainContainer.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewContainerNamespace(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainContainer, err := scaleway.NewContainer(ctx, \"main\", \u0026scaleway.ContainerArgs{\n\t\t\tName:        pulumi.String(\"test-container-data\"),\n\t\t\tNamespaceId: main.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Get info by container name\n\t\t_ = scaleway.LookupContainerOutput(ctx, scaleway.GetContainerOutputArgs{\n\t\t\tNamespaceId: main.ID(),\n\t\t\tName:        mainContainer.Name,\n\t\t}, nil)\n\t\t// Get info by container ID\n\t\t_ = scaleway.LookupContainerOutput(ctx, scaleway.GetContainerOutputArgs{\n\t\t\tNamespaceId: main.ID(),\n\t\t\tContainerId: mainContainer.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ContainerNamespace;\nimport com.pulumi.scaleway.Container;\nimport com.pulumi.scaleway.ContainerArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetContainerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new ContainerNamespace(\"main\");\n\n        var mainContainer = new Container(\"mainContainer\", ContainerArgs.builder()\n            .name(\"test-container-data\")\n            .namespaceId(main.id())\n            .build());\n\n        // Get info by container name\n        final var byName = ScalewayFunctions.getContainer(GetContainerArgs.builder()\n            .namespaceId(main.id())\n            .name(mainContainer.name())\n            .build());\n\n        // Get info by container ID\n        final var byId = ScalewayFunctions.getContainer(GetContainerArgs.builder()\n            .namespaceId(main.id())\n            .containerId(mainContainer.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:ContainerNamespace\n  mainContainer:\n    type: scaleway:Container\n    name: main\n    properties:\n      name: test-container-data\n      namespaceId: ${main.id}\nvariables:\n  # Get info by container name\n  byName:\n    fn::invoke:\n      Function: scaleway:getContainer\n      Arguments:\n        namespaceId: ${main.id}\n        name: ${mainContainer.name}\n  # Get info by container ID\n  byId:\n    fn::invoke:\n      Function: scaleway:getContainer\n      Arguments:\n        namespaceId: ${main.id}\n        containerId: ${mainContainer.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Arguments reference\n\nThis section lists the arguments that you can provide to the `scaleway.Container` data source to filter and retrieve the desired namespace. Each argument has a specific purpose:\n\n- `name` - (Required) The unique name of the container.\n\n- `namespace_id` - (Required) The container namespace ID of the container.\n\n- `project_id` - (Optional) The unique identifier of the project with which the container is associated.\n\n\u003e **Important** Updating the `name` argument will recreate the container.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getContainer.\n",
                "properties": {
                    "containerId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string",
                        "description": "(Defaults to provider `region`) The region in which the container was created.\n"
                    }
                },
                "type": "object",
                "required": [
                    "namespaceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getContainer.\n",
                "properties": {
                    "containerId": {
                        "type": "string"
                    },
                    "cpuLimit": {
                        "description": "The amount of vCPU computing resources to allocate to each container.\n",
                        "type": "integer"
                    },
                    "cronStatus": {
                        "description": "The cron status of the container.\n",
                        "type": "string"
                    },
                    "deploy": {
                        "description": "Boolean indicating whether the container is on a production environment.\n",
                        "type": "boolean"
                    },
                    "description": {
                        "description": "The description of the container.\n",
                        "type": "string"
                    },
                    "domainName": {
                        "description": "The container domain name.\n",
                        "type": "string"
                    },
                    "environmentVariables": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The [environment](https://www.scaleway.com/en/docs/compute/containers/concepts/#environment-variables) variables of the container.\n",
                        "type": "object"
                    },
                    "errorMessage": {
                        "description": "The error message of the container.\n",
                        "type": "string"
                    },
                    "httpOption": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "maxConcurrency": {
                        "description": "The maximum number of simultaneous requests your container can handle at the same time.\n",
                        "type": "integer"
                    },
                    "maxScale": {
                        "description": "The maximum number of instances the container can scale to.\n",
                        "type": "integer"
                    },
                    "memoryLimit": {
                        "description": "The memory resources in MB to allocate to each container.\n",
                        "type": "integer"
                    },
                    "minScale": {
                        "description": "The minimum number of container instances running continuously.\n",
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "port": {
                        "description": "The port to expose the container.\n",
                        "type": "integer"
                    },
                    "privacy": {
                        "description": "The privacy type define the way to authenticate to your container. Refer to the [dedicated documentation](https://www.scaleway.com/en/developers/api/serverless-containers/#path-containers-update-an-existing-container) for more information.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "protocol": {
                        "description": "The communication [protocol](https://www.scaleway.com/en/developers/api/serverless-containers/#path-containers-update-an-existing-container) `http1` or `h2c`. Defaults to `http1`.\n",
                        "type": "string"
                    },
                    "region": {
                        "description": "(Defaults to provider `region`) The region in which the container was created.\n",
                        "type": "string"
                    },
                    "registryImage": {
                        "description": "The registry image address (e.g. `rg.fr-par.scw.cloud/$NAMESPACE/$IMAGE`).\n",
                        "type": "string"
                    },
                    "registrySha256": {
                        "description": "The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string.\n",
                        "type": "string"
                    },
                    "sandbox": {
                        "description": "(Optional) Execution environment of the container.\n",
                        "type": "string"
                    },
                    "secretEnvironmentVariables": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "status": {
                        "description": "The container status.\n",
                        "type": "string"
                    },
                    "timeout": {
                        "description": "The maximum amount of time your container can spend processing a request before being stopped.\n",
                        "type": "integer"
                    }
                },
                "required": [
                    "cpuLimit",
                    "cronStatus",
                    "deploy",
                    "description",
                    "domainName",
                    "environmentVariables",
                    "errorMessage",
                    "httpOption",
                    "maxConcurrency",
                    "maxScale",
                    "memoryLimit",
                    "minScale",
                    "namespaceId",
                    "port",
                    "privacy",
                    "protocol",
                    "registryImage",
                    "registrySha256",
                    "sandbox",
                    "secretEnvironmentVariables",
                    "status",
                    "timeout",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getContainerNamespace:getContainerNamespace": {
            "description": "The `scaleway.ContainerNamespace` data source is used to retrieve information about a Serverless Containers namespace.\n\nRefer to the Serverless Containers [product documentation](https://www.scaleway.com/en/docs/serverless/containers/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-containers/) for more information.\n\n## Retrieve a Serverless Containers namespace\n\nThe following commands allow you to:\n\n- retrieve a namespace by its name\n- retrieve a namespace by its ID\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by namespace name\nconst byName = scaleway.getContainerNamespace({\n    name: \"my-namespace-name\",\n});\n// Get info by namespace ID\nconst byId = scaleway.getContainerNamespace({\n    namespaceId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Get info by namespace name\nby_name = scaleway.get_container_namespace(name=\"my-namespace-name\")\n# Get info by namespace ID\nby_id = scaleway.get_container_namespace(namespace_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Get info by namespace name\n    var byName = Scaleway.GetContainerNamespace.Invoke(new()\n    {\n        Name = \"my-namespace-name\",\n    });\n\n    // Get info by namespace ID\n    var byId = Scaleway.GetContainerNamespace.Invoke(new()\n    {\n        NamespaceId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Get info by namespace name\n\t\t_, err := scaleway.LookupContainerNamespace(ctx, \u0026scaleway.LookupContainerNamespaceArgs{\n\t\t\tName: pulumi.StringRef(\"my-namespace-name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Get info by namespace ID\n\t\t_, err = scaleway.LookupContainerNamespace(ctx, \u0026scaleway.LookupContainerNamespaceArgs{\n\t\t\tNamespaceId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetContainerNamespaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Get info by namespace name\n        final var byName = ScalewayFunctions.getContainerNamespace(GetContainerNamespaceArgs.builder()\n            .name(\"my-namespace-name\")\n            .build());\n\n        // Get info by namespace ID\n        final var byId = ScalewayFunctions.getContainerNamespace(GetContainerNamespaceArgs.builder()\n            .namespaceId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Get info by namespace name\n  byName:\n    fn::invoke:\n      Function: scaleway:getContainerNamespace\n      Arguments:\n        name: my-namespace-name\n  # Get info by namespace ID\n  byId:\n    fn::invoke:\n      Function: scaleway:getContainerNamespace\n      Arguments:\n        namespaceId: 11111111-1111-1111-1111-111111111111\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getContainerNamespace.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the namespace. Only one of `name` and `namespace_id` should be specified.\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The unique identifier of the namespace. Only one of `name` and `namespace_id` should be specified.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The unique identifier of the project with which the namespace is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the namespace exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getContainerNamespace.\n",
                "properties": {
                    "description": {
                        "description": "The description of the namespace.\n",
                        "type": "string"
                    },
                    "destroyRegistry": {
                        "type": "boolean"
                    },
                    "environmentVariables": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The environment variables of the namespace.\n",
                        "type": "object"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "description": "The unique identifier of the organization with which the namespace is associated.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "registryEndpoint": {
                        "description": "The registry endpoint of the namespace.\n",
                        "type": "string"
                    },
                    "registryNamespaceId": {
                        "description": "The unique identifier of the registry namespace of the Serverless Containers namespace.\n",
                        "type": "string"
                    },
                    "secretEnvironmentVariables": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "description",
                    "destroyRegistry",
                    "environmentVariables",
                    "organizationId",
                    "registryEndpoint",
                    "registryNamespaceId",
                    "secretEnvironmentVariables",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getDatabase:getDatabase": {
            "description": "Gets information about a database.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get the database foobar hosted on instance id 11111111-1111-1111-1111-111111111111\nconst myDb = scaleway.getDatabase({\n    instanceId: \"11111111-1111-1111-1111-111111111111\",\n    name: \"foobar\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Get the database foobar hosted on instance id 11111111-1111-1111-1111-111111111111\nmy_db = scaleway.get_database(instance_id=\"11111111-1111-1111-1111-111111111111\",\n    name=\"foobar\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Get the database foobar hosted on instance id 11111111-1111-1111-1111-111111111111\n    var myDb = Scaleway.GetDatabase.Invoke(new()\n    {\n        InstanceId = \"11111111-1111-1111-1111-111111111111\",\n        Name = \"foobar\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Get the database foobar hosted on instance id 11111111-1111-1111-1111-111111111111\n\t\t_, err := scaleway.LookupDatabase(ctx, \u0026scaleway.LookupDatabaseArgs{\n\t\t\tInstanceId: \"11111111-1111-1111-1111-111111111111\",\n\t\t\tName:       \"foobar\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Get the database foobar hosted on instance id 11111111-1111-1111-1111-111111111111\n        final var myDb = ScalewayFunctions.getDatabase(GetDatabaseArgs.builder()\n            .instanceId(\"11111111-1111-1111-1111-111111111111\")\n            .name(\"foobar\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Get the database foobar hosted on instance id 11111111-1111-1111-1111-111111111111\n  myDb:\n    fn::invoke:\n      Function: scaleway:getDatabase\n      Arguments:\n        instanceId: 11111111-1111-1111-1111-111111111111\n        name: foobar\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabase.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The RDB instance ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the RDB instance.\n"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabase.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "managed": {
                        "description": "Whether the database is managed or not.\n",
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "owner": {
                        "description": "The name of the owner of the database.\n",
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "size": {
                        "description": "Size of the database (in bytes).\n",
                        "type": "string"
                    }
                },
                "required": [
                    "instanceId",
                    "managed",
                    "name",
                    "owner",
                    "size",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getDatabaseAcl:getDatabaseAcl": {
            "description": "Gets information about the Database Instance network Access Control List.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get the database ACL for the instance id 11111111-1111-1111-1111-111111111111 located in the default region e.g: fr-par\nconst myAcl = scaleway.getDatabaseAcl({\n    instanceId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Get the database ACL for the instance id 11111111-1111-1111-1111-111111111111 located in the default region e.g: fr-par\nmy_acl = scaleway.get_database_acl(instance_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Get the database ACL for the instance id 11111111-1111-1111-1111-111111111111 located in the default region e.g: fr-par\n    var myAcl = Scaleway.GetDatabaseAcl.Invoke(new()\n    {\n        InstanceId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Get the database ACL for the instance id 11111111-1111-1111-1111-111111111111 located in the default region e.g: fr-par\n\t\t_, err := scaleway.LookupDatabaseAcl(ctx, \u0026scaleway.LookupDatabaseAclArgs{\n\t\t\tInstanceId: \"11111111-1111-1111-1111-111111111111\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetDatabaseAclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Get the database ACL for the instance id 11111111-1111-1111-1111-111111111111 located in the default region e.g: fr-par\n        final var myAcl = ScalewayFunctions.getDatabaseAcl(GetDatabaseAclArgs.builder()\n            .instanceId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Get the database ACL for the instance id 11111111-1111-1111-1111-111111111111 located in the default region e.g: fr-par\n  myAcl:\n    fn::invoke:\n      Function: scaleway:getDatabaseAcl\n      Arguments:\n        instanceId: 11111111-1111-1111-1111-111111111111\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseAcl.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The RDB instance ID.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the Database Instance should be created.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseAcl.\n",
                "properties": {
                    "aclRules": {
                        "description": "A list of ACLs rules (structure is described below)\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getDatabaseAclAclRule:getDatabaseAclAclRule"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "required": [
                    "aclRules",
                    "instanceId",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getDatabaseBackup:getDatabaseBackup": {
            "description": "Gets information about an RDB backup.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst findByName = scaleway.getDatabaseBackup({\n    name: \"mybackup\",\n});\nconst findByNameAndInstance = scaleway.getDatabaseBackup({\n    name: \"mybackup\",\n    instanceId: \"11111111-1111-1111-1111-111111111111\",\n});\nconst findById = scaleway.getDatabaseBackup({\n    backupId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nfind_by_name = scaleway.get_database_backup(name=\"mybackup\")\nfind_by_name_and_instance = scaleway.get_database_backup(name=\"mybackup\",\n    instance_id=\"11111111-1111-1111-1111-111111111111\")\nfind_by_id = scaleway.get_database_backup(backup_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var findByName = Scaleway.GetDatabaseBackup.Invoke(new()\n    {\n        Name = \"mybackup\",\n    });\n\n    var findByNameAndInstance = Scaleway.GetDatabaseBackup.Invoke(new()\n    {\n        Name = \"mybackup\",\n        InstanceId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n    var findById = Scaleway.GetDatabaseBackup.Invoke(new()\n    {\n        BackupId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupDatabaseBackup(ctx, \u0026scaleway.LookupDatabaseBackupArgs{\n\t\t\tName: pulumi.StringRef(\"mybackup\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupDatabaseBackup(ctx, \u0026scaleway.LookupDatabaseBackupArgs{\n\t\t\tName:       pulumi.StringRef(\"mybackup\"),\n\t\t\tInstanceId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupDatabaseBackup(ctx, \u0026scaleway.LookupDatabaseBackupArgs{\n\t\t\tBackupId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetDatabaseBackupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var findByName = ScalewayFunctions.getDatabaseBackup(GetDatabaseBackupArgs.builder()\n            .name(\"mybackup\")\n            .build());\n\n        final var findByNameAndInstance = ScalewayFunctions.getDatabaseBackup(GetDatabaseBackupArgs.builder()\n            .name(\"mybackup\")\n            .instanceId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n        final var findById = ScalewayFunctions.getDatabaseBackup(GetDatabaseBackupArgs.builder()\n            .backupId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  findByName:\n    fn::invoke:\n      Function: scaleway:getDatabaseBackup\n      Arguments:\n        name: mybackup\n  findByNameAndInstance:\n    fn::invoke:\n      Function: scaleway:getDatabaseBackup\n      Arguments:\n        name: mybackup\n        instanceId: 11111111-1111-1111-1111-111111111111\n  findById:\n    fn::invoke:\n      Function: scaleway:getDatabaseBackup\n      Arguments:\n        backupId: 11111111-1111-1111-1111-111111111111\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseBackup.\n",
                "properties": {
                    "backupId": {
                        "type": "string",
                        "description": "The backup ID.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The Database Instance ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the RDB instance.\n\n\u003e **Note** You must specify at least one: `name` and/or `backup_id`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the Database Backup is associated with.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the Database Backup is associated with.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseBackup.\n",
                "properties": {
                    "backupId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "databaseName": {
                        "type": "string"
                    },
                    "expiresAt": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "databaseName",
                    "expiresAt",
                    "instanceName",
                    "size",
                    "updatedAt",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getDatabaseInstance:getDatabaseInstance": {
            "description": "Gets information about an Database Instance.\n\nFor further information refer the Managed Databases for PostgreSQL and MySQL [API documentation](https://developers.scaleway.com/en/products/rdb/api/#database-instance)\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseInstance.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The RDB instance ID.\n\n\u003e **Note** You must specify at least one: `name` and/or `instance_id`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the RDB instance.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the Database Instance is in. Can be used to filter instances when using `name`.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the Database Instance exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseInstance.\n",
                "properties": {
                    "backupSameRegion": {
                        "type": "boolean"
                    },
                    "backupScheduleFrequency": {
                        "type": "integer"
                    },
                    "backupScheduleRetention": {
                        "type": "integer"
                    },
                    "certificate": {
                        "type": "string"
                    },
                    "disableBackup": {
                        "type": "boolean"
                    },
                    "encryptionAtRest": {
                        "type": "boolean"
                    },
                    "endpointIp": {
                        "type": "string"
                    },
                    "endpointPort": {
                        "type": "integer"
                    },
                    "engine": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "initSettings": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "isHaCluster": {
                        "type": "boolean"
                    },
                    "loadBalancers": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getDatabaseInstanceLoadBalancer:getDatabaseInstanceLoadBalancer"
                        },
                        "type": "array"
                    },
                    "logsPolicies": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getDatabaseInstanceLogsPolicy:getDatabaseInstanceLogsPolicy"
                        },
                        "type": "array"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nodeType": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "privateNetworks": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getDatabaseInstancePrivateNetwork:getDatabaseInstancePrivateNetwork"
                        },
                        "type": "array"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "readReplicas": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getDatabaseInstanceReadReplica:getDatabaseInstanceReadReplica"
                        },
                        "type": "array"
                    },
                    "region": {
                        "type": "string"
                    },
                    "settings": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "userName": {
                        "type": "string"
                    },
                    "volumeSizeInGb": {
                        "type": "integer"
                    },
                    "volumeType": {
                        "type": "string"
                    }
                },
                "required": [
                    "backupSameRegion",
                    "backupScheduleFrequency",
                    "backupScheduleRetention",
                    "certificate",
                    "disableBackup",
                    "encryptionAtRest",
                    "endpointIp",
                    "endpointPort",
                    "engine",
                    "initSettings",
                    "isHaCluster",
                    "loadBalancers",
                    "logsPolicies",
                    "nodeType",
                    "organizationId",
                    "password",
                    "privateNetworks",
                    "readReplicas",
                    "settings",
                    "tags",
                    "userName",
                    "volumeSizeInGb",
                    "volumeType",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getDatabasePrivilege:getDatabasePrivilege": {
            "description": "Gets information about the privileges in a database.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get the database privilege for the user \"my-user\" on the database \"my-database\" hosted on instance id 11111111-1111-1111-1111-111111111111 and on the default region. e.g: fr-par\nconst main = scaleway.getDatabasePrivilege({\n    instanceId: \"11111111-1111-111111111111\",\n    userName: \"my-user\",\n    databaseName: \"my-database\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Get the database privilege for the user \"my-user\" on the database \"my-database\" hosted on instance id 11111111-1111-1111-1111-111111111111 and on the default region. e.g: fr-par\nmain = scaleway.get_database_privilege(instance_id=\"11111111-1111-111111111111\",\n    user_name=\"my-user\",\n    database_name=\"my-database\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Get the database privilege for the user \"my-user\" on the database \"my-database\" hosted on instance id 11111111-1111-1111-1111-111111111111 and on the default region. e.g: fr-par\n    var main = Scaleway.GetDatabasePrivilege.Invoke(new()\n    {\n        InstanceId = \"11111111-1111-111111111111\",\n        UserName = \"my-user\",\n        DatabaseName = \"my-database\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Get the database privilege for the user \"my-user\" on the database \"my-database\" hosted on instance id 11111111-1111-1111-1111-111111111111 and on the default region. e.g: fr-par\n\t\t_, err := scaleway.LookupDatabasePrivilege(ctx, \u0026scaleway.LookupDatabasePrivilegeArgs{\n\t\t\tInstanceId:   \"11111111-1111-111111111111\",\n\t\t\tUserName:     \"my-user\",\n\t\t\tDatabaseName: \"my-database\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetDatabasePrivilegeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Get the database privilege for the user \"my-user\" on the database \"my-database\" hosted on instance id 11111111-1111-1111-1111-111111111111 and on the default region. e.g: fr-par\n        final var main = ScalewayFunctions.getDatabasePrivilege(GetDatabasePrivilegeArgs.builder()\n            .instanceId(\"11111111-1111-111111111111\")\n            .userName(\"my-user\")\n            .databaseName(\"my-database\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Get the database privilege for the user \"my-user\" on the database \"my-database\" hosted on instance id 11111111-1111-1111-1111-111111111111 and on the default region. e.g: fr-par\n  main:\n    fn::invoke:\n      Function: scaleway:getDatabasePrivilege\n      Arguments:\n        instanceId: 11111111-1111-111111111111\n        userName: my-user\n        databaseName: my-database\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabasePrivilege.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The database name.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The Database Instance ID.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the resource exists.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "The user name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "databaseName",
                    "instanceId",
                    "userName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabasePrivilege.\n",
                "properties": {
                    "databaseName": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "permission": {
                        "description": "The permission for this user on the database. Possible values are `readonly`, `readwrite`, `all`\n, `custom` and `none`.\n",
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "userName": {
                        "type": "string"
                    }
                },
                "required": [
                    "databaseName",
                    "instanceId",
                    "permission",
                    "userName",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getDocumentdbDatabase:getDocumentdbDatabase": {
            "description": "Gets information about DocumentDB database.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get the database foobar hosted on instance id 11111111-1111-1111-1111-111111111111\nconst main = scaleway.getDocumentdbDatabase({\n    instanceId: \"11111111-1111-1111-1111-111111111111\",\n    name: \"foobar\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Get the database foobar hosted on instance id 11111111-1111-1111-1111-111111111111\nmain = scaleway.get_documentdb_database(instance_id=\"11111111-1111-1111-1111-111111111111\",\n    name=\"foobar\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Get the database foobar hosted on instance id 11111111-1111-1111-1111-111111111111\n    var main = Scaleway.GetDocumentdbDatabase.Invoke(new()\n    {\n        InstanceId = \"11111111-1111-1111-1111-111111111111\",\n        Name = \"foobar\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Get the database foobar hosted on instance id 11111111-1111-1111-1111-111111111111\n\t\t_, err := scaleway.LookupDocumentdbDatabase(ctx, \u0026scaleway.LookupDocumentdbDatabaseArgs{\n\t\t\tInstanceId: \"11111111-1111-1111-1111-111111111111\",\n\t\t\tName:       pulumi.StringRef(\"foobar\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetDocumentdbDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Get the database foobar hosted on instance id 11111111-1111-1111-1111-111111111111\n        final var main = ScalewayFunctions.getDocumentdbDatabase(GetDocumentdbDatabaseArgs.builder()\n            .instanceId(\"11111111-1111-1111-1111-111111111111\")\n            .name(\"foobar\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Get the database foobar hosted on instance id 11111111-1111-1111-1111-111111111111\n  main:\n    fn::invoke:\n      Function: scaleway:getDocumentdbDatabase\n      Arguments:\n        instanceId: 11111111-1111-1111-1111-111111111111\n        name: foobar\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDocumentdbDatabase.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The DocumentDB instance ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the DocumentDB instance.\n"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDocumentdbDatabase.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "managed": {
                        "description": "Whether the database is managed or not.\n",
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "owner": {
                        "description": "The name of the owner of the database.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "size": {
                        "description": "Size of the database (in bytes).\n",
                        "type": "string"
                    }
                },
                "required": [
                    "instanceId",
                    "managed",
                    "owner",
                    "projectId",
                    "size",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getDocumentdbInstance:getDocumentdbInstance": {
            "description": "Gets information about an DocumentDB instance.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDocumentdbInstance.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The DocumentDB instance ID.\nOnly one of `name` and `instance_id` should be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the DocumentDB instance.\nOnly one of `name` and `instance_id` should be specified.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the DocumentDB instance is associated with.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the DocumentDB instance exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDocumentdbInstance.\n",
                "properties": {
                    "engine": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "isHaCluster": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nodeType": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "telemetryEnabled": {
                        "type": "boolean"
                    },
                    "userName": {
                        "type": "string"
                    },
                    "volumeSizeInGb": {
                        "type": "integer"
                    },
                    "volumeType": {
                        "type": "string"
                    }
                },
                "required": [
                    "engine",
                    "isHaCluster",
                    "nodeType",
                    "password",
                    "tags",
                    "telemetryEnabled",
                    "userName",
                    "volumeSizeInGb",
                    "volumeType",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getDocumentdbLoadBalancerEndpoint:getDocumentdbLoadBalancerEndpoint": {
            "description": "Gets information about an DocumentDB load balancer endpoint.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDocumentdbLoadBalancerEndpoint.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The DocumentDB Instance on which the endpoint is attached. Only one of `instance_name` and `instance_id` should be specified.\n"
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "The DocumentDB Instance Name on which the endpoint is attached. Only one of `instance_name` and `instance_id` should be specified.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the DocumentDB endpoint is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the DocumentDB endpoint exists.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDocumentdbLoadBalancerEndpoint.\n",
                "properties": {
                    "hostname": {
                        "description": "The hostname of your endpoint.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "ip": {
                        "description": "The IP of your load balancer service.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of your load balancer service.\n",
                        "type": "string"
                    },
                    "port": {
                        "description": "The port of your load balancer service.\n",
                        "type": "integer"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "required": [
                    "hostname",
                    "instanceId",
                    "instanceName",
                    "ip",
                    "name",
                    "port",
                    "projectId",
                    "region",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getDomainRecord:getDomainRecord": {
            "description": "The `scaleway.DomainRecord` data source is used to get information about an existing domain record.\n\nRefer to the Domains and DNS [product documentation](https://www.scaleway.com/en/docs/network/domains-and-dns/) and [API documentation](https://www.scaleway.com/en/developers/api/domains-and-dns/) for more information.\n\n\n## Query domain records\n\nThe following commands allow you to:\n\n- query a domain record specified by the DNS zone (`domain.tld`), the record name (`www`), the record type (`A`), and the record content (`1.2.3.4`).\n- query a domain record specified by the DNS zone (`domain.tld`) and the unique record ID (`11111111-1111-1111-1111-111111111111`).\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Query record by DNS zone, record name, type and content\nconst byContent = scaleway.getDomainRecord({\n    dnsZone: \"domain.tld\",\n    name: \"www\",\n    type: \"A\",\n    data: \"1.2.3.4\",\n});\n// Query record by DNS zone and record ID\nconst byId = scaleway.getDomainRecord({\n    dnsZone: \"domain.tld\",\n    recordId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Query record by DNS zone, record name, type and content\nby_content = scaleway.get_domain_record(dns_zone=\"domain.tld\",\n    name=\"www\",\n    type=\"A\",\n    data=\"1.2.3.4\")\n# Query record by DNS zone and record ID\nby_id = scaleway.get_domain_record(dns_zone=\"domain.tld\",\n    record_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Query record by DNS zone, record name, type and content\n    var byContent = Scaleway.GetDomainRecord.Invoke(new()\n    {\n        DnsZone = \"domain.tld\",\n        Name = \"www\",\n        Type = \"A\",\n        Data = \"1.2.3.4\",\n    });\n\n    // Query record by DNS zone and record ID\n    var byId = Scaleway.GetDomainRecord.Invoke(new()\n    {\n        DnsZone = \"domain.tld\",\n        RecordId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Query record by DNS zone, record name, type and content\n\t\t_, err := scaleway.LookupDomainRecord(ctx, \u0026scaleway.LookupDomainRecordArgs{\n\t\t\tDnsZone: pulumi.StringRef(\"domain.tld\"),\n\t\t\tName:    pulumi.StringRef(\"www\"),\n\t\t\tType:    pulumi.StringRef(\"A\"),\n\t\t\tData:    pulumi.StringRef(\"1.2.3.4\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Query record by DNS zone and record ID\n\t\t_, err = scaleway.LookupDomainRecord(ctx, \u0026scaleway.LookupDomainRecordArgs{\n\t\t\tDnsZone:  pulumi.StringRef(\"domain.tld\"),\n\t\t\tRecordId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetDomainRecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Query record by DNS zone, record name, type and content\n        final var byContent = ScalewayFunctions.getDomainRecord(GetDomainRecordArgs.builder()\n            .dnsZone(\"domain.tld\")\n            .name(\"www\")\n            .type(\"A\")\n            .data(\"1.2.3.4\")\n            .build());\n\n        // Query record by DNS zone and record ID\n        final var byId = ScalewayFunctions.getDomainRecord(GetDomainRecordArgs.builder()\n            .dnsZone(\"domain.tld\")\n            .recordId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Query record by DNS zone, record name, type and content\n  byContent:\n    fn::invoke:\n      Function: scaleway:getDomainRecord\n      Arguments:\n        dnsZone: domain.tld\n        name: www\n        type: A\n        data: 1.2.3.4\n  # Query record by DNS zone and record ID\n  byId:\n    fn::invoke:\n      Function: scaleway:getDomainRecord\n      Arguments:\n        dnsZone: domain.tld\n        recordId: 11111111-1111-1111-1111-111111111111\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDomainRecord.\n",
                "properties": {
                    "data": {
                        "type": "string",
                        "description": "The content of the record (e.g., an IPv4 address for an `A` record or a string for a `TXT` record). Cannot be used with `record_id`.\n"
                    },
                    "dnsZone": {
                        "type": "string",
                        "description": "The DNS zone (domain) to which the record belongs. This is a required field in both examples above but is optional in the context of defining the data source.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the record, which can be an empty string for a root record. Cannot be used with `record_id`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "). The ID of the Project associated with the domain.\n"
                    },
                    "recordId": {
                        "type": "string",
                        "description": "The unique identifier of the record. Cannot be used with `name`, `type`, and `data`.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the record (`A`, `AAAA`, `MX`, `CNAME`, etc.). Cannot be used with `record_id`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDomainRecord.\n",
                "properties": {
                    "data": {
                        "type": "string"
                    },
                    "dnsZone": {
                        "type": "string"
                    },
                    "fqdn": {
                        "type": "string"
                    },
                    "geoIps": {
                        "description": "Information about dynamic records based on user geolocation. Find out more about dynamic records.\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getDomainRecordGeoIp:getDomainRecordGeoIp"
                        },
                        "type": "array"
                    },
                    "httpServices": {
                        "description": "Information about dynamic records based on URL resolution. Find out more about dynamic records.\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getDomainRecordHttpService:getDomainRecordHttpService"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "keepEmptyZone": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "priority": {
                        "description": "The priority of the record, mainly used with `MX` records.\n",
                        "type": "integer"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "recordId": {
                        "type": "string"
                    },
                    "rootZone": {
                        "type": "boolean"
                    },
                    "ttl": {
                        "description": "The Time To Live (TTL) of the record in seconds.\n",
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    },
                    "views": {
                        "description": "Information about dynamic records based on the client’s (resolver) subnet. Find out more about dynamic records.\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getDomainRecordView:getDomainRecordView"
                        },
                        "type": "array"
                    },
                    "weighteds": {
                        "description": "Information about dynamic records based on IP weights. Find out more about dynamic records.\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getDomainRecordWeighted:getDomainRecordWeighted"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "fqdn",
                    "geoIps",
                    "httpServices",
                    "keepEmptyZone",
                    "priority",
                    "rootZone",
                    "ttl",
                    "views",
                    "weighteds",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getDomainZone:getDomainZone": {
            "inputs": {
                "description": "A collection of arguments for invoking getDomainZone.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The primary domain name where the DNS zone is located. This is a mandatory field.\n"
                    },
                    "subdomain": {
                        "type": "string",
                        "description": "The subdomain (or zone name) within the primary domain. This is a mandatory field.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDomainZone.\n",
                "properties": {
                    "domain": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "message": {
                        "description": "Message associated with the domain zone (typically used for status or error messages).\n",
                        "type": "string"
                    },
                    "ns": {
                        "description": "The list of name servers for the zone.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "nsDefaults": {
                        "description": "The default list of name servers for the zone.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "nsMasters": {
                        "description": "The master list of name servers for the zone.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the domain zone.\n",
                        "type": "string"
                    },
                    "subdomain": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "description": "The date and time of the last update to the DNS zone.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "message",
                    "ns",
                    "nsDefaults",
                    "nsMasters",
                    "projectId",
                    "status",
                    "updatedAt",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getFlexibleIp:getFlexibleIp": {
            "description": "Gets information about a Flexible IP.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFlexibleIp.\n",
                "properties": {
                    "flexibleIpId": {
                        "type": "string"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address.\nOnly one of `ip_address` and `ip_id` should be specified.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "(Defaults to provider `project_id`) The ID of the project the IP is in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFlexibleIp.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "flexibleIpId": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "ipAddress": {
                        "type": "string"
                    },
                    "isIpv6": {
                        "type": "boolean"
                    },
                    "organizationId": {
                        "description": "(Defaults to provider `organization_id`) The ID of the organization the IP is in.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "(Defaults to provider `project_id`) The ID of the project the IP is in.\n",
                        "type": "string"
                    },
                    "reverse": {
                        "description": "The reverse domain associated with this IP.\n",
                        "type": "string"
                    },
                    "serverId": {
                        "description": "The associated server ID if any\n",
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "description",
                    "isIpv6",
                    "organizationId",
                    "projectId",
                    "reverse",
                    "serverId",
                    "status",
                    "tags",
                    "updatedAt",
                    "zone",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getFlexibleIps:getFlexibleIps": {
            "description": "Gets information about multiple Flexible IPs.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\n// Find ips that share the same tags\nconst fipsByTags = scaleway.getFlexibleIps({\n    tags: [\"a tag\"],\n});\n// Find ips that share the same Server ID\nconst myOffer = scaleway.getBaremetalOffer({\n    name: \"EM-B112X-SSD\",\n});\nconst base = new scaleway.BaremetalServer(\"base\", {\n    name: \"MyServer\",\n    offer: myOffer.then(myOffer =\u003e myOffer.offerId),\n    installConfigAfterward: true,\n});\nconst first = new scaleway.FlexibleIp(\"first\", {\n    serverId: base.id,\n    tags: [\n        \"foo\",\n        \"first\",\n    ],\n});\nconst second = new scaleway.FlexibleIp(\"second\", {\n    serverId: base.id,\n    tags: [\n        \"foo\",\n        \"second\",\n    ],\n});\nconst fipsByServerId = scaleway.getFlexibleIpsOutput({\n    serverIds: [base.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\n# Find ips that share the same tags\nfips_by_tags = scaleway.get_flexible_ips(tags=[\"a tag\"])\n# Find ips that share the same Server ID\nmy_offer = scaleway.get_baremetal_offer(name=\"EM-B112X-SSD\")\nbase = scaleway.BaremetalServer(\"base\",\n    name=\"MyServer\",\n    offer=my_offer.offer_id,\n    install_config_afterward=True)\nfirst = scaleway.FlexibleIp(\"first\",\n    server_id=base.id,\n    tags=[\n        \"foo\",\n        \"first\",\n    ])\nsecond = scaleway.FlexibleIp(\"second\",\n    server_id=base.id,\n    tags=[\n        \"foo\",\n        \"second\",\n    ])\nfips_by_server_id = scaleway.get_flexible_ips_output(server_ids=[base.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Find ips that share the same tags\n    var fipsByTags = Scaleway.GetFlexibleIps.Invoke(new()\n    {\n        Tags = new[]\n        {\n            \"a tag\",\n        },\n    });\n\n    // Find ips that share the same Server ID\n    var myOffer = Scaleway.GetBaremetalOffer.Invoke(new()\n    {\n        Name = \"EM-B112X-SSD\",\n    });\n\n    var @base = new Scaleway.BaremetalServer(\"base\", new()\n    {\n        Name = \"MyServer\",\n        Offer = myOffer.Apply(getBaremetalOfferResult =\u003e getBaremetalOfferResult.OfferId),\n        InstallConfigAfterward = true,\n    });\n\n    var first = new Scaleway.FlexibleIp(\"first\", new()\n    {\n        ServerId = @base.Id,\n        Tags = new[]\n        {\n            \"foo\",\n            \"first\",\n        },\n    });\n\n    var second = new Scaleway.FlexibleIp(\"second\", new()\n    {\n        ServerId = @base.Id,\n        Tags = new[]\n        {\n            \"foo\",\n            \"second\",\n        },\n    });\n\n    var fipsByServerId = Scaleway.GetFlexibleIps.Invoke(new()\n    {\n        ServerIds = new[]\n        {\n            @base.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Find ips that share the same tags\n\t\t_, err := scaleway.GetFlexibleIps(ctx, \u0026scaleway.GetFlexibleIpsArgs{\n\t\t\tTags: []string{\n\t\t\t\t\"a tag\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Find ips that share the same Server ID\n\t\tmyOffer, err := scaleway.GetBaremetalOffer(ctx, \u0026scaleway.GetBaremetalOfferArgs{\n\t\t\tName: pulumi.StringRef(\"EM-B112X-SSD\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbase, err := scaleway.NewBaremetalServer(ctx, \"base\", \u0026scaleway.BaremetalServerArgs{\n\t\t\tName:                   pulumi.String(\"MyServer\"),\n\t\t\tOffer:                  pulumi.String(myOffer.OfferId),\n\t\t\tInstallConfigAfterward: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewFlexibleIp(ctx, \"first\", \u0026scaleway.FlexibleIpArgs{\n\t\t\tServerId: base.ID(),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo\"),\n\t\t\t\tpulumi.String(\"first\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.NewFlexibleIp(ctx, \"second\", \u0026scaleway.FlexibleIpArgs{\n\t\t\tServerId: base.ID(),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo\"),\n\t\t\t\tpulumi.String(\"second\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.GetFlexibleIpsOutput(ctx, scaleway.GetFlexibleIpsOutputArgs{\n\t\t\tServerIds: pulumi.StringArray{\n\t\t\t\tbase.ID(),\n\t\t\t},\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetFlexibleIpsArgs;\nimport com.pulumi.scaleway.inputs.GetBaremetalOfferArgs;\nimport com.pulumi.scaleway.BaremetalServer;\nimport com.pulumi.scaleway.BaremetalServerArgs;\nimport com.pulumi.scaleway.FlexibleIp;\nimport com.pulumi.scaleway.FlexibleIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Find ips that share the same tags\n        final var fipsByTags = ScalewayFunctions.getFlexibleIps(GetFlexibleIpsArgs.builder()\n            .tags(\"a tag\")\n            .build());\n\n        // Find ips that share the same Server ID\n        final var myOffer = ScalewayFunctions.getBaremetalOffer(GetBaremetalOfferArgs.builder()\n            .name(\"EM-B112X-SSD\")\n            .build());\n\n        var base = new BaremetalServer(\"base\", BaremetalServerArgs.builder()\n            .name(\"MyServer\")\n            .offer(myOffer.applyValue(getBaremetalOfferResult -\u003e getBaremetalOfferResult.offerId()))\n            .installConfigAfterward(true)\n            .build());\n\n        var first = new FlexibleIp(\"first\", FlexibleIpArgs.builder()\n            .serverId(base.id())\n            .tags(            \n                \"foo\",\n                \"first\")\n            .build());\n\n        var second = new FlexibleIp(\"second\", FlexibleIpArgs.builder()\n            .serverId(base.id())\n            .tags(            \n                \"foo\",\n                \"second\")\n            .build());\n\n        final var fipsByServerId = ScalewayFunctions.getFlexibleIps(GetFlexibleIpsArgs.builder()\n            .serverIds(base.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  base:\n    type: scaleway:BaremetalServer\n    properties:\n      name: MyServer\n      offer: ${myOffer.offerId}\n      installConfigAfterward: true\n  first:\n    type: scaleway:FlexibleIp\n    properties:\n      serverId: ${base.id}\n      tags:\n        - foo\n        - first\n  second:\n    type: scaleway:FlexibleIp\n    properties:\n      serverId: ${base.id}\n      tags:\n        - foo\n        - second\nvariables:\n  # Find ips that share the same tags\n  fipsByTags:\n    fn::invoke:\n      Function: scaleway:getFlexibleIps\n      Arguments:\n        tags:\n          - a tag\n  # Find ips that share the same Server ID\n  myOffer:\n    fn::invoke:\n      Function: scaleway:getBaremetalOffer\n      Arguments:\n        name: EM-B112X-SSD\n  fipsByServerId:\n    fn::invoke:\n      Function: scaleway:getFlexibleIps\n      Arguments:\n        serverIds:\n          - ${base.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFlexibleIps.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "(Defaults to provider `project_id`) The ID of the project the IP is in.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of server IDs used as filter. IPs with these exact server IDs are listed.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of tags used as filter. IPs with these exact tags are listed.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which IPs exist.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFlexibleIps.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "ips": {
                        "description": "List of found flexible IPS\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getFlexibleIpsIp:getFlexibleIpsIp"
                        },
                        "type": "array"
                    },
                    "organizationId": {
                        "description": "(Defaults to provider `organization_id`) The ID of the organization the IP is in.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "(Defaults to provider `project_id`) The ID of the project the IP is in.\n",
                        "type": "string"
                    },
                    "serverIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "tags": {
                        "description": "The list of tags which are attached to the flexible IP.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "zone": {
                        "description": "(Defaults to provider `zone`) The zone in which the MAC address exist.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "ips",
                    "organizationId",
                    "projectId",
                    "zone",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getFunction:getFunction": {
            "description": "The `scaleway.Function` data source is used to retrieve information about a Serverless Function.\n\nRefer to the Serverless Functions [product documentation](https://www.scaleway.com/en/docs/serverless/functions/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-functions/) for more information.\n\nFor more information on the limitations of Serverless Functions, refer to the [dedicated documentation](https://www.scaleway.com/en/docs/compute/functions/reference-content/functions-limitations/).\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFunction.\n",
                "properties": {
                    "functionId": {
                        "type": "string",
                        "description": "The unique identifier of the function. Only one of `name` and `function_id` should be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the function. Only one of `name` and `namespace_id` should be specified.\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace ID associated with this function.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The unique identifier of the project with which the function is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the container exists.\n"
                    }
                },
                "type": "object",
                "required": [
                    "namespaceId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFunction.\n",
                "properties": {
                    "cpuLimit": {
                        "type": "integer"
                    },
                    "deploy": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "domainName": {
                        "type": "string"
                    },
                    "environmentVariables": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "functionId": {
                        "type": "string"
                    },
                    "handler": {
                        "type": "string"
                    },
                    "httpOption": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "maxScale": {
                        "type": "integer"
                    },
                    "memoryLimit": {
                        "type": "integer"
                    },
                    "minScale": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "privacy": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "runtime": {
                        "type": "string"
                    },
                    "sandbox": {
                        "type": "string"
                    },
                    "secretEnvironmentVariables": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "timeout": {
                        "type": "integer"
                    },
                    "zipFile": {
                        "type": "string"
                    },
                    "zipHash": {
                        "type": "string"
                    }
                },
                "required": [
                    "cpuLimit",
                    "deploy",
                    "description",
                    "domainName",
                    "environmentVariables",
                    "handler",
                    "httpOption",
                    "maxScale",
                    "memoryLimit",
                    "minScale",
                    "namespaceId",
                    "organizationId",
                    "privacy",
                    "runtime",
                    "sandbox",
                    "secretEnvironmentVariables",
                    "timeout",
                    "zipFile",
                    "zipHash",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getFunctionNamespace:getFunctionNamespace": {
            "description": "The `scaleway.FunctionNamespace` data source is used to retrieve information about a Serverless Functions namespace.\n\nRefer to the Serverless Functions [product documentation](https://www.scaleway.com/en/docs/serverless/functions/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-functions/) for more information.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFunctionNamespace.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the namespace. Only one of `name` and `namespace_id` should be specified.\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The unique identifier of the namespace. Only one of `name` and `namespace_id` should be specified.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The unique identifier of the project with which the namespace is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the namespace exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFunctionNamespace.\n",
                "properties": {
                    "description": {
                        "description": "The description of the namespace.\n",
                        "type": "string"
                    },
                    "environmentVariables": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The environment variables of the namespace.\n",
                        "type": "object"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "description": "The unique identifier of the organization with which the namespace is associated.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "registryEndpoint": {
                        "description": "The registry endpoint of the namespace.\n",
                        "type": "string"
                    },
                    "registryNamespaceId": {
                        "description": "The unique identifier of the registry namespace of the Serverless Functions namespace.\n",
                        "type": "string"
                    },
                    "secretEnvironmentVariables": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "description",
                    "environmentVariables",
                    "organizationId",
                    "registryEndpoint",
                    "registryNamespaceId",
                    "secretEnvironmentVariables",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getIamApiKey:getIamApiKey": {
            "description": "Gets information about an existing IAM API key. For more information, refer to the [IAM API documentation](https://www.scaleway.com/en/developers/api/iam/#api-keys-3665ae).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get api key infos by id (access_key)\nconst main = scaleway.getIamApiKey({\n    accessKey: \"SCWABCDEFGHIJKLMNOPQ\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Get api key infos by id (access_key)\nmain = scaleway.get_iam_api_key(access_key=\"SCWABCDEFGHIJKLMNOPQ\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Get api key infos by id (access_key)\n    var main = Scaleway.GetIamApiKey.Invoke(new()\n    {\n        AccessKey = \"SCWABCDEFGHIJKLMNOPQ\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Get api key infos by id (access_key)\n\t\t_, err := scaleway.LookupIamApiKey(ctx, \u0026scaleway.LookupIamApiKeyArgs{\n\t\t\tAccessKey: \"SCWABCDEFGHIJKLMNOPQ\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetIamApiKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Get api key infos by id (access_key)\n        final var main = ScalewayFunctions.getIamApiKey(GetIamApiKeyArgs.builder()\n            .accessKey(\"SCWABCDEFGHIJKLMNOPQ\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Get api key infos by id (access_key)\n  main:\n    fn::invoke:\n      Function: scaleway:getIamApiKey\n      Arguments:\n        accessKey: SCWABCDEFGHIJKLMNOPQ\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIamApiKey.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "The access key of the IAM API key which is also the ID of the API key.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessKey"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIamApiKey.\n",
                "properties": {
                    "accessKey": {
                        "type": "string"
                    },
                    "applicationId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "creationIp": {
                        "type": "string"
                    },
                    "defaultProjectId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "editable": {
                        "type": "boolean"
                    },
                    "expiresAt": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "string"
                    }
                },
                "required": [
                    "accessKey",
                    "applicationId",
                    "createdAt",
                    "creationIp",
                    "defaultProjectId",
                    "description",
                    "editable",
                    "expiresAt",
                    "updatedAt",
                    "userId",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getIamApplication:getIamApplication": {
            "description": "Gets information about an existing IAM application.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by name\nconst findByName = scaleway.getIamApplication({\n    name: \"foobar\",\n});\n// Get info by application ID\nconst findById = scaleway.getIamApplication({\n    applicationId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Get info by name\nfind_by_name = scaleway.get_iam_application(name=\"foobar\")\n# Get info by application ID\nfind_by_id = scaleway.get_iam_application(application_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Get info by name\n    var findByName = Scaleway.GetIamApplication.Invoke(new()\n    {\n        Name = \"foobar\",\n    });\n\n    // Get info by application ID\n    var findById = Scaleway.GetIamApplication.Invoke(new()\n    {\n        ApplicationId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Get info by name\n\t\t_, err := scaleway.LookupIamApplication(ctx, \u0026scaleway.LookupIamApplicationArgs{\n\t\t\tName: pulumi.StringRef(\"foobar\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Get info by application ID\n\t\t_, err = scaleway.LookupIamApplication(ctx, \u0026scaleway.LookupIamApplicationArgs{\n\t\t\tApplicationId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetIamApplicationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Get info by name\n        final var findByName = ScalewayFunctions.getIamApplication(GetIamApplicationArgs.builder()\n            .name(\"foobar\")\n            .build());\n\n        // Get info by application ID\n        final var findById = ScalewayFunctions.getIamApplication(GetIamApplicationArgs.builder()\n            .applicationId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Get info by name\n  findByName:\n    fn::invoke:\n      Function: scaleway:getIamApplication\n      Arguments:\n        name: foobar\n  # Get info by application ID\n  findById:\n    fn::invoke:\n      Function: scaleway:getIamApplication\n      Arguments:\n        applicationId: 11111111-1111-1111-1111-111111111111\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIamApplication.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The ID of the IAM application.\n\n\u003e **Note** You must specify at least one: `name` and/or `application_id`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IAM application.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "`organization_id`) The ID of the\nOrganization the application is associated with.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIamApplication.\n",
                "properties": {
                    "applicationId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "editable": {
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "description",
                    "editable",
                    "tags",
                    "updatedAt",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getIamGroup:getIamGroup": {
            "description": "Gets information about an existing IAM group.\n\nFor more information, refer to the [IAM API documentation](https://developers.scaleway.com/en/products/iam/api/v1alpha1/#applications-83ce5e)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by name\nconst findByName = scaleway.getIamGroup({\n    name: \"foobar\",\n});\n// Get info by group ID\nconst findById = scaleway.getIamGroup({\n    groupId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Get info by name\nfind_by_name = scaleway.get_iam_group(name=\"foobar\")\n# Get info by group ID\nfind_by_id = scaleway.get_iam_group(group_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Get info by name\n    var findByName = Scaleway.GetIamGroup.Invoke(new()\n    {\n        Name = \"foobar\",\n    });\n\n    // Get info by group ID\n    var findById = Scaleway.GetIamGroup.Invoke(new()\n    {\n        GroupId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Get info by name\n\t\t_, err := scaleway.LookupIamGroup(ctx, \u0026scaleway.LookupIamGroupArgs{\n\t\t\tName: pulumi.StringRef(\"foobar\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Get info by group ID\n\t\t_, err = scaleway.LookupIamGroup(ctx, \u0026scaleway.LookupIamGroupArgs{\n\t\t\tGroupId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetIamGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Get info by name\n        final var findByName = ScalewayFunctions.getIamGroup(GetIamGroupArgs.builder()\n            .name(\"foobar\")\n            .build());\n\n        // Get info by group ID\n        final var findById = ScalewayFunctions.getIamGroup(GetIamGroupArgs.builder()\n            .groupId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Get info by name\n  findByName:\n    fn::invoke:\n      Function: scaleway:getIamGroup\n      Arguments:\n        name: foobar\n  # Get info by group ID\n  findById:\n    fn::invoke:\n      Function: scaleway:getIamGroup\n      Arguments:\n        groupId: 11111111-1111-1111-1111-111111111111\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIamGroup.\n",
                "properties": {
                    "groupId": {
                        "type": "string",
                        "description": "The ID of the IAM group.\n\n\u003e **Note** You must specify at least one: `name` and/or `group_id`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IAM group.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "`organization_id`) The ID of the\norganization the group is associated with.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIamGroup.\n",
                "properties": {
                    "applicationIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "externalMembership": {
                        "type": "boolean"
                    },
                    "groupId": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "userIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "applicationIds",
                    "createdAt",
                    "description",
                    "externalMembership",
                    "tags",
                    "updatedAt",
                    "userIds",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getIamSshKey:getIamSshKey": {
            "description": "Use this data source to get SSH key information based on its ID or name.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIamSshKey.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The SSH key name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the SSH\nkey is associated with.\n"
                    },
                    "sshKeyId": {
                        "type": "string",
                        "description": "The SSH key id.\n\n\u003e **Note** You must specify at least one: `name` and/or `ssh_key_id`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIamSshKey.\n",
                "properties": {
                    "createdAt": {
                        "description": "The date and time of the creation of the SSH key.\n",
                        "type": "string"
                    },
                    "disabled": {
                        "description": "The SSH key status.\n",
                        "type": "boolean"
                    },
                    "fingerprint": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "description": "The ID of the organization the SSH key is associated with.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "publicKey": {
                        "description": "The SSH public key string\n",
                        "type": "string"
                    },
                    "sshKeyId": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "description": "The date and time of the last update of the SSH key.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "disabled",
                    "fingerprint",
                    "organizationId",
                    "publicKey",
                    "updatedAt",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getIamUser:getIamUser": {
            "description": "Use this data source to get information on an existing IAM user based on its ID or email address.\nFor more information refer to the [IAM API documentation](https://developers.scaleway.com/en/products/iam/api/v1alpha1/#users-06bdcf).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by user id\nconst findById = scaleway.getIamUser({\n    userId: \"11111111-1111-1111-1111-111111111111\",\n});\n// Get info by email address\nconst findByEmail = scaleway.getIamUser({\n    email: \"foo@bar.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Get info by user id\nfind_by_id = scaleway.get_iam_user(user_id=\"11111111-1111-1111-1111-111111111111\")\n# Get info by email address\nfind_by_email = scaleway.get_iam_user(email=\"foo@bar.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Get info by user id\n    var findById = Scaleway.GetIamUser.Invoke(new()\n    {\n        UserId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n    // Get info by email address\n    var findByEmail = Scaleway.GetIamUser.Invoke(new()\n    {\n        Email = \"foo@bar.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Get info by user id\n\t\t_, err := scaleway.LookupIamUser(ctx, \u0026scaleway.LookupIamUserArgs{\n\t\t\tUserId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Get info by email address\n\t\t_, err = scaleway.LookupIamUser(ctx, \u0026scaleway.LookupIamUserArgs{\n\t\t\tEmail: pulumi.StringRef(\"foo@bar.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetIamUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Get info by user id\n        final var findById = ScalewayFunctions.getIamUser(GetIamUserArgs.builder()\n            .userId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n        // Get info by email address\n        final var findByEmail = ScalewayFunctions.getIamUser(GetIamUserArgs.builder()\n            .email(\"foo@bar.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Get info by user id\n  findById:\n    fn::invoke:\n      Function: scaleway:getIamUser\n      Arguments:\n        userId: 11111111-1111-1111-1111-111111111111\n  # Get info by email address\n  findByEmail:\n    fn::invoke:\n      Function: scaleway:getIamUser\n      Arguments:\n        email: foo@bar.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIamUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email address of the IAM user.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "`organization_id`) The ID of the\norganization the user is associated with.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of the IAM user.\n\n\u003e **Note** You must specify at least one: `name` and/or `user_id`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIamUser.\n",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getInstanceImage:getInstanceImage": {
            "description": "Gets information about an instance image.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceImage.\n",
                "properties": {
                    "architecture": {
                        "type": "string",
                        "description": "The architecture the image is compatible with. Possible values are: `x86_64` or `arm`.\n"
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The image id. Only one of `name` and `image_id` should be specified.\n"
                    },
                    "latest": {
                        "type": "boolean",
                        "description": "Use the latest image ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The image name. Only one of `name` and `image_id` should be specified.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the image is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the image exists.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceImage.\n",
                "properties": {
                    "additionalVolumeIds": {
                        "description": "IDs of the additional volumes in this image.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "architecture": {
                        "type": "string"
                    },
                    "creationDate": {
                        "description": "Date of the image creation.\n",
                        "type": "string"
                    },
                    "defaultBootscriptId": {
                        "description": "ID of the default bootscript for this image.\n",
                        "type": "string"
                    },
                    "fromServerId": {
                        "description": "ID of the server the image if based from.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "imageId": {
                        "type": "string"
                    },
                    "latest": {
                        "type": "boolean"
                    },
                    "modificationDate": {
                        "description": "Date of image latest update.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "description": "The ID of the organization the image is associated with.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "The ID of the project the image is associated with.\n",
                        "type": "string"
                    },
                    "public": {
                        "description": "Set to `true` if the image is public.\n",
                        "type": "boolean"
                    },
                    "rootVolumeId": {
                        "description": "ID of the root volume in this image.\n",
                        "type": "string"
                    },
                    "state": {
                        "description": "State of the image. Possible values are: `available`, `creating` or `error`.\n",
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "additionalVolumeIds",
                    "creationDate",
                    "defaultBootscriptId",
                    "fromServerId",
                    "modificationDate",
                    "organizationId",
                    "projectId",
                    "public",
                    "rootVolumeId",
                    "state",
                    "zone",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getInstanceIp:getInstanceIp": {
            "description": "Gets information about an instance IP.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceIp.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv4 address to retrieve\nOnly one of `address` and `id` should be specified.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the IP address to retrieve\nOnly one of `address` and `id` should be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceIp.\n",
                "properties": {
                    "address": {
                        "description": "The IP address.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of the IP.\n",
                        "type": "string"
                    },
                    "organizationId": {
                        "description": "The organization ID the IP is associated with.\n",
                        "type": "string"
                    },
                    "prefix": {
                        "description": "The IP Prefix.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "reverse": {
                        "description": "The reverse dns attached to this IP\n",
                        "type": "string"
                    },
                    "serverId": {
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": {
                        "description": "The type of the IP\n",
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "organizationId",
                    "prefix",
                    "projectId",
                    "reverse",
                    "serverId",
                    "tags",
                    "type",
                    "zone"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getInstancePlacementGroup:getInstancePlacementGroup": {
            "description": "Gets information about a Security Group.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInstancePlacementGroup.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The placement group name. Only one of `name` and `placement_group_id` should be specified.\n"
                    },
                    "placementGroupId": {
                        "type": "string",
                        "description": "The placement group id. Only one of `name` and `placement_group_id` should be specified.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the placement group is associated with.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the placement group exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstancePlacementGroup.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "description": "The organization ID the placement group is associated with.\n",
                        "type": "string"
                    },
                    "placementGroupId": {
                        "type": "string"
                    },
                    "policyMode": {
                        "description": "The [policy mode](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) of the placement group.\n",
                        "type": "string"
                    },
                    "policyRespected": {
                        "description": "Is true when the policy is respected.\n",
                        "type": "boolean"
                    },
                    "policyType": {
                        "description": "The [policy type](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) of the placement group.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "tags": {
                        "description": "A list of tags to apply to the placement group.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "organizationId",
                    "policyMode",
                    "policyRespected",
                    "policyType",
                    "projectId",
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getInstancePrivateNic:getInstancePrivateNic": {
            "description": "Gets information about an instance private NIC.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst byNicId = scaleway.getInstancePrivateNic({\n    serverId: \"11111111-1111-1111-1111-111111111111\",\n    privateNicId: \"11111111-1111-1111-1111-111111111111\",\n});\nconst byPnId = scaleway.getInstancePrivateNic({\n    serverId: \"11111111-1111-1111-1111-111111111111\",\n    privateNetworkId: \"11111111-1111-1111-1111-111111111111\",\n});\nconst byTags = scaleway.getInstancePrivateNic({\n    serverId: \"11111111-1111-1111-1111-111111111111\",\n    tags: [\"mytag\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_nic_id = scaleway.get_instance_private_nic(server_id=\"11111111-1111-1111-1111-111111111111\",\n    private_nic_id=\"11111111-1111-1111-1111-111111111111\")\nby_pn_id = scaleway.get_instance_private_nic(server_id=\"11111111-1111-1111-1111-111111111111\",\n    private_network_id=\"11111111-1111-1111-1111-111111111111\")\nby_tags = scaleway.get_instance_private_nic(server_id=\"11111111-1111-1111-1111-111111111111\",\n    tags=[\"mytag\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byNicId = Scaleway.GetInstancePrivateNic.Invoke(new()\n    {\n        ServerId = \"11111111-1111-1111-1111-111111111111\",\n        PrivateNicId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n    var byPnId = Scaleway.GetInstancePrivateNic.Invoke(new()\n    {\n        ServerId = \"11111111-1111-1111-1111-111111111111\",\n        PrivateNetworkId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n    var byTags = Scaleway.GetInstancePrivateNic.Invoke(new()\n    {\n        ServerId = \"11111111-1111-1111-1111-111111111111\",\n        Tags = new[]\n        {\n            \"mytag\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupInstancePrivateNic(ctx, \u0026scaleway.LookupInstancePrivateNicArgs{\n\t\t\tServerId:     \"11111111-1111-1111-1111-111111111111\",\n\t\t\tPrivateNicId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupInstancePrivateNic(ctx, \u0026scaleway.LookupInstancePrivateNicArgs{\n\t\t\tServerId:         \"11111111-1111-1111-1111-111111111111\",\n\t\t\tPrivateNetworkId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = scaleway.LookupInstancePrivateNic(ctx, \u0026scaleway.LookupInstancePrivateNicArgs{\n\t\t\tServerId: \"11111111-1111-1111-1111-111111111111\",\n\t\t\tTags: []string{\n\t\t\t\t\"mytag\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetInstancePrivateNicArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byNicId = ScalewayFunctions.getInstancePrivateNic(GetInstancePrivateNicArgs.builder()\n            .serverId(\"11111111-1111-1111-1111-111111111111\")\n            .privateNicId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n        final var byPnId = ScalewayFunctions.getInstancePrivateNic(GetInstancePrivateNicArgs.builder()\n            .serverId(\"11111111-1111-1111-1111-111111111111\")\n            .privateNetworkId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n        final var byTags = ScalewayFunctions.getInstancePrivateNic(GetInstancePrivateNicArgs.builder()\n            .serverId(\"11111111-1111-1111-1111-111111111111\")\n            .tags(\"mytag\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byNicId:\n    fn::invoke:\n      Function: scaleway:getInstancePrivateNic\n      Arguments:\n        serverId: 11111111-1111-1111-1111-111111111111\n        privateNicId: 11111111-1111-1111-1111-111111111111\n  byPnId:\n    fn::invoke:\n      Function: scaleway:getInstancePrivateNic\n      Arguments:\n        serverId: 11111111-1111-1111-1111-111111111111\n        privateNetworkId: 11111111-1111-1111-1111-111111111111\n  byTags:\n    fn::invoke:\n      Function: scaleway:getInstancePrivateNic\n      Arguments:\n        serverId: 11111111-1111-1111-1111-111111111111\n        tags:\n          - mytag\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInstancePrivateNic.\n",
                "properties": {
                    "privateNetworkId": {
                        "type": "string",
                        "description": "The ID of the private network\nOnly one of `private_nic_id` and `private_network_id` should be specified.\n"
                    },
                    "privateNicId": {
                        "type": "string",
                        "description": "The ID of the instance server private nic\nOnly one of `private_nic_id` and `private_network_id` should be specified.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The server's id\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the private NIC.\nAs datasource only returns one private NIC, the search with given tags must return only one result\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the private nic exists.\n"
                    }
                },
                "type": "object",
                "required": [
                    "serverId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getInstancePrivateNic.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "ipIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "macAddress": {
                        "type": "string"
                    },
                    "privateNetworkId": {
                        "type": "string"
                    },
                    "privateNicId": {
                        "type": "string"
                    },
                    "serverId": {
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "ipIds",
                    "macAddress",
                    "serverId",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getInstanceSecurityGroup:getInstanceSecurityGroup": {
            "description": "Gets information about a Security Group.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceSecurityGroup.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The security group name. Only one of `name` and `security_group_id` should be specified.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the security group is associated with.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "The security group id. Only one of `name` and `security_group_id` should be specified.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the security group exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceSecurityGroup.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "enableDefaultSecurity": {
                        "type": "boolean"
                    },
                    "externalRules": {
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "inboundDefaultPolicy": {
                        "description": "The default policy on incoming traffic. Possible values are: `accept` or `drop`.\n",
                        "type": "string"
                    },
                    "inboundRules": {
                        "description": "A list of inbound rule to add to the security group. (Structure is documented below.)\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getInstanceSecurityGroupInboundRule:getInstanceSecurityGroupInboundRule"
                        },
                        "type": "array"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "description": "The ID of the organization the security group is associated with.\n",
                        "type": "string"
                    },
                    "outboundDefaultPolicy": {
                        "description": "The default policy on outgoing traffic. Possible values are: `accept` or `drop`.\n",
                        "type": "string"
                    },
                    "outboundRules": {
                        "description": "A list of outbound rule to add to the security group. (Structure is documented below.)\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getInstanceSecurityGroupOutboundRule:getInstanceSecurityGroupOutboundRule"
                        },
                        "type": "array"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "securityGroupId": {
                        "type": "string"
                    },
                    "stateful": {
                        "type": "boolean"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "description",
                    "enableDefaultSecurity",
                    "externalRules",
                    "inboundDefaultPolicy",
                    "inboundRules",
                    "organizationId",
                    "outboundDefaultPolicy",
                    "outboundRules",
                    "stateful",
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getInstanceServer:getInstanceServer": {
            "description": "Gets information about an instance server.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceServer.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The server name. Only one of `name` and `server_id` should be specified.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the instance server is associated with.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The server id. Only one of `name` and `server_id` should be specified.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the server exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceServer.\n",
                "properties": {
                    "additionalVolumeIds": {
                        "description": "The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)\nattached to the server.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "bootType": {
                        "type": "string"
                    },
                    "bootscriptId": {
                        "type": "string"
                    },
                    "cloudInit": {
                        "description": "The cloud init script associated with this server.\n",
                        "type": "string"
                    },
                    "enableDynamicIp": {
                        "description": "True if dynamic IP in enable on the server.\n",
                        "type": "boolean"
                    },
                    "enableIpv6": {
                        "description": "Determines if IPv6 is enabled for the server.\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "image": {
                        "description": "The UUID and the label of the base image used by the server.\n",
                        "type": "string"
                    },
                    "ipId": {
                        "type": "string"
                    },
                    "ipIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "ipv6Address": {
                        "description": "The default ipv6 address routed to the server. ( Only set when enable_ipv6 is set to true )\n",
                        "type": "string"
                    },
                    "ipv6Gateway": {
                        "description": "The ipv6 gateway address. ( Only set when enable_ipv6 is set to true )\n",
                        "type": "string"
                    },
                    "ipv6PrefixLength": {
                        "description": "The prefix length of the ipv6 subnet routed to the server. ( Only set when enable_ipv6 is set to true )\n",
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "description": "The ID of the organization the server is associated with.\n",
                        "type": "string"
                    },
                    "placementGroupId": {
                        "description": "The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.\n",
                        "type": "string"
                    },
                    "placementGroupPolicyRespected": {
                        "description": "True when the placement group policy is respected.\n",
                        "type": "boolean"
                    },
                    "privateIp": {
                        "description": "The Scaleway internal IP address of the server.\n",
                        "type": "string"
                    },
                    "privateNetworks": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getInstanceServerPrivateNetwork:getInstanceServerPrivateNetwork"
                        },
                        "type": "array"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "publicIp": {
                        "description": "The public IP address of the server.\n",
                        "type": "string"
                    },
                    "publicIps": {
                        "description": "The list of public IPs of the server\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getInstanceServerPublicIp:getInstanceServerPublicIp"
                        },
                        "type": "array"
                    },
                    "replaceOnTypeChange": {
                        "type": "boolean"
                    },
                    "rootVolumes": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getInstanceServerRootVolume:getInstanceServerRootVolume"
                        },
                        "type": "array"
                    },
                    "routedIpEnabled": {
                        "description": "True if the server support routed ip only.\n",
                        "type": "boolean"
                    },
                    "securityGroupId": {
                        "description": "The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.\n",
                        "type": "string"
                    },
                    "serverId": {
                        "type": "string"
                    },
                    "state": {
                        "description": "The state of the server. Possible values are: `started`, `stopped` or `standby`.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The tags associated with the server.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": {
                        "description": "The commercial type of the server.\nYou find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).\n",
                        "type": "string"
                    },
                    "userData": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The user data associated with the server.\n",
                        "type": "object"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "additionalVolumeIds",
                    "bootType",
                    "bootscriptId",
                    "cloudInit",
                    "enableDynamicIp",
                    "enableIpv6",
                    "image",
                    "ipId",
                    "ipIds",
                    "ipv6Address",
                    "ipv6Gateway",
                    "ipv6PrefixLength",
                    "organizationId",
                    "placementGroupId",
                    "placementGroupPolicyRespected",
                    "privateIp",
                    "privateNetworks",
                    "publicIp",
                    "publicIps",
                    "replaceOnTypeChange",
                    "rootVolumes",
                    "routedIpEnabled",
                    "securityGroupId",
                    "state",
                    "tags",
                    "type",
                    "userData",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getInstanceServers:getInstanceServers": {
            "description": "Gets information about multiple instance servers.\n\n## Examples\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceServers.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The server name used as filter. Servers with a name like it are listed.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the server is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of tags used as filter. Servers with these exact tags are listed.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which servers exist.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceServers.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the server.\n",
                        "type": "string"
                    },
                    "organizationId": {
                        "description": "The organization ID the server is associated with.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "The ID of the project the server is associated with.\n",
                        "type": "string"
                    },
                    "servers": {
                        "description": "List of found servers\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getInstanceServersServer:getInstanceServersServer"
                        },
                        "type": "array"
                    },
                    "tags": {
                        "description": "The tags associated with the server.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "zone": {
                        "description": "The zone in which the server is.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "organizationId",
                    "projectId",
                    "servers",
                    "zone",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getInstanceSnapshot:getInstanceSnapshot": {
            "description": "Gets information about an instance snapshot.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by snapshot name\nconst byName = scaleway.getInstanceSnapshot({\n    name: \"my-snapshot-name\",\n});\n// Get info by snapshot ID\nconst byId = scaleway.getInstanceSnapshot({\n    snapshotId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Get info by snapshot name\nby_name = scaleway.get_instance_snapshot(name=\"my-snapshot-name\")\n# Get info by snapshot ID\nby_id = scaleway.get_instance_snapshot(snapshot_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Get info by snapshot name\n    var byName = Scaleway.GetInstanceSnapshot.Invoke(new()\n    {\n        Name = \"my-snapshot-name\",\n    });\n\n    // Get info by snapshot ID\n    var byId = Scaleway.GetInstanceSnapshot.Invoke(new()\n    {\n        SnapshotId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Get info by snapshot name\n\t\t_, err := scaleway.LookupInstanceSnapshot(ctx, \u0026scaleway.LookupInstanceSnapshotArgs{\n\t\t\tName: pulumi.StringRef(\"my-snapshot-name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Get info by snapshot ID\n\t\t_, err = scaleway.LookupInstanceSnapshot(ctx, \u0026scaleway.LookupInstanceSnapshotArgs{\n\t\t\tSnapshotId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetInstanceSnapshotArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Get info by snapshot name\n        final var byName = ScalewayFunctions.getInstanceSnapshot(GetInstanceSnapshotArgs.builder()\n            .name(\"my-snapshot-name\")\n            .build());\n\n        // Get info by snapshot ID\n        final var byId = ScalewayFunctions.getInstanceSnapshot(GetInstanceSnapshotArgs.builder()\n            .snapshotId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Get info by snapshot name\n  byName:\n    fn::invoke:\n      Function: scaleway:getInstanceSnapshot\n      Arguments:\n        name: my-snapshot-name\n  # Get info by snapshot ID\n  byId:\n    fn::invoke:\n      Function: scaleway:getInstanceSnapshot\n      Arguments:\n        snapshotId: 11111111-1111-1111-1111-111111111111\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceSnapshot.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The snapshot name.\nOnly one of `name` and `snapshot_id` should be specified.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the snapshot is associated with.\n"
                    },
                    "snapshotId": {
                        "type": "string",
                        "description": "The snapshot id.\nOnly one of `name` and `snapshot_id` should be specified.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the snapshot exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceSnapshot.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "imports": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getInstanceSnapshotImport:getInstanceSnapshotImport"
                        },
                        "type": "array"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "sizeInGb": {
                        "type": "integer"
                    },
                    "snapshotId": {
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": {
                        "type": "string"
                    },
                    "volumeId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "imports",
                    "organizationId",
                    "sizeInGb",
                    "tags",
                    "type",
                    "volumeId",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getInstanceVolume:getInstanceVolume": {
            "description": "Gets information about an instance volume.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceVolume.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The volume name.\nOnly one of `name` and `volume_id` should be specified.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the volume is associated with.\n"
                    },
                    "volumeId": {
                        "type": "string",
                        "description": "The volume id.\nOnly one of `name` and `volume_id` should be specified.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the volume exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceVolume.\n",
                "properties": {
                    "fromSnapshotId": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "description": "The ID of the organization the volume is associated with.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "serverId": {
                        "type": "string"
                    },
                    "sizeInGb": {
                        "type": "integer"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": {
                        "type": "string"
                    },
                    "volumeId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "fromSnapshotId",
                    "organizationId",
                    "serverId",
                    "sizeInGb",
                    "tags",
                    "type",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getIotDevice:getIotDevice": {
            "description": "Gets information about an IOT Device.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIotDevice.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "The device ID.\nOnly one of the `name` and `device_id` should be specified.\n"
                    },
                    "hubId": {
                        "type": "string",
                        "description": "The hub ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Hub.\nOnly one of the `name` and `device_id` should be specified.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the hub exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIotDevice.\n",
                "properties": {
                    "allowInsecure": {
                        "type": "boolean"
                    },
                    "allowMultipleConnections": {
                        "type": "boolean"
                    },
                    "certificates": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getIotDeviceCertificate:getIotDeviceCertificate"
                        },
                        "type": "array"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "deviceId": {
                        "type": "string"
                    },
                    "hubId": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "isConnected": {
                        "type": "boolean"
                    },
                    "lastActivityAt": {
                        "type": "string"
                    },
                    "messageFilters": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getIotDeviceMessageFilter:getIotDeviceMessageFilter"
                        },
                        "type": "array"
                    },
                    "name": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "required": [
                    "allowInsecure",
                    "allowMultipleConnections",
                    "certificates",
                    "createdAt",
                    "description",
                    "hubId",
                    "isConnected",
                    "lastActivityAt",
                    "messageFilters",
                    "status",
                    "updatedAt",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getIotHub:getIotHub": {
            "description": "Gets information about an IOT Hub.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIotHub.\n",
                "properties": {
                    "hubId": {
                        "type": "string",
                        "description": "The Hub ID.\nOnly one of the `name` and `hub_id` should be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Hub.\nOnly one of the `name` and `hub_id` should be specified.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the hub is associated with.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the hub exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIotHub.\n",
                "properties": {
                    "connectedDeviceCount": {
                        "type": "integer"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "deviceAutoProvisioning": {
                        "type": "boolean"
                    },
                    "deviceCount": {
                        "type": "integer"
                    },
                    "disableEvents": {
                        "type": "boolean"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "endpoint": {
                        "type": "string"
                    },
                    "eventsTopicPrefix": {
                        "type": "string"
                    },
                    "hubCa": {
                        "type": "string"
                    },
                    "hubCaChallenge": {
                        "type": "string"
                    },
                    "hubId": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "mqttCa": {
                        "type": "string"
                    },
                    "mqttCaUrl": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "productPlan": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "required": [
                    "connectedDeviceCount",
                    "createdAt",
                    "deviceAutoProvisioning",
                    "deviceCount",
                    "disableEvents",
                    "enabled",
                    "endpoint",
                    "eventsTopicPrefix",
                    "hubCa",
                    "hubCaChallenge",
                    "mqttCa",
                    "mqttCaUrl",
                    "organizationId",
                    "productPlan",
                    "status",
                    "updatedAt",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getIpamIp:getIpamIp": {
            "description": "Gets information about IP addresses managed by Scaleway's IP Address Management (IPAM) service. IPAM is used for the DHCP bundled with VPC Private Networks.\n\nFor more information about IPAM, see the main [documentation](https://www.scaleway.com/en/docs/network/vpc/concepts/#ipam).\n\n## Examples\n\n### IPAM IP ID\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by ipam ip id\nconst byId = scaleway.getIpamIp({\n    ipamIpId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Get info by ipam ip id\nby_id = scaleway.get_ipam_ip(ipam_ip_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Get info by ipam ip id\n    var byId = Scaleway.GetIpamIp.Invoke(new()\n    {\n        IpamIpId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Get info by ipam ip id\n\t\t_, err := scaleway.LookupIpamIp(ctx, \u0026scaleway.LookupIpamIpArgs{\n\t\t\tIpamIpId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetIpamIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Get info by ipam ip id\n        final var byId = ScalewayFunctions.getIpamIp(GetIpamIpArgs.builder()\n            .ipamIpId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Get info by ipam ip id\n  byId:\n    fn::invoke:\n      Function: scaleway:getIpamIp\n      Arguments:\n        ipamIpId: 11111111-1111-1111-1111-111111111111\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Instance Private Network IP\n\nGet an Instance's IP on a Private Network.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\n// Connect your instance to a private network using a private nic.\nconst nic = new scaleway.InstancePrivateNic(\"nic\", {\n    serverId: server.id,\n    privateNetworkId: pn.id,\n});\n// Find server private IPv4 using private-nic mac address\nconst byMac = scaleway.getIpamIpOutput({\n    macAddress: nic.macAddress,\n    type: \"ipv4\",\n});\n// Find server private IPv4 using private-nic id\nconst byId = scaleway.getIpamIpOutput({\n    resource: {\n        id: nic.id,\n        type: \"instance_private_nic\",\n    },\n    type: \"ipv4\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\n# Connect your instance to a private network using a private nic.\nnic = scaleway.InstancePrivateNic(\"nic\",\n    server_id=server[\"id\"],\n    private_network_id=pn[\"id\"])\n# Find server private IPv4 using private-nic mac address\nby_mac = scaleway.get_ipam_ip_output(mac_address=nic.mac_address,\n    type=\"ipv4\")\n# Find server private IPv4 using private-nic id\nby_id = scaleway.get_ipam_ip_output(resource={\n        \"id\": nic.id,\n        \"type\": \"instance_private_nic\",\n    },\n    type=\"ipv4\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Connect your instance to a private network using a private nic.\n    var nic = new Scaleway.InstancePrivateNic(\"nic\", new()\n    {\n        ServerId = server.Id,\n        PrivateNetworkId = pn.Id,\n    });\n\n    // Find server private IPv4 using private-nic mac address\n    var byMac = Scaleway.GetIpamIp.Invoke(new()\n    {\n        MacAddress = nic.MacAddress,\n        Type = \"ipv4\",\n    });\n\n    // Find server private IPv4 using private-nic id\n    var byId = Scaleway.GetIpamIp.Invoke(new()\n    {\n        Resource = new Scaleway.Inputs.GetIpamIpResourceInputArgs\n        {\n            Id = nic.Id,\n            Type = \"instance_private_nic\",\n        },\n        Type = \"ipv4\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Connect your instance to a private network using a private nic.\n\t\tnic, err := scaleway.NewInstancePrivateNic(ctx, \"nic\", \u0026scaleway.InstancePrivateNicArgs{\n\t\t\tServerId:         pulumi.Any(server.Id),\n\t\t\tPrivateNetworkId: pulumi.Any(pn.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Find server private IPv4 using private-nic mac address\n\t\t_ = scaleway.LookupIpamIpOutput(ctx, scaleway.GetIpamIpOutputArgs{\n\t\t\tMacAddress: nic.MacAddress,\n\t\t\tType:       pulumi.String(\"ipv4\"),\n\t\t}, nil)\n\t\t// Find server private IPv4 using private-nic id\n\t\t_ = scaleway.LookupIpamIpOutput(ctx, scaleway.GetIpamIpOutputArgs{\n\t\t\tResource: \u0026scaleway.GetIpamIpResourceArgs{\n\t\t\t\tId:   nic.ID(),\n\t\t\t\tType: pulumi.String(\"instance_private_nic\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"ipv4\"),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstancePrivateNic;\nimport com.pulumi.scaleway.InstancePrivateNicArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetIpamIpArgs;\nimport com.pulumi.scaleway.inputs.GetIpamIpResourceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Connect your instance to a private network using a private nic.\n        var nic = new InstancePrivateNic(\"nic\", InstancePrivateNicArgs.builder()\n            .serverId(server.id())\n            .privateNetworkId(pn.id())\n            .build());\n\n        // Find server private IPv4 using private-nic mac address\n        final var byMac = ScalewayFunctions.getIpamIp(GetIpamIpArgs.builder()\n            .macAddress(nic.macAddress())\n            .type(\"ipv4\")\n            .build());\n\n        // Find server private IPv4 using private-nic id\n        final var byId = ScalewayFunctions.getIpamIp(GetIpamIpArgs.builder()\n            .resource(GetIpamIpResourceArgs.builder()\n                .id(nic.id())\n                .type(\"instance_private_nic\")\n                .build())\n            .type(\"ipv4\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Connect your instance to a private network using a private nic.\n  nic:\n    type: scaleway:InstancePrivateNic\n    properties:\n      serverId: ${server.id}\n      privateNetworkId: ${pn.id}\nvariables:\n  # Find server private IPv4 using private-nic mac address\n  byMac:\n    fn::invoke:\n      Function: scaleway:getIpamIp\n      Arguments:\n        macAddress: ${nic.macAddress}\n        type: ipv4\n  # Find server private IPv4 using private-nic id\n  byId:\n    fn::invoke:\n      Function: scaleway:getIpamIp\n      Arguments:\n        resource:\n          id: ${nic.id}\n          type: instance_private_nic\n        type: ipv4\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### RDB instance\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\n// Find the private IPv4 using resource name\nconst pn = new scaleway.VpcPrivateNetwork(\"pn\", {});\nconst main = new scaleway.DatabaseInstance(\"main\", {\n    name: \"test-rdb\",\n    nodeType: \"DB-DEV-S\",\n    engine: \"PostgreSQL-15\",\n    isHaCluster: true,\n    disableBackup: true,\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    privateNetwork: {\n        pnId: pn.id,\n    },\n});\nconst byName = scaleway.getIpamIpOutput({\n    resource: {\n        name: main.name,\n        type: \"rdb_instance\",\n    },\n    type: \"ipv4\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\n# Find the private IPv4 using resource name\npn = scaleway.VpcPrivateNetwork(\"pn\")\nmain = scaleway.DatabaseInstance(\"main\",\n    name=\"test-rdb\",\n    node_type=\"DB-DEV-S\",\n    engine=\"PostgreSQL-15\",\n    is_ha_cluster=True,\n    disable_backup=True,\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    private_network={\n        \"pn_id\": pn.id,\n    })\nby_name = scaleway.get_ipam_ip_output(resource={\n        \"name\": main.name,\n        \"type\": \"rdb_instance\",\n    },\n    type=\"ipv4\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Find the private IPv4 using resource name\n    var pn = new Scaleway.VpcPrivateNetwork(\"pn\");\n\n    var main = new Scaleway.DatabaseInstance(\"main\", new()\n    {\n        Name = \"test-rdb\",\n        NodeType = \"DB-DEV-S\",\n        Engine = \"PostgreSQL-15\",\n        IsHaCluster = true,\n        DisableBackup = true,\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        PrivateNetwork = new Scaleway.Inputs.DatabaseInstancePrivateNetworkArgs\n        {\n            PnId = pn.Id,\n        },\n    });\n\n    var byName = Scaleway.GetIpamIp.Invoke(new()\n    {\n        Resource = new Scaleway.Inputs.GetIpamIpResourceInputArgs\n        {\n            Name = main.Name,\n            Type = \"rdb_instance\",\n        },\n        Type = \"ipv4\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Find the private IPv4 using resource name\n\t\tpn, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmain, err := scaleway.NewDatabaseInstance(ctx, \"main\", \u0026scaleway.DatabaseInstanceArgs{\n\t\t\tName:          pulumi.String(\"test-rdb\"),\n\t\t\tNodeType:      pulumi.String(\"DB-DEV-S\"),\n\t\t\tEngine:        pulumi.String(\"PostgreSQL-15\"),\n\t\t\tIsHaCluster:   pulumi.Bool(true),\n\t\t\tDisableBackup: pulumi.Bool(true),\n\t\t\tUserName:      pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:      pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tPrivateNetwork: \u0026scaleway.DatabaseInstancePrivateNetworkArgs{\n\t\t\t\tPnId: pn.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.LookupIpamIpOutput(ctx, scaleway.GetIpamIpOutputArgs{\n\t\t\tResource: \u0026scaleway.GetIpamIpResourceArgs{\n\t\t\t\tName: main.Name,\n\t\t\t\tType: pulumi.String(\"rdb_instance\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"ipv4\"),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.DatabaseInstance;\nimport com.pulumi.scaleway.DatabaseInstanceArgs;\nimport com.pulumi.scaleway.inputs.DatabaseInstancePrivateNetworkArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetIpamIpArgs;\nimport com.pulumi.scaleway.inputs.GetIpamIpResourceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Find the private IPv4 using resource name\n        var pn = new VpcPrivateNetwork(\"pn\");\n\n        var main = new DatabaseInstance(\"main\", DatabaseInstanceArgs.builder()\n            .name(\"test-rdb\")\n            .nodeType(\"DB-DEV-S\")\n            .engine(\"PostgreSQL-15\")\n            .isHaCluster(true)\n            .disableBackup(true)\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .privateNetwork(DatabaseInstancePrivateNetworkArgs.builder()\n                .pnId(pn.id())\n                .build())\n            .build());\n\n        final var byName = ScalewayFunctions.getIpamIp(GetIpamIpArgs.builder()\n            .resource(GetIpamIpResourceArgs.builder()\n                .name(main.name())\n                .type(\"rdb_instance\")\n                .build())\n            .type(\"ipv4\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Find the private IPv4 using resource name\n  pn:\n    type: scaleway:VpcPrivateNetwork\n  main:\n    type: scaleway:DatabaseInstance\n    properties:\n      name: test-rdb\n      nodeType: DB-DEV-S\n      engine: PostgreSQL-15\n      isHaCluster: true\n      disableBackup: true\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n      privateNetwork:\n        pnId: ${pn.id}\nvariables:\n  byName:\n    fn::invoke:\n      Function: scaleway:getIpamIp\n      Arguments:\n        resource:\n          name: ${main.name}\n          type: rdb_instance\n        type: ipv4\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIpamIp.\n",
                "properties": {
                    "attached": {
                        "type": "boolean",
                        "description": "Defines whether to filter only for IPs which are attached to a resource. Cannot be used with `ipam_ip_id`.\n"
                    },
                    "ipamIpId": {
                        "type": "string",
                        "description": "The IPAM IP ID. Cannot be used with any other arguments.\n"
                    },
                    "macAddress": {
                        "type": "string",
                        "description": "The MAC address linked to the IP. Cannot be used with `ipam_ip_id`.\n"
                    },
                    "privateNetworkId": {
                        "type": "string",
                        "description": "The ID of the Private Network the IP belongs to. Cannot be used with `ipam_ip_id`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the Project the IP is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the IP exists.\n",
                        "willReplaceOnChanges": true
                    },
                    "resource": {
                        "$ref": "#/types/scaleway:index/getIpamIpResource:getIpamIpResource",
                        "description": "Filter by resource ID, type or name. Cannot be used with `ipam_ip_id`.\nIf specified, `type` is required, and at least one of `id` or `name` must be set.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the IP. Cannot be used with `ipam_ip_id`.\nAs datasource only returns one IP, the search with given tags must return only one result.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of IP to search for (`ipv4` or `ipv6`). Cannot be used with `ipam_ip_id`.\n"
                    },
                    "zonal": {
                        "type": "string",
                        "description": "Only IPs that are zonal, and in this zone, will be returned.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIpamIp.\n",
                "properties": {
                    "address": {
                        "description": "The IP address.\n",
                        "type": "string"
                    },
                    "addressCidr": {
                        "description": "the IP address in CIDR notation.\n",
                        "type": "string"
                    },
                    "attached": {
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "ipamIpId": {
                        "type": "string"
                    },
                    "macAddress": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "privateNetworkId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "resource": {
                        "$ref": "#/types/scaleway:index/getIpamIpResource:getIpamIpResource"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": {
                        "type": "string"
                    },
                    "zonal": {
                        "type": "string"
                    }
                },
                "required": [
                    "address",
                    "addressCidr",
                    "organizationId",
                    "projectId",
                    "region",
                    "zonal",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getIpamIps:getIpamIps": {
            "description": "Gets information about multiple IP addresses managed by Scaleway's IP Address Management (IPAM) service.\n\nFor more information about IPAM, see the main [documentation](https://www.scaleway.com/en/docs/network/vpc/concepts/#ipam).\n\n## Examples\n\n### By tag\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst byTag = scaleway.getIpamIps({\n    tags: [\"tag\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_tag = scaleway.get_ipam_ips(tags=[\"tag\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byTag = Scaleway.GetIpamIps.Invoke(new()\n    {\n        Tags = new[]\n        {\n            \"tag\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.GetIpamIps(ctx, \u0026scaleway.GetIpamIpsArgs{\n\t\t\tTags: []string{\n\t\t\t\t\"tag\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetIpamIpsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byTag = ScalewayFunctions.getIpamIps(GetIpamIpsArgs.builder()\n            .tags(\"tag\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byTag:\n    fn::invoke:\n      Function: scaleway:getIpamIps\n      Arguments:\n        tags:\n          - tag\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### By type and resource\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst vpc01 = new scaleway.Vpc(\"vpc01\", {name: \"my vpc\"});\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {\n    vpcId: vpc01.id,\n    ipv4Subnet: {\n        subnet: \"172.16.32.0/22\",\n    },\n});\nconst redis01 = new scaleway.RedisCluster(\"redis01\", {\n    name: \"my_redis_cluster\",\n    version: \"7.0.5\",\n    nodeType: \"RED1-XS\",\n    userName: \"my_initial_user\",\n    password: \"thiZ_is_v\u0026ry_s3cret\",\n    clusterSize: 3,\n    privateNetworks: [{\n        id: pn01.id,\n    }],\n});\nconst byTypeAndResource = scaleway.getIpamIpsOutput({\n    type: \"ipv4\",\n    resource: {\n        id: redis01.id,\n        type: \"redis_cluster\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\nvpc01 = scaleway.Vpc(\"vpc01\", name=\"my vpc\")\npn01 = scaleway.VpcPrivateNetwork(\"pn01\",\n    vpc_id=vpc01.id,\n    ipv4_subnet={\n        \"subnet\": \"172.16.32.0/22\",\n    })\nredis01 = scaleway.RedisCluster(\"redis01\",\n    name=\"my_redis_cluster\",\n    version=\"7.0.5\",\n    node_type=\"RED1-XS\",\n    user_name=\"my_initial_user\",\n    password=\"thiZ_is_v\u0026ry_s3cret\",\n    cluster_size=3,\n    private_networks=[{\n        \"id\": pn01.id,\n    }])\nby_type_and_resource = scaleway.get_ipam_ips_output(type=\"ipv4\",\n    resource={\n        \"id\": redis01.id,\n        \"type\": \"redis_cluster\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vpc01 = new Scaleway.Vpc(\"vpc01\", new()\n    {\n        Name = \"my vpc\",\n    });\n\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\", new()\n    {\n        VpcId = vpc01.Id,\n        Ipv4Subnet = new Scaleway.Inputs.VpcPrivateNetworkIpv4SubnetArgs\n        {\n            Subnet = \"172.16.32.0/22\",\n        },\n    });\n\n    var redis01 = new Scaleway.RedisCluster(\"redis01\", new()\n    {\n        Name = \"my_redis_cluster\",\n        Version = \"7.0.5\",\n        NodeType = \"RED1-XS\",\n        UserName = \"my_initial_user\",\n        Password = \"thiZ_is_v\u0026ry_s3cret\",\n        ClusterSize = 3,\n        PrivateNetworks = new[]\n        {\n            new Scaleway.Inputs.RedisClusterPrivateNetworkArgs\n            {\n                Id = pn01.Id,\n            },\n        },\n    });\n\n    var byTypeAndResource = Scaleway.GetIpamIps.Invoke(new()\n    {\n        Type = \"ipv4\",\n        Resource = new Scaleway.Inputs.GetIpamIpsResourceInputArgs\n        {\n            Id = redis01.Id,\n            Type = \"redis_cluster\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tvpc01, err := scaleway.NewVpc(ctx, \"vpc01\", \u0026scaleway.VpcArgs{\n\t\t\tName: pulumi.String(\"my vpc\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tVpcId: vpc01.ID(),\n\t\t\tIpv4Subnet: \u0026scaleway.VpcPrivateNetworkIpv4SubnetArgs{\n\t\t\t\tSubnet: pulumi.String(\"172.16.32.0/22\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tredis01, err := scaleway.NewRedisCluster(ctx, \"redis01\", \u0026scaleway.RedisClusterArgs{\n\t\t\tName:        pulumi.String(\"my_redis_cluster\"),\n\t\t\tVersion:     pulumi.String(\"7.0.5\"),\n\t\t\tNodeType:    pulumi.String(\"RED1-XS\"),\n\t\t\tUserName:    pulumi.String(\"my_initial_user\"),\n\t\t\tPassword:    pulumi.String(\"thiZ_is_v\u0026ry_s3cret\"),\n\t\t\tClusterSize: pulumi.Int(3),\n\t\t\tPrivateNetworks: scaleway.RedisClusterPrivateNetworkArray{\n\t\t\t\t\u0026scaleway.RedisClusterPrivateNetworkArgs{\n\t\t\t\t\tId: pn01.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.GetIpamIpsOutput(ctx, scaleway.GetIpamIpsOutputArgs{\n\t\t\tType: pulumi.String(\"ipv4\"),\n\t\t\tResource: \u0026scaleway.GetIpamIpsResourceArgs{\n\t\t\t\tId:   redis01.ID(),\n\t\t\t\tType: pulumi.String(\"redis_cluster\"),\n\t\t\t},\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Vpc;\nimport com.pulumi.scaleway.VpcArgs;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.inputs.VpcPrivateNetworkIpv4SubnetArgs;\nimport com.pulumi.scaleway.RedisCluster;\nimport com.pulumi.scaleway.RedisClusterArgs;\nimport com.pulumi.scaleway.inputs.RedisClusterPrivateNetworkArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetIpamIpsArgs;\nimport com.pulumi.scaleway.inputs.GetIpamIpsResourceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vpc01 = new Vpc(\"vpc01\", VpcArgs.builder()\n            .name(\"my vpc\")\n            .build());\n\n        var pn01 = new VpcPrivateNetwork(\"pn01\", VpcPrivateNetworkArgs.builder()\n            .vpcId(vpc01.id())\n            .ipv4Subnet(VpcPrivateNetworkIpv4SubnetArgs.builder()\n                .subnet(\"172.16.32.0/22\")\n                .build())\n            .build());\n\n        var redis01 = new RedisCluster(\"redis01\", RedisClusterArgs.builder()\n            .name(\"my_redis_cluster\")\n            .version(\"7.0.5\")\n            .nodeType(\"RED1-XS\")\n            .userName(\"my_initial_user\")\n            .password(\"thiZ_is_v\u0026ry_s3cret\")\n            .clusterSize(3)\n            .privateNetworks(RedisClusterPrivateNetworkArgs.builder()\n                .id(pn01.id())\n                .build())\n            .build());\n\n        final var byTypeAndResource = ScalewayFunctions.getIpamIps(GetIpamIpsArgs.builder()\n            .type(\"ipv4\")\n            .resource(GetIpamIpsResourceArgs.builder()\n                .id(redis01.id())\n                .type(\"redis_cluster\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vpc01:\n    type: scaleway:Vpc\n    properties:\n      name: my vpc\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      vpcId: ${vpc01.id}\n      ipv4Subnet:\n        subnet: 172.16.32.0/22\n  redis01:\n    type: scaleway:RedisCluster\n    properties:\n      name: my_redis_cluster\n      version: 7.0.5\n      nodeType: RED1-XS\n      userName: my_initial_user\n      password: thiZ_is_v\u0026ry_s3cret\n      clusterSize: 3\n      privateNetworks:\n        - id: ${pn01.id}\nvariables:\n  byTypeAndResource:\n    fn::invoke:\n      Function: scaleway:getIpamIps\n      Arguments:\n        type: ipv4\n        resource:\n          id: ${redis01.id}\n          type: redis_cluster\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIpamIps.\n",
                "properties": {
                    "attached": {
                        "type": "boolean",
                        "description": "Defines whether to filter only for IPs which are attached to a resource.\n"
                    },
                    "macAddress": {
                        "type": "string",
                        "description": "The linked MAC address to filter for.\n"
                    },
                    "privateNetworkId": {
                        "type": "string",
                        "description": "The ID of the Private Network to filter for.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Project to filter for.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to filter for.\n",
                        "willReplaceOnChanges": true
                    },
                    "resource": {
                        "$ref": "#/types/scaleway:index/getIpamIpsResource:getIpamIpsResource",
                        "description": "Filter for a resource attached to the IP, using resource ID, type or name.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IP tags to filter for.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of IP to filter for (`ipv4` or `ipv6`).\n"
                    },
                    "zonal": {
                        "type": "string",
                        "description": "Only IPs that are zonal, and in this zone, will be returned.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIpamIps.\n",
                "properties": {
                    "attached": {
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "ips": {
                        "description": "List of found IPs.\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getIpamIpsIp:getIpamIpsIp"
                        },
                        "type": "array"
                    },
                    "macAddress": {
                        "description": "The associated MAC address.\n",
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "privateNetworkId": {
                        "type": "string"
                    },
                    "projectId": {
                        "description": "The ID of the Project the resource is associated with.\n",
                        "type": "string"
                    },
                    "region": {
                        "description": "The region of the IP.\n",
                        "type": "string"
                    },
                    "resource": {
                        "$ref": "#/types/scaleway:index/getIpamIpsResource:getIpamIpsResource",
                        "description": "The list of public IPs attached to the resource.\n"
                    },
                    "tags": {
                        "description": "The tags associated with the IP.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": {
                        "description": "The type of resource.\n",
                        "type": "string"
                    },
                    "zonal": {
                        "type": "string"
                    }
                },
                "required": [
                    "ips",
                    "organizationId",
                    "projectId",
                    "region",
                    "zonal",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getK8sVersion:getK8sVersion": {
            "description": "Gets information about a Kubernetes version.\nFor more information, see [the documentation](https://developers.scaleway.com/en/products/k8s/api).\n\nYou can also use the [scaleway-cli](https://github.com/scaleway/scaleway-cli) with `scw k8s version list` to list all available versions.\n\n## Example Usage\n\n### Use the latest version\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst latest = scaleway.getK8sVersion({\n    name: \"latest\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nlatest = scaleway.get_k8s_version(name=\"latest\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var latest = Scaleway.GetK8sVersion.Invoke(new()\n    {\n        Name = \"latest\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.GetK8sVersion(ctx, \u0026scaleway.GetK8sVersionArgs{\n\t\t\tName: \"latest\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetK8sVersionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var latest = ScalewayFunctions.getK8sVersion(GetK8sVersionArgs.builder()\n            .name(\"latest\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  latest:\n    fn::invoke:\n      Function: scaleway:getK8sVersion\n      Arguments:\n        name: latest\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Use a specific version\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst byName = scaleway.getK8sVersion({\n    name: \"1.26.0\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nby_name = scaleway.get_k8s_version(name=\"1.26.0\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var byName = Scaleway.GetK8sVersion.Invoke(new()\n    {\n        Name = \"1.26.0\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.GetK8sVersion(ctx, \u0026scaleway.GetK8sVersionArgs{\n\t\t\tName: \"1.26.0\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetK8sVersionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byName = ScalewayFunctions.getK8sVersion(GetK8sVersionArgs.builder()\n            .name(\"1.26.0\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byName:\n    fn::invoke:\n      Function: scaleway:getK8sVersion\n      Arguments:\n        name: 1.26.0\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getK8sVersion.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Kubernetes version.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the version exists.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getK8sVersion.\n",
                "properties": {
                    "availableCnis": {
                        "description": "The list of supported Container Network Interface (CNI) plugins for this version.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "availableContainerRuntimes": {
                        "description": "The list of supported container runtimes for this version.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "availableFeatureGates": {
                        "description": "The list of supported feature gates for this version.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "required": [
                    "availableCnis",
                    "availableContainerRuntimes",
                    "availableFeatureGates",
                    "name",
                    "region",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getKubernetesCluster:getKubernetesCluster": {
            "description": "Gets information about a Kubernetes Cluster.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getKubernetesCluster.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster ID. Only one of `name` and `cluster_id` should be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The cluster name. Only one of `name` and `cluster_id` should be specified.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the cluster is associated with.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the cluster exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getKubernetesCluster.\n",
                "properties": {
                    "admissionPlugins": {
                        "description": "The list of [admission plugins](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/) enabled on the cluster.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "apiserverCertSans": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "apiserverUrl": {
                        "description": "The URL of the Kubernetes API server.\n",
                        "type": "string"
                    },
                    "autoUpgrades": {
                        "description": "The auto upgrade configuration.\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getKubernetesClusterAutoUpgrade:getKubernetesClusterAutoUpgrade"
                        },
                        "type": "array"
                    },
                    "autoscalerConfigs": {
                        "description": "The configuration options for the [Kubernetes cluster autoscaler](https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler).\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getKubernetesClusterAutoscalerConfig:getKubernetesClusterAutoscalerConfig"
                        },
                        "type": "array"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "cni": {
                        "description": "The Container Network Interface (CNI) for the Kubernetes cluster.\n",
                        "type": "string"
                    },
                    "createdAt": {
                        "description": "The creation date of the cluster.\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "A description for the Kubernetes cluster.\n",
                        "type": "string"
                    },
                    "featureGates": {
                        "description": "The list of [feature gates](https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/) enabled on the cluster.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "kubeconfigs": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getKubernetesClusterKubeconfig:getKubernetesClusterKubeconfig"
                        },
                        "type": "array"
                    },
                    "name": {
                        "type": "string"
                    },
                    "openIdConnectConfigs": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getKubernetesClusterOpenIdConnectConfig:getKubernetesClusterOpenIdConnectConfig"
                        },
                        "type": "array"
                    },
                    "organizationId": {
                        "description": "The ID of the organization the cluster is associated with.\n",
                        "type": "string"
                    },
                    "privateNetworkId": {
                        "description": "The ID of the private network of the cluster.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "description": "The region in which the cluster is.\n",
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the Kubernetes cluster.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The tags associated with the Kubernetes cluster.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": {
                        "description": "The type of the Kubernetes cluster.\n",
                        "type": "string"
                    },
                    "updatedAt": {
                        "description": "The last update date of the cluster.\n",
                        "type": "string"
                    },
                    "upgradeAvailable": {
                        "description": "True if a newer Kubernetes version is available.\n",
                        "type": "boolean"
                    },
                    "version": {
                        "description": "The version of the Kubernetes cluster.\n",
                        "type": "string"
                    },
                    "wildcardDns": {
                        "description": "The DNS wildcard that points to all ready nodes.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "admissionPlugins",
                    "apiserverCertSans",
                    "apiserverUrl",
                    "autoUpgrades",
                    "autoscalerConfigs",
                    "cni",
                    "createdAt",
                    "description",
                    "featureGates",
                    "kubeconfigs",
                    "openIdConnectConfigs",
                    "organizationId",
                    "privateNetworkId",
                    "status",
                    "tags",
                    "type",
                    "updatedAt",
                    "upgradeAvailable",
                    "version",
                    "wildcardDns",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getKubernetesNodePool:getKubernetesNodePool": {
            "description": "Gets information about a Kubernetes Cluster's Pool.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getKubernetesNodePool.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster ID. Required when `name` is set.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The pool name. Only one of `name` and `pool_id` should be specified. `cluster_id` should be specified with `name`.\n"
                    },
                    "poolId": {
                        "type": "string",
                        "description": "The pool's ID. Only one of `name` and `pool_id` should be specified.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the pool exists.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the pool.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getKubernetesNodePool.\n",
                "properties": {
                    "autohealing": {
                        "description": "True if the autohealing feature is enabled for this pool.\n",
                        "type": "boolean"
                    },
                    "autoscaling": {
                        "description": "True if the autoscaling feature is enabled for this pool.\n",
                        "type": "boolean"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "containerRuntime": {
                        "description": "The container runtime of the pool.\n",
                        "type": "string"
                    },
                    "createdAt": {
                        "description": "The creation date of the pool.\n",
                        "type": "string"
                    },
                    "currentSize": {
                        "type": "integer"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "kubeletArgs": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "maxSize": {
                        "description": "The maximum size of the pool, used by the autoscaling feature.\n",
                        "type": "integer"
                    },
                    "minSize": {
                        "description": "The minimum size of the pool, used by the autoscaling feature.\n",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the node.\n",
                        "type": "string"
                    },
                    "nodeType": {
                        "description": "The commercial type of the pool instances.\n",
                        "type": "string"
                    },
                    "nodes": {
                        "description": "(List of) The nodes in the default pool.\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getKubernetesNodePoolNode:getKubernetesNodePoolNode"
                        },
                        "type": "array"
                    },
                    "placementGroupId": {
                        "description": "[placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool are attached to.\n",
                        "type": "string"
                    },
                    "poolId": {
                        "type": "string"
                    },
                    "publicIpDisabled": {
                        "type": "boolean"
                    },
                    "region": {
                        "type": "string"
                    },
                    "rootVolumeSizeInGb": {
                        "type": "integer"
                    },
                    "rootVolumeType": {
                        "type": "string"
                    },
                    "size": {
                        "description": "The size of the pool.\n",
                        "type": "integer"
                    },
                    "status": {
                        "description": "The status of the node.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The tags associated with the pool.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "updatedAt": {
                        "description": "The last update date of the pool.\n",
                        "type": "string"
                    },
                    "upgradePolicies": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getKubernetesNodePoolUpgradePolicy:getKubernetesNodePoolUpgradePolicy"
                        },
                        "type": "array"
                    },
                    "version": {
                        "description": "The version of the pool.\n",
                        "type": "string"
                    },
                    "waitForPoolReady": {
                        "type": "boolean"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "autohealing",
                    "autoscaling",
                    "containerRuntime",
                    "createdAt",
                    "currentSize",
                    "kubeletArgs",
                    "maxSize",
                    "minSize",
                    "nodeType",
                    "nodes",
                    "placementGroupId",
                    "publicIpDisabled",
                    "rootVolumeSizeInGb",
                    "rootVolumeType",
                    "status",
                    "tags",
                    "updatedAt",
                    "upgradePolicies",
                    "version",
                    "waitForPoolReady",
                    "zone",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getLbAcls:getLbAcls": {
            "description": "Gets information about multiple Load Balancer ACLs.\n\nFor more information, see the [main documentation](https://www.scaleway.com/en/docs/network/load-balancer/reference-content/acls/) or [API reference](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-acls-get-an-acl).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Find acls that share the same frontend ID\nconst byFrontID = scaleway.getLbAcls({\n    frontendId: frt01.id,\n});\n// Find acls by frontend ID and name\nconst byFrontIDAndName = scaleway.getLbAcls({\n    frontendId: frt01.id,\n    name: \"tf-acls-datasource\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Find acls that share the same frontend ID\nby_front_id = scaleway.get_lb_acls(frontend_id=frt01[\"id\"])\n# Find acls by frontend ID and name\nby_front_id_and_name = scaleway.get_lb_acls(frontend_id=frt01[\"id\"],\n    name=\"tf-acls-datasource\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Find acls that share the same frontend ID\n    var byFrontID = Scaleway.GetLbAcls.Invoke(new()\n    {\n        FrontendId = frt01.Id,\n    });\n\n    // Find acls by frontend ID and name\n    var byFrontIDAndName = Scaleway.GetLbAcls.Invoke(new()\n    {\n        FrontendId = frt01.Id,\n        Name = \"tf-acls-datasource\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Find acls that share the same frontend ID\n\t\t_, err := scaleway.GetLbAcls(ctx, \u0026scaleway.GetLbAclsArgs{\n\t\t\tFrontendId: frt01.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Find acls by frontend ID and name\n\t\t_, err = scaleway.GetLbAcls(ctx, \u0026scaleway.GetLbAclsArgs{\n\t\t\tFrontendId: frt01.Id,\n\t\t\tName:       pulumi.StringRef(\"tf-acls-datasource\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetLbAclsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Find acls that share the same frontend ID\n        final var byFrontID = ScalewayFunctions.getLbAcls(GetLbAclsArgs.builder()\n            .frontendId(frt01.id())\n            .build());\n\n        // Find acls by frontend ID and name\n        final var byFrontIDAndName = ScalewayFunctions.getLbAcls(GetLbAclsArgs.builder()\n            .frontendId(frt01.id())\n            .name(\"tf-acls-datasource\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Find acls that share the same frontend ID\n  byFrontID:\n    fn::invoke:\n      Function: scaleway:getLbAcls\n      Arguments:\n        frontendId: ${frt01.id}\n  # Find acls by frontend ID and name\n  byFrontIDAndName:\n    fn::invoke:\n      Function: scaleway:getLbAcls\n      Arguments:\n        frontendId: ${frt01.id}\n        name: tf-acls-datasource\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLbAcls.\n",
                "properties": {
                    "frontendId": {
                        "type": "string",
                        "description": "The frontend ID this ACL is attached to. ACLs with a matching frontend ID are listed.\n\u003e **Important:** LB frontend IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The ACL name to filter for. ACLs with a matching name are listed.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the ACLs exist.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "frontendId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLbAcls.\n",
                "properties": {
                    "acls": {
                        "description": "List of retrieved ACLs\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getLbAclsAcl:getLbAclsAcl"
                        },
                        "type": "array"
                    },
                    "frontendId": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "acls",
                    "frontendId",
                    "organizationId",
                    "projectId",
                    "zone",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getLbBackend:getLbBackend": {
            "description": "Get information about Scaleway Load Balancer backends.\n\nFor more information, see the [main documentation](https://www.scaleway.com/en/docs/network/load-balancer/reference-content/configuring-backends/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-backends).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.LoadbalancerIp(\"main\", {});\nconst mainLoadbalancer = new scaleway.Loadbalancer(\"main\", {\n    ipId: main.id,\n    name: \"data-test-lb-backend\",\n    type: \"LB-S\",\n});\nconst mainLoadbalancerBackend = new scaleway.LoadbalancerBackend(\"main\", {\n    lbId: mainLoadbalancer.id,\n    name: \"backend01\",\n    forwardProtocol: \"http\",\n    forwardPort: 80,\n});\nconst byID = scaleway.getLbBackendOutput({\n    backendId: mainLoadbalancerBackend.id,\n});\nconst byName = scaleway.getLbBackendOutput({\n    name: mainLoadbalancerBackend.name,\n    lbId: mainLoadbalancer.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.LoadbalancerIp(\"main\")\nmain_loadbalancer = scaleway.Loadbalancer(\"main\",\n    ip_id=main.id,\n    name=\"data-test-lb-backend\",\n    type=\"LB-S\")\nmain_loadbalancer_backend = scaleway.LoadbalancerBackend(\"main\",\n    lb_id=main_loadbalancer.id,\n    name=\"backend01\",\n    forward_protocol=\"http\",\n    forward_port=80)\nby_id = scaleway.get_lb_backend_output(backend_id=main_loadbalancer_backend.id)\nby_name = scaleway.get_lb_backend_output(name=main_loadbalancer_backend.name,\n    lb_id=main_loadbalancer.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.LoadbalancerIp(\"main\");\n\n    var mainLoadbalancer = new Scaleway.Loadbalancer(\"main\", new()\n    {\n        IpId = main.Id,\n        Name = \"data-test-lb-backend\",\n        Type = \"LB-S\",\n    });\n\n    var mainLoadbalancerBackend = new Scaleway.LoadbalancerBackend(\"main\", new()\n    {\n        LbId = mainLoadbalancer.Id,\n        Name = \"backend01\",\n        ForwardProtocol = \"http\",\n        ForwardPort = 80,\n    });\n\n    var byID = Scaleway.GetLbBackend.Invoke(new()\n    {\n        BackendId = mainLoadbalancerBackend.Id,\n    });\n\n    var byName = Scaleway.GetLbBackend.Invoke(new()\n    {\n        Name = mainLoadbalancerBackend.Name,\n        LbId = mainLoadbalancer.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewLoadbalancerIp(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainLoadbalancer, err := scaleway.NewLoadbalancer(ctx, \"main\", \u0026scaleway.LoadbalancerArgs{\n\t\t\tIpId: main.ID(),\n\t\t\tName: pulumi.String(\"data-test-lb-backend\"),\n\t\t\tType: pulumi.String(\"LB-S\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainLoadbalancerBackend, err := scaleway.NewLoadbalancerBackend(ctx, \"main\", \u0026scaleway.LoadbalancerBackendArgs{\n\t\t\tLbId:            mainLoadbalancer.ID(),\n\t\t\tName:            pulumi.String(\"backend01\"),\n\t\t\tForwardProtocol: pulumi.String(\"http\"),\n\t\t\tForwardPort:     pulumi.Int(80),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.GetLbBackendOutput(ctx, scaleway.GetLbBackendOutputArgs{\n\t\t\tBackendId: mainLoadbalancerBackend.ID(),\n\t\t}, nil)\n\t\t_ = scaleway.GetLbBackendOutput(ctx, scaleway.GetLbBackendOutputArgs{\n\t\t\tName: mainLoadbalancerBackend.Name,\n\t\t\tLbId: mainLoadbalancer.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LoadbalancerIp;\nimport com.pulumi.scaleway.Loadbalancer;\nimport com.pulumi.scaleway.LoadbalancerArgs;\nimport com.pulumi.scaleway.LoadbalancerBackend;\nimport com.pulumi.scaleway.LoadbalancerBackendArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetLbBackendArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new LoadbalancerIp(\"main\");\n\n        var mainLoadbalancer = new Loadbalancer(\"mainLoadbalancer\", LoadbalancerArgs.builder()\n            .ipId(main.id())\n            .name(\"data-test-lb-backend\")\n            .type(\"LB-S\")\n            .build());\n\n        var mainLoadbalancerBackend = new LoadbalancerBackend(\"mainLoadbalancerBackend\", LoadbalancerBackendArgs.builder()\n            .lbId(mainLoadbalancer.id())\n            .name(\"backend01\")\n            .forwardProtocol(\"http\")\n            .forwardPort(\"80\")\n            .build());\n\n        final var byID = ScalewayFunctions.getLbBackend(GetLbBackendArgs.builder()\n            .backendId(mainLoadbalancerBackend.id())\n            .build());\n\n        final var byName = ScalewayFunctions.getLbBackend(GetLbBackendArgs.builder()\n            .name(mainLoadbalancerBackend.name())\n            .lbId(mainLoadbalancer.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:LoadbalancerIp\n  mainLoadbalancer:\n    type: scaleway:Loadbalancer\n    name: main\n    properties:\n      ipId: ${main.id}\n      name: data-test-lb-backend\n      type: LB-S\n  mainLoadbalancerBackend:\n    type: scaleway:LoadbalancerBackend\n    name: main\n    properties:\n      lbId: ${mainLoadbalancer.id}\n      name: backend01\n      forwardProtocol: http\n      forwardPort: '80'\nvariables:\n  byID:\n    fn::invoke:\n      Function: scaleway:getLbBackend\n      Arguments:\n        backendId: ${mainLoadbalancerBackend.id}\n  byName:\n    fn::invoke:\n      Function: scaleway:getLbBackend\n      Arguments:\n        name: ${mainLoadbalancerBackend.name}\n        lbId: ${mainLoadbalancer.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLbBackend.\n",
                "properties": {
                    "backendId": {
                        "type": "string",
                        "description": "The backend ID.\n- Only one of `name` and `backend_id` should be specified.\n"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "Load Balancer ID this backend is attached to.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the backend.\n- When using `name` you should specify the `lb-id`\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLbBackend.\n",
                "properties": {
                    "backendId": {
                        "type": "string"
                    },
                    "failoverHost": {
                        "type": "string"
                    },
                    "forwardPort": {
                        "type": "integer"
                    },
                    "forwardPortAlgorithm": {
                        "type": "string"
                    },
                    "forwardProtocol": {
                        "type": "string"
                    },
                    "healthCheckDelay": {
                        "type": "string"
                    },
                    "healthCheckHttp": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getLbBackendHealthCheckHttp:getLbBackendHealthCheckHttp"
                        },
                        "type": "array"
                    },
                    "healthCheckHttps": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getLbBackendHealthCheckHttp:getLbBackendHealthCheckHttp"
                        },
                        "type": "array"
                    },
                    "healthCheckMaxRetries": {
                        "type": "integer"
                    },
                    "healthCheckPort": {
                        "type": "integer"
                    },
                    "healthCheckSendProxy": {
                        "type": "boolean"
                    },
                    "healthCheckTcps": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getLbBackendHealthCheckTcp:getLbBackendHealthCheckTcp"
                        },
                        "type": "array"
                    },
                    "healthCheckTimeout": {
                        "type": "string"
                    },
                    "healthCheckTransientDelay": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "ignoreSslServerVerify": {
                        "type": "boolean"
                    },
                    "lbId": {
                        "type": "string"
                    },
                    "maxConnections": {
                        "type": "integer"
                    },
                    "maxRetries": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "onMarkedDownAction": {
                        "type": "string"
                    },
                    "proxyProtocol": {
                        "type": "string"
                    },
                    "redispatchAttemptCount": {
                        "type": "integer"
                    },
                    "sendProxyV2": {
                        "type": "boolean"
                    },
                    "serverIps": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "sslBridging": {
                        "type": "boolean"
                    },
                    "stickySessions": {
                        "type": "string"
                    },
                    "stickySessionsCookieName": {
                        "type": "string"
                    },
                    "timeoutConnect": {
                        "type": "string"
                    },
                    "timeoutQueue": {
                        "type": "string"
                    },
                    "timeoutServer": {
                        "type": "string"
                    },
                    "timeoutTunnel": {
                        "type": "string"
                    }
                },
                "required": [
                    "failoverHost",
                    "forwardPort",
                    "forwardPortAlgorithm",
                    "forwardProtocol",
                    "healthCheckDelay",
                    "healthCheckHttp",
                    "healthCheckHttps",
                    "healthCheckMaxRetries",
                    "healthCheckPort",
                    "healthCheckSendProxy",
                    "healthCheckTcps",
                    "healthCheckTimeout",
                    "healthCheckTransientDelay",
                    "ignoreSslServerVerify",
                    "maxConnections",
                    "maxRetries",
                    "onMarkedDownAction",
                    "proxyProtocol",
                    "redispatchAttemptCount",
                    "sendProxyV2",
                    "serverIps",
                    "sslBridging",
                    "stickySessions",
                    "stickySessionsCookieName",
                    "timeoutConnect",
                    "timeoutQueue",
                    "timeoutServer",
                    "timeoutTunnel",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getLbBackends:getLbBackends": {
            "description": "Gets information about multiple Load Balancer Backends.\n\nFor more information, see the [main documentation](https://www.scaleway.com/en/docs/network/load-balancer/reference-content/configuring-backends/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-backends).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Find backends that share the same LB ID\nconst byLBID = scaleway.getLbBackends({\n    lbId: lb01.id,\n});\n// Find backends by LB ID and name\nconst byLBIDAndName = scaleway.getLbBackends({\n    lbId: lb01.id,\n    name: \"tf-backend-datasource\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Find backends that share the same LB ID\nby_lbid = scaleway.get_lb_backends(lb_id=lb01[\"id\"])\n# Find backends by LB ID and name\nby_lbid_and_name = scaleway.get_lb_backends(lb_id=lb01[\"id\"],\n    name=\"tf-backend-datasource\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Find backends that share the same LB ID\n    var byLBID = Scaleway.GetLbBackends.Invoke(new()\n    {\n        LbId = lb01.Id,\n    });\n\n    // Find backends by LB ID and name\n    var byLBIDAndName = Scaleway.GetLbBackends.Invoke(new()\n    {\n        LbId = lb01.Id,\n        Name = \"tf-backend-datasource\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Find backends that share the same LB ID\n\t\t_, err := scaleway.GetLbBackends(ctx, \u0026scaleway.GetLbBackendsArgs{\n\t\t\tLbId: lb01.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Find backends by LB ID and name\n\t\t_, err = scaleway.GetLbBackends(ctx, \u0026scaleway.GetLbBackendsArgs{\n\t\t\tLbId: lb01.Id,\n\t\t\tName: pulumi.StringRef(\"tf-backend-datasource\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetLbBackendsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Find backends that share the same LB ID\n        final var byLBID = ScalewayFunctions.getLbBackends(GetLbBackendsArgs.builder()\n            .lbId(lb01.id())\n            .build());\n\n        // Find backends by LB ID and name\n        final var byLBIDAndName = ScalewayFunctions.getLbBackends(GetLbBackendsArgs.builder()\n            .lbId(lb01.id())\n            .name(\"tf-backend-datasource\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Find backends that share the same LB ID\n  byLBID:\n    fn::invoke:\n      Function: scaleway:getLbBackends\n      Arguments:\n        lbId: ${lb01.id}\n  # Find backends by LB ID and name\n  byLBIDAndName:\n    fn::invoke:\n      Function: scaleway:getLbBackends\n      Arguments:\n        lbId: ${lb01.id}\n        name: tf-backend-datasource\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLbBackends.\n",
                "properties": {
                    "lbId": {
                        "type": "string",
                        "description": "The Load Balancer ID this backend is attached to. Backends with a matching ID are listed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The backend name to filter for. Backends with a matching name are listed.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which backends exist.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "lbId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLbBackends.\n",
                "properties": {
                    "backends": {
                        "description": "List of retrieved backends\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getLbBackendsBackend:getLbBackendsBackend"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "lbId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "backends",
                    "lbId",
                    "organizationId",
                    "projectId",
                    "zone",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getLbFrontend:getLbFrontend": {
            "description": "Get information about Scaleway Load Balancer frontends.\n\nFor more information, see the [main documentation](https://www.scaleway.com/en/docs/network/load-balancer/reference-content/configuring-frontends/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-frontends).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst ip01 = new scaleway.LoadbalancerIp(\"ip01\", {});\nconst lb01 = new scaleway.Loadbalancer(\"lb01\", {\n    ipId: ip01.id,\n    name: \"test-lb\",\n    type: \"lb-s\",\n});\nconst bkd01 = new scaleway.LoadbalancerBackend(\"bkd01\", {\n    lbId: lb01.id,\n    forwardProtocol: \"tcp\",\n    forwardPort: 80,\n    proxyProtocol: \"none\",\n});\nconst frt01 = new scaleway.LoadbalancerFrontend(\"frt01\", {\n    lbId: lb01.id,\n    backendId: bkd01.id,\n    inboundPort: 80,\n});\nconst byID = scaleway.getLbFrontendOutput({\n    frontendId: frt01.id,\n});\nconst byName = scaleway.getLbFrontendOutput({\n    name: frt01.name,\n    lbId: lb01.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\nip01 = scaleway.LoadbalancerIp(\"ip01\")\nlb01 = scaleway.Loadbalancer(\"lb01\",\n    ip_id=ip01.id,\n    name=\"test-lb\",\n    type=\"lb-s\")\nbkd01 = scaleway.LoadbalancerBackend(\"bkd01\",\n    lb_id=lb01.id,\n    forward_protocol=\"tcp\",\n    forward_port=80,\n    proxy_protocol=\"none\")\nfrt01 = scaleway.LoadbalancerFrontend(\"frt01\",\n    lb_id=lb01.id,\n    backend_id=bkd01.id,\n    inbound_port=80)\nby_id = scaleway.get_lb_frontend_output(frontend_id=frt01.id)\nby_name = scaleway.get_lb_frontend_output(name=frt01.name,\n    lb_id=lb01.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ip01 = new Scaleway.LoadbalancerIp(\"ip01\");\n\n    var lb01 = new Scaleway.Loadbalancer(\"lb01\", new()\n    {\n        IpId = ip01.Id,\n        Name = \"test-lb\",\n        Type = \"lb-s\",\n    });\n\n    var bkd01 = new Scaleway.LoadbalancerBackend(\"bkd01\", new()\n    {\n        LbId = lb01.Id,\n        ForwardProtocol = \"tcp\",\n        ForwardPort = 80,\n        ProxyProtocol = \"none\",\n    });\n\n    var frt01 = new Scaleway.LoadbalancerFrontend(\"frt01\", new()\n    {\n        LbId = lb01.Id,\n        BackendId = bkd01.Id,\n        InboundPort = 80,\n    });\n\n    var byID = Scaleway.GetLbFrontend.Invoke(new()\n    {\n        FrontendId = frt01.Id,\n    });\n\n    var byName = Scaleway.GetLbFrontend.Invoke(new()\n    {\n        Name = frt01.Name,\n        LbId = lb01.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tip01, err := scaleway.NewLoadbalancerIp(ctx, \"ip01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlb01, err := scaleway.NewLoadbalancer(ctx, \"lb01\", \u0026scaleway.LoadbalancerArgs{\n\t\t\tIpId: ip01.ID(),\n\t\t\tName: pulumi.String(\"test-lb\"),\n\t\t\tType: pulumi.String(\"lb-s\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbkd01, err := scaleway.NewLoadbalancerBackend(ctx, \"bkd01\", \u0026scaleway.LoadbalancerBackendArgs{\n\t\t\tLbId:            lb01.ID(),\n\t\t\tForwardProtocol: pulumi.String(\"tcp\"),\n\t\t\tForwardPort:     pulumi.Int(80),\n\t\t\tProxyProtocol:   pulumi.String(\"none\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfrt01, err := scaleway.NewLoadbalancerFrontend(ctx, \"frt01\", \u0026scaleway.LoadbalancerFrontendArgs{\n\t\t\tLbId:        lb01.ID(),\n\t\t\tBackendId:   bkd01.ID(),\n\t\t\tInboundPort: pulumi.Int(80),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.GetLbFrontendOutput(ctx, scaleway.GetLbFrontendOutputArgs{\n\t\t\tFrontendId: frt01.ID(),\n\t\t}, nil)\n\t\t_ = scaleway.GetLbFrontendOutput(ctx, scaleway.GetLbFrontendOutputArgs{\n\t\t\tName: frt01.Name,\n\t\t\tLbId: lb01.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LoadbalancerIp;\nimport com.pulumi.scaleway.Loadbalancer;\nimport com.pulumi.scaleway.LoadbalancerArgs;\nimport com.pulumi.scaleway.LoadbalancerBackend;\nimport com.pulumi.scaleway.LoadbalancerBackendArgs;\nimport com.pulumi.scaleway.LoadbalancerFrontend;\nimport com.pulumi.scaleway.LoadbalancerFrontendArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetLbFrontendArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ip01 = new LoadbalancerIp(\"ip01\");\n\n        var lb01 = new Loadbalancer(\"lb01\", LoadbalancerArgs.builder()\n            .ipId(ip01.id())\n            .name(\"test-lb\")\n            .type(\"lb-s\")\n            .build());\n\n        var bkd01 = new LoadbalancerBackend(\"bkd01\", LoadbalancerBackendArgs.builder()\n            .lbId(lb01.id())\n            .forwardProtocol(\"tcp\")\n            .forwardPort(80)\n            .proxyProtocol(\"none\")\n            .build());\n\n        var frt01 = new LoadbalancerFrontend(\"frt01\", LoadbalancerFrontendArgs.builder()\n            .lbId(lb01.id())\n            .backendId(bkd01.id())\n            .inboundPort(80)\n            .build());\n\n        final var byID = ScalewayFunctions.getLbFrontend(GetLbFrontendArgs.builder()\n            .frontendId(frt01.id())\n            .build());\n\n        final var byName = ScalewayFunctions.getLbFrontend(GetLbFrontendArgs.builder()\n            .name(frt01.name())\n            .lbId(lb01.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ip01:\n    type: scaleway:LoadbalancerIp\n  lb01:\n    type: scaleway:Loadbalancer\n    properties:\n      ipId: ${ip01.id}\n      name: test-lb\n      type: lb-s\n  bkd01:\n    type: scaleway:LoadbalancerBackend\n    properties:\n      lbId: ${lb01.id}\n      forwardProtocol: tcp\n      forwardPort: 80\n      proxyProtocol: none\n  frt01:\n    type: scaleway:LoadbalancerFrontend\n    properties:\n      lbId: ${lb01.id}\n      backendId: ${bkd01.id}\n      inboundPort: 80\nvariables:\n  byID:\n    fn::invoke:\n      Function: scaleway:getLbFrontend\n      Arguments:\n        frontendId: ${frt01.id}\n  byName:\n    fn::invoke:\n      Function: scaleway:getLbFrontend\n      Arguments:\n        name: ${frt01.name}\n        lbId: ${lb01.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLbFrontend.\n",
                "properties": {
                    "frontendId": {
                        "type": "string",
                        "description": "The frontend ID.\n- Only one of `name` and `frontend_id` should be specified.\n"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The Load Balancer ID this frontend is attached to.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the frontend.\n- When using the `name` you should specify the `lb-id`\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLbFrontend.\n",
                "properties": {
                    "acls": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getLbFrontendAcl:getLbFrontendAcl"
                        },
                        "type": "array"
                    },
                    "backendId": {
                        "type": "string"
                    },
                    "certificateId": {
                        "type": "string"
                    },
                    "certificateIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "enableHttp3": {
                        "type": "boolean"
                    },
                    "externalAcls": {
                        "type": "boolean"
                    },
                    "frontendId": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "inboundPort": {
                        "type": "integer"
                    },
                    "lbId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "timeoutClient": {
                        "type": "string"
                    }
                },
                "required": [
                    "acls",
                    "backendId",
                    "certificateId",
                    "certificateIds",
                    "enableHttp3",
                    "externalAcls",
                    "inboundPort",
                    "timeoutClient",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getLbFrontends:getLbFrontends": {
            "description": "Gets information about multiple Load Balancer frontends.\n\nFor more information, see the [main documentation](https://www.scaleway.com/en/docs/network/load-balancer/reference-content/configuring-frontends/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-frontends).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Find frontends that share the same LB ID\nconst byLBID = scaleway.getLbFrontends({\n    lbId: lb01.id,\n});\n// Find frontends by LB ID and name\nconst byLBIDAndName = scaleway.getLbFrontends({\n    lbId: lb01.id,\n    name: \"tf-frontend-datasource\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Find frontends that share the same LB ID\nby_lbid = scaleway.get_lb_frontends(lb_id=lb01[\"id\"])\n# Find frontends by LB ID and name\nby_lbid_and_name = scaleway.get_lb_frontends(lb_id=lb01[\"id\"],\n    name=\"tf-frontend-datasource\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Find frontends that share the same LB ID\n    var byLBID = Scaleway.GetLbFrontends.Invoke(new()\n    {\n        LbId = lb01.Id,\n    });\n\n    // Find frontends by LB ID and name\n    var byLBIDAndName = Scaleway.GetLbFrontends.Invoke(new()\n    {\n        LbId = lb01.Id,\n        Name = \"tf-frontend-datasource\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Find frontends that share the same LB ID\n\t\t_, err := scaleway.GetLbFrontends(ctx, \u0026scaleway.GetLbFrontendsArgs{\n\t\t\tLbId: lb01.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Find frontends by LB ID and name\n\t\t_, err = scaleway.GetLbFrontends(ctx, \u0026scaleway.GetLbFrontendsArgs{\n\t\t\tLbId: lb01.Id,\n\t\t\tName: pulumi.StringRef(\"tf-frontend-datasource\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetLbFrontendsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Find frontends that share the same LB ID\n        final var byLBID = ScalewayFunctions.getLbFrontends(GetLbFrontendsArgs.builder()\n            .lbId(lb01.id())\n            .build());\n\n        // Find frontends by LB ID and name\n        final var byLBIDAndName = ScalewayFunctions.getLbFrontends(GetLbFrontendsArgs.builder()\n            .lbId(lb01.id())\n            .name(\"tf-frontend-datasource\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Find frontends that share the same LB ID\n  byLBID:\n    fn::invoke:\n      Function: scaleway:getLbFrontends\n      Arguments:\n        lbId: ${lb01.id}\n  # Find frontends by LB ID and name\n  byLBIDAndName:\n    fn::invoke:\n      Function: scaleway:getLbFrontends\n      Arguments:\n        lbId: ${lb01.id}\n        name: tf-frontend-datasource\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLbFrontends.\n",
                "properties": {
                    "lbId": {
                        "type": "string",
                        "description": "The Load Balancer ID this frontend is attached to. Frontends with a matching ID are listed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The frontend name to filter for. Frontends with a matching name are listed.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the frontends exist.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "lbId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLbFrontends.\n",
                "properties": {
                    "frontends": {
                        "description": "List of retrieved frontends\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getLbFrontendsFrontend:getLbFrontendsFrontend"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "lbId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "frontends",
                    "lbId",
                    "organizationId",
                    "projectId",
                    "zone",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getLbIps:getLbIps": {
            "description": "Gets information about multiple Load Balancer IP addresses.\n\nFor more information, see the [main documentation](https://www.scaleway.com/en/docs/network/load-balancer/how-to/create-manage-flex-ips/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-ip-addresses-list-ip-addresses).\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLbIps.\n",
                "properties": {
                    "ipCidrRange": {
                        "type": "string",
                        "description": "The IP CIDR range to filter for. IPs within a matching CIDR block are listed.\n"
                    },
                    "ipType": {
                        "type": "string",
                        "description": "The IP type used as a filter.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Project the Load Balancer is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of tags used as filter. IPs with these exact tags are listed.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the IPs exist.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLbIps.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "ipCidrRange": {
                        "type": "string"
                    },
                    "ipType": {
                        "type": "string"
                    },
                    "ips": {
                        "description": "List of retrieved IPs\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getLbIpsIp:getLbIpsIp"
                        },
                        "type": "array"
                    },
                    "organizationId": {
                        "description": "The ID of the Organization the Load Balancer is associated with.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "The ID of the Project the Load Balancer is associated with.\n",
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "zone": {
                        "description": "The zone of the Load Balancer.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "ips",
                    "organizationId",
                    "projectId",
                    "zone",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getLbRoute:getLbRoute": {
            "description": "Get information about Scaleway Load Balancer routes.\n\nFor more information, see the [main documentation](https://www.scaleway.com/en/docs/network/load-balancer/how-to/create-manage-routes/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-route).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst ip01 = new scaleway.LoadbalancerIp(\"ip01\", {});\nconst lb01 = new scaleway.Loadbalancer(\"lb01\", {\n    ipId: ip01.id,\n    name: \"test-lb\",\n    type: \"lb-s\",\n});\nconst bkd01 = new scaleway.LoadbalancerBackend(\"bkd01\", {\n    lbId: lb01.id,\n    forwardProtocol: \"tcp\",\n    forwardPort: 80,\n    proxyProtocol: \"none\",\n});\nconst frt01 = new scaleway.LoadbalancerFrontend(\"frt01\", {\n    lbId: lb01.id,\n    backendId: bkd01.id,\n    inboundPort: 80,\n});\nconst rt01 = new scaleway.LoadbalancerRoute(\"rt01\", {\n    frontendId: frt01.id,\n    backendId: bkd01.id,\n    matchSni: \"sni.scaleway.com\",\n});\nconst byID = scaleway.getLbRouteOutput({\n    routeId: rt01.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\nip01 = scaleway.LoadbalancerIp(\"ip01\")\nlb01 = scaleway.Loadbalancer(\"lb01\",\n    ip_id=ip01.id,\n    name=\"test-lb\",\n    type=\"lb-s\")\nbkd01 = scaleway.LoadbalancerBackend(\"bkd01\",\n    lb_id=lb01.id,\n    forward_protocol=\"tcp\",\n    forward_port=80,\n    proxy_protocol=\"none\")\nfrt01 = scaleway.LoadbalancerFrontend(\"frt01\",\n    lb_id=lb01.id,\n    backend_id=bkd01.id,\n    inbound_port=80)\nrt01 = scaleway.LoadbalancerRoute(\"rt01\",\n    frontend_id=frt01.id,\n    backend_id=bkd01.id,\n    match_sni=\"sni.scaleway.com\")\nby_id = scaleway.get_lb_route_output(route_id=rt01.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ip01 = new Scaleway.LoadbalancerIp(\"ip01\");\n\n    var lb01 = new Scaleway.Loadbalancer(\"lb01\", new()\n    {\n        IpId = ip01.Id,\n        Name = \"test-lb\",\n        Type = \"lb-s\",\n    });\n\n    var bkd01 = new Scaleway.LoadbalancerBackend(\"bkd01\", new()\n    {\n        LbId = lb01.Id,\n        ForwardProtocol = \"tcp\",\n        ForwardPort = 80,\n        ProxyProtocol = \"none\",\n    });\n\n    var frt01 = new Scaleway.LoadbalancerFrontend(\"frt01\", new()\n    {\n        LbId = lb01.Id,\n        BackendId = bkd01.Id,\n        InboundPort = 80,\n    });\n\n    var rt01 = new Scaleway.LoadbalancerRoute(\"rt01\", new()\n    {\n        FrontendId = frt01.Id,\n        BackendId = bkd01.Id,\n        MatchSni = \"sni.scaleway.com\",\n    });\n\n    var byID = Scaleway.GetLbRoute.Invoke(new()\n    {\n        RouteId = rt01.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tip01, err := scaleway.NewLoadbalancerIp(ctx, \"ip01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlb01, err := scaleway.NewLoadbalancer(ctx, \"lb01\", \u0026scaleway.LoadbalancerArgs{\n\t\t\tIpId: ip01.ID(),\n\t\t\tName: pulumi.String(\"test-lb\"),\n\t\t\tType: pulumi.String(\"lb-s\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbkd01, err := scaleway.NewLoadbalancerBackend(ctx, \"bkd01\", \u0026scaleway.LoadbalancerBackendArgs{\n\t\t\tLbId:            lb01.ID(),\n\t\t\tForwardProtocol: pulumi.String(\"tcp\"),\n\t\t\tForwardPort:     pulumi.Int(80),\n\t\t\tProxyProtocol:   pulumi.String(\"none\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfrt01, err := scaleway.NewLoadbalancerFrontend(ctx, \"frt01\", \u0026scaleway.LoadbalancerFrontendArgs{\n\t\t\tLbId:        lb01.ID(),\n\t\t\tBackendId:   bkd01.ID(),\n\t\t\tInboundPort: pulumi.Int(80),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\trt01, err := scaleway.NewLoadbalancerRoute(ctx, \"rt01\", \u0026scaleway.LoadbalancerRouteArgs{\n\t\t\tFrontendId: frt01.ID(),\n\t\t\tBackendId:  bkd01.ID(),\n\t\t\tMatchSni:   pulumi.String(\"sni.scaleway.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.GetLbRouteOutput(ctx, scaleway.GetLbRouteOutputArgs{\n\t\t\tRouteId: rt01.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.LoadbalancerIp;\nimport com.pulumi.scaleway.Loadbalancer;\nimport com.pulumi.scaleway.LoadbalancerArgs;\nimport com.pulumi.scaleway.LoadbalancerBackend;\nimport com.pulumi.scaleway.LoadbalancerBackendArgs;\nimport com.pulumi.scaleway.LoadbalancerFrontend;\nimport com.pulumi.scaleway.LoadbalancerFrontendArgs;\nimport com.pulumi.scaleway.LoadbalancerRoute;\nimport com.pulumi.scaleway.LoadbalancerRouteArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetLbRouteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ip01 = new LoadbalancerIp(\"ip01\");\n\n        var lb01 = new Loadbalancer(\"lb01\", LoadbalancerArgs.builder()\n            .ipId(ip01.id())\n            .name(\"test-lb\")\n            .type(\"lb-s\")\n            .build());\n\n        var bkd01 = new LoadbalancerBackend(\"bkd01\", LoadbalancerBackendArgs.builder()\n            .lbId(lb01.id())\n            .forwardProtocol(\"tcp\")\n            .forwardPort(80)\n            .proxyProtocol(\"none\")\n            .build());\n\n        var frt01 = new LoadbalancerFrontend(\"frt01\", LoadbalancerFrontendArgs.builder()\n            .lbId(lb01.id())\n            .backendId(bkd01.id())\n            .inboundPort(80)\n            .build());\n\n        var rt01 = new LoadbalancerRoute(\"rt01\", LoadbalancerRouteArgs.builder()\n            .frontendId(frt01.id())\n            .backendId(bkd01.id())\n            .matchSni(\"sni.scaleway.com\")\n            .build());\n\n        final var byID = ScalewayFunctions.getLbRoute(GetLbRouteArgs.builder()\n            .routeId(rt01.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ip01:\n    type: scaleway:LoadbalancerIp\n  lb01:\n    type: scaleway:Loadbalancer\n    properties:\n      ipId: ${ip01.id}\n      name: test-lb\n      type: lb-s\n  bkd01:\n    type: scaleway:LoadbalancerBackend\n    properties:\n      lbId: ${lb01.id}\n      forwardProtocol: tcp\n      forwardPort: 80\n      proxyProtocol: none\n  frt01:\n    type: scaleway:LoadbalancerFrontend\n    properties:\n      lbId: ${lb01.id}\n      backendId: ${bkd01.id}\n      inboundPort: 80\n  rt01:\n    type: scaleway:LoadbalancerRoute\n    properties:\n      frontendId: ${frt01.id}\n      backendId: ${bkd01.id}\n      matchSni: sni.scaleway.com\nvariables:\n  byID:\n    fn::invoke:\n      Function: scaleway:getLbRoute\n      Arguments:\n        routeId: ${rt01.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLbRoute.\n",
                "properties": {
                    "routeId": {
                        "type": "string",
                        "description": "The route ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "routeId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLbRoute.\n",
                "properties": {
                    "backendId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "frontendId": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "matchHostHeader": {
                        "type": "string"
                    },
                    "matchSni": {
                        "type": "string"
                    },
                    "routeId": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "required": [
                    "backendId",
                    "createdAt",
                    "frontendId",
                    "matchHostHeader",
                    "matchSni",
                    "routeId",
                    "updatedAt",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getLbRoutes:getLbRoutes": {
            "description": "Gets information about multiple Load Balancer routes.\n\nFor more information, see the [main documentation](https://www.scaleway.com/en/docs/network/load-balancer/how-to/create-manage-routes/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-route).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Find routes that share the same frontend ID\nconst byFrontendID = scaleway.getLbRoutes({\n    frontendId: frt01.id,\n});\n// Find routes by frontend ID and zone\nconst myKey = scaleway.getLbRoutes({\n    frontendId: \"11111111-1111-1111-1111-111111111111\",\n    zone: \"fr-par-2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Find routes that share the same frontend ID\nby_frontend_id = scaleway.get_lb_routes(frontend_id=frt01[\"id\"])\n# Find routes by frontend ID and zone\nmy_key = scaleway.get_lb_routes(frontend_id=\"11111111-1111-1111-1111-111111111111\",\n    zone=\"fr-par-2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Find routes that share the same frontend ID\n    var byFrontendID = Scaleway.GetLbRoutes.Invoke(new()\n    {\n        FrontendId = frt01.Id,\n    });\n\n    // Find routes by frontend ID and zone\n    var myKey = Scaleway.GetLbRoutes.Invoke(new()\n    {\n        FrontendId = \"11111111-1111-1111-1111-111111111111\",\n        Zone = \"fr-par-2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Find routes that share the same frontend ID\n\t\t_, err := scaleway.GetLbRoutes(ctx, \u0026scaleway.GetLbRoutesArgs{\n\t\t\tFrontendId: pulumi.StringRef(frt01.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Find routes by frontend ID and zone\n\t\t_, err = scaleway.GetLbRoutes(ctx, \u0026scaleway.GetLbRoutesArgs{\n\t\t\tFrontendId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t\tZone:       pulumi.StringRef(\"fr-par-2\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetLbRoutesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Find routes that share the same frontend ID\n        final var byFrontendID = ScalewayFunctions.getLbRoutes(GetLbRoutesArgs.builder()\n            .frontendId(frt01.id())\n            .build());\n\n        // Find routes by frontend ID and zone\n        final var myKey = ScalewayFunctions.getLbRoutes(GetLbRoutesArgs.builder()\n            .frontendId(\"11111111-1111-1111-1111-111111111111\")\n            .zone(\"fr-par-2\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Find routes that share the same frontend ID\n  byFrontendID:\n    fn::invoke:\n      Function: scaleway:getLbRoutes\n      Arguments:\n        frontendId: ${frt01.id}\n  # Find routes by frontend ID and zone\n  myKey:\n    fn::invoke:\n      Function: scaleway:getLbRoutes\n      Arguments:\n        frontendId: 11111111-1111-1111-1111-111111111111\n        zone: fr-par-2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLbRoutes.\n",
                "properties": {
                    "frontendId": {
                        "type": "string",
                        "description": "The frontend ID (the origin of the redirection), to filter for. Routes with a matching frontend ID are listed.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the routes exist.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLbRoutes.\n",
                "properties": {
                    "frontendId": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "routes": {
                        "description": "List of retrieved routes\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getLbRoutesRoute:getLbRoutesRoute"
                        },
                        "type": "array"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "organizationId",
                    "projectId",
                    "routes",
                    "zone",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getLbs:getLbs": {
            "description": "Gets information about multiple Load Balancers.\n\nFor more information, see the [main documentation](https://www.scaleway.com/en/docs/network/load-balancer/concepts/#load-balancers) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-load-balancer-list-load-balancers).\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLbs.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The Load Balancer name to filter for. Load Balancers with a matching name are listed.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Project the Load Balancer is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of tags to filter for. Load Balancers with these exact tags are listed.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the Load Balancers exist.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLbs.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "lbs": {
                        "description": "List of retrieved Load Balancers\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getLbsLb:getLbsLb"
                        },
                        "type": "array"
                    },
                    "name": {
                        "description": "The name of the Load Balancer.\n",
                        "type": "string"
                    },
                    "organizationId": {
                        "description": "The ID of the Organization the Load Balancer is associated with.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "The ID of the Project the Load Balancer is associated with.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The tags associated with the Load Balancer.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "zone": {
                        "description": "The zone of the Load Balancer.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "lbs",
                    "organizationId",
                    "projectId",
                    "zone",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getLoadbalancer:getLoadbalancer": {
            "description": "Gets information about a Load Balancer.\n\nFor more information, see the [main documentation](https://www.scaleway.com/en/docs/network/load-balancer/concepts/#load-balancers) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-load-balancer-list-load-balancers).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by name\nconst byName = scaleway.getLoadbalancer({\n    name: \"foobar\",\n});\n// Get info by ID\nconst byId = scaleway.getLoadbalancer({\n    lbId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Get info by name\nby_name = scaleway.get_loadbalancer(name=\"foobar\")\n# Get info by ID\nby_id = scaleway.get_loadbalancer(lb_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Get info by name\n    var byName = Scaleway.GetLoadbalancer.Invoke(new()\n    {\n        Name = \"foobar\",\n    });\n\n    // Get info by ID\n    var byId = Scaleway.GetLoadbalancer.Invoke(new()\n    {\n        LbId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Get info by name\n\t\t_, err := scaleway.LookupLoadbalancer(ctx, \u0026scaleway.LookupLoadbalancerArgs{\n\t\t\tName: pulumi.StringRef(\"foobar\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Get info by ID\n\t\t_, err = scaleway.LookupLoadbalancer(ctx, \u0026scaleway.LookupLoadbalancerArgs{\n\t\t\tLbId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetLoadbalancerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Get info by name\n        final var byName = ScalewayFunctions.getLoadbalancer(GetLoadbalancerArgs.builder()\n            .name(\"foobar\")\n            .build());\n\n        // Get info by ID\n        final var byId = ScalewayFunctions.getLoadbalancer(GetLoadbalancerArgs.builder()\n            .lbId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Get info by name\n  byName:\n    fn::invoke:\n      Function: scaleway:getLoadbalancer\n      Arguments:\n        name: foobar\n  # Get info by ID\n  byId:\n    fn::invoke:\n      Function: scaleway:getLoadbalancer\n      Arguments:\n        lbId: 11111111-1111-1111-1111-111111111111\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLoadbalancer.\n",
                "properties": {
                    "lbId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Load Balancer name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Project the Load Balancer is associated with.\n"
                    },
                    "releaseIp": {
                        "type": "boolean"
                    },
                    "zone": {
                        "type": "string",
                        "description": "(Defaults to provider `zone`) The zone in which the Load Balancer exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLoadbalancer.\n",
                "properties": {
                    "assignFlexibleIp": {
                        "type": "boolean"
                    },
                    "assignFlexibleIpv6": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "ipAddress": {
                        "description": "The Load Balancer public IP address.\n",
                        "type": "string"
                    },
                    "ipId": {
                        "type": "string"
                    },
                    "ipIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "ipv6Address": {
                        "type": "string"
                    },
                    "lbId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "privateNetworks": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getLoadbalancerPrivateNetwork:getLoadbalancerPrivateNetwork"
                        },
                        "type": "array"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "releaseIp": {
                        "type": "boolean"
                    },
                    "sslCompatibilityLevel": {
                        "type": "string"
                    },
                    "tags": {
                        "description": "The tags associated with the Load Balancer.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": {
                        "description": "The Load Balancer type.\n",
                        "type": "string"
                    },
                    "zone": {
                        "description": "(Defaults to provider `zone`) The zone in which the Load Balancer exists.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "assignFlexibleIp",
                    "assignFlexibleIpv6",
                    "description",
                    "ipAddress",
                    "ipId",
                    "ipIds",
                    "ipv6Address",
                    "organizationId",
                    "privateNetworks",
                    "region",
                    "sslCompatibilityLevel",
                    "tags",
                    "type",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getLoadbalancerCertificate:getLoadbalancerCertificate": {
            "description": "Get information about Scaleway Load Balancer certificates.\n\nThis data source can prove useful when a module accepts a Load Balancer certificate as an input variable and needs to, for example, determine the security of a certificate for the frontend associated with your domain.\n\nFor more information, see the [main documentation](https://www.scaleway.com/en/docs/network/load-balancer/how-to/add-certificate/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-certificate).\n\n## Examples\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLoadbalancerCertificate.\n",
                "properties": {
                    "certificateId": {
                        "type": "string",
                        "description": "The certificate ID.\n- Only one of `name` and `certificate_id` should be specified.\n"
                    },
                    "lbId": {
                        "type": "string",
                        "description": "The Load Balancer ID this certificate is attached to.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Load Balancer certificate.\n- When using a certificate `name` you should specify the `lb-id`\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLoadbalancerCertificate.\n",
                "properties": {
                    "certificateId": {
                        "type": "string"
                    },
                    "commonName": {
                        "type": "string"
                    },
                    "customCertificates": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getLoadbalancerCertificateCustomCertificate:getLoadbalancerCertificateCustomCertificate"
                        },
                        "type": "array"
                    },
                    "fingerprint": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "lbId": {
                        "type": "string"
                    },
                    "letsencrypts": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getLoadbalancerCertificateLetsencrypt:getLoadbalancerCertificateLetsencrypt"
                        },
                        "type": "array"
                    },
                    "name": {
                        "type": "string"
                    },
                    "notValidAfter": {
                        "type": "string"
                    },
                    "notValidBefore": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "subjectAlternativeNames": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "commonName",
                    "customCertificates",
                    "fingerprint",
                    "letsencrypts",
                    "notValidAfter",
                    "notValidBefore",
                    "status",
                    "subjectAlternativeNames",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getLoadbalancerIp:getLoadbalancerIp": {
            "description": "Gets information about a Load Balancer IP address.\n\nFor more information, see the [main documentation](https://www.scaleway.com/en/docs/network/load-balancer/how-to/create-manage-flex-ips/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-ip-addresses-list-ip-addresses).\n\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLoadbalancerIp.\n",
                "properties": {
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address.\nOnly one of `ip_address` and `ip_id` should be specified.\n"
                    },
                    "ipId": {
                        "type": "string",
                        "description": "The IP ID.\nOnly one of `ip_address` and `ip_id` should be specified.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Project the Load Balancer IP is associated with.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLoadbalancerIp.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "ipAddress": {
                        "type": "string"
                    },
                    "ipId": {
                        "type": "string"
                    },
                    "isIpv6": {
                        "type": "boolean"
                    },
                    "lbId": {
                        "description": "The ID of the associated Load Balancer, if any\n",
                        "type": "string"
                    },
                    "organizationId": {
                        "description": "(Defaults to provider `organization_id`) The ID of the Organization the Load Balancer IP is associated with.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "reverse": {
                        "description": "The reverse domain associated with this IP.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The tags associated with this IP.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "isIpv6",
                    "lbId",
                    "organizationId",
                    "projectId",
                    "region",
                    "reverse",
                    "tags",
                    "zone",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getMarketplaceImage:getMarketplaceImage": {
            "description": "Gets local image ID of an image from its label name.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst myImage = scaleway.getMarketplaceImage({\n    label: \"ubuntu_jammy\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmy_image = scaleway.get_marketplace_image(label=\"ubuntu_jammy\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myImage = Scaleway.GetMarketplaceImage.Invoke(new()\n    {\n        Label = \"ubuntu_jammy\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.GetMarketplaceImage(ctx, \u0026scaleway.GetMarketplaceImageArgs{\n\t\t\tLabel: \"ubuntu_jammy\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetMarketplaceImageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myImage = ScalewayFunctions.getMarketplaceImage(GetMarketplaceImageArgs.builder()\n            .label(\"ubuntu_jammy\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myImage:\n    fn::invoke:\n      Function: scaleway:getMarketplaceImage\n      Arguments:\n        label: ubuntu_jammy\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getMarketplaceImage.\n",
                "properties": {
                    "instanceType": {
                        "type": "string",
                        "description": "The instance type the image is compatible with.\nYou find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Exact label of the desired image. You can use [this endpoint](https://www.scaleway.com/en/developers/api/marketplace/#path-marketplace-images-list-marketplace-images)\nto find the right `label`.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which the image exists.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "label"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMarketplaceImage.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "instanceType": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "label",
                    "zone",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getMnqSns:getMnqSns": {
            "description": "Gets information about SNS for a Project\n\n## Examples\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// For default project\nconst main = scaleway.getMnqSns({});\n// For specific project\nconst forProject = scaleway.getMnqSns({\n    projectId: mainScalewayAccountProject.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# For default project\nmain = scaleway.get_mnq_sns()\n# For specific project\nfor_project = scaleway.get_mnq_sns(project_id=main_scaleway_account_project[\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // For default project\n    var main = Scaleway.GetMnqSns.Invoke();\n\n    // For specific project\n    var forProject = Scaleway.GetMnqSns.Invoke(new()\n    {\n        ProjectId = mainScalewayAccountProject.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// For default project\n\t\t_, err := scaleway.LookupMnqSns(ctx, \u0026scaleway.LookupMnqSnsArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// For specific project\n\t\t_, err = scaleway.LookupMnqSns(ctx, \u0026scaleway.LookupMnqSnsArgs{\n\t\t\tProjectId: pulumi.StringRef(mainScalewayAccountProject.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetMnqSnsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // For default project\n        final var main = ScalewayFunctions.getMnqSns();\n\n        // For specific project\n        final var forProject = ScalewayFunctions.getMnqSns(GetMnqSnsArgs.builder()\n            .projectId(mainScalewayAccountProject.id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # For default project\n  main:\n    fn::invoke:\n      Function: scaleway:getMnqSns\n      Arguments: {}\n  # For specific project\n  forProject:\n    fn::invoke:\n      Function: scaleway:getMnqSns\n      Arguments:\n        projectId: ${mainScalewayAccountProject.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getMnqSns.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the Project in which sns is enabled.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which sns is enabled.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getMnqSns.\n",
                "properties": {
                    "endpoint": {
                        "description": "The endpoint of the SNS service for this Project.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "required": [
                    "endpoint",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getMnqSqs:getMnqSqs": {
            "description": "Gets information about SQS for a Project\n\n## Examples\n\n### Basic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// For default project\nconst main = scaleway.getMnqSqs({});\n// For specific project\nconst forProject = scaleway.getMnqSqs({\n    projectId: mainScalewayAccountProject.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# For default project\nmain = scaleway.get_mnq_sqs()\n# For specific project\nfor_project = scaleway.get_mnq_sqs(project_id=main_scaleway_account_project[\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // For default project\n    var main = Scaleway.GetMnqSqs.Invoke();\n\n    // For specific project\n    var forProject = Scaleway.GetMnqSqs.Invoke(new()\n    {\n        ProjectId = mainScalewayAccountProject.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// For default project\n\t\t_, err := scaleway.LookupMnqSqs(ctx, \u0026scaleway.LookupMnqSqsArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// For specific project\n\t\t_, err = scaleway.LookupMnqSqs(ctx, \u0026scaleway.LookupMnqSqsArgs{\n\t\t\tProjectId: pulumi.StringRef(mainScalewayAccountProject.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetMnqSqsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // For default project\n        final var main = ScalewayFunctions.getMnqSqs();\n\n        // For specific project\n        final var forProject = ScalewayFunctions.getMnqSqs(GetMnqSqsArgs.builder()\n            .projectId(mainScalewayAccountProject.id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # For default project\n  main:\n    fn::invoke:\n      Function: scaleway:getMnqSqs\n      Arguments: {}\n  # For specific project\n  forProject:\n    fn::invoke:\n      Function: scaleway:getMnqSqs\n      Arguments:\n        projectId: ${mainScalewayAccountProject.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getMnqSqs.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the Project in which SQS is enabled.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which SQS is enabled.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getMnqSqs.\n",
                "properties": {
                    "endpoint": {
                        "description": "The endpoint of the SQS service for this Project.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "required": [
                    "endpoint",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getObjectBucket:getObjectBucket": {
            "description": "The `scaleway.ObjectBucket` data source is used to retrieve information about an Object Storage bucket.\n\nRefer to the Object Storage [documentation](https://www.scaleway.com/en/docs/storage/object/how-to/create-a-bucket/) for more information.\n\n## Retrieve an Object Storage bucket\n\nThe following commands allow you to:\n\n- retrieve a bucket by its name\n- retrieve a bucket by its ID\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.ObjectBucket(\"main\", {\n    name: \"bucket.test.com\",\n    tags: {\n        foo: \"bar\",\n    },\n});\nconst selected = scaleway.getObjectBucketOutput({\n    name: main.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.ObjectBucket(\"main\",\n    name=\"bucket.test.com\",\n    tags={\n        \"foo\": \"bar\",\n    })\nselected = scaleway.get_object_bucket_output(name=main.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.ObjectBucket(\"main\", new()\n    {\n        Name = \"bucket.test.com\",\n        Tags = \n        {\n            { \"foo\", \"bar\" },\n        },\n    });\n\n    var selected = Scaleway.GetObjectBucket.Invoke(new()\n    {\n        Name = main.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewObjectBucket(ctx, \"main\", \u0026scaleway.ObjectBucketArgs{\n\t\t\tName: pulumi.String(\"bucket.test.com\"),\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"foo\": pulumi.String(\"bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.LookupObjectBucketOutput(ctx, scaleway.GetObjectBucketOutputArgs{\n\t\t\tName: main.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ObjectBucket;\nimport com.pulumi.scaleway.ObjectBucketArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetObjectBucketArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new ObjectBucket(\"main\", ObjectBucketArgs.builder()\n            .name(\"bucket.test.com\")\n            .tags(Map.of(\"foo\", \"bar\"))\n            .build());\n\n        final var selected = ScalewayFunctions.getObjectBucket(GetObjectBucketArgs.builder()\n            .name(main.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:ObjectBucket\n    properties:\n      name: bucket.test.com\n      tags:\n        foo: bar\nvariables:\n  selected:\n    fn::invoke:\n      Function: scaleway:getObjectBucket\n      Arguments:\n        name: ${main.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Retrieve a bucket from a specific project\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst selected = scaleway.getObjectBucket({\n    name: \"bucket.test.com\",\n    projectId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nselected = scaleway.get_object_bucket(name=\"bucket.test.com\",\n    project_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var selected = Scaleway.GetObjectBucket.Invoke(new()\n    {\n        Name = \"bucket.test.com\",\n        ProjectId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupObjectBucket(ctx, \u0026scaleway.LookupObjectBucketArgs{\n\t\t\tName:      pulumi.StringRef(\"bucket.test.com\"),\n\t\t\tProjectId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetObjectBucketArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var selected = ScalewayFunctions.getObjectBucket(GetObjectBucketArgs.builder()\n            .name(\"bucket.test.com\")\n            .projectId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  selected:\n    fn::invoke:\n      Function: scaleway:getObjectBucket\n      Arguments:\n        name: bucket.test.com\n        projectId: 11111111-1111-1111-1111-111111111111\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getObjectBucket.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project with which the bucket is associated.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the bucket exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getObjectBucket.\n",
                "properties": {
                    "acl": {
                        "type": "string"
                    },
                    "apiEndpoint": {
                        "type": "string"
                    },
                    "corsRules": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getObjectBucketCorsRule:getObjectBucketCorsRule"
                        },
                        "type": "array"
                    },
                    "endpoint": {
                        "description": "The endpoint URL of the bucket\n",
                        "type": "string"
                    },
                    "forceDestroy": {
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "lifecycleRules": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getObjectBucketLifecycleRule:getObjectBucketLifecycleRule"
                        },
                        "type": "array"
                    },
                    "name": {
                        "type": "string"
                    },
                    "objectLockEnabled": {
                        "type": "boolean"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "tags": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "versionings": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getObjectBucketVersioning:getObjectBucketVersioning"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "acl",
                    "apiEndpoint",
                    "corsRules",
                    "endpoint",
                    "forceDestroy",
                    "lifecycleRules",
                    "objectLockEnabled",
                    "tags",
                    "versionings",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getObjectBucketPolicy:getObjectBucketPolicy": {
            "description": "The `scaleway.ObjectBucketPolicy` data source is used to retrieve information about the bucket policy of an Object Storage bucket.\n\nRefer to the Object Storage [documentation](https://www.scaleway.com/en/docs/storage/object/api-cli/bucket-policy/) for more information.\n\n## Retrieve the bucket policy of a bucket\n\nThe following command allows you to retrieve a bucket policy by its bucket.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\nconst main = scaleway.getObjectBucketPolicy({\n    bucket: \"bucket.test.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\nmain = scaleway.get_object_bucket_policy(bucket=\"bucket.test.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Scaleway.GetObjectBucketPolicy.Invoke(new()\n    {\n        Bucket = \"bucket.test.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := scaleway.LookupObjectBucketPolicy(ctx, \u0026scaleway.LookupObjectBucketPolicyArgs{\n\t\t\tBucket: \"bucket.test.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetObjectBucketPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = ScalewayFunctions.getObjectBucketPolicy(GetObjectBucketPolicyArgs.builder()\n            .bucket(\"bucket.test.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  main:\n    fn::invoke:\n      Function: scaleway:getObjectBucketPolicy\n      Arguments:\n        bucket: bucket.test.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getObjectBucketPolicy.\n",
                "properties": {
                    "bucket": {
                        "type": "string",
                        "description": "The name of the bucket.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the Object Storage exists.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bucket"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getObjectBucketPolicy.\n",
                "properties": {
                    "bucket": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "policy": {
                        "description": "The content of the bucket policy in JSON format.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "required": [
                    "bucket",
                    "policy",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getRedisCluster:getRedisCluster": {
            "description": "Gets information about a Redis™ cluster.\n\nFor further information refer to the Managed Database for Redis™ [API documentation](https://developers.scaleway.com/en/products/redis/api/v1alpha1/#clusters-a85816).\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRedisCluster.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The Redis cluster ID.\n\n\u003e **Note** You must specify at least one: `name` and/or `cluster_id`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Redis cluster.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project the Redis cluster is associated with.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`region`) The zone in which the server exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRedisCluster.\n",
                "properties": {
                    "acls": {
                        "description": "List of acl rules.\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getRedisClusterAcl:getRedisClusterAcl"
                        },
                        "type": "array"
                    },
                    "certificate": {
                        "description": "The PEM of the certificate used by redis, only when `tls_enabled` is true.\n",
                        "type": "string"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "clusterSize": {
                        "description": "The number of nodes in the Redis Cluster.\n",
                        "type": "integer"
                    },
                    "createdAt": {
                        "description": "The date and time of creation of the Redis Cluster.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nodeType": {
                        "description": "The type of Redis Cluster (e.g. `RED1-M`).\n",
                        "type": "string"
                    },
                    "password": {
                        "description": "Password of the first user of the Redis Cluster.\n",
                        "type": "string"
                    },
                    "privateNetworks": {
                        "description": "List of private networks endpoints of the Redis Cluster.\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getRedisClusterPrivateNetwork:getRedisClusterPrivateNetwork"
                        },
                        "type": "array"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "publicNetworks": {
                        "description": "Public network details.\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getRedisClusterPublicNetwork:getRedisClusterPublicNetwork"
                        },
                        "type": "array"
                    },
                    "settings": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of settings for redis cluster.\n",
                        "type": "object"
                    },
                    "tags": {
                        "description": "The tags associated with the Redis Cluster.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "tlsEnabled": {
                        "description": "Whether TLS is enabled or not.\n",
                        "type": "boolean"
                    },
                    "updatedAt": {
                        "description": "The date and time of the last update of the Redis Cluster.\n",
                        "type": "string"
                    },
                    "userName": {
                        "description": "The first user of the Redis Cluster.\n",
                        "type": "string"
                    },
                    "version": {
                        "description": "Redis's Cluster version (e.g. `6.2.7`).\n",
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "acls",
                    "certificate",
                    "clusterSize",
                    "createdAt",
                    "nodeType",
                    "password",
                    "privateNetworks",
                    "publicNetworks",
                    "settings",
                    "tags",
                    "tlsEnabled",
                    "updatedAt",
                    "userName",
                    "version",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getRegistryImage:getRegistryImage": {
            "description": "Gets information about a Container Registry image.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRegistryImage.\n",
                "properties": {
                    "imageId": {
                        "type": "string",
                        "description": "The image ID.\n\n\u003e **Note** You must specify at least one: `name` and/or `image_id`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The image name.\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace ID in which the image is.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the image is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the image exists.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags associated with the registry image\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRegistryImage.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "imageId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "description": "The organization ID the image is associated with.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "size": {
                        "description": "The size of the registry image.\n",
                        "type": "integer"
                    },
                    "tags": {
                        "description": "The tags associated with the registry image\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "updatedAt": {
                        "description": "The date the image of the last update\n",
                        "type": "string"
                    },
                    "visibility": {
                        "description": "The privacy policy of the registry image.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "namespaceId",
                    "organizationId",
                    "projectId",
                    "region",
                    "size",
                    "tags",
                    "updatedAt",
                    "visibility",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getRegistryNamespace:getRegistryNamespace": {
            "description": "Gets information about a registry namespace.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRegistryNamespace.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The namespace name.\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace id.\n\n\u003e **Note** You must specify at least one: `name` and/or `image_id`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the namespace is associated with.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the namespace exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRegistryNamespace.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "endpoint": {
                        "description": "The endpoint of the Registry Namespace.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "isPublic": {
                        "description": "The Namespace Privacy Policy: whether or not the images are public.\n",
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "description": "The organization ID the namespace is associated with.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "required": [
                    "description",
                    "endpoint",
                    "isPublic",
                    "organizationId",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getSecret:getSecret": {
            "description": "The `scaleway.Secret` data source is used to get information about a specific secret in Scaleway's Secret Manager.\n\nRefer to the Secret Manager [product documentation](https://www.scaleway.com/en/docs/identity-and-access-management/secret-manager/) and [API documentation](https://www.scaleway.com/en/developers/api/secret-manager/) for more information.\n\n## Example Usage\n\n### Create a secret and get its information\n\nThe following commands allow you to:\n\n- create a secret named `foo` with the description `barr`\n- retrieve the secret's information using the secret's ID\n- retrieve the secret's information using the secret's name\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\n// Create a secret\nconst main = new scaleway.Secret(\"main\", {\n    name: \"foo\",\n    description: \"barr\",\n});\n// Get the secret information specified by the secret ID\nconst mySecret = scaleway.getSecret({\n    secretId: \"11111111-1111-1111-1111-111111111111\",\n});\n// Get the secret information specified by the secret name\nconst byName = scaleway.getSecret({\n    name: \"your_secret_name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\n# Create a secret\nmain = scaleway.Secret(\"main\",\n    name=\"foo\",\n    description=\"barr\")\n# Get the secret information specified by the secret ID\nmy_secret = scaleway.get_secret(secret_id=\"11111111-1111-1111-1111-111111111111\")\n# Get the secret information specified by the secret name\nby_name = scaleway.get_secret(name=\"your_secret_name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a secret\n    var main = new Scaleway.Secret(\"main\", new()\n    {\n        Name = \"foo\",\n        Description = \"barr\",\n    });\n\n    // Get the secret information specified by the secret ID\n    var mySecret = Scaleway.GetSecret.Invoke(new()\n    {\n        SecretId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n    // Get the secret information specified by the secret name\n    var byName = Scaleway.GetSecret.Invoke(new()\n    {\n        Name = \"your_secret_name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a secret\n\t\t_, err := scaleway.NewSecret(ctx, \"main\", \u0026scaleway.SecretArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tDescription: pulumi.String(\"barr\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Get the secret information specified by the secret ID\n\t\t_, err = scaleway.LookupSecret(ctx, \u0026scaleway.LookupSecretArgs{\n\t\t\tSecretId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Get the secret information specified by the secret name\n\t\t_, err = scaleway.LookupSecret(ctx, \u0026scaleway.LookupSecretArgs{\n\t\t\tName: pulumi.StringRef(\"your_secret_name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Secret;\nimport com.pulumi.scaleway.SecretArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetSecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a secret\n        var main = new Secret(\"main\", SecretArgs.builder()\n            .name(\"foo\")\n            .description(\"barr\")\n            .build());\n\n        // Get the secret information specified by the secret ID\n        final var mySecret = ScalewayFunctions.getSecret(GetSecretArgs.builder()\n            .secretId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n        // Get the secret information specified by the secret name\n        final var byName = ScalewayFunctions.getSecret(GetSecretArgs.builder()\n            .name(\"your_secret_name\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a secret\n  main:\n    type: scaleway:Secret\n    properties:\n      name: foo\n      description: barr\nvariables:\n  # Get the secret information specified by the secret ID\n  mySecret:\n    fn::invoke:\n      Function: scaleway:getSecret\n      Arguments:\n        secretId: 11111111-1111-1111-1111-111111111111\n  # Get the secret information specified by the secret name\n  byName:\n    fn::invoke:\n      Function: scaleway:getSecret\n      Arguments:\n        name: your_secret_name\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSecret.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the secret.\nOnly one of `name` and `secret_id` should be specified.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the Scaleway Organization the Project is associated with. If no default `organization_id` is set, it must be set explicitly in this data source.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The path of the secret.\nConflicts with `secret_id`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "). The ID of the\nProject the secret is associated with.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "). The region in which the secret exists.\n"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "The ID of the secret.\nOnly one of `name` and `secret_id` should be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSecret.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "ephemeralPolicies": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getSecretEphemeralPolicy:getSecretEphemeralPolicy"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "protected": {
                        "type": "boolean"
                    },
                    "region": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "versionCount": {
                        "type": "integer"
                    }
                },
                "required": [
                    "createdAt",
                    "description",
                    "ephemeralPolicies",
                    "organizationId",
                    "protected",
                    "status",
                    "tags",
                    "type",
                    "updatedAt",
                    "versionCount",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getSecretVersion:getSecretVersion": {
            "description": "The `scaleway.SecretVersion` data source is used to get information about a specific secret version stored in Scaleway Secret Manager.\n\nRefer to the Secret Manager [product documentation](https://www.scaleway.com/en/docs/identity-and-access-management/secret-manager/) and [API documentation](https://www.scaleway.com/en/developers/api/secret-manager/) for more information.\n\n\n## Example Usage\n\n### Use Secret Manager\n\nThe following commands allow you to:\n\n- create a secret named `fooii`\n- create a new version of `fooii` containing data (`your_secret`)\n- retrieve the secret version specified by the secret ID and the desired version\n- retrieve the secret version specified by the secret name and the desired version\n\nThe output blocks display the sensitive data contained in your secret version.\n\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\n// Create a secret named fooii\nconst main = new scaleway.Secret(\"main\", {\n    name: \"fooii\",\n    description: \"barr\",\n});\n// Create a version of fooii containing data\nconst mainSecretVersion = new scaleway.SecretVersion(\"main\", {\n    description: \"your description\",\n    secretId: main.id,\n    data: \"your_secret\",\n});\n// Retrieve the secret version specified by the secret ID and the desired version\nconst dataBySecretId = scaleway.getSecretVersionOutput({\n    secretId: main.id,\n    revision: \"1\",\n});\n// Retrieve the secret version specified by the secret name and the desired version\nconst dataBySecretName = scaleway.getSecretVersionOutput({\n    secretName: main.name,\n    revision: \"1\",\n});\nexport const scalewaySecretAccessPayload = dataBySecretName.apply(dataBySecretName =\u003e dataBySecretName.data);\nexport const scalewaySecretAccessPayloadById = dataBySecretId.apply(dataBySecretId =\u003e dataBySecretId.data);\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\n# Create a secret named fooii\nmain = scaleway.Secret(\"main\",\n    name=\"fooii\",\n    description=\"barr\")\n# Create a version of fooii containing data\nmain_secret_version = scaleway.SecretVersion(\"main\",\n    description=\"your description\",\n    secret_id=main.id,\n    data=\"your_secret\")\n# Retrieve the secret version specified by the secret ID and the desired version\ndata_by_secret_id = scaleway.get_secret_version_output(secret_id=main.id,\n    revision=\"1\")\n# Retrieve the secret version specified by the secret name and the desired version\ndata_by_secret_name = scaleway.get_secret_version_output(secret_name=main.name,\n    revision=\"1\")\npulumi.export(\"scalewaySecretAccessPayload\", data_by_secret_name.data)\npulumi.export(\"scalewaySecretAccessPayloadById\", data_by_secret_id.data)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a secret named fooii\n    var main = new Scaleway.Secret(\"main\", new()\n    {\n        Name = \"fooii\",\n        Description = \"barr\",\n    });\n\n    // Create a version of fooii containing data\n    var mainSecretVersion = new Scaleway.SecretVersion(\"main\", new()\n    {\n        Description = \"your description\",\n        SecretId = main.Id,\n        Data = \"your_secret\",\n    });\n\n    // Retrieve the secret version specified by the secret ID and the desired version\n    var dataBySecretId = Scaleway.GetSecretVersion.Invoke(new()\n    {\n        SecretId = main.Id,\n        Revision = \"1\",\n    });\n\n    // Retrieve the secret version specified by the secret name and the desired version\n    var dataBySecretName = Scaleway.GetSecretVersion.Invoke(new()\n    {\n        SecretName = main.Name,\n        Revision = \"1\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"scalewaySecretAccessPayload\"] = dataBySecretName.Apply(getSecretVersionResult =\u003e getSecretVersionResult.Data),\n        [\"scalewaySecretAccessPayloadById\"] = dataBySecretId.Apply(getSecretVersionResult =\u003e getSecretVersionResult.Data),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a secret named fooii\n\t\tmain, err := scaleway.NewSecret(ctx, \"main\", \u0026scaleway.SecretArgs{\n\t\t\tName:        pulumi.String(\"fooii\"),\n\t\t\tDescription: pulumi.String(\"barr\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a version of fooii containing data\n\t\t_, err = scaleway.NewSecretVersion(ctx, \"main\", \u0026scaleway.SecretVersionArgs{\n\t\t\tDescription: pulumi.String(\"your description\"),\n\t\t\tSecretId:    main.ID(),\n\t\t\tData:        pulumi.String(\"your_secret\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Retrieve the secret version specified by the secret ID and the desired version\n\t\tdataBySecretId := scaleway.LookupSecretVersionOutput(ctx, scaleway.GetSecretVersionOutputArgs{\n\t\t\tSecretId: main.ID(),\n\t\t\tRevision: pulumi.String(\"1\"),\n\t\t}, nil)\n\t\t// Retrieve the secret version specified by the secret name and the desired version\n\t\tdataBySecretName := scaleway.LookupSecretVersionOutput(ctx, scaleway.GetSecretVersionOutputArgs{\n\t\t\tSecretName: main.Name,\n\t\t\tRevision:   pulumi.String(\"1\"),\n\t\t}, nil)\n\t\tctx.Export(\"scalewaySecretAccessPayload\", dataBySecretName.ApplyT(func(dataBySecretName scaleway.GetSecretVersionResult) (*string, error) {\n\t\t\treturn \u0026dataBySecretName.Data, nil\n\t\t}).(pulumi.StringPtrOutput))\n\t\tctx.Export(\"scalewaySecretAccessPayloadById\", dataBySecretId.ApplyT(func(dataBySecretId scaleway.GetSecretVersionResult) (*string, error) {\n\t\t\treturn \u0026dataBySecretId.Data, nil\n\t\t}).(pulumi.StringPtrOutput))\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.Secret;\nimport com.pulumi.scaleway.SecretArgs;\nimport com.pulumi.scaleway.SecretVersion;\nimport com.pulumi.scaleway.SecretVersionArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetSecretVersionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a secret named fooii\n        var main = new Secret(\"main\", SecretArgs.builder()\n            .name(\"fooii\")\n            .description(\"barr\")\n            .build());\n\n        // Create a version of fooii containing data\n        var mainSecretVersion = new SecretVersion(\"mainSecretVersion\", SecretVersionArgs.builder()\n            .description(\"your description\")\n            .secretId(main.id())\n            .data(\"your_secret\")\n            .build());\n\n        // Retrieve the secret version specified by the secret ID and the desired version\n        final var dataBySecretId = ScalewayFunctions.getSecretVersion(GetSecretVersionArgs.builder()\n            .secretId(main.id())\n            .revision(\"1\")\n            .build());\n\n        // Retrieve the secret version specified by the secret name and the desired version\n        final var dataBySecretName = ScalewayFunctions.getSecretVersion(GetSecretVersionArgs.builder()\n            .secretName(main.name())\n            .revision(\"1\")\n            .build());\n\n        ctx.export(\"scalewaySecretAccessPayload\", dataBySecretName.applyValue(getSecretVersionResult -\u003e getSecretVersionResult).applyValue(dataBySecretName -\u003e dataBySecretName.applyValue(getSecretVersionResult -\u003e getSecretVersionResult.data())));\n        ctx.export(\"scalewaySecretAccessPayloadById\", dataBySecretId.applyValue(getSecretVersionResult -\u003e getSecretVersionResult).applyValue(dataBySecretId -\u003e dataBySecretId.applyValue(getSecretVersionResult -\u003e getSecretVersionResult.data())));\n    }\n}\n```\n```yaml\nresources:\n  # Create a secret named fooii\n  main:\n    type: scaleway:Secret\n    properties:\n      name: fooii\n      description: barr\n  # Create a version of fooii containing data\n  mainSecretVersion:\n    type: scaleway:SecretVersion\n    name: main\n    properties:\n      description: your description\n      secretId: ${main.id}\n      data: your_secret\nvariables:\n  # Retrieve the secret version specified by the secret ID and the desired version\n  dataBySecretId:\n    fn::invoke:\n      Function: scaleway:getSecretVersion\n      Arguments:\n        secretId: ${main.id}\n        revision: '1'\n  # Retrieve the secret version specified by the secret name and the desired version\n  dataBySecretName:\n    fn::invoke:\n      Function: scaleway:getSecretVersion\n      Arguments:\n        secretName: ${main.name}\n        revision: '1'\noutputs:\n  # Display sensitive data\n  scalewaySecretAccessPayload: ${dataBySecretName.data}\n  # Display sensitive data\n  scalewaySecretAccessPayloadById: ${dataBySecretId.data}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Data information\n\nNote: This data source provides you with access to the secret payload, which is encoded in base64.\n\nKeep in mind that this is a sensitive attribute. For more information,\nsee Sensitive Data in State.\n\n\u003e **Important:**  This property is sensitive and will not be displayed in the pulumi preview, for security reasons.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSecretVersion.\n",
                "properties": {
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Scaleway Project associated with the secret version.\n"
                    },
                    "region": {
                        "type": "string"
                    },
                    "revision": {
                        "type": "string",
                        "description": "The revision for this secret version. Refer to alternative values (ex: `latest`) in the [API documentation](https://www.scaleway.com/en/developers/api/secret-manager/#path-secret-versions-access-a-secrets-version-using-the-secrets-id)\n"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "The ID of the secret associated with the secret version. Only one of `secret_id` and `secret_name` should be specified.\n"
                    },
                    "secretName": {
                        "type": "string",
                        "description": "The name of the secret associated with the secret version.\nOnly one of `secret_id` and `secret_name` should be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSecretVersion.\n",
                "properties": {
                    "createdAt": {
                        "description": "The date and time of the secret version's creation in RFC 3339 format.\n",
                        "type": "string"
                    },
                    "data": {
                        "description": "The data payload of the secret version. This is a sensitive attribute containing the secret value. Learn more in the [data section](https://www.terraform.io/#data-information).\n",
                        "secret": true,
                        "type": "string"
                    },
                    "description": {
                        "description": "(Optional) The description of the secret version (e.g. `my-new-description`).\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "revision": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string"
                    },
                    "secretName": {
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the secret version.\n",
                        "type": "string"
                    },
                    "updatedAt": {
                        "description": "The date and time of the secret version's last update in RFC 3339 format.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "data",
                    "description",
                    "organizationId",
                    "status",
                    "updatedAt",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getTemDomain:getTemDomain": {
            "description": "Gets information about a transactional email domain.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTemDomain.\n",
                "properties": {
                    "domainId": {
                        "type": "string",
                        "description": "The domain id.\nOnly one of `name` and `domain_id` should be specified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The domain name.\nOnly one of `name` and `domain_id` should be specified.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the domain is associated with.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which the domain exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTemDomain.\n",
                "properties": {
                    "acceptTos": {
                        "type": "boolean"
                    },
                    "autoconfig": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "dkimConfig": {
                        "type": "string"
                    },
                    "dmarcConfig": {
                        "type": "string"
                    },
                    "dmarcName": {
                        "type": "string"
                    },
                    "domainId": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "lastError": {
                        "type": "string"
                    },
                    "lastValidAt": {
                        "type": "string"
                    },
                    "mxBlackhole": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nextCheckAt": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "reputations": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getTemDomainReputation:getTemDomainReputation"
                        },
                        "type": "array"
                    },
                    "revokedAt": {
                        "type": "string"
                    },
                    "smtpHost": {
                        "type": "string"
                    },
                    "smtpPort": {
                        "type": "integer"
                    },
                    "smtpPortAlternative": {
                        "type": "integer"
                    },
                    "smtpPortUnsecure": {
                        "type": "integer"
                    },
                    "smtpsAuthUser": {
                        "type": "string"
                    },
                    "smtpsPort": {
                        "type": "integer"
                    },
                    "smtpsPortAlternative": {
                        "type": "integer"
                    },
                    "spfConfig": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "required": [
                    "acceptTos",
                    "autoconfig",
                    "createdAt",
                    "dkimConfig",
                    "dmarcConfig",
                    "dmarcName",
                    "lastError",
                    "lastValidAt",
                    "mxBlackhole",
                    "nextCheckAt",
                    "reputations",
                    "revokedAt",
                    "smtpHost",
                    "smtpPort",
                    "smtpPortAlternative",
                    "smtpPortUnsecure",
                    "smtpsAuthUser",
                    "smtpsPort",
                    "smtpsPortAlternative",
                    "spfConfig",
                    "status",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getVpc:getVpc": {
            "description": "Gets information about a Scaleway Virtual Private Cloud.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by name\nconst byName = scaleway.getVpc({\n    name: \"foobar\",\n});\n// Get info by ID\nconst byId = scaleway.getVpc({\n    vpcId: \"11111111-1111-1111-1111-111111111111\",\n});\n// Get default VPC info\nconst default = scaleway.getVpc({\n    isDefault: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Get info by name\nby_name = scaleway.get_vpc(name=\"foobar\")\n# Get info by ID\nby_id = scaleway.get_vpc(vpc_id=\"11111111-1111-1111-1111-111111111111\")\n# Get default VPC info\ndefault = scaleway.get_vpc(is_default=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Get info by name\n    var byName = Scaleway.GetVpc.Invoke(new()\n    {\n        Name = \"foobar\",\n    });\n\n    // Get info by ID\n    var byId = Scaleway.GetVpc.Invoke(new()\n    {\n        VpcId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n    // Get default VPC info\n    var @default = Scaleway.GetVpc.Invoke(new()\n    {\n        IsDefault = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Get info by name\n\t\t_, err := scaleway.LookupVpc(ctx, \u0026scaleway.LookupVpcArgs{\n\t\t\tName: pulumi.StringRef(\"foobar\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Get info by ID\n\t\t_, err = scaleway.LookupVpc(ctx, \u0026scaleway.LookupVpcArgs{\n\t\t\tVpcId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Get default VPC info\n\t\t_, err = scaleway.LookupVpc(ctx, \u0026scaleway.LookupVpcArgs{\n\t\t\tIsDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetVpcArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Get info by name\n        final var byName = ScalewayFunctions.getVpc(GetVpcArgs.builder()\n            .name(\"foobar\")\n            .build());\n\n        // Get info by ID\n        final var byId = ScalewayFunctions.getVpc(GetVpcArgs.builder()\n            .vpcId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n        // Get default VPC info\n        final var default = ScalewayFunctions.getVpc(GetVpcArgs.builder()\n            .isDefault(true)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Get info by name\n  byName:\n    fn::invoke:\n      Function: scaleway:getVpc\n      Arguments:\n        name: foobar\n  # Get info by ID\n  byId:\n    fn::invoke:\n      Function: scaleway:getVpc\n      Arguments:\n        vpcId: 11111111-1111-1111-1111-111111111111\n  # Get default VPC info\n  default:\n    fn::invoke:\n      Function: scaleway:getVpc\n      Arguments:\n        isDefault: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpc.\n",
                "properties": {
                    "isDefault": {
                        "type": "boolean",
                        "description": "Whether the targeted VPC is the default VPC.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the VPC. A maximum of one of `name` and `vpc_id` should be specified.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the Organization the VPC is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the Project the VPC is associated with.\n"
                    },
                    "region": {
                        "type": "string"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "ID of the VPC. A maximum of one of `name` and `vpc_id` should be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpc.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "enableRouting": {
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "isDefault": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "vpcId": {
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "enableRouting",
                    "organizationId",
                    "tags",
                    "updatedAt",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getVpcGatewayNetwork:getVpcGatewayNetwork": {
            "description": "Gets information about a GatewayNetwork (a connection between a Public Gateway and a Private Network).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.VpcGatewayNetwork(\"main\", {\n    gatewayId: pg01.id,\n    privateNetworkId: pn01.id,\n    dhcpId: dhcp01.id,\n    cleanupDhcp: true,\n    enableMasquerade: true,\n});\nconst byId = scaleway.getVpcGatewayNetworkOutput({\n    gatewayNetworkId: main.id,\n});\nconst byGatewayAndPn = scaleway.getVpcGatewayNetwork({\n    gatewayId: pg01.id,\n    privateNetworkId: pn01.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.VpcGatewayNetwork(\"main\",\n    gateway_id=pg01[\"id\"],\n    private_network_id=pn01[\"id\"],\n    dhcp_id=dhcp01[\"id\"],\n    cleanup_dhcp=True,\n    enable_masquerade=True)\nby_id = scaleway.get_vpc_gateway_network_output(gateway_network_id=main.id)\nby_gateway_and_pn = scaleway.get_vpc_gateway_network(gateway_id=pg01[\"id\"],\n    private_network_id=pn01[\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.VpcGatewayNetwork(\"main\", new()\n    {\n        GatewayId = pg01.Id,\n        PrivateNetworkId = pn01.Id,\n        DhcpId = dhcp01.Id,\n        CleanupDhcp = true,\n        EnableMasquerade = true,\n    });\n\n    var byId = Scaleway.GetVpcGatewayNetwork.Invoke(new()\n    {\n        GatewayNetworkId = main.Id,\n    });\n\n    var byGatewayAndPn = Scaleway.GetVpcGatewayNetwork.Invoke(new()\n    {\n        GatewayId = pg01.Id,\n        PrivateNetworkId = pn01.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewVpcGatewayNetwork(ctx, \"main\", \u0026scaleway.VpcGatewayNetworkArgs{\n\t\t\tGatewayId:        pulumi.Any(pg01.Id),\n\t\t\tPrivateNetworkId: pulumi.Any(pn01.Id),\n\t\t\tDhcpId:           pulumi.Any(dhcp01.Id),\n\t\t\tCleanupDhcp:      pulumi.Bool(true),\n\t\t\tEnableMasquerade: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.LookupVpcGatewayNetworkOutput(ctx, scaleway.GetVpcGatewayNetworkOutputArgs{\n\t\t\tGatewayNetworkId: main.ID(),\n\t\t}, nil)\n\t\t_, err = scaleway.LookupVpcGatewayNetwork(ctx, \u0026scaleway.LookupVpcGatewayNetworkArgs{\n\t\t\tGatewayId:        pulumi.StringRef(pg01.Id),\n\t\t\tPrivateNetworkId: pulumi.StringRef(pn01.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcGatewayNetwork;\nimport com.pulumi.scaleway.VpcGatewayNetworkArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetVpcGatewayNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new VpcGatewayNetwork(\"main\", VpcGatewayNetworkArgs.builder()\n            .gatewayId(pg01.id())\n            .privateNetworkId(pn01.id())\n            .dhcpId(dhcp01.id())\n            .cleanupDhcp(true)\n            .enableMasquerade(true)\n            .build());\n\n        final var byId = ScalewayFunctions.getVpcGatewayNetwork(GetVpcGatewayNetworkArgs.builder()\n            .gatewayNetworkId(main.id())\n            .build());\n\n        final var byGatewayAndPn = ScalewayFunctions.getVpcGatewayNetwork(GetVpcGatewayNetworkArgs.builder()\n            .gatewayId(pg01.id())\n            .privateNetworkId(pn01.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:VpcGatewayNetwork\n    properties:\n      gatewayId: ${pg01.id}\n      privateNetworkId: ${pn01.id}\n      dhcpId: ${dhcp01.id}\n      cleanupDhcp: true\n      enableMasquerade: true\nvariables:\n  byId:\n    fn::invoke:\n      Function: scaleway:getVpcGatewayNetwork\n      Arguments:\n        gatewayNetworkId: ${main.id}\n  byGatewayAndPn:\n    fn::invoke:\n      Function: scaleway:getVpcGatewayNetwork\n      Arguments:\n        gatewayId: ${pg01.id}\n        privateNetworkId: ${pn01.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcGatewayNetwork.\n",
                "properties": {
                    "dhcpId": {
                        "type": "string"
                    },
                    "enableMasquerade": {
                        "type": "boolean"
                    },
                    "gatewayId": {
                        "type": "string"
                    },
                    "gatewayNetworkId": {
                        "type": "string",
                        "description": "ID of the GatewayNetwork.\n"
                    },
                    "privateNetworkId": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcGatewayNetwork.\n",
                "properties": {
                    "cleanupDhcp": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "dhcpId": {
                        "type": "string"
                    },
                    "enableDhcp": {
                        "type": "boolean"
                    },
                    "enableMasquerade": {
                        "type": "boolean"
                    },
                    "gatewayId": {
                        "type": "string"
                    },
                    "gatewayNetworkId": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "ipamConfigs": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getVpcGatewayNetworkIpamConfig:getVpcGatewayNetworkIpamConfig"
                        },
                        "type": "array"
                    },
                    "macAddress": {
                        "type": "string"
                    },
                    "privateNetworkId": {
                        "type": "string"
                    },
                    "staticAddress": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "cleanupDhcp",
                    "createdAt",
                    "enableDhcp",
                    "ipamConfigs",
                    "macAddress",
                    "staticAddress",
                    "status",
                    "updatedAt",
                    "zone",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getVpcPrivateNetwork:getVpcPrivateNetwork": {
            "description": "Gets information about a Private Network.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by name\nconst myName = scaleway.getVpcPrivateNetwork({\n    name: \"foobar\",\n});\n// Get info by name and VPC ID\nconst myNameAndVpcId = scaleway.getVpcPrivateNetwork({\n    name: \"foobar\",\n    vpcId: \"11111111-1111-1111-1111-111111111111\",\n});\n// Get info by IP ID\nconst myId = scaleway.getVpcPrivateNetwork({\n    privateNetworkId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Get info by name\nmy_name = scaleway.get_vpc_private_network(name=\"foobar\")\n# Get info by name and VPC ID\nmy_name_and_vpc_id = scaleway.get_vpc_private_network(name=\"foobar\",\n    vpc_id=\"11111111-1111-1111-1111-111111111111\")\n# Get info by IP ID\nmy_id = scaleway.get_vpc_private_network(private_network_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Get info by name\n    var myName = Scaleway.GetVpcPrivateNetwork.Invoke(new()\n    {\n        Name = \"foobar\",\n    });\n\n    // Get info by name and VPC ID\n    var myNameAndVpcId = Scaleway.GetVpcPrivateNetwork.Invoke(new()\n    {\n        Name = \"foobar\",\n        VpcId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n    // Get info by IP ID\n    var myId = Scaleway.GetVpcPrivateNetwork.Invoke(new()\n    {\n        PrivateNetworkId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Get info by name\n\t\t_, err := scaleway.LookupVpcPrivateNetwork(ctx, \u0026scaleway.LookupVpcPrivateNetworkArgs{\n\t\t\tName: pulumi.StringRef(\"foobar\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Get info by name and VPC ID\n\t\t_, err = scaleway.LookupVpcPrivateNetwork(ctx, \u0026scaleway.LookupVpcPrivateNetworkArgs{\n\t\t\tName:  pulumi.StringRef(\"foobar\"),\n\t\t\tVpcId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Get info by IP ID\n\t\t_, err = scaleway.LookupVpcPrivateNetwork(ctx, \u0026scaleway.LookupVpcPrivateNetworkArgs{\n\t\t\tPrivateNetworkId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetVpcPrivateNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Get info by name\n        final var myName = ScalewayFunctions.getVpcPrivateNetwork(GetVpcPrivateNetworkArgs.builder()\n            .name(\"foobar\")\n            .build());\n\n        // Get info by name and VPC ID\n        final var myNameAndVpcId = ScalewayFunctions.getVpcPrivateNetwork(GetVpcPrivateNetworkArgs.builder()\n            .name(\"foobar\")\n            .vpcId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n        // Get info by IP ID\n        final var myId = ScalewayFunctions.getVpcPrivateNetwork(GetVpcPrivateNetworkArgs.builder()\n            .privateNetworkId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Get info by name\n  myName:\n    fn::invoke:\n      Function: scaleway:getVpcPrivateNetwork\n      Arguments:\n        name: foobar\n  # Get info by name and VPC ID\n  myNameAndVpcId:\n    fn::invoke:\n      Function: scaleway:getVpcPrivateNetwork\n      Arguments:\n        name: foobar\n        vpcId: 11111111-1111-1111-1111-111111111111\n  # Get info by IP ID\n  myId:\n    fn::invoke:\n      Function: scaleway:getVpcPrivateNetwork\n      Arguments:\n        privateNetworkId: 11111111-1111-1111-1111-111111111111\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcPrivateNetwork.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Private Network. Cannot be used with `private_network_id`.\n"
                    },
                    "privateNetworkId": {
                        "type": "string",
                        "description": "ID of the Private Network. Cannot be used with `name` or `vpc_id`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Project the Private Network is associated with.\n"
                    },
                    "region": {
                        "type": "string"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "ID of the VPC the Private Network is in. Cannot be used with `private_network_id`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcPrivateNetwork.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "ipv4Subnets": {
                        "description": "The IPv4 subnet associated with the Private Network.\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getVpcPrivateNetworkIpv4Subnet:getVpcPrivateNetworkIpv4Subnet"
                        },
                        "type": "array"
                    },
                    "ipv6Subnets": {
                        "description": "The IPv6 subnets associated with the Private Network.\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getVpcPrivateNetworkIpv6Subnet:getVpcPrivateNetworkIpv6Subnet"
                        },
                        "type": "array"
                    },
                    "isRegional": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "privateNetworkId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "vpcId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "ipv4Subnets",
                    "ipv6Subnets",
                    "isRegional",
                    "organizationId",
                    "tags",
                    "updatedAt",
                    "zone",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getVpcPublicGateway:getVpcPublicGateway": {
            "description": "Gets information about a Public Gateway.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.VpcPublicGateway(\"main\", {\n    name: \"demo\",\n    type: \"VPC-GW-S\",\n    zone: \"nl-ams-1\",\n});\nconst pgTestByName = scaleway.getVpcPublicGatewayOutput({\n    name: main.name,\n    zone: \"nl-ams-1\",\n});\nconst pgTestById = scaleway.getVpcPublicGatewayOutput({\n    publicGatewayId: main.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.VpcPublicGateway(\"main\",\n    name=\"demo\",\n    type=\"VPC-GW-S\",\n    zone=\"nl-ams-1\")\npg_test_by_name = scaleway.get_vpc_public_gateway_output(name=main.name,\n    zone=\"nl-ams-1\")\npg_test_by_id = scaleway.get_vpc_public_gateway_output(public_gateway_id=main.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.VpcPublicGateway(\"main\", new()\n    {\n        Name = \"demo\",\n        Type = \"VPC-GW-S\",\n        Zone = \"nl-ams-1\",\n    });\n\n    var pgTestByName = Scaleway.GetVpcPublicGateway.Invoke(new()\n    {\n        Name = main.Name,\n        Zone = \"nl-ams-1\",\n    });\n\n    var pgTestById = Scaleway.GetVpcPublicGateway.Invoke(new()\n    {\n        PublicGatewayId = main.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewVpcPublicGateway(ctx, \"main\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tName: pulumi.String(\"demo\"),\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t\tZone: pulumi.String(\"nl-ams-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.LookupVpcPublicGatewayOutput(ctx, scaleway.GetVpcPublicGatewayOutputArgs{\n\t\t\tName: main.Name,\n\t\t\tZone: pulumi.String(\"nl-ams-1\"),\n\t\t}, nil)\n\t\t_ = scaleway.LookupVpcPublicGatewayOutput(ctx, scaleway.GetVpcPublicGatewayOutputArgs{\n\t\t\tPublicGatewayId: main.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPublicGateway;\nimport com.pulumi.scaleway.VpcPublicGatewayArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetVpcPublicGatewayArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new VpcPublicGateway(\"main\", VpcPublicGatewayArgs.builder()\n            .name(\"demo\")\n            .type(\"VPC-GW-S\")\n            .zone(\"nl-ams-1\")\n            .build());\n\n        final var pgTestByName = ScalewayFunctions.getVpcPublicGateway(GetVpcPublicGatewayArgs.builder()\n            .name(main.name())\n            .zone(\"nl-ams-1\")\n            .build());\n\n        final var pgTestById = ScalewayFunctions.getVpcPublicGateway(GetVpcPublicGatewayArgs.builder()\n            .publicGatewayId(main.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:VpcPublicGateway\n    properties:\n      name: demo\n      type: VPC-GW-S\n      zone: nl-ams-1\nvariables:\n  pgTestByName:\n    fn::invoke:\n      Function: scaleway:getVpcPublicGateway\n      Arguments:\n        name: ${main.name}\n        zone: nl-ams-1\n  pgTestById:\n    fn::invoke:\n      Function: scaleway:getVpcPublicGateway\n      Arguments:\n        publicGatewayId: ${main.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcPublicGateway.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Exact name of the Public Gateway.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Project the Public Gateway is associated with.\n"
                    },
                    "publicGatewayId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The Public Gateway's zone.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcPublicGateway.\n",
                "properties": {
                    "bastionEnabled": {
                        "type": "boolean"
                    },
                    "bastionPort": {
                        "type": "integer"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "enableSmtp": {
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "ipId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "publicGatewayId": {
                        "type": "string"
                    },
                    "refreshSshKeys": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "upstreamDnsServers": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "bastionEnabled",
                    "bastionPort",
                    "createdAt",
                    "enableSmtp",
                    "ipId",
                    "organizationId",
                    "refreshSshKeys",
                    "status",
                    "tags",
                    "type",
                    "updatedAt",
                    "upstreamDnsServers",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getVpcPublicGatewayDhcp:getVpcPublicGatewayDhcp": {
            "description": "Gets information about a Public Gateway DHCP configuration.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.VpcPublicGatewayDhcp(\"main\", {subnet: \"192.168.0.0/24\"});\nconst dhcpById = scaleway.getVpcPublicGatewayDhcpOutput({\n    dhcpId: main.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.VpcPublicGatewayDhcp(\"main\", subnet=\"192.168.0.0/24\")\ndhcp_by_id = scaleway.get_vpc_public_gateway_dhcp_output(dhcp_id=main.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.VpcPublicGatewayDhcp(\"main\", new()\n    {\n        Subnet = \"192.168.0.0/24\",\n    });\n\n    var dhcpById = Scaleway.GetVpcPublicGatewayDhcp.Invoke(new()\n    {\n        DhcpId = main.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewVpcPublicGatewayDhcp(ctx, \"main\", \u0026scaleway.VpcPublicGatewayDhcpArgs{\n\t\t\tSubnet: pulumi.String(\"192.168.0.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.LookupVpcPublicGatewayDhcpOutput(ctx, scaleway.GetVpcPublicGatewayDhcpOutputArgs{\n\t\t\tDhcpId: main.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetVpcPublicGatewayDhcpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new VpcPublicGatewayDhcp(\"main\", VpcPublicGatewayDhcpArgs.builder()\n            .subnet(\"192.168.0.0/24\")\n            .build());\n\n        final var dhcpById = ScalewayFunctions.getVpcPublicGatewayDhcp(GetVpcPublicGatewayDhcpArgs.builder()\n            .dhcpId(main.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:VpcPublicGatewayDhcp\n    properties:\n      subnet: 192.168.0.0/24\nvariables:\n  dhcpById:\n    fn::invoke:\n      Function: scaleway:getVpcPublicGatewayDhcp\n      Arguments:\n        dhcpId: ${main.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcPublicGatewayDhcp.\n",
                "properties": {
                    "dhcpId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "dhcpId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVpcPublicGatewayDhcp.\n",
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "dhcpId": {
                        "type": "string"
                    },
                    "dnsLocalName": {
                        "type": "string"
                    },
                    "dnsSearches": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "dnsServersOverrides": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "enableDynamic": {
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "poolHigh": {
                        "type": "string"
                    },
                    "poolLow": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "pushDefaultRoute": {
                        "type": "boolean"
                    },
                    "pushDnsServer": {
                        "type": "boolean"
                    },
                    "rebindTimer": {
                        "type": "integer"
                    },
                    "renewTimer": {
                        "type": "integer"
                    },
                    "subnet": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "validLifetime": {
                        "type": "integer"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "address",
                    "createdAt",
                    "dhcpId",
                    "dnsLocalName",
                    "dnsSearches",
                    "dnsServersOverrides",
                    "enableDynamic",
                    "organizationId",
                    "poolHigh",
                    "poolLow",
                    "projectId",
                    "pushDefaultRoute",
                    "pushDnsServer",
                    "rebindTimer",
                    "renewTimer",
                    "subnet",
                    "updatedAt",
                    "validLifetime",
                    "zone",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getVpcPublicGatewayDhcpReservation:getVpcPublicGatewayDhcpReservation": {
            "description": "Gets information about a DHCP entry. For further information, please see the\nAPI [documentation](https://www.scaleway.com/en/developers/api/public-gateway/#path-dhcp-entries-list-dhcp-entries)/\n\n## Example Dynamic\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.VpcPrivateNetwork(\"main\", {});\nconst mainInstanceServer = new scaleway.InstanceServer(\"main\", {\n    image: \"ubuntu_jammy\",\n    type: \"DEV1-S\",\n    zone: \"fr-par-1\",\n});\nconst mainInstancePrivateNic = new scaleway.InstancePrivateNic(\"main\", {\n    serverId: mainInstanceServer.id,\n    privateNetworkId: main.id,\n});\nconst mainVpcPublicGatewayIp = new scaleway.VpcPublicGatewayIp(\"main\", {});\nconst mainVpcPublicGatewayDhcp = new scaleway.VpcPublicGatewayDhcp(\"main\", {subnet: \"192.168.1.0/24\"});\nconst mainVpcPublicGateway = new scaleway.VpcPublicGateway(\"main\", {\n    name: \"foobar\",\n    type: \"VPC-GW-S\",\n    ipId: mainVpcPublicGatewayIp.id,\n});\nconst mainVpcGatewayNetwork = new scaleway.VpcGatewayNetwork(\"main\", {\n    gatewayId: mainVpcPublicGateway.id,\n    privateNetworkId: main.id,\n    dhcpId: mainVpcPublicGatewayDhcp.id,\n    cleanupDhcp: true,\n    enableMasquerade: true,\n});\n//# Retrieve the dynamic entries generated by mac address \u0026 gateway network\nconst byMacAddressAndGwNetwork = scaleway.getVpcPublicGatewayDhcpReservationOutput({\n    macAddress: mainInstancePrivateNic.macAddress,\n    gatewayNetworkId: mainVpcGatewayNetwork.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.VpcPrivateNetwork(\"main\")\nmain_instance_server = scaleway.InstanceServer(\"main\",\n    image=\"ubuntu_jammy\",\n    type=\"DEV1-S\",\n    zone=\"fr-par-1\")\nmain_instance_private_nic = scaleway.InstancePrivateNic(\"main\",\n    server_id=main_instance_server.id,\n    private_network_id=main.id)\nmain_vpc_public_gateway_ip = scaleway.VpcPublicGatewayIp(\"main\")\nmain_vpc_public_gateway_dhcp = scaleway.VpcPublicGatewayDhcp(\"main\", subnet=\"192.168.1.0/24\")\nmain_vpc_public_gateway = scaleway.VpcPublicGateway(\"main\",\n    name=\"foobar\",\n    type=\"VPC-GW-S\",\n    ip_id=main_vpc_public_gateway_ip.id)\nmain_vpc_gateway_network = scaleway.VpcGatewayNetwork(\"main\",\n    gateway_id=main_vpc_public_gateway.id,\n    private_network_id=main.id,\n    dhcp_id=main_vpc_public_gateway_dhcp.id,\n    cleanup_dhcp=True,\n    enable_masquerade=True)\n## Retrieve the dynamic entries generated by mac address \u0026 gateway network\nby_mac_address_and_gw_network = scaleway.get_vpc_public_gateway_dhcp_reservation_output(mac_address=main_instance_private_nic.mac_address,\n    gateway_network_id=main_vpc_gateway_network.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.VpcPrivateNetwork(\"main\");\n\n    var mainInstanceServer = new Scaleway.InstanceServer(\"main\", new()\n    {\n        Image = \"ubuntu_jammy\",\n        Type = \"DEV1-S\",\n        Zone = \"fr-par-1\",\n    });\n\n    var mainInstancePrivateNic = new Scaleway.InstancePrivateNic(\"main\", new()\n    {\n        ServerId = mainInstanceServer.Id,\n        PrivateNetworkId = main.Id,\n    });\n\n    var mainVpcPublicGatewayIp = new Scaleway.VpcPublicGatewayIp(\"main\");\n\n    var mainVpcPublicGatewayDhcp = new Scaleway.VpcPublicGatewayDhcp(\"main\", new()\n    {\n        Subnet = \"192.168.1.0/24\",\n    });\n\n    var mainVpcPublicGateway = new Scaleway.VpcPublicGateway(\"main\", new()\n    {\n        Name = \"foobar\",\n        Type = \"VPC-GW-S\",\n        IpId = mainVpcPublicGatewayIp.Id,\n    });\n\n    var mainVpcGatewayNetwork = new Scaleway.VpcGatewayNetwork(\"main\", new()\n    {\n        GatewayId = mainVpcPublicGateway.Id,\n        PrivateNetworkId = main.Id,\n        DhcpId = mainVpcPublicGatewayDhcp.Id,\n        CleanupDhcp = true,\n        EnableMasquerade = true,\n    });\n\n    //# Retrieve the dynamic entries generated by mac address \u0026 gateway network\n    var byMacAddressAndGwNetwork = Scaleway.GetVpcPublicGatewayDhcpReservation.Invoke(new()\n    {\n        MacAddress = mainInstancePrivateNic.MacAddress,\n        GatewayNetworkId = mainVpcGatewayNetwork.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewVpcPrivateNetwork(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainInstanceServer, err := scaleway.NewInstanceServer(ctx, \"main\", \u0026scaleway.InstanceServerArgs{\n\t\t\tImage: pulumi.String(\"ubuntu_jammy\"),\n\t\t\tType:  pulumi.String(\"DEV1-S\"),\n\t\t\tZone:  pulumi.String(\"fr-par-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainInstancePrivateNic, err := scaleway.NewInstancePrivateNic(ctx, \"main\", \u0026scaleway.InstancePrivateNicArgs{\n\t\t\tServerId:         mainInstanceServer.ID(),\n\t\t\tPrivateNetworkId: main.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcPublicGatewayIp, err := scaleway.NewVpcPublicGatewayIp(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcPublicGatewayDhcp, err := scaleway.NewVpcPublicGatewayDhcp(ctx, \"main\", \u0026scaleway.VpcPublicGatewayDhcpArgs{\n\t\t\tSubnet: pulumi.String(\"192.168.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcPublicGateway, err := scaleway.NewVpcPublicGateway(ctx, \"main\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tName: pulumi.String(\"foobar\"),\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t\tIpId: mainVpcPublicGatewayIp.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcGatewayNetwork, err := scaleway.NewVpcGatewayNetwork(ctx, \"main\", \u0026scaleway.VpcGatewayNetworkArgs{\n\t\t\tGatewayId:        mainVpcPublicGateway.ID(),\n\t\t\tPrivateNetworkId: main.ID(),\n\t\t\tDhcpId:           mainVpcPublicGatewayDhcp.ID(),\n\t\t\tCleanupDhcp:      pulumi.Bool(true),\n\t\t\tEnableMasquerade: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// # Retrieve the dynamic entries generated by mac address \u0026 gateway network\n\t\t_ = scaleway.LookupVpcPublicGatewayDhcpReservationOutput(ctx, scaleway.GetVpcPublicGatewayDhcpReservationOutputArgs{\n\t\t\tMacAddress:       mainInstancePrivateNic.MacAddress,\n\t\t\tGatewayNetworkId: mainVpcGatewayNetwork.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.InstancePrivateNic;\nimport com.pulumi.scaleway.InstancePrivateNicArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayIp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpArgs;\nimport com.pulumi.scaleway.VpcPublicGateway;\nimport com.pulumi.scaleway.VpcPublicGatewayArgs;\nimport com.pulumi.scaleway.VpcGatewayNetwork;\nimport com.pulumi.scaleway.VpcGatewayNetworkArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetVpcPublicGatewayDhcpReservationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new VpcPrivateNetwork(\"main\");\n\n        var mainInstanceServer = new InstanceServer(\"mainInstanceServer\", InstanceServerArgs.builder()\n            .image(\"ubuntu_jammy\")\n            .type(\"DEV1-S\")\n            .zone(\"fr-par-1\")\n            .build());\n\n        var mainInstancePrivateNic = new InstancePrivateNic(\"mainInstancePrivateNic\", InstancePrivateNicArgs.builder()\n            .serverId(mainInstanceServer.id())\n            .privateNetworkId(main.id())\n            .build());\n\n        var mainVpcPublicGatewayIp = new VpcPublicGatewayIp(\"mainVpcPublicGatewayIp\");\n\n        var mainVpcPublicGatewayDhcp = new VpcPublicGatewayDhcp(\"mainVpcPublicGatewayDhcp\", VpcPublicGatewayDhcpArgs.builder()\n            .subnet(\"192.168.1.0/24\")\n            .build());\n\n        var mainVpcPublicGateway = new VpcPublicGateway(\"mainVpcPublicGateway\", VpcPublicGatewayArgs.builder()\n            .name(\"foobar\")\n            .type(\"VPC-GW-S\")\n            .ipId(mainVpcPublicGatewayIp.id())\n            .build());\n\n        var mainVpcGatewayNetwork = new VpcGatewayNetwork(\"mainVpcGatewayNetwork\", VpcGatewayNetworkArgs.builder()\n            .gatewayId(mainVpcPublicGateway.id())\n            .privateNetworkId(main.id())\n            .dhcpId(mainVpcPublicGatewayDhcp.id())\n            .cleanupDhcp(true)\n            .enableMasquerade(true)\n            .build());\n\n        //# Retrieve the dynamic entries generated by mac address \u0026 gateway network\n        final var byMacAddressAndGwNetwork = ScalewayFunctions.getVpcPublicGatewayDhcpReservation(GetVpcPublicGatewayDhcpReservationArgs.builder()\n            .macAddress(mainInstancePrivateNic.macAddress())\n            .gatewayNetworkId(mainVpcGatewayNetwork.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:VpcPrivateNetwork\n  mainInstanceServer:\n    type: scaleway:InstanceServer\n    name: main\n    properties:\n      image: ubuntu_jammy\n      type: DEV1-S\n      zone: fr-par-1\n  mainInstancePrivateNic:\n    type: scaleway:InstancePrivateNic\n    name: main\n    properties:\n      serverId: ${mainInstanceServer.id}\n      privateNetworkId: ${main.id}\n  mainVpcPublicGatewayIp:\n    type: scaleway:VpcPublicGatewayIp\n    name: main\n  mainVpcPublicGatewayDhcp:\n    type: scaleway:VpcPublicGatewayDhcp\n    name: main\n    properties:\n      subnet: 192.168.1.0/24\n  mainVpcPublicGateway:\n    type: scaleway:VpcPublicGateway\n    name: main\n    properties:\n      name: foobar\n      type: VPC-GW-S\n      ipId: ${mainVpcPublicGatewayIp.id}\n  mainVpcGatewayNetwork:\n    type: scaleway:VpcGatewayNetwork\n    name: main\n    properties:\n      gatewayId: ${mainVpcPublicGateway.id}\n      privateNetworkId: ${main.id}\n      dhcpId: ${mainVpcPublicGatewayDhcp.id}\n      cleanupDhcp: true\n      enableMasquerade: true\nvariables:\n  ## Retrieve the dynamic entries generated by mac address \u0026 gateway network\n  byMacAddressAndGwNetwork:\n    fn::invoke:\n      Function: scaleway:getVpcPublicGatewayDhcpReservation\n      Arguments:\n        macAddress: ${mainInstancePrivateNic.macAddress}\n        gatewayNetworkId: ${mainVpcGatewayNetwork.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Example Static and PAT Rule\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.VpcPrivateNetwork(\"main\", {});\nconst mainInstanceSecurityGroup = new scaleway.InstanceSecurityGroup(\"main\", {\n    inboundDefaultPolicy: \"drop\",\n    outboundDefaultPolicy: \"accept\",\n    inboundRules: [{\n        action: \"accept\",\n        port: 22,\n    }],\n});\nconst mainInstanceServer = new scaleway.InstanceServer(\"main\", {\n    image: \"ubuntu_jammy\",\n    type: \"DEV1-S\",\n    zone: \"fr-par-1\",\n    securityGroupId: mainInstanceSecurityGroup.id,\n});\nconst mainInstancePrivateNic = new scaleway.InstancePrivateNic(\"main\", {\n    serverId: mainInstanceServer.id,\n    privateNetworkId: main.id,\n});\nconst mainVpcPublicGatewayIp = new scaleway.VpcPublicGatewayIp(\"main\", {});\nconst mainVpcPublicGatewayDhcp = new scaleway.VpcPublicGatewayDhcp(\"main\", {subnet: \"192.168.1.0/24\"});\nconst mainVpcPublicGateway = new scaleway.VpcPublicGateway(\"main\", {\n    name: \"foobar\",\n    type: \"VPC-GW-S\",\n    ipId: mainVpcPublicGatewayIp.id,\n});\nconst mainVpcGatewayNetwork = new scaleway.VpcGatewayNetwork(\"main\", {\n    gatewayId: mainVpcPublicGateway.id,\n    privateNetworkId: main.id,\n    dhcpId: mainVpcPublicGatewayDhcp.id,\n    cleanupDhcp: true,\n    enableMasquerade: true,\n});\nconst mainVpcPublicGatewayDhcpReservation = new scaleway.VpcPublicGatewayDhcpReservation(\"main\", {\n    gatewayNetworkId: mainVpcGatewayNetwork.id,\n    macAddress: mainInstancePrivateNic.macAddress,\n    ipAddress: \"192.168.1.4\",\n});\n//## VPC PAT RULE\nconst mainVpcPublicGatewayPatRule = new scaleway.VpcPublicGatewayPatRule(\"main\", {\n    gatewayId: mainVpcPublicGateway.id,\n    privateIp: mainVpcPublicGatewayDhcpReservation.ipAddress,\n    privatePort: 22,\n    publicPort: 2222,\n    protocol: \"tcp\",\n});\nconst byId = scaleway.getVpcPublicGatewayDhcpReservationOutput({\n    reservationId: mainVpcPublicGatewayDhcpReservation.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.VpcPrivateNetwork(\"main\")\nmain_instance_security_group = scaleway.InstanceSecurityGroup(\"main\",\n    inbound_default_policy=\"drop\",\n    outbound_default_policy=\"accept\",\n    inbound_rules=[{\n        \"action\": \"accept\",\n        \"port\": 22,\n    }])\nmain_instance_server = scaleway.InstanceServer(\"main\",\n    image=\"ubuntu_jammy\",\n    type=\"DEV1-S\",\n    zone=\"fr-par-1\",\n    security_group_id=main_instance_security_group.id)\nmain_instance_private_nic = scaleway.InstancePrivateNic(\"main\",\n    server_id=main_instance_server.id,\n    private_network_id=main.id)\nmain_vpc_public_gateway_ip = scaleway.VpcPublicGatewayIp(\"main\")\nmain_vpc_public_gateway_dhcp = scaleway.VpcPublicGatewayDhcp(\"main\", subnet=\"192.168.1.0/24\")\nmain_vpc_public_gateway = scaleway.VpcPublicGateway(\"main\",\n    name=\"foobar\",\n    type=\"VPC-GW-S\",\n    ip_id=main_vpc_public_gateway_ip.id)\nmain_vpc_gateway_network = scaleway.VpcGatewayNetwork(\"main\",\n    gateway_id=main_vpc_public_gateway.id,\n    private_network_id=main.id,\n    dhcp_id=main_vpc_public_gateway_dhcp.id,\n    cleanup_dhcp=True,\n    enable_masquerade=True)\nmain_vpc_public_gateway_dhcp_reservation = scaleway.VpcPublicGatewayDhcpReservation(\"main\",\n    gateway_network_id=main_vpc_gateway_network.id,\n    mac_address=main_instance_private_nic.mac_address,\n    ip_address=\"192.168.1.4\")\n### VPC PAT RULE\nmain_vpc_public_gateway_pat_rule = scaleway.VpcPublicGatewayPatRule(\"main\",\n    gateway_id=main_vpc_public_gateway.id,\n    private_ip=main_vpc_public_gateway_dhcp_reservation.ip_address,\n    private_port=22,\n    public_port=2222,\n    protocol=\"tcp\")\nby_id = scaleway.get_vpc_public_gateway_dhcp_reservation_output(reservation_id=main_vpc_public_gateway_dhcp_reservation.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.VpcPrivateNetwork(\"main\");\n\n    var mainInstanceSecurityGroup = new Scaleway.InstanceSecurityGroup(\"main\", new()\n    {\n        InboundDefaultPolicy = \"drop\",\n        OutboundDefaultPolicy = \"accept\",\n        InboundRules = new[]\n        {\n            new Scaleway.Inputs.InstanceSecurityGroupInboundRuleArgs\n            {\n                Action = \"accept\",\n                Port = 22,\n            },\n        },\n    });\n\n    var mainInstanceServer = new Scaleway.InstanceServer(\"main\", new()\n    {\n        Image = \"ubuntu_jammy\",\n        Type = \"DEV1-S\",\n        Zone = \"fr-par-1\",\n        SecurityGroupId = mainInstanceSecurityGroup.Id,\n    });\n\n    var mainInstancePrivateNic = new Scaleway.InstancePrivateNic(\"main\", new()\n    {\n        ServerId = mainInstanceServer.Id,\n        PrivateNetworkId = main.Id,\n    });\n\n    var mainVpcPublicGatewayIp = new Scaleway.VpcPublicGatewayIp(\"main\");\n\n    var mainVpcPublicGatewayDhcp = new Scaleway.VpcPublicGatewayDhcp(\"main\", new()\n    {\n        Subnet = \"192.168.1.0/24\",\n    });\n\n    var mainVpcPublicGateway = new Scaleway.VpcPublicGateway(\"main\", new()\n    {\n        Name = \"foobar\",\n        Type = \"VPC-GW-S\",\n        IpId = mainVpcPublicGatewayIp.Id,\n    });\n\n    var mainVpcGatewayNetwork = new Scaleway.VpcGatewayNetwork(\"main\", new()\n    {\n        GatewayId = mainVpcPublicGateway.Id,\n        PrivateNetworkId = main.Id,\n        DhcpId = mainVpcPublicGatewayDhcp.Id,\n        CleanupDhcp = true,\n        EnableMasquerade = true,\n    });\n\n    var mainVpcPublicGatewayDhcpReservation = new Scaleway.VpcPublicGatewayDhcpReservation(\"main\", new()\n    {\n        GatewayNetworkId = mainVpcGatewayNetwork.Id,\n        MacAddress = mainInstancePrivateNic.MacAddress,\n        IpAddress = \"192.168.1.4\",\n    });\n\n    //## VPC PAT RULE\n    var mainVpcPublicGatewayPatRule = new Scaleway.VpcPublicGatewayPatRule(\"main\", new()\n    {\n        GatewayId = mainVpcPublicGateway.Id,\n        PrivateIp = mainVpcPublicGatewayDhcpReservation.IpAddress,\n        PrivatePort = 22,\n        PublicPort = 2222,\n        Protocol = \"tcp\",\n    });\n\n    var byId = Scaleway.GetVpcPublicGatewayDhcpReservation.Invoke(new()\n    {\n        ReservationId = mainVpcPublicGatewayDhcpReservation.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewVpcPrivateNetwork(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainInstanceSecurityGroup, err := scaleway.NewInstanceSecurityGroup(ctx, \"main\", \u0026scaleway.InstanceSecurityGroupArgs{\n\t\t\tInboundDefaultPolicy:  pulumi.String(\"drop\"),\n\t\t\tOutboundDefaultPolicy: pulumi.String(\"accept\"),\n\t\t\tInboundRules: scaleway.InstanceSecurityGroupInboundRuleArray{\n\t\t\t\t\u0026scaleway.InstanceSecurityGroupInboundRuleArgs{\n\t\t\t\t\tAction: pulumi.String(\"accept\"),\n\t\t\t\t\tPort:   pulumi.Int(22),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainInstanceServer, err := scaleway.NewInstanceServer(ctx, \"main\", \u0026scaleway.InstanceServerArgs{\n\t\t\tImage:           pulumi.String(\"ubuntu_jammy\"),\n\t\t\tType:            pulumi.String(\"DEV1-S\"),\n\t\t\tZone:            pulumi.String(\"fr-par-1\"),\n\t\t\tSecurityGroupId: mainInstanceSecurityGroup.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainInstancePrivateNic, err := scaleway.NewInstancePrivateNic(ctx, \"main\", \u0026scaleway.InstancePrivateNicArgs{\n\t\t\tServerId:         mainInstanceServer.ID(),\n\t\t\tPrivateNetworkId: main.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcPublicGatewayIp, err := scaleway.NewVpcPublicGatewayIp(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcPublicGatewayDhcp, err := scaleway.NewVpcPublicGatewayDhcp(ctx, \"main\", \u0026scaleway.VpcPublicGatewayDhcpArgs{\n\t\t\tSubnet: pulumi.String(\"192.168.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcPublicGateway, err := scaleway.NewVpcPublicGateway(ctx, \"main\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tName: pulumi.String(\"foobar\"),\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t\tIpId: mainVpcPublicGatewayIp.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcGatewayNetwork, err := scaleway.NewVpcGatewayNetwork(ctx, \"main\", \u0026scaleway.VpcGatewayNetworkArgs{\n\t\t\tGatewayId:        mainVpcPublicGateway.ID(),\n\t\t\tPrivateNetworkId: main.ID(),\n\t\t\tDhcpId:           mainVpcPublicGatewayDhcp.ID(),\n\t\t\tCleanupDhcp:      pulumi.Bool(true),\n\t\t\tEnableMasquerade: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmainVpcPublicGatewayDhcpReservation, err := scaleway.NewVpcPublicGatewayDhcpReservation(ctx, \"main\", \u0026scaleway.VpcPublicGatewayDhcpReservationArgs{\n\t\t\tGatewayNetworkId: mainVpcGatewayNetwork.ID(),\n\t\t\tMacAddress:       mainInstancePrivateNic.MacAddress,\n\t\t\tIpAddress:        pulumi.String(\"192.168.1.4\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// ## VPC PAT RULE\n\t\t_, err = scaleway.NewVpcPublicGatewayPatRule(ctx, \"main\", \u0026scaleway.VpcPublicGatewayPatRuleArgs{\n\t\t\tGatewayId:   mainVpcPublicGateway.ID(),\n\t\t\tPrivateIp:   mainVpcPublicGatewayDhcpReservation.IpAddress,\n\t\t\tPrivatePort: pulumi.Int(22),\n\t\t\tPublicPort:  pulumi.Int(2222),\n\t\t\tProtocol:    pulumi.String(\"tcp\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.LookupVpcPublicGatewayDhcpReservationOutput(ctx, scaleway.GetVpcPublicGatewayDhcpReservationOutputArgs{\n\t\t\tReservationId: mainVpcPublicGatewayDhcpReservation.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.InstanceSecurityGroup;\nimport com.pulumi.scaleway.InstanceSecurityGroupArgs;\nimport com.pulumi.scaleway.inputs.InstanceSecurityGroupInboundRuleArgs;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.InstancePrivateNic;\nimport com.pulumi.scaleway.InstancePrivateNicArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayIp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpArgs;\nimport com.pulumi.scaleway.VpcPublicGateway;\nimport com.pulumi.scaleway.VpcPublicGatewayArgs;\nimport com.pulumi.scaleway.VpcGatewayNetwork;\nimport com.pulumi.scaleway.VpcGatewayNetworkArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpReservation;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpReservationArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayPatRule;\nimport com.pulumi.scaleway.VpcPublicGatewayPatRuleArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetVpcPublicGatewayDhcpReservationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new VpcPrivateNetwork(\"main\");\n\n        var mainInstanceSecurityGroup = new InstanceSecurityGroup(\"mainInstanceSecurityGroup\", InstanceSecurityGroupArgs.builder()\n            .inboundDefaultPolicy(\"drop\")\n            .outboundDefaultPolicy(\"accept\")\n            .inboundRules(InstanceSecurityGroupInboundRuleArgs.builder()\n                .action(\"accept\")\n                .port(\"22\")\n                .build())\n            .build());\n\n        var mainInstanceServer = new InstanceServer(\"mainInstanceServer\", InstanceServerArgs.builder()\n            .image(\"ubuntu_jammy\")\n            .type(\"DEV1-S\")\n            .zone(\"fr-par-1\")\n            .securityGroupId(mainInstanceSecurityGroup.id())\n            .build());\n\n        var mainInstancePrivateNic = new InstancePrivateNic(\"mainInstancePrivateNic\", InstancePrivateNicArgs.builder()\n            .serverId(mainInstanceServer.id())\n            .privateNetworkId(main.id())\n            .build());\n\n        var mainVpcPublicGatewayIp = new VpcPublicGatewayIp(\"mainVpcPublicGatewayIp\");\n\n        var mainVpcPublicGatewayDhcp = new VpcPublicGatewayDhcp(\"mainVpcPublicGatewayDhcp\", VpcPublicGatewayDhcpArgs.builder()\n            .subnet(\"192.168.1.0/24\")\n            .build());\n\n        var mainVpcPublicGateway = new VpcPublicGateway(\"mainVpcPublicGateway\", VpcPublicGatewayArgs.builder()\n            .name(\"foobar\")\n            .type(\"VPC-GW-S\")\n            .ipId(mainVpcPublicGatewayIp.id())\n            .build());\n\n        var mainVpcGatewayNetwork = new VpcGatewayNetwork(\"mainVpcGatewayNetwork\", VpcGatewayNetworkArgs.builder()\n            .gatewayId(mainVpcPublicGateway.id())\n            .privateNetworkId(main.id())\n            .dhcpId(mainVpcPublicGatewayDhcp.id())\n            .cleanupDhcp(true)\n            .enableMasquerade(true)\n            .build());\n\n        var mainVpcPublicGatewayDhcpReservation = new VpcPublicGatewayDhcpReservation(\"mainVpcPublicGatewayDhcpReservation\", VpcPublicGatewayDhcpReservationArgs.builder()\n            .gatewayNetworkId(mainVpcGatewayNetwork.id())\n            .macAddress(mainInstancePrivateNic.macAddress())\n            .ipAddress(\"192.168.1.4\")\n            .build());\n\n        //## VPC PAT RULE\n        var mainVpcPublicGatewayPatRule = new VpcPublicGatewayPatRule(\"mainVpcPublicGatewayPatRule\", VpcPublicGatewayPatRuleArgs.builder()\n            .gatewayId(mainVpcPublicGateway.id())\n            .privateIp(mainVpcPublicGatewayDhcpReservation.ipAddress())\n            .privatePort(22)\n            .publicPort(2222)\n            .protocol(\"tcp\")\n            .build());\n\n        final var byId = ScalewayFunctions.getVpcPublicGatewayDhcpReservation(GetVpcPublicGatewayDhcpReservationArgs.builder()\n            .reservationId(mainVpcPublicGatewayDhcpReservation.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:VpcPrivateNetwork\n  mainInstanceSecurityGroup:\n    type: scaleway:InstanceSecurityGroup\n    name: main\n    properties:\n      inboundDefaultPolicy: drop\n      outboundDefaultPolicy: accept\n      inboundRules:\n        - action: accept\n          port: '22'\n  mainInstanceServer:\n    type: scaleway:InstanceServer\n    name: main\n    properties:\n      image: ubuntu_jammy\n      type: DEV1-S\n      zone: fr-par-1\n      securityGroupId: ${mainInstanceSecurityGroup.id}\n  mainInstancePrivateNic:\n    type: scaleway:InstancePrivateNic\n    name: main\n    properties:\n      serverId: ${mainInstanceServer.id}\n      privateNetworkId: ${main.id}\n  mainVpcPublicGatewayIp:\n    type: scaleway:VpcPublicGatewayIp\n    name: main\n  mainVpcPublicGatewayDhcp:\n    type: scaleway:VpcPublicGatewayDhcp\n    name: main\n    properties:\n      subnet: 192.168.1.0/24\n  mainVpcPublicGateway:\n    type: scaleway:VpcPublicGateway\n    name: main\n    properties:\n      name: foobar\n      type: VPC-GW-S\n      ipId: ${mainVpcPublicGatewayIp.id}\n  mainVpcGatewayNetwork:\n    type: scaleway:VpcGatewayNetwork\n    name: main\n    properties:\n      gatewayId: ${mainVpcPublicGateway.id}\n      privateNetworkId: ${main.id}\n      dhcpId: ${mainVpcPublicGatewayDhcp.id}\n      cleanupDhcp: true\n      enableMasquerade: true\n  mainVpcPublicGatewayDhcpReservation:\n    type: scaleway:VpcPublicGatewayDhcpReservation\n    name: main\n    properties:\n      gatewayNetworkId: ${mainVpcGatewayNetwork.id}\n      macAddress: ${mainInstancePrivateNic.macAddress}\n      ipAddress: 192.168.1.4\n  ### VPC PAT RULE\n  mainVpcPublicGatewayPatRule:\n    type: scaleway:VpcPublicGatewayPatRule\n    name: main\n    properties:\n      gatewayId: ${mainVpcPublicGateway.id}\n      privateIp: ${mainVpcPublicGatewayDhcpReservation.ipAddress}\n      privatePort: 22\n      publicPort: 2222\n      protocol: tcp\nvariables:\n  byId:\n    fn::invoke:\n      Function: scaleway:getVpcPublicGatewayDhcpReservation\n      Arguments:\n        reservationId: ${mainVpcPublicGatewayDhcpReservation.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcPublicGatewayDhcpReservation.\n",
                "properties": {
                    "gatewayNetworkId": {
                        "type": "string",
                        "description": "The ID of the owning GatewayNetwork.\n\n\u003e Only one of `reservation_id` or `mac_address` with `gateway_network_id` should be specified.\n"
                    },
                    "macAddress": {
                        "type": "string",
                        "description": "The MAC address of the reservation to retrieve.\n"
                    },
                    "reservationId": {
                        "type": "string",
                        "description": "The ID of the reservation (DHCP entry) to retrieve.\n"
                    },
                    "waitForDhcp": {
                        "type": "boolean",
                        "description": "Whether to wait for `mac_address` to exist in DHCP.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`). The zone in which the reservation exists.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcPublicGatewayDhcpReservation.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "gatewayNetworkId": {
                        "type": "string"
                    },
                    "hostname": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "ipAddress": {
                        "type": "string"
                    },
                    "macAddress": {
                        "type": "string"
                    },
                    "reservationId": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "waitForDhcp": {
                        "type": "boolean"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "hostname",
                    "ipAddress",
                    "type",
                    "updatedAt",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getVpcPublicGatewayIp:getVpcPublicGatewayIp": {
            "description": "Gets information about a Public Gateway public flexible IP address.\n\nFor further information, please see the API [documentation](https://www.scaleway.com/en/developers/api/public-gateway/#path-ips-list-ips).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst main = new scaleway.VpcPublicGatewayIp(\"main\", {});\nconst ipById = scaleway.getVpcPublicGatewayIpOutput({\n    ipId: main.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\nmain = scaleway.VpcPublicGatewayIp(\"main\")\nip_by_id = scaleway.get_vpc_public_gateway_ip_output(ip_id=main.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Scaleway.VpcPublicGatewayIp(\"main\");\n\n    var ipById = Scaleway.GetVpcPublicGatewayIp.Invoke(new()\n    {\n        IpId = main.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := scaleway.NewVpcPublicGatewayIp(ctx, \"main\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.LookupVpcPublicGatewayIpOutput(ctx, scaleway.GetVpcPublicGatewayIpOutputArgs{\n\t\t\tIpId: main.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.VpcPublicGatewayIp;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetVpcPublicGatewayIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new VpcPublicGatewayIp(\"main\");\n\n        final var ipById = ScalewayFunctions.getVpcPublicGatewayIp(GetVpcPublicGatewayIpArgs.builder()\n            .ipId(main.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: scaleway:VpcPublicGatewayIp\nvariables:\n  ipById:\n    fn::invoke:\n      Function: scaleway:getVpcPublicGatewayIp\n      Arguments:\n        ipId: ${main.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcPublicGatewayIp.\n",
                "properties": {
                    "ipId": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcPublicGatewayIp.\n",
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "ipId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "reverse": {
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "address",
                    "createdAt",
                    "organizationId",
                    "projectId",
                    "reverse",
                    "tags",
                    "updatedAt",
                    "zone",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getVpcPublicPatRule:getVpcPublicPatRule": {
            "description": "Gets information about a Public Gateway PAT rule. For further information, please see the\nAPI [documentation](https://www.scaleway.com/en/developers/api/public-gateway/#path-pat-rules-list-pat-rules).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\nimport * as scaleway from \"@pulumiverse/scaleway\";\n\nconst sg01 = new scaleway.InstanceSecurityGroup(\"sg01\", {\n    inboundDefaultPolicy: \"drop\",\n    outboundDefaultPolicy: \"accept\",\n    inboundRules: [{\n        action: \"accept\",\n        port: 22,\n        protocol: \"TCP\",\n    }],\n});\nconst srv01 = new scaleway.InstanceServer(\"srv01\", {\n    name: \"my-server\",\n    type: \"PLAY2-NANO\",\n    image: \"ubuntu_jammy\",\n    securityGroupId: sg01.id,\n});\nconst pn01 = new scaleway.VpcPrivateNetwork(\"pn01\", {name: \"my-pn\"});\nconst pnic01 = new scaleway.InstancePrivateNic(\"pnic01\", {\n    serverId: srv01.id,\n    privateNetworkId: pn01.id,\n});\nconst dhcp01 = new scaleway.VpcPublicGatewayDhcp(\"dhcp01\", {subnet: \"192.168.0.0/24\"});\nconst ip01 = new scaleway.VpcPublicGatewayIp(\"ip01\", {});\nconst pg01 = new scaleway.VpcPublicGateway(\"pg01\", {\n    name: \"my-pg\",\n    type: \"VPC-GW-S\",\n    ipId: ip01.id,\n});\nconst gn01 = new scaleway.VpcGatewayNetwork(\"gn01\", {\n    gatewayId: pg01.id,\n    privateNetworkId: pn01.id,\n    dhcpId: dhcp01.id,\n    cleanupDhcp: true,\n    enableMasquerade: true,\n});\nconst rsv01 = new scaleway.VpcPublicGatewayDhcpReservation(\"rsv01\", {\n    gatewayNetworkId: gn01.id,\n    macAddress: pnic01.macAddress,\n    ipAddress: \"192.168.0.7\",\n});\nconst pat01 = new scaleway.VpcPublicGatewayPatRule(\"pat01\", {\n    gatewayId: pg01.id,\n    privateIp: rsv01.ipAddress,\n    privatePort: 22,\n    publicPort: 2202,\n    protocol: \"tcp\",\n});\nconst main = scaleway.getVpcPublicPatRuleOutput({\n    patRuleId: pat01.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\nimport pulumiverse_scaleway as scaleway\n\nsg01 = scaleway.InstanceSecurityGroup(\"sg01\",\n    inbound_default_policy=\"drop\",\n    outbound_default_policy=\"accept\",\n    inbound_rules=[{\n        \"action\": \"accept\",\n        \"port\": 22,\n        \"protocol\": \"TCP\",\n    }])\nsrv01 = scaleway.InstanceServer(\"srv01\",\n    name=\"my-server\",\n    type=\"PLAY2-NANO\",\n    image=\"ubuntu_jammy\",\n    security_group_id=sg01.id)\npn01 = scaleway.VpcPrivateNetwork(\"pn01\", name=\"my-pn\")\npnic01 = scaleway.InstancePrivateNic(\"pnic01\",\n    server_id=srv01.id,\n    private_network_id=pn01.id)\ndhcp01 = scaleway.VpcPublicGatewayDhcp(\"dhcp01\", subnet=\"192.168.0.0/24\")\nip01 = scaleway.VpcPublicGatewayIp(\"ip01\")\npg01 = scaleway.VpcPublicGateway(\"pg01\",\n    name=\"my-pg\",\n    type=\"VPC-GW-S\",\n    ip_id=ip01.id)\ngn01 = scaleway.VpcGatewayNetwork(\"gn01\",\n    gateway_id=pg01.id,\n    private_network_id=pn01.id,\n    dhcp_id=dhcp01.id,\n    cleanup_dhcp=True,\n    enable_masquerade=True)\nrsv01 = scaleway.VpcPublicGatewayDhcpReservation(\"rsv01\",\n    gateway_network_id=gn01.id,\n    mac_address=pnic01.mac_address,\n    ip_address=\"192.168.0.7\")\npat01 = scaleway.VpcPublicGatewayPatRule(\"pat01\",\n    gateway_id=pg01.id,\n    private_ip=rsv01.ip_address,\n    private_port=22,\n    public_port=2202,\n    protocol=\"tcp\")\nmain = scaleway.get_vpc_public_pat_rule_output(pat_rule_id=pat01.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\nusing Scaleway = Pulumiverse.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sg01 = new Scaleway.InstanceSecurityGroup(\"sg01\", new()\n    {\n        InboundDefaultPolicy = \"drop\",\n        OutboundDefaultPolicy = \"accept\",\n        InboundRules = new[]\n        {\n            new Scaleway.Inputs.InstanceSecurityGroupInboundRuleArgs\n            {\n                Action = \"accept\",\n                Port = 22,\n                Protocol = \"TCP\",\n            },\n        },\n    });\n\n    var srv01 = new Scaleway.InstanceServer(\"srv01\", new()\n    {\n        Name = \"my-server\",\n        Type = \"PLAY2-NANO\",\n        Image = \"ubuntu_jammy\",\n        SecurityGroupId = sg01.Id,\n    });\n\n    var pn01 = new Scaleway.VpcPrivateNetwork(\"pn01\", new()\n    {\n        Name = \"my-pn\",\n    });\n\n    var pnic01 = new Scaleway.InstancePrivateNic(\"pnic01\", new()\n    {\n        ServerId = srv01.Id,\n        PrivateNetworkId = pn01.Id,\n    });\n\n    var dhcp01 = new Scaleway.VpcPublicGatewayDhcp(\"dhcp01\", new()\n    {\n        Subnet = \"192.168.0.0/24\",\n    });\n\n    var ip01 = new Scaleway.VpcPublicGatewayIp(\"ip01\");\n\n    var pg01 = new Scaleway.VpcPublicGateway(\"pg01\", new()\n    {\n        Name = \"my-pg\",\n        Type = \"VPC-GW-S\",\n        IpId = ip01.Id,\n    });\n\n    var gn01 = new Scaleway.VpcGatewayNetwork(\"gn01\", new()\n    {\n        GatewayId = pg01.Id,\n        PrivateNetworkId = pn01.Id,\n        DhcpId = dhcp01.Id,\n        CleanupDhcp = true,\n        EnableMasquerade = true,\n    });\n\n    var rsv01 = new Scaleway.VpcPublicGatewayDhcpReservation(\"rsv01\", new()\n    {\n        GatewayNetworkId = gn01.Id,\n        MacAddress = pnic01.MacAddress,\n        IpAddress = \"192.168.0.7\",\n    });\n\n    var pat01 = new Scaleway.VpcPublicGatewayPatRule(\"pat01\", new()\n    {\n        GatewayId = pg01.Id,\n        PrivateIp = rsv01.IpAddress,\n        PrivatePort = 22,\n        PublicPort = 2202,\n        Protocol = \"tcp\",\n    });\n\n    var main = Scaleway.GetVpcPublicPatRule.Invoke(new()\n    {\n        PatRuleId = pat01.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsg01, err := scaleway.NewInstanceSecurityGroup(ctx, \"sg01\", \u0026scaleway.InstanceSecurityGroupArgs{\n\t\t\tInboundDefaultPolicy:  pulumi.String(\"drop\"),\n\t\t\tOutboundDefaultPolicy: pulumi.String(\"accept\"),\n\t\t\tInboundRules: scaleway.InstanceSecurityGroupInboundRuleArray{\n\t\t\t\t\u0026scaleway.InstanceSecurityGroupInboundRuleArgs{\n\t\t\t\t\tAction:   pulumi.String(\"accept\"),\n\t\t\t\t\tPort:     pulumi.Int(22),\n\t\t\t\t\tProtocol: pulumi.String(\"TCP\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrv01, err := scaleway.NewInstanceServer(ctx, \"srv01\", \u0026scaleway.InstanceServerArgs{\n\t\t\tName:            pulumi.String(\"my-server\"),\n\t\t\tType:            pulumi.String(\"PLAY2-NANO\"),\n\t\t\tImage:           pulumi.String(\"ubuntu_jammy\"),\n\t\t\tSecurityGroupId: sg01.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpn01, err := scaleway.NewVpcPrivateNetwork(ctx, \"pn01\", \u0026scaleway.VpcPrivateNetworkArgs{\n\t\t\tName: pulumi.String(\"my-pn\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpnic01, err := scaleway.NewInstancePrivateNic(ctx, \"pnic01\", \u0026scaleway.InstancePrivateNicArgs{\n\t\t\tServerId:         srv01.ID(),\n\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdhcp01, err := scaleway.NewVpcPublicGatewayDhcp(ctx, \"dhcp01\", \u0026scaleway.VpcPublicGatewayDhcpArgs{\n\t\t\tSubnet: pulumi.String(\"192.168.0.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tip01, err := scaleway.NewVpcPublicGatewayIp(ctx, \"ip01\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpg01, err := scaleway.NewVpcPublicGateway(ctx, \"pg01\", \u0026scaleway.VpcPublicGatewayArgs{\n\t\t\tName: pulumi.String(\"my-pg\"),\n\t\t\tType: pulumi.String(\"VPC-GW-S\"),\n\t\t\tIpId: ip01.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgn01, err := scaleway.NewVpcGatewayNetwork(ctx, \"gn01\", \u0026scaleway.VpcGatewayNetworkArgs{\n\t\t\tGatewayId:        pg01.ID(),\n\t\t\tPrivateNetworkId: pn01.ID(),\n\t\t\tDhcpId:           dhcp01.ID(),\n\t\t\tCleanupDhcp:      pulumi.Bool(true),\n\t\t\tEnableMasquerade: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\trsv01, err := scaleway.NewVpcPublicGatewayDhcpReservation(ctx, \"rsv01\", \u0026scaleway.VpcPublicGatewayDhcpReservationArgs{\n\t\t\tGatewayNetworkId: gn01.ID(),\n\t\t\tMacAddress:       pnic01.MacAddress,\n\t\t\tIpAddress:        pulumi.String(\"192.168.0.7\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpat01, err := scaleway.NewVpcPublicGatewayPatRule(ctx, \"pat01\", \u0026scaleway.VpcPublicGatewayPatRuleArgs{\n\t\t\tGatewayId:   pg01.ID(),\n\t\t\tPrivateIp:   rsv01.IpAddress,\n\t\t\tPrivatePort: pulumi.Int(22),\n\t\t\tPublicPort:  pulumi.Int(2202),\n\t\t\tProtocol:    pulumi.String(\"tcp\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = scaleway.GetVpcPublicPatRuleOutput(ctx, scaleway.GetVpcPublicPatRuleOutputArgs{\n\t\t\tPatRuleId: pat01.ID(),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.InstanceSecurityGroup;\nimport com.pulumi.scaleway.InstanceSecurityGroupArgs;\nimport com.pulumi.scaleway.inputs.InstanceSecurityGroupInboundRuleArgs;\nimport com.pulumi.scaleway.InstanceServer;\nimport com.pulumi.scaleway.InstanceServerArgs;\nimport com.pulumi.scaleway.VpcPrivateNetwork;\nimport com.pulumi.scaleway.VpcPrivateNetworkArgs;\nimport com.pulumi.scaleway.InstancePrivateNic;\nimport com.pulumi.scaleway.InstancePrivateNicArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcp;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayIp;\nimport com.pulumi.scaleway.VpcPublicGateway;\nimport com.pulumi.scaleway.VpcPublicGatewayArgs;\nimport com.pulumi.scaleway.VpcGatewayNetwork;\nimport com.pulumi.scaleway.VpcGatewayNetworkArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpReservation;\nimport com.pulumi.scaleway.VpcPublicGatewayDhcpReservationArgs;\nimport com.pulumi.scaleway.VpcPublicGatewayPatRule;\nimport com.pulumi.scaleway.VpcPublicGatewayPatRuleArgs;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetVpcPublicPatRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sg01 = new InstanceSecurityGroup(\"sg01\", InstanceSecurityGroupArgs.builder()\n            .inboundDefaultPolicy(\"drop\")\n            .outboundDefaultPolicy(\"accept\")\n            .inboundRules(InstanceSecurityGroupInboundRuleArgs.builder()\n                .action(\"accept\")\n                .port(22)\n                .protocol(\"TCP\")\n                .build())\n            .build());\n\n        var srv01 = new InstanceServer(\"srv01\", InstanceServerArgs.builder()\n            .name(\"my-server\")\n            .type(\"PLAY2-NANO\")\n            .image(\"ubuntu_jammy\")\n            .securityGroupId(sg01.id())\n            .build());\n\n        var pn01 = new VpcPrivateNetwork(\"pn01\", VpcPrivateNetworkArgs.builder()\n            .name(\"my-pn\")\n            .build());\n\n        var pnic01 = new InstancePrivateNic(\"pnic01\", InstancePrivateNicArgs.builder()\n            .serverId(srv01.id())\n            .privateNetworkId(pn01.id())\n            .build());\n\n        var dhcp01 = new VpcPublicGatewayDhcp(\"dhcp01\", VpcPublicGatewayDhcpArgs.builder()\n            .subnet(\"192.168.0.0/24\")\n            .build());\n\n        var ip01 = new VpcPublicGatewayIp(\"ip01\");\n\n        var pg01 = new VpcPublicGateway(\"pg01\", VpcPublicGatewayArgs.builder()\n            .name(\"my-pg\")\n            .type(\"VPC-GW-S\")\n            .ipId(ip01.id())\n            .build());\n\n        var gn01 = new VpcGatewayNetwork(\"gn01\", VpcGatewayNetworkArgs.builder()\n            .gatewayId(pg01.id())\n            .privateNetworkId(pn01.id())\n            .dhcpId(dhcp01.id())\n            .cleanupDhcp(true)\n            .enableMasquerade(true)\n            .build());\n\n        var rsv01 = new VpcPublicGatewayDhcpReservation(\"rsv01\", VpcPublicGatewayDhcpReservationArgs.builder()\n            .gatewayNetworkId(gn01.id())\n            .macAddress(pnic01.macAddress())\n            .ipAddress(\"192.168.0.7\")\n            .build());\n\n        var pat01 = new VpcPublicGatewayPatRule(\"pat01\", VpcPublicGatewayPatRuleArgs.builder()\n            .gatewayId(pg01.id())\n            .privateIp(rsv01.ipAddress())\n            .privatePort(22)\n            .publicPort(2202)\n            .protocol(\"tcp\")\n            .build());\n\n        final var main = ScalewayFunctions.getVpcPublicPatRule(GetVpcPublicPatRuleArgs.builder()\n            .patRuleId(pat01.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sg01:\n    type: scaleway:InstanceSecurityGroup\n    properties:\n      inboundDefaultPolicy: drop\n      outboundDefaultPolicy: accept\n      inboundRules:\n        - action: accept\n          port: 22\n          protocol: TCP\n  srv01:\n    type: scaleway:InstanceServer\n    properties:\n      name: my-server\n      type: PLAY2-NANO\n      image: ubuntu_jammy\n      securityGroupId: ${sg01.id}\n  pnic01:\n    type: scaleway:InstancePrivateNic\n    properties:\n      serverId: ${srv01.id}\n      privateNetworkId: ${pn01.id}\n  pn01:\n    type: scaleway:VpcPrivateNetwork\n    properties:\n      name: my-pn\n  dhcp01:\n    type: scaleway:VpcPublicGatewayDhcp\n    properties:\n      subnet: 192.168.0.0/24\n  ip01:\n    type: scaleway:VpcPublicGatewayIp\n  pg01:\n    type: scaleway:VpcPublicGateway\n    properties:\n      name: my-pg\n      type: VPC-GW-S\n      ipId: ${ip01.id}\n  gn01:\n    type: scaleway:VpcGatewayNetwork\n    properties:\n      gatewayId: ${pg01.id}\n      privateNetworkId: ${pn01.id}\n      dhcpId: ${dhcp01.id}\n      cleanupDhcp: true\n      enableMasquerade: true\n  rsv01:\n    type: scaleway:VpcPublicGatewayDhcpReservation\n    properties:\n      gatewayNetworkId: ${gn01.id}\n      macAddress: ${pnic01.macAddress}\n      ipAddress: 192.168.0.7\n  pat01:\n    type: scaleway:VpcPublicGatewayPatRule\n    properties:\n      gatewayId: ${pg01.id}\n      privateIp: ${rsv01.ipAddress}\n      privatePort: 22\n      publicPort: 2202\n      protocol: tcp\nvariables:\n  main:\n    fn::invoke:\n      Function: scaleway:getVpcPublicPatRule\n      Arguments:\n        patRuleId: ${pat01.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcPublicPatRule.\n",
                "properties": {
                    "patRuleId": {
                        "type": "string",
                        "description": "The ID of the PAT rule to retrieve\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "`zone`) The zone in which\nthe rule exists.\n"
                    }
                },
                "type": "object",
                "required": [
                    "patRuleId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVpcPublicPatRule.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "gatewayId": {
                        "description": "The ID of the Public Gateway.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "patRuleId": {
                        "type": "string"
                    },
                    "privateIp": {
                        "description": "The private IP address to forward data to.\n",
                        "type": "string"
                    },
                    "privatePort": {
                        "description": "The private port to translate to.\n",
                        "type": "integer"
                    },
                    "protocol": {
                        "description": "The protocol the rule should apply to. Possible values are `both`, `tcp` and `udp`.\n",
                        "type": "string"
                    },
                    "publicPort": {
                        "description": "The public port to listen on.\n",
                        "type": "integer"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "gatewayId",
                    "organizationId",
                    "patRuleId",
                    "privateIp",
                    "privatePort",
                    "protocol",
                    "publicPort",
                    "updatedAt",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getVpcRoutes:getVpcRoutes": {
            "description": "Gets information about multiple VPC routes.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcRoutes.\n",
                "properties": {
                    "isIpv6": {
                        "type": "boolean",
                        "description": "Routes with an IPv6 destination will be listed.\n"
                    },
                    "nexthopPrivateNetworkId": {
                        "type": "string",
                        "description": "The next hop private network ID to filter for. routes with a similar next hop private network ID are listed.\n"
                    },
                    "nexthopResourceId": {
                        "type": "string",
                        "description": "The next hop resource ID to filter for. routes with a similar next hop resource ID are listed.\n"
                    },
                    "nexthopResourceType": {
                        "type": "string",
                        "description": "The next hop resource type to filter for. routes with a similar next hop resource type are listed.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the routes exist.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of tags to filter for. routes with these exact tags are listed.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The VPC ID to filter for. routes with a similar VPC ID are listed.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcRoutes.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "isIpv6": {
                        "type": "boolean"
                    },
                    "nexthopPrivateNetworkId": {
                        "type": "string"
                    },
                    "nexthopResourceId": {
                        "type": "string"
                    },
                    "nexthopResourceType": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "routes": {
                        "description": "List of retrieved routes\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getVpcRoutesRoute:getVpcRoutesRoute"
                        },
                        "type": "array"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "vpcId": {
                        "type": "string"
                    }
                },
                "required": [
                    "region",
                    "routes",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getVpcs:getVpcs": {
            "description": "Gets information about multiple Virtual Private Clouds.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcs.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The VPC name to filter for. VPCs with a similar name are listed.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Project the VPC is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`). The region in which the VPCs exist.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of tags to filter for. VPCs with these exact tags are listed.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcs.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "description": "The Organization ID the VPC is associated with.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "The ID of the Project the VPC is associated with.\n",
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "vpcs": {
                        "description": "List of retrieved VPCs\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getVpcsVpc:getVpcsVpc"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "organizationId",
                    "projectId",
                    "region",
                    "vpcs",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getWebHostOffer:getWebHostOffer": {
            "description": "Gets information about a webhosting offer.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by offer name\nconst byName = scaleway.getWebHostOffer({\n    name: \"performance\",\n});\n// Get info by offer id\nconst byId = scaleway.getWebHostOffer({\n    offerId: \"de2426b4-a9e9-11ec-b909-0242ac120002\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Get info by offer name\nby_name = scaleway.get_web_host_offer(name=\"performance\")\n# Get info by offer id\nby_id = scaleway.get_web_host_offer(offer_id=\"de2426b4-a9e9-11ec-b909-0242ac120002\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Get info by offer name\n    var byName = Scaleway.GetWebHostOffer.Invoke(new()\n    {\n        Name = \"performance\",\n    });\n\n    // Get info by offer id\n    var byId = Scaleway.GetWebHostOffer.Invoke(new()\n    {\n        OfferId = \"de2426b4-a9e9-11ec-b909-0242ac120002\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Get info by offer name\n\t\t_, err := scaleway.GetWebHostOffer(ctx, \u0026scaleway.GetWebHostOfferArgs{\n\t\t\tName: pulumi.StringRef(\"performance\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Get info by offer id\n\t\t_, err = scaleway.GetWebHostOffer(ctx, \u0026scaleway.GetWebHostOfferArgs{\n\t\t\tOfferId: pulumi.StringRef(\"de2426b4-a9e9-11ec-b909-0242ac120002\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetWebHostOfferArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Get info by offer name\n        final var byName = ScalewayFunctions.getWebHostOffer(GetWebHostOfferArgs.builder()\n            .name(\"performance\")\n            .build());\n\n        // Get info by offer id\n        final var byId = ScalewayFunctions.getWebHostOffer(GetWebHostOfferArgs.builder()\n            .offerId(\"de2426b4-a9e9-11ec-b909-0242ac120002\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Get info by offer name\n  byName:\n    fn::invoke:\n      Function: scaleway:getWebHostOffer\n      Arguments:\n        name: performance\n  # Get info by offer id\n  byId:\n    fn::invoke:\n      Function: scaleway:getWebHostOffer\n      Arguments:\n        offerId: de2426b4-a9e9-11ec-b909-0242ac120002\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getWebHostOffer.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The offer name. Only one of `name` and `offer_id` should be specified.\n"
                    },
                    "offerId": {
                        "type": "string",
                        "description": "The offer id. Only one of `name` and `offer_id` should be specified.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "`region`) The region in which offer exists.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getWebHostOffer.\n",
                "properties": {
                    "billingOperationPath": {
                        "description": "The unique identifier used for billing.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "offerId": {
                        "type": "string"
                    },
                    "price": {
                        "description": "The offer price.\n",
                        "type": "string"
                    },
                    "products": {
                        "description": "The offer product.\n",
                        "items": {
                            "$ref": "#/types/scaleway:index/getWebHostOfferProduct:getWebHostOfferProduct"
                        },
                        "type": "array"
                    },
                    "region": {
                        "type": "string"
                    }
                },
                "required": [
                    "billingOperationPath",
                    "price",
                    "products",
                    "region",
                    "id"
                ],
                "type": "object"
            }
        },
        "scaleway:index/getWebhosting:getWebhosting": {
            "description": "Gets information about a webhosting.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as scaleway from \"@pulumi/scaleway\";\n\n// Get info by offer domain\nconst byDomain = scaleway.getWebhosting({\n    domain: \"foobar.com\",\n});\n// Get info by id\nconst byId = scaleway.getWebhosting({\n    webhostingId: \"11111111-1111-1111-1111-111111111111\",\n});\n```\n```python\nimport pulumi\nimport pulumi_scaleway as scaleway\n\n# Get info by offer domain\nby_domain = scaleway.get_webhosting(domain=\"foobar.com\")\n# Get info by id\nby_id = scaleway.get_webhosting(webhosting_id=\"11111111-1111-1111-1111-111111111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Scaleway = Pulumi.Scaleway;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Get info by offer domain\n    var byDomain = Scaleway.GetWebhosting.Invoke(new()\n    {\n        Domain = \"foobar.com\",\n    });\n\n    // Get info by id\n    var byId = Scaleway.GetWebhosting.Invoke(new()\n    {\n        WebhostingId = \"11111111-1111-1111-1111-111111111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Get info by offer domain\n\t\t_, err := scaleway.LookupWebhosting(ctx, \u0026scaleway.LookupWebhostingArgs{\n\t\t\tDomain: pulumi.StringRef(\"foobar.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Get info by id\n\t\t_, err = scaleway.LookupWebhosting(ctx, \u0026scaleway.LookupWebhostingArgs{\n\t\t\tWebhostingId: pulumi.StringRef(\"11111111-1111-1111-1111-111111111111\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.scaleway.ScalewayFunctions;\nimport com.pulumi.scaleway.inputs.GetWebhostingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Get info by offer domain\n        final var byDomain = ScalewayFunctions.getWebhosting(GetWebhostingArgs.builder()\n            .domain(\"foobar.com\")\n            .build());\n\n        // Get info by id\n        final var byId = ScalewayFunctions.getWebhosting(GetWebhostingArgs.builder()\n            .webhostingId(\"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Get info by offer domain\n  byDomain:\n    fn::invoke:\n      Function: scaleway:getWebhosting\n      Arguments:\n        domain: foobar.com\n  # Get info by id\n  byId:\n    fn::invoke:\n      Function: scaleway:getWebhosting\n      Arguments:\n        webhostingId: 11111111-1111-1111-1111-111111111111\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getWebhosting.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The hosting domain name. Only one of `domain` and `webhosting_id` should be specified.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the organization the hosting is associated with.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "`project_id`) The ID of the project the hosting is associated with.\n"
                    },
                    "webhostingId": {
                        "type": "string",
                        "description": "The hosting id. Only one of `domain` and `webhosting_id` should be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getWebhosting.\n",
                "properties": {
                    "cpanelUrls": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getWebhostingCpanelUrl:getWebhostingCpanelUrl"
                        },
                        "type": "array"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "dnsStatus": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "offerId": {
                        "type": "string"
                    },
                    "offerName": {
                        "type": "string"
                    },
                    "optionIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "options": {
                        "items": {
                            "$ref": "#/types/scaleway:index/getWebhostingOption:getWebhostingOption"
                        },
                        "type": "array"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "platformHostname": {
                        "type": "string"
                    },
                    "platformNumber": {
                        "type": "integer"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "webhostingId": {
                        "type": "string"
                    }
                },
                "required": [
                    "cpanelUrls",
                    "createdAt",
                    "dnsStatus",
                    "email",
                    "offerId",
                    "offerName",
                    "optionIds",
                    "options",
                    "organizationId",
                    "platformHostname",
                    "platformNumber",
                    "region",
                    "status",
                    "tags",
                    "updatedAt",
                    "username",
                    "id"
                ],
                "type": "object"
            }
        }
    }
}