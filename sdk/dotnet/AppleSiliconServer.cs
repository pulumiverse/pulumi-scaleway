// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway
{
    /// <summary>
    /// Creates and manages Scaleway Apple silicon. For more information,
    /// see the [API documentation](https://www.scaleway.com/en/developers/api/apple-silicon/).
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var server = new Scaleway.Applesilicon.Server("server", new()
    ///     {
    ///         Name = "test-m1",
    ///         Type = "M1-M",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Enable VPC and attach private network
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var vpc_apple_silicon = new Scaleway.Network.Vpc("vpc-apple-silicon", new()
    ///     {
    ///         Name = "vpc-apple-silicon",
    ///     });
    /// 
    ///     var pn_apple_silicon = new Scaleway.Network.PrivateNetwork("pn-apple-silicon", new()
    ///     {
    ///         Name = "pn-apple-silicon",
    ///         VpcId = vpc_apple_silicon.Id,
    ///     });
    /// 
    ///     var my_server = new Scaleway.Applesilicon.Server("my-server", new()
    ///     {
    ///         Name = "TestAccServerEnableVPC",
    ///         Type = "M2-M",
    ///         EnableVpc = true,
    ///         PrivateNetworks = new[]
    ///         {
    ///             new Scaleway.Applesilicon.Inputs.ServerPrivateNetworkArgs
    ///             {
    ///                 Id = pn_apple_silicon.Id,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Instance servers can be imported using the `{zone}/{id}`, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:index/appleSiliconServer:AppleSiliconServer main fr-par-1/11111111-1111-1111-1111-111111111111
    /// ```
    /// </summary>
    [Obsolete(@"scaleway.index/applesiliconserver.AppleSiliconServer has been deprecated in favor of scaleway.applesilicon/server.Server")]
    [ScalewayResourceType("scaleway:index/appleSiliconServer:AppleSiliconServer")]
    public partial class AppleSiliconServer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The commitment period of the server
        /// </summary>
        [Output("commitment")]
        public Output<string?> Commitment { get; private set; } = null!;

        /// <summary>
        /// The date and time the private network was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The minimal date and time on which you can delete this server due to Apple licence
        /// </summary>
        [Output("deletableAt")]
        public Output<string> DeletableAt { get; private set; } = null!;

        /// <summary>
        /// : Enables the VPC option when set to true.
        /// </summary>
        [Output("enableVpc")]
        public Output<bool?> EnableVpc { get; private set; } = null!;

        /// <summary>
        /// IPv4 address of the server (IPv4 address).
        /// </summary>
        [Output("ip")]
        public Output<string> Ip { get; private set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The organization ID the server is associated with.
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// The password of the server
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// The list of private IPv4 and IPv6 addresses associated with the server.
        /// </summary>
        [Output("privateIps")]
        public Output<ImmutableArray<Outputs.AppleSiliconServerPrivateIp>> PrivateIps { get; private set; } = null!;

        /// <summary>
        /// The private networks to attach to the server
        /// </summary>
        [Output("privateNetworks")]
        public Output<ImmutableArray<Outputs.AppleSiliconServerPrivateNetwork>> PrivateNetworks { get; private set; } = null!;

        /// <summary>
        /// `project_id`) The ID of the project the server is
        /// associated with.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Configure the available public bandwidth for your server in bits per second. This option may not be available for all offers.
        /// </summary>
        [Output("publicBandwidth")]
        public Output<int> PublicBandwidth { get; private set; } = null!;

        /// <summary>
        /// The state of the server.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The commercial type of the server. You find all the available types on
        /// the [pricing page](https://www.scaleway.com/en/pricing/apple-silicon/). Updates to this field will recreate a new
        /// resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The date and time the private network was last updated.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The username of the server
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;

        /// <summary>
        /// URL of the VNC.
        /// </summary>
        [Output("vncUrl")]
        public Output<string> VncUrl { get; private set; } = null!;

        /// <summary>
        /// The current status of the VPC option.
        /// </summary>
        [Output("vpcStatus")]
        public Output<string> VpcStatus { get; private set; } = null!;

        /// <summary>
        /// `zone`) The zone in which
        /// the server should be created.
        /// </summary>
        [Output("zone")]
        public Output<string?> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a AppleSiliconServer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppleSiliconServer(string name, AppleSiliconServerArgs args, CustomResourceOptions? options = null)
            : base("scaleway:index/appleSiliconServer:AppleSiliconServer", name, args ?? new AppleSiliconServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppleSiliconServer(string name, Input<string> id, AppleSiliconServerState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:index/appleSiliconServer:AppleSiliconServer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppleSiliconServer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppleSiliconServer Get(string name, Input<string> id, AppleSiliconServerState? state = null, CustomResourceOptions? options = null)
        {
            return new AppleSiliconServer(name, id, state, options);
        }
    }

    public sealed class AppleSiliconServerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The commitment period of the server
        /// </summary>
        [Input("commitment")]
        public Input<string>? Commitment { get; set; }

        /// <summary>
        /// : Enables the VPC option when set to true.
        /// </summary>
        [Input("enableVpc")]
        public Input<bool>? EnableVpc { get; set; }

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateIps")]
        private InputList<Inputs.AppleSiliconServerPrivateIpArgs>? _privateIps;

        /// <summary>
        /// The list of private IPv4 and IPv6 addresses associated with the server.
        /// </summary>
        public InputList<Inputs.AppleSiliconServerPrivateIpArgs> PrivateIps
        {
            get => _privateIps ?? (_privateIps = new InputList<Inputs.AppleSiliconServerPrivateIpArgs>());
            set => _privateIps = value;
        }

        [Input("privateNetworks")]
        private InputList<Inputs.AppleSiliconServerPrivateNetworkArgs>? _privateNetworks;

        /// <summary>
        /// The private networks to attach to the server
        /// </summary>
        public InputList<Inputs.AppleSiliconServerPrivateNetworkArgs> PrivateNetworks
        {
            get => _privateNetworks ?? (_privateNetworks = new InputList<Inputs.AppleSiliconServerPrivateNetworkArgs>());
            set => _privateNetworks = value;
        }

        /// <summary>
        /// `project_id`) The ID of the project the server is
        /// associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Configure the available public bandwidth for your server in bits per second. This option may not be available for all offers.
        /// </summary>
        [Input("publicBandwidth")]
        public Input<int>? PublicBandwidth { get; set; }

        /// <summary>
        /// The commercial type of the server. You find all the available types on
        /// the [pricing page](https://www.scaleway.com/en/pricing/apple-silicon/). Updates to this field will recreate a new
        /// resource.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// `zone`) The zone in which
        /// the server should be created.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public AppleSiliconServerArgs()
        {
        }
        public static new AppleSiliconServerArgs Empty => new AppleSiliconServerArgs();
    }

    public sealed class AppleSiliconServerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The commitment period of the server
        /// </summary>
        [Input("commitment")]
        public Input<string>? Commitment { get; set; }

        /// <summary>
        /// The date and time the private network was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The minimal date and time on which you can delete this server due to Apple licence
        /// </summary>
        [Input("deletableAt")]
        public Input<string>? DeletableAt { get; set; }

        /// <summary>
        /// : Enables the VPC option when set to true.
        /// </summary>
        [Input("enableVpc")]
        public Input<bool>? EnableVpc { get; set; }

        /// <summary>
        /// IPv4 address of the server (IPv4 address).
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The organization ID the server is associated with.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password of the server
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("privateIps")]
        private InputList<Inputs.AppleSiliconServerPrivateIpGetArgs>? _privateIps;

        /// <summary>
        /// The list of private IPv4 and IPv6 addresses associated with the server.
        /// </summary>
        public InputList<Inputs.AppleSiliconServerPrivateIpGetArgs> PrivateIps
        {
            get => _privateIps ?? (_privateIps = new InputList<Inputs.AppleSiliconServerPrivateIpGetArgs>());
            set => _privateIps = value;
        }

        [Input("privateNetworks")]
        private InputList<Inputs.AppleSiliconServerPrivateNetworkGetArgs>? _privateNetworks;

        /// <summary>
        /// The private networks to attach to the server
        /// </summary>
        public InputList<Inputs.AppleSiliconServerPrivateNetworkGetArgs> PrivateNetworks
        {
            get => _privateNetworks ?? (_privateNetworks = new InputList<Inputs.AppleSiliconServerPrivateNetworkGetArgs>());
            set => _privateNetworks = value;
        }

        /// <summary>
        /// `project_id`) The ID of the project the server is
        /// associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Configure the available public bandwidth for your server in bits per second. This option may not be available for all offers.
        /// </summary>
        [Input("publicBandwidth")]
        public Input<int>? PublicBandwidth { get; set; }

        /// <summary>
        /// The state of the server.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The commercial type of the server. You find all the available types on
        /// the [pricing page](https://www.scaleway.com/en/pricing/apple-silicon/). Updates to this field will recreate a new
        /// resource.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The date and time the private network was last updated.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// The username of the server
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// URL of the VNC.
        /// </summary>
        [Input("vncUrl")]
        public Input<string>? VncUrl { get; set; }

        /// <summary>
        /// The current status of the VPC option.
        /// </summary>
        [Input("vpcStatus")]
        public Input<string>? VpcStatus { get; set; }

        /// <summary>
        /// `zone`) The zone in which
        /// the server should be created.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public AppleSiliconServerState()
        {
        }
        public static new AppleSiliconServerState Empty => new AppleSiliconServerState();
    }
}
