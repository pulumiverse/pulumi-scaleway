// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Autoscaling.Inputs
{

    public sealed class InstancePolicyMetricArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// How the values sampled for the `metric` should be aggregated.
        /// </summary>
        [Input("aggregate", required: true)]
        public Input<string> Aggregate { get; set; } = null!;

        /// <summary>
        /// The custom metric to use for this policy. This must be stored in Scaleway Cockpit. The metric forms the basis of the condition that will be checked to determine whether a scaling action should be triggered
        /// </summary>
        [Input("cockpitMetricName")]
        public Input<string>? CockpitMetricName { get; set; }

        /// <summary>
        /// The managed metric to use for this policy. These are available by default in Cockpit without any configuration or `node_exporter`. The chosen metric forms the basis of the condition that will be checked to determine whether a scaling action should be triggered.
        /// </summary>
        [Input("managedMetric")]
        public Input<string>? ManagedMetric { get; set; }

        /// <summary>
        /// Name or description of the metric policy.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Operator used when comparing the threshold value of the chosen `metric` to the actual sampled and aggregated value.
        /// </summary>
        [Input("operator", required: true)]
        public Input<string> Operator { get; set; } = null!;

        /// <summary>
        /// The Interval of time, in minutes, during which metric is sampled.
        /// </summary>
        [Input("samplingRangeMin")]
        public Input<int>? SamplingRangeMin { get; set; }

        /// <summary>
        /// The threshold value to measure the aggregated sampled `metric` value against. Combined with the `operator` field, determines whether a scaling action should be triggered.
        /// </summary>
        [Input("threshold")]
        public Input<int>? Threshold { get; set; }

        public InstancePolicyMetricArgs()
        {
        }
        public static new InstancePolicyMetricArgs Empty => new InstancePolicyMetricArgs();
    }
}
