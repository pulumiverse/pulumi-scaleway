// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Autoscaling
{
    /// <summary>
    /// Books and manages Autoscaling Instance groups.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Scaleway.Autoscaling.InstanceGroup("main", new()
    ///     {
    ///         Name = "asg-group",
    ///         TemplateId = mainScalewayAutoscalingInstanceTemplate.Id,
    ///         Tags = new[]
    ///         {
    ///             "terraform-test",
    ///             "instance-group",
    ///         },
    ///         Capacities = new[]
    ///         {
    ///             new Scaleway.Autoscaling.Inputs.InstanceGroupCapacityArgs
    ///             {
    ///                 MaxReplicas = 5,
    ///                 MinReplicas = 1,
    ///                 CooldownDelay = 300,
    ///             },
    ///         },
    ///         LoadBalancers = new[]
    ///         {
    ///             new Scaleway.Autoscaling.Inputs.InstanceGroupLoadBalancerArgs
    ///             {
    ///                 Id = mainScalewayLb.Id,
    ///                 BackendIds = new[]
    ///                 {
    ///                     mainScalewayLbBackend.Id,
    ///                 },
    ///                 PrivateNetworkId = mainScalewayVpcPrivateNetwork.Id,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### With template and policies
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Scaleway.Network.Vpc("main", new()
    ///     {
    ///         Name = "TestAccAutoscalingVPC",
    ///     });
    /// 
    ///     var mainPrivateNetwork = new Scaleway.Network.PrivateNetwork("main", new()
    ///     {
    ///         Name = "TestAccAutoscalingVPC",
    ///         VpcId = main.Id,
    ///     });
    /// 
    ///     var mainVolume = new Scaleway.Block.Volume("main", new()
    ///     {
    ///         Iops = 5000,
    ///         SizeInGb = 10,
    ///     });
    /// 
    ///     var mainSnapshot = new Scaleway.Block.Snapshot("main", new()
    ///     {
    ///         Name = "test-ds-block-snapshot-basic",
    ///         VolumeId = mainVolume.Id,
    ///     });
    /// 
    ///     var mainIp = new Scaleway.Loadbalancers.Ip("main");
    /// 
    ///     var mainLoadBalancer = new Scaleway.Loadbalancers.LoadBalancer("main", new()
    ///     {
    ///         IpId = mainIp.Id,
    ///         Name = "test-lb",
    ///         Type = "lb-s",
    ///         PrivateNetworks = new[]
    ///         {
    ///             new Scaleway.Loadbalancers.Inputs.LoadBalancerPrivateNetworkArgs
    ///             {
    ///                 PrivateNetworkId = mainPrivateNetwork.Id,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var mainBackend = new Scaleway.Loadbalancers.Backend("main", new()
    ///     {
    ///         LbId = mainLoadBalancer.Id,
    ///         ForwardProtocol = "tcp",
    ///         ForwardPort = 80,
    ///         ProxyProtocol = "none",
    ///     });
    /// 
    ///     var mainInstanceTemplate = new Scaleway.Autoscaling.InstanceTemplate("main", new()
    ///     {
    ///         Name = "autoscaling-instance-template-basic",
    ///         CommercialType = "PLAY2-MICRO",
    ///         Tags = new[]
    ///         {
    ///             "terraform-test",
    ///             "basic",
    ///         },
    ///         Volumes = new[]
    ///         {
    ///             new Scaleway.Autoscaling.Inputs.InstanceTemplateVolumeArgs
    ///             {
    ///                 Name = "as-volume",
    ///                 VolumeType = "sbs",
    ///                 Boot = true,
    ///                 FromSnapshot = new Scaleway.Autoscaling.Inputs.InstanceTemplateVolumeFromSnapshotArgs
    ///                 {
    ///                     SnapshotId = mainSnapshot.Id,
    ///                 },
    ///                 PerfIops = 5000,
    ///             },
    ///         },
    ///         PublicIpsV4Count = 1,
    ///         PrivateNetworkIds = new[]
    ///         {
    ///             mainPrivateNetwork.Id,
    ///         },
    ///     });
    /// 
    ///     var mainInstanceGroup = new Scaleway.Autoscaling.InstanceGroup("main", new()
    ///     {
    ///         Name = "autoscaling-instance-group-basic",
    ///         TemplateId = mainInstanceTemplate.Id,
    ///         Tags = new[]
    ///         {
    ///             "terraform-test",
    ///             "instance-group",
    ///         },
    ///         Capacities = new[]
    ///         {
    ///             new Scaleway.Autoscaling.Inputs.InstanceGroupCapacityArgs
    ///             {
    ///                 MaxReplicas = 5,
    ///                 MinReplicas = 1,
    ///                 CooldownDelay = 300,
    ///             },
    ///         },
    ///         LoadBalancers = new[]
    ///         {
    ///             new Scaleway.Autoscaling.Inputs.InstanceGroupLoadBalancerArgs
    ///             {
    ///                 Id = mainLoadBalancer.Id,
    ///                 BackendIds = new[]
    ///                 {
    ///                     mainBackend.Id,
    ///                 },
    ///                 PrivateNetworkId = mainPrivateNetwork.Id,
    ///             },
    ///         },
    ///         DeleteServersOnDestroy = true,
    ///     });
    /// 
    ///     var up = new Scaleway.Autoscaling.InstancePolicy("up", new()
    ///     {
    ///         InstanceGroupId = mainInstanceGroup.Id,
    ///         Name = "scale-up-if-cpu-high",
    ///         Action = "scale_up",
    ///         Type = "flat_count",
    ///         Value = 1,
    ///         Priority = 1,
    ///         Metrics = new[]
    ///         {
    ///             new Scaleway.Autoscaling.Inputs.InstancePolicyMetricArgs
    ///             {
    ///                 Name = "cpu scale up",
    ///                 ManagedMetric = "managed_metric_instance_cpu",
    ///                 Operator = "operator_greater_than",
    ///                 Aggregate = "aggregate_average",
    ///                 SamplingRangeMin = 5,
    ///                 Threshold = 70,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var down = new Scaleway.Autoscaling.InstancePolicy("down", new()
    ///     {
    ///         InstanceGroupId = mainInstanceGroup.Id,
    ///         Name = "scale-down-if-cpu-low",
    ///         Action = "scale_down",
    ///         Type = "flat_count",
    ///         Value = 1,
    ///         Priority = 2,
    ///         Metrics = new[]
    ///         {
    ///             new Scaleway.Autoscaling.Inputs.InstancePolicyMetricArgs
    ///             {
    ///                 Name = "cpu scale down",
    ///                 ManagedMetric = "managed_metric_instance_cpu",
    ///                 Operator = "operator_less_than",
    ///                 Aggregate = "aggregate_average",
    ///                 SamplingRangeMin = 5,
    ///                 Threshold = 40,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Autoscaling Instance groups can be imported using `{zone}/{id}`, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:autoscaling/instanceGroup:InstanceGroup main fr-par-1/11111111-1111-1111-1111-111111111111
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:autoscaling/instanceGroup:InstanceGroup")]
    public partial class InstanceGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The specification of the minimum and maximum replicas for the Instance group, and the cooldown interval between two scaling events.
        /// </summary>
        [Output("capacities")]
        public Output<ImmutableArray<Outputs.InstanceGroupCapacity>> Capacities { get; private set; } = null!;

        /// <summary>
        /// Date and time of Instance group's creation (RFC 3339 format).
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Whether to delete all instances in this group when the group is destroyed. Set to `true` to tear them down, `false` (the default) leaves them running.
        /// </summary>
        [Output("deleteServersOnDestroy")]
        public Output<bool?> DeleteServersOnDestroy { get; private set; } = null!;

        /// <summary>
        /// The specification of the Load Balancer to link to the Instance group.
        /// </summary>
        [Output("loadBalancers")]
        public Output<ImmutableArray<Outputs.InstanceGroupLoadBalancer>> LoadBalancers { get; private set; } = null!;

        /// <summary>
        /// The Instance group name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// `project_id`) The ID of the Project the Instance group is associated with.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The tags associated with the Instance group.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The ID of the Instance template to attach to the Instance group.
        /// </summary>
        [Output("templateId")]
        public Output<string> TemplateId { get; private set; } = null!;

        /// <summary>
        /// Date and time of Instance group's last update (RFC 3339 format).
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// `zone`) The zone in which the Instance group exists.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a InstanceGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InstanceGroup(string name, InstanceGroupArgs args, CustomResourceOptions? options = null)
            : base("scaleway:autoscaling/instanceGroup:InstanceGroup", name, args ?? new InstanceGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InstanceGroup(string name, Input<string> id, InstanceGroupState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:autoscaling/instanceGroup:InstanceGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InstanceGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InstanceGroup Get(string name, Input<string> id, InstanceGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new InstanceGroup(name, id, state, options);
        }
    }

    public sealed class InstanceGroupArgs : global::Pulumi.ResourceArgs
    {
        [Input("capacities")]
        private InputList<Inputs.InstanceGroupCapacityArgs>? _capacities;

        /// <summary>
        /// The specification of the minimum and maximum replicas for the Instance group, and the cooldown interval between two scaling events.
        /// </summary>
        public InputList<Inputs.InstanceGroupCapacityArgs> Capacities
        {
            get => _capacities ?? (_capacities = new InputList<Inputs.InstanceGroupCapacityArgs>());
            set => _capacities = value;
        }

        /// <summary>
        /// Whether to delete all instances in this group when the group is destroyed. Set to `true` to tear them down, `false` (the default) leaves them running.
        /// </summary>
        [Input("deleteServersOnDestroy")]
        public Input<bool>? DeleteServersOnDestroy { get; set; }

        [Input("loadBalancers")]
        private InputList<Inputs.InstanceGroupLoadBalancerArgs>? _loadBalancers;

        /// <summary>
        /// The specification of the Load Balancer to link to the Instance group.
        /// </summary>
        public InputList<Inputs.InstanceGroupLoadBalancerArgs> LoadBalancers
        {
            get => _loadBalancers ?? (_loadBalancers = new InputList<Inputs.InstanceGroupLoadBalancerArgs>());
            set => _loadBalancers = value;
        }

        /// <summary>
        /// The Instance group name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// `project_id`) The ID of the Project the Instance group is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tags associated with the Instance group.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of the Instance template to attach to the Instance group.
        /// </summary>
        [Input("templateId", required: true)]
        public Input<string> TemplateId { get; set; } = null!;

        /// <summary>
        /// `zone`) The zone in which the Instance group exists.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public InstanceGroupArgs()
        {
        }
        public static new InstanceGroupArgs Empty => new InstanceGroupArgs();
    }

    public sealed class InstanceGroupState : global::Pulumi.ResourceArgs
    {
        [Input("capacities")]
        private InputList<Inputs.InstanceGroupCapacityGetArgs>? _capacities;

        /// <summary>
        /// The specification of the minimum and maximum replicas for the Instance group, and the cooldown interval between two scaling events.
        /// </summary>
        public InputList<Inputs.InstanceGroupCapacityGetArgs> Capacities
        {
            get => _capacities ?? (_capacities = new InputList<Inputs.InstanceGroupCapacityGetArgs>());
            set => _capacities = value;
        }

        /// <summary>
        /// Date and time of Instance group's creation (RFC 3339 format).
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Whether to delete all instances in this group when the group is destroyed. Set to `true` to tear them down, `false` (the default) leaves them running.
        /// </summary>
        [Input("deleteServersOnDestroy")]
        public Input<bool>? DeleteServersOnDestroy { get; set; }

        [Input("loadBalancers")]
        private InputList<Inputs.InstanceGroupLoadBalancerGetArgs>? _loadBalancers;

        /// <summary>
        /// The specification of the Load Balancer to link to the Instance group.
        /// </summary>
        public InputList<Inputs.InstanceGroupLoadBalancerGetArgs> LoadBalancers
        {
            get => _loadBalancers ?? (_loadBalancers = new InputList<Inputs.InstanceGroupLoadBalancerGetArgs>());
            set => _loadBalancers = value;
        }

        /// <summary>
        /// The Instance group name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// `project_id`) The ID of the Project the Instance group is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tags associated with the Instance group.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of the Instance template to attach to the Instance group.
        /// </summary>
        [Input("templateId")]
        public Input<string>? TemplateId { get; set; }

        /// <summary>
        /// Date and time of Instance group's last update (RFC 3339 format).
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// `zone`) The zone in which the Instance group exists.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public InstanceGroupState()
        {
        }
        public static new InstanceGroupState Empty => new InstanceGroupState();
    }
}
