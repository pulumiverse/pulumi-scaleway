// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Autoscaling
{
    /// <summary>
    /// Books and manages Autoscaling Instance policies.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var up = new Scaleway.Autoscaling.InstancePolicy("up", new()
    ///     {
    ///         InstanceGroupId = main.Id,
    ///         Name = "scale-up-if-cpu-high",
    ///         Action = "scale_up",
    ///         Type = "flat_count",
    ///         Value = 1,
    ///         Priority = 1,
    ///         Metrics = new[]
    ///         {
    ///             new Scaleway.Autoscaling.Inputs.InstancePolicyMetricArgs
    ///             {
    ///                 Name = "cpu scale up",
    ///                 ManagedMetric = "managed_metric_instance_cpu",
    ///                 Operator = "operator_greater_than",
    ///                 Aggregate = "aggregate_average",
    ///                 SamplingRangeMin = 5,
    ///                 Threshold = 70,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var down = new Scaleway.Autoscaling.InstancePolicy("down", new()
    ///     {
    ///         InstanceGroupId = main.Id,
    ///         Name = "scale-down-if-cpu-low",
    ///         Action = "scale_down",
    ///         Type = "flat_count",
    ///         Value = 1,
    ///         Priority = 2,
    ///         Metrics = new[]
    ///         {
    ///             new Scaleway.Autoscaling.Inputs.InstancePolicyMetricArgs
    ///             {
    ///                 Name = "cpu scale down",
    ///                 ManagedMetric = "managed_metric_instance_cpu",
    ///                 Operator = "operator_less_than",
    ///                 Aggregate = "aggregate_average",
    ///                 SamplingRangeMin = 5,
    ///                 Threshold = 40,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Autoscaling instance policies can be imported using `{zone}/{id}`, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:autoscaling/instancePolicy:InstancePolicy main fr-par-1/11111111-1111-1111-1111-111111111111
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:autoscaling/instancePolicy:InstancePolicy")]
    public partial class InstancePolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The action to execute when the metric-based condition is met.
        /// </summary>
        [Output("action")]
        public Output<string> Action { get; private set; } = null!;

        /// <summary>
        /// The ID of the Instance group related to this policy.
        /// </summary>
        [Output("instanceGroupId")]
        public Output<string> InstanceGroupId { get; private set; } = null!;

        /// <summary>
        /// Cockpit metric to use when determining whether to trigger a scale up/down action.
        /// </summary>
        [Output("metrics")]
        public Output<ImmutableArray<Outputs.InstancePolicyMetric>> Metrics { get; private set; } = null!;

        /// <summary>
        /// The Instance policy name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The priority of this policy compared to all other scaling policies. This determines the processing order. The lower the number, the higher the priority.
        /// </summary>
        [Output("priority")]
        public Output<int> Priority { get; private set; } = null!;

        /// <summary>
        /// `project_id`) The ID of the Project the Instance policy is associated with.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// How to use the number defined in `value` when determining by how many Instances to scale up/down.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The value representing the magnitude of the scaling action to take for the Instance group. Depending on the `type` parameter, this number could represent a total number of Instances in the group, a number of Instances to add, or a percentage to scale the group by.
        /// </summary>
        [Output("value")]
        public Output<int> Value { get; private set; } = null!;

        /// <summary>
        /// `zone`) The zone in which the Instance policy exists.
        /// </summary>
        [Output("zone")]
        public Output<string?> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a InstancePolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InstancePolicy(string name, InstancePolicyArgs args, CustomResourceOptions? options = null)
            : base("scaleway:autoscaling/instancePolicy:InstancePolicy", name, args ?? new InstancePolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InstancePolicy(string name, Input<string> id, InstancePolicyState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:autoscaling/instancePolicy:InstancePolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InstancePolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InstancePolicy Get(string name, Input<string> id, InstancePolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new InstancePolicy(name, id, state, options);
        }
    }

    public sealed class InstancePolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action to execute when the metric-based condition is met.
        /// </summary>
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        /// <summary>
        /// The ID of the Instance group related to this policy.
        /// </summary>
        [Input("instanceGroupId", required: true)]
        public Input<string> InstanceGroupId { get; set; } = null!;

        [Input("metrics")]
        private InputList<Inputs.InstancePolicyMetricArgs>? _metrics;

        /// <summary>
        /// Cockpit metric to use when determining whether to trigger a scale up/down action.
        /// </summary>
        public InputList<Inputs.InstancePolicyMetricArgs> Metrics
        {
            get => _metrics ?? (_metrics = new InputList<Inputs.InstancePolicyMetricArgs>());
            set => _metrics = value;
        }

        /// <summary>
        /// The Instance policy name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The priority of this policy compared to all other scaling policies. This determines the processing order. The lower the number, the higher the priority.
        /// </summary>
        [Input("priority", required: true)]
        public Input<int> Priority { get; set; } = null!;

        /// <summary>
        /// `project_id`) The ID of the Project the Instance policy is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// How to use the number defined in `value` when determining by how many Instances to scale up/down.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The value representing the magnitude of the scaling action to take for the Instance group. Depending on the `type` parameter, this number could represent a total number of Instances in the group, a number of Instances to add, or a percentage to scale the group by.
        /// </summary>
        [Input("value", required: true)]
        public Input<int> Value { get; set; } = null!;

        /// <summary>
        /// `zone`) The zone in which the Instance policy exists.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public InstancePolicyArgs()
        {
        }
        public static new InstancePolicyArgs Empty => new InstancePolicyArgs();
    }

    public sealed class InstancePolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action to execute when the metric-based condition is met.
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// The ID of the Instance group related to this policy.
        /// </summary>
        [Input("instanceGroupId")]
        public Input<string>? InstanceGroupId { get; set; }

        [Input("metrics")]
        private InputList<Inputs.InstancePolicyMetricGetArgs>? _metrics;

        /// <summary>
        /// Cockpit metric to use when determining whether to trigger a scale up/down action.
        /// </summary>
        public InputList<Inputs.InstancePolicyMetricGetArgs> Metrics
        {
            get => _metrics ?? (_metrics = new InputList<Inputs.InstancePolicyMetricGetArgs>());
            set => _metrics = value;
        }

        /// <summary>
        /// The Instance policy name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The priority of this policy compared to all other scaling policies. This determines the processing order. The lower the number, the higher the priority.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// `project_id`) The ID of the Project the Instance policy is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// How to use the number defined in `value` when determining by how many Instances to scale up/down.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The value representing the magnitude of the scaling action to take for the Instance group. Depending on the `type` parameter, this number could represent a total number of Instances in the group, a number of Instances to add, or a percentage to scale the group by.
        /// </summary>
        [Input("value")]
        public Input<int>? Value { get; set; }

        /// <summary>
        /// `zone`) The zone in which the Instance policy exists.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public InstancePolicyState()
        {
        }
        public static new InstancePolicyState Empty => new InstancePolicyState();
    }
}
