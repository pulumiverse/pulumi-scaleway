// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Autoscaling
{
    /// <summary>
    /// Books and manages Autoscaling Instance templates.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Scaleway.Autoscaling.InstanceTemplate("main", new()
    ///     {
    ///         Name = "asg-template",
    ///         CommercialType = "PLAY2-MICRO",
    ///         Tags = new[]
    ///         {
    ///             "terraform-test",
    ///             "basic",
    ///         },
    ///         Volumes = new[]
    ///         {
    ///             new Scaleway.Autoscaling.Inputs.InstanceTemplateVolumeArgs
    ///             {
    ///                 Name = "as-volume",
    ///                 VolumeType = "sbs",
    ///                 Boot = true,
    ///                 FromSnapshot = new Scaleway.Autoscaling.Inputs.InstanceTemplateVolumeFromSnapshotArgs
    ///                 {
    ///                     SnapshotId = mainScalewayBlockSnapshot.Id,
    ///                 },
    ///                 PerfIops = 5000,
    ///             },
    ///         },
    ///         PublicIpsV4Count = 1,
    ///         PrivateNetworkIds = new[]
    ///         {
    ///             mainScalewayVpcPrivateNetwork.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Autoscaling Instance templates can be imported using `{zone}/{id}`, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:autoscaling/instanceTemplate:InstanceTemplate main fr-par-1/11111111-1111-1111-1111-111111111111
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:autoscaling/instanceTemplate:InstanceTemplate")]
    public partial class InstanceTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The instance image ID. Can be an ID of a marketplace or personal image. This image must be compatible with `volume` and `commercial_type` template.
        /// </summary>
        [Output("cloudInit")]
        public Output<string?> CloudInit { get; private set; } = null!;

        /// <summary>
        /// The name of Instance commercial type.
        /// </summary>
        [Output("commercialType")]
        public Output<string> CommercialType { get; private set; } = null!;

        /// <summary>
        /// Date and time of Instance group's creation (RFC 3339 format).
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The instance image ID. Can be an ID of a marketplace or personal image. This image must be compatible with `volume` and `commercial_type` template.
        /// </summary>
        [Output("imageId")]
        public Output<string?> ImageId { get; private set; } = null!;

        /// <summary>
        /// The Instance group template.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The instance placement group ID. This is optional, but it is highly recommended to set a preference for Instance location within Availability Zone.
        /// </summary>
        [Output("placementGroupId")]
        public Output<string?> PlacementGroupId { get; private set; } = null!;

        /// <summary>
        /// The private Network IDs to attach to the new Instance.
        /// </summary>
        [Output("privateNetworkIds")]
        public Output<ImmutableArray<string>> PrivateNetworkIds { get; private set; } = null!;

        /// <summary>
        /// `project_id`) The ID of the Project the Instance template is associated with.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The number of flexible IPv4 addresses to attach to the new Instance.
        /// </summary>
        [Output("publicIpsV4Count")]
        public Output<int?> PublicIpsV4Count { get; private set; } = null!;

        /// <summary>
        /// The number of flexible IPv6 addresses to attach to the new Instance.
        /// </summary>
        [Output("publicIpsV6Count")]
        public Output<int?> PublicIpsV6Count { get; private set; } = null!;

        /// <summary>
        /// The instance security group ID.
        /// </summary>
        [Output("securityGroupId")]
        public Output<string?> SecurityGroupId { get; private set; } = null!;

        /// <summary>
        /// The Instance template status
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The tags associated with the Instance template.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Date and time of Instance group's last update (RFC 3339 format).
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The template of Instance volume.
        /// </summary>
        [Output("volumes")]
        public Output<ImmutableArray<Outputs.InstanceTemplateVolume>> Volumes { get; private set; } = null!;

        /// <summary>
        /// `zone`) The zone in which the Instance template exists.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a InstanceTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InstanceTemplate(string name, InstanceTemplateArgs args, CustomResourceOptions? options = null)
            : base("scaleway:autoscaling/instanceTemplate:InstanceTemplate", name, args ?? new InstanceTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InstanceTemplate(string name, Input<string> id, InstanceTemplateState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:autoscaling/instanceTemplate:InstanceTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InstanceTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InstanceTemplate Get(string name, Input<string> id, InstanceTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new InstanceTemplate(name, id, state, options);
        }
    }

    public sealed class InstanceTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The instance image ID. Can be an ID of a marketplace or personal image. This image must be compatible with `volume` and `commercial_type` template.
        /// </summary>
        [Input("cloudInit")]
        public Input<string>? CloudInit { get; set; }

        /// <summary>
        /// The name of Instance commercial type.
        /// </summary>
        [Input("commercialType", required: true)]
        public Input<string> CommercialType { get; set; } = null!;

        /// <summary>
        /// The instance image ID. Can be an ID of a marketplace or personal image. This image must be compatible with `volume` and `commercial_type` template.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// The Instance group template.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The instance placement group ID. This is optional, but it is highly recommended to set a preference for Instance location within Availability Zone.
        /// </summary>
        [Input("placementGroupId")]
        public Input<string>? PlacementGroupId { get; set; }

        [Input("privateNetworkIds")]
        private InputList<string>? _privateNetworkIds;

        /// <summary>
        /// The private Network IDs to attach to the new Instance.
        /// </summary>
        public InputList<string> PrivateNetworkIds
        {
            get => _privateNetworkIds ?? (_privateNetworkIds = new InputList<string>());
            set => _privateNetworkIds = value;
        }

        /// <summary>
        /// `project_id`) The ID of the Project the Instance template is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The number of flexible IPv4 addresses to attach to the new Instance.
        /// </summary>
        [Input("publicIpsV4Count")]
        public Input<int>? PublicIpsV4Count { get; set; }

        /// <summary>
        /// The number of flexible IPv6 addresses to attach to the new Instance.
        /// </summary>
        [Input("publicIpsV6Count")]
        public Input<int>? PublicIpsV6Count { get; set; }

        /// <summary>
        /// The instance security group ID.
        /// </summary>
        [Input("securityGroupId")]
        public Input<string>? SecurityGroupId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tags associated with the Instance template.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("volumes")]
        private InputList<Inputs.InstanceTemplateVolumeArgs>? _volumes;

        /// <summary>
        /// The template of Instance volume.
        /// </summary>
        public InputList<Inputs.InstanceTemplateVolumeArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputList<Inputs.InstanceTemplateVolumeArgs>());
            set => _volumes = value;
        }

        /// <summary>
        /// `zone`) The zone in which the Instance template exists.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public InstanceTemplateArgs()
        {
        }
        public static new InstanceTemplateArgs Empty => new InstanceTemplateArgs();
    }

    public sealed class InstanceTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The instance image ID. Can be an ID of a marketplace or personal image. This image must be compatible with `volume` and `commercial_type` template.
        /// </summary>
        [Input("cloudInit")]
        public Input<string>? CloudInit { get; set; }

        /// <summary>
        /// The name of Instance commercial type.
        /// </summary>
        [Input("commercialType")]
        public Input<string>? CommercialType { get; set; }

        /// <summary>
        /// Date and time of Instance group's creation (RFC 3339 format).
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The instance image ID. Can be an ID of a marketplace or personal image. This image must be compatible with `volume` and `commercial_type` template.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// The Instance group template.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The instance placement group ID. This is optional, but it is highly recommended to set a preference for Instance location within Availability Zone.
        /// </summary>
        [Input("placementGroupId")]
        public Input<string>? PlacementGroupId { get; set; }

        [Input("privateNetworkIds")]
        private InputList<string>? _privateNetworkIds;

        /// <summary>
        /// The private Network IDs to attach to the new Instance.
        /// </summary>
        public InputList<string> PrivateNetworkIds
        {
            get => _privateNetworkIds ?? (_privateNetworkIds = new InputList<string>());
            set => _privateNetworkIds = value;
        }

        /// <summary>
        /// `project_id`) The ID of the Project the Instance template is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The number of flexible IPv4 addresses to attach to the new Instance.
        /// </summary>
        [Input("publicIpsV4Count")]
        public Input<int>? PublicIpsV4Count { get; set; }

        /// <summary>
        /// The number of flexible IPv6 addresses to attach to the new Instance.
        /// </summary>
        [Input("publicIpsV6Count")]
        public Input<int>? PublicIpsV6Count { get; set; }

        /// <summary>
        /// The instance security group ID.
        /// </summary>
        [Input("securityGroupId")]
        public Input<string>? SecurityGroupId { get; set; }

        /// <summary>
        /// The Instance template status
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tags associated with the Instance template.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Date and time of Instance group's last update (RFC 3339 format).
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        [Input("volumes")]
        private InputList<Inputs.InstanceTemplateVolumeGetArgs>? _volumes;

        /// <summary>
        /// The template of Instance volume.
        /// </summary>
        public InputList<Inputs.InstanceTemplateVolumeGetArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputList<Inputs.InstanceTemplateVolumeGetArgs>());
            set => _volumes = value;
        }

        /// <summary>
        /// `zone`) The zone in which the Instance template exists.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public InstanceTemplateState()
        {
        }
        public static new InstanceTemplateState Empty => new InstanceTemplateState();
    }
}
