// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Autoscaling.Outputs
{

    [OutputType]
    public sealed class InstancePolicyMetric
    {
        /// <summary>
        /// How the values sampled for the `metric` should be aggregated.
        /// </summary>
        public readonly string Aggregate;
        /// <summary>
        /// The custom metric to use for this policy. This must be stored in Scaleway Cockpit. The metric forms the basis of the condition that will be checked to determine whether a scaling action should be triggered
        /// </summary>
        public readonly string? CockpitMetricName;
        /// <summary>
        /// The managed metric to use for this policy. These are available by default in Cockpit without any configuration or `node_exporter`. The chosen metric forms the basis of the condition that will be checked to determine whether a scaling action should be triggered.
        /// </summary>
        public readonly string? ManagedMetric;
        /// <summary>
        /// Name or description of the metric policy.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Operator used when comparing the threshold value of the chosen `metric` to the actual sampled and aggregated value.
        /// </summary>
        public readonly string Operator;
        /// <summary>
        /// The Interval of time, in minutes, during which metric is sampled.
        /// </summary>
        public readonly int? SamplingRangeMin;
        /// <summary>
        /// The threshold value to measure the aggregated sampled `metric` value against. Combined with the `operator` field, determines whether a scaling action should be triggered.
        /// </summary>
        public readonly int? Threshold;

        [OutputConstructor]
        private InstancePolicyMetric(
            string aggregate,

            string? cockpitMetricName,

            string? managedMetric,

            string name,

            string @operator,

            int? samplingRangeMin,

            int? threshold)
        {
            Aggregate = aggregate;
            CockpitMetricName = cockpitMetricName;
            ManagedMetric = managedMetric;
            Name = name;
            Operator = @operator;
            SamplingRangeMin = samplingRangeMin;
            Threshold = threshold;
        }
    }
}
