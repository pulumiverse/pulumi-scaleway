// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Block
{
    public static class GetSnapshot
    {
        /// <summary>
        /// The `scaleway.block.Snapshot` data source is used to retrieve information about a Block Storage volume snapshot.
        /// 
        /// Refer to the Block Storage [product documentation](https://www.scaleway.com/en/docs/block-storage/) and [API documentation](https://www.scaleway.com/en/developers/api/block/) for more information.
        /// </summary>
        public static Task<GetSnapshotResult> InvokeAsync(GetSnapshotArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSnapshotResult>("scaleway:block/getSnapshot:getSnapshot", args ?? new GetSnapshotArgs(), options.WithDefaults());

        /// <summary>
        /// The `scaleway.block.Snapshot` data source is used to retrieve information about a Block Storage volume snapshot.
        /// 
        /// Refer to the Block Storage [product documentation](https://www.scaleway.com/en/docs/block-storage/) and [API documentation](https://www.scaleway.com/en/developers/api/block/) for more information.
        /// </summary>
        public static Output<GetSnapshotResult> Invoke(GetSnapshotInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSnapshotResult>("scaleway:block/getSnapshot:getSnapshot", args ?? new GetSnapshotInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `scaleway.block.Snapshot` data source is used to retrieve information about a Block Storage volume snapshot.
        /// 
        /// Refer to the Block Storage [product documentation](https://www.scaleway.com/en/docs/block-storage/) and [API documentation](https://www.scaleway.com/en/developers/api/block/) for more information.
        /// </summary>
        public static Output<GetSnapshotResult> Invoke(GetSnapshotInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSnapshotResult>("scaleway:block/getSnapshot:getSnapshot", args ?? new GetSnapshotInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSnapshotArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the snapshot. Only one of name or SnapshotId should be specified.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The unique identifier of the Project to which the snapshot is associated.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// The unique identifier of the snapshot. Only one of `Name` and `SnapshotId` should be specified.
        /// </summary>
        [Input("snapshotId")]
        public string? SnapshotId { get; set; }

        /// <summary>
        /// The unique identifier of the volume from which the snapshot was created.
        /// </summary>
        [Input("volumeId")]
        public string? VolumeId { get; set; }

        /// <summary>
        /// ) The zone in which the snapshot exists.
        /// </summary>
        [Input("zone")]
        public string? Zone { get; set; }

        public GetSnapshotArgs()
        {
        }
        public static new GetSnapshotArgs Empty => new GetSnapshotArgs();
    }

    public sealed class GetSnapshotInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the snapshot. Only one of name or SnapshotId should be specified.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The unique identifier of the Project to which the snapshot is associated.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The unique identifier of the snapshot. Only one of `Name` and `SnapshotId` should be specified.
        /// </summary>
        [Input("snapshotId")]
        public Input<string>? SnapshotId { get; set; }

        /// <summary>
        /// The unique identifier of the volume from which the snapshot was created.
        /// </summary>
        [Input("volumeId")]
        public Input<string>? VolumeId { get; set; }

        /// <summary>
        /// ) The zone in which the snapshot exists.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GetSnapshotInvokeArgs()
        {
        }
        public static new GetSnapshotInvokeArgs Empty => new GetSnapshotInvokeArgs();
    }


    [OutputType]
    public sealed class GetSnapshotResult
    {
        public readonly ImmutableArray<Outputs.GetSnapshotExportResult> Exports;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetSnapshotImportResult> Imports;
        public readonly string? Name;
        public readonly string? ProjectId;
        public readonly string? SnapshotId;
        public readonly ImmutableArray<string> Tags;
        public readonly string? VolumeId;
        public readonly string? Zone;

        [OutputConstructor]
        private GetSnapshotResult(
            ImmutableArray<Outputs.GetSnapshotExportResult> exports,

            string id,

            ImmutableArray<Outputs.GetSnapshotImportResult> imports,

            string? name,

            string? projectId,

            string? snapshotId,

            ImmutableArray<string> tags,

            string? volumeId,

            string? zone)
        {
            Exports = exports;
            Id = id;
            Imports = imports;
            Name = name;
            ProjectId = projectId;
            SnapshotId = snapshotId;
            Tags = tags;
            VolumeId = volumeId;
            Zone = zone;
        }
    }
}
