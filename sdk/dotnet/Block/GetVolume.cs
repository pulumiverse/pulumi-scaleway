// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Block
{
    public static class GetVolume
    {
        /// <summary>
        /// The `scaleway.block.Volume` data source is used to retrieve information about a Block Storage volume.
        /// Refer to the Block Storage [product documentation](https://www.scaleway.com/en/docs/block-storage/) and [API documentation](https://www.scaleway.com/en/developers/api/block/) for more information.
        /// </summary>
        public static Task<GetVolumeResult> InvokeAsync(GetVolumeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVolumeResult>("scaleway:block/getVolume:getVolume", args ?? new GetVolumeArgs(), options.WithDefaults());

        /// <summary>
        /// The `scaleway.block.Volume` data source is used to retrieve information about a Block Storage volume.
        /// Refer to the Block Storage [product documentation](https://www.scaleway.com/en/docs/block-storage/) and [API documentation](https://www.scaleway.com/en/developers/api/block/) for more information.
        /// </summary>
        public static Output<GetVolumeResult> Invoke(GetVolumeInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVolumeResult>("scaleway:block/getVolume:getVolume", args ?? new GetVolumeInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `scaleway.block.Volume` data source is used to retrieve information about a Block Storage volume.
        /// Refer to the Block Storage [product documentation](https://www.scaleway.com/en/docs/block-storage/) and [API documentation](https://www.scaleway.com/en/developers/api/block/) for more information.
        /// </summary>
        public static Output<GetVolumeResult> Invoke(GetVolumeInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVolumeResult>("scaleway:block/getVolume:getVolume", args ?? new GetVolumeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVolumeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the volume. Only one of `Name` and `VolumeId` should be specified.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The unique identifier of the Project to which the volume is associated.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// The unique identifier of the volume. Only one of `Name` and `VolumeId` should be specified.
        /// </summary>
        [Input("volumeId")]
        public string? VolumeId { get; set; }

        /// <summary>
        /// ). The zone in which the volume exists.
        /// </summary>
        [Input("zone")]
        public string? Zone { get; set; }

        public GetVolumeArgs()
        {
        }
        public static new GetVolumeArgs Empty => new GetVolumeArgs();
    }

    public sealed class GetVolumeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the volume. Only one of `Name` and `VolumeId` should be specified.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The unique identifier of the Project to which the volume is associated.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The unique identifier of the volume. Only one of `Name` and `VolumeId` should be specified.
        /// </summary>
        [Input("volumeId")]
        public Input<string>? VolumeId { get; set; }

        /// <summary>
        /// ). The zone in which the volume exists.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GetVolumeInvokeArgs()
        {
        }
        public static new GetVolumeInvokeArgs Empty => new GetVolumeInvokeArgs();
    }


    [OutputType]
    public sealed class GetVolumeResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceVolumeId;
        public readonly int Iops;
        public readonly string? Name;
        public readonly string? ProjectId;
        public readonly int SizeInGb;
        public readonly string SnapshotId;
        public readonly ImmutableArray<string> Tags;
        public readonly string? VolumeId;
        public readonly string? Zone;

        [OutputConstructor]
        private GetVolumeResult(
            string id,

            string instanceVolumeId,

            int iops,

            string? name,

            string? projectId,

            int sizeInGb,

            string snapshotId,

            ImmutableArray<string> tags,

            string? volumeId,

            string? zone)
        {
            Id = id;
            InstanceVolumeId = instanceVolumeId;
            Iops = iops;
            Name = name;
            ProjectId = projectId;
            SizeInGb = sizeInGb;
            SnapshotId = snapshotId;
            Tags = tags;
            VolumeId = volumeId;
            Zone = zone;
        }
    }
}
