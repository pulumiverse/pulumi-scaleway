// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway
{
    /// <summary>
    /// The `scaleway.CockpitAlertManager` resource allows you to enable and manage the Scaleway Cockpit [alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager).
    /// 
    /// Refer to Cockpit's [product documentation](https://www.scaleway.com/en/docs/observability/cockpit/concepts/) and [API documentation](https://www.scaleway.com/en/developers/api/cockpit/regional-api) for more information.
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// This section explains how to import alert managers using the ID of the Project associated with Cockpit.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:index/cockpitAlertManager:CockpitAlertManager main fr-par/11111111-1111-1111-1111-111111111111
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:index/cockpitAlertManager:CockpitAlertManager")]
    public partial class CockpitAlertManager : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The URL of the alert manager.
        /// </summary>
        [Output("alertManagerUrl")]
        public Output<string> AlertManagerUrl { get; private set; } = null!;

        /// <summary>
        /// A list of contact points with email addresses that will receive alerts. Each map should contain a single key email.
        /// </summary>
        [Output("contactPoints")]
        public Output<ImmutableArray<Outputs.CockpitAlertManagerContactPoint>> ContactPoints { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the alert manager should be enabled. Defaults to true.
        /// </summary>
        [Output("enableManagedAlerts")]
        public Output<bool?> EnableManagedAlerts { get; private set; } = null!;

        /// <summary>
        /// ) The ID of the Project the Cockpit is associated with.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// ) The region where the [alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager) should be enabled.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;


        /// <summary>
        /// Create a CockpitAlertManager resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CockpitAlertManager(string name, CockpitAlertManagerArgs? args = null, CustomResourceOptions? options = null)
            : base("scaleway:index/cockpitAlertManager:CockpitAlertManager", name, args ?? new CockpitAlertManagerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CockpitAlertManager(string name, Input<string> id, CockpitAlertManagerState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:index/cockpitAlertManager:CockpitAlertManager", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CockpitAlertManager resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CockpitAlertManager Get(string name, Input<string> id, CockpitAlertManagerState? state = null, CustomResourceOptions? options = null)
        {
            return new CockpitAlertManager(name, id, state, options);
        }
    }

    public sealed class CockpitAlertManagerArgs : global::Pulumi.ResourceArgs
    {
        [Input("contactPoints")]
        private InputList<Inputs.CockpitAlertManagerContactPointArgs>? _contactPoints;

        /// <summary>
        /// A list of contact points with email addresses that will receive alerts. Each map should contain a single key email.
        /// </summary>
        public InputList<Inputs.CockpitAlertManagerContactPointArgs> ContactPoints
        {
            get => _contactPoints ?? (_contactPoints = new InputList<Inputs.CockpitAlertManagerContactPointArgs>());
            set => _contactPoints = value;
        }

        /// <summary>
        /// Specifies whether the alert manager should be enabled. Defaults to true.
        /// </summary>
        [Input("enableManagedAlerts")]
        public Input<bool>? EnableManagedAlerts { get; set; }

        /// <summary>
        /// ) The ID of the Project the Cockpit is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// ) The region where the [alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager) should be enabled.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public CockpitAlertManagerArgs()
        {
        }
        public static new CockpitAlertManagerArgs Empty => new CockpitAlertManagerArgs();
    }

    public sealed class CockpitAlertManagerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The URL of the alert manager.
        /// </summary>
        [Input("alertManagerUrl")]
        public Input<string>? AlertManagerUrl { get; set; }

        [Input("contactPoints")]
        private InputList<Inputs.CockpitAlertManagerContactPointGetArgs>? _contactPoints;

        /// <summary>
        /// A list of contact points with email addresses that will receive alerts. Each map should contain a single key email.
        /// </summary>
        public InputList<Inputs.CockpitAlertManagerContactPointGetArgs> ContactPoints
        {
            get => _contactPoints ?? (_contactPoints = new InputList<Inputs.CockpitAlertManagerContactPointGetArgs>());
            set => _contactPoints = value;
        }

        /// <summary>
        /// Specifies whether the alert manager should be enabled. Defaults to true.
        /// </summary>
        [Input("enableManagedAlerts")]
        public Input<bool>? EnableManagedAlerts { get; set; }

        /// <summary>
        /// ) The ID of the Project the Cockpit is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// ) The region where the [alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager) should be enabled.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public CockpitAlertManagerState()
        {
        }
        public static new CockpitAlertManagerState Empty => new CockpitAlertManagerState();
    }
}
