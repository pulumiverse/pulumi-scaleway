// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Containers
{
    public static class GetContainer
    {
        /// <summary>
        /// The `scaleway.containers.Container` data source is used to retrieve information about a Serverless Container.
        /// 
        /// Refer to the Serverless Containers [product documentation](https://www.scaleway.com/en/docs/serverless/containers/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-containers/) for more information.
        /// 
        /// For more information on the limitations of Serverless Containers, refer to the [dedicated documentation](https://www.scaleway.com/en/docs/serverless-containers/reference-content/containers-limitations/).
        /// 
        /// ## Retrieve a Serverless Container
        /// 
        /// The following commands allow you to:
        /// 
        /// - retrieve a container by its name
        /// - retrieve a container by its ID
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// using Scaleway = Pulumiverse.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = new Scaleway.Containers.Namespace("main");
        /// 
        ///     var mainContainer = new Scaleway.Containers.Container("main", new()
        ///     {
        ///         Name = "test-container-data",
        ///         NamespaceId = main.Id,
        ///     });
        /// 
        ///     // Get info by container name
        ///     var byName = Scaleway.Containers.GetContainer.Invoke(new()
        ///     {
        ///         NamespaceId = main.Id,
        ///         Name = mainContainer.Name,
        ///     });
        /// 
        ///     // Get info by container ID
        ///     var byId = Scaleway.Containers.GetContainer.Invoke(new()
        ///     {
        ///         NamespaceId = main.Id,
        ///         ContainerId = mainContainer.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Arguments reference
        /// 
        /// This section lists the arguments that you can provide to the `scaleway.containers.Container` data source to filter and retrieve the desired namespace. Each argument has a specific purpose:
        /// 
        /// - `name` - (Required) The unique name of the container.
        /// 
        /// - `namespace_id` - (Required) The container namespace ID of the container.
        /// 
        /// - `project_id` - (Optional) The unique identifier of the project with which the container is associated.
        /// 
        /// &gt; **Important** Updating the `name` argument will recreate the container.
        /// </summary>
        public static Task<GetContainerResult> InvokeAsync(GetContainerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetContainerResult>("scaleway:containers/getContainer:getContainer", args ?? new GetContainerArgs(), options.WithDefaults());

        /// <summary>
        /// The `scaleway.containers.Container` data source is used to retrieve information about a Serverless Container.
        /// 
        /// Refer to the Serverless Containers [product documentation](https://www.scaleway.com/en/docs/serverless/containers/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-containers/) for more information.
        /// 
        /// For more information on the limitations of Serverless Containers, refer to the [dedicated documentation](https://www.scaleway.com/en/docs/serverless-containers/reference-content/containers-limitations/).
        /// 
        /// ## Retrieve a Serverless Container
        /// 
        /// The following commands allow you to:
        /// 
        /// - retrieve a container by its name
        /// - retrieve a container by its ID
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// using Scaleway = Pulumiverse.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = new Scaleway.Containers.Namespace("main");
        /// 
        ///     var mainContainer = new Scaleway.Containers.Container("main", new()
        ///     {
        ///         Name = "test-container-data",
        ///         NamespaceId = main.Id,
        ///     });
        /// 
        ///     // Get info by container name
        ///     var byName = Scaleway.Containers.GetContainer.Invoke(new()
        ///     {
        ///         NamespaceId = main.Id,
        ///         Name = mainContainer.Name,
        ///     });
        /// 
        ///     // Get info by container ID
        ///     var byId = Scaleway.Containers.GetContainer.Invoke(new()
        ///     {
        ///         NamespaceId = main.Id,
        ///         ContainerId = mainContainer.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Arguments reference
        /// 
        /// This section lists the arguments that you can provide to the `scaleway.containers.Container` data source to filter and retrieve the desired namespace. Each argument has a specific purpose:
        /// 
        /// - `name` - (Required) The unique name of the container.
        /// 
        /// - `namespace_id` - (Required) The container namespace ID of the container.
        /// 
        /// - `project_id` - (Optional) The unique identifier of the project with which the container is associated.
        /// 
        /// &gt; **Important** Updating the `name` argument will recreate the container.
        /// </summary>
        public static Output<GetContainerResult> Invoke(GetContainerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetContainerResult>("scaleway:containers/getContainer:getContainer", args ?? new GetContainerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `scaleway.containers.Container` data source is used to retrieve information about a Serverless Container.
        /// 
        /// Refer to the Serverless Containers [product documentation](https://www.scaleway.com/en/docs/serverless/containers/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-containers/) for more information.
        /// 
        /// For more information on the limitations of Serverless Containers, refer to the [dedicated documentation](https://www.scaleway.com/en/docs/serverless-containers/reference-content/containers-limitations/).
        /// 
        /// ## Retrieve a Serverless Container
        /// 
        /// The following commands allow you to:
        /// 
        /// - retrieve a container by its name
        /// - retrieve a container by its ID
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// using Scaleway = Pulumiverse.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = new Scaleway.Containers.Namespace("main");
        /// 
        ///     var mainContainer = new Scaleway.Containers.Container("main", new()
        ///     {
        ///         Name = "test-container-data",
        ///         NamespaceId = main.Id,
        ///     });
        /// 
        ///     // Get info by container name
        ///     var byName = Scaleway.Containers.GetContainer.Invoke(new()
        ///     {
        ///         NamespaceId = main.Id,
        ///         Name = mainContainer.Name,
        ///     });
        /// 
        ///     // Get info by container ID
        ///     var byId = Scaleway.Containers.GetContainer.Invoke(new()
        ///     {
        ///         NamespaceId = main.Id,
        ///         ContainerId = mainContainer.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Arguments reference
        /// 
        /// This section lists the arguments that you can provide to the `scaleway.containers.Container` data source to filter and retrieve the desired namespace. Each argument has a specific purpose:
        /// 
        /// - `name` - (Required) The unique name of the container.
        /// 
        /// - `namespace_id` - (Required) The container namespace ID of the container.
        /// 
        /// - `project_id` - (Optional) The unique identifier of the project with which the container is associated.
        /// 
        /// &gt; **Important** Updating the `name` argument will recreate the container.
        /// </summary>
        public static Output<GetContainerResult> Invoke(GetContainerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetContainerResult>("scaleway:containers/getContainer:getContainer", args ?? new GetContainerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetContainerArgs : global::Pulumi.InvokeArgs
    {
        [Input("containerId")]
        public string? ContainerId { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("namespaceId", required: true)]
        public string NamespaceId { get; set; } = null!;

        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// (Defaults to provider `region`) The region in which the container was created.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetContainerArgs()
        {
        }
        public static new GetContainerArgs Empty => new GetContainerArgs();
    }

    public sealed class GetContainerInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("containerId")]
        public Input<string>? ContainerId { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("namespaceId", required: true)]
        public Input<string> NamespaceId { get; set; } = null!;

        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// (Defaults to provider `region`) The region in which the container was created.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetContainerInvokeArgs()
        {
        }
        public static new GetContainerInvokeArgs Empty => new GetContainerInvokeArgs();
    }


    [OutputType]
    public sealed class GetContainerResult
    {
        public readonly string? ContainerId;
        /// <summary>
        /// The amount of vCPU computing resources to allocate to each container.
        /// </summary>
        public readonly int CpuLimit;
        /// <summary>
        /// The cron status of the container.
        /// </summary>
        public readonly string CronStatus;
        /// <summary>
        /// Boolean indicating whether the container is on a production environment.
        /// </summary>
        public readonly bool Deploy;
        /// <summary>
        /// The description of the container.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The container domain name.
        /// </summary>
        public readonly string DomainName;
        /// <summary>
        /// The [environment](https://www.scaleway.com/en/docs/serverless-containers/concepts/#environment-variables) variables of the container.
        /// </summary>
        public readonly ImmutableDictionary<string, string> EnvironmentVariables;
        /// <summary>
        /// The error message of the container.
        /// </summary>
        public readonly string ErrorMessage;
        /// <summary>
        /// Health check configuration block of the container.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerHealthCheckResult> HealthChecks;
        public readonly string HttpOption;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int LocalStorageLimit;
        /// <summary>
        /// The maximum number of simultaneous requests your container can handle at the same time.
        /// </summary>
        public readonly int MaxConcurrency;
        /// <summary>
        /// The maximum number of instances the container can scale to.
        /// </summary>
        public readonly int MaxScale;
        /// <summary>
        /// The memory resources in MB to allocate to each container.
        /// </summary>
        public readonly int MemoryLimit;
        /// <summary>
        /// The minimum number of container instances running continuously.
        /// </summary>
        public readonly int MinScale;
        public readonly string? Name;
        public readonly string NamespaceId;
        /// <summary>
        /// The port to expose the container.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// The privacy type define the way to authenticate to your container. Refer to the [dedicated documentation](https://www.scaleway.com/en/developers/api/serverless-containers/#path-containers-update-an-existing-container) for more information.
        /// </summary>
        public readonly string Privacy;
        public readonly string? ProjectId;
        /// <summary>
        /// The communication [protocol](https://www.scaleway.com/en/developers/api/serverless-containers/#path-containers-update-an-existing-container) `http1` or `h2c`. Defaults to `http1`.
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// (Defaults to provider `region`) The region in which the container was created.
        /// </summary>
        public readonly string? Region;
        /// <summary>
        /// The registry image address (e.g. `rg.fr-par.scw.cloud/$NAMESPACE/$IMAGE`).
        /// </summary>
        public readonly string RegistryImage;
        /// <summary>
        /// The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string.
        /// </summary>
        public readonly string RegistrySha256;
        /// <summary>
        /// (Optional) Execution environment of the container.
        /// </summary>
        public readonly string Sandbox;
        /// <summary>
        /// Configuration block used to decide when to scale up or down. Possible values:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerScalingOptionResult> ScalingOptions;
        public readonly ImmutableDictionary<string, string> SecretEnvironmentVariables;
        /// <summary>
        /// The container status.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The maximum amount of time your container can spend processing a request before being stopped.
        /// </summary>
        public readonly int Timeout;

        [OutputConstructor]
        private GetContainerResult(
            string? containerId,

            int cpuLimit,

            string cronStatus,

            bool deploy,

            string description,

            string domainName,

            ImmutableDictionary<string, string> environmentVariables,

            string errorMessage,

            ImmutableArray<Outputs.GetContainerHealthCheckResult> healthChecks,

            string httpOption,

            string id,

            int localStorageLimit,

            int maxConcurrency,

            int maxScale,

            int memoryLimit,

            int minScale,

            string? name,

            string namespaceId,

            int port,

            string privacy,

            string? projectId,

            string protocol,

            string? region,

            string registryImage,

            string registrySha256,

            string sandbox,

            ImmutableArray<Outputs.GetContainerScalingOptionResult> scalingOptions,

            ImmutableDictionary<string, string> secretEnvironmentVariables,

            string status,

            int timeout)
        {
            ContainerId = containerId;
            CpuLimit = cpuLimit;
            CronStatus = cronStatus;
            Deploy = deploy;
            Description = description;
            DomainName = domainName;
            EnvironmentVariables = environmentVariables;
            ErrorMessage = errorMessage;
            HealthChecks = healthChecks;
            HttpOption = httpOption;
            Id = id;
            LocalStorageLimit = localStorageLimit;
            MaxConcurrency = maxConcurrency;
            MaxScale = maxScale;
            MemoryLimit = memoryLimit;
            MinScale = minScale;
            Name = name;
            NamespaceId = namespaceId;
            Port = port;
            Privacy = privacy;
            ProjectId = projectId;
            Protocol = protocol;
            Region = region;
            RegistryImage = registryImage;
            RegistrySha256 = registrySha256;
            Sandbox = sandbox;
            ScalingOptions = scalingOptions;
            SecretEnvironmentVariables = secretEnvironmentVariables;
            Status = status;
            Timeout = timeout;
        }
    }
}
