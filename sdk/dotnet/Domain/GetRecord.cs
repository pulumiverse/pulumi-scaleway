// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Domain
{
    public static class GetRecord
    {
        /// <summary>
        /// The `scaleway.domain.Record` data source is used to get information about an existing domain record.
        /// 
        /// Refer to the Domains and DNS [product documentation](https://www.scaleway.com/en/docs/network/domains-and-dns/) and [API documentation](https://www.scaleway.com/en/developers/api/domains-and-dns/) for more information.
        /// 
        /// 
        /// ## Query domain records
        /// 
        /// The following commands allow you to:
        /// 
        /// - query a domain record specified by the DNS zone (`domain.tld`), the record name (`www`), the record type (`A`), and the record content (`1.2.3.4`).
        /// - query a domain record specified by the DNS zone (`domain.tld`) and the unique record ID (`11111111-1111-1111-1111-111111111111`).
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Query record by DNS zone, record name, type and content
        ///     var byContent = Scaleway.Domain.GetRecord.Invoke(new()
        ///     {
        ///         DnsZone = "domain.tld",
        ///         Name = "www",
        ///         Type = "A",
        ///         Data = "1.2.3.4",
        ///     });
        /// 
        ///     // Query record by DNS zone and record ID
        ///     var byId = Scaleway.Domain.GetRecord.Invoke(new()
        ///     {
        ///         DnsZone = "domain.tld",
        ///         RecordId = "11111111-1111-1111-1111-111111111111",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRecordResult> InvokeAsync(GetRecordArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRecordResult>("scaleway:domain/getRecord:getRecord", args ?? new GetRecordArgs(), options.WithDefaults());

        /// <summary>
        /// The `scaleway.domain.Record` data source is used to get information about an existing domain record.
        /// 
        /// Refer to the Domains and DNS [product documentation](https://www.scaleway.com/en/docs/network/domains-and-dns/) and [API documentation](https://www.scaleway.com/en/developers/api/domains-and-dns/) for more information.
        /// 
        /// 
        /// ## Query domain records
        /// 
        /// The following commands allow you to:
        /// 
        /// - query a domain record specified by the DNS zone (`domain.tld`), the record name (`www`), the record type (`A`), and the record content (`1.2.3.4`).
        /// - query a domain record specified by the DNS zone (`domain.tld`) and the unique record ID (`11111111-1111-1111-1111-111111111111`).
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Query record by DNS zone, record name, type and content
        ///     var byContent = Scaleway.Domain.GetRecord.Invoke(new()
        ///     {
        ///         DnsZone = "domain.tld",
        ///         Name = "www",
        ///         Type = "A",
        ///         Data = "1.2.3.4",
        ///     });
        /// 
        ///     // Query record by DNS zone and record ID
        ///     var byId = Scaleway.Domain.GetRecord.Invoke(new()
        ///     {
        ///         DnsZone = "domain.tld",
        ///         RecordId = "11111111-1111-1111-1111-111111111111",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRecordResult> Invoke(GetRecordInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRecordResult>("scaleway:domain/getRecord:getRecord", args ?? new GetRecordInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `scaleway.domain.Record` data source is used to get information about an existing domain record.
        /// 
        /// Refer to the Domains and DNS [product documentation](https://www.scaleway.com/en/docs/network/domains-and-dns/) and [API documentation](https://www.scaleway.com/en/developers/api/domains-and-dns/) for more information.
        /// 
        /// 
        /// ## Query domain records
        /// 
        /// The following commands allow you to:
        /// 
        /// - query a domain record specified by the DNS zone (`domain.tld`), the record name (`www`), the record type (`A`), and the record content (`1.2.3.4`).
        /// - query a domain record specified by the DNS zone (`domain.tld`) and the unique record ID (`11111111-1111-1111-1111-111111111111`).
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Query record by DNS zone, record name, type and content
        ///     var byContent = Scaleway.Domain.GetRecord.Invoke(new()
        ///     {
        ///         DnsZone = "domain.tld",
        ///         Name = "www",
        ///         Type = "A",
        ///         Data = "1.2.3.4",
        ///     });
        /// 
        ///     // Query record by DNS zone and record ID
        ///     var byId = Scaleway.Domain.GetRecord.Invoke(new()
        ///     {
        ///         DnsZone = "domain.tld",
        ///         RecordId = "11111111-1111-1111-1111-111111111111",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRecordResult> Invoke(GetRecordInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRecordResult>("scaleway:domain/getRecord:getRecord", args ?? new GetRecordInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRecordArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The content of the record (e.g., an IPv4 address for an `A` record or a string for a `TXT` record). Cannot be used with `record_id`.
        /// </summary>
        [Input("data")]
        public string? Data { get; set; }

        /// <summary>
        /// The DNS zone (domain) to which the record belongs. This is a required field in both examples above but is optional in the context of defining the data source.
        /// </summary>
        [Input("dnsZone")]
        public string? DnsZone { get; set; }

        /// <summary>
        /// The name of the record, which can be an empty string for a root record. Cannot be used with `record_id`.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// ). The ID of the Project associated with the domain.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// The unique identifier of the record. Cannot be used with `name`, `type`, and `data`.
        /// </summary>
        [Input("recordId")]
        public string? RecordId { get; set; }

        /// <summary>
        /// The type of the record (`A`, `AAAA`, `MX`, `CNAME`, etc.). Cannot be used with `record_id`.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        public GetRecordArgs()
        {
        }
        public static new GetRecordArgs Empty => new GetRecordArgs();
    }

    public sealed class GetRecordInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The content of the record (e.g., an IPv4 address for an `A` record or a string for a `TXT` record). Cannot be used with `record_id`.
        /// </summary>
        [Input("data")]
        public Input<string>? Data { get; set; }

        /// <summary>
        /// The DNS zone (domain) to which the record belongs. This is a required field in both examples above but is optional in the context of defining the data source.
        /// </summary>
        [Input("dnsZone")]
        public Input<string>? DnsZone { get; set; }

        /// <summary>
        /// The name of the record, which can be an empty string for a root record. Cannot be used with `record_id`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ). The ID of the Project associated with the domain.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The unique identifier of the record. Cannot be used with `name`, `type`, and `data`.
        /// </summary>
        [Input("recordId")]
        public Input<string>? RecordId { get; set; }

        /// <summary>
        /// The type of the record (`A`, `AAAA`, `MX`, `CNAME`, etc.). Cannot be used with `record_id`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetRecordInvokeArgs()
        {
        }
        public static new GetRecordInvokeArgs Empty => new GetRecordInvokeArgs();
    }


    [OutputType]
    public sealed class GetRecordResult
    {
        public readonly string? Data;
        public readonly string? DnsZone;
        public readonly string Fqdn;
        /// <summary>
        /// Information about dynamic records based on user geolocation. Find out more about dynamic records.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRecordGeoIpResult> GeoIps;
        /// <summary>
        /// Information about dynamic records based on URL resolution. Find out more about dynamic records.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRecordHttpServiceResult> HttpServices;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool KeepEmptyZone;
        public readonly string? Name;
        /// <summary>
        /// The priority of the record, mainly used with `MX` records.
        /// </summary>
        public readonly int Priority;
        public readonly string? ProjectId;
        public readonly string? RecordId;
        public readonly bool RootZone;
        /// <summary>
        /// The Time To Live (TTL) of the record in seconds.
        /// </summary>
        public readonly int Ttl;
        public readonly string? Type;
        /// <summary>
        /// Information about dynamic records based on the client’s (resolver) subnet. Find out more about dynamic records.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRecordViewResult> Views;
        /// <summary>
        /// Information about dynamic records based on IP weights. Find out more about dynamic records.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRecordWeightedResult> Weighteds;

        [OutputConstructor]
        private GetRecordResult(
            string? data,

            string? dnsZone,

            string fqdn,

            ImmutableArray<Outputs.GetRecordGeoIpResult> geoIps,

            ImmutableArray<Outputs.GetRecordHttpServiceResult> httpServices,

            string id,

            bool keepEmptyZone,

            string? name,

            int priority,

            string? projectId,

            string? recordId,

            bool rootZone,

            int ttl,

            string? type,

            ImmutableArray<Outputs.GetRecordViewResult> views,

            ImmutableArray<Outputs.GetRecordWeightedResult> weighteds)
        {
            Data = data;
            DnsZone = dnsZone;
            Fqdn = fqdn;
            GeoIps = geoIps;
            HttpServices = httpServices;
            Id = id;
            KeepEmptyZone = keepEmptyZone;
            Name = name;
            Priority = priority;
            ProjectId = projectId;
            RecordId = recordId;
            RootZone = rootZone;
            Ttl = ttl;
            Type = type;
            Views = views;
            Weighteds = weighteds;
        }
    }
}
