// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Domain.Inputs
{

    public sealed class RegistrationTechnicalContactGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Primary address line for the contact.
        /// </summary>
        [Input("addressLine1", required: true)]
        public Input<string> AddressLine1 { get; set; } = null!;

        /// <summary>
        /// Secondary address line for the contact (optional).
        /// </summary>
        [Input("addressLine2")]
        public Input<string>? AddressLine2 { get; set; }

        /// <summary>
        /// City of the contact's address.
        /// </summary>
        [Input("city", required: true)]
        public Input<string> City { get; set; } = null!;

        /// <summary>
        /// Company identification code (e.g., SIREN/SIRET in France) for the contact.
        /// </summary>
        [Input("companyIdentificationCode", required: true)]
        public Input<string> CompanyIdentificationCode { get; set; } = null!;

        /// <summary>
        /// Name of the company associated with the contact (if applicable).
        /// </summary>
        [Input("companyName")]
        public Input<string>? CompanyName { get; set; }

        /// <summary>
        /// Country code of the contact's address (ISO format).
        /// </summary>
        [Input("country", required: true)]
        public Input<string> Country { get; set; } = null!;

        /// <summary>
        /// Primary email address of the contact.
        /// </summary>
        [Input("email", required: true)]
        public Input<string> Email { get; set; } = null!;

        /// <summary>
        /// Alternative email address for the contact.
        /// </summary>
        [Input("emailAlt")]
        public Input<string>? EmailAlt { get; set; }

        /// <summary>
        /// Details specific to European domain extensions.
        /// </summary>
        [Input("extensionEu")]
        public Input<Inputs.RegistrationTechnicalContactExtensionEuGetArgs>? ExtensionEu { get; set; }

        /// <summary>
        /// Details specific to French domain extensions.
        /// </summary>
        [Input("extensionFr")]
        public Input<Inputs.RegistrationTechnicalContactExtensionFrGetArgs>? ExtensionFr { get; set; }

        [Input("extensionNls")]
        private InputList<string>? _extensionNls;

        /// <summary>
        /// Extension details specific to Dutch domain registrations.
        /// </summary>
        public InputList<string> ExtensionNls
        {
            get => _extensionNls ?? (_extensionNls = new InputList<string>());
            set => _extensionNls = value;
        }

        /// <summary>
        /// Fax number for the contact (if available).
        /// </summary>
        [Input("faxNumber")]
        public Input<string>? FaxNumber { get; set; }

        /// <summary>
        /// First name of the contact.
        /// </summary>
        [Input("firstname", required: true)]
        public Input<string> Firstname { get; set; } = null!;

        /// <summary>
        /// Preferred language of the contact (e.g., 'en_US', 'fr_FR').
        /// </summary>
        [Input("lang")]
        public Input<string>? Lang { get; set; }

        /// <summary>
        /// Last name of the contact.
        /// </summary>
        [Input("lastname", required: true)]
        public Input<string> Lastname { get; set; } = null!;

        /// <summary>
        /// Legal form of the contact (e.g., 'individual' or 'organization').
        /// </summary>
        [Input("legalForm", required: true)]
        public Input<string> LegalForm { get; set; } = null!;

        /// <summary>
        /// Primary phone number of the contact.
        /// </summary>
        [Input("phoneNumber", required: true)]
        public Input<string> PhoneNumber { get; set; } = null!;

        /// <summary>
        /// Indicates if the contact is used for resale purposes.
        /// </summary>
        [Input("resale")]
        public Input<bool>? Resale { get; set; }

        /// <summary>
        /// State or region of the contact.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// VAT identification code of the contact, if applicable.
        /// </summary>
        [Input("vatIdentificationCode", required: true)]
        public Input<string> VatIdentificationCode { get; set; } = null!;

        /// <summary>
        /// Indicates whether the contact has opted into WHOIS publishing.
        /// </summary>
        [Input("whoisOptIn")]
        public Input<bool>? WhoisOptIn { get; set; }

        /// <summary>
        /// Postal code of the contact's address.
        /// </summary>
        [Input("zip", required: true)]
        public Input<string> Zip { get; set; } = null!;

        public RegistrationTechnicalContactGetArgs()
        {
        }
        public static new RegistrationTechnicalContactGetArgs Empty => new RegistrationTechnicalContactGetArgs();
    }
}
