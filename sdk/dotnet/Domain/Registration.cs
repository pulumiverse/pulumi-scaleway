// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Domain
{
    /// <summary>
    /// The `scaleway.domain.Registration` resource allows you to purchase and manage domain registrations with Scaleway. Using this resource you can register one or more domains for a specified duration, configure auto-renewal and DNSSEC options, and set contact information. You can supply an owner contact either by providing an existing contact ID or by specifying the complete contact details. The resource automatically returns additional contact information (administrative and technical) as provided by the Scaleway API.
    /// 
    /// Refer to the [Domains and DNS documentation](https://www.scaleway.com/en/docs/network/domains-and-dns/) and the [API documentation](https://developers.scaleway.com/) for more details.
    /// 
    /// ## Example Usage
    /// 
    /// ### Purchase a Single Domain
    /// 
    /// The following example purchases a domain with a one-year registration period and specifies the owner contact details. Administrative and technical contacts are returned by the API.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Scaleway.Domain.Registration("test", new()
    ///     {
    ///         DomainNames = new[]
    ///         {
    ///             "example.com",
    ///         },
    ///         DurationInYears = 1,
    ///         OwnerContact = new Scaleway.Domain.Inputs.RegistrationOwnerContactArgs
    ///         {
    ///             LegalForm = "individual",
    ///             Firstname = "John",
    ///             Lastname = "DOE",
    ///             Email = "john.doe@example.com",
    ///             PhoneNumber = "+1.23456789",
    ///             AddressLine1 = "123 Main Street",
    ///             City = "Paris",
    ///             Zip = "75001",
    ///             Country = "FR",
    ///             VatIdentificationCode = "FR12345678901",
    ///             CompanyIdentificationCode = "123456789",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Update Domain Settings
    /// 
    /// You can update the resource to enable auto-renewal and DNSSEC:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Scaleway.Domain.Registration("test", new()
    ///     {
    ///         DomainNames = new[]
    ///         {
    ///             "example.com",
    ///         },
    ///         DurationInYears = 1,
    ///         OwnerContact = new Scaleway.Domain.Inputs.RegistrationOwnerContactArgs
    ///         {
    ///             LegalForm = "individual",
    ///             Firstname = "John",
    ///             Lastname = "DOE",
    ///             Email = "john.doe@example.com",
    ///             PhoneNumber = "+1.23456789",
    ///             AddressLine1 = "123 Main Street",
    ///             City = "Paris",
    ///             Zip = "75001",
    ///             Country = "FR",
    ///             VatIdentificationCode = "FR12345678901",
    ///             CompanyIdentificationCode = "123456789",
    ///         },
    ///         AutoRenew = true,
    ///         Dnssec = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Purchase Multiple Domains
    /// 
    /// The following example registers several domains in one go:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var multi = new Scaleway.Domain.Registration("multi", new()
    ///     {
    ///         DomainNames = new[]
    ///         {
    ///             "domain1.com",
    ///             "domain2.com",
    ///             "domain3.com",
    ///         },
    ///         DurationInYears = 1,
    ///         OwnerContact = new Scaleway.Domain.Inputs.RegistrationOwnerContactArgs
    ///         {
    ///             LegalForm = "individual",
    ///             Firstname = "John",
    ///             Lastname = "DOE",
    ///             Email = "john.doe@example.com",
    ///             PhoneNumber = "+1.23456789",
    ///             AddressLine1 = "123 Main Street",
    ///             City = "Paris",
    ///             Zip = "75001",
    ///             Country = "FR",
    ///             VatIdentificationCode = "FR12345678901",
    ///             CompanyIdentificationCode = "123456789",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Contact Blocks
    /// 
    /// Each contact block supports the following attributes:
    /// 
    /// - `legal_form` (Required, String): Legal form of the contact.
    /// - `firstname` (Required, String): First name.
    /// - `lastname` (Required, String): Last name.
    /// - `company_name` (Optional, String): Company name.
    /// - `email` (Required, String): Primary email.
    /// - `phone_number` (Required, String): Primary phone number.
    /// - `address_line_1` (Required, String): Primary address.
    /// - `zip` (Required, String): Postal code.
    /// - `city` (Required, String): City.
    /// - `country` (Required, String): Country code (ISO format).
    /// - `vat_identification_code` (Required, String): VAT identification code.
    /// - `company_identification_code` (Required, String): Company identification code.
    /// 
    /// ## Import
    /// 
    /// To import an existing domain registration, use:
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:domain/registration:Registration test &lt;project_id&gt;/&lt;task_id&gt;
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:domain/registration:Registration")]
    public partial class Registration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// : Administrative contact information.
        /// </summary>
        [Output("administrativeContacts")]
        public Output<ImmutableArray<Outputs.RegistrationAdministrativeContact>> AdministrativeContacts { get; private set; } = null!;

        /// <summary>
        /// : Enables or disables auto-renewal.
        /// </summary>
        [Output("autoRenew")]
        public Output<bool?> AutoRenew { get; private set; } = null!;

        /// <summary>
        /// : Enables or disables DNSSEC.
        /// </summary>
        [Output("dnssec")]
        public Output<bool?> Dnssec { get; private set; } = null!;

        /// <summary>
        /// : A list of domain names to be registered.
        /// </summary>
        [Output("domainNames")]
        public Output<ImmutableArray<string>> DomainNames { get; private set; } = null!;

        /// <summary>
        /// DNSSEC DS record configuration.
        /// </summary>
        [Output("dsRecords")]
        public Output<ImmutableArray<Outputs.RegistrationDsRecord>> DsRecords { get; private set; } = null!;

        /// <summary>
        /// : The registration period in years.
        /// </summary>
        [Output("durationInYears")]
        public Output<int?> DurationInYears { get; private set; } = null!;

        /// <summary>
        /// : Details of the owner contact.
        /// </summary>
        [Output("ownerContact")]
        public Output<Outputs.RegistrationOwnerContact> OwnerContact { get; private set; } = null!;

        /// <summary>
        /// : The ID of an existing owner contact.
        /// </summary>
        [Output("ownerContactId")]
        public Output<string> OwnerContactId { get; private set; } = null!;

        /// <summary>
        /// : The Scaleway project ID.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// ID of the task that created the domain.
        /// </summary>
        [Output("taskId")]
        public Output<string> TaskId { get; private set; } = null!;

        /// <summary>
        /// : Technical contact information.
        /// </summary>
        [Output("technicalContacts")]
        public Output<ImmutableArray<Outputs.RegistrationTechnicalContact>> TechnicalContacts { get; private set; } = null!;


        /// <summary>
        /// Create a Registration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Registration(string name, RegistrationArgs args, CustomResourceOptions? options = null)
            : base("scaleway:domain/registration:Registration", name, args ?? new RegistrationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Registration(string name, Input<string> id, RegistrationState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:domain/registration:Registration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Registration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Registration Get(string name, Input<string> id, RegistrationState? state = null, CustomResourceOptions? options = null)
        {
            return new Registration(name, id, state, options);
        }
    }

    public sealed class RegistrationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// : Enables or disables auto-renewal.
        /// </summary>
        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        /// <summary>
        /// : Enables or disables DNSSEC.
        /// </summary>
        [Input("dnssec")]
        public Input<bool>? Dnssec { get; set; }

        [Input("domainNames", required: true)]
        private InputList<string>? _domainNames;

        /// <summary>
        /// : A list of domain names to be registered.
        /// </summary>
        public InputList<string> DomainNames
        {
            get => _domainNames ?? (_domainNames = new InputList<string>());
            set => _domainNames = value;
        }

        /// <summary>
        /// : The registration period in years.
        /// </summary>
        [Input("durationInYears")]
        public Input<int>? DurationInYears { get; set; }

        /// <summary>
        /// : Details of the owner contact.
        /// </summary>
        [Input("ownerContact")]
        public Input<Inputs.RegistrationOwnerContactArgs>? OwnerContact { get; set; }

        /// <summary>
        /// : The ID of an existing owner contact.
        /// </summary>
        [Input("ownerContactId")]
        public Input<string>? OwnerContactId { get; set; }

        /// <summary>
        /// : The Scaleway project ID.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public RegistrationArgs()
        {
        }
        public static new RegistrationArgs Empty => new RegistrationArgs();
    }

    public sealed class RegistrationState : global::Pulumi.ResourceArgs
    {
        [Input("administrativeContacts")]
        private InputList<Inputs.RegistrationAdministrativeContactGetArgs>? _administrativeContacts;

        /// <summary>
        /// : Administrative contact information.
        /// </summary>
        public InputList<Inputs.RegistrationAdministrativeContactGetArgs> AdministrativeContacts
        {
            get => _administrativeContacts ?? (_administrativeContacts = new InputList<Inputs.RegistrationAdministrativeContactGetArgs>());
            set => _administrativeContacts = value;
        }

        /// <summary>
        /// : Enables or disables auto-renewal.
        /// </summary>
        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        /// <summary>
        /// : Enables or disables DNSSEC.
        /// </summary>
        [Input("dnssec")]
        public Input<bool>? Dnssec { get; set; }

        [Input("domainNames")]
        private InputList<string>? _domainNames;

        /// <summary>
        /// : A list of domain names to be registered.
        /// </summary>
        public InputList<string> DomainNames
        {
            get => _domainNames ?? (_domainNames = new InputList<string>());
            set => _domainNames = value;
        }

        [Input("dsRecords")]
        private InputList<Inputs.RegistrationDsRecordGetArgs>? _dsRecords;

        /// <summary>
        /// DNSSEC DS record configuration.
        /// </summary>
        public InputList<Inputs.RegistrationDsRecordGetArgs> DsRecords
        {
            get => _dsRecords ?? (_dsRecords = new InputList<Inputs.RegistrationDsRecordGetArgs>());
            set => _dsRecords = value;
        }

        /// <summary>
        /// : The registration period in years.
        /// </summary>
        [Input("durationInYears")]
        public Input<int>? DurationInYears { get; set; }

        /// <summary>
        /// : Details of the owner contact.
        /// </summary>
        [Input("ownerContact")]
        public Input<Inputs.RegistrationOwnerContactGetArgs>? OwnerContact { get; set; }

        /// <summary>
        /// : The ID of an existing owner contact.
        /// </summary>
        [Input("ownerContactId")]
        public Input<string>? OwnerContactId { get; set; }

        /// <summary>
        /// : The Scaleway project ID.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// ID of the task that created the domain.
        /// </summary>
        [Input("taskId")]
        public Input<string>? TaskId { get; set; }

        [Input("technicalContacts")]
        private InputList<Inputs.RegistrationTechnicalContactGetArgs>? _technicalContacts;

        /// <summary>
        /// : Technical contact information.
        /// </summary>
        public InputList<Inputs.RegistrationTechnicalContactGetArgs> TechnicalContacts
        {
            get => _technicalContacts ?? (_technicalContacts = new InputList<Inputs.RegistrationTechnicalContactGetArgs>());
            set => _technicalContacts = value;
        }

        public RegistrationState()
        {
        }
        public static new RegistrationState Empty => new RegistrationState();
    }
}
