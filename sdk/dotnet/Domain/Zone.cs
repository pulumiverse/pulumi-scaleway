// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Domain
{
    /// <summary>
    /// ## Import
    /// 
    /// This section explains how to import a zone using the `{subdomain}.{domain}` format.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:domain/zone:Zone test test.scaleway-terraform.com
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:domain/zone:Zone")]
    public partial class Zone : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The main domain where the DNS zone will be created.
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// Message.
        /// </summary>
        [Output("message")]
        public Output<string> Message { get; private set; } = null!;

        /// <summary>
        /// The list of same servers for the zone.
        /// </summary>
        [Output("ns")]
        public Output<ImmutableArray<string>> Ns { get; private set; } = null!;

        /// <summary>
        /// The default list of same servers for the zone.
        /// </summary>
        [Output("nsDefaults")]
        public Output<ImmutableArray<string>> NsDefaults { get; private set; } = null!;

        /// <summary>
        /// The master list of same servers for the zone.
        /// </summary>
        [Output("nsMasters")]
        public Output<ImmutableArray<string>> NsMasters { get; private set; } = null!;

        /// <summary>
        /// `project_id`) The ID of the Project associated with the domain.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The status of the domain zone.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The name of the subdomain (zone name) to create within the domain.
        /// </summary>
        [Output("subdomain")]
        public Output<string> Subdomain { get; private set; } = null!;

        /// <summary>
        /// The date and time at which the DNS zone was last updated.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a Zone resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Zone(string name, ZoneArgs args, CustomResourceOptions? options = null)
            : base("scaleway:domain/zone:Zone", name, args ?? new ZoneArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Zone(string name, Input<string> id, ZoneState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:domain/zone:Zone", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "scaleway:index/domainZone:DomainZone" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Zone resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Zone Get(string name, Input<string> id, ZoneState? state = null, CustomResourceOptions? options = null)
        {
            return new Zone(name, id, state, options);
        }
    }

    public sealed class ZoneArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The main domain where the DNS zone will be created.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        /// <summary>
        /// `project_id`) The ID of the Project associated with the domain.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The name of the subdomain (zone name) to create within the domain.
        /// </summary>
        [Input("subdomain", required: true)]
        public Input<string> Subdomain { get; set; } = null!;

        public ZoneArgs()
        {
        }
        public static new ZoneArgs Empty => new ZoneArgs();
    }

    public sealed class ZoneState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The main domain where the DNS zone will be created.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// Message.
        /// </summary>
        [Input("message")]
        public Input<string>? Message { get; set; }

        [Input("ns")]
        private InputList<string>? _ns;

        /// <summary>
        /// The list of same servers for the zone.
        /// </summary>
        public InputList<string> Ns
        {
            get => _ns ?? (_ns = new InputList<string>());
            set => _ns = value;
        }

        [Input("nsDefaults")]
        private InputList<string>? _nsDefaults;

        /// <summary>
        /// The default list of same servers for the zone.
        /// </summary>
        public InputList<string> NsDefaults
        {
            get => _nsDefaults ?? (_nsDefaults = new InputList<string>());
            set => _nsDefaults = value;
        }

        [Input("nsMasters")]
        private InputList<string>? _nsMasters;

        /// <summary>
        /// The master list of same servers for the zone.
        /// </summary>
        public InputList<string> NsMasters
        {
            get => _nsMasters ?? (_nsMasters = new InputList<string>());
            set => _nsMasters = value;
        }

        /// <summary>
        /// `project_id`) The ID of the Project associated with the domain.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The status of the domain zone.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The name of the subdomain (zone name) to create within the domain.
        /// </summary>
        [Input("subdomain")]
        public Input<string>? Subdomain { get; set; }

        /// <summary>
        /// The date and time at which the DNS zone was last updated.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public ZoneState()
        {
        }
        public static new ZoneState Empty => new ZoneState();
    }
}
