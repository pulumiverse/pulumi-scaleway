// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway
{
    /// <summary>
    /// Creates and manages Scaleway Edge Services Cache Stages.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Scaleway.EdgeServicesCacheStage("main", new()
    ///     {
    ///         PipelineId = mainScalewayEdgeServicesPipeline.Id,
    ///         BackendStageId = mainScalewayEdgeServicesBackendStage.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Purge request
    /// 
    /// ## Import
    /// 
    /// Cache stages can be imported using the `{id}`, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:index/edgeServicesCacheStage:EdgeServicesCacheStage basic 11111111-1111-1111-1111-111111111111
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:index/edgeServicesCacheStage:EdgeServicesCacheStage")]
    public partial class EdgeServicesCacheStage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The backend stage ID the cache stage will be linked to. Only one of `BackendStageId`, `RouteStageId` and `WafStageId` should be specified.
        /// </summary>
        [Output("backendStageId")]
        public Output<string> BackendStageId { get; private set; } = null!;

        /// <summary>
        /// The date and time of the creation of the cache stage.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The Time To Live (TTL) in seconds. Defines how long content is cached.
        /// </summary>
        [Output("fallbackTtl")]
        public Output<int?> FallbackTtl { get; private set; } = null!;

        /// <summary>
        /// Defines whether responses to requests with cookies must be stored in the cache.
        /// </summary>
        [Output("includeCookies")]
        public Output<bool?> IncludeCookies { get; private set; } = null!;

        /// <summary>
        /// The ID of the pipeline.
        /// </summary>
        [Output("pipelineId")]
        public Output<string> PipelineId { get; private set; } = null!;

        /// <summary>
        /// `ProjectId`) The ID of the project the cache stage is associated with.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The Scaleway Object Storage origin bucket (S3) linked to the backend stage.
        /// </summary>
        [Output("purgeRequests")]
        public Output<ImmutableArray<Outputs.EdgeServicesCacheStagePurgeRequest>> PurgeRequests { get; private set; } = null!;

        /// <summary>
        /// Trigger a refresh of the cache by changing this field's value.
        /// </summary>
        [Output("refreshCache")]
        public Output<string?> RefreshCache { get; private set; } = null!;

        /// <summary>
        /// The route stage ID the cache stage will be linked to. Only one of `BackendStageId`, `RouteStageId` and `WafStageId` should be specified.
        /// </summary>
        [Output("routeStageId")]
        public Output<string> RouteStageId { get; private set; } = null!;

        /// <summary>
        /// The date and time of the last update of the cache stage.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The WAF stage ID the cache stage will be linked to. Only one of `BackendStageId`, `RouteStageId` and `WafStageId` should be specified.
        /// </summary>
        [Output("wafStageId")]
        public Output<string> WafStageId { get; private set; } = null!;


        /// <summary>
        /// Create a EdgeServicesCacheStage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EdgeServicesCacheStage(string name, EdgeServicesCacheStageArgs args, CustomResourceOptions? options = null)
            : base("scaleway:index/edgeServicesCacheStage:EdgeServicesCacheStage", name, args ?? new EdgeServicesCacheStageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EdgeServicesCacheStage(string name, Input<string> id, EdgeServicesCacheStageState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:index/edgeServicesCacheStage:EdgeServicesCacheStage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EdgeServicesCacheStage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EdgeServicesCacheStage Get(string name, Input<string> id, EdgeServicesCacheStageState? state = null, CustomResourceOptions? options = null)
        {
            return new EdgeServicesCacheStage(name, id, state, options);
        }
    }

    public sealed class EdgeServicesCacheStageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The backend stage ID the cache stage will be linked to. Only one of `BackendStageId`, `RouteStageId` and `WafStageId` should be specified.
        /// </summary>
        [Input("backendStageId")]
        public Input<string>? BackendStageId { get; set; }

        /// <summary>
        /// The Time To Live (TTL) in seconds. Defines how long content is cached.
        /// </summary>
        [Input("fallbackTtl")]
        public Input<int>? FallbackTtl { get; set; }

        /// <summary>
        /// Defines whether responses to requests with cookies must be stored in the cache.
        /// </summary>
        [Input("includeCookies")]
        public Input<bool>? IncludeCookies { get; set; }

        /// <summary>
        /// The ID of the pipeline.
        /// </summary>
        [Input("pipelineId", required: true)]
        public Input<string> PipelineId { get; set; } = null!;

        /// <summary>
        /// `ProjectId`) The ID of the project the cache stage is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("purgeRequests")]
        private InputList<Inputs.EdgeServicesCacheStagePurgeRequestArgs>? _purgeRequests;

        /// <summary>
        /// The Scaleway Object Storage origin bucket (S3) linked to the backend stage.
        /// </summary>
        public InputList<Inputs.EdgeServicesCacheStagePurgeRequestArgs> PurgeRequests
        {
            get => _purgeRequests ?? (_purgeRequests = new InputList<Inputs.EdgeServicesCacheStagePurgeRequestArgs>());
            set => _purgeRequests = value;
        }

        /// <summary>
        /// Trigger a refresh of the cache by changing this field's value.
        /// </summary>
        [Input("refreshCache")]
        public Input<string>? RefreshCache { get; set; }

        /// <summary>
        /// The route stage ID the cache stage will be linked to. Only one of `BackendStageId`, `RouteStageId` and `WafStageId` should be specified.
        /// </summary>
        [Input("routeStageId")]
        public Input<string>? RouteStageId { get; set; }

        /// <summary>
        /// The WAF stage ID the cache stage will be linked to. Only one of `BackendStageId`, `RouteStageId` and `WafStageId` should be specified.
        /// </summary>
        [Input("wafStageId")]
        public Input<string>? WafStageId { get; set; }

        public EdgeServicesCacheStageArgs()
        {
        }
        public static new EdgeServicesCacheStageArgs Empty => new EdgeServicesCacheStageArgs();
    }

    public sealed class EdgeServicesCacheStageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The backend stage ID the cache stage will be linked to. Only one of `BackendStageId`, `RouteStageId` and `WafStageId` should be specified.
        /// </summary>
        [Input("backendStageId")]
        public Input<string>? BackendStageId { get; set; }

        /// <summary>
        /// The date and time of the creation of the cache stage.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The Time To Live (TTL) in seconds. Defines how long content is cached.
        /// </summary>
        [Input("fallbackTtl")]
        public Input<int>? FallbackTtl { get; set; }

        /// <summary>
        /// Defines whether responses to requests with cookies must be stored in the cache.
        /// </summary>
        [Input("includeCookies")]
        public Input<bool>? IncludeCookies { get; set; }

        /// <summary>
        /// The ID of the pipeline.
        /// </summary>
        [Input("pipelineId")]
        public Input<string>? PipelineId { get; set; }

        /// <summary>
        /// `ProjectId`) The ID of the project the cache stage is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("purgeRequests")]
        private InputList<Inputs.EdgeServicesCacheStagePurgeRequestGetArgs>? _purgeRequests;

        /// <summary>
        /// The Scaleway Object Storage origin bucket (S3) linked to the backend stage.
        /// </summary>
        public InputList<Inputs.EdgeServicesCacheStagePurgeRequestGetArgs> PurgeRequests
        {
            get => _purgeRequests ?? (_purgeRequests = new InputList<Inputs.EdgeServicesCacheStagePurgeRequestGetArgs>());
            set => _purgeRequests = value;
        }

        /// <summary>
        /// Trigger a refresh of the cache by changing this field's value.
        /// </summary>
        [Input("refreshCache")]
        public Input<string>? RefreshCache { get; set; }

        /// <summary>
        /// The route stage ID the cache stage will be linked to. Only one of `BackendStageId`, `RouteStageId` and `WafStageId` should be specified.
        /// </summary>
        [Input("routeStageId")]
        public Input<string>? RouteStageId { get; set; }

        /// <summary>
        /// The date and time of the last update of the cache stage.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// The WAF stage ID the cache stage will be linked to. Only one of `BackendStageId`, `RouteStageId` and `WafStageId` should be specified.
        /// </summary>
        [Input("wafStageId")]
        public Input<string>? WafStageId { get; set; }

        public EdgeServicesCacheStageState()
        {
        }
        public static new EdgeServicesCacheStageState Empty => new EdgeServicesCacheStageState();
    }
}
