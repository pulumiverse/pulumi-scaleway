// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway
{
    /// <summary>
    /// Creates and manages Scaleway Edge Services DNS Stages.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Scaleway.EdgeServicesDnsStage("main", new()
    ///     {
    ///         PipelineId = mainScalewayEdgeServicesPipeline.Id,
    ///         Fqdns = new[]
    ///         {
    ///             "subdomain.example.com",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DNS stages can be imported using the `{id}`, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:index/edgeServicesDnsStage:EdgeServicesDnsStage basic 11111111-1111-1111-1111-111111111111
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:index/edgeServicesDnsStage:EdgeServicesDnsStage")]
    public partial class EdgeServicesDnsStage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The backend stage ID the DNS stage will be linked to. Only one of `BackendStageId`, `CacheStageId` and `TlsStageId` should be specified.
        /// </summary>
        [Output("backendStageId")]
        public Output<string> BackendStageId { get; private set; } = null!;

        /// <summary>
        /// The cache stage ID the DNS stage will be linked to. Only one of `BackendStageId`, `CacheStageId` and `TlsStageId` should be specified.
        /// </summary>
        [Output("cacheStageId")]
        public Output<string> CacheStageId { get; private set; } = null!;

        /// <summary>
        /// The date and time of the creation of the DNS stage.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Fully Qualified Domain Name (in the format subdomain.example.com) to attach to the stage.
        /// </summary>
        [Output("fqdns")]
        public Output<ImmutableArray<string>> Fqdns { get; private set; } = null!;

        /// <summary>
        /// The ID of the pipeline.
        /// </summary>
        [Output("pipelineId")]
        public Output<string> PipelineId { get; private set; } = null!;

        /// <summary>
        /// `ProjectId`) The ID of the project the DNS stage is associated with.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The TLS stage ID the DNS stage will be linked to. Only one of `BackendStageId`, `CacheStageId` and `TlsStageId` should be specified.
        /// </summary>
        [Output("tlsStageId")]
        public Output<string> TlsStageId { get; private set; } = null!;

        /// <summary>
        /// The type of the stage.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The date and time of the last update of the DNS stage.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a EdgeServicesDnsStage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EdgeServicesDnsStage(string name, EdgeServicesDnsStageArgs args, CustomResourceOptions? options = null)
            : base("scaleway:index/edgeServicesDnsStage:EdgeServicesDnsStage", name, args ?? new EdgeServicesDnsStageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EdgeServicesDnsStage(string name, Input<string> id, EdgeServicesDnsStageState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:index/edgeServicesDnsStage:EdgeServicesDnsStage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EdgeServicesDnsStage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EdgeServicesDnsStage Get(string name, Input<string> id, EdgeServicesDnsStageState? state = null, CustomResourceOptions? options = null)
        {
            return new EdgeServicesDnsStage(name, id, state, options);
        }
    }

    public sealed class EdgeServicesDnsStageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The backend stage ID the DNS stage will be linked to. Only one of `BackendStageId`, `CacheStageId` and `TlsStageId` should be specified.
        /// </summary>
        [Input("backendStageId")]
        public Input<string>? BackendStageId { get; set; }

        /// <summary>
        /// The cache stage ID the DNS stage will be linked to. Only one of `BackendStageId`, `CacheStageId` and `TlsStageId` should be specified.
        /// </summary>
        [Input("cacheStageId")]
        public Input<string>? CacheStageId { get; set; }

        [Input("fqdns")]
        private InputList<string>? _fqdns;

        /// <summary>
        /// Fully Qualified Domain Name (in the format subdomain.example.com) to attach to the stage.
        /// </summary>
        public InputList<string> Fqdns
        {
            get => _fqdns ?? (_fqdns = new InputList<string>());
            set => _fqdns = value;
        }

        /// <summary>
        /// The ID of the pipeline.
        /// </summary>
        [Input("pipelineId", required: true)]
        public Input<string> PipelineId { get; set; } = null!;

        /// <summary>
        /// `ProjectId`) The ID of the project the DNS stage is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The TLS stage ID the DNS stage will be linked to. Only one of `BackendStageId`, `CacheStageId` and `TlsStageId` should be specified.
        /// </summary>
        [Input("tlsStageId")]
        public Input<string>? TlsStageId { get; set; }

        public EdgeServicesDnsStageArgs()
        {
        }
        public static new EdgeServicesDnsStageArgs Empty => new EdgeServicesDnsStageArgs();
    }

    public sealed class EdgeServicesDnsStageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The backend stage ID the DNS stage will be linked to. Only one of `BackendStageId`, `CacheStageId` and `TlsStageId` should be specified.
        /// </summary>
        [Input("backendStageId")]
        public Input<string>? BackendStageId { get; set; }

        /// <summary>
        /// The cache stage ID the DNS stage will be linked to. Only one of `BackendStageId`, `CacheStageId` and `TlsStageId` should be specified.
        /// </summary>
        [Input("cacheStageId")]
        public Input<string>? CacheStageId { get; set; }

        /// <summary>
        /// The date and time of the creation of the DNS stage.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("fqdns")]
        private InputList<string>? _fqdns;

        /// <summary>
        /// Fully Qualified Domain Name (in the format subdomain.example.com) to attach to the stage.
        /// </summary>
        public InputList<string> Fqdns
        {
            get => _fqdns ?? (_fqdns = new InputList<string>());
            set => _fqdns = value;
        }

        /// <summary>
        /// The ID of the pipeline.
        /// </summary>
        [Input("pipelineId")]
        public Input<string>? PipelineId { get; set; }

        /// <summary>
        /// `ProjectId`) The ID of the project the DNS stage is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The TLS stage ID the DNS stage will be linked to. Only one of `BackendStageId`, `CacheStageId` and `TlsStageId` should be specified.
        /// </summary>
        [Input("tlsStageId")]
        public Input<string>? TlsStageId { get; set; }

        /// <summary>
        /// The type of the stage.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The date and time of the last update of the DNS stage.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public EdgeServicesDnsStageState()
        {
        }
        public static new EdgeServicesDnsStageState Empty => new EdgeServicesDnsStageState();
    }
}
