// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway
{
    /// <summary>
    /// Creates and manages Scaleway Edge Services Pipelines.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Scaleway.EdgeServicesPipeline("main", new()
    ///     {
    ///         Name = "pipeline-name",
    ///         Description = "pipeline description",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Complete pipeline
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Scaleway.EdgeServicesPipeline("main", new()
    ///     {
    ///         Name = "pipeline-name",
    ///         Description = "pipeline description",
    ///     });
    /// 
    ///     var mainEdgeServicesBackendStage = new Scaleway.EdgeServicesBackendStage("main", new()
    ///     {
    ///         PipelineId = main.Id,
    ///         S3BackendConfig = new Scaleway.Inputs.EdgeServicesBackendStageS3BackendConfigArgs
    ///         {
    ///             BucketName = "my-bucket-name",
    ///             BucketRegion = "fr-par",
    ///         },
    ///     });
    /// 
    ///     var mainEdgeServicesWafStage = new Scaleway.EdgeServicesWafStage("main", new()
    ///     {
    ///         PipelineId = main.Id,
    ///         BackendStageId = mainEdgeServicesBackendStage.Id,
    ///         Mode = "enable",
    ///         ParanoiaLevel = 3,
    ///     });
    /// 
    ///     var mainEdgeServicesRouteStage = new Scaleway.EdgeServicesRouteStage("main", new()
    ///     {
    ///         PipelineId = main.Id,
    ///         WafStageId = mainEdgeServicesWafStage.Id,
    ///         Rules = new[]
    ///         {
    ///             new Scaleway.Inputs.EdgeServicesRouteStageRuleArgs
    ///             {
    ///                 BackendStageId = mainEdgeServicesBackendStage.Id,
    ///                 RuleHttpMatch = new Scaleway.Inputs.EdgeServicesRouteStageRuleRuleHttpMatchArgs
    ///                 {
    ///                     MethodFilters = new[]
    ///                     {
    ///                         "get",
    ///                         "post",
    ///                     },
    ///                     PathFilter = new Scaleway.Inputs.EdgeServicesRouteStageRuleRuleHttpMatchPathFilterArgs
    ///                     {
    ///                         PathFilterType = "regex",
    ///                         Value = ".*",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var mainEdgeServicesCacheStage = new Scaleway.EdgeServicesCacheStage("main", new()
    ///     {
    ///         PipelineId = main.Id,
    ///         RouteStageId = mainEdgeServicesRouteStage.Id,
    ///     });
    /// 
    ///     var mainEdgeServicesTlsStage = new Scaleway.EdgeServicesTlsStage("main", new()
    ///     {
    ///         PipelineId = main.Id,
    ///         CacheStageId = mainEdgeServicesCacheStage.Id,
    ///         ManagedCertificate = true,
    ///     });
    /// 
    ///     var mainEdgeServicesDnsStage = new Scaleway.EdgeServicesDnsStage("main", new()
    ///     {
    ///         PipelineId = main.Id,
    ///         TlsStageId = mainEdgeServicesTlsStage.Id,
    ///         Fqdns = new[]
    ///         {
    ///             "subdomain.example.com",
    ///         },
    ///     });
    /// 
    ///     var mainEdgeServicesHeadStage = new Scaleway.EdgeServicesHeadStage("main", new()
    ///     {
    ///         PipelineId = main.Id,
    ///         HeadStageId = mainEdgeServicesDnsStage.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Pipelines can be imported using the `{id}`, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:index/edgeServicesPipeline:EdgeServicesPipeline basic 11111111-1111-1111-1111-111111111111
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:index/edgeServicesPipeline:EdgeServicesPipeline")]
    public partial class EdgeServicesPipeline : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The date and time of the creation of the pipeline.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The description of the pipeline.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the pipeline.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// `project_id`) The ID of the project the pipeline is associated with.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The status of user pipeline.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The date and time of the last update of the pipeline.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a EdgeServicesPipeline resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EdgeServicesPipeline(string name, EdgeServicesPipelineArgs? args = null, CustomResourceOptions? options = null)
            : base("scaleway:index/edgeServicesPipeline:EdgeServicesPipeline", name, args ?? new EdgeServicesPipelineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EdgeServicesPipeline(string name, Input<string> id, EdgeServicesPipelineState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:index/edgeServicesPipeline:EdgeServicesPipeline", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EdgeServicesPipeline resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EdgeServicesPipeline Get(string name, Input<string> id, EdgeServicesPipelineState? state = null, CustomResourceOptions? options = null)
        {
            return new EdgeServicesPipeline(name, id, state, options);
        }
    }

    public sealed class EdgeServicesPipelineArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the pipeline.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the pipeline.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// `project_id`) The ID of the project the pipeline is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public EdgeServicesPipelineArgs()
        {
        }
        public static new EdgeServicesPipelineArgs Empty => new EdgeServicesPipelineArgs();
    }

    public sealed class EdgeServicesPipelineState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The date and time of the creation of the pipeline.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The description of the pipeline.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the pipeline.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// `project_id`) The ID of the project the pipeline is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The status of user pipeline.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The date and time of the last update of the pipeline.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public EdgeServicesPipelineState()
        {
        }
        public static new EdgeServicesPipelineState Empty => new EdgeServicesPipelineState();
    }
}
