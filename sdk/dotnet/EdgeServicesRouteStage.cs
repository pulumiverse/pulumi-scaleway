// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway
{
    /// <summary>
    /// Creates and manages Scaleway Edge Services Route Stages.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Scaleway.EdgeServicesRouteStage("main", new()
    ///     {
    ///         PipelineId = mainScalewayEdgeServicesPipeline.Id,
    ///         WafStageId = waf.Id,
    ///         Rules = new[]
    ///         {
    ///             new Scaleway.Inputs.EdgeServicesRouteStageRuleArgs
    ///             {
    ///                 BackendStageId = backend.Id,
    ///                 RuleHttpMatch = new Scaleway.Inputs.EdgeServicesRouteStageRuleRuleHttpMatchArgs
    ///                 {
    ///                     MethodFilters = new[]
    ///                     {
    ///                         "get",
    ///                         "post",
    ///                     },
    ///                     PathFilter = new Scaleway.Inputs.EdgeServicesRouteStageRuleRuleHttpMatchPathFilterArgs
    ///                     {
    ///                         PathFilterType = "regex",
    ///                         Value = ".*",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Route stages can be imported using the `{id}`, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:index/edgeServicesRouteStage:EdgeServicesRouteStage basic 11111111-1111-1111-1111-111111111111
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:index/edgeServicesRouteStage:EdgeServicesRouteStage")]
    public partial class EdgeServicesRouteStage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The date and time of the creation of the route stage.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The ID of the pipeline.
        /// </summary>
        [Output("pipelineId")]
        public Output<string> PipelineId { get; private set; } = null!;

        /// <summary>
        /// `project_id`) The ID of the project the route stage is associated with.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The list of rules to be checked against every HTTP request. The first matching rule will forward the request to its specified backend stage. If no rules are matched, the request is forwarded to the WAF stage defined by `waf_stage_id`.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.EdgeServicesRouteStageRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// The date and time of the last update of the route stage.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The ID of the WAF stage HTTP requests should be forwarded to when no rules are matched.
        /// </summary>
        [Output("wafStageId")]
        public Output<string?> WafStageId { get; private set; } = null!;


        /// <summary>
        /// Create a EdgeServicesRouteStage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EdgeServicesRouteStage(string name, EdgeServicesRouteStageArgs args, CustomResourceOptions? options = null)
            : base("scaleway:index/edgeServicesRouteStage:EdgeServicesRouteStage", name, args ?? new EdgeServicesRouteStageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EdgeServicesRouteStage(string name, Input<string> id, EdgeServicesRouteStageState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:index/edgeServicesRouteStage:EdgeServicesRouteStage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EdgeServicesRouteStage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EdgeServicesRouteStage Get(string name, Input<string> id, EdgeServicesRouteStageState? state = null, CustomResourceOptions? options = null)
        {
            return new EdgeServicesRouteStage(name, id, state, options);
        }
    }

    public sealed class EdgeServicesRouteStageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the pipeline.
        /// </summary>
        [Input("pipelineId", required: true)]
        public Input<string> PipelineId { get; set; } = null!;

        /// <summary>
        /// `project_id`) The ID of the project the route stage is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("rules")]
        private InputList<Inputs.EdgeServicesRouteStageRuleArgs>? _rules;

        /// <summary>
        /// The list of rules to be checked against every HTTP request. The first matching rule will forward the request to its specified backend stage. If no rules are matched, the request is forwarded to the WAF stage defined by `waf_stage_id`.
        /// </summary>
        public InputList<Inputs.EdgeServicesRouteStageRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.EdgeServicesRouteStageRuleArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// The ID of the WAF stage HTTP requests should be forwarded to when no rules are matched.
        /// </summary>
        [Input("wafStageId")]
        public Input<string>? WafStageId { get; set; }

        public EdgeServicesRouteStageArgs()
        {
        }
        public static new EdgeServicesRouteStageArgs Empty => new EdgeServicesRouteStageArgs();
    }

    public sealed class EdgeServicesRouteStageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The date and time of the creation of the route stage.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The ID of the pipeline.
        /// </summary>
        [Input("pipelineId")]
        public Input<string>? PipelineId { get; set; }

        /// <summary>
        /// `project_id`) The ID of the project the route stage is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("rules")]
        private InputList<Inputs.EdgeServicesRouteStageRuleGetArgs>? _rules;

        /// <summary>
        /// The list of rules to be checked against every HTTP request. The first matching rule will forward the request to its specified backend stage. If no rules are matched, the request is forwarded to the WAF stage defined by `waf_stage_id`.
        /// </summary>
        public InputList<Inputs.EdgeServicesRouteStageRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.EdgeServicesRouteStageRuleGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// The date and time of the last update of the route stage.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// The ID of the WAF stage HTTP requests should be forwarded to when no rules are matched.
        /// </summary>
        [Input("wafStageId")]
        public Input<string>? WafStageId { get; set; }

        public EdgeServicesRouteStageState()
        {
        }
        public static new EdgeServicesRouteStageState Empty => new EdgeServicesRouteStageState();
    }
}
