// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway
{
    /// <summary>
    /// Creates and manages Scaleway Edge Services TLS Stages.
    /// 
    /// ## Example Usage
    /// 
    /// ### Managed
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Scaleway.EdgeServicesTlsStage("main", new()
    ///     {
    ///         PipelineId = mainScalewayEdgeServicesPipeline.Id,
    ///         ManagedCertificate = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### With a certificate stored in Scaleway Secret Manager
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Scaleway.EdgeServicesTlsStage("main", new()
    ///     {
    ///         PipelineId = mainScalewayEdgeServicesPipeline.Id,
    ///         Secrets = new[]
    ///         {
    ///             new Scaleway.Inputs.EdgeServicesTlsStageSecretArgs
    ///             {
    ///                 SecretId = "11111111-1111-1111-1111-111111111111",
    ///                 Region = "fr-par",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// TLS stages can be imported using the `{id}`, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:index/edgeServicesTlsStage:EdgeServicesTlsStage basic 11111111-1111-1111-1111-111111111111
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:index/edgeServicesTlsStage:EdgeServicesTlsStage")]
    public partial class EdgeServicesTlsStage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The backend stage ID the TLS stage will be linked to. Only one of `backend_stage_id`, `cache_stage_id`, `route_stage_id` and `waf_stage_id` should be specified.
        /// </summary>
        [Output("backendStageId")]
        public Output<string> BackendStageId { get; private set; } = null!;

        /// <summary>
        /// The cache stage ID the TLS stage will be linked to. Only one of `backend_stage_id`, `cache_stage_id`, `route_stage_id` and `waf_stage_id` should be specified.
        /// </summary>
        [Output("cacheStageId")]
        public Output<string> CacheStageId { get; private set; } = null!;

        /// <summary>
        /// The expiration date of the certificate.
        /// </summary>
        [Output("certificateExpiresAt")]
        public Output<string> CertificateExpiresAt { get; private set; } = null!;

        /// <summary>
        /// The date and time of the creation of the TLS stage.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Set to true when Scaleway generates and manages a Let's Encrypt certificate for the TLS stage/custom endpoint.
        /// </summary>
        [Output("managedCertificate")]
        public Output<bool> ManagedCertificate { get; private set; } = null!;

        /// <summary>
        /// The ID of the pipeline.
        /// </summary>
        [Output("pipelineId")]
        public Output<string> PipelineId { get; private set; } = null!;

        /// <summary>
        /// `project_id`) The ID of the project the TLS stage is associated with.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The route stage ID the TLS stage will be linked to. Only one of `backend_stage_id`, `cache_stage_id`, `route_stage_id` and `waf_stage_id` should be specified.
        /// </summary>
        [Output("routeStageId")]
        public Output<string> RouteStageId { get; private set; } = null!;

        /// <summary>
        /// The TLS secrets.
        /// </summary>
        [Output("secrets")]
        public Output<ImmutableArray<Outputs.EdgeServicesTlsStageSecret>> Secrets { get; private set; } = null!;

        /// <summary>
        /// The date and time of the last update of the TLS stage.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The WAF stage ID the TLS stage will be linked to. Only one of `backend_stage_id`, `cache_stage_id`, `route_stage_id` and `waf_stage_id` should be specified.
        /// </summary>
        [Output("wafStageId")]
        public Output<string> WafStageId { get; private set; } = null!;


        /// <summary>
        /// Create a EdgeServicesTlsStage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EdgeServicesTlsStage(string name, EdgeServicesTlsStageArgs args, CustomResourceOptions? options = null)
            : base("scaleway:index/edgeServicesTlsStage:EdgeServicesTlsStage", name, args ?? new EdgeServicesTlsStageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EdgeServicesTlsStage(string name, Input<string> id, EdgeServicesTlsStageState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:index/edgeServicesTlsStage:EdgeServicesTlsStage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EdgeServicesTlsStage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EdgeServicesTlsStage Get(string name, Input<string> id, EdgeServicesTlsStageState? state = null, CustomResourceOptions? options = null)
        {
            return new EdgeServicesTlsStage(name, id, state, options);
        }
    }

    public sealed class EdgeServicesTlsStageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The backend stage ID the TLS stage will be linked to. Only one of `backend_stage_id`, `cache_stage_id`, `route_stage_id` and `waf_stage_id` should be specified.
        /// </summary>
        [Input("backendStageId")]
        public Input<string>? BackendStageId { get; set; }

        /// <summary>
        /// The cache stage ID the TLS stage will be linked to. Only one of `backend_stage_id`, `cache_stage_id`, `route_stage_id` and `waf_stage_id` should be specified.
        /// </summary>
        [Input("cacheStageId")]
        public Input<string>? CacheStageId { get; set; }

        /// <summary>
        /// Set to true when Scaleway generates and manages a Let's Encrypt certificate for the TLS stage/custom endpoint.
        /// </summary>
        [Input("managedCertificate")]
        public Input<bool>? ManagedCertificate { get; set; }

        /// <summary>
        /// The ID of the pipeline.
        /// </summary>
        [Input("pipelineId", required: true)]
        public Input<string> PipelineId { get; set; } = null!;

        /// <summary>
        /// `project_id`) The ID of the project the TLS stage is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The route stage ID the TLS stage will be linked to. Only one of `backend_stage_id`, `cache_stage_id`, `route_stage_id` and `waf_stage_id` should be specified.
        /// </summary>
        [Input("routeStageId")]
        public Input<string>? RouteStageId { get; set; }

        [Input("secrets")]
        private InputList<Inputs.EdgeServicesTlsStageSecretArgs>? _secrets;

        /// <summary>
        /// The TLS secrets.
        /// </summary>
        public InputList<Inputs.EdgeServicesTlsStageSecretArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.EdgeServicesTlsStageSecretArgs>());
            set => _secrets = value;
        }

        /// <summary>
        /// The WAF stage ID the TLS stage will be linked to. Only one of `backend_stage_id`, `cache_stage_id`, `route_stage_id` and `waf_stage_id` should be specified.
        /// </summary>
        [Input("wafStageId")]
        public Input<string>? WafStageId { get; set; }

        public EdgeServicesTlsStageArgs()
        {
        }
        public static new EdgeServicesTlsStageArgs Empty => new EdgeServicesTlsStageArgs();
    }

    public sealed class EdgeServicesTlsStageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The backend stage ID the TLS stage will be linked to. Only one of `backend_stage_id`, `cache_stage_id`, `route_stage_id` and `waf_stage_id` should be specified.
        /// </summary>
        [Input("backendStageId")]
        public Input<string>? BackendStageId { get; set; }

        /// <summary>
        /// The cache stage ID the TLS stage will be linked to. Only one of `backend_stage_id`, `cache_stage_id`, `route_stage_id` and `waf_stage_id` should be specified.
        /// </summary>
        [Input("cacheStageId")]
        public Input<string>? CacheStageId { get; set; }

        /// <summary>
        /// The expiration date of the certificate.
        /// </summary>
        [Input("certificateExpiresAt")]
        public Input<string>? CertificateExpiresAt { get; set; }

        /// <summary>
        /// The date and time of the creation of the TLS stage.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Set to true when Scaleway generates and manages a Let's Encrypt certificate for the TLS stage/custom endpoint.
        /// </summary>
        [Input("managedCertificate")]
        public Input<bool>? ManagedCertificate { get; set; }

        /// <summary>
        /// The ID of the pipeline.
        /// </summary>
        [Input("pipelineId")]
        public Input<string>? PipelineId { get; set; }

        /// <summary>
        /// `project_id`) The ID of the project the TLS stage is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The route stage ID the TLS stage will be linked to. Only one of `backend_stage_id`, `cache_stage_id`, `route_stage_id` and `waf_stage_id` should be specified.
        /// </summary>
        [Input("routeStageId")]
        public Input<string>? RouteStageId { get; set; }

        [Input("secrets")]
        private InputList<Inputs.EdgeServicesTlsStageSecretGetArgs>? _secrets;

        /// <summary>
        /// The TLS secrets.
        /// </summary>
        public InputList<Inputs.EdgeServicesTlsStageSecretGetArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.EdgeServicesTlsStageSecretGetArgs>());
            set => _secrets = value;
        }

        /// <summary>
        /// The date and time of the last update of the TLS stage.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// The WAF stage ID the TLS stage will be linked to. Only one of `backend_stage_id`, `cache_stage_id`, `route_stage_id` and `waf_stage_id` should be specified.
        /// </summary>
        [Input("wafStageId")]
        public Input<string>? WafStageId { get; set; }

        public EdgeServicesTlsStageState()
        {
        }
        public static new EdgeServicesTlsStageState Empty => new EdgeServicesTlsStageState();
    }
}
