// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway
{
    /// <summary>
    /// Creates and manages Scaleway Edge Services WAF Stages.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Scaleway.EdgeServicesWafStage("main", new()
    ///     {
    ///         PipelineId = mainScalewayEdgeServicesPipeline.Id,
    ///         Mode = "enable",
    ///         ParanoiaLevel = 3,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// WAF stages can be imported using the `{id}`, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:index/edgeServicesWafStage:EdgeServicesWafStage basic 11111111-1111-1111-1111-111111111111
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:index/edgeServicesWafStage:EdgeServicesWafStage")]
    public partial class EdgeServicesWafStage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the backend stage to forward requests to after the WAF stage.
        /// </summary>
        [Output("backendStageId")]
        public Output<string> BackendStageId { get; private set; } = null!;

        /// <summary>
        /// The date and time of the creation of the WAF stage.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The mode defining WAF behavior (`Disable`/`LogOnly`/`Enable`).
        /// </summary>
        [Output("mode")]
        public Output<string> Mode { get; private set; } = null!;

        /// <summary>
        /// The sensitivity level (`1`,`2`,`3`,`4`) to use when classifying requests as malicious. With a high level, requests are more likely to be classed as malicious, and false positives are expected. With a lower level, requests are more likely to be classed as benign.
        /// </summary>
        [Output("paranoiaLevel")]
        public Output<int> ParanoiaLevel { get; private set; } = null!;

        /// <summary>
        /// The ID of the pipeline.
        /// </summary>
        [Output("pipelineId")]
        public Output<string> PipelineId { get; private set; } = null!;

        /// <summary>
        /// `ProjectId`) The ID of the project the WAF stage is associated with.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The date and time of the last update of the WAF stage.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a EdgeServicesWafStage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EdgeServicesWafStage(string name, EdgeServicesWafStageArgs args, CustomResourceOptions? options = null)
            : base("scaleway:index/edgeServicesWafStage:EdgeServicesWafStage", name, args ?? new EdgeServicesWafStageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EdgeServicesWafStage(string name, Input<string> id, EdgeServicesWafStageState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:index/edgeServicesWafStage:EdgeServicesWafStage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EdgeServicesWafStage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EdgeServicesWafStage Get(string name, Input<string> id, EdgeServicesWafStageState? state = null, CustomResourceOptions? options = null)
        {
            return new EdgeServicesWafStage(name, id, state, options);
        }
    }

    public sealed class EdgeServicesWafStageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the backend stage to forward requests to after the WAF stage.
        /// </summary>
        [Input("backendStageId")]
        public Input<string>? BackendStageId { get; set; }

        /// <summary>
        /// The mode defining WAF behavior (`Disable`/`LogOnly`/`Enable`).
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The sensitivity level (`1`,`2`,`3`,`4`) to use when classifying requests as malicious. With a high level, requests are more likely to be classed as malicious, and false positives are expected. With a lower level, requests are more likely to be classed as benign.
        /// </summary>
        [Input("paranoiaLevel", required: true)]
        public Input<int> ParanoiaLevel { get; set; } = null!;

        /// <summary>
        /// The ID of the pipeline.
        /// </summary>
        [Input("pipelineId", required: true)]
        public Input<string> PipelineId { get; set; } = null!;

        /// <summary>
        /// `ProjectId`) The ID of the project the WAF stage is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public EdgeServicesWafStageArgs()
        {
        }
        public static new EdgeServicesWafStageArgs Empty => new EdgeServicesWafStageArgs();
    }

    public sealed class EdgeServicesWafStageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the backend stage to forward requests to after the WAF stage.
        /// </summary>
        [Input("backendStageId")]
        public Input<string>? BackendStageId { get; set; }

        /// <summary>
        /// The date and time of the creation of the WAF stage.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The mode defining WAF behavior (`Disable`/`LogOnly`/`Enable`).
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The sensitivity level (`1`,`2`,`3`,`4`) to use when classifying requests as malicious. With a high level, requests are more likely to be classed as malicious, and false positives are expected. With a lower level, requests are more likely to be classed as benign.
        /// </summary>
        [Input("paranoiaLevel")]
        public Input<int>? ParanoiaLevel { get; set; }

        /// <summary>
        /// The ID of the pipeline.
        /// </summary>
        [Input("pipelineId")]
        public Input<string>? PipelineId { get; set; }

        /// <summary>
        /// `ProjectId`) The ID of the project the WAF stage is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The date and time of the last update of the WAF stage.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public EdgeServicesWafStageState()
        {
        }
        public static new EdgeServicesWafStageState Empty => new EdgeServicesWafStageState();
    }
}
