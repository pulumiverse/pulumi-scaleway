// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Elasticmetal
{
    public static class GetEasyPartitioning
    {
        /// <summary>
        /// The scaleway_easy_partitioning data source allows you to retrieve a ready-to-use partitioning schema for a BareMetal server. This schema can be used for custom installations with optional swap and extra partitions.
        /// 
        /// This data source simplifies the process of generating valid partitioning configurations, especially useful when dealing with OS and offer compatibility requirements.
        /// </summary>
        public static Task<GetEasyPartitioningResult> InvokeAsync(GetEasyPartitioningArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEasyPartitioningResult>("scaleway:elasticmetal/getEasyPartitioning:getEasyPartitioning", args ?? new GetEasyPartitioningArgs(), options.WithDefaults());

        /// <summary>
        /// The scaleway_easy_partitioning data source allows you to retrieve a ready-to-use partitioning schema for a BareMetal server. This schema can be used for custom installations with optional swap and extra partitions.
        /// 
        /// This data source simplifies the process of generating valid partitioning configurations, especially useful when dealing with OS and offer compatibility requirements.
        /// </summary>
        public static Output<GetEasyPartitioningResult> Invoke(GetEasyPartitioningInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEasyPartitioningResult>("scaleway:elasticmetal/getEasyPartitioning:getEasyPartitioning", args ?? new GetEasyPartitioningInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The scaleway_easy_partitioning data source allows you to retrieve a ready-to-use partitioning schema for a BareMetal server. This schema can be used for custom installations with optional swap and extra partitions.
        /// 
        /// This data source simplifies the process of generating valid partitioning configurations, especially useful when dealing with OS and offer compatibility requirements.
        /// </summary>
        public static Output<GetEasyPartitioningResult> Invoke(GetEasyPartitioningInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetEasyPartitioningResult>("scaleway:elasticmetal/getEasyPartitioning:getEasyPartitioning", args ?? new GetEasyPartitioningInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEasyPartitioningArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The mount point for the extra partition. Must be an absolute path using alphanumeric characters and underscores.
        /// </summary>
        [Input("ext4Mountpoint")]
        public string? Ext4Mountpoint { get; set; }

        /// <summary>
        /// Whether to add an extra ext4 data partition.
        /// </summary>
        [Input("extraPartition")]
        public bool? ExtraPartition { get; set; }

        /// <summary>
        /// The UUID of the BareMetal offer.
        /// </summary>
        [Input("offerId", required: true)]
        public string OfferId { get; set; } = null!;

        /// <summary>
        /// The UUID of the OS image.
        /// </summary>
        [Input("osId", required: true)]
        public string OsId { get; set; } = null!;

        /// <summary>
        /// Whether to include a swap partition.
        /// </summary>
        [Input("swap")]
        public bool? Swap { get; set; }

        public GetEasyPartitioningArgs()
        {
        }
        public static new GetEasyPartitioningArgs Empty => new GetEasyPartitioningArgs();
    }

    public sealed class GetEasyPartitioningInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The mount point for the extra partition. Must be an absolute path using alphanumeric characters and underscores.
        /// </summary>
        [Input("ext4Mountpoint")]
        public Input<string>? Ext4Mountpoint { get; set; }

        /// <summary>
        /// Whether to add an extra ext4 data partition.
        /// </summary>
        [Input("extraPartition")]
        public Input<bool>? ExtraPartition { get; set; }

        /// <summary>
        /// The UUID of the BareMetal offer.
        /// </summary>
        [Input("offerId", required: true)]
        public Input<string> OfferId { get; set; } = null!;

        /// <summary>
        /// The UUID of the OS image.
        /// </summary>
        [Input("osId", required: true)]
        public Input<string> OsId { get; set; } = null!;

        /// <summary>
        /// Whether to include a swap partition.
        /// </summary>
        [Input("swap")]
        public Input<bool>? Swap { get; set; }

        public GetEasyPartitioningInvokeArgs()
        {
        }
        public static new GetEasyPartitioningInvokeArgs Empty => new GetEasyPartitioningInvokeArgs();
    }


    [OutputType]
    public sealed class GetEasyPartitioningResult
    {
        public readonly string? Ext4Mountpoint;
        public readonly bool? ExtraPartition;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// â€” A validated partitioning schema in JSON format that can be directly used for BareMetal server deployment.
        /// </summary>
        public readonly string JsonPartition;
        public readonly string OfferId;
        public readonly string OsId;
        public readonly bool? Swap;

        [OutputConstructor]
        private GetEasyPartitioningResult(
            string? ext4Mountpoint,

            bool? extraPartition,

            string id,

            string jsonPartition,

            string offerId,

            string osId,

            bool? swap)
        {
            Ext4Mountpoint = ext4Mountpoint;
            ExtraPartition = extraPartition;
            Id = id;
            JsonPartition = jsonPartition;
            OfferId = offerId;
            OsId = osId;
            Swap = swap;
        }
    }
}
