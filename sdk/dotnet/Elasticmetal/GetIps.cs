// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Elasticmetal
{
    public static class GetIps
    {
        /// <summary>
        /// Gets information about multiple Flexible IPs.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// using Scaleway = Pulumiverse.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Find ips that share the same tags
        ///     var fipsByTags = Scaleway.Elasticmetal.GetIps.Invoke(new()
        ///     {
        ///         Tags = new[]
        ///         {
        ///             "a tag",
        ///         },
        ///     });
        /// 
        ///     // Find ips that share the same Server ID
        ///     var myOffer = Scaleway.Elasticmetal.GetOffer.Invoke(new()
        ///     {
        ///         Name = "EM-B112X-SSD",
        ///     });
        /// 
        ///     var @base = new Scaleway.Elasticmetal.Server("base", new()
        ///     {
        ///         Name = "MyServer",
        ///         Offer = myOffer.Apply(getOfferResult =&gt; getOfferResult.OfferId),
        ///         InstallConfigAfterward = true,
        ///     });
        /// 
        ///     var first = new Scaleway.Elasticmetal.Ip("first", new()
        ///     {
        ///         ServerId = @base.Id,
        ///         Tags = new[]
        ///         {
        ///             "foo",
        ///             "first",
        ///         },
        ///     });
        /// 
        ///     var second = new Scaleway.Elasticmetal.Ip("second", new()
        ///     {
        ///         ServerId = @base.Id,
        ///         Tags = new[]
        ///         {
        ///             "foo",
        ///             "second",
        ///         },
        ///     });
        /// 
        ///     var fipsByServerId = Scaleway.Elasticmetal.GetIps.Invoke(new()
        ///     {
        ///         ServerIds = new[]
        ///         {
        ///             @base.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetIpsResult> InvokeAsync(GetIpsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIpsResult>("scaleway:elasticmetal/getIps:getIps", args ?? new GetIpsArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about multiple Flexible IPs.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// using Scaleway = Pulumiverse.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Find ips that share the same tags
        ///     var fipsByTags = Scaleway.Elasticmetal.GetIps.Invoke(new()
        ///     {
        ///         Tags = new[]
        ///         {
        ///             "a tag",
        ///         },
        ///     });
        /// 
        ///     // Find ips that share the same Server ID
        ///     var myOffer = Scaleway.Elasticmetal.GetOffer.Invoke(new()
        ///     {
        ///         Name = "EM-B112X-SSD",
        ///     });
        /// 
        ///     var @base = new Scaleway.Elasticmetal.Server("base", new()
        ///     {
        ///         Name = "MyServer",
        ///         Offer = myOffer.Apply(getOfferResult =&gt; getOfferResult.OfferId),
        ///         InstallConfigAfterward = true,
        ///     });
        /// 
        ///     var first = new Scaleway.Elasticmetal.Ip("first", new()
        ///     {
        ///         ServerId = @base.Id,
        ///         Tags = new[]
        ///         {
        ///             "foo",
        ///             "first",
        ///         },
        ///     });
        /// 
        ///     var second = new Scaleway.Elasticmetal.Ip("second", new()
        ///     {
        ///         ServerId = @base.Id,
        ///         Tags = new[]
        ///         {
        ///             "foo",
        ///             "second",
        ///         },
        ///     });
        /// 
        ///     var fipsByServerId = Scaleway.Elasticmetal.GetIps.Invoke(new()
        ///     {
        ///         ServerIds = new[]
        ///         {
        ///             @base.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetIpsResult> Invoke(GetIpsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIpsResult>("scaleway:elasticmetal/getIps:getIps", args ?? new GetIpsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about multiple Flexible IPs.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// using Scaleway = Pulumiverse.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Find ips that share the same tags
        ///     var fipsByTags = Scaleway.Elasticmetal.GetIps.Invoke(new()
        ///     {
        ///         Tags = new[]
        ///         {
        ///             "a tag",
        ///         },
        ///     });
        /// 
        ///     // Find ips that share the same Server ID
        ///     var myOffer = Scaleway.Elasticmetal.GetOffer.Invoke(new()
        ///     {
        ///         Name = "EM-B112X-SSD",
        ///     });
        /// 
        ///     var @base = new Scaleway.Elasticmetal.Server("base", new()
        ///     {
        ///         Name = "MyServer",
        ///         Offer = myOffer.Apply(getOfferResult =&gt; getOfferResult.OfferId),
        ///         InstallConfigAfterward = true,
        ///     });
        /// 
        ///     var first = new Scaleway.Elasticmetal.Ip("first", new()
        ///     {
        ///         ServerId = @base.Id,
        ///         Tags = new[]
        ///         {
        ///             "foo",
        ///             "first",
        ///         },
        ///     });
        /// 
        ///     var second = new Scaleway.Elasticmetal.Ip("second", new()
        ///     {
        ///         ServerId = @base.Id,
        ///         Tags = new[]
        ///         {
        ///             "foo",
        ///             "second",
        ///         },
        ///     });
        /// 
        ///     var fipsByServerId = Scaleway.Elasticmetal.GetIps.Invoke(new()
        ///     {
        ///         ServerIds = new[]
        ///         {
        ///             @base.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetIpsResult> Invoke(GetIpsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetIpsResult>("scaleway:elasticmetal/getIps:getIps", args ?? new GetIpsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIpsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// (Defaults to provider `project_id`) The ID of the project the IP is in.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        [Input("serverIds")]
        private List<string>? _serverIds;

        /// <summary>
        /// List of server IDs used as filter. IPs with these exact server IDs are listed.
        /// </summary>
        public List<string> ServerIds
        {
            get => _serverIds ?? (_serverIds = new List<string>());
            set => _serverIds = value;
        }

        [Input("tags")]
        private List<string>? _tags;

        /// <summary>
        /// List of tags used as filter. IPs with these exact tags are listed.
        /// </summary>
        public List<string> Tags
        {
            get => _tags ?? (_tags = new List<string>());
            set => _tags = value;
        }

        /// <summary>
        /// `zone`) The zone in which IPs exist.
        /// </summary>
        [Input("zone")]
        public string? Zone { get; set; }

        public GetIpsArgs()
        {
        }
        public static new GetIpsArgs Empty => new GetIpsArgs();
    }

    public sealed class GetIpsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// (Defaults to provider `project_id`) The ID of the project the IP is in.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("serverIds")]
        private InputList<string>? _serverIds;

        /// <summary>
        /// List of server IDs used as filter. IPs with these exact server IDs are listed.
        /// </summary>
        public InputList<string> ServerIds
        {
            get => _serverIds ?? (_serverIds = new InputList<string>());
            set => _serverIds = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// List of tags used as filter. IPs with these exact tags are listed.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// `zone`) The zone in which IPs exist.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GetIpsInvokeArgs()
        {
        }
        public static new GetIpsInvokeArgs Empty => new GetIpsInvokeArgs();
    }


    [OutputType]
    public sealed class GetIpsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of found flexible IPS
        /// </summary>
        public readonly ImmutableArray<Outputs.GetIpsIpResult> Ips;
        /// <summary>
        /// (Defaults to provider `organization_id`) The ID of the organization the IP is in.
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// (Defaults to provider `project_id`) The ID of the project the IP is in.
        /// </summary>
        public readonly string ProjectId;
        public readonly ImmutableArray<string> ServerIds;
        /// <summary>
        /// The list of tags which are attached to the flexible IP.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// (Defaults to provider `zone`) The zone in which the MAC address exist.
        /// </summary>
        public readonly string? Zone;

        [OutputConstructor]
        private GetIpsResult(
            string id,

            ImmutableArray<Outputs.GetIpsIpResult> ips,

            string organizationId,

            string projectId,

            ImmutableArray<string> serverIds,

            ImmutableArray<string> tags,

            string? zone)
        {
            Id = id;
            Ips = ips;
            OrganizationId = organizationId;
            ProjectId = projectId;
            ServerIds = serverIds;
            Tags = tags;
            Zone = zone;
        }
    }
}
