// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Elasticmetal
{
    public static class GetOs
    {
        /// <summary>
        /// Gets information about a baremetal operating system.
        /// For more information, see the [API documentation](https://www.scaleway.com/en/developers/api/elastic-metal/#path-os-list-available-oses).
        /// 
        /// You can also use the [scaleway-cli](https://github.com/scaleway/scaleway-cli) with `scw baremetal os list` to list all available operating systems.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Get info by os name and version
        ///     var byName = Scaleway.Elasticmetal.GetOs.Invoke(new()
        ///     {
        ///         Name = "Ubuntu",
        ///         Version = "20.04 LTS (Focal Fossa)",
        ///     });
        /// 
        ///     // Get info by os id
        ///     var byId = Scaleway.Elasticmetal.GetOs.Invoke(new()
        ///     {
        ///         OsId = "03b7f4ba-a6a1-4305-984e-b54fafbf1681",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetOsResult> InvokeAsync(GetOsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOsResult>("scaleway:elasticmetal/getOs:getOs", args ?? new GetOsArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a baremetal operating system.
        /// For more information, see the [API documentation](https://www.scaleway.com/en/developers/api/elastic-metal/#path-os-list-available-oses).
        /// 
        /// You can also use the [scaleway-cli](https://github.com/scaleway/scaleway-cli) with `scw baremetal os list` to list all available operating systems.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Get info by os name and version
        ///     var byName = Scaleway.Elasticmetal.GetOs.Invoke(new()
        ///     {
        ///         Name = "Ubuntu",
        ///         Version = "20.04 LTS (Focal Fossa)",
        ///     });
        /// 
        ///     // Get info by os id
        ///     var byId = Scaleway.Elasticmetal.GetOs.Invoke(new()
        ///     {
        ///         OsId = "03b7f4ba-a6a1-4305-984e-b54fafbf1681",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetOsResult> Invoke(GetOsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOsResult>("scaleway:elasticmetal/getOs:getOs", args ?? new GetOsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a baremetal operating system.
        /// For more information, see the [API documentation](https://www.scaleway.com/en/developers/api/elastic-metal/#path-os-list-available-oses).
        /// 
        /// You can also use the [scaleway-cli](https://github.com/scaleway/scaleway-cli) with `scw baremetal os list` to list all available operating systems.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Get info by os name and version
        ///     var byName = Scaleway.Elasticmetal.GetOs.Invoke(new()
        ///     {
        ///         Name = "Ubuntu",
        ///         Version = "20.04 LTS (Focal Fossa)",
        ///     });
        /// 
        ///     // Get info by os id
        ///     var byId = Scaleway.Elasticmetal.GetOs.Invoke(new()
        ///     {
        ///         OsId = "03b7f4ba-a6a1-4305-984e-b54fafbf1681",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetOsResult> Invoke(GetOsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetOsResult>("scaleway:elasticmetal/getOs:getOs", args ?? new GetOsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The os name. Only one of `name` and `os_id` should be specified.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The operating system id. Only one of `name` and `os_id` should be specified.
        /// </summary>
        [Input("osId")]
        public string? OsId { get; set; }

        /// <summary>
        /// The os version.
        /// </summary>
        [Input("version")]
        public string? Version { get; set; }

        /// <summary>
        /// `zone`) The zone in which the os exists.
        /// </summary>
        [Input("zone")]
        public string? Zone { get; set; }

        public GetOsArgs()
        {
        }
        public static new GetOsArgs Empty => new GetOsArgs();
    }

    public sealed class GetOsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The os name. Only one of `name` and `os_id` should be specified.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The operating system id. Only one of `name` and `os_id` should be specified.
        /// </summary>
        [Input("osId")]
        public Input<string>? OsId { get; set; }

        /// <summary>
        /// The os version.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        /// <summary>
        /// `zone`) The zone in which the os exists.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GetOsInvokeArgs()
        {
        }
        public static new GetOsInvokeArgs Empty => new GetOsInvokeArgs();
    }


    [OutputType]
    public sealed class GetOsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Name;
        public readonly string? OsId;
        public readonly string? Version;
        public readonly string? Zone;

        [OutputConstructor]
        private GetOsResult(
            string id,

            string? name,

            string? osId,

            string? version,

            string? zone)
        {
            Id = id;
            Name = name;
            OsId = osId;
            Version = version;
            Zone = zone;
        }
    }
}
