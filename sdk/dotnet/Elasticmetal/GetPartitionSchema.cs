// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Elasticmetal
{
    public static class GetPartitionSchema
    {
        /// <summary>
        /// The scaleway.elasticmetal.getPartitionSchema data source allows you to retrieve a ready-to-use partitioning schema for a BareMetal server. This schema can be used for custom installations with optional swap and extra partitions.
        /// 
        /// This data source simplifies the process of generating valid partitioning configurations, especially useful when dealing with OS and offer compatibility requirements.
        /// 
        /// ## Partitioning Details
        /// 
        /// The partitioning schema generated by the `scaleway.elasticmetal.getPartitionSchema` data source includes a root (`/`) partition that is **20GB** in size by default.
        /// 
        /// If additional storage is required, you can enable the `ExtraPartition` option to mount extra space on a custom path (e.g., `/data`).
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Scaleway.Elasticmetal.GetPartitionSchema.Invoke(new()
        ///     {
        ///         OfferId = "11111111-1111-1111-1111-111111111111",
        ///         OsId = "22222222-2222-2222-2222-222222222222",
        ///         Swap = true,
        ///         ExtraPartition = true,
        ///         Ext4Mountpoint = "/data",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPartitionSchemaResult> InvokeAsync(GetPartitionSchemaArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPartitionSchemaResult>("scaleway:elasticmetal/getPartitionSchema:getPartitionSchema", args ?? new GetPartitionSchemaArgs(), options.WithDefaults());

        /// <summary>
        /// The scaleway.elasticmetal.getPartitionSchema data source allows you to retrieve a ready-to-use partitioning schema for a BareMetal server. This schema can be used for custom installations with optional swap and extra partitions.
        /// 
        /// This data source simplifies the process of generating valid partitioning configurations, especially useful when dealing with OS and offer compatibility requirements.
        /// 
        /// ## Partitioning Details
        /// 
        /// The partitioning schema generated by the `scaleway.elasticmetal.getPartitionSchema` data source includes a root (`/`) partition that is **20GB** in size by default.
        /// 
        /// If additional storage is required, you can enable the `ExtraPartition` option to mount extra space on a custom path (e.g., `/data`).
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Scaleway.Elasticmetal.GetPartitionSchema.Invoke(new()
        ///     {
        ///         OfferId = "11111111-1111-1111-1111-111111111111",
        ///         OsId = "22222222-2222-2222-2222-222222222222",
        ///         Swap = true,
        ///         ExtraPartition = true,
        ///         Ext4Mountpoint = "/data",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPartitionSchemaResult> Invoke(GetPartitionSchemaInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPartitionSchemaResult>("scaleway:elasticmetal/getPartitionSchema:getPartitionSchema", args ?? new GetPartitionSchemaInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The scaleway.elasticmetal.getPartitionSchema data source allows you to retrieve a ready-to-use partitioning schema for a BareMetal server. This schema can be used for custom installations with optional swap and extra partitions.
        /// 
        /// This data source simplifies the process of generating valid partitioning configurations, especially useful when dealing with OS and offer compatibility requirements.
        /// 
        /// ## Partitioning Details
        /// 
        /// The partitioning schema generated by the `scaleway.elasticmetal.getPartitionSchema` data source includes a root (`/`) partition that is **20GB** in size by default.
        /// 
        /// If additional storage is required, you can enable the `ExtraPartition` option to mount extra space on a custom path (e.g., `/data`).
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Scaleway.Elasticmetal.GetPartitionSchema.Invoke(new()
        ///     {
        ///         OfferId = "11111111-1111-1111-1111-111111111111",
        ///         OsId = "22222222-2222-2222-2222-222222222222",
        ///         Swap = true,
        ///         ExtraPartition = true,
        ///         Ext4Mountpoint = "/data",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPartitionSchemaResult> Invoke(GetPartitionSchemaInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPartitionSchemaResult>("scaleway:elasticmetal/getPartitionSchema:getPartitionSchema", args ?? new GetPartitionSchemaInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPartitionSchemaArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The mount point for the extra partition. Must be an absolute path using alphanumeric characters and underscores.
        /// </summary>
        [Input("ext4Mountpoint")]
        public string? Ext4Mountpoint { get; set; }

        /// <summary>
        /// Whether to add an extra ext4 data partition.
        /// </summary>
        [Input("extraPartition")]
        public bool? ExtraPartition { get; set; }

        /// <summary>
        /// The UUID of the BareMetal offer.
        /// </summary>
        [Input("offerId", required: true)]
        public string OfferId { get; set; } = null!;

        /// <summary>
        /// The UUID of the OS image.
        /// </summary>
        [Input("osId", required: true)]
        public string OsId { get; set; } = null!;

        /// <summary>
        /// Whether to include a swap partition.
        /// </summary>
        [Input("swap")]
        public bool? Swap { get; set; }

        public GetPartitionSchemaArgs()
        {
        }
        public static new GetPartitionSchemaArgs Empty => new GetPartitionSchemaArgs();
    }

    public sealed class GetPartitionSchemaInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The mount point for the extra partition. Must be an absolute path using alphanumeric characters and underscores.
        /// </summary>
        [Input("ext4Mountpoint")]
        public Input<string>? Ext4Mountpoint { get; set; }

        /// <summary>
        /// Whether to add an extra ext4 data partition.
        /// </summary>
        [Input("extraPartition")]
        public Input<bool>? ExtraPartition { get; set; }

        /// <summary>
        /// The UUID of the BareMetal offer.
        /// </summary>
        [Input("offerId", required: true)]
        public Input<string> OfferId { get; set; } = null!;

        /// <summary>
        /// The UUID of the OS image.
        /// </summary>
        [Input("osId", required: true)]
        public Input<string> OsId { get; set; } = null!;

        /// <summary>
        /// Whether to include a swap partition.
        /// </summary>
        [Input("swap")]
        public Input<bool>? Swap { get; set; }

        public GetPartitionSchemaInvokeArgs()
        {
        }
        public static new GetPartitionSchemaInvokeArgs Empty => new GetPartitionSchemaInvokeArgs();
    }


    [OutputType]
    public sealed class GetPartitionSchemaResult
    {
        public readonly string? Ext4Mountpoint;
        public readonly bool? ExtraPartition;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// â€” A validated partitioning schema in JSON format that can be directly used for BareMetal server deployment.
        /// </summary>
        public readonly string JsonPartition;
        public readonly string OfferId;
        public readonly string OsId;
        public readonly bool? Swap;

        [OutputConstructor]
        private GetPartitionSchemaResult(
            string? ext4Mountpoint,

            bool? extraPartition,

            string id,

            string jsonPartition,

            string offerId,

            string osId,

            bool? swap)
        {
            Ext4Mountpoint = ext4Mountpoint;
            ExtraPartition = extraPartition;
            Id = id;
            JsonPartition = jsonPartition;
            OfferId = offerId;
            OsId = osId;
            Swap = swap;
        }
    }
}
