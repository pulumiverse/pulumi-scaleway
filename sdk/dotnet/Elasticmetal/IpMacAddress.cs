// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Elasticmetal
{
    /// <summary>
    /// Creates and manages Scaleway Flexible IP Mac Addresses.
    /// For more information, see the [API documentation](https://www.scaleway.com/en/developers/api/elastic-metal-flexible-ip/).
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Scaleway.Elasticmetal.Ip("main");
    /// 
    ///     var mainIpMacAddress = new Scaleway.Elasticmetal.IpMacAddress("main", new()
    ///     {
    ///         FlexibleIpId = main.Id,
    ///         Type = "kvm",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Duplicate on many other flexible IPs
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumi.Scaleway;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myOffer = Scaleway.Elasticmetal.GetOffer.Invoke(new()
    ///     {
    ///         Name = "EM-B112X-SSD",
    ///     });
    /// 
    ///     var @base = new Scaleway.Elasticmetal.Server("base", new()
    ///     {
    ///         Name = "TestAccScalewayBaremetalServer_WithoutInstallConfig",
    ///         Offer = myOffer.Apply(getOfferResult =&gt; getOfferResult.OfferId),
    ///         InstallConfigAfterward = true,
    ///     });
    /// 
    ///     var ip01 = new Scaleway.Elasticmetal.Ip("ip01", new()
    ///     {
    ///         ServerId = @base.Id,
    ///     });
    /// 
    ///     var ip02 = new Scaleway.Elasticmetal.Ip("ip02", new()
    ///     {
    ///         ServerId = @base.Id,
    ///     });
    /// 
    ///     var ip03 = new Scaleway.Elasticmetal.Ip("ip03", new()
    ///     {
    ///         ServerId = @base.Id,
    ///     });
    /// 
    ///     var main = new Scaleway.Elasticmetal.IpMacAddress("main", new()
    ///     {
    ///         FlexibleIpId = ip01.Id,
    ///         Type = "kvm",
    ///         FlexibleIpIdsToDuplicates = new[]
    ///         {
    ///             ip02.Id,
    ///             ip03.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Flexible IP Mac Addresses can be imported using the `{zone}/{id}`, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:elasticmetal/ipMacAddress:IpMacAddress main fr-par-1/11111111-1111-1111-1111-111111111111
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:elasticmetal/ipMacAddress:IpMacAddress")]
    public partial class IpMacAddress : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Virtual MAC address.
        /// </summary>
        [Output("address")]
        public Output<string> Address { get; private set; } = null!;

        /// <summary>
        /// The date at which the Virtual Mac Address was created (RFC 3339 format).
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The ID of the flexible IP for which to generate a virtual MAC.
        /// </summary>
        [Output("flexibleIpId")]
        public Output<string> FlexibleIpId { get; private set; } = null!;

        /// <summary>
        /// The IDs of the flexible IPs on which to duplicate the virtual MAC.
        /// &gt; **Important:** The flexible IPs need to be attached to the same server for the operation to work.
        /// </summary>
        [Output("flexibleIpIdsToDuplicates")]
        public Output<ImmutableArray<string>> FlexibleIpIdsToDuplicates { get; private set; } = null!;

        /// <summary>
        /// The Virtual MAC status.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The type of the virtual MAC.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The date at which the Virtual Mac Address was last updated (RFC 3339 format).
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The zone of the Virtual Mac Address.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a IpMacAddress resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IpMacAddress(string name, IpMacAddressArgs args, CustomResourceOptions? options = null)
            : base("scaleway:elasticmetal/ipMacAddress:IpMacAddress", name, args ?? new IpMacAddressArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IpMacAddress(string name, Input<string> id, IpMacAddressState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:elasticmetal/ipMacAddress:IpMacAddress", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "scaleway:index/flexibleIpMacAddress:FlexibleIpMacAddress" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IpMacAddress resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IpMacAddress Get(string name, Input<string> id, IpMacAddressState? state = null, CustomResourceOptions? options = null)
        {
            return new IpMacAddress(name, id, state, options);
        }
    }

    public sealed class IpMacAddressArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the flexible IP for which to generate a virtual MAC.
        /// </summary>
        [Input("flexibleIpId", required: true)]
        public Input<string> FlexibleIpId { get; set; } = null!;

        [Input("flexibleIpIdsToDuplicates")]
        private InputList<string>? _flexibleIpIdsToDuplicates;

        /// <summary>
        /// The IDs of the flexible IPs on which to duplicate the virtual MAC.
        /// &gt; **Important:** The flexible IPs need to be attached to the same server for the operation to work.
        /// </summary>
        public InputList<string> FlexibleIpIdsToDuplicates
        {
            get => _flexibleIpIdsToDuplicates ?? (_flexibleIpIdsToDuplicates = new InputList<string>());
            set => _flexibleIpIdsToDuplicates = value;
        }

        /// <summary>
        /// The type of the virtual MAC.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The zone of the Virtual Mac Address.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public IpMacAddressArgs()
        {
        }
        public static new IpMacAddressArgs Empty => new IpMacAddressArgs();
    }

    public sealed class IpMacAddressState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Virtual MAC address.
        /// </summary>
        [Input("address")]
        public Input<string>? Address { get; set; }

        /// <summary>
        /// The date at which the Virtual Mac Address was created (RFC 3339 format).
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The ID of the flexible IP for which to generate a virtual MAC.
        /// </summary>
        [Input("flexibleIpId")]
        public Input<string>? FlexibleIpId { get; set; }

        [Input("flexibleIpIdsToDuplicates")]
        private InputList<string>? _flexibleIpIdsToDuplicates;

        /// <summary>
        /// The IDs of the flexible IPs on which to duplicate the virtual MAC.
        /// &gt; **Important:** The flexible IPs need to be attached to the same server for the operation to work.
        /// </summary>
        public InputList<string> FlexibleIpIdsToDuplicates
        {
            get => _flexibleIpIdsToDuplicates ?? (_flexibleIpIdsToDuplicates = new InputList<string>());
            set => _flexibleIpIdsToDuplicates = value;
        }

        /// <summary>
        /// The Virtual MAC status.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The type of the virtual MAC.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The date at which the Virtual Mac Address was last updated (RFC 3339 format).
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// The zone of the Virtual Mac Address.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public IpMacAddressState()
        {
        }
        public static new IpMacAddressState Empty => new IpMacAddressState();
    }
}
