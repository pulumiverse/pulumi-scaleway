// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Elasticmetal
{
    /// <summary>
    /// Creates and manages Scaleway Compute Baremetal servers. For more information, see the [API documentation](https://www.scaleway.com/en/developers/api/elastic-metal/).
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic
    /// 
    /// ### With option
    /// 
    /// ### With private network
    /// 
    /// ### With IPAM IP IDs
    /// 
    /// ### Without install config
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumi.Scaleway;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myOffer = Scaleway.Elasticmetal.GetOffer.Invoke(new()
    ///     {
    ///         Zone = "fr-par-2",
    ///         Name = "EM-B112X-SSD",
    ///     });
    /// 
    ///     var myServer = new Scaleway.Elasticmetal.Server("my_server", new()
    ///     {
    ///         Zone = "fr-par-2",
    ///         Offer = myOffer.Apply(getOfferResult =&gt; getOfferResult.OfferId),
    ///         InstallConfigAfterward = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### With custom partitioning
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumi.Scaleway;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var configCustomPartitioning = config.Get("configCustomPartitioning") ?? "{\"disks\":[{\"device\":\"/dev/nvme0n1\",\"partitions\":[{\"label\":\"uefi\",\"number\":1,\"size\":536870912,\"useAllAvailableSpace\":false},{\"label\":\"boot\",\"number\":2,\"size\":536870912,\"useAllAvailableSpace\":false},{\"label\":\"root\",\"number\":3,\"size\":1018839433216,\"useAllAvailableSpace\":false}]},{\"device\":\"/dev/nvme1n1\",\"partitions\":[{\"label\":\"boot\",\"number\":1,\"size\":536870912,\"useAllAvailableSpace\":false},{\"label\":\"data\",\"number\":2,\"size\":1018839433216,\"useAllAvailableSpace\":false}]}],\"filesystems\":[{\"device\":\"/dev/nvme0n1p1\",\"format\":\"fat32\",\"mountpoint\":\"/boot/efi\"},{\"device\":\"/dev/nvme0n1p2\",\"format\":\"ext4\",\"mountpoint\":\"/boot\"},{\"device\":\"/dev/nvme0n1p3\",\"format\":\"ext4\",\"mountpoint\":\"/\"},{\"device\":\"/dev/nvme1n1p2\",\"format\":\"ext4\",\"mountpoint\":\"/data\"}],\"raids\":[]}";
    ///     var myOs = Scaleway.Elasticmetal.GetOs.Invoke(new()
    ///     {
    ///         Zone = "fr-par-1",
    ///         Name = "Ubuntu",
    ///         Version = "22.04 LTS (Jammy Jellyfish)",
    ///     });
    /// 
    ///     var mySshKey = new Scaleway.Iam.SshKey("my_ssh_key", new()
    ///     {
    ///         Name = "my_ssh_key",
    ///         PublicKey = "ssh XXXXXXXXXXX",
    ///     });
    /// 
    ///     var myOffer = Scaleway.Elasticmetal.GetOffer.Invoke(new()
    ///     {
    ///         Zone = "fr-par-1",
    ///         Name = "EM-B220E-NVME",
    ///         SubscriptionPeriod = "hourly",
    ///     });
    /// 
    ///     var myServer = new Scaleway.Elasticmetal.Server("my_server", new()
    ///     {
    ///         Name = "my_super_server",
    ///         Zone = "fr-par-1",
    ///         Description = "test a description",
    ///         Offer = myOffer.Apply(getOfferResult =&gt; getOfferResult.OfferId),
    ///         Os = myOs.Apply(getOsResult =&gt; getOsResult.OsId),
    ///         Partitioning = configCustomPartitioning,
    ///         Tags = new[]
    ///         {
    ///             "terraform-test",
    ///             "scaleway_baremetal_server",
    ///             "minimal",
    ///         },
    ///         SshKeyIds = new[]
    ///         {
    ///             mySshKey.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Migrate from hourly to monthly plan
    /// 
    /// To migrate from an hourly to a monthly subscription for a Scaleway Baremetal server, it is important to understand that the migration can only be done by using the data source.
    /// You cannot directly modify the SubscriptionPeriod of an existing scaleway.elasticmetal.getOffer resource. Instead, you must define the monthly offer using the data source and then update the server configuration accordingly.
    /// 
    /// ### Hourly Plan Example
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumi.Scaleway;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myOffer = Scaleway.Elasticmetal.GetOffer.Invoke(new()
    ///     {
    ///         Zone = "fr-par-1",
    ///         Name = "EM-B220E-NVME",
    ///         SubscriptionPeriod = "hourly",
    ///     });
    /// 
    ///     var myServer = new Scaleway.Elasticmetal.Server("my_server", new()
    ///     {
    ///         Name = "UpdateSubscriptionPeriod",
    ///         Offer = myOffer.Apply(getOfferResult =&gt; getOfferResult.OfferId),
    ///         Zone = "%s",
    ///         InstallConfigAfterward = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Monthly Plan Example
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumi.Scaleway;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myOffer = Scaleway.Elasticmetal.GetOffer.Invoke(new()
    ///     {
    ///         Zone = "fr-par-1",
    ///         Name = "EM-B220E-NVME",
    ///         SubscriptionPeriod = "monthly",
    ///     });
    /// 
    ///     var myServer = new Scaleway.Elasticmetal.Server("my_server", new()
    ///     {
    ///         Name = "UpdateSubscriptionPeriod",
    ///         Offer = myOffer.Apply(getOfferResult =&gt; getOfferResult.OfferId),
    ///         Zone = "fr-par-1",
    ///         InstallConfigAfterward = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// **Important**  Once you migrate to a monthly subscription, you cannot downgrade back to an hourly plan. Ensure that the monthly plan meets your needs before making the switch.
    /// 
    /// ## Import
    /// 
    /// Baremetal servers can be imported using the `{zone}/{id}`, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:elasticmetal/server:Server web fr-par-2/11111111-1111-1111-1111-111111111111
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:elasticmetal/server:Server")]
    public partial class Server : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A description for the server.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The domain of the server.
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// The hostname of the server.
        /// </summary>
        [Output("hostname")]
        public Output<string?> Hostname { get; private set; } = null!;

        /// <summary>
        /// If True, this boolean allows to create a server without the install config if you want to provide it later.
        /// </summary>
        [Output("installConfigAfterward")]
        public Output<bool?> InstallConfigAfterward { get; private set; } = null!;

        /// <summary>
        /// (List of) The IPs of the server.
        /// </summary>
        [Output("ips")]
        public Output<ImmutableArray<Outputs.ServerIp>> Ips { get; private set; } = null!;

        /// <summary>
        /// (List of) The IPv4 addresses of the server.
        /// </summary>
        [Output("ipv4s")]
        public Output<ImmutableArray<Outputs.ServerIpv4>> Ipv4s { get; private set; } = null!;

        /// <summary>
        /// (List of) The IPv6 addresses of the server.
        /// </summary>
        [Output("ipv6s")]
        public Output<ImmutableArray<Outputs.ServerIpv6>> Ipv6s { get; private set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The offer UUID of the baremetal server.
        /// Use [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-servers-get-a-specific-elastic-metal-server) to find the right offer.
        /// 
        /// &gt; **Important:** Updates to `Offer` will recreate the server.
        /// </summary>
        [Output("offer")]
        public Output<string> Offer { get; private set; } = null!;

        /// <summary>
        /// The ID of the offer.
        /// </summary>
        [Output("offerId")]
        public Output<string> OfferId { get; private set; } = null!;

        /// <summary>
        /// The name of the offer.
        /// </summary>
        [Output("offerName")]
        public Output<string> OfferName { get; private set; } = null!;

        /// <summary>
        /// The options to enable on the server.
        /// &gt; The `Options` block supports:
        /// </summary>
        [Output("options")]
        public Output<ImmutableArray<Outputs.ServerOption>> Options { get; private set; } = null!;

        /// <summary>
        /// The organization ID the server is associated with.
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// The UUID of the os to install on the server.
        /// Use [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-os-list-available-oses) to find the right OS ID.
        /// &gt; **Important:** Updates to `Os` will reinstall the server.
        /// </summary>
        [Output("os")]
        public Output<string?> Os { get; private set; } = null!;

        /// <summary>
        /// The name of the os.
        /// </summary>
        [Output("osName")]
        public Output<string> OsName { get; private set; } = null!;

        /// <summary>
        /// The partitioning schema in JSON format
        /// </summary>
        [Output("partitioning")]
        public Output<string?> Partitioning { get; private set; } = null!;

        /// <summary>
        /// Password used for the installation. May be required depending on used os.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The list of private IPv4 and IPv6 addresses associated with the resource.
        /// </summary>
        [Output("privateIps")]
        public Output<ImmutableArray<Outputs.ServerPrivateIp>> PrivateIps { get; private set; } = null!;

        /// <summary>
        /// The private networks to attach to the server. For more information, see [the documentation](https://www.scaleway.com/en/docs/compute/elastic-metal/how-to/use-private-networks/)
        /// </summary>
        [Output("privateNetworks")]
        public Output<ImmutableArray<Outputs.ServerPrivateNetwork>> PrivateNetworks { get; private set; } = null!;

        /// <summary>
        /// `ProjectId`) The ID of the project the server is associated with.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Set to true to activate server protection option.
        /// </summary>
        [Output("protected")]
        public Output<bool?> Protected { get; private set; } = null!;

        /// <summary>
        /// If True, this boolean allows to reinstall the server on install config changes.
        /// &gt; **Important:** Updates to `SshKeyIds`, `User`, `Password`, `ServiceUser` or `ServicePassword` will not take effect on the server, it requires to reinstall it. To do so please set 'reinstall_on_config_changes' argument to true.
        /// </summary>
        [Output("reinstallOnConfigChanges")]
        public Output<bool?> ReinstallOnConfigChanges { get; private set; } = null!;

        /// <summary>
        /// Password used for the service to install. May be required depending on used os.
        /// </summary>
        [Output("servicePassword")]
        public Output<string?> ServicePassword { get; private set; } = null!;

        /// <summary>
        /// User used for the service to install.
        /// </summary>
        [Output("serviceUser")]
        public Output<string> ServiceUser { get; private set; } = null!;

        /// <summary>
        /// List of SSH keys allowed to connect to the server.
        /// </summary>
        [Output("sshKeyIds")]
        public Output<ImmutableArray<string>> SshKeyIds { get; private set; } = null!;

        /// <summary>
        /// The tags associated with the server.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// User used for the installation.
        /// </summary>
        [Output("user")]
        public Output<string> User { get; private set; } = null!;

        /// <summary>
        /// `Zone`) The zone in which the server should be created.
        /// </summary>
        [Output("zone")]
        public Output<string?> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a Server resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Server(string name, ServerArgs args, CustomResourceOptions? options = null)
            : base("scaleway:elasticmetal/server:Server", name, args ?? new ServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Server(string name, Input<string> id, ServerState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:elasticmetal/server:Server", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "scaleway:index/baremetalServer:BaremetalServer" },
                },
                AdditionalSecretOutputs =
                {
                    "password",
                    "servicePassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Server resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Server Get(string name, Input<string> id, ServerState? state = null, CustomResourceOptions? options = null)
        {
            return new Server(name, id, state, options);
        }
    }

    public sealed class ServerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description for the server.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The hostname of the server.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// If True, this boolean allows to create a server without the install config if you want to provide it later.
        /// </summary>
        [Input("installConfigAfterward")]
        public Input<bool>? InstallConfigAfterward { get; set; }

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The offer UUID of the baremetal server.
        /// Use [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-servers-get-a-specific-elastic-metal-server) to find the right offer.
        /// 
        /// &gt; **Important:** Updates to `Offer` will recreate the server.
        /// </summary>
        [Input("offer", required: true)]
        public Input<string> Offer { get; set; } = null!;

        [Input("options")]
        private InputList<Inputs.ServerOptionArgs>? _options;

        /// <summary>
        /// The options to enable on the server.
        /// &gt; The `Options` block supports:
        /// </summary>
        public InputList<Inputs.ServerOptionArgs> Options
        {
            get => _options ?? (_options = new InputList<Inputs.ServerOptionArgs>());
            set => _options = value;
        }

        /// <summary>
        /// The UUID of the os to install on the server.
        /// Use [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-os-list-available-oses) to find the right OS ID.
        /// &gt; **Important:** Updates to `Os` will reinstall the server.
        /// </summary>
        [Input("os")]
        public Input<string>? Os { get; set; }

        /// <summary>
        /// The partitioning schema in JSON format
        /// </summary>
        [Input("partitioning")]
        public Input<string>? Partitioning { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Password used for the installation. May be required depending on used os.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("privateIps")]
        private InputList<Inputs.ServerPrivateIpArgs>? _privateIps;

        /// <summary>
        /// The list of private IPv4 and IPv6 addresses associated with the resource.
        /// </summary>
        public InputList<Inputs.ServerPrivateIpArgs> PrivateIps
        {
            get => _privateIps ?? (_privateIps = new InputList<Inputs.ServerPrivateIpArgs>());
            set => _privateIps = value;
        }

        [Input("privateNetworks")]
        private InputList<Inputs.ServerPrivateNetworkArgs>? _privateNetworks;

        /// <summary>
        /// The private networks to attach to the server. For more information, see [the documentation](https://www.scaleway.com/en/docs/compute/elastic-metal/how-to/use-private-networks/)
        /// </summary>
        public InputList<Inputs.ServerPrivateNetworkArgs> PrivateNetworks
        {
            get => _privateNetworks ?? (_privateNetworks = new InputList<Inputs.ServerPrivateNetworkArgs>());
            set => _privateNetworks = value;
        }

        /// <summary>
        /// `ProjectId`) The ID of the project the server is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Set to true to activate server protection option.
        /// </summary>
        [Input("protected")]
        public Input<bool>? Protected { get; set; }

        /// <summary>
        /// If True, this boolean allows to reinstall the server on install config changes.
        /// &gt; **Important:** Updates to `SshKeyIds`, `User`, `Password`, `ServiceUser` or `ServicePassword` will not take effect on the server, it requires to reinstall it. To do so please set 'reinstall_on_config_changes' argument to true.
        /// </summary>
        [Input("reinstallOnConfigChanges")]
        public Input<bool>? ReinstallOnConfigChanges { get; set; }

        [Input("servicePassword")]
        private Input<string>? _servicePassword;

        /// <summary>
        /// Password used for the service to install. May be required depending on used os.
        /// </summary>
        public Input<string>? ServicePassword
        {
            get => _servicePassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _servicePassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// User used for the service to install.
        /// </summary>
        [Input("serviceUser")]
        public Input<string>? ServiceUser { get; set; }

        [Input("sshKeyIds")]
        private InputList<string>? _sshKeyIds;

        /// <summary>
        /// List of SSH keys allowed to connect to the server.
        /// </summary>
        public InputList<string> SshKeyIds
        {
            get => _sshKeyIds ?? (_sshKeyIds = new InputList<string>());
            set => _sshKeyIds = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tags associated with the server.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// User used for the installation.
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        /// <summary>
        /// `Zone`) The zone in which the server should be created.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public ServerArgs()
        {
        }
        public static new ServerArgs Empty => new ServerArgs();
    }

    public sealed class ServerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description for the server.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The domain of the server.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// The hostname of the server.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// If True, this boolean allows to create a server without the install config if you want to provide it later.
        /// </summary>
        [Input("installConfigAfterward")]
        public Input<bool>? InstallConfigAfterward { get; set; }

        [Input("ips")]
        private InputList<Inputs.ServerIpGetArgs>? _ips;

        /// <summary>
        /// (List of) The IPs of the server.
        /// </summary>
        public InputList<Inputs.ServerIpGetArgs> Ips
        {
            get => _ips ?? (_ips = new InputList<Inputs.ServerIpGetArgs>());
            set => _ips = value;
        }

        [Input("ipv4s")]
        private InputList<Inputs.ServerIpv4GetArgs>? _ipv4s;

        /// <summary>
        /// (List of) The IPv4 addresses of the server.
        /// </summary>
        public InputList<Inputs.ServerIpv4GetArgs> Ipv4s
        {
            get => _ipv4s ?? (_ipv4s = new InputList<Inputs.ServerIpv4GetArgs>());
            set => _ipv4s = value;
        }

        [Input("ipv6s")]
        private InputList<Inputs.ServerIpv6GetArgs>? _ipv6s;

        /// <summary>
        /// (List of) The IPv6 addresses of the server.
        /// </summary>
        public InputList<Inputs.ServerIpv6GetArgs> Ipv6s
        {
            get => _ipv6s ?? (_ipv6s = new InputList<Inputs.ServerIpv6GetArgs>());
            set => _ipv6s = value;
        }

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The offer UUID of the baremetal server.
        /// Use [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-servers-get-a-specific-elastic-metal-server) to find the right offer.
        /// 
        /// &gt; **Important:** Updates to `Offer` will recreate the server.
        /// </summary>
        [Input("offer")]
        public Input<string>? Offer { get; set; }

        /// <summary>
        /// The ID of the offer.
        /// </summary>
        [Input("offerId")]
        public Input<string>? OfferId { get; set; }

        /// <summary>
        /// The name of the offer.
        /// </summary>
        [Input("offerName")]
        public Input<string>? OfferName { get; set; }

        [Input("options")]
        private InputList<Inputs.ServerOptionGetArgs>? _options;

        /// <summary>
        /// The options to enable on the server.
        /// &gt; The `Options` block supports:
        /// </summary>
        public InputList<Inputs.ServerOptionGetArgs> Options
        {
            get => _options ?? (_options = new InputList<Inputs.ServerOptionGetArgs>());
            set => _options = value;
        }

        /// <summary>
        /// The organization ID the server is associated with.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// The UUID of the os to install on the server.
        /// Use [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-os-list-available-oses) to find the right OS ID.
        /// &gt; **Important:** Updates to `Os` will reinstall the server.
        /// </summary>
        [Input("os")]
        public Input<string>? Os { get; set; }

        /// <summary>
        /// The name of the os.
        /// </summary>
        [Input("osName")]
        public Input<string>? OsName { get; set; }

        /// <summary>
        /// The partitioning schema in JSON format
        /// </summary>
        [Input("partitioning")]
        public Input<string>? Partitioning { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Password used for the installation. May be required depending on used os.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("privateIps")]
        private InputList<Inputs.ServerPrivateIpGetArgs>? _privateIps;

        /// <summary>
        /// The list of private IPv4 and IPv6 addresses associated with the resource.
        /// </summary>
        public InputList<Inputs.ServerPrivateIpGetArgs> PrivateIps
        {
            get => _privateIps ?? (_privateIps = new InputList<Inputs.ServerPrivateIpGetArgs>());
            set => _privateIps = value;
        }

        [Input("privateNetworks")]
        private InputList<Inputs.ServerPrivateNetworkGetArgs>? _privateNetworks;

        /// <summary>
        /// The private networks to attach to the server. For more information, see [the documentation](https://www.scaleway.com/en/docs/compute/elastic-metal/how-to/use-private-networks/)
        /// </summary>
        public InputList<Inputs.ServerPrivateNetworkGetArgs> PrivateNetworks
        {
            get => _privateNetworks ?? (_privateNetworks = new InputList<Inputs.ServerPrivateNetworkGetArgs>());
            set => _privateNetworks = value;
        }

        /// <summary>
        /// `ProjectId`) The ID of the project the server is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Set to true to activate server protection option.
        /// </summary>
        [Input("protected")]
        public Input<bool>? Protected { get; set; }

        /// <summary>
        /// If True, this boolean allows to reinstall the server on install config changes.
        /// &gt; **Important:** Updates to `SshKeyIds`, `User`, `Password`, `ServiceUser` or `ServicePassword` will not take effect on the server, it requires to reinstall it. To do so please set 'reinstall_on_config_changes' argument to true.
        /// </summary>
        [Input("reinstallOnConfigChanges")]
        public Input<bool>? ReinstallOnConfigChanges { get; set; }

        [Input("servicePassword")]
        private Input<string>? _servicePassword;

        /// <summary>
        /// Password used for the service to install. May be required depending on used os.
        /// </summary>
        public Input<string>? ServicePassword
        {
            get => _servicePassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _servicePassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// User used for the service to install.
        /// </summary>
        [Input("serviceUser")]
        public Input<string>? ServiceUser { get; set; }

        [Input("sshKeyIds")]
        private InputList<string>? _sshKeyIds;

        /// <summary>
        /// List of SSH keys allowed to connect to the server.
        /// </summary>
        public InputList<string> SshKeyIds
        {
            get => _sshKeyIds ?? (_sshKeyIds = new InputList<string>());
            set => _sshKeyIds = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tags associated with the server.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// User used for the installation.
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        /// <summary>
        /// `Zone`) The zone in which the server should be created.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public ServerState()
        {
        }
        public static new ServerState Empty => new ServerState();
    }
}
