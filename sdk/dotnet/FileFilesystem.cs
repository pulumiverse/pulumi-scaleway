// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway
{
    /// <summary>
    /// &gt; **This product is currently in private beta. To request access, please contact your Technical Account Manager.**
    /// 
    /// Creates and manages a Scaleway File Storage filesystem in a specific region. A filesystem is a scalable storage resource that can be mounted on Compute instances and is typically used for share persistent storage between multiple instances (RWX).
    /// 
    /// This resource allows you to define and manage the size, tags, and region of a filesystem, and track its creation and update timestamps, current status, and number of active attachments.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var file = new Scaleway.FileFilesystem("file", new()
    ///     {
    ///         Name = "my-nfs-filesystem",
    ///         Size = 100000000000,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// File Storage filesystems can be imported using the `{region}/{id}`, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:index/fileFilesystem:FileFilesystem main fr-par/11111111-1111-1111-1111-111111111111
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:index/fileFilesystem:FileFilesystem")]
    public partial class FileFilesystem : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The date and time when the File Storage filesystem was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The name of the filesystem. If not provided, a random name will be generated.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The number of active attachments (mounts) on the filesystem.
        /// </summary>
        [Output("numberOfAttachments")]
        public Output<int> NumberOfAttachments { get; private set; } = null!;

        /// <summary>
        /// `OrganizationId`) The ID of the organization the user is associated with.
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// `ProjectId`) The ID of the project the server is
        /// associated with.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// `Region`) The region where the filesystem will be created (e.g., fr-par, nl-ams).
        /// </summary>
        [Output("region")]
        public Output<string?> Region { get; private set; } = null!;

        /// <summary>
        /// The size of the filesystem in bytes, with a granularity of 100 GB (10¹¹ bytes).
        /// - Minimum: 100 GB (100000000000 bytes)
        /// - Maximum: 10 TB (10000000000000 bytes)
        /// </summary>
        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        /// <summary>
        /// The current status of the filesystem. Possible values include creating, available, etc.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// A list of tags associated with the filesystem.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The date and time of the last update to the File Storage filesystem.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a FileFilesystem resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FileFilesystem(string name, FileFilesystemArgs args, CustomResourceOptions? options = null)
            : base("scaleway:index/fileFilesystem:FileFilesystem", name, args ?? new FileFilesystemArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FileFilesystem(string name, Input<string> id, FileFilesystemState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:index/fileFilesystem:FileFilesystem", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FileFilesystem resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FileFilesystem Get(string name, Input<string> id, FileFilesystemState? state = null, CustomResourceOptions? options = null)
        {
            return new FileFilesystem(name, id, state, options);
        }
    }

    public sealed class FileFilesystemArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the filesystem. If not provided, a random name will be generated.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// `ProjectId`) The ID of the project the server is
        /// associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// `Region`) The region where the filesystem will be created (e.g., fr-par, nl-ams).
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The size of the filesystem in bytes, with a granularity of 100 GB (10¹¹ bytes).
        /// - Minimum: 100 GB (100000000000 bytes)
        /// - Maximum: 10 TB (10000000000000 bytes)
        /// </summary>
        [Input("size", required: true)]
        public Input<int> Size { get; set; } = null!;

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags associated with the filesystem.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public FileFilesystemArgs()
        {
        }
        public static new FileFilesystemArgs Empty => new FileFilesystemArgs();
    }

    public sealed class FileFilesystemState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The date and time when the File Storage filesystem was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The name of the filesystem. If not provided, a random name will be generated.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of active attachments (mounts) on the filesystem.
        /// </summary>
        [Input("numberOfAttachments")]
        public Input<int>? NumberOfAttachments { get; set; }

        /// <summary>
        /// `OrganizationId`) The ID of the organization the user is associated with.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// `ProjectId`) The ID of the project the server is
        /// associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// `Region`) The region where the filesystem will be created (e.g., fr-par, nl-ams).
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The size of the filesystem in bytes, with a granularity of 100 GB (10¹¹ bytes).
        /// - Minimum: 100 GB (100000000000 bytes)
        /// - Maximum: 10 TB (10000000000000 bytes)
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// The current status of the filesystem. Possible values include creating, available, etc.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags associated with the filesystem.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The date and time of the last update to the File Storage filesystem.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public FileFilesystemState()
        {
        }
        public static new FileFilesystemState Empty => new FileFilesystemState();
    }
}
