// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway
{
    public static class GetCockpit
    {
        /// <summary>
        /// Gets information about the Scaleway Cockpit.
        /// 
        /// For more information consult the [documentation](https://www.scaleway.com/en/docs/observability/cockpit/concepts/).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = Scaleway.GetCockpit.Invoke();
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = Scaleway.GetCockpit.Invoke(new()
        ///     {
        ///         ProjectId = "11111111-1111-1111-1111-111111111111",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCockpitResult> InvokeAsync(GetCockpitArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCockpitResult>("scaleway:index/getCockpit:getCockpit", args ?? new GetCockpitArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about the Scaleway Cockpit.
        /// 
        /// For more information consult the [documentation](https://www.scaleway.com/en/docs/observability/cockpit/concepts/).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = Scaleway.GetCockpit.Invoke();
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = Scaleway.GetCockpit.Invoke(new()
        ///     {
        ///         ProjectId = "11111111-1111-1111-1111-111111111111",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCockpitResult> Invoke(GetCockpitInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCockpitResult>("scaleway:index/getCockpit:getCockpit", args ?? new GetCockpitInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCockpitArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// `project_id`) The ID of the project the cockpit is associated with.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        public GetCockpitArgs()
        {
        }
        public static new GetCockpitArgs Empty => new GetCockpitArgs();
    }

    public sealed class GetCockpitInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// `project_id`) The ID of the project the cockpit is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public GetCockpitInvokeArgs()
        {
        }
        public static new GetCockpitInvokeArgs Empty => new GetCockpitInvokeArgs();
    }


    [OutputType]
    public sealed class GetCockpitResult
    {
        /// <summary>
        /// Endpoints
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCockpitEndpointResult> Endpoints;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the current plan
        /// </summary>
        public readonly string PlanId;
        public readonly string? ProjectId;
        public readonly ImmutableArray<Outputs.GetCockpitPushUrlResult> PushUrls;

        [OutputConstructor]
        private GetCockpitResult(
            ImmutableArray<Outputs.GetCockpitEndpointResult> endpoints,

            string id,

            string planId,

            string? projectId,

            ImmutableArray<Outputs.GetCockpitPushUrlResult> pushUrls)
        {
            Endpoints = endpoints;
            Id = id;
            PlanId = planId;
            ProjectId = projectId;
            PushUrls = pushUrls;
        }
    }
}
