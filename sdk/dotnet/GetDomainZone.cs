// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway
{
    public static class GetDomainZone
    {
        /// <summary>
        /// Gets information about a domain zone.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = Scaleway.GetDomainZone.Invoke(new()
        ///     {
        ///         Domain = "scaleway-terraform.com",
        ///         Subdomain = "test",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDomainZoneResult> InvokeAsync(GetDomainZoneArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDomainZoneResult>("scaleway:index/getDomainZone:getDomainZone", args ?? new GetDomainZoneArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a domain zone.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = Scaleway.GetDomainZone.Invoke(new()
        ///     {
        ///         Domain = "scaleway-terraform.com",
        ///         Subdomain = "test",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDomainZoneResult> Invoke(GetDomainZoneInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDomainZoneResult>("scaleway:index/getDomainZone:getDomainZone", args ?? new GetDomainZoneInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDomainZoneArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The domain where the DNS zone will be created.
        /// </summary>
        [Input("domain")]
        public string? Domain { get; set; }

        /// <summary>
        /// The subdomain(zone name) to create in the domain.
        /// </summary>
        [Input("subdomain")]
        public string? Subdomain { get; set; }

        public GetDomainZoneArgs()
        {
        }
        public static new GetDomainZoneArgs Empty => new GetDomainZoneArgs();
    }

    public sealed class GetDomainZoneInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The domain where the DNS zone will be created.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// The subdomain(zone name) to create in the domain.
        /// </summary>
        [Input("subdomain")]
        public Input<string>? Subdomain { get; set; }

        public GetDomainZoneInvokeArgs()
        {
        }
        public static new GetDomainZoneInvokeArgs Empty => new GetDomainZoneInvokeArgs();
    }


    [OutputType]
    public sealed class GetDomainZoneResult
    {
        public readonly string? Domain;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Message
        /// </summary>
        public readonly string Message;
        /// <summary>
        /// NameServer list for zone.
        /// </summary>
        public readonly ImmutableArray<string> Ns;
        /// <summary>
        /// NameServer default list for zone.
        /// </summary>
        public readonly ImmutableArray<string> NsDefaults;
        /// <summary>
        /// NameServer master list for zone.
        /// </summary>
        public readonly ImmutableArray<string> NsMasters;
        public readonly string ProjectId;
        /// <summary>
        /// The domain zone status.
        /// </summary>
        public readonly string Status;
        public readonly string? Subdomain;
        /// <summary>
        /// The date and time of the last update of the DNS zone.
        /// </summary>
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetDomainZoneResult(
            string? domain,

            string id,

            string message,

            ImmutableArray<string> ns,

            ImmutableArray<string> nsDefaults,

            ImmutableArray<string> nsMasters,

            string projectId,

            string status,

            string? subdomain,

            string updatedAt)
        {
            Domain = domain;
            Id = id;
            Message = message;
            Ns = ns;
            NsDefaults = nsDefaults;
            NsMasters = nsMasters;
            ProjectId = projectId;
            Status = status;
            Subdomain = subdomain;
            UpdatedAt = updatedAt;
        }
    }
}
