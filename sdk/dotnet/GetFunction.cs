// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway
{
    [Obsolete(@"scaleway.index/getfunction.getFunction has been deprecated in favor of scaleway.functions/getfunction.getFunction")]
    public static class GetFunction
    {
        /// <summary>
        /// The `scaleway.functions.Function` data source is used to retrieve information about a Serverless Function.
        /// 
        /// Refer to the Serverless Functions [product documentation](https://www.scaleway.com/en/docs/serverless/functions/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-functions/) for more information.
        /// 
        /// For more information on the limitations of Serverless Functions, refer to the [dedicated documentation](https://www.scaleway.com/en/docs/compute/functions/reference-content/functions-limitations/).
        /// </summary>
        public static Task<GetFunctionResult> InvokeAsync(GetFunctionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFunctionResult>("scaleway:index/getFunction:getFunction", args ?? new GetFunctionArgs(), options.WithDefaults());

        /// <summary>
        /// The `scaleway.functions.Function` data source is used to retrieve information about a Serverless Function.
        /// 
        /// Refer to the Serverless Functions [product documentation](https://www.scaleway.com/en/docs/serverless/functions/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-functions/) for more information.
        /// 
        /// For more information on the limitations of Serverless Functions, refer to the [dedicated documentation](https://www.scaleway.com/en/docs/compute/functions/reference-content/functions-limitations/).
        /// </summary>
        public static Output<GetFunctionResult> Invoke(GetFunctionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFunctionResult>("scaleway:index/getFunction:getFunction", args ?? new GetFunctionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `scaleway.functions.Function` data source is used to retrieve information about a Serverless Function.
        /// 
        /// Refer to the Serverless Functions [product documentation](https://www.scaleway.com/en/docs/serverless/functions/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-functions/) for more information.
        /// 
        /// For more information on the limitations of Serverless Functions, refer to the [dedicated documentation](https://www.scaleway.com/en/docs/compute/functions/reference-content/functions-limitations/).
        /// </summary>
        public static Output<GetFunctionResult> Invoke(GetFunctionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFunctionResult>("scaleway:index/getFunction:getFunction", args ?? new GetFunctionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFunctionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier of the function. Only one of `name` and `function_id` should be specified.
        /// </summary>
        [Input("functionId")]
        public string? FunctionId { get; set; }

        /// <summary>
        /// The name of the function. Only one of `name` and `namespace_id` should be specified.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The namespace ID associated with this function.
        /// </summary>
        [Input("namespaceId", required: true)]
        public string NamespaceId { get; set; } = null!;

        /// <summary>
        /// The unique identifier of the project with which the function is associated.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// `region`) The region in which the container exists.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetFunctionArgs()
        {
        }
        public static new GetFunctionArgs Empty => new GetFunctionArgs();
    }

    public sealed class GetFunctionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier of the function. Only one of `name` and `function_id` should be specified.
        /// </summary>
        [Input("functionId")]
        public Input<string>? FunctionId { get; set; }

        /// <summary>
        /// The name of the function. Only one of `name` and `namespace_id` should be specified.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace ID associated with this function.
        /// </summary>
        [Input("namespaceId", required: true)]
        public Input<string> NamespaceId { get; set; } = null!;

        /// <summary>
        /// The unique identifier of the project with which the function is associated.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// `region`) The region in which the container exists.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetFunctionInvokeArgs()
        {
        }
        public static new GetFunctionInvokeArgs Empty => new GetFunctionInvokeArgs();
    }


    [OutputType]
    public sealed class GetFunctionResult
    {
        public readonly int CpuLimit;
        public readonly bool Deploy;
        public readonly string Description;
        public readonly string DomainName;
        public readonly ImmutableDictionary<string, string> EnvironmentVariables;
        public readonly string? FunctionId;
        public readonly string Handler;
        public readonly string HttpOption;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int MaxScale;
        public readonly int MemoryLimit;
        public readonly int MinScale;
        public readonly string? Name;
        public readonly string NamespaceId;
        public readonly string OrganizationId;
        public readonly string Privacy;
        public readonly string PrivateNetworkId;
        public readonly string? ProjectId;
        public readonly string? Region;
        public readonly string Runtime;
        public readonly string Sandbox;
        public readonly ImmutableDictionary<string, string> SecretEnvironmentVariables;
        public readonly ImmutableArray<string> Tags;
        public readonly int Timeout;
        public readonly string ZipFile;
        public readonly string ZipHash;

        [OutputConstructor]
        private GetFunctionResult(
            int cpuLimit,

            bool deploy,

            string description,

            string domainName,

            ImmutableDictionary<string, string> environmentVariables,

            string? functionId,

            string handler,

            string httpOption,

            string id,

            int maxScale,

            int memoryLimit,

            int minScale,

            string? name,

            string namespaceId,

            string organizationId,

            string privacy,

            string privateNetworkId,

            string? projectId,

            string? region,

            string runtime,

            string sandbox,

            ImmutableDictionary<string, string> secretEnvironmentVariables,

            ImmutableArray<string> tags,

            int timeout,

            string zipFile,

            string zipHash)
        {
            CpuLimit = cpuLimit;
            Deploy = deploy;
            Description = description;
            DomainName = domainName;
            EnvironmentVariables = environmentVariables;
            FunctionId = functionId;
            Handler = handler;
            HttpOption = httpOption;
            Id = id;
            MaxScale = maxScale;
            MemoryLimit = memoryLimit;
            MinScale = minScale;
            Name = name;
            NamespaceId = namespaceId;
            OrganizationId = organizationId;
            Privacy = privacy;
            PrivateNetworkId = privateNetworkId;
            ProjectId = projectId;
            Region = region;
            Runtime = runtime;
            Sandbox = sandbox;
            SecretEnvironmentVariables = secretEnvironmentVariables;
            Tags = tags;
            Timeout = timeout;
            ZipFile = zipFile;
            ZipHash = zipHash;
        }
    }
}
