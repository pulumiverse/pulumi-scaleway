// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway
{
    [Obsolete(@"scaleway.index/getinstanceserver.getInstanceServer has been deprecated in favor of scaleway.instance/getserver.getServer")]
    public static class GetInstanceServer
    {
        /// <summary>
        /// Gets information about an instance server.
        /// </summary>
        public static Task<GetInstanceServerResult> InvokeAsync(GetInstanceServerArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstanceServerResult>("scaleway:index/getInstanceServer:getInstanceServer", args ?? new GetInstanceServerArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about an instance server.
        /// </summary>
        public static Output<GetInstanceServerResult> Invoke(GetInstanceServerInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceServerResult>("scaleway:index/getInstanceServer:getInstanceServer", args ?? new GetInstanceServerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about an instance server.
        /// </summary>
        public static Output<GetInstanceServerResult> Invoke(GetInstanceServerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceServerResult>("scaleway:index/getInstanceServer:getInstanceServer", args ?? new GetInstanceServerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceServerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The server name. Only one of `Name` and `ServerId` should be specified.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The ID of the project the instance server is associated with.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// The server id. Only one of `Name` and `ServerId` should be specified.
        /// </summary>
        [Input("serverId")]
        public string? ServerId { get; set; }

        /// <summary>
        /// `Zone`) The zone in which the server exists.
        /// </summary>
        [Input("zone")]
        public string? Zone { get; set; }

        public GetInstanceServerArgs()
        {
        }
        public static new GetInstanceServerArgs Empty => new GetInstanceServerArgs();
    }

    public sealed class GetInstanceServerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The server name. Only one of `Name` and `ServerId` should be specified.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project the instance server is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The server id. Only one of `Name` and `ServerId` should be specified.
        /// </summary>
        [Input("serverId")]
        public Input<string>? ServerId { get; set; }

        /// <summary>
        /// `Zone`) The zone in which the server exists.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GetInstanceServerInvokeArgs()
        {
        }
        public static new GetInstanceServerInvokeArgs Empty => new GetInstanceServerInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstanceServerResult
    {
        /// <summary>
        /// The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)
        /// attached to the server.
        /// </summary>
        public readonly ImmutableArray<string> AdditionalVolumeIds;
        public readonly string AdminPasswordEncryptionSshKeyId;
        public readonly string BootType;
        public readonly string BootscriptId;
        /// <summary>
        /// The cloud init script associated with this server.
        /// </summary>
        public readonly string CloudInit;
        /// <summary>
        /// True if dynamic IP in enable on the server.
        /// </summary>
        public readonly bool EnableDynamicIp;
        public readonly ImmutableArray<Outputs.GetInstanceServerFilesystemResult> Filesystems;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The UUID and the label of the base image used by the server.
        /// </summary>
        public readonly string Image;
        public readonly string IpId;
        public readonly ImmutableArray<string> IpIds;
        public readonly string? Name;
        /// <summary>
        /// The ID of the organization the server is associated with.
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.
        /// </summary>
        public readonly string PlacementGroupId;
        /// <summary>
        /// True when the placement group policy is respected.
        /// </summary>
        public readonly bool PlacementGroupPolicyRespected;
        /// <summary>
        /// The list of private IPs of the server.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstanceServerPrivateIpResult> PrivateIps;
        public readonly ImmutableArray<Outputs.GetInstanceServerPrivateNetworkResult> PrivateNetworks;
        public readonly string? ProjectId;
        public readonly bool Protected;
        /// <summary>
        /// The list of public IPs of the server
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstanceServerPublicIpResult> PublicIps;
        public readonly bool ReplaceOnTypeChange;
        public readonly ImmutableArray<Outputs.GetInstanceServerRootVolumeResult> RootVolumes;
        /// <summary>
        /// The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.
        /// </summary>
        public readonly string SecurityGroupId;
        public readonly string? ServerId;
        /// <summary>
        /// The state of the server. Possible values are: `Started`, `Stopped` or `Standby`.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The tags associated with the server.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The commercial type of the server.
        /// You find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The user data associated with the server.
        /// </summary>
        public readonly ImmutableDictionary<string, string> UserData;
        public readonly string? Zone;

        [OutputConstructor]
        private GetInstanceServerResult(
            ImmutableArray<string> additionalVolumeIds,

            string adminPasswordEncryptionSshKeyId,

            string bootType,

            string bootscriptId,

            string cloudInit,

            bool enableDynamicIp,

            ImmutableArray<Outputs.GetInstanceServerFilesystemResult> filesystems,

            string id,

            string image,

            string ipId,

            ImmutableArray<string> ipIds,

            string? name,

            string organizationId,

            string placementGroupId,

            bool placementGroupPolicyRespected,

            ImmutableArray<Outputs.GetInstanceServerPrivateIpResult> privateIps,

            ImmutableArray<Outputs.GetInstanceServerPrivateNetworkResult> privateNetworks,

            string? projectId,

            bool @protected,

            ImmutableArray<Outputs.GetInstanceServerPublicIpResult> publicIps,

            bool replaceOnTypeChange,

            ImmutableArray<Outputs.GetInstanceServerRootVolumeResult> rootVolumes,

            string securityGroupId,

            string? serverId,

            string state,

            ImmutableArray<string> tags,

            string type,

            ImmutableDictionary<string, string> userData,

            string? zone)
        {
            AdditionalVolumeIds = additionalVolumeIds;
            AdminPasswordEncryptionSshKeyId = adminPasswordEncryptionSshKeyId;
            BootType = bootType;
            BootscriptId = bootscriptId;
            CloudInit = cloudInit;
            EnableDynamicIp = enableDynamicIp;
            Filesystems = filesystems;
            Id = id;
            Image = image;
            IpId = ipId;
            IpIds = ipIds;
            Name = name;
            OrganizationId = organizationId;
            PlacementGroupId = placementGroupId;
            PlacementGroupPolicyRespected = placementGroupPolicyRespected;
            PrivateIps = privateIps;
            PrivateNetworks = privateNetworks;
            ProjectId = projectId;
            Protected = @protected;
            PublicIps = publicIps;
            ReplaceOnTypeChange = replaceOnTypeChange;
            RootVolumes = rootVolumes;
            SecurityGroupId = securityGroupId;
            ServerId = serverId;
            State = state;
            Tags = tags;
            Type = type;
            UserData = userData;
            Zone = zone;
        }
    }
}
