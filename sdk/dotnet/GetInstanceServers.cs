// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway
{
    public static class GetInstanceServers
    {
        /// <summary>
        /// Gets information about multiple instance servers.
        /// 
        /// ## Examples
        /// 
        /// ### Basic
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myKey = Scaleway.GetInstanceServers.Invoke(new()
        ///     {
        ///         Name = "myserver",
        ///         Zone = "fr-par-2",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetInstanceServersResult> InvokeAsync(GetInstanceServersArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstanceServersResult>("scaleway:index/getInstanceServers:getInstanceServers", args ?? new GetInstanceServersArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about multiple instance servers.
        /// 
        /// ## Examples
        /// 
        /// ### Basic
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myKey = Scaleway.GetInstanceServers.Invoke(new()
        ///     {
        ///         Name = "myserver",
        ///         Zone = "fr-par-2",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInstanceServersResult> Invoke(GetInstanceServersInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceServersResult>("scaleway:index/getInstanceServers:getInstanceServers", args ?? new GetInstanceServersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceServersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The server name used as filter. Servers with a name like it are listed.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The ID of the project the server is associated with.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        [Input("tags")]
        private List<string>? _tags;

        /// <summary>
        /// List of tags used as filter. Servers with these exact tags are listed.
        /// </summary>
        public List<string> Tags
        {
            get => _tags ?? (_tags = new List<string>());
            set => _tags = value;
        }

        /// <summary>
        /// `zone`) The zone in which servers exist.
        /// </summary>
        [Input("zone")]
        public string? Zone { get; set; }

        public GetInstanceServersArgs()
        {
        }
        public static new GetInstanceServersArgs Empty => new GetInstanceServersArgs();
    }

    public sealed class GetInstanceServersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The server name used as filter. Servers with a name like it are listed.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project the server is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// List of tags used as filter. Servers with these exact tags are listed.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// `zone`) The zone in which servers exist.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GetInstanceServersInvokeArgs()
        {
        }
        public static new GetInstanceServersInvokeArgs Empty => new GetInstanceServersInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstanceServersResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the server.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The organization ID the server is associated with.
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// The ID of the project the server is associated with.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// List of found servers
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstanceServersServerResult> Servers;
        /// <summary>
        /// The tags associated with the server.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The zone in which the server is.
        /// </summary>
        public readonly string Zone;

        [OutputConstructor]
        private GetInstanceServersResult(
            string id,

            string? name,

            string organizationId,

            string projectId,

            ImmutableArray<Outputs.GetInstanceServersServerResult> servers,

            ImmutableArray<string> tags,

            string zone)
        {
            Id = id;
            Name = name;
            OrganizationId = organizationId;
            ProjectId = projectId;
            Servers = servers;
            Tags = tags;
            Zone = zone;
        }
    }
}
