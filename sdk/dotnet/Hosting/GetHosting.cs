// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Hosting
{
    public static class GetHosting
    {
        /// <summary>
        /// Gets information about a webhosting.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Get info by offer domain
        ///     var byDomain = Scaleway.Hosting.GetHosting.Invoke(new()
        ///     {
        ///         Domain = "foobar.com",
        ///     });
        /// 
        ///     // Get info by id
        ///     var byId = Scaleway.Hosting.GetHosting.Invoke(new()
        ///     {
        ///         WebhostingId = "11111111-1111-1111-1111-111111111111",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetHostingResult> InvokeAsync(GetHostingArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetHostingResult>("scaleway:hosting/getHosting:getHosting", args ?? new GetHostingArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a webhosting.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Get info by offer domain
        ///     var byDomain = Scaleway.Hosting.GetHosting.Invoke(new()
        ///     {
        ///         Domain = "foobar.com",
        ///     });
        /// 
        ///     // Get info by id
        ///     var byId = Scaleway.Hosting.GetHosting.Invoke(new()
        ///     {
        ///         WebhostingId = "11111111-1111-1111-1111-111111111111",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetHostingResult> Invoke(GetHostingInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetHostingResult>("scaleway:hosting/getHosting:getHosting", args ?? new GetHostingInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a webhosting.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Get info by offer domain
        ///     var byDomain = Scaleway.Hosting.GetHosting.Invoke(new()
        ///     {
        ///         Domain = "foobar.com",
        ///     });
        /// 
        ///     // Get info by id
        ///     var byId = Scaleway.Hosting.GetHosting.Invoke(new()
        ///     {
        ///         WebhostingId = "11111111-1111-1111-1111-111111111111",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetHostingResult> Invoke(GetHostingInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetHostingResult>("scaleway:hosting/getHosting:getHosting", args ?? new GetHostingInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetHostingArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The hosting domain name. Only one of `Domain` and `WebhostingId` should be specified.
        /// </summary>
        [Input("domain")]
        public string? Domain { get; set; }

        /// <summary>
        /// The ID of the organization the hosting is associated with.
        /// </summary>
        [Input("organizationId")]
        public string? OrganizationId { get; set; }

        /// <summary>
        /// `ProjectId`) The ID of the project the hosting is associated with.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// The hosting id. Only one of `Domain` and `WebhostingId` should be specified.
        /// </summary>
        [Input("webhostingId")]
        public string? WebhostingId { get; set; }

        public GetHostingArgs()
        {
        }
        public static new GetHostingArgs Empty => new GetHostingArgs();
    }

    public sealed class GetHostingInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The hosting domain name. Only one of `Domain` and `WebhostingId` should be specified.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// The ID of the organization the hosting is associated with.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// `ProjectId`) The ID of the project the hosting is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The hosting id. Only one of `Domain` and `WebhostingId` should be specified.
        /// </summary>
        [Input("webhostingId")]
        public Input<string>? WebhostingId { get; set; }

        public GetHostingInvokeArgs()
        {
        }
        public static new GetHostingInvokeArgs Empty => new GetHostingInvokeArgs();
    }


    [OutputType]
    public sealed class GetHostingResult
    {
        public readonly ImmutableArray<Outputs.GetHostingCpanelUrlResult> CpanelUrls;
        public readonly string CreatedAt;
        public readonly string DnsStatus;
        public readonly string? Domain;
        public readonly string Email;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetHostingNameServerResult> NameServers;
        public readonly string OfferId;
        public readonly string OfferName;
        public readonly ImmutableArray<string> OptionIds;
        public readonly ImmutableArray<Outputs.GetHostingOptionResult> Options;
        public readonly string OrganizationId;
        public readonly string PlatformHostname;
        public readonly int PlatformNumber;
        public readonly string? ProjectId;
        public readonly ImmutableArray<Outputs.GetHostingRecordResult> Records;
        public readonly string Region;
        public readonly string Status;
        public readonly ImmutableArray<string> Tags;
        public readonly string UpdatedAt;
        public readonly string Username;
        public readonly string? WebhostingId;

        [OutputConstructor]
        private GetHostingResult(
            ImmutableArray<Outputs.GetHostingCpanelUrlResult> cpanelUrls,

            string createdAt,

            string dnsStatus,

            string? domain,

            string email,

            string id,

            ImmutableArray<Outputs.GetHostingNameServerResult> nameServers,

            string offerId,

            string offerName,

            ImmutableArray<string> optionIds,

            ImmutableArray<Outputs.GetHostingOptionResult> options,

            string organizationId,

            string platformHostname,

            int platformNumber,

            string? projectId,

            ImmutableArray<Outputs.GetHostingRecordResult> records,

            string region,

            string status,

            ImmutableArray<string> tags,

            string updatedAt,

            string username,

            string? webhostingId)
        {
            CpanelUrls = cpanelUrls;
            CreatedAt = createdAt;
            DnsStatus = dnsStatus;
            Domain = domain;
            Email = email;
            Id = id;
            NameServers = nameServers;
            OfferId = offerId;
            OfferName = offerName;
            OptionIds = optionIds;
            Options = options;
            OrganizationId = organizationId;
            PlatformHostname = platformHostname;
            PlatformNumber = platformNumber;
            ProjectId = projectId;
            Records = records;
            Region = region;
            Status = status;
            Tags = tags;
            UpdatedAt = updatedAt;
            Username = username;
            WebhostingId = webhostingId;
        }
    }
}
