// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Iam
{
    public static class GetPolicy
    {
        /// <summary>
        /// Use this data source to get information on an existing IAM policy based on its ID.
        /// For more information refer to the [IAM API documentation](https://developers.scaleway.com/en/products/iam/api/).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Get policy by id
        ///     var findById = Scaleway.Iam.GetPolicy.Invoke(new()
        ///     {
        ///         PolicyId = "11111111-1111-1111-1111-111111111111",
        ///     });
        /// 
        ///     // Get policy by name
        ///     var findByName = Scaleway.Iam.GetPolicy.Invoke(new()
        ///     {
        ///         Name = "my_policy",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPolicyResult> InvokeAsync(GetPolicyArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPolicyResult>("scaleway:iam/getPolicy:getPolicy", args ?? new GetPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information on an existing IAM policy based on its ID.
        /// For more information refer to the [IAM API documentation](https://developers.scaleway.com/en/products/iam/api/).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Get policy by id
        ///     var findById = Scaleway.Iam.GetPolicy.Invoke(new()
        ///     {
        ///         PolicyId = "11111111-1111-1111-1111-111111111111",
        ///     });
        /// 
        ///     // Get policy by name
        ///     var findByName = Scaleway.Iam.GetPolicy.Invoke(new()
        ///     {
        ///         Name = "my_policy",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPolicyResult> Invoke(GetPolicyInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPolicyResult>("scaleway:iam/getPolicy:getPolicy", args ?? new GetPolicyInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information on an existing IAM policy based on its ID.
        /// For more information refer to the [IAM API documentation](https://developers.scaleway.com/en/products/iam/api/).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Get policy by id
        ///     var findById = Scaleway.Iam.GetPolicy.Invoke(new()
        ///     {
        ///         PolicyId = "11111111-1111-1111-1111-111111111111",
        ///     });
        /// 
        ///     // Get policy by name
        ///     var findByName = Scaleway.Iam.GetPolicy.Invoke(new()
        ///     {
        ///         Name = "my_policy",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPolicyResult> Invoke(GetPolicyInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPolicyResult>("scaleway:iam/getPolicy:getPolicy", args ?? new GetPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the IAM policy.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The ID of the IAM policy.
        /// 
        /// &gt; **Note** You must specify at least one: `Name` and/or `PolicyId`.
        /// </summary>
        [Input("policyId")]
        public string? PolicyId { get; set; }

        public GetPolicyArgs()
        {
        }
        public static new GetPolicyArgs Empty => new GetPolicyArgs();
    }

    public sealed class GetPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the IAM policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the IAM policy.
        /// 
        /// &gt; **Note** You must specify at least one: `Name` and/or `PolicyId`.
        /// </summary>
        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        public GetPolicyInvokeArgs()
        {
        }
        public static new GetPolicyInvokeArgs Empty => new GetPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetPolicyResult
    {
        /// <summary>
        /// ID of the application the policy is linked to
        /// </summary>
        public readonly string ApplicationId;
        /// <summary>
        /// The date and time of the creation of the policy.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The description of the IAM policy.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Whether the policy is editable.
        /// </summary>
        public readonly bool Editable;
        /// <summary>
        /// ID of the group the policy is linked to
        /// </summary>
        public readonly string GroupId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Name;
        /// <summary>
        /// If the policy doesn't apply to a principal.
        /// </summary>
        public readonly bool NoPrincipal;
        /// <summary>
        /// ID of organization scoped to the rule.
        /// </summary>
        public readonly string OrganizationId;
        public readonly string? PolicyId;
        /// <summary>
        /// List of rules in the policy.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPolicyRuleResult> Rules;
        /// <summary>
        /// The tags associated with the IAM policy.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The date and time of the last update of the policy.
        /// </summary>
        public readonly string UpdatedAt;
        /// <summary>
        /// ID of the user the policy is linked to
        /// </summary>
        public readonly string UserId;

        [OutputConstructor]
        private GetPolicyResult(
            string applicationId,

            string createdAt,

            string description,

            bool editable,

            string groupId,

            string id,

            string? name,

            bool noPrincipal,

            string organizationId,

            string? policyId,

            ImmutableArray<Outputs.GetPolicyRuleResult> rules,

            ImmutableArray<string> tags,

            string updatedAt,

            string userId)
        {
            ApplicationId = applicationId;
            CreatedAt = createdAt;
            Description = description;
            Editable = editable;
            GroupId = groupId;
            Id = id;
            Name = name;
            NoPrincipal = noPrincipal;
            OrganizationId = organizationId;
            PolicyId = policyId;
            Rules = rules;
            Tags = tags;
            UpdatedAt = updatedAt;
            UserId = userId;
        }
    }
}
