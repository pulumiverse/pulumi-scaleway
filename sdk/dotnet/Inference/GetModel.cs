// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Inference
{
    public static class GetModel
    {
        /// <summary>
        /// The `scaleway.inference.Model` data source allows you to retrieve information about an inference model available in the Scaleway Inference API, either by providing the model's `Name` or its `ModelId`.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myModel = Scaleway.Inference.GetModel.Invoke(new()
        ///     {
        ///         Name = "meta/llama-3.1-8b-instruct:fp8",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetModelResult> InvokeAsync(GetModelArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetModelResult>("scaleway:inference/getModel:getModel", args ?? new GetModelArgs(), options.WithDefaults());

        /// <summary>
        /// The `scaleway.inference.Model` data source allows you to retrieve information about an inference model available in the Scaleway Inference API, either by providing the model's `Name` or its `ModelId`.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myModel = Scaleway.Inference.GetModel.Invoke(new()
        ///     {
        ///         Name = "meta/llama-3.1-8b-instruct:fp8",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetModelResult> Invoke(GetModelInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetModelResult>("scaleway:inference/getModel:getModel", args ?? new GetModelInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `scaleway.inference.Model` data source allows you to retrieve information about an inference model available in the Scaleway Inference API, either by providing the model's `Name` or its `ModelId`.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myModel = Scaleway.Inference.GetModel.Invoke(new()
        ///     {
        ///         Name = "meta/llama-3.1-8b-instruct:fp8",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetModelResult> Invoke(GetModelInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetModelResult>("scaleway:inference/getModel:getModel", args ?? new GetModelInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetModelArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the model to retrieve. Must be a valid UUID with locality (i.e., Scaleway's zoned UUID format).
        /// </summary>
        [Input("modelId")]
        public string? ModelId { get; set; }

        /// <summary>
        /// The fully qualified name of the model to look up (e.g., "meta/llama-3.1-8b-instruct:fp8"). The provider will search for a model with an exact name match in the selected region and project.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("url")]
        public string? Url { get; set; }

        public GetModelArgs()
        {
        }
        public static new GetModelArgs Empty => new GetModelArgs();
    }

    public sealed class GetModelInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the model to retrieve. Must be a valid UUID with locality (i.e., Scaleway's zoned UUID format).
        /// </summary>
        [Input("modelId")]
        public Input<string>? ModelId { get; set; }

        /// <summary>
        /// The fully qualified name of the model to look up (e.g., "meta/llama-3.1-8b-instruct:fp8"). The provider will search for a model with an exact name match in the selected region and project.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("url")]
        public Input<string>? Url { get; set; }

        public GetModelInvokeArgs()
        {
        }
        public static new GetModelInvokeArgs Empty => new GetModelInvokeArgs();
    }


    [OutputType]
    public sealed class GetModelResult
    {
        public readonly string CreatedAt;
        /// <summary>
        /// A textual description of the model (if available).
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Whether the model requires end-user license agreement acceptance before use.
        /// </summary>
        public readonly bool HasEula;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? ModelId;
        public readonly string? Name;
        /// <summary>
        /// List of supported node types and their quantization options. Each entry contains:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetModelNodesSupportResult> NodesSupports;
        /// <summary>
        /// Size, in bits, of the model parameters.
        /// </summary>
        public readonly int ParameterSizeBits;
        public readonly string ProjectId;
        public readonly string Region;
        public readonly string Secret;
        /// <summary>
        /// Total size, in bytes, of the model archive.
        /// </summary>
        public readonly int SizeBytes;
        /// <summary>
        /// The current status of the model (e.g., ready, error, etc.).
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Tags associated with the model.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        public readonly string UpdatedAt;
        public readonly string? Url;

        [OutputConstructor]
        private GetModelResult(
            string createdAt,

            string description,

            bool hasEula,

            string id,

            string? modelId,

            string? name,

            ImmutableArray<Outputs.GetModelNodesSupportResult> nodesSupports,

            int parameterSizeBits,

            string projectId,

            string region,

            string secret,

            int sizeBytes,

            string status,

            ImmutableArray<string> tags,

            string updatedAt,

            string? url)
        {
            CreatedAt = createdAt;
            Description = description;
            HasEula = hasEula;
            Id = id;
            ModelId = modelId;
            Name = name;
            NodesSupports = nodesSupports;
            ParameterSizeBits = parameterSizeBits;
            ProjectId = projectId;
            Region = region;
            Secret = secret;
            SizeBytes = sizeBytes;
            Status = status;
            Tags = tags;
            UpdatedAt = updatedAt;
            Url = url;
        }
    }
}
