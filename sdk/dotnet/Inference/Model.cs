// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Inference
{
    /// <summary>
    /// The scaleway.inference.Model resource allows you to upload and manage inference models in the Scaleway Inference ecosystem. Once registered, a model can be used in any scaleway.inference.Deployment resource.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Scaleway.Inference.Model("test", new()
    ///     {
    ///         Name = "my-awesome-model",
    ///         Url = "https://huggingface.co/agentica-org/DeepCoder-14B-Preview",
    ///         Secret = "my-secret-token",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Deploy your own model on your managed inference
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myModel = new Scaleway.Inference.Model("my_model", new()
    ///     {
    ///         Name = "my-awesome-model",
    ///         Url = "https://huggingface.co/agentica-org/DeepCoder-14B-Preview",
    ///         Secret = "my-secret-token",
    ///     });
    /// 
    ///     var myDeployment = new Scaleway.Inference.Deployment("my_deployment", new()
    ///     {
    ///         Name = "test-inference-deployment-basic",
    ///         NodeType = "H100",
    ///         ModelId = myModel.Id,
    ///         PublicEndpoint = new Scaleway.Inference.Inputs.DeploymentPublicEndpointArgs
    ///         {
    ///             IsEnabled = true,
    ///         },
    ///         AcceptEula = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Models can be imported using, `{region}/{id}`, as shown below:
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:inference/model:Model my_model fr-par/11111111-1111-1111-1111-111111111111
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:inference/model:Model")]
    public partial class Model : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The date and time of the creation of the model
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// A textual description of the model (if available).
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Whether the model requires end-user license agreement acceptance before use.
        /// </summary>
        [Output("hasEula")]
        public Output<bool> HasEula { get; private set; } = null!;

        /// <summary>
        /// The name of the model. This must be unique within the project.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of supported node types and their quantization options. Each entry contains:
        /// </summary>
        [Output("nodesSupports")]
        public Output<ImmutableArray<Outputs.ModelNodesSupport>> NodesSupports { get; private set; } = null!;

        /// <summary>
        /// Size, in bits, of the model parameters.
        /// </summary>
        [Output("parameterSizeBits")]
        public Output<int> ParameterSizeBits { get; private set; } = null!;

        /// <summary>
        /// `ProjectId`) The ID of the project the deployment is associated with.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// `Region`) The region in which the deployment is created.
        /// </summary>
        [Output("region")]
        public Output<string?> Region { get; private set; } = null!;

        /// <summary>
        /// Authentication token used to pull the model from a private or gated URL (e.g., a Hugging Face access token with read permission).
        /// </summary>
        [Output("secret")]
        public Output<string?> Secret { get; private set; } = null!;

        /// <summary>
        /// Total size, in bytes, of the model archive.
        /// </summary>
        [Output("sizeBytes")]
        public Output<int> SizeBytes { get; private set; } = null!;

        /// <summary>
        /// The current status of the model (e.g., ready, error, etc.).
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Tags associated with the model.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The date and time of the last update of the model
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The HTTPS source URL from which the model will be downloaded. This is typically a Hugging Face repository URL (e.g., https://huggingface.co/agentica-org/DeepCoder-14B-Preview). The URL must be publicly accessible or require valid credentials via `Secret`
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a Model resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Model(string name, ModelArgs args, CustomResourceOptions? options = null)
            : base("scaleway:inference/model:Model", name, args ?? new ModelArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Model(string name, Input<string> id, ModelState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:inference/model:Model", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                AdditionalSecretOutputs =
                {
                    "secret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Model resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Model Get(string name, Input<string> id, ModelState? state = null, CustomResourceOptions? options = null)
        {
            return new Model(name, id, state, options);
        }
    }

    public sealed class ModelArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the model. This must be unique within the project.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// `ProjectId`) The ID of the project the deployment is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// `Region`) The region in which the deployment is created.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// Authentication token used to pull the model from a private or gated URL (e.g., a Hugging Face access token with read permission).
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The HTTPS source URL from which the model will be downloaded. This is typically a Hugging Face repository URL (e.g., https://huggingface.co/agentica-org/DeepCoder-14B-Preview). The URL must be publicly accessible or require valid credentials via `Secret`
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public ModelArgs()
        {
        }
        public static new ModelArgs Empty => new ModelArgs();
    }

    public sealed class ModelState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The date and time of the creation of the model
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// A textual description of the model (if available).
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the model requires end-user license agreement acceptance before use.
        /// </summary>
        [Input("hasEula")]
        public Input<bool>? HasEula { get; set; }

        /// <summary>
        /// The name of the model. This must be unique within the project.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nodesSupports")]
        private InputList<Inputs.ModelNodesSupportGetArgs>? _nodesSupports;

        /// <summary>
        /// List of supported node types and their quantization options. Each entry contains:
        /// </summary>
        public InputList<Inputs.ModelNodesSupportGetArgs> NodesSupports
        {
            get => _nodesSupports ?? (_nodesSupports = new InputList<Inputs.ModelNodesSupportGetArgs>());
            set => _nodesSupports = value;
        }

        /// <summary>
        /// Size, in bits, of the model parameters.
        /// </summary>
        [Input("parameterSizeBits")]
        public Input<int>? ParameterSizeBits { get; set; }

        /// <summary>
        /// `ProjectId`) The ID of the project the deployment is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// `Region`) The region in which the deployment is created.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// Authentication token used to pull the model from a private or gated URL (e.g., a Hugging Face access token with read permission).
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Total size, in bytes, of the model archive.
        /// </summary>
        [Input("sizeBytes")]
        public Input<int>? SizeBytes { get; set; }

        /// <summary>
        /// The current status of the model (e.g., ready, error, etc.).
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags associated with the model.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The date and time of the last update of the model
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// The HTTPS source URL from which the model will be downloaded. This is typically a Hugging Face repository URL (e.g., https://huggingface.co/agentica-org/DeepCoder-14B-Preview). The URL must be publicly accessible or require valid credentials via `Secret`
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public ModelState()
        {
        }
        public static new ModelState Empty => new ModelState();
    }
}
