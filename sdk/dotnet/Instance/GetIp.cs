// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Instance
{
    public static class GetIp
    {
        /// <summary>
        /// Gets information about an instance IP.
        /// </summary>
        public static Task<GetIpResult> InvokeAsync(GetIpArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIpResult>("scaleway:instance/getIp:getIp", args ?? new GetIpArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about an instance IP.
        /// </summary>
        public static Output<GetIpResult> Invoke(GetIpInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIpResult>("scaleway:instance/getIp:getIp", args ?? new GetIpInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about an instance IP.
        /// </summary>
        public static Output<GetIpResult> Invoke(GetIpInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetIpResult>("scaleway:instance/getIp:getIp", args ?? new GetIpInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIpArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The IPv4 address to retrieve
        /// Only one of `Address` and `Id` should be specified.
        /// </summary>
        [Input("address")]
        public string? Address { get; set; }

        /// <summary>
        /// The ID of the IP address to retrieve
        /// Only one of `Address` and `Id` should be specified.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        public GetIpArgs()
        {
        }
        public static new GetIpArgs Empty => new GetIpArgs();
    }

    public sealed class GetIpInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The IPv4 address to retrieve
        /// Only one of `Address` and `Id` should be specified.
        /// </summary>
        [Input("address")]
        public Input<string>? Address { get; set; }

        /// <summary>
        /// The ID of the IP address to retrieve
        /// Only one of `Address` and `Id` should be specified.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        public GetIpInvokeArgs()
        {
        }
        public static new GetIpInvokeArgs Empty => new GetIpInvokeArgs();
    }


    [OutputType]
    public sealed class GetIpResult
    {
        /// <summary>
        /// The IP address.
        /// </summary>
        public readonly string? Address;
        /// <summary>
        /// The ID of the IP.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The organization ID the IP is associated with.
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// The IP Prefix.
        /// </summary>
        public readonly string Prefix;
        public readonly string ProjectId;
        /// <summary>
        /// The reverse dns attached to this IP
        /// </summary>
        public readonly string Reverse;
        public readonly string ServerId;
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The type of the IP
        /// </summary>
        public readonly string Type;
        public readonly string Zone;

        [OutputConstructor]
        private GetIpResult(
            string? address,

            string? id,

            string organizationId,

            string prefix,

            string projectId,

            string reverse,

            string serverId,

            ImmutableArray<string> tags,

            string type,

            string zone)
        {
            Address = address;
            Id = id;
            OrganizationId = organizationId;
            Prefix = prefix;
            ProjectId = projectId;
            Reverse = reverse;
            ServerId = serverId;
            Tags = tags;
            Type = type;
            Zone = zone;
        }
    }
}
