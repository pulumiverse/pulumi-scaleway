// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Instance
{
    public static class GetSecurityGroup
    {
        /// <summary>
        /// Gets information about a Security Group.
        /// </summary>
        public static Task<GetSecurityGroupResult> InvokeAsync(GetSecurityGroupArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecurityGroupResult>("scaleway:instance/getSecurityGroup:getSecurityGroup", args ?? new GetSecurityGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a Security Group.
        /// </summary>
        public static Output<GetSecurityGroupResult> Invoke(GetSecurityGroupInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityGroupResult>("scaleway:instance/getSecurityGroup:getSecurityGroup", args ?? new GetSecurityGroupInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a Security Group.
        /// </summary>
        public static Output<GetSecurityGroupResult> Invoke(GetSecurityGroupInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityGroupResult>("scaleway:instance/getSecurityGroup:getSecurityGroup", args ?? new GetSecurityGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecurityGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The security group name. Only one of `name` and `security_group_id` should be specified.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The ID of the project the security group is associated with.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// The security group id. Only one of `name` and `security_group_id` should be specified.
        /// </summary>
        [Input("securityGroupId")]
        public string? SecurityGroupId { get; set; }

        /// <summary>
        /// `zone`) The zone in which the security group exists.
        /// </summary>
        [Input("zone")]
        public string? Zone { get; set; }

        public GetSecurityGroupArgs()
        {
        }
        public static new GetSecurityGroupArgs Empty => new GetSecurityGroupArgs();
    }

    public sealed class GetSecurityGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The security group name. Only one of `name` and `security_group_id` should be specified.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project the security group is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The security group id. Only one of `name` and `security_group_id` should be specified.
        /// </summary>
        [Input("securityGroupId")]
        public Input<string>? SecurityGroupId { get; set; }

        /// <summary>
        /// `zone`) The zone in which the security group exists.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GetSecurityGroupInvokeArgs()
        {
        }
        public static new GetSecurityGroupInvokeArgs Empty => new GetSecurityGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecurityGroupResult
    {
        public readonly string Description;
        public readonly bool EnableDefaultSecurity;
        public readonly bool ExternalRules;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The default policy on incoming traffic. Possible values are: `accept` or `drop`.
        /// </summary>
        public readonly string InboundDefaultPolicy;
        /// <summary>
        /// A list of inbound rule to add to the security group. (Structure is documented below.)
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityGroupInboundRuleResult> InboundRules;
        public readonly string? Name;
        /// <summary>
        /// The ID of the organization the security group is associated with.
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// The default policy on outgoing traffic. Possible values are: `accept` or `drop`.
        /// </summary>
        public readonly string OutboundDefaultPolicy;
        /// <summary>
        /// A list of outbound rule to add to the security group. (Structure is documented below.)
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityGroupOutboundRuleResult> OutboundRules;
        public readonly string? ProjectId;
        public readonly string? SecurityGroupId;
        public readonly bool Stateful;
        public readonly ImmutableArray<string> Tags;
        public readonly string? Zone;

        [OutputConstructor]
        private GetSecurityGroupResult(
            string description,

            bool enableDefaultSecurity,

            bool externalRules,

            string id,

            string inboundDefaultPolicy,

            ImmutableArray<Outputs.GetSecurityGroupInboundRuleResult> inboundRules,

            string? name,

            string organizationId,

            string outboundDefaultPolicy,

            ImmutableArray<Outputs.GetSecurityGroupOutboundRuleResult> outboundRules,

            string? projectId,

            string? securityGroupId,

            bool stateful,

            ImmutableArray<string> tags,

            string? zone)
        {
            Description = description;
            EnableDefaultSecurity = enableDefaultSecurity;
            ExternalRules = externalRules;
            Id = id;
            InboundDefaultPolicy = inboundDefaultPolicy;
            InboundRules = inboundRules;
            Name = name;
            OrganizationId = organizationId;
            OutboundDefaultPolicy = outboundDefaultPolicy;
            OutboundRules = outboundRules;
            ProjectId = projectId;
            SecurityGroupId = securityGroupId;
            Stateful = stateful;
            Tags = tags;
            Zone = zone;
        }
    }
}
