// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Instance
{
    public static class GetServerType
    {
        /// <summary>
        /// Gets information about a server type.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var pro2_s = Scaleway.Instance.GetServerType.Invoke(new()
        ///     {
        ///         Name = "PRO2-S",
        ///         Zone = "nl-ams-1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetServerTypeResult> InvokeAsync(GetServerTypeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerTypeResult>("scaleway:instance/getServerType:getServerType", args ?? new GetServerTypeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a server type.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var pro2_s = Scaleway.Instance.GetServerType.Invoke(new()
        ///     {
        ///         Name = "PRO2-S",
        ///         Zone = "nl-ams-1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServerTypeResult> Invoke(GetServerTypeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerTypeResult>("scaleway:instance/getServerType:getServerType", args ?? new GetServerTypeInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a server type.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var pro2_s = Scaleway.Instance.GetServerType.Invoke(new()
        ///     {
        ///         Name = "PRO2-S",
        ///         Zone = "nl-ams-1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServerTypeResult> Invoke(GetServerTypeInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerTypeResult>("scaleway:instance/getServerType:getServerType", args ?? new GetServerTypeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerTypeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the server type.
        /// Only one of `Name` and `SnapshotId` should be specified.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// `Zone`) The zone of the server type (to check the availability of the server type for example).
        /// </summary>
        [Input("zone")]
        public string? Zone { get; set; }

        public GetServerTypeArgs()
        {
        }
        public static new GetServerTypeArgs Empty => new GetServerTypeArgs();
    }

    public sealed class GetServerTypeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the server type.
        /// Only one of `Name` and `SnapshotId` should be specified.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// `Zone`) The zone of the server type (to check the availability of the server type for example).
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GetServerTypeInvokeArgs()
        {
        }
        public static new GetServerTypeInvokeArgs Empty => new GetServerTypeInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerTypeResult
    {
        /// <summary>
        /// The architecture of the server type.
        /// </summary>
        public readonly string Arch;
        /// <summary>
        /// Whether the server type is available in the zone.
        /// </summary>
        public readonly string Availability;
        /// <summary>
        /// The specific capabilities of the server type.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServerTypeCapabilityResult> Capabilities;
        /// <summary>
        /// The number of CPU cores of the server type.
        /// </summary>
        public readonly int Cpu;
        /// <summary>
        /// Whether the server type will soon reach End Of Service.
        /// </summary>
        public readonly bool EndOfService;
        /// <summary>
        /// The number of GPUs of the server type.
        /// </summary>
        public readonly int Gpu;
        /// <summary>
        /// The hourly price of the server type (in euros).
        /// </summary>
        public readonly double HourlyPrice;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        /// <summary>
        /// The network specifications of the server type.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServerTypeNetworkResult> Networks;
        /// <summary>
        /// The amount of RAM of the server type (in bytes).
        /// </summary>
        public readonly int Ram;
        /// <summary>
        /// The specifications of volumes allowed for the server type.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServerTypeVolumeResult> Volumes;
        public readonly string? Zone;

        [OutputConstructor]
        private GetServerTypeResult(
            string arch,

            string availability,

            ImmutableArray<Outputs.GetServerTypeCapabilityResult> capabilities,

            int cpu,

            bool endOfService,

            int gpu,

            double hourlyPrice,

            string id,

            string name,

            ImmutableArray<Outputs.GetServerTypeNetworkResult> networks,

            int ram,

            ImmutableArray<Outputs.GetServerTypeVolumeResult> volumes,

            string? zone)
        {
            Arch = arch;
            Availability = availability;
            Capabilities = capabilities;
            Cpu = cpu;
            EndOfService = endOfService;
            Gpu = gpu;
            HourlyPrice = hourlyPrice;
            Id = id;
            Name = name;
            Networks = networks;
            Ram = ram;
            Volumes = volumes;
            Zone = zone;
        }
    }
}
