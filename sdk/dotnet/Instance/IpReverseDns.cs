// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Instance
{
    /// <summary>
    /// Manages Scaleway compute Instance IPs Reverse DNS.
    /// 
    /// Please check our [guide](https://www.scaleway.com/en/docs/compute/instances/how-to/configure-reverse-dns/) for more details
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var serverIp = new Scaleway.Instance.Ip("server_ip");
    /// 
    ///     var tfA = new Scaleway.Domain.Record("tf_A", new()
    ///     {
    ///         DnsZone = "scaleway.com",
    ///         Name = "www",
    ///         Type = "A",
    ///         Data = serverIp.Address,
    ///         Ttl = 3600,
    ///         Priority = 1,
    ///     });
    /// 
    ///     var reverse = new Scaleway.Instance.IpReverseDns("reverse", new()
    ///     {
    ///         IpId = serverIp.Id,
    ///         Reverse = "www.scaleway.com",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// IPs reverse DNS can be imported using the `{zone}/{id}`, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:instance/ipReverseDns:IpReverseDns reverse fr-par-1/11111111-1111-1111-1111-111111111111
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:instance/ipReverseDns:IpReverseDns")]
    public partial class IpReverseDns : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The IP ID
        /// </summary>
        [Output("ipId")]
        public Output<string> IpId { get; private set; } = null!;

        /// <summary>
        /// The reverse DNS for this IP.
        /// </summary>
        [Output("reverse")]
        public Output<string> Reverse { get; private set; } = null!;

        /// <summary>
        /// `zone`) The zone in which the IP should be reserved.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a IpReverseDns resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IpReverseDns(string name, IpReverseDnsArgs args, CustomResourceOptions? options = null)
            : base("scaleway:instance/ipReverseDns:IpReverseDns", name, args ?? new IpReverseDnsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IpReverseDns(string name, Input<string> id, IpReverseDnsState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:instance/ipReverseDns:IpReverseDns", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "scaleway:index/instanceIpReverseDns:InstanceIpReverseDns" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IpReverseDns resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IpReverseDns Get(string name, Input<string> id, IpReverseDnsState? state = null, CustomResourceOptions? options = null)
        {
            return new IpReverseDns(name, id, state, options);
        }
    }

    public sealed class IpReverseDnsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The IP ID
        /// </summary>
        [Input("ipId", required: true)]
        public Input<string> IpId { get; set; } = null!;

        /// <summary>
        /// The reverse DNS for this IP.
        /// </summary>
        [Input("reverse", required: true)]
        public Input<string> Reverse { get; set; } = null!;

        /// <summary>
        /// `zone`) The zone in which the IP should be reserved.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public IpReverseDnsArgs()
        {
        }
        public static new IpReverseDnsArgs Empty => new IpReverseDnsArgs();
    }

    public sealed class IpReverseDnsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The IP ID
        /// </summary>
        [Input("ipId")]
        public Input<string>? IpId { get; set; }

        /// <summary>
        /// The reverse DNS for this IP.
        /// </summary>
        [Input("reverse")]
        public Input<string>? Reverse { get; set; }

        /// <summary>
        /// `zone`) The zone in which the IP should be reserved.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public IpReverseDnsState()
        {
        }
        public static new IpReverseDnsState Empty => new IpReverseDnsState();
    }
}
