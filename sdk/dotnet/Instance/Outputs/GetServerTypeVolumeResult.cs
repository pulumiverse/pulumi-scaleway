// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Instance.Outputs
{

    [OutputType]
    public sealed class GetServerTypeVolumeResult
    {
        /// <summary>
        /// Whether block storage is allowed on the server type.
        /// </summary>
        public readonly bool BlockStorage;
        /// <summary>
        /// The maximum size in bytes per local volume allowed on the server type.
        /// </summary>
        public readonly int MaxSizePerLocalVolume;
        /// <summary>
        /// The maximum total size in bytes of volumes allowed on the server type.
        /// </summary>
        public readonly int MaxSizeTotal;
        /// <summary>
        /// The minimum size in bytes per local volume allowed on the server type.
        /// </summary>
        public readonly int MinSizePerLocalVolume;
        /// <summary>
        /// The minimum total size in bytes of volumes allowed on the server type.
        /// </summary>
        public readonly int MinSizeTotal;
        /// <summary>
        /// The maximum size in bytes of the scratch volume allowed on the server type.
        /// </summary>
        public readonly int ScratchStorageMaxSize;

        [OutputConstructor]
        private GetServerTypeVolumeResult(
            bool blockStorage,

            int maxSizePerLocalVolume,

            int maxSizeTotal,

            int minSizePerLocalVolume,

            int minSizeTotal,

            int scratchStorageMaxSize)
        {
            BlockStorage = blockStorage;
            MaxSizePerLocalVolume = maxSizePerLocalVolume;
            MaxSizeTotal = maxSizeTotal;
            MinSizePerLocalVolume = minSizePerLocalVolume;
            MinSizeTotal = minSizeTotal;
            ScratchStorageMaxSize = scratchStorageMaxSize;
        }
    }
}
