// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Iot
{
    public static class GetHub
    {
        /// <summary>
        /// Gets information about an IOT Hub.
        /// </summary>
        public static Task<GetHubResult> InvokeAsync(GetHubArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetHubResult>("scaleway:iot/getHub:getHub", args ?? new GetHubArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about an IOT Hub.
        /// </summary>
        public static Output<GetHubResult> Invoke(GetHubInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetHubResult>("scaleway:iot/getHub:getHub", args ?? new GetHubInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about an IOT Hub.
        /// </summary>
        public static Output<GetHubResult> Invoke(GetHubInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetHubResult>("scaleway:iot/getHub:getHub", args ?? new GetHubInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetHubArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Hub ID.
        /// Only one of the `name` and `hub_id` should be specified.
        /// </summary>
        [Input("hubId")]
        public string? HubId { get; set; }

        /// <summary>
        /// The name of the Hub.
        /// Only one of the `name` and `hub_id` should be specified.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The ID of the project the hub is associated with.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// `region`) The region in which the hub exists.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetHubArgs()
        {
        }
        public static new GetHubArgs Empty => new GetHubArgs();
    }

    public sealed class GetHubInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Hub ID.
        /// Only one of the `name` and `hub_id` should be specified.
        /// </summary>
        [Input("hubId")]
        public Input<string>? HubId { get; set; }

        /// <summary>
        /// The name of the Hub.
        /// Only one of the `name` and `hub_id` should be specified.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project the hub is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// `region`) The region in which the hub exists.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetHubInvokeArgs()
        {
        }
        public static new GetHubInvokeArgs Empty => new GetHubInvokeArgs();
    }


    [OutputType]
    public sealed class GetHubResult
    {
        public readonly int ConnectedDeviceCount;
        public readonly string CreatedAt;
        public readonly bool DeviceAutoProvisioning;
        public readonly int DeviceCount;
        public readonly bool DisableEvents;
        public readonly bool Enabled;
        public readonly string Endpoint;
        public readonly string EventsTopicPrefix;
        public readonly string HubCa;
        public readonly string HubCaChallenge;
        public readonly string? HubId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string MqttCa;
        public readonly string MqttCaUrl;
        public readonly string? Name;
        public readonly string OrganizationId;
        public readonly string ProductPlan;
        public readonly string? ProjectId;
        public readonly string? Region;
        public readonly string Status;
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetHubResult(
            int connectedDeviceCount,

            string createdAt,

            bool deviceAutoProvisioning,

            int deviceCount,

            bool disableEvents,

            bool enabled,

            string endpoint,

            string eventsTopicPrefix,

            string hubCa,

            string hubCaChallenge,

            string? hubId,

            string id,

            string mqttCa,

            string mqttCaUrl,

            string? name,

            string organizationId,

            string productPlan,

            string? projectId,

            string? region,

            string status,

            string updatedAt)
        {
            ConnectedDeviceCount = connectedDeviceCount;
            CreatedAt = createdAt;
            DeviceAutoProvisioning = deviceAutoProvisioning;
            DeviceCount = deviceCount;
            DisableEvents = disableEvents;
            Enabled = enabled;
            Endpoint = endpoint;
            EventsTopicPrefix = eventsTopicPrefix;
            HubCa = hubCa;
            HubCaChallenge = hubCaChallenge;
            HubId = hubId;
            Id = id;
            MqttCa = mqttCa;
            MqttCaUrl = mqttCaUrl;
            Name = name;
            OrganizationId = organizationId;
            ProductPlan = productPlan;
            ProjectId = projectId;
            Region = region;
            Status = status;
            UpdatedAt = updatedAt;
        }
    }
}
