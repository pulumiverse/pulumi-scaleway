// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### Database Route
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var mainHub = new Scaleway.Iot.Hub("main", new()
    ///     {
    ///         Name = "main",
    ///         ProductPlan = "plan_shared",
    ///     });
    /// 
    ///     var iot = new Scaleway.Databases.Instance("iot", new()
    ///     {
    ///         Name = "iot",
    ///         NodeType = "db-dev-s",
    ///         Engine = "PostgreSQL-12",
    ///         UserName = "root",
    ///         Password = "T3stP4ssw0rdD0N0tUs3!",
    ///     });
    /// 
    ///     var main = new Scaleway.Iot.Route("main", new()
    ///     {
    ///         Name = "default",
    ///         HubId = mainHub.Id,
    ///         Topic = "#",
    ///         Database = new Scaleway.Iot.Inputs.RouteDatabaseArgs
    ///         {
    ///             Query = @"INSERT INTO measurements(
    /// 	push_time,
    /// 	report_time,
    /// 	station_id,
    /// 	temperature,
    /// 	humidity
    /// ) VALUES (
    /// 	NOW(),
    /// 	TIMESTAMP 'epoch' + (($PAYLOAD::jsonb-&gt;'last_reported')::integer * INTERVAL '1 second'),
    /// 	($PAYLOAD::jsonb-&gt;'station_id')::uuid,
    /// 	($PAYLOAD::jsonb-&gt;'temperature')::decimal,
    /// 	($PAYLOAD::jsonb-&gt;'humidity'):decimal:
    /// );
    /// ",
    ///             Host = iot.EndpointIp,
    ///             Port = iot.EndpointPort,
    ///             Dbname = "rdb",
    ///             Username = iot.UserName,
    ///             Password = iot.Password,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### S3 Route
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var mainHub = new Scaleway.Iot.Hub("main", new()
    ///     {
    ///         Name = "main",
    ///         ProductPlan = "plan_shared",
    ///     });
    /// 
    ///     var mainBucket = new Scaleway.Object.Bucket("main", new()
    ///     {
    ///         Region = "fr-par",
    ///         Name = "my_awesome-bucket",
    ///     });
    /// 
    ///     var main = new Scaleway.Iot.Route("main", new()
    ///     {
    ///         Name = "main",
    ///         HubId = mainHub.Id,
    ///         Topic = "#",
    ///         S3 = new Scaleway.Iot.Inputs.RouteS3Args
    ///         {
    ///             BucketRegion = mainBucket.Region,
    ///             BucketName = mainBucket.Name,
    ///             ObjectPrefix = "foo",
    ///             Strategy = "per_topic",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Rest Route
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var mainHub = new Scaleway.Iot.Hub("main", new()
    ///     {
    ///         Name = "main",
    ///         ProductPlan = "plan_shared",
    ///     });
    /// 
    ///     var main = new Scaleway.Iot.Route("main", new()
    ///     {
    ///         Name = "main",
    ///         HubId = mainHub.Id,
    ///         Topic = "#",
    ///         Rest = new Scaleway.Iot.Inputs.RouteRestArgs
    ///         {
    ///             Verb = "get",
    ///             Uri = "http://scaleway.com",
    ///             Headers = 
    ///             {
    ///                 { "X-awesome-header", "my-awesome-value" },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// IoT Routes can be imported using the `{region}/{id}`, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:index/iotRoute:IotRoute route01 fr-par/11111111-1111-1111-1111-111111111111
    /// ```
    /// </summary>
    [Obsolete(@"scaleway.index/iotroute.IotRoute has been deprecated in favor of scaleway.iot/route.Route")]
    [ScalewayResourceType("scaleway:index/iotRoute:IotRoute")]
    public partial class IotRoute : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The date and time the Route was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Configuration block for the database routes. See  [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
        /// </summary>
        [Output("database")]
        public Output<Outputs.IotRouteDatabase?> Database { get; private set; } = null!;

        /// <summary>
        /// The hub ID to which the Route will be attached to.
        /// </summary>
        [Output("hubId")]
        public Output<string> HubId { get; private set; } = null!;

        /// <summary>
        /// The name of the IoT Route you want to create (e.g. `my-route`).
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// (Defaults to provider `region`) The region in which the Route is attached to.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Configuration block for the rest routes. See [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
        /// </summary>
        [Output("rest")]
        public Output<Outputs.IotRouteRest?> Rest { get; private set; } = null!;

        /// <summary>
        /// Configuration block for the S3 routes. See [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
        /// </summary>
        [Output("s3")]
        public Output<Outputs.IotRouteS3?> S3 { get; private set; } = null!;

        /// <summary>
        /// The topic the Route subscribes to, wildcards allowed (e.g. `thelab/+/temperature/#`).
        /// </summary>
        [Output("topic")]
        public Output<string> Topic { get; private set; } = null!;


        /// <summary>
        /// Create a IotRoute resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IotRoute(string name, IotRouteArgs args, CustomResourceOptions? options = null)
            : base("scaleway:index/iotRoute:IotRoute", name, args ?? new IotRouteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IotRoute(string name, Input<string> id, IotRouteState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:index/iotRoute:IotRoute", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IotRoute resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IotRoute Get(string name, Input<string> id, IotRouteState? state = null, CustomResourceOptions? options = null)
        {
            return new IotRoute(name, id, state, options);
        }
    }

    public sealed class IotRouteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration block for the database routes. See  [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
        /// </summary>
        [Input("database")]
        public Input<Inputs.IotRouteDatabaseArgs>? Database { get; set; }

        /// <summary>
        /// The hub ID to which the Route will be attached to.
        /// </summary>
        [Input("hubId", required: true)]
        public Input<string> HubId { get; set; } = null!;

        /// <summary>
        /// The name of the IoT Route you want to create (e.g. `my-route`).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (Defaults to provider `region`) The region in which the Route is attached to.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Configuration block for the rest routes. See [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
        /// </summary>
        [Input("rest")]
        public Input<Inputs.IotRouteRestArgs>? Rest { get; set; }

        /// <summary>
        /// Configuration block for the S3 routes. See [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
        /// </summary>
        [Input("s3")]
        public Input<Inputs.IotRouteS3Args>? S3 { get; set; }

        /// <summary>
        /// The topic the Route subscribes to, wildcards allowed (e.g. `thelab/+/temperature/#`).
        /// </summary>
        [Input("topic", required: true)]
        public Input<string> Topic { get; set; } = null!;

        public IotRouteArgs()
        {
        }
        public static new IotRouteArgs Empty => new IotRouteArgs();
    }

    public sealed class IotRouteState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The date and time the Route was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Configuration block for the database routes. See  [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
        /// </summary>
        [Input("database")]
        public Input<Inputs.IotRouteDatabaseGetArgs>? Database { get; set; }

        /// <summary>
        /// The hub ID to which the Route will be attached to.
        /// </summary>
        [Input("hubId")]
        public Input<string>? HubId { get; set; }

        /// <summary>
        /// The name of the IoT Route you want to create (e.g. `my-route`).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (Defaults to provider `region`) The region in which the Route is attached to.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Configuration block for the rest routes. See [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
        /// </summary>
        [Input("rest")]
        public Input<Inputs.IotRouteRestGetArgs>? Rest { get; set; }

        /// <summary>
        /// Configuration block for the S3 routes. See [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
        /// </summary>
        [Input("s3")]
        public Input<Inputs.IotRouteS3GetArgs>? S3 { get; set; }

        /// <summary>
        /// The topic the Route subscribes to, wildcards allowed (e.g. `thelab/+/temperature/#`).
        /// </summary>
        [Input("topic")]
        public Input<string>? Topic { get; set; }

        public IotRouteState()
        {
        }
        public static new IotRouteState Empty => new IotRouteState();
    }
}
