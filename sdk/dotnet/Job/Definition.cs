// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Job
{
    /// <summary>
    /// Creates and manages a Scaleway Serverless Job Definition. For more information, see the [Go API documentation](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/jobs/v1alpha1).
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Scaleway.Job.Definition("main", new()
    ///     {
    ///         Name = "testjob",
    ///         CpuLimit = 140,
    ///         MemoryLimit = 256,
    ///         ImageUri = "docker.io/alpine:latest",
    ///         Command = "ls",
    ///         Timeout = "10m",
    ///         Env = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///         Cron = new Scaleway.Job.Inputs.DefinitionCronArgs
    ///         {
    ///             Schedule = "5 4 1 * *",
    ///             Timezone = "Europe/Paris",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Serverless Jobs can be imported using the `{region}/{id}`, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:job/definition:Definition job fr-par/11111111-1111-1111-1111-111111111111
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:job/definition:Definition")]
    public partial class Definition : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The command that will be run in the container if specified.
        /// </summary>
        [Output("command")]
        public Output<string?> Command { get; private set; } = null!;

        /// <summary>
        /// The amount of vCPU computing resources to allocate to each container running the job.
        /// </summary>
        [Output("cpuLimit")]
        public Output<int> CpuLimit { get; private set; } = null!;

        /// <summary>
        /// The cron configuration
        /// </summary>
        [Output("cron")]
        public Output<Outputs.DefinitionCron?> Cron { get; private set; } = null!;

        /// <summary>
        /// The description of the job
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The environment variables of the container.
        /// </summary>
        [Output("env")]
        public Output<ImmutableDictionary<string, string>?> Env { get; private set; } = null!;

        /// <summary>
        /// The uri of the container image that will be used for the job run.
        /// </summary>
        [Output("imageUri")]
        public Output<string?> ImageUri { get; private set; } = null!;

        /// <summary>
        /// The memory computing resources in MB to allocate to each container running the job.
        /// </summary>
        [Output("memoryLimit")]
        public Output<int> MemoryLimit { get; private set; } = null!;

        /// <summary>
        /// The name of the job.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// `project_id`) The ID of the project the Job is associated with.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// `region`) The region of the Job.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The job run timeout, in Go Time format (ex: `2h30m25s`)
        /// </summary>
        [Output("timeout")]
        public Output<string> Timeout { get; private set; } = null!;


        /// <summary>
        /// Create a Definition resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Definition(string name, DefinitionArgs args, CustomResourceOptions? options = null)
            : base("scaleway:job/definition:Definition", name, args ?? new DefinitionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Definition(string name, Input<string> id, DefinitionState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:job/definition:Definition", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "scaleway:index/jobDefinition:JobDefinition" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Definition resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Definition Get(string name, Input<string> id, DefinitionState? state = null, CustomResourceOptions? options = null)
        {
            return new Definition(name, id, state, options);
        }
    }

    public sealed class DefinitionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The command that will be run in the container if specified.
        /// </summary>
        [Input("command")]
        public Input<string>? Command { get; set; }

        /// <summary>
        /// The amount of vCPU computing resources to allocate to each container running the job.
        /// </summary>
        [Input("cpuLimit", required: true)]
        public Input<int> CpuLimit { get; set; } = null!;

        /// <summary>
        /// The cron configuration
        /// </summary>
        [Input("cron")]
        public Input<Inputs.DefinitionCronArgs>? Cron { get; set; }

        /// <summary>
        /// The description of the job
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("env")]
        private InputMap<string>? _env;

        /// <summary>
        /// The environment variables of the container.
        /// </summary>
        public InputMap<string> Env
        {
            get => _env ?? (_env = new InputMap<string>());
            set => _env = value;
        }

        /// <summary>
        /// The uri of the container image that will be used for the job run.
        /// </summary>
        [Input("imageUri")]
        public Input<string>? ImageUri { get; set; }

        /// <summary>
        /// The memory computing resources in MB to allocate to each container running the job.
        /// </summary>
        [Input("memoryLimit", required: true)]
        public Input<int> MemoryLimit { get; set; } = null!;

        /// <summary>
        /// The name of the job.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// `project_id`) The ID of the project the Job is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// `region`) The region of the Job.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The job run timeout, in Go Time format (ex: `2h30m25s`)
        /// </summary>
        [Input("timeout")]
        public Input<string>? Timeout { get; set; }

        public DefinitionArgs()
        {
        }
        public static new DefinitionArgs Empty => new DefinitionArgs();
    }

    public sealed class DefinitionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The command that will be run in the container if specified.
        /// </summary>
        [Input("command")]
        public Input<string>? Command { get; set; }

        /// <summary>
        /// The amount of vCPU computing resources to allocate to each container running the job.
        /// </summary>
        [Input("cpuLimit")]
        public Input<int>? CpuLimit { get; set; }

        /// <summary>
        /// The cron configuration
        /// </summary>
        [Input("cron")]
        public Input<Inputs.DefinitionCronGetArgs>? Cron { get; set; }

        /// <summary>
        /// The description of the job
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("env")]
        private InputMap<string>? _env;

        /// <summary>
        /// The environment variables of the container.
        /// </summary>
        public InputMap<string> Env
        {
            get => _env ?? (_env = new InputMap<string>());
            set => _env = value;
        }

        /// <summary>
        /// The uri of the container image that will be used for the job run.
        /// </summary>
        [Input("imageUri")]
        public Input<string>? ImageUri { get; set; }

        /// <summary>
        /// The memory computing resources in MB to allocate to each container running the job.
        /// </summary>
        [Input("memoryLimit")]
        public Input<int>? MemoryLimit { get; set; }

        /// <summary>
        /// The name of the job.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// `project_id`) The ID of the project the Job is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// `region`) The region of the Job.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The job run timeout, in Go Time format (ex: `2h30m25s`)
        /// </summary>
        [Input("timeout")]
        public Input<string>? Timeout { get; set; }

        public DefinitionState()
        {
        }
        public static new DefinitionState Empty => new DefinitionState();
    }
}
