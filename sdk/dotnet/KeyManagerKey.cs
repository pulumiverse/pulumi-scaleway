// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway
{
    /// <summary>
    /// Provides a Scaleway Key Manager Key resource.\
    /// This resource allows you to create and manage cryptographic keys in Scaleway Key Manager (KMS).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Scaleway.KeyManagerKey("main", new()
    ///     {
    ///         Name = "my-kms-key",
    ///         Region = "fr-par",
    ///         ProjectId = "your-project-id",
    ///         Usage = "symmetric_encryption",
    ///         Description = "Key for encrypting secrets",
    ///         Tags = new[]
    ///         {
    ///             "env:prod",
    ///             "kms",
    ///         },
    ///         Unprotected = true,
    ///         RotationPolicy = new Scaleway.Inputs.KeyManagerKeyRotationPolicyArgs
    ///         {
    ///             RotationPeriod = "720h",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Notes
    /// 
    /// - **Protection**: By default, keys are protected and cannot be deleted. To allow deletion, set `unprotected = true` when creating the key.
    /// - **Rotation Policy**: The `rotation_policy` block allows you to set automatic rotation for your key.
    /// - **Origin**: The `origin` argument is optional and defaults to `scaleway_kms`. Use `external` if you want to import an external key (see Scaleway documentation for details).
    /// - **Project and Region**: If not specified, `project_id` and `region` will default to the provider configuration.
    /// 
    /// ## Example: Asymmetric Key
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var asym = new Scaleway.KeyManagerKey("asym", new()
    ///     {
    ///         Name = "asymmetric-key",
    ///         Region = "fr-par",
    ///         Usage = "asymmetric_signing",
    ///         Description = "Key for signing documents",
    ///         Unprotected = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// You can import a key using its ID and region:
    /// 
    /// ```sh
    /// $ pulumi import scaleway:index/keyManagerKey:KeyManagerKey main fr-par/11111111-2222-3333-4444-555555555555
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:index/keyManagerKey:KeyManagerKey")]
    public partial class KeyManagerKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The date and time when the key was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// – A description for the key.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether the key is locked.
        /// </summary>
        [Output("locked")]
        public Output<bool> Locked { get; private set; } = null!;

        /// <summary>
        /// The name of the key.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// – The origin of the key. Valid values are:
        /// </summary>
        [Output("origin")]
        public Output<string?> Origin { get; private set; } = null!;

        /// <summary>
        /// – The ID of the project the key belongs to.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Whether the key is protected from deletion.
        /// </summary>
        [Output("protected")]
        public Output<bool> Protected { get; private set; } = null!;

        /// <summary>
        /// The region in which to create the key (e.g., `fr-par`).
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The date and time when the key was last rotated.
        /// </summary>
        [Output("rotatedAt")]
        public Output<string> RotatedAt { get; private set; } = null!;

        /// <summary>
        /// The number of times the key has been rotated.
        /// </summary>
        [Output("rotationCount")]
        public Output<int> RotationCount { get; private set; } = null!;

        /// <summary>
        /// – Rotation policy for the key:
        /// </summary>
        [Output("rotationPolicy")]
        public Output<Outputs.KeyManagerKeyRotationPolicy?> RotationPolicy { get; private set; } = null!;

        /// <summary>
        /// The state of the key (e.g., `enabled`).
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// – A list of tags to assign to the key.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// – If `true`, the key can be deleted. Defaults to `false` (protected).
        /// </summary>
        [Output("unprotected")]
        public Output<bool?> Unprotected { get; private set; } = null!;

        /// <summary>
        /// The date and time when the key was last updated.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// – The usage of the key. Valid values are:
        /// </summary>
        [Output("usage")]
        public Output<string> Usage { get; private set; } = null!;


        /// <summary>
        /// Create a KeyManagerKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KeyManagerKey(string name, KeyManagerKeyArgs args, CustomResourceOptions? options = null)
            : base("scaleway:index/keyManagerKey:KeyManagerKey", name, args ?? new KeyManagerKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KeyManagerKey(string name, Input<string> id, KeyManagerKeyState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:index/keyManagerKey:KeyManagerKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KeyManagerKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KeyManagerKey Get(string name, Input<string> id, KeyManagerKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new KeyManagerKey(name, id, state, options);
        }
    }

    public sealed class KeyManagerKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// – A description for the key.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the key.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// – The origin of the key. Valid values are:
        /// </summary>
        [Input("origin")]
        public Input<string>? Origin { get; set; }

        /// <summary>
        /// – The ID of the project the key belongs to.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The region in which to create the key (e.g., `fr-par`).
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// – Rotation policy for the key:
        /// </summary>
        [Input("rotationPolicy")]
        public Input<Inputs.KeyManagerKeyRotationPolicyArgs>? RotationPolicy { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// – A list of tags to assign to the key.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// – If `true`, the key can be deleted. Defaults to `false` (protected).
        /// </summary>
        [Input("unprotected")]
        public Input<bool>? Unprotected { get; set; }

        /// <summary>
        /// – The usage of the key. Valid values are:
        /// </summary>
        [Input("usage", required: true)]
        public Input<string> Usage { get; set; } = null!;

        public KeyManagerKeyArgs()
        {
        }
        public static new KeyManagerKeyArgs Empty => new KeyManagerKeyArgs();
    }

    public sealed class KeyManagerKeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The date and time when the key was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// – A description for the key.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the key is locked.
        /// </summary>
        [Input("locked")]
        public Input<bool>? Locked { get; set; }

        /// <summary>
        /// The name of the key.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// – The origin of the key. Valid values are:
        /// </summary>
        [Input("origin")]
        public Input<string>? Origin { get; set; }

        /// <summary>
        /// – The ID of the project the key belongs to.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Whether the key is protected from deletion.
        /// </summary>
        [Input("protected")]
        public Input<bool>? Protected { get; set; }

        /// <summary>
        /// The region in which to create the key (e.g., `fr-par`).
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The date and time when the key was last rotated.
        /// </summary>
        [Input("rotatedAt")]
        public Input<string>? RotatedAt { get; set; }

        /// <summary>
        /// The number of times the key has been rotated.
        /// </summary>
        [Input("rotationCount")]
        public Input<int>? RotationCount { get; set; }

        /// <summary>
        /// – Rotation policy for the key:
        /// </summary>
        [Input("rotationPolicy")]
        public Input<Inputs.KeyManagerKeyRotationPolicyGetArgs>? RotationPolicy { get; set; }

        /// <summary>
        /// The state of the key (e.g., `enabled`).
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// – A list of tags to assign to the key.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// – If `true`, the key can be deleted. Defaults to `false` (protected).
        /// </summary>
        [Input("unprotected")]
        public Input<bool>? Unprotected { get; set; }

        /// <summary>
        /// The date and time when the key was last updated.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// – The usage of the key. Valid values are:
        /// </summary>
        [Input("usage")]
        public Input<string>? Usage { get; set; }

        public KeyManagerKeyState()
        {
        }
        public static new KeyManagerKeyState Empty => new KeyManagerKeyState();
    }
}
