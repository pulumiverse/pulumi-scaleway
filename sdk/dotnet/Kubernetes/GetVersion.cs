// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Kubernetes
{
    public static class GetVersion
    {
        /// <summary>
        /// Gets information about a Kubernetes version.
        /// For more information, see the [API documentation](https://developers.scaleway.com/en/products/k8s/api).
        /// 
        /// You can also use the [scaleway-cli](https://github.com/scaleway/scaleway-cli) with `scw k8s version list` to list all available versions.
        /// 
        /// ## Example Usage
        /// 
        /// ### Use the latest version
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var latest = Scaleway.Kubernetes.GetVersion.Invoke(new()
        ///     {
        ///         Name = "latest",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Use a specific version
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byName = Scaleway.Kubernetes.GetVersion.Invoke(new()
        ///     {
        ///         Name = "1.26.0",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetVersionResult> InvokeAsync(GetVersionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVersionResult>("scaleway:kubernetes/getVersion:getVersion", args ?? new GetVersionArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a Kubernetes version.
        /// For more information, see the [API documentation](https://developers.scaleway.com/en/products/k8s/api).
        /// 
        /// You can also use the [scaleway-cli](https://github.com/scaleway/scaleway-cli) with `scw k8s version list` to list all available versions.
        /// 
        /// ## Example Usage
        /// 
        /// ### Use the latest version
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var latest = Scaleway.Kubernetes.GetVersion.Invoke(new()
        ///     {
        ///         Name = "latest",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Use a specific version
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byName = Scaleway.Kubernetes.GetVersion.Invoke(new()
        ///     {
        ///         Name = "1.26.0",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVersionResult> Invoke(GetVersionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVersionResult>("scaleway:kubernetes/getVersion:getVersion", args ?? new GetVersionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a Kubernetes version.
        /// For more information, see the [API documentation](https://developers.scaleway.com/en/products/k8s/api).
        /// 
        /// You can also use the [scaleway-cli](https://github.com/scaleway/scaleway-cli) with `scw k8s version list` to list all available versions.
        /// 
        /// ## Example Usage
        /// 
        /// ### Use the latest version
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var latest = Scaleway.Kubernetes.GetVersion.Invoke(new()
        ///     {
        ///         Name = "latest",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Use a specific version
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byName = Scaleway.Kubernetes.GetVersion.Invoke(new()
        ///     {
        ///         Name = "1.26.0",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVersionResult> Invoke(GetVersionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVersionResult>("scaleway:kubernetes/getVersion:getVersion", args ?? new GetVersionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVersionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Kubernetes version.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// `Region`) The region in which the version exists.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetVersionArgs()
        {
        }
        public static new GetVersionArgs Empty => new GetVersionArgs();
    }

    public sealed class GetVersionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Kubernetes version.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// `Region`) The region in which the version exists.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetVersionInvokeArgs()
        {
        }
        public static new GetVersionInvokeArgs Empty => new GetVersionInvokeArgs();
    }


    [OutputType]
    public sealed class GetVersionResult
    {
        /// <summary>
        /// The list of supported Container Network Interface (CNI) plugins for this version.
        /// </summary>
        public readonly ImmutableArray<string> AvailableCnis;
        /// <summary>
        /// The list of supported container runtimes for this version.
        /// </summary>
        public readonly ImmutableArray<string> AvailableContainerRuntimes;
        /// <summary>
        /// The list of supported feature gates for this version.
        /// </summary>
        public readonly ImmutableArray<string> AvailableFeatureGates;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly string? Region;

        [OutputConstructor]
        private GetVersionResult(
            ImmutableArray<string> availableCnis,

            ImmutableArray<string> availableContainerRuntimes,

            ImmutableArray<string> availableFeatureGates,

            string id,

            string name,

            string? region)
        {
            AvailableCnis = availableCnis;
            AvailableContainerRuntimes = availableContainerRuntimes;
            AvailableFeatureGates = availableFeatureGates;
            Id = id;
            Name = name;
            Region = region;
        }
    }
}
