// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Loadbalancers
{
    public static class GetCertificate
    {
        /// <summary>
        /// Get information about Scaleway Load Balancer certificates.
        /// 
        /// This data source can prove useful when a module accepts a Load Balancer certificate as an input variable and needs to, for example, determine the security of a certificate for the frontend associated with your domain.
        /// 
        /// For more information, see the [main documentation](https://www.scaleway.com/en/docs/load-balancer/how-to/add-certificate/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-certificate).
        /// 
        /// ## Examples
        /// </summary>
        public static Task<GetCertificateResult> InvokeAsync(GetCertificateArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCertificateResult>("scaleway:loadbalancers/getCertificate:getCertificate", args ?? new GetCertificateArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about Scaleway Load Balancer certificates.
        /// 
        /// This data source can prove useful when a module accepts a Load Balancer certificate as an input variable and needs to, for example, determine the security of a certificate for the frontend associated with your domain.
        /// 
        /// For more information, see the [main documentation](https://www.scaleway.com/en/docs/load-balancer/how-to/add-certificate/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-certificate).
        /// 
        /// ## Examples
        /// </summary>
        public static Output<GetCertificateResult> Invoke(GetCertificateInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificateResult>("scaleway:loadbalancers/getCertificate:getCertificate", args ?? new GetCertificateInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about Scaleway Load Balancer certificates.
        /// 
        /// This data source can prove useful when a module accepts a Load Balancer certificate as an input variable and needs to, for example, determine the security of a certificate for the frontend associated with your domain.
        /// 
        /// For more information, see the [main documentation](https://www.scaleway.com/en/docs/load-balancer/how-to/add-certificate/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-certificate).
        /// 
        /// ## Examples
        /// </summary>
        public static Output<GetCertificateResult> Invoke(GetCertificateInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificateResult>("scaleway:loadbalancers/getCertificate:getCertificate", args ?? new GetCertificateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The certificate ID.
        /// - Only one of `name` and `certificate_id` should be specified.
        /// </summary>
        [Input("certificateId")]
        public string? CertificateId { get; set; }

        /// <summary>
        /// The Load Balancer ID this certificate is attached to.
        /// </summary>
        [Input("lbId")]
        public string? LbId { get; set; }

        /// <summary>
        /// The name of the Load Balancer certificate.
        /// - When using a certificate `name` you should specify the `lb-id`
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetCertificateArgs()
        {
        }
        public static new GetCertificateArgs Empty => new GetCertificateArgs();
    }

    public sealed class GetCertificateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The certificate ID.
        /// - Only one of `name` and `certificate_id` should be specified.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// The Load Balancer ID this certificate is attached to.
        /// </summary>
        [Input("lbId")]
        public Input<string>? LbId { get; set; }

        /// <summary>
        /// The name of the Load Balancer certificate.
        /// - When using a certificate `name` you should specify the `lb-id`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetCertificateInvokeArgs()
        {
        }
        public static new GetCertificateInvokeArgs Empty => new GetCertificateInvokeArgs();
    }


    [OutputType]
    public sealed class GetCertificateResult
    {
        public readonly string? CertificateId;
        public readonly string CommonName;
        public readonly ImmutableArray<Outputs.GetCertificateCustomCertificateResult> CustomCertificates;
        public readonly string Fingerprint;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? LbId;
        public readonly ImmutableArray<Outputs.GetCertificateLetsencryptResult> Letsencrypts;
        public readonly string? Name;
        public readonly string NotValidAfter;
        public readonly string NotValidBefore;
        public readonly string Status;
        public readonly ImmutableArray<string> SubjectAlternativeNames;

        [OutputConstructor]
        private GetCertificateResult(
            string? certificateId,

            string commonName,

            ImmutableArray<Outputs.GetCertificateCustomCertificateResult> customCertificates,

            string fingerprint,

            string id,

            string? lbId,

            ImmutableArray<Outputs.GetCertificateLetsencryptResult> letsencrypts,

            string? name,

            string notValidAfter,

            string notValidBefore,

            string status,

            ImmutableArray<string> subjectAlternativeNames)
        {
            CertificateId = certificateId;
            CommonName = commonName;
            CustomCertificates = customCertificates;
            Fingerprint = fingerprint;
            Id = id;
            LbId = lbId;
            Letsencrypts = letsencrypts;
            Name = name;
            NotValidAfter = notValidAfter;
            NotValidBefore = notValidBefore;
            Status = status;
            SubjectAlternativeNames = subjectAlternativeNames;
        }
    }
}
