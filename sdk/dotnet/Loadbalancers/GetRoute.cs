// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Loadbalancers
{
    public static class GetRoute
    {
        /// <summary>
        /// Get information about Scaleway Load Balancer routes.
        /// 
        /// For more information, see the [main documentation](https://www.scaleway.com/en/docs/load-balancer/how-to/create-manage-routes/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-route).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// using Scaleway = Pulumiverse.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ip01 = new Scaleway.Loadbalancers.Ip("ip01");
        /// 
        ///     var lb01 = new Scaleway.Loadbalancers.LoadBalancer("lb01", new()
        ///     {
        ///         IpId = ip01.Id,
        ///         Name = "test-lb",
        ///         Type = "lb-s",
        ///     });
        /// 
        ///     var bkd01 = new Scaleway.Loadbalancers.Backend("bkd01", new()
        ///     {
        ///         LbId = lb01.Id,
        ///         ForwardProtocol = "tcp",
        ///         ForwardPort = 80,
        ///         ProxyProtocol = "none",
        ///     });
        /// 
        ///     var frt01 = new Scaleway.Loadbalancers.Frontend("frt01", new()
        ///     {
        ///         LbId = lb01.Id,
        ///         BackendId = bkd01.Id,
        ///         InboundPort = 80,
        ///     });
        /// 
        ///     var rt01 = new Scaleway.Loadbalancers.Route("rt01", new()
        ///     {
        ///         FrontendId = frt01.Id,
        ///         BackendId = bkd01.Id,
        ///         MatchSni = "sni.scaleway.com",
        ///     });
        /// 
        ///     var byID = Scaleway.Loadbalancers.GetRoute.Invoke(new()
        ///     {
        ///         RouteId = rt01.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRouteResult> InvokeAsync(GetRouteArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRouteResult>("scaleway:loadbalancers/getRoute:getRoute", args ?? new GetRouteArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about Scaleway Load Balancer routes.
        /// 
        /// For more information, see the [main documentation](https://www.scaleway.com/en/docs/load-balancer/how-to/create-manage-routes/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-route).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// using Scaleway = Pulumiverse.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ip01 = new Scaleway.Loadbalancers.Ip("ip01");
        /// 
        ///     var lb01 = new Scaleway.Loadbalancers.LoadBalancer("lb01", new()
        ///     {
        ///         IpId = ip01.Id,
        ///         Name = "test-lb",
        ///         Type = "lb-s",
        ///     });
        /// 
        ///     var bkd01 = new Scaleway.Loadbalancers.Backend("bkd01", new()
        ///     {
        ///         LbId = lb01.Id,
        ///         ForwardProtocol = "tcp",
        ///         ForwardPort = 80,
        ///         ProxyProtocol = "none",
        ///     });
        /// 
        ///     var frt01 = new Scaleway.Loadbalancers.Frontend("frt01", new()
        ///     {
        ///         LbId = lb01.Id,
        ///         BackendId = bkd01.Id,
        ///         InboundPort = 80,
        ///     });
        /// 
        ///     var rt01 = new Scaleway.Loadbalancers.Route("rt01", new()
        ///     {
        ///         FrontendId = frt01.Id,
        ///         BackendId = bkd01.Id,
        ///         MatchSni = "sni.scaleway.com",
        ///     });
        /// 
        ///     var byID = Scaleway.Loadbalancers.GetRoute.Invoke(new()
        ///     {
        ///         RouteId = rt01.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRouteResult> Invoke(GetRouteInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteResult>("scaleway:loadbalancers/getRoute:getRoute", args ?? new GetRouteInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about Scaleway Load Balancer routes.
        /// 
        /// For more information, see the [main documentation](https://www.scaleway.com/en/docs/load-balancer/how-to/create-manage-routes/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-route).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// using Scaleway = Pulumiverse.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ip01 = new Scaleway.Loadbalancers.Ip("ip01");
        /// 
        ///     var lb01 = new Scaleway.Loadbalancers.LoadBalancer("lb01", new()
        ///     {
        ///         IpId = ip01.Id,
        ///         Name = "test-lb",
        ///         Type = "lb-s",
        ///     });
        /// 
        ///     var bkd01 = new Scaleway.Loadbalancers.Backend("bkd01", new()
        ///     {
        ///         LbId = lb01.Id,
        ///         ForwardProtocol = "tcp",
        ///         ForwardPort = 80,
        ///         ProxyProtocol = "none",
        ///     });
        /// 
        ///     var frt01 = new Scaleway.Loadbalancers.Frontend("frt01", new()
        ///     {
        ///         LbId = lb01.Id,
        ///         BackendId = bkd01.Id,
        ///         InboundPort = 80,
        ///     });
        /// 
        ///     var rt01 = new Scaleway.Loadbalancers.Route("rt01", new()
        ///     {
        ///         FrontendId = frt01.Id,
        ///         BackendId = bkd01.Id,
        ///         MatchSni = "sni.scaleway.com",
        ///     });
        /// 
        ///     var byID = Scaleway.Loadbalancers.GetRoute.Invoke(new()
        ///     {
        ///         RouteId = rt01.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRouteResult> Invoke(GetRouteInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteResult>("scaleway:loadbalancers/getRoute:getRoute", args ?? new GetRouteInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRouteArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The route ID.
        /// </summary>
        [Input("routeId", required: true)]
        public string RouteId { get; set; } = null!;

        public GetRouteArgs()
        {
        }
        public static new GetRouteArgs Empty => new GetRouteArgs();
    }

    public sealed class GetRouteInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The route ID.
        /// </summary>
        [Input("routeId", required: true)]
        public Input<string> RouteId { get; set; } = null!;

        public GetRouteInvokeArgs()
        {
        }
        public static new GetRouteInvokeArgs Empty => new GetRouteInvokeArgs();
    }


    [OutputType]
    public sealed class GetRouteResult
    {
        public readonly string BackendId;
        public readonly string CreatedAt;
        public readonly string FrontendId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string MatchHostHeader;
        public readonly string MatchSni;
        public readonly string RouteId;
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetRouteResult(
            string backendId,

            string createdAt,

            string frontendId,

            string id,

            string matchHostHeader,

            string matchSni,

            string routeId,

            string updatedAt)
        {
            BackendId = backendId;
            CreatedAt = createdAt;
            FrontendId = frontendId;
            Id = id;
            MatchHostHeader = matchHostHeader;
            MatchSni = matchSni;
            RouteId = routeId;
            UpdatedAt = updatedAt;
        }
    }
}
