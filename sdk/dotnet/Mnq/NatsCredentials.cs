// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Mnq
{
    /// <summary>
    /// Creates and manages Scaleway Messaging and Queuing NATS credentials.
    /// For further information, see
    /// our [main documentation](https://www.scaleway.com/en/docs/messaging/reference-content/nats-overview/).
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Scaleway.Mnq.NatsAccount("main", new()
    ///     {
    ///         Name = "nats-account",
    ///     });
    /// 
    ///     var mainNatsCredentials = new Scaleway.Mnq.NatsCredentials("main", new()
    ///     {
    ///         AccountId = main.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Namespaces can be imported using `{region}/{id}`, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:mnq/natsCredentials:NatsCredentials main fr-par/11111111111111111111111111111111
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:mnq/natsCredentials:NatsCredentials")]
    public partial class NatsCredentials : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the NATS account the credentials are generated from
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// The content of the credentials file.
        /// </summary>
        [Output("file")]
        public Output<string> File { get; private set; } = null!;

        /// <summary>
        /// The unique name of the NATS credentials.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// `Region`). The region
        /// in which the account exists.
        /// </summary>
        [Output("region")]
        public Output<string?> Region { get; private set; } = null!;


        /// <summary>
        /// Create a NatsCredentials resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NatsCredentials(string name, NatsCredentialsArgs args, CustomResourceOptions? options = null)
            : base("scaleway:mnq/natsCredentials:NatsCredentials", name, args ?? new NatsCredentialsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NatsCredentials(string name, Input<string> id, NatsCredentialsState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:mnq/natsCredentials:NatsCredentials", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "scaleway:index/mnqNatsCredentials:MnqNatsCredentials" },
                },
                AdditionalSecretOutputs =
                {
                    "file",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NatsCredentials resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NatsCredentials Get(string name, Input<string> id, NatsCredentialsState? state = null, CustomResourceOptions? options = null)
        {
            return new NatsCredentials(name, id, state, options);
        }
    }

    public sealed class NatsCredentialsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the NATS account the credentials are generated from
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// The unique name of the NATS credentials.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// `Region`). The region
        /// in which the account exists.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public NatsCredentialsArgs()
        {
        }
        public static new NatsCredentialsArgs Empty => new NatsCredentialsArgs();
    }

    public sealed class NatsCredentialsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the NATS account the credentials are generated from
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("file")]
        private Input<string>? _file;

        /// <summary>
        /// The content of the credentials file.
        /// </summary>
        public Input<string>? File
        {
            get => _file;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _file = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The unique name of the NATS credentials.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// `Region`). The region
        /// in which the account exists.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public NatsCredentialsState()
        {
        }
        public static new NatsCredentialsState Empty => new NatsCredentialsState();
    }
}
