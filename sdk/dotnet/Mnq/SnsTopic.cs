// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Mnq
{
    /// <summary>
    /// Manage Scaleway Messaging and queuing SNS topics.
    /// For further information, see
    /// our [main documentation](https://www.scaleway.com/en/docs/messaging/how-to/create-manage-topics/).
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Scaleway.Mnq.Sns("main");
    /// 
    ///     var mainSnsCredentials = new Scaleway.Mnq.SnsCredentials("main", new()
    ///     {
    ///         ProjectId = main.ProjectId,
    ///         Permissions = new Scaleway.Mnq.Inputs.SnsCredentialsPermissionsArgs
    ///         {
    ///             CanManage = true,
    ///         },
    ///     });
    /// 
    ///     var topic = new Scaleway.Mnq.SnsTopic("topic", new()
    ///     {
    ///         ProjectId = main.ProjectId,
    ///         Name = "my-topic",
    ///         AccessKey = mainSnsCredentials.AccessKey,
    ///         SecretKey = mainSnsCredentials.SecretKey,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// SNS topics can be imported using `{region}/{project-id}/{topic-name}`, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:mnq/snsTopic:SnsTopic main fr-par/11111111111111111111111111111111/my-topic
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:mnq/snsTopic:SnsTopic")]
    public partial class SnsTopic : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The access key of the SNS credentials.
        /// </summary>
        [Output("accessKey")]
        public Output<string> AccessKey { get; private set; } = null!;

        /// <summary>
        /// The ARN of the topic
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to enable content-based deduplication.
        /// </summary>
        [Output("contentBasedDeduplication")]
        public Output<bool> ContentBasedDeduplication { get; private set; } = null!;

        /// <summary>
        /// Whether the topic is a FIFO topic. If true, the topic name must end with .fifo.
        /// </summary>
        [Output("fifoTopic")]
        public Output<bool> FifoTopic { get; private set; } = null!;

        /// <summary>
        /// The unique name of the SNS topic. Either `name` or `name_prefix` is required. Conflicts with `name_prefix`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        /// </summary>
        [Output("namePrefix")]
        public Output<string> NamePrefix { get; private set; } = null!;

        /// <summary>
        /// Owner of the SNS topic, should have format 'project-${project_id}'
        /// </summary>
        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;

        /// <summary>
        /// `project_id`) The ID of the Project in which SNS is enabled.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// `region`). The region
        /// in which SNS is enabled.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The secret key of the SNS credentials.
        /// </summary>
        [Output("secretKey")]
        public Output<string> SecretKey { get; private set; } = null!;

        /// <summary>
        /// The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
        /// </summary>
        [Output("snsEndpoint")]
        public Output<string?> SnsEndpoint { get; private set; } = null!;


        /// <summary>
        /// Create a SnsTopic resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SnsTopic(string name, SnsTopicArgs args, CustomResourceOptions? options = null)
            : base("scaleway:mnq/snsTopic:SnsTopic", name, args ?? new SnsTopicArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SnsTopic(string name, Input<string> id, SnsTopicState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:mnq/snsTopic:SnsTopic", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "scaleway:index/mnqSnsTopic:MnqSnsTopic" },
                },
                AdditionalSecretOutputs =
                {
                    "accessKey",
                    "secretKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SnsTopic resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SnsTopic Get(string name, Input<string> id, SnsTopicState? state = null, CustomResourceOptions? options = null)
        {
            return new SnsTopic(name, id, state, options);
        }
    }

    public sealed class SnsTopicArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessKey", required: true)]
        private Input<string>? _accessKey;

        /// <summary>
        /// The access key of the SNS credentials.
        /// </summary>
        public Input<string>? AccessKey
        {
            get => _accessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies whether to enable content-based deduplication.
        /// </summary>
        [Input("contentBasedDeduplication")]
        public Input<bool>? ContentBasedDeduplication { get; set; }

        /// <summary>
        /// Whether the topic is a FIFO topic. If true, the topic name must end with .fifo.
        /// </summary>
        [Input("fifoTopic")]
        public Input<bool>? FifoTopic { get; set; }

        /// <summary>
        /// The unique name of the SNS topic. Either `name` or `name_prefix` is required. Conflicts with `name_prefix`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        /// </summary>
        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        /// <summary>
        /// `project_id`) The ID of the Project in which SNS is enabled.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// `region`). The region
        /// in which SNS is enabled.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("secretKey", required: true)]
        private Input<string>? _secretKey;

        /// <summary>
        /// The secret key of the SNS credentials.
        /// </summary>
        public Input<string>? SecretKey
        {
            get => _secretKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
        /// </summary>
        [Input("snsEndpoint")]
        public Input<string>? SnsEndpoint { get; set; }

        public SnsTopicArgs()
        {
        }
        public static new SnsTopicArgs Empty => new SnsTopicArgs();
    }

    public sealed class SnsTopicState : global::Pulumi.ResourceArgs
    {
        [Input("accessKey")]
        private Input<string>? _accessKey;

        /// <summary>
        /// The access key of the SNS credentials.
        /// </summary>
        public Input<string>? AccessKey
        {
            get => _accessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The ARN of the topic
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Specifies whether to enable content-based deduplication.
        /// </summary>
        [Input("contentBasedDeduplication")]
        public Input<bool>? ContentBasedDeduplication { get; set; }

        /// <summary>
        /// Whether the topic is a FIFO topic. If true, the topic name must end with .fifo.
        /// </summary>
        [Input("fifoTopic")]
        public Input<bool>? FifoTopic { get; set; }

        /// <summary>
        /// The unique name of the SNS topic. Either `name` or `name_prefix` is required. Conflicts with `name_prefix`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        /// </summary>
        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        /// <summary>
        /// Owner of the SNS topic, should have format 'project-${project_id}'
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// `project_id`) The ID of the Project in which SNS is enabled.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// `region`). The region
        /// in which SNS is enabled.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("secretKey")]
        private Input<string>? _secretKey;

        /// <summary>
        /// The secret key of the SNS credentials.
        /// </summary>
        public Input<string>? SecretKey
        {
            get => _secretKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
        /// </summary>
        [Input("snsEndpoint")]
        public Input<string>? SnsEndpoint { get; set; }

        public SnsTopicState()
        {
        }
        public static new SnsTopicState Empty => new SnsTopicState();
    }
}
