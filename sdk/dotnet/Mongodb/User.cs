// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Mongodb
{
    /// <summary>
    /// Creates and manages Scaleway MongoDB® users.
    /// For more information refer to the [product documentation](https://www.scaleway.com/en/docs/managed-mongodb-databases/).
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Scaleway.Mongodb.Instance("main", new()
    ///     {
    ///         Name = "test-mongodb-user",
    ///         Version = "7.0.12",
    ///         NodeType = "MGDB-PLAY2-NANO",
    ///         NodeNumber = 1,
    ///         UserName = "initial_user",
    ///         Password = "initial_password123",
    ///         VolumeSizeInGb = 5,
    ///     });
    /// 
    ///     var mainUser = new Scaleway.Mongodb.User("main", new()
    ///     {
    ///         InstanceId = main.Id,
    ///         Name = "my_user",
    ///         Password = "my_password123",
    ///         Roles = new[]
    ///         {
    ///             new Scaleway.Mongodb.Inputs.UserRoleArgs
    ///             {
    ///                 Role = "read_write",
    ///                 DatabaseName = "my_database",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### With Multiple Users
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Scaleway.Mongodb.Instance("main", new()
    ///     {
    ///         Name = "test-mongodb-multi-user",
    ///         Version = "7.0.12",
    ///         NodeType = "MGDB-PLAY2-NANO",
    ///         NodeNumber = 1,
    ///         UserName = "admin_user",
    ///         Password = "admin_password123",
    ///         VolumeSizeInGb = 5,
    ///     });
    /// 
    ///     var appUser = new Scaleway.Mongodb.User("app_user", new()
    ///     {
    ///         InstanceId = main.Id,
    ///         Name = "app_user",
    ///         Password = "app_password123",
    ///         Roles = new[]
    ///         {
    ///             new Scaleway.Mongodb.Inputs.UserRoleArgs
    ///             {
    ///                 Role = "read_write",
    ///                 DatabaseName = "app_database",
    ///             },
    ///             new Scaleway.Mongodb.Inputs.UserRoleArgs
    ///             {
    ///                 Role = "read",
    ///                 DatabaseName = "logs_database",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var adminUser = new Scaleway.Mongodb.User("admin_user", new()
    ///     {
    ///         InstanceId = main.Id,
    ///         Name = "admin_user",
    ///         Password = "admin_password123",
    ///         Roles = new[]
    ///         {
    ///             new Scaleway.Mongodb.Inputs.UserRoleArgs
    ///             {
    ///                 Role = "db_admin",
    ///                 DatabaseName = "admin",
    ///             },
    ///             new Scaleway.Mongodb.Inputs.UserRoleArgs
    ///             {
    ///                 Role = "read",
    ///                 AnyDatabase = true,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// MongoDB® users can be imported using the `{region}/{instance_id}/{name}`, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:mongodb/user:User main fr-par/11111111-1111-1111-1111-111111111111/my_user
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:mongodb/user:User")]
    public partial class User : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the MongoDB® instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The name of the MongoDB® user.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The password of the MongoDB® user.
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// `region`) The region in which the MongoDB® user should be created.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// List of roles assigned to the user. Each role block supports:
        /// </summary>
        [Output("roles")]
        public Output<ImmutableArray<Outputs.UserRole>> Roles { get; private set; } = null!;


        /// <summary>
        /// Create a User resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public User(string name, UserArgs args, CustomResourceOptions? options = null)
            : base("scaleway:mongodb/user:User", name, args ?? new UserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private User(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:mongodb/user:User", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing User resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static User Get(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
        {
            return new User(name, id, state, options);
        }
    }

    public sealed class UserArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the MongoDB® instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// The name of the MongoDB® user.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password", required: true)]
        private Input<string>? _password;

        /// <summary>
        /// The password of the MongoDB® user.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// `region`) The region in which the MongoDB® user should be created.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("roles")]
        private InputList<Inputs.UserRoleArgs>? _roles;

        /// <summary>
        /// List of roles assigned to the user. Each role block supports:
        /// </summary>
        public InputList<Inputs.UserRoleArgs> Roles
        {
            get => _roles ?? (_roles = new InputList<Inputs.UserRoleArgs>());
            set => _roles = value;
        }

        public UserArgs()
        {
        }
        public static new UserArgs Empty => new UserArgs();
    }

    public sealed class UserState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the MongoDB® instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The name of the MongoDB® user.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password of the MongoDB® user.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// `region`) The region in which the MongoDB® user should be created.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("roles")]
        private InputList<Inputs.UserRoleGetArgs>? _roles;

        /// <summary>
        /// List of roles assigned to the user. Each role block supports:
        /// </summary>
        public InputList<Inputs.UserRoleGetArgs> Roles
        {
            get => _roles ?? (_roles = new InputList<Inputs.UserRoleGetArgs>());
            set => _roles = value;
        }

        public UserState()
        {
        }
        public static new UserState Empty => new UserState();
    }
}
