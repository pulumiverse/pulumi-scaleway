// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Network
{
    /// <summary>
    /// Creates and manages Scaleway VPC ACLs.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var vpc01 = new Scaleway.Network.Vpc("vpc01", new()
    ///     {
    ///         Name = "tf-vpc-acl",
    ///     });
    /// 
    ///     var acl01 = new Scaleway.Network.Acl("acl01", new()
    ///     {
    ///         VpcId = vpc01.Id,
    ///         IsIpv6 = false,
    ///         Rules = new[]
    ///         {
    ///             new Scaleway.Network.Inputs.AclRuleArgs
    ///             {
    ///                 Protocol = "TCP",
    ///                 SrcPortLow = 0,
    ///                 SrcPortHigh = 0,
    ///                 DstPortLow = 80,
    ///                 DstPortHigh = 80,
    ///                 Source = "0.0.0.0/0",
    ///                 Destination = "0.0.0.0/0",
    ///                 Description = "Allow HTTP traffic from any source",
    ///                 Action = "accept",
    ///             },
    ///         },
    ///         DefaultPolicy = "drop",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ACLs can be imported using `{region}/{id}`, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:network/acl:Acl main fr-par/11111111-1111-1111-1111-111111111111
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:network/acl:Acl")]
    public partial class Acl : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The action to take for packets which do not match any rules.
        /// </summary>
        [Output("defaultPolicy")]
        public Output<string?> DefaultPolicy { get; private set; } = null!;

        /// <summary>
        /// Defines whether this set of ACL rules is for IPv6 (false = IPv4). Each Network ACL can have rules for only one IP type.
        /// </summary>
        [Output("isIpv6")]
        public Output<bool?> IsIpv6 { get; private set; } = null!;

        /// <summary>
        /// `Region`) The region of the ACL.
        /// </summary>
        [Output("region")]
        public Output<string?> Region { get; private set; } = null!;

        /// <summary>
        /// The list of Network ACL rules.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.AclRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// The VPC ID the ACL belongs to.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a Acl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Acl(string name, AclArgs args, CustomResourceOptions? options = null)
            : base("scaleway:network/acl:Acl", name, args ?? new AclArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Acl(string name, Input<string> id, AclState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:network/acl:Acl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Acl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Acl Get(string name, Input<string> id, AclState? state = null, CustomResourceOptions? options = null)
        {
            return new Acl(name, id, state, options);
        }
    }

    public sealed class AclArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action to take for packets which do not match any rules.
        /// </summary>
        [Input("defaultPolicy")]
        public Input<string>? DefaultPolicy { get; set; }

        /// <summary>
        /// Defines whether this set of ACL rules is for IPv6 (false = IPv4). Each Network ACL can have rules for only one IP type.
        /// </summary>
        [Input("isIpv6")]
        public Input<bool>? IsIpv6 { get; set; }

        /// <summary>
        /// `Region`) The region of the ACL.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("rules")]
        private InputList<Inputs.AclRuleArgs>? _rules;

        /// <summary>
        /// The list of Network ACL rules.
        /// </summary>
        public InputList<Inputs.AclRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.AclRuleArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// The VPC ID the ACL belongs to.
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        public AclArgs()
        {
        }
        public static new AclArgs Empty => new AclArgs();
    }

    public sealed class AclState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action to take for packets which do not match any rules.
        /// </summary>
        [Input("defaultPolicy")]
        public Input<string>? DefaultPolicy { get; set; }

        /// <summary>
        /// Defines whether this set of ACL rules is for IPv6 (false = IPv4). Each Network ACL can have rules for only one IP type.
        /// </summary>
        [Input("isIpv6")]
        public Input<bool>? IsIpv6 { get; set; }

        /// <summary>
        /// `Region`) The region of the ACL.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("rules")]
        private InputList<Inputs.AclRuleGetArgs>? _rules;

        /// <summary>
        /// The list of Network ACL rules.
        /// </summary>
        public InputList<Inputs.AclRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.AclRuleGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// The VPC ID the ACL belongs to.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public AclState()
        {
        }
        public static new AclState Empty => new AclState();
    }
}
