// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Network
{
    public static class GetGatewayNetwork
    {
        /// <summary>
        /// Gets information about a GatewayNetwork (a connection between a Public Gateway and a Private Network).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// using Scaleway = Pulumiverse.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = new Scaleway.Network.GatewayNetwork("main", new()
        ///     {
        ///         GatewayId = pg01.Id,
        ///         PrivateNetworkId = pn01.Id,
        ///         DhcpId = dhcp01.Id,
        ///         CleanupDhcp = true,
        ///         EnableMasquerade = true,
        ///     });
        /// 
        ///     var byId = Scaleway.Network.GetGatewayNetwork.Invoke(new()
        ///     {
        ///         GatewayNetworkId = main.Id,
        ///     });
        /// 
        ///     var byGatewayAndPn = Scaleway.Network.GetGatewayNetwork.Invoke(new()
        ///     {
        ///         GatewayId = pg01.Id,
        ///         PrivateNetworkId = pn01.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetGatewayNetworkResult> InvokeAsync(GetGatewayNetworkArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGatewayNetworkResult>("scaleway:network/getGatewayNetwork:getGatewayNetwork", args ?? new GetGatewayNetworkArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a GatewayNetwork (a connection between a Public Gateway and a Private Network).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// using Scaleway = Pulumiverse.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = new Scaleway.Network.GatewayNetwork("main", new()
        ///     {
        ///         GatewayId = pg01.Id,
        ///         PrivateNetworkId = pn01.Id,
        ///         DhcpId = dhcp01.Id,
        ///         CleanupDhcp = true,
        ///         EnableMasquerade = true,
        ///     });
        /// 
        ///     var byId = Scaleway.Network.GetGatewayNetwork.Invoke(new()
        ///     {
        ///         GatewayNetworkId = main.Id,
        ///     });
        /// 
        ///     var byGatewayAndPn = Scaleway.Network.GetGatewayNetwork.Invoke(new()
        ///     {
        ///         GatewayId = pg01.Id,
        ///         PrivateNetworkId = pn01.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGatewayNetworkResult> Invoke(GetGatewayNetworkInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGatewayNetworkResult>("scaleway:network/getGatewayNetwork:getGatewayNetwork", args ?? new GetGatewayNetworkInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a GatewayNetwork (a connection between a Public Gateway and a Private Network).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// using Scaleway = Pulumiverse.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = new Scaleway.Network.GatewayNetwork("main", new()
        ///     {
        ///         GatewayId = pg01.Id,
        ///         PrivateNetworkId = pn01.Id,
        ///         DhcpId = dhcp01.Id,
        ///         CleanupDhcp = true,
        ///         EnableMasquerade = true,
        ///     });
        /// 
        ///     var byId = Scaleway.Network.GetGatewayNetwork.Invoke(new()
        ///     {
        ///         GatewayNetworkId = main.Id,
        ///     });
        /// 
        ///     var byGatewayAndPn = Scaleway.Network.GetGatewayNetwork.Invoke(new()
        ///     {
        ///         GatewayId = pg01.Id,
        ///         PrivateNetworkId = pn01.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGatewayNetworkResult> Invoke(GetGatewayNetworkInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGatewayNetworkResult>("scaleway:network/getGatewayNetwork:getGatewayNetwork", args ?? new GetGatewayNetworkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGatewayNetworkArgs : global::Pulumi.InvokeArgs
    {
        [Input("dhcpId")]
        public string? DhcpId { get; set; }

        [Input("enableMasquerade")]
        public bool? EnableMasquerade { get; set; }

        [Input("gatewayId")]
        public string? GatewayId { get; set; }

        /// <summary>
        /// ID of the GatewayNetwork.
        /// </summary>
        [Input("gatewayNetworkId")]
        public string? GatewayNetworkId { get; set; }

        [Input("privateNetworkId")]
        public string? PrivateNetworkId { get; set; }

        public GetGatewayNetworkArgs()
        {
        }
        public static new GetGatewayNetworkArgs Empty => new GetGatewayNetworkArgs();
    }

    public sealed class GetGatewayNetworkInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("dhcpId")]
        public Input<string>? DhcpId { get; set; }

        [Input("enableMasquerade")]
        public Input<bool>? EnableMasquerade { get; set; }

        [Input("gatewayId")]
        public Input<string>? GatewayId { get; set; }

        /// <summary>
        /// ID of the GatewayNetwork.
        /// </summary>
        [Input("gatewayNetworkId")]
        public Input<string>? GatewayNetworkId { get; set; }

        [Input("privateNetworkId")]
        public Input<string>? PrivateNetworkId { get; set; }

        public GetGatewayNetworkInvokeArgs()
        {
        }
        public static new GetGatewayNetworkInvokeArgs Empty => new GetGatewayNetworkInvokeArgs();
    }


    [OutputType]
    public sealed class GetGatewayNetworkResult
    {
        public readonly bool CleanupDhcp;
        public readonly string CreatedAt;
        public readonly string? DhcpId;
        public readonly bool EnableDhcp;
        public readonly bool? EnableMasquerade;
        public readonly string? GatewayId;
        public readonly string? GatewayNetworkId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetGatewayNetworkIpamConfigResult> IpamConfigs;
        public readonly string MacAddress;
        public readonly string? PrivateNetworkId;
        public readonly string StaticAddress;
        public readonly string Status;
        public readonly string UpdatedAt;
        public readonly string Zone;

        [OutputConstructor]
        private GetGatewayNetworkResult(
            bool cleanupDhcp,

            string createdAt,

            string? dhcpId,

            bool enableDhcp,

            bool? enableMasquerade,

            string? gatewayId,

            string? gatewayNetworkId,

            string id,

            ImmutableArray<Outputs.GetGatewayNetworkIpamConfigResult> ipamConfigs,

            string macAddress,

            string? privateNetworkId,

            string staticAddress,

            string status,

            string updatedAt,

            string zone)
        {
            CleanupDhcp = cleanupDhcp;
            CreatedAt = createdAt;
            DhcpId = dhcpId;
            EnableDhcp = enableDhcp;
            EnableMasquerade = enableMasquerade;
            GatewayId = gatewayId;
            GatewayNetworkId = gatewayNetworkId;
            Id = id;
            IpamConfigs = ipamConfigs;
            MacAddress = macAddress;
            PrivateNetworkId = privateNetworkId;
            StaticAddress = staticAddress;
            Status = status;
            UpdatedAt = updatedAt;
            Zone = zone;
        }
    }
}
