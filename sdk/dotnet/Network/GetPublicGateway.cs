// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Network
{
    public static class GetPublicGateway
    {
        /// <summary>
        /// Gets information about a Public Gateway.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// using Scaleway = Pulumiverse.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = new Scaleway.Network.PublicGateway("main", new()
        ///     {
        ///         Name = "demo",
        ///         Type = "VPC-GW-S",
        ///         Zone = "nl-ams-1",
        ///     });
        /// 
        ///     var pgTestByName = Scaleway.Network.GetPublicGateway.Invoke(new()
        ///     {
        ///         Name = main.Name,
        ///         Zone = "nl-ams-1",
        ///     });
        /// 
        ///     var pgTestById = Scaleway.Network.GetPublicGateway.Invoke(new()
        ///     {
        ///         PublicGatewayId = main.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPublicGatewayResult> InvokeAsync(GetPublicGatewayArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPublicGatewayResult>("scaleway:network/getPublicGateway:getPublicGateway", args ?? new GetPublicGatewayArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a Public Gateway.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// using Scaleway = Pulumiverse.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = new Scaleway.Network.PublicGateway("main", new()
        ///     {
        ///         Name = "demo",
        ///         Type = "VPC-GW-S",
        ///         Zone = "nl-ams-1",
        ///     });
        /// 
        ///     var pgTestByName = Scaleway.Network.GetPublicGateway.Invoke(new()
        ///     {
        ///         Name = main.Name,
        ///         Zone = "nl-ams-1",
        ///     });
        /// 
        ///     var pgTestById = Scaleway.Network.GetPublicGateway.Invoke(new()
        ///     {
        ///         PublicGatewayId = main.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPublicGatewayResult> Invoke(GetPublicGatewayInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPublicGatewayResult>("scaleway:network/getPublicGateway:getPublicGateway", args ?? new GetPublicGatewayInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a Public Gateway.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// using Scaleway = Pulumiverse.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = new Scaleway.Network.PublicGateway("main", new()
        ///     {
        ///         Name = "demo",
        ///         Type = "VPC-GW-S",
        ///         Zone = "nl-ams-1",
        ///     });
        /// 
        ///     var pgTestByName = Scaleway.Network.GetPublicGateway.Invoke(new()
        ///     {
        ///         Name = main.Name,
        ///         Zone = "nl-ams-1",
        ///     });
        /// 
        ///     var pgTestById = Scaleway.Network.GetPublicGateway.Invoke(new()
        ///     {
        ///         PublicGatewayId = main.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPublicGatewayResult> Invoke(GetPublicGatewayInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPublicGatewayResult>("scaleway:network/getPublicGateway:getPublicGateway", args ?? new GetPublicGatewayInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPublicGatewayArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Exact name of the Public Gateway.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The ID of the Project the Public Gateway is associated with.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        [Input("publicGatewayId")]
        public string? PublicGatewayId { get; set; }

        /// <summary>
        /// `zone`) The Public Gateway's zone.
        /// </summary>
        [Input("zone")]
        public string? Zone { get; set; }

        public GetPublicGatewayArgs()
        {
        }
        public static new GetPublicGatewayArgs Empty => new GetPublicGatewayArgs();
    }

    public sealed class GetPublicGatewayInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Exact name of the Public Gateway.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Project the Public Gateway is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("publicGatewayId")]
        public Input<string>? PublicGatewayId { get; set; }

        /// <summary>
        /// `zone`) The Public Gateway's zone.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GetPublicGatewayInvokeArgs()
        {
        }
        public static new GetPublicGatewayInvokeArgs Empty => new GetPublicGatewayInvokeArgs();
    }


    [OutputType]
    public sealed class GetPublicGatewayResult
    {
        public readonly bool BastionEnabled;
        public readonly int BastionPort;
        public readonly string CreatedAt;
        public readonly bool EnableSmtp;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string IpId;
        public readonly string? Name;
        public readonly string OrganizationId;
        public readonly string? ProjectId;
        public readonly string? PublicGatewayId;
        public readonly string RefreshSshKeys;
        public readonly string Status;
        public readonly ImmutableArray<string> Tags;
        public readonly string Type;
        public readonly string UpdatedAt;
        public readonly ImmutableArray<string> UpstreamDnsServers;
        public readonly string? Zone;

        [OutputConstructor]
        private GetPublicGatewayResult(
            bool bastionEnabled,

            int bastionPort,

            string createdAt,

            bool enableSmtp,

            string id,

            string ipId,

            string? name,

            string organizationId,

            string? projectId,

            string? publicGatewayId,

            string refreshSshKeys,

            string status,

            ImmutableArray<string> tags,

            string type,

            string updatedAt,

            ImmutableArray<string> upstreamDnsServers,

            string? zone)
        {
            BastionEnabled = bastionEnabled;
            BastionPort = bastionPort;
            CreatedAt = createdAt;
            EnableSmtp = enableSmtp;
            Id = id;
            IpId = ipId;
            Name = name;
            OrganizationId = organizationId;
            ProjectId = projectId;
            PublicGatewayId = publicGatewayId;
            RefreshSshKeys = refreshSshKeys;
            Status = status;
            Tags = tags;
            Type = type;
            UpdatedAt = updatedAt;
            UpstreamDnsServers = upstreamDnsServers;
            Zone = zone;
        }
    }
}
