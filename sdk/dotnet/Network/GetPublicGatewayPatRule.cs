// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Network
{
    public static class GetPublicGatewayPatRule
    {
        /// <summary>
        /// Gets information about a Public Gateway PAT rule. For further information, please see the
        /// [API documentation](https://www.scaleway.com/en/developers/api/public-gateway/#path-pat-rules-list-pat-rules).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// using Scaleway = Pulumiverse.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sg01 = new Scaleway.Instance.SecurityGroup("sg01", new()
        ///     {
        ///         InboundDefaultPolicy = "drop",
        ///         OutboundDefaultPolicy = "accept",
        ///         InboundRules = new[]
        ///         {
        ///             new Scaleway.Instance.Inputs.SecurityGroupInboundRuleArgs
        ///             {
        ///                 Action = "accept",
        ///                 Port = 22,
        ///                 Protocol = "TCP",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var srv01 = new Scaleway.Instance.Server("srv01", new()
        ///     {
        ///         Name = "my-server",
        ///         Type = "PLAY2-NANO",
        ///         Image = "ubuntu_jammy",
        ///         SecurityGroupId = sg01.Id,
        ///     });
        /// 
        ///     var pn01 = new Scaleway.Network.PrivateNetwork("pn01", new()
        ///     {
        ///         Name = "my-pn",
        ///     });
        /// 
        ///     var pnic01 = new Scaleway.Instance.PrivateNic("pnic01", new()
        ///     {
        ///         ServerId = srv01.Id,
        ///         PrivateNetworkId = pn01.Id,
        ///     });
        /// 
        ///     var dhcp01 = new Scaleway.Network.PublicGatewayDhcp("dhcp01", new()
        ///     {
        ///         Subnet = "192.168.0.0/24",
        ///     });
        /// 
        ///     var ip01 = new Scaleway.Network.PublicGatewayIp("ip01");
        /// 
        ///     var pg01 = new Scaleway.Network.PublicGateway("pg01", new()
        ///     {
        ///         Name = "my-pg",
        ///         Type = "VPC-GW-S",
        ///         IpId = ip01.Id,
        ///     });
        /// 
        ///     var gn01 = new Scaleway.Network.GatewayNetwork("gn01", new()
        ///     {
        ///         GatewayId = pg01.Id,
        ///         PrivateNetworkId = pn01.Id,
        ///         DhcpId = dhcp01.Id,
        ///         CleanupDhcp = true,
        ///         EnableMasquerade = true,
        ///     });
        /// 
        ///     var rsv01 = new Scaleway.Network.PublicGatewayDhcpReservation("rsv01", new()
        ///     {
        ///         GatewayNetworkId = gn01.Id,
        ///         MacAddress = pnic01.MacAddress,
        ///         IpAddress = "192.168.0.7",
        ///     });
        /// 
        ///     var pat01 = new Scaleway.Network.PublicGatewayPatRule("pat01", new()
        ///     {
        ///         GatewayId = pg01.Id,
        ///         PrivateIp = rsv01.IpAddress,
        ///         PrivatePort = 22,
        ///         PublicPort = 2202,
        ///         Protocol = "tcp",
        ///     });
        /// 
        ///     var main = Scaleway.Network.GetPublicGatewayPatRule.Invoke(new()
        ///     {
        ///         PatRuleId = pat01.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPublicGatewayPatRuleResult> InvokeAsync(GetPublicGatewayPatRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPublicGatewayPatRuleResult>("scaleway:network/getPublicGatewayPatRule:getPublicGatewayPatRule", args ?? new GetPublicGatewayPatRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a Public Gateway PAT rule. For further information, please see the
        /// [API documentation](https://www.scaleway.com/en/developers/api/public-gateway/#path-pat-rules-list-pat-rules).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// using Scaleway = Pulumiverse.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sg01 = new Scaleway.Instance.SecurityGroup("sg01", new()
        ///     {
        ///         InboundDefaultPolicy = "drop",
        ///         OutboundDefaultPolicy = "accept",
        ///         InboundRules = new[]
        ///         {
        ///             new Scaleway.Instance.Inputs.SecurityGroupInboundRuleArgs
        ///             {
        ///                 Action = "accept",
        ///                 Port = 22,
        ///                 Protocol = "TCP",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var srv01 = new Scaleway.Instance.Server("srv01", new()
        ///     {
        ///         Name = "my-server",
        ///         Type = "PLAY2-NANO",
        ///         Image = "ubuntu_jammy",
        ///         SecurityGroupId = sg01.Id,
        ///     });
        /// 
        ///     var pn01 = new Scaleway.Network.PrivateNetwork("pn01", new()
        ///     {
        ///         Name = "my-pn",
        ///     });
        /// 
        ///     var pnic01 = new Scaleway.Instance.PrivateNic("pnic01", new()
        ///     {
        ///         ServerId = srv01.Id,
        ///         PrivateNetworkId = pn01.Id,
        ///     });
        /// 
        ///     var dhcp01 = new Scaleway.Network.PublicGatewayDhcp("dhcp01", new()
        ///     {
        ///         Subnet = "192.168.0.0/24",
        ///     });
        /// 
        ///     var ip01 = new Scaleway.Network.PublicGatewayIp("ip01");
        /// 
        ///     var pg01 = new Scaleway.Network.PublicGateway("pg01", new()
        ///     {
        ///         Name = "my-pg",
        ///         Type = "VPC-GW-S",
        ///         IpId = ip01.Id,
        ///     });
        /// 
        ///     var gn01 = new Scaleway.Network.GatewayNetwork("gn01", new()
        ///     {
        ///         GatewayId = pg01.Id,
        ///         PrivateNetworkId = pn01.Id,
        ///         DhcpId = dhcp01.Id,
        ///         CleanupDhcp = true,
        ///         EnableMasquerade = true,
        ///     });
        /// 
        ///     var rsv01 = new Scaleway.Network.PublicGatewayDhcpReservation("rsv01", new()
        ///     {
        ///         GatewayNetworkId = gn01.Id,
        ///         MacAddress = pnic01.MacAddress,
        ///         IpAddress = "192.168.0.7",
        ///     });
        /// 
        ///     var pat01 = new Scaleway.Network.PublicGatewayPatRule("pat01", new()
        ///     {
        ///         GatewayId = pg01.Id,
        ///         PrivateIp = rsv01.IpAddress,
        ///         PrivatePort = 22,
        ///         PublicPort = 2202,
        ///         Protocol = "tcp",
        ///     });
        /// 
        ///     var main = Scaleway.Network.GetPublicGatewayPatRule.Invoke(new()
        ///     {
        ///         PatRuleId = pat01.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPublicGatewayPatRuleResult> Invoke(GetPublicGatewayPatRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPublicGatewayPatRuleResult>("scaleway:network/getPublicGatewayPatRule:getPublicGatewayPatRule", args ?? new GetPublicGatewayPatRuleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a Public Gateway PAT rule. For further information, please see the
        /// [API documentation](https://www.scaleway.com/en/developers/api/public-gateway/#path-pat-rules-list-pat-rules).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// using Scaleway = Pulumiverse.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sg01 = new Scaleway.Instance.SecurityGroup("sg01", new()
        ///     {
        ///         InboundDefaultPolicy = "drop",
        ///         OutboundDefaultPolicy = "accept",
        ///         InboundRules = new[]
        ///         {
        ///             new Scaleway.Instance.Inputs.SecurityGroupInboundRuleArgs
        ///             {
        ///                 Action = "accept",
        ///                 Port = 22,
        ///                 Protocol = "TCP",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var srv01 = new Scaleway.Instance.Server("srv01", new()
        ///     {
        ///         Name = "my-server",
        ///         Type = "PLAY2-NANO",
        ///         Image = "ubuntu_jammy",
        ///         SecurityGroupId = sg01.Id,
        ///     });
        /// 
        ///     var pn01 = new Scaleway.Network.PrivateNetwork("pn01", new()
        ///     {
        ///         Name = "my-pn",
        ///     });
        /// 
        ///     var pnic01 = new Scaleway.Instance.PrivateNic("pnic01", new()
        ///     {
        ///         ServerId = srv01.Id,
        ///         PrivateNetworkId = pn01.Id,
        ///     });
        /// 
        ///     var dhcp01 = new Scaleway.Network.PublicGatewayDhcp("dhcp01", new()
        ///     {
        ///         Subnet = "192.168.0.0/24",
        ///     });
        /// 
        ///     var ip01 = new Scaleway.Network.PublicGatewayIp("ip01");
        /// 
        ///     var pg01 = new Scaleway.Network.PublicGateway("pg01", new()
        ///     {
        ///         Name = "my-pg",
        ///         Type = "VPC-GW-S",
        ///         IpId = ip01.Id,
        ///     });
        /// 
        ///     var gn01 = new Scaleway.Network.GatewayNetwork("gn01", new()
        ///     {
        ///         GatewayId = pg01.Id,
        ///         PrivateNetworkId = pn01.Id,
        ///         DhcpId = dhcp01.Id,
        ///         CleanupDhcp = true,
        ///         EnableMasquerade = true,
        ///     });
        /// 
        ///     var rsv01 = new Scaleway.Network.PublicGatewayDhcpReservation("rsv01", new()
        ///     {
        ///         GatewayNetworkId = gn01.Id,
        ///         MacAddress = pnic01.MacAddress,
        ///         IpAddress = "192.168.0.7",
        ///     });
        /// 
        ///     var pat01 = new Scaleway.Network.PublicGatewayPatRule("pat01", new()
        ///     {
        ///         GatewayId = pg01.Id,
        ///         PrivateIp = rsv01.IpAddress,
        ///         PrivatePort = 22,
        ///         PublicPort = 2202,
        ///         Protocol = "tcp",
        ///     });
        /// 
        ///     var main = Scaleway.Network.GetPublicGatewayPatRule.Invoke(new()
        ///     {
        ///         PatRuleId = pat01.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPublicGatewayPatRuleResult> Invoke(GetPublicGatewayPatRuleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPublicGatewayPatRuleResult>("scaleway:network/getPublicGatewayPatRule:getPublicGatewayPatRule", args ?? new GetPublicGatewayPatRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPublicGatewayPatRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the PAT rule to retrieve
        /// </summary>
        [Input("patRuleId", required: true)]
        public string PatRuleId { get; set; } = null!;

        /// <summary>
        /// `zone`) The zone in which
        /// the rule exists.
        /// </summary>
        [Input("zone")]
        public string? Zone { get; set; }

        public GetPublicGatewayPatRuleArgs()
        {
        }
        public static new GetPublicGatewayPatRuleArgs Empty => new GetPublicGatewayPatRuleArgs();
    }

    public sealed class GetPublicGatewayPatRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the PAT rule to retrieve
        /// </summary>
        [Input("patRuleId", required: true)]
        public Input<string> PatRuleId { get; set; } = null!;

        /// <summary>
        /// `zone`) The zone in which
        /// the rule exists.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GetPublicGatewayPatRuleInvokeArgs()
        {
        }
        public static new GetPublicGatewayPatRuleInvokeArgs Empty => new GetPublicGatewayPatRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetPublicGatewayPatRuleResult
    {
        public readonly string CreatedAt;
        /// <summary>
        /// The ID of the Public Gateway.
        /// </summary>
        public readonly string GatewayId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string OrganizationId;
        public readonly string PatRuleId;
        /// <summary>
        /// The private IP address to forward data to.
        /// </summary>
        public readonly string PrivateIp;
        /// <summary>
        /// The private port to translate to.
        /// </summary>
        public readonly int PrivatePort;
        /// <summary>
        /// The protocol the rule should apply to. Possible values are `both`, `tcp` and `udp`.
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// The public port to listen on.
        /// </summary>
        public readonly int PublicPort;
        public readonly string UpdatedAt;
        public readonly string? Zone;

        [OutputConstructor]
        private GetPublicGatewayPatRuleResult(
            string createdAt,

            string gatewayId,

            string id,

            string organizationId,

            string patRuleId,

            string privateIp,

            int privatePort,

            string protocol,

            int publicPort,

            string updatedAt,

            string? zone)
        {
            CreatedAt = createdAt;
            GatewayId = gatewayId;
            Id = id;
            OrganizationId = organizationId;
            PatRuleId = patRuleId;
            PrivateIp = privateIp;
            PrivatePort = privatePort;
            Protocol = protocol;
            PublicPort = publicPort;
            UpdatedAt = updatedAt;
            Zone = zone;
        }
    }
}
