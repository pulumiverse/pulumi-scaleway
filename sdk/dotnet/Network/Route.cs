// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Network
{
    /// <summary>
    /// Creates and manages Scaleway VPC Routes.
    /// For more information, see [the main documentation](https://www.scaleway.com/en/docs/vpc/concepts/).
    /// 
    /// ## Example Usage
    /// 
    /// ### With Instance
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var vpc01 = new Scaleway.Network.Vpc("vpc01", new()
    ///     {
    ///         Name = "tf-vpc-vpn",
    ///     });
    /// 
    ///     var pn01 = new Scaleway.Network.PrivateNetwork("pn01", new()
    ///     {
    ///         Name = "tf-pn-vpn",
    ///         Ipv4Subnet = new Scaleway.Network.Inputs.PrivateNetworkIpv4SubnetArgs
    ///         {
    ///             Subnet = "172.16.64.0/22",
    ///         },
    ///         VpcId = vpc01.Id,
    ///     });
    /// 
    ///     var server01 = new Scaleway.Instance.Server("server01", new()
    ///     {
    ///         Name = "tf-server-vpn",
    ///         Type = "PLAY2-MICRO",
    ///         Image = "openvpn",
    ///     });
    /// 
    ///     var pnic01 = new Scaleway.Instance.PrivateNic("pnic01", new()
    ///     {
    ///         PrivateNetworkId = pn01.Id,
    ///         ServerId = server01.Id,
    ///     });
    /// 
    ///     var rt01 = new Scaleway.Network.Route("rt01", new()
    ///     {
    ///         VpcId = vpc01.Id,
    ///         Description = "tf-route-vpn",
    ///         Tags = new[]
    ///         {
    ///             "tf",
    ///             "route",
    ///         },
    ///         Destination = "10.0.0.0/24",
    ///         NexthopResourceId = pnic01.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### With Baremetal
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumi.Scaleway;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var vpc01 = new Scaleway.Network.Vpc("vpc01", new()
    ///     {
    ///         Name = "tf-vpc-vpn",
    ///     });
    /// 
    ///     var pn01 = new Scaleway.Network.PrivateNetwork("pn01", new()
    ///     {
    ///         Name = "tf-pn-vpn",
    ///         Ipv4Subnet = new Scaleway.Network.Inputs.PrivateNetworkIpv4SubnetArgs
    ///         {
    ///             Subnet = "172.16.64.0/22",
    ///         },
    ///         VpcId = vpc01.Id,
    ///     });
    /// 
    ///     var myOs = Scaleway.Elasticmetal.GetOs.Invoke(new()
    ///     {
    ///         Zone = "fr-par-2",
    ///         Name = "Ubuntu",
    ///         Version = "22.04 LTS (Jammy Jellyfish)",
    ///     });
    /// 
    ///     var myOffer = Scaleway.Elasticmetal.GetOffer.Invoke(new()
    ///     {
    ///         Zone = "fr-par-2",
    ///         Name = "EM-B112X-SSD",
    ///     });
    /// 
    ///     var privateNetwork = Scaleway.Elasticmetal.GetOption.Invoke(new()
    ///     {
    ///         Zone = "fr-par-2",
    ///         Name = "Private Network",
    ///     });
    /// 
    ///     var myKey = Scaleway.Iam.GetSshKey.Invoke(new()
    ///     {
    ///         Name = "main",
    ///     });
    /// 
    ///     var myServer = new Scaleway.Elasticmetal.Server("my_server", new()
    ///     {
    ///         Zone = "fr-par-2",
    ///         Offer = myOffer.Apply(getOfferResult =&gt; getOfferResult.OfferId),
    ///         Os = myOs.Apply(getOsResult =&gt; getOsResult.OsId),
    ///         SshKeyIds = new[]
    ///         {
    ///             myKey.Apply(getSshKeyResult =&gt; getSshKeyResult.Id),
    ///         },
    ///         Options = new[]
    ///         {
    ///             new Scaleway.Elasticmetal.Inputs.ServerOptionArgs
    ///             {
    ///                 Id = privateNetwork.Apply(getOptionResult =&gt; getOptionResult.OptionId),
    ///             },
    ///         },
    ///         PrivateNetworks = new[]
    ///         {
    ///             new Scaleway.Elasticmetal.Inputs.ServerPrivateNetworkArgs
    ///             {
    ///                 Id = pn01.Id,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var rt01 = new Scaleway.Network.Route("rt01", new()
    ///     {
    ///         VpcId = vpc01.Id,
    ///         Description = "tf-route-vpn",
    ///         Tags = new[]
    ///         {
    ///             "tf",
    ///             "route",
    ///         },
    ///         Destination = "10.0.0.0/24",
    ///         NexthopResourceId = myServer.PrivateNetworks.Apply(privateNetworks =&gt; privateNetworks[0]?.MappingId),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Routes can be imported using `{region}/{id}`, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:network/route:Route main fr-par/11111111-1111-1111-1111-111111111111
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:network/route:Route")]
    public partial class Route : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The date and time of the creation of the route (RFC 3339 format).
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The route description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The destination of the route.
        /// </summary>
        [Output("destination")]
        public Output<string?> Destination { get; private set; } = null!;

        /// <summary>
        /// The ID of the nexthop private network.
        /// </summary>
        [Output("nexthopPrivateNetworkId")]
        public Output<string?> NexthopPrivateNetworkId { get; private set; } = null!;

        /// <summary>
        /// The ID of the nexthop resource.
        /// </summary>
        [Output("nexthopResourceId")]
        public Output<string?> NexthopResourceId { get; private set; } = null!;

        /// <summary>
        /// `Region`) The region of the route.
        /// </summary>
        [Output("region")]
        public Output<string?> Region { get; private set; } = null!;

        /// <summary>
        /// The tags to associate with the route.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The date and time of the creation of the route (RFC 3339 format).
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The VPC ID the route belongs to.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a Route resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Route(string name, RouteArgs args, CustomResourceOptions? options = null)
            : base("scaleway:network/route:Route", name, args ?? new RouteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Route(string name, Input<string> id, RouteState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:network/route:Route", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "scaleway:index/vpcRoute:VpcRoute" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Route resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Route Get(string name, Input<string> id, RouteState? state = null, CustomResourceOptions? options = null)
        {
            return new Route(name, id, state, options);
        }
    }

    public sealed class RouteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The route description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The destination of the route.
        /// </summary>
        [Input("destination")]
        public Input<string>? Destination { get; set; }

        /// <summary>
        /// The ID of the nexthop private network.
        /// </summary>
        [Input("nexthopPrivateNetworkId")]
        public Input<string>? NexthopPrivateNetworkId { get; set; }

        /// <summary>
        /// The ID of the nexthop resource.
        /// </summary>
        [Input("nexthopResourceId")]
        public Input<string>? NexthopResourceId { get; set; }

        /// <summary>
        /// `Region`) The region of the route.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tags to associate with the route.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The VPC ID the route belongs to.
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        public RouteArgs()
        {
        }
        public static new RouteArgs Empty => new RouteArgs();
    }

    public sealed class RouteState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The date and time of the creation of the route (RFC 3339 format).
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The route description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The destination of the route.
        /// </summary>
        [Input("destination")]
        public Input<string>? Destination { get; set; }

        /// <summary>
        /// The ID of the nexthop private network.
        /// </summary>
        [Input("nexthopPrivateNetworkId")]
        public Input<string>? NexthopPrivateNetworkId { get; set; }

        /// <summary>
        /// The ID of the nexthop resource.
        /// </summary>
        [Input("nexthopResourceId")]
        public Input<string>? NexthopResourceId { get; set; }

        /// <summary>
        /// `Region`) The region of the route.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tags to associate with the route.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The date and time of the creation of the route (RFC 3339 format).
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// The VPC ID the route belongs to.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public RouteState()
        {
        }
        public static new RouteState Empty => new RouteState();
    }
}
