// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Object
{
    /// <summary>
    /// The `scaleway.object.BucketPolicy` resource allows you to create and manage bucket policies for [Scaleway Object storage](https://www.scaleway.com/en/docs/object-storage/).
    /// 
    /// Refer to the [dedicated documentation](https://www.scaleway.com/en/docs/object-storage/api-cli/bucket-policy/) for more information on Object Storage bucket policies.
    /// 
    /// ## Example Usage
    /// 
    /// ### Example Usage with an IAM user
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Scaleway = Pulumi.Scaleway;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Project ID
    ///     var @default = Scaleway.Account.GetProject.Invoke(new()
    ///     {
    ///         Name = "default",
    ///     });
    /// 
    ///     // IAM configuration
    ///     var user = Scaleway.Iam.GetUser.Invoke(new()
    ///     {
    ///         Email = "user@scaleway.com",
    ///     });
    /// 
    ///     var policy = new Scaleway.Iam.Policy("policy", new()
    ///     {
    ///         Name = "object-storage-policy",
    ///         UserId = user.Apply(getUserResult =&gt; getUserResult.Id),
    ///         Rules = new[]
    ///         {
    ///             new Scaleway.Iam.Inputs.PolicyRuleArgs
    ///             {
    ///                 ProjectIds = new[]
    ///                 {
    ///                     @default.Apply(@default =&gt; @default.Apply(getProjectResult =&gt; getProjectResult.Id)),
    ///                 },
    ///                 PermissionSetNames = new[]
    ///                 {
    ///                     "ObjectStorageFullAccess",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     // Object storage configuration
    ///     var bucket = new Scaleway.Object.Bucket("bucket", new()
    ///     {
    ///         Name = "some-unique-name",
    ///     });
    /// 
    ///     var policyBucketPolicy = new Scaleway.Object.BucketPolicy("policy", new()
    ///     {
    ///         Bucket = bucket.Name,
    ///         Policy = Output.JsonSerialize(Output.Create(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2023-04-17",
    ///             ["Id"] = "MyBucketPolicy",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Effect"] = "Allow",
    ///                     ["Action"] = new[]
    ///                     {
    ///                         "s3:*",
    ///                     },
    ///                     ["Principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["SCW"] = $"user_id:{user.Apply(getUserResult =&gt; getUserResult.Id)}",
    ///                     },
    ///                     ["Resource"] = new[]
    ///                     {
    ///                         bucket.Name,
    ///                         bucket.Name.Apply(name =&gt; $"{name}/*"),
    ///                     },
    ///                 },
    ///             },
    ///         })),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Example with an IAM application
    /// 
    /// ### Creating a bucket and delegating read access to an application
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Scaleway = Pulumi.Scaleway;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Project ID
    ///     var @default = Scaleway.Account.GetProject.Invoke(new()
    ///     {
    ///         Name = "default",
    ///     });
    /// 
    ///     // IAM configuration
    ///     var reading_app = new Scaleway.Iam.Application("reading-app", new()
    ///     {
    ///         Name = "reading-app",
    ///     });
    /// 
    ///     var policy = new Scaleway.Iam.Policy("policy", new()
    ///     {
    ///         Name = "object-storage-policy",
    ///         ApplicationId = reading_app.Id,
    ///         Rules = new[]
    ///         {
    ///             new Scaleway.Iam.Inputs.PolicyRuleArgs
    ///             {
    ///                 ProjectIds = new[]
    ///                 {
    ///                     @default.Apply(@default =&gt; @default.Apply(getProjectResult =&gt; getProjectResult.Id)),
    ///                 },
    ///                 PermissionSetNames = new[]
    ///                 {
    ///                     "ObjectStorageBucketsRead",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     // Object storage configuration
    ///     var bucket = new Scaleway.Object.Bucket("bucket", new()
    ///     {
    ///         Name = "some-unique-name",
    ///     });
    /// 
    ///     var policyBucketPolicy = new Scaleway.Object.BucketPolicy("policy", new()
    ///     {
    ///         Bucket = bucket.Id,
    ///         Policy = Output.JsonSerialize(Output.Create(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2023-04-17",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Sid"] = "Delegate read access",
    ///                     ["Effect"] = "Allow",
    ///                     ["Principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["SCW"] = reading_app.Id.Apply(id =&gt; $"application_id:{id}"),
    ///                     },
    ///                     ["Action"] = new[]
    ///                     {
    ///                         "s3:ListBucket",
    ///                         "s3:GetObject",
    ///                     },
    ///                     ["Resource"] = new[]
    ///                     {
    ///                         bucket.Name,
    ///                         bucket.Name.Apply(name =&gt; $"{name}/*"),
    ///                     },
    ///                 },
    ///             },
    ///         })),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Reading the bucket with the application
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumi.Scaleway;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var reading_app = Scaleway.Iam.GetApplication.Invoke(new()
    ///     {
    ///         Name = "reading-app",
    ///     });
    /// 
    ///     var reading_api_key = new Scaleway.Iam.ApiKey("reading-api-key", new()
    ///     {
    ///         ApplicationId = reading_app.Apply(reading_app =&gt; reading_app.Apply(getApplicationResult =&gt; getApplicationResult.Id)),
    ///     });
    /// 
    ///     var bucket = Scaleway.Object.GetBucket.Invoke(new()
    ///     {
    ///         Name = "some-unique-name",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Example with deprecated version 2012-10-17
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Scaleway = Pulumi.Scaleway;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Project ID
    ///     var @default = Scaleway.Account.GetProject.Invoke(new()
    ///     {
    ///         Name = "default",
    ///     });
    /// 
    ///     // Object storage configuration
    ///     var bucket = new Scaleway.Object.Bucket("bucket", new()
    ///     {
    ///         Name = "mia-cross-crash-tests",
    ///         Region = "fr-par",
    ///     });
    /// 
    ///     var policy = new Scaleway.Object.BucketPolicy("policy", new()
    ///     {
    ///         Bucket = bucket.Name,
    ///         Policy = Output.JsonSerialize(Output.Create(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2012-10-17",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Effect"] = "Allow",
    ///                     ["Action"] = new[]
    ///                     {
    ///                         "s3:ListBucket",
    ///                         "s3:GetObjectTagging",
    ///                     },
    ///                     ["Principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["SCW"] = @default.Apply(@default =&gt; $"project_id:{@default.Apply(getProjectResult =&gt; getProjectResult.Id)}"),
    ///                     },
    ///                     ["Resource"] = new[]
    ///                     {
    ///                         bucket.Name,
    ///                         bucket.Name.Apply(name =&gt; $"{name}/*"),
    ///                     },
    ///                 },
    ///             },
    ///         })),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// **NB:** To configure the AWS provider with Scaleway credentials, refer to the [dedicated documentation](https://www.scaleway.com/en/docs/object-storage/api-cli/object-storage-aws-cli/).
    /// 
    /// ## Import
    /// 
    /// Bucket policies can be imported using the `{region}/{bucketName}` identifier, as shown below:
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:object/bucketPolicy:BucketPolicy some_bucket fr-par/some-bucket
    /// ```
    /// 
    /// ~&gt; **Important:** The `project_id` attribute has a particular behavior with s3 products because the s3 API is scoped by project.
    /// 
    /// If you are using a project different from the default one, you have to specify the project ID at the end of the import command.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:object/bucketPolicy:BucketPolicy some_bucket fr-par/some-bucket@xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:object/bucketPolicy:BucketPolicy")]
    public partial class BucketPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The bucket's name or regional ID.
        /// </summary>
        [Output("bucket")]
        public Output<string> Bucket { get; private set; } = null!;

        /// <summary>
        /// The text of the policy.
        /// </summary>
        [Output("policy")]
        public Output<string> Policy { get; private set; } = null!;

        /// <summary>
        /// The ProjectId you want to attach the resource to
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The Scaleway region this bucket resides in.
        /// </summary>
        [Output("region")]
        public Output<string?> Region { get; private set; } = null!;


        /// <summary>
        /// Create a BucketPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BucketPolicy(string name, BucketPolicyArgs args, CustomResourceOptions? options = null)
            : base("scaleway:object/bucketPolicy:BucketPolicy", name, args ?? new BucketPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BucketPolicy(string name, Input<string> id, BucketPolicyState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:object/bucketPolicy:BucketPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "scaleway:index/objectBucketPolicy:ObjectBucketPolicy" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BucketPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BucketPolicy Get(string name, Input<string> id, BucketPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new BucketPolicy(name, id, state, options);
        }
    }

    public sealed class BucketPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The bucket's name or regional ID.
        /// </summary>
        [Input("bucket", required: true)]
        public Input<string> Bucket { get; set; } = null!;

        /// <summary>
        /// The text of the policy.
        /// </summary>
        [Input("policy", required: true)]
        public Input<string> Policy { get; set; } = null!;

        /// <summary>
        /// The ProjectId you want to attach the resource to
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The Scaleway region this bucket resides in.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public BucketPolicyArgs()
        {
        }
        public static new BucketPolicyArgs Empty => new BucketPolicyArgs();
    }

    public sealed class BucketPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The bucket's name or regional ID.
        /// </summary>
        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        /// <summary>
        /// The text of the policy.
        /// </summary>
        [Input("policy")]
        public Input<string>? Policy { get; set; }

        /// <summary>
        /// The ProjectId you want to attach the resource to
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The Scaleway region this bucket resides in.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public BucketPolicyState()
        {
        }
        public static new BucketPolicyState Empty => new BucketPolicyState();
    }
}
