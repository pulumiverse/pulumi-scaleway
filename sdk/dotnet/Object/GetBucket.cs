// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Object
{
    public static class GetBucket
    {
        /// <summary>
        /// The `scaleway.object.Bucket` data source is used to retrieve information about an Object Storage bucket.
        /// 
        /// Refer to the Object Storage [documentation](https://www.scaleway.com/en/docs/object-storage/how-to/create-a-bucket/) for more information.
        /// 
        /// ## Retrieve an Object Storage bucket
        /// 
        /// The following commands allow you to:
        /// 
        /// - retrieve a bucket by its name
        /// - retrieve a bucket by its ID
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// using Scaleway = Pulumiverse.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = new Scaleway.Object.Bucket("main", new()
        ///     {
        ///         Name = "bucket.test.com",
        ///         Tags = 
        ///         {
        ///             { "foo", "bar" },
        ///         },
        ///     });
        /// 
        ///     var selected = Scaleway.Object.GetBucket.Invoke(new()
        ///     {
        ///         Name = main.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Retrieve a bucket from a specific project
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var selected = Scaleway.Object.GetBucket.Invoke(new()
        ///     {
        ///         Name = "bucket.test.com",
        ///         ProjectId = "11111111-1111-1111-1111-111111111111",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetBucketResult> InvokeAsync(GetBucketArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBucketResult>("scaleway:object/getBucket:getBucket", args ?? new GetBucketArgs(), options.WithDefaults());

        /// <summary>
        /// The `scaleway.object.Bucket` data source is used to retrieve information about an Object Storage bucket.
        /// 
        /// Refer to the Object Storage [documentation](https://www.scaleway.com/en/docs/object-storage/how-to/create-a-bucket/) for more information.
        /// 
        /// ## Retrieve an Object Storage bucket
        /// 
        /// The following commands allow you to:
        /// 
        /// - retrieve a bucket by its name
        /// - retrieve a bucket by its ID
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// using Scaleway = Pulumiverse.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = new Scaleway.Object.Bucket("main", new()
        ///     {
        ///         Name = "bucket.test.com",
        ///         Tags = 
        ///         {
        ///             { "foo", "bar" },
        ///         },
        ///     });
        /// 
        ///     var selected = Scaleway.Object.GetBucket.Invoke(new()
        ///     {
        ///         Name = main.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Retrieve a bucket from a specific project
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var selected = Scaleway.Object.GetBucket.Invoke(new()
        ///     {
        ///         Name = "bucket.test.com",
        ///         ProjectId = "11111111-1111-1111-1111-111111111111",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetBucketResult> Invoke(GetBucketInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBucketResult>("scaleway:object/getBucket:getBucket", args ?? new GetBucketInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `scaleway.object.Bucket` data source is used to retrieve information about an Object Storage bucket.
        /// 
        /// Refer to the Object Storage [documentation](https://www.scaleway.com/en/docs/object-storage/how-to/create-a-bucket/) for more information.
        /// 
        /// ## Retrieve an Object Storage bucket
        /// 
        /// The following commands allow you to:
        /// 
        /// - retrieve a bucket by its name
        /// - retrieve a bucket by its ID
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// using Scaleway = Pulumiverse.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = new Scaleway.Object.Bucket("main", new()
        ///     {
        ///         Name = "bucket.test.com",
        ///         Tags = 
        ///         {
        ///             { "foo", "bar" },
        ///         },
        ///     });
        /// 
        ///     var selected = Scaleway.Object.GetBucket.Invoke(new()
        ///     {
        ///         Name = main.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Retrieve a bucket from a specific project
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var selected = Scaleway.Object.GetBucket.Invoke(new()
        ///     {
        ///         Name = "bucket.test.com",
        ///         ProjectId = "11111111-1111-1111-1111-111111111111",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetBucketResult> Invoke(GetBucketInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetBucketResult>("scaleway:object/getBucket:getBucket", args ?? new GetBucketInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBucketArgs : global::Pulumi.InvokeArgs
    {
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// `project_id`) The ID of the project with which the bucket is associated.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// `region`) The region in which the bucket exists.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetBucketArgs()
        {
        }
        public static new GetBucketArgs Empty => new GetBucketArgs();
    }

    public sealed class GetBucketInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// `project_id`) The ID of the project with which the bucket is associated.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// `region`) The region in which the bucket exists.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetBucketInvokeArgs()
        {
        }
        public static new GetBucketInvokeArgs Empty => new GetBucketInvokeArgs();
    }


    [OutputType]
    public sealed class GetBucketResult
    {
        public readonly string Acl;
        public readonly string ApiEndpoint;
        public readonly ImmutableArray<Outputs.GetBucketCorsRuleResult> CorsRules;
        /// <summary>
        /// The endpoint URL of the bucket
        /// </summary>
        public readonly string Endpoint;
        public readonly bool ForceDestroy;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetBucketLifecycleRuleResult> LifecycleRules;
        public readonly string? Name;
        public readonly bool ObjectLockEnabled;
        public readonly string? ProjectId;
        public readonly string? Region;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly ImmutableArray<Outputs.GetBucketVersioningResult> Versionings;

        [OutputConstructor]
        private GetBucketResult(
            string acl,

            string apiEndpoint,

            ImmutableArray<Outputs.GetBucketCorsRuleResult> corsRules,

            string endpoint,

            bool forceDestroy,

            string id,

            ImmutableArray<Outputs.GetBucketLifecycleRuleResult> lifecycleRules,

            string? name,

            bool objectLockEnabled,

            string? projectId,

            string? region,

            ImmutableDictionary<string, string> tags,

            ImmutableArray<Outputs.GetBucketVersioningResult> versionings)
        {
            Acl = acl;
            ApiEndpoint = apiEndpoint;
            CorsRules = corsRules;
            Endpoint = endpoint;
            ForceDestroy = forceDestroy;
            Id = id;
            LifecycleRules = lifecycleRules;
            Name = name;
            ObjectLockEnabled = objectLockEnabled;
            ProjectId = projectId;
            Region = region;
            Tags = tags;
            Versionings = versionings;
        }
    }
}
