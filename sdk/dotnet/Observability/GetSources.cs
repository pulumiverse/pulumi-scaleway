// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Observability
{
    public static class GetSources
    {
        /// <summary>
        /// Gets information about multiple Cockpit data sources.
        /// 
        /// ## Example Usage
        /// 
        /// ### List all sources in a project
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Scaleway.Observability.GetSources.Invoke(new()
        ///     {
        ///         ProjectId = "11111111-1111-1111-1111-111111111111",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Filter sources by type
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var metrics = Scaleway.Observability.GetSources.Invoke(new()
        ///     {
        ///         ProjectId = "11111111-1111-1111-1111-111111111111",
        ///         Type = "metrics",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Filter sources by name
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var mySources = Scaleway.Observability.GetSources.Invoke(new()
        ///     {
        ///         ProjectId = "11111111-1111-1111-1111-111111111111",
        ///         Name = "my-data-source",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Filter sources by origin
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var external = Scaleway.Observability.GetSources.Invoke(new()
        ///     {
        ///         ProjectId = "11111111-1111-1111-1111-111111111111",
        ///         Origin = "external",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### List default Scaleway sources
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Scaleway.Observability.GetSources.Invoke(new()
        ///     {
        ///         ProjectId = "11111111-1111-1111-1111-111111111111",
        ///         Origin = "scaleway",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSourcesResult> InvokeAsync(GetSourcesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSourcesResult>("scaleway:observability/getSources:getSources", args ?? new GetSourcesArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about multiple Cockpit data sources.
        /// 
        /// ## Example Usage
        /// 
        /// ### List all sources in a project
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Scaleway.Observability.GetSources.Invoke(new()
        ///     {
        ///         ProjectId = "11111111-1111-1111-1111-111111111111",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Filter sources by type
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var metrics = Scaleway.Observability.GetSources.Invoke(new()
        ///     {
        ///         ProjectId = "11111111-1111-1111-1111-111111111111",
        ///         Type = "metrics",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Filter sources by name
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var mySources = Scaleway.Observability.GetSources.Invoke(new()
        ///     {
        ///         ProjectId = "11111111-1111-1111-1111-111111111111",
        ///         Name = "my-data-source",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Filter sources by origin
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var external = Scaleway.Observability.GetSources.Invoke(new()
        ///     {
        ///         ProjectId = "11111111-1111-1111-1111-111111111111",
        ///         Origin = "external",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### List default Scaleway sources
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Scaleway.Observability.GetSources.Invoke(new()
        ///     {
        ///         ProjectId = "11111111-1111-1111-1111-111111111111",
        ///         Origin = "scaleway",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSourcesResult> Invoke(GetSourcesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSourcesResult>("scaleway:observability/getSources:getSources", args ?? new GetSourcesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about multiple Cockpit data sources.
        /// 
        /// ## Example Usage
        /// 
        /// ### List all sources in a project
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Scaleway.Observability.GetSources.Invoke(new()
        ///     {
        ///         ProjectId = "11111111-1111-1111-1111-111111111111",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Filter sources by type
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var metrics = Scaleway.Observability.GetSources.Invoke(new()
        ///     {
        ///         ProjectId = "11111111-1111-1111-1111-111111111111",
        ///         Type = "metrics",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Filter sources by name
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var mySources = Scaleway.Observability.GetSources.Invoke(new()
        ///     {
        ///         ProjectId = "11111111-1111-1111-1111-111111111111",
        ///         Name = "my-data-source",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Filter sources by origin
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var external = Scaleway.Observability.GetSources.Invoke(new()
        ///     {
        ///         ProjectId = "11111111-1111-1111-1111-111111111111",
        ///         Origin = "external",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### List default Scaleway sources
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Scaleway.Observability.GetSources.Invoke(new()
        ///     {
        ///         ProjectId = "11111111-1111-1111-1111-111111111111",
        ///         Origin = "scaleway",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSourcesResult> Invoke(GetSourcesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSourcesResult>("scaleway:observability/getSources:getSources", args ?? new GetSourcesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSourcesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filter sources by name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Filter sources by origin. Possible values are: `scaleway`, `external`, `custom`.
        /// </summary>
        [Input("origin")]
        public string? Origin { get; set; }

        /// <summary>
        /// The project ID the cockpit sources are associated with.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// The region in which the cockpit sources are located.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        /// <summary>
        /// Filter sources by type. Possible values are: `metrics`, `logs`, `traces`.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        public GetSourcesArgs()
        {
        }
        public static new GetSourcesArgs Empty => new GetSourcesArgs();
    }

    public sealed class GetSourcesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filter sources by name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Filter sources by origin. Possible values are: `scaleway`, `external`, `custom`.
        /// </summary>
        [Input("origin")]
        public Input<string>? Origin { get; set; }

        /// <summary>
        /// The project ID the cockpit sources are associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The region in which the cockpit sources are located.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Filter sources by type. Possible values are: `metrics`, `logs`, `traces`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetSourcesInvokeArgs()
        {
        }
        public static new GetSourcesInvokeArgs Empty => new GetSourcesInvokeArgs();
    }


    [OutputType]
    public sealed class GetSourcesResult
    {
        /// <summary>
        /// The date and time of the creation of the cockpit datasource.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Name of the datasource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The origin of the datasource.
        /// </summary>
        public readonly string? Origin;
        /// <summary>
        /// The project ID of the data source.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// The URL endpoint used for pushing data to the cockpit data source.
        /// </summary>
        public readonly string PushUrl;
        /// <summary>
        /// The region of the data source.
        /// </summary>
        public readonly string? Region;
        /// <summary>
        /// The number of days to retain data.
        /// </summary>
        public readonly int RetentionDays;
        /// <summary>
        /// List of cockpit sources.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSourcesSourceResult> Sources;
        /// <summary>
        /// Indicates whether the data source is synchronized with Grafana.
        /// </summary>
        public readonly bool SynchronizedWithGrafana;
        /// <summary>
        /// The type of the datasource.
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// The date and time of the last update of the cockpit datasource.
        /// </summary>
        public readonly string UpdatedAt;
        /// <summary>
        /// The URL of the datasource.
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private GetSourcesResult(
            string createdAt,

            string id,

            string? name,

            string? origin,

            string? projectId,

            string pushUrl,

            string? region,

            int retentionDays,

            ImmutableArray<Outputs.GetSourcesSourceResult> sources,

            bool synchronizedWithGrafana,

            string? type,

            string updatedAt,

            string url)
        {
            CreatedAt = createdAt;
            Id = id;
            Name = name;
            Origin = origin;
            ProjectId = projectId;
            PushUrl = pushUrl;
            Region = region;
            RetentionDays = retentionDays;
            Sources = sources;
            SynchronizedWithGrafana = synchronizedWithGrafana;
            Type = type;
            UpdatedAt = updatedAt;
            Url = url;
        }
    }
}
