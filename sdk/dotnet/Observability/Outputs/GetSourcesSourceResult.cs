// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Observability.Outputs
{

    [OutputType]
    public sealed class GetSourcesSourceResult
    {
        /// <summary>
        /// The date and time of the creation of the cockpit datasource.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The ID of the data source.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Filter sources by name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Filter sources by origin. Possible values are: `scaleway`, `external`, `custom`.
        /// </summary>
        public readonly string Origin;
        /// <summary>
        /// The project ID the cockpit sources are associated with.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// The URL endpoint used for pushing data to the cockpit data source.
        /// </summary>
        public readonly string PushUrl;
        /// <summary>
        /// The region in which the cockpit sources are located.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The number of days to retain data.
        /// </summary>
        public readonly int RetentionDays;
        /// <summary>
        /// Indicates whether the data source is synchronized with Grafana.
        /// </summary>
        public readonly bool SynchronizedWithGrafana;
        /// <summary>
        /// Filter sources by type. Possible values are: `metrics`, `logs`, `traces`.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The date and time of the last update of the cockpit datasource.
        /// </summary>
        public readonly string UpdatedAt;
        /// <summary>
        /// The URL of the datasource.
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private GetSourcesSourceResult(
            string createdAt,

            string id,

            string name,

            string origin,

            string projectId,

            string pushUrl,

            string region,

            int retentionDays,

            bool synchronizedWithGrafana,

            string type,

            string updatedAt,

            string url)
        {
            CreatedAt = createdAt;
            Id = id;
            Name = name;
            Origin = origin;
            ProjectId = projectId;
            PushUrl = pushUrl;
            Region = region;
            RetentionDays = retentionDays;
            SynchronizedWithGrafana = synchronizedWithGrafana;
            Type = type;
            UpdatedAt = updatedAt;
            Url = url;
        }
    }
}
