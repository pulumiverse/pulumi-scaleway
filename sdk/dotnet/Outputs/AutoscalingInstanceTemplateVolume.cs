// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Outputs
{

    [OutputType]
    public sealed class AutoscalingInstanceTemplateVolume
    {
        /// <summary>
        /// Force the Instance to boot on this volume.
        /// </summary>
        public readonly bool? Boot;
        /// <summary>
        /// Volume instance template from empty
        /// </summary>
        public readonly Outputs.AutoscalingInstanceTemplateVolumeFromEmpty? FromEmpty;
        /// <summary>
        /// Volume instance template from snapshot
        /// </summary>
        public readonly Outputs.AutoscalingInstanceTemplateVolumeFromSnapshot? FromSnapshot;
        /// <summary>
        /// The name of the volume.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The maximum IO/s expected, according to the different options available in stock (`5000 | 15000`).
        /// </summary>
        public readonly int? PerfIops;
        /// <summary>
        /// The list of tags assigned to the volume.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The type of the volume.
        /// </summary>
        public readonly string VolumeType;

        [OutputConstructor]
        private AutoscalingInstanceTemplateVolume(
            bool? boot,

            Outputs.AutoscalingInstanceTemplateVolumeFromEmpty? fromEmpty,

            Outputs.AutoscalingInstanceTemplateVolumeFromSnapshot? fromSnapshot,

            string name,

            int? perfIops,

            ImmutableArray<string> tags,

            string volumeType)
        {
            Boot = boot;
            FromEmpty = fromEmpty;
            FromSnapshot = fromSnapshot;
            Name = name;
            PerfIops = perfIops;
            Tags = tags;
            VolumeType = volumeType;
        }
    }
}
