// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Outputs
{

    [OutputType]
    public sealed class GetLbsLbResult
    {
        /// <summary>
        /// Number of backends the Load Balancer has.
        /// </summary>
        public readonly int BackendCount;
        /// <summary>
        /// Date on which the Load Balancer was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The description of the Load Balancer.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Number of frontends the Load Balancer has.
        /// </summary>
        public readonly int FrontendCount;
        /// <summary>
        /// The ID of the Load Balancer.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of underlying Instances.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLbsLbInstanceResult> Instances;
        /// <summary>
        /// List of IPs attached to the Load Balancer.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLbsLbIpResult> Ips;
        /// <summary>
        /// The Load Balancer name to filter for. Load Balancers with a matching name are listed.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The ID of the Organization the Load Balancer is associated with.
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// Number of Private Networks attached to the Load balancer.
        /// </summary>
        public readonly int PrivateNetworkCount;
        /// <summary>
        /// The ID of the Project the Load Balancer is associated with.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Number of routes the Load balancer has.
        /// </summary>
        public readonly int RouteCount;
        /// <summary>
        /// Determines the minimal SSL version which needs to be supported on the client side.
        /// </summary>
        public readonly string SslCompatibilityLevel;
        /// <summary>
        /// The state of the Load Balancer Instance. Possible values are: `unknown`, `ready`, `pending`, `stopped`, `error`, `locked` and `migrating`.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The subscriber information.
        /// </summary>
        public readonly string Subscriber;
        /// <summary>
        /// List of tags to filter for. Load Balancers with these exact tags are listed.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The offer type of the Load Balancer.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Date on which the Load Balancer was updated.
        /// </summary>
        public readonly string UpdatedAt;
        /// <summary>
        /// `zone`) The zone in which the Load Balancers exist.
        /// </summary>
        public readonly string? Zone;

        [OutputConstructor]
        private GetLbsLbResult(
            int backendCount,

            string createdAt,

            string description,

            int frontendCount,

            string id,

            ImmutableArray<Outputs.GetLbsLbInstanceResult> instances,

            ImmutableArray<Outputs.GetLbsLbIpResult> ips,

            string name,

            string organizationId,

            int privateNetworkCount,

            string projectId,

            int routeCount,

            string sslCompatibilityLevel,

            string status,

            string subscriber,

            ImmutableArray<string> tags,

            string type,

            string updatedAt,

            string? zone)
        {
            BackendCount = backendCount;
            CreatedAt = createdAt;
            Description = description;
            FrontendCount = frontendCount;
            Id = id;
            Instances = instances;
            Ips = ips;
            Name = name;
            OrganizationId = organizationId;
            PrivateNetworkCount = privateNetworkCount;
            ProjectId = projectId;
            RouteCount = routeCount;
            SslCompatibilityLevel = sslCompatibilityLevel;
            Status = status;
            Subscriber = subscriber;
            Tags = tags;
            Type = type;
            UpdatedAt = updatedAt;
            Zone = zone;
        }
    }
}
