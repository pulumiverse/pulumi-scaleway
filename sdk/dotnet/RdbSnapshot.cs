// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway
{
    /// <summary>
    /// Creates and manages Scaleway RDB (Relational Database) Snapshots.
    /// Snapshots are point-in-time backups of a database instance that can be used for recovery or duplication.
    /// For more information, refer to [the API documentation](https://www.scaleway.com/en/developers/api/managed-database-postgre-mysql/).
    /// 
    /// ## Example Usage
    /// 
    /// ### Example Basic Snapshot
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Scaleway.Databases.Instance("main", new()
    ///     {
    ///         Name = "test-rdb-instance",
    ///         NodeType = "db-dev-s",
    ///         Engine = "PostgreSQL-15",
    ///         IsHaCluster = false,
    ///         DisableBackup = true,
    ///         UserName = "my_initial_user",
    ///         Password = "thiZ_is_v&amp;ry_s3cret",
    ///         Tags = new[]
    ///         {
    ///             "terraform-test",
    ///             "scaleway_rdb_instance",
    ///             "minimal",
    ///         },
    ///         VolumeType = "sbs_5k",
    ///         VolumeSizeInGb = 10,
    ///     });
    /// 
    ///     var test = new Scaleway.Databases.Snapshot("test", new()
    ///     {
    ///         Name = "initial-snapshot",
    ///         InstanceId = main.Id,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             main,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Example with Expiration
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var snapshotWithExpiration = new Scaleway.Databases.Snapshot("snapshot_with_expiration", new()
    ///     {
    ///         Name = "snapshot-with-expiration",
    ///         InstanceId = main.Id,
    ///         ExpiresAt = "2025-01-31T00:00:00Z",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Example with Multiple Snapshots
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var snapshotA = new Scaleway.Databases.Snapshot("snapshot_a", new()
    ///     {
    ///         Name = "snapshot_a",
    ///         InstanceId = main.Id,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             main,
    ///         },
    ///     });
    /// 
    ///     var snapshotB = new Scaleway.Databases.Snapshot("snapshot_b", new()
    ///     {
    ///         Name = "snapshot_b",
    ///         InstanceId = main.Id,
    ///         ExpiresAt = "2025-02-07T00:00:00Z",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             main,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Limitations
    /// 
    /// - Snapshots are tied to the database instance and region where they are created.
    /// - Expired snapshots are automatically deleted and cannot be restored.
    /// 
    /// ## Notes
    /// 
    /// - Ensure the `instance_id` corresponds to an existing database instance.
    /// - Use the `depends_on` argument when creating snapshots right after creating an instance to ensure proper dependency management.
    /// 
    /// ## Import
    /// 
    /// RDB Snapshots can be imported using the `{region}/{snapshot_id}` format.
    /// </summary>
    [Obsolete(@"scaleway.index/rdbsnapshot.RdbSnapshot has been deprecated in favor of scaleway.databases/snapshot.Snapshot")]
    [ScalewayResourceType("scaleway:index/rdbSnapshot:RdbSnapshot")]
    public partial class RdbSnapshot : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The timestamp when the snapshot was created, in ISO 8601 format.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Expiration date of the snapshot in ISO 8601 format (e.g., `2025-01-31T00:00:00Z`). If not set, the snapshot will not expire automatically.
        /// </summary>
        [Output("expiresAt")]
        public Output<string> ExpiresAt { get; private set; } = null!;

        /// <summary>
        /// The UUID of the database instance for which the snapshot is created.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The name of the snapshot.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The type of the database instance for which the snapshot was created.
        /// </summary>
        [Output("nodeType")]
        public Output<string> NodeType { get; private set; } = null!;

        /// <summary>
        /// The region where the snapshot is stored. Defaults to the region set in the provider configuration.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The size of the snapshot in bytes.
        /// </summary>
        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        /// <summary>
        /// The current status of the snapshot (e.g., `ready`, `creating`, `error`).
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The timestamp when the snapshot was last updated, in ISO 8601 format.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The type of volume used by the snapshot.
        /// </summary>
        [Output("volumeType")]
        public Output<string> VolumeType { get; private set; } = null!;


        /// <summary>
        /// Create a RdbSnapshot resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RdbSnapshot(string name, RdbSnapshotArgs args, CustomResourceOptions? options = null)
            : base("scaleway:index/rdbSnapshot:RdbSnapshot", name, args ?? new RdbSnapshotArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RdbSnapshot(string name, Input<string> id, RdbSnapshotState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:index/rdbSnapshot:RdbSnapshot", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RdbSnapshot resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RdbSnapshot Get(string name, Input<string> id, RdbSnapshotState? state = null, CustomResourceOptions? options = null)
        {
            return new RdbSnapshot(name, id, state, options);
        }
    }

    public sealed class RdbSnapshotArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Expiration date of the snapshot in ISO 8601 format (e.g., `2025-01-31T00:00:00Z`). If not set, the snapshot will not expire automatically.
        /// </summary>
        [Input("expiresAt")]
        public Input<string>? ExpiresAt { get; set; }

        /// <summary>
        /// The UUID of the database instance for which the snapshot is created.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// The name of the snapshot.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The region where the snapshot is stored. Defaults to the region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public RdbSnapshotArgs()
        {
        }
        public static new RdbSnapshotArgs Empty => new RdbSnapshotArgs();
    }

    public sealed class RdbSnapshotState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The timestamp when the snapshot was created, in ISO 8601 format.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Expiration date of the snapshot in ISO 8601 format (e.g., `2025-01-31T00:00:00Z`). If not set, the snapshot will not expire automatically.
        /// </summary>
        [Input("expiresAt")]
        public Input<string>? ExpiresAt { get; set; }

        /// <summary>
        /// The UUID of the database instance for which the snapshot is created.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The name of the snapshot.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The type of the database instance for which the snapshot was created.
        /// </summary>
        [Input("nodeType")]
        public Input<string>? NodeType { get; set; }

        /// <summary>
        /// The region where the snapshot is stored. Defaults to the region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The size of the snapshot in bytes.
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// The current status of the snapshot (e.g., `ready`, `creating`, `error`).
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The timestamp when the snapshot was last updated, in ISO 8601 format.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// The type of volume used by the snapshot.
        /// </summary>
        [Input("volumeType")]
        public Input<string>? VolumeType { get; set; }

        public RdbSnapshotState()
        {
        }
        public static new RdbSnapshotState Empty => new RdbSnapshotState();
    }
}
