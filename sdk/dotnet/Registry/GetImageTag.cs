// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Registry
{
    public static class GetImageTag
    {
        /// <summary>
        /// Gets information about a specific tag of a Container Registry image.
        /// </summary>
        public static Task<GetImageTagResult> InvokeAsync(GetImageTagArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetImageTagResult>("scaleway:registry/getImageTag:getImageTag", args ?? new GetImageTagArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a specific tag of a Container Registry image.
        /// </summary>
        public static Output<GetImageTagResult> Invoke(GetImageTagInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetImageTagResult>("scaleway:registry/getImageTag:getImageTag", args ?? new GetImageTagInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a specific tag of a Container Registry image.
        /// </summary>
        public static Output<GetImageTagResult> Invoke(GetImageTagInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetImageTagResult>("scaleway:registry/getImageTag:getImageTag", args ?? new GetImageTagInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImageTagArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the registry image.
        /// </summary>
        [Input("imageId", required: true)]
        public string ImageId { get; set; } = null!;

        /// <summary>
        /// The name of the registry image tag.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The ID of the project the image tag is associated with.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// The region in which the registry image tag exists.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        /// <summary>
        /// The ID of the registry image tag.
        /// </summary>
        [Input("tagId")]
        public string? TagId { get; set; }

        public GetImageTagArgs()
        {
        }
        public static new GetImageTagArgs Empty => new GetImageTagArgs();
    }

    public sealed class GetImageTagInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the registry image.
        /// </summary>
        [Input("imageId", required: true)]
        public Input<string> ImageId { get; set; } = null!;

        /// <summary>
        /// The name of the registry image tag.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project the image tag is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The region in which the registry image tag exists.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The ID of the registry image tag.
        /// </summary>
        [Input("tagId")]
        public Input<string>? TagId { get; set; }

        public GetImageTagInvokeArgs()
        {
        }
        public static new GetImageTagInvokeArgs Empty => new GetImageTagInvokeArgs();
    }


    [OutputType]
    public sealed class GetImageTagResult
    {
        /// <summary>
        /// The date and time when the registry image tag was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Hash of the tag content. Several tags of the same image may have the same digest.
        /// </summary>
        public readonly string Digest;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ImageId;
        public readonly string? Name;
        /// <summary>
        /// The organization ID the image tag is associated with.
        /// </summary>
        public readonly string OrganizationId;
        public readonly string ProjectId;
        public readonly string? Region;
        /// <summary>
        /// The status of the registry image tag.
        /// </summary>
        public readonly string Status;
        public readonly string? TagId;
        /// <summary>
        /// The date and time of the last update to the registry image tag.
        /// </summary>
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetImageTagResult(
            string createdAt,

            string digest,

            string id,

            string imageId,

            string? name,

            string organizationId,

            string projectId,

            string? region,

            string status,

            string? tagId,

            string updatedAt)
        {
            CreatedAt = createdAt;
            Digest = digest;
            Id = id;
            ImageId = imageId;
            Name = name;
            OrganizationId = organizationId;
            ProjectId = projectId;
            Region = region;
            Status = status;
            TagId = tagId;
            UpdatedAt = updatedAt;
        }
    }
}
