// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Secrets
{
    public static class GetVersion
    {
        /// <summary>
        /// The `scaleway.secrets.Version` data source is used to get information about a specific secret version stored in Scaleway Secret Manager.
        /// 
        /// Refer to the Secret Manager [product documentation](https://www.scaleway.com/en/docs/identity-and-access-management/secret-manager/) and [API documentation](https://www.scaleway.com/en/developers/api/secret-manager/) for more information.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ### Use Secret Manager
        /// 
        /// The following commands allow you to:
        /// 
        /// - create a secret named `fooii`
        /// - create a new version of `fooii` containing data (`your_secret`)
        /// - retrieve the secret version specified by the secret ID and the desired version
        /// - retrieve the secret version specified by the secret name and the desired version
        /// 
        /// The output blocks display the sensitive data contained in your secret version.
        /// 
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// using Scaleway = Pulumiverse.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Create a secret named fooii
        ///     var main = new Scaleway.Secrets.Secret("main", new()
        ///     {
        ///         Name = "fooii",
        ///         Description = "barr",
        ///     });
        /// 
        ///     // Create a version of fooii containing data
        ///     var mainVersion = new Scaleway.Secrets.Version("main", new()
        ///     {
        ///         Description = "your description",
        ///         SecretId = main.Id,
        ///         Data = "your_secret",
        ///     });
        /// 
        ///     // Retrieve the secret version specified by the secret ID and the desired version
        ///     var dataBySecretId = Scaleway.Secrets.GetVersion.Invoke(new()
        ///     {
        ///         SecretId = main.Id,
        ///         Revision = "1",
        ///     });
        /// 
        ///     // Retrieve the secret version specified by the secret name and the desired version
        ///     var dataBySecretName = Scaleway.Secrets.GetVersion.Invoke(new()
        ///     {
        ///         SecretName = main.Name,
        ///         Revision = "1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["scalewaySecretAccessPayload"] = dataBySecretName.Apply(getVersionResult =&gt; getVersionResult.Data),
        ///         ["scalewaySecretAccessPayloadById"] = dataBySecretId.Apply(getVersionResult =&gt; getVersionResult.Data),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Data information
        /// 
        /// Note: This data source provides you with access to the secret payload, which is encoded in base64.
        /// 
        /// Keep in mind that this is a sensitive attribute. For more information,
        /// see Sensitive Data in State.
        /// 
        /// &gt; **Important:**  This property is sensitive and will not be displayed in the pulumi preview, for security reasons.
        /// </summary>
        public static Task<GetVersionResult> InvokeAsync(GetVersionArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVersionResult>("scaleway:secrets/getVersion:getVersion", args ?? new GetVersionArgs(), options.WithDefaults());

        /// <summary>
        /// The `scaleway.secrets.Version` data source is used to get information about a specific secret version stored in Scaleway Secret Manager.
        /// 
        /// Refer to the Secret Manager [product documentation](https://www.scaleway.com/en/docs/identity-and-access-management/secret-manager/) and [API documentation](https://www.scaleway.com/en/developers/api/secret-manager/) for more information.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ### Use Secret Manager
        /// 
        /// The following commands allow you to:
        /// 
        /// - create a secret named `fooii`
        /// - create a new version of `fooii` containing data (`your_secret`)
        /// - retrieve the secret version specified by the secret ID and the desired version
        /// - retrieve the secret version specified by the secret name and the desired version
        /// 
        /// The output blocks display the sensitive data contained in your secret version.
        /// 
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// using Scaleway = Pulumiverse.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Create a secret named fooii
        ///     var main = new Scaleway.Secrets.Secret("main", new()
        ///     {
        ///         Name = "fooii",
        ///         Description = "barr",
        ///     });
        /// 
        ///     // Create a version of fooii containing data
        ///     var mainVersion = new Scaleway.Secrets.Version("main", new()
        ///     {
        ///         Description = "your description",
        ///         SecretId = main.Id,
        ///         Data = "your_secret",
        ///     });
        /// 
        ///     // Retrieve the secret version specified by the secret ID and the desired version
        ///     var dataBySecretId = Scaleway.Secrets.GetVersion.Invoke(new()
        ///     {
        ///         SecretId = main.Id,
        ///         Revision = "1",
        ///     });
        /// 
        ///     // Retrieve the secret version specified by the secret name and the desired version
        ///     var dataBySecretName = Scaleway.Secrets.GetVersion.Invoke(new()
        ///     {
        ///         SecretName = main.Name,
        ///         Revision = "1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["scalewaySecretAccessPayload"] = dataBySecretName.Apply(getVersionResult =&gt; getVersionResult.Data),
        ///         ["scalewaySecretAccessPayloadById"] = dataBySecretId.Apply(getVersionResult =&gt; getVersionResult.Data),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Data information
        /// 
        /// Note: This data source provides you with access to the secret payload, which is encoded in base64.
        /// 
        /// Keep in mind that this is a sensitive attribute. For more information,
        /// see Sensitive Data in State.
        /// 
        /// &gt; **Important:**  This property is sensitive and will not be displayed in the pulumi preview, for security reasons.
        /// </summary>
        public static Output<GetVersionResult> Invoke(GetVersionInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVersionResult>("scaleway:secrets/getVersion:getVersion", args ?? new GetVersionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `scaleway.secrets.Version` data source is used to get information about a specific secret version stored in Scaleway Secret Manager.
        /// 
        /// Refer to the Secret Manager [product documentation](https://www.scaleway.com/en/docs/identity-and-access-management/secret-manager/) and [API documentation](https://www.scaleway.com/en/developers/api/secret-manager/) for more information.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ### Use Secret Manager
        /// 
        /// The following commands allow you to:
        /// 
        /// - create a secret named `fooii`
        /// - create a new version of `fooii` containing data (`your_secret`)
        /// - retrieve the secret version specified by the secret ID and the desired version
        /// - retrieve the secret version specified by the secret name and the desired version
        /// 
        /// The output blocks display the sensitive data contained in your secret version.
        /// 
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// using Scaleway = Pulumiverse.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Create a secret named fooii
        ///     var main = new Scaleway.Secrets.Secret("main", new()
        ///     {
        ///         Name = "fooii",
        ///         Description = "barr",
        ///     });
        /// 
        ///     // Create a version of fooii containing data
        ///     var mainVersion = new Scaleway.Secrets.Version("main", new()
        ///     {
        ///         Description = "your description",
        ///         SecretId = main.Id,
        ///         Data = "your_secret",
        ///     });
        /// 
        ///     // Retrieve the secret version specified by the secret ID and the desired version
        ///     var dataBySecretId = Scaleway.Secrets.GetVersion.Invoke(new()
        ///     {
        ///         SecretId = main.Id,
        ///         Revision = "1",
        ///     });
        /// 
        ///     // Retrieve the secret version specified by the secret name and the desired version
        ///     var dataBySecretName = Scaleway.Secrets.GetVersion.Invoke(new()
        ///     {
        ///         SecretName = main.Name,
        ///         Revision = "1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["scalewaySecretAccessPayload"] = dataBySecretName.Apply(getVersionResult =&gt; getVersionResult.Data),
        ///         ["scalewaySecretAccessPayloadById"] = dataBySecretId.Apply(getVersionResult =&gt; getVersionResult.Data),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Data information
        /// 
        /// Note: This data source provides you with access to the secret payload, which is encoded in base64.
        /// 
        /// Keep in mind that this is a sensitive attribute. For more information,
        /// see Sensitive Data in State.
        /// 
        /// &gt; **Important:**  This property is sensitive and will not be displayed in the pulumi preview, for security reasons.
        /// </summary>
        public static Output<GetVersionResult> Invoke(GetVersionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVersionResult>("scaleway:secrets/getVersion:getVersion", args ?? new GetVersionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVersionArgs : global::Pulumi.InvokeArgs
    {
        [Input("organizationId")]
        public string? OrganizationId { get; set; }

        /// <summary>
        /// The ID of the Scaleway Project associated with the secret version.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        [Input("region")]
        public string? Region { get; set; }

        /// <summary>
        /// The revision for this secret version. Refer to alternative values (ex: `latest`) in the [API documentation](https://www.scaleway.com/en/developers/api/secret-manager/#path-secret-versions-access-a-secrets-version-using-the-secrets-id)
        /// </summary>
        [Input("revision")]
        public string? Revision { get; set; }

        /// <summary>
        /// The ID of the secret associated with the secret version. Only one of `secret_id` and `secret_name` should be specified.
        /// </summary>
        [Input("secretId")]
        public string? SecretId { get; set; }

        /// <summary>
        /// The name of the secret associated with the secret version.
        /// Only one of `secret_id` and `secret_name` should be specified.
        /// </summary>
        [Input("secretName")]
        public string? SecretName { get; set; }

        public GetVersionArgs()
        {
        }
        public static new GetVersionArgs Empty => new GetVersionArgs();
    }

    public sealed class GetVersionInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// The ID of the Scaleway Project associated with the secret version.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The revision for this secret version. Refer to alternative values (ex: `latest`) in the [API documentation](https://www.scaleway.com/en/developers/api/secret-manager/#path-secret-versions-access-a-secrets-version-using-the-secrets-id)
        /// </summary>
        [Input("revision")]
        public Input<string>? Revision { get; set; }

        /// <summary>
        /// The ID of the secret associated with the secret version. Only one of `secret_id` and `secret_name` should be specified.
        /// </summary>
        [Input("secretId")]
        public Input<string>? SecretId { get; set; }

        /// <summary>
        /// The name of the secret associated with the secret version.
        /// Only one of `secret_id` and `secret_name` should be specified.
        /// </summary>
        [Input("secretName")]
        public Input<string>? SecretName { get; set; }

        public GetVersionInvokeArgs()
        {
        }
        public static new GetVersionInvokeArgs Empty => new GetVersionInvokeArgs();
    }


    [OutputType]
    public sealed class GetVersionResult
    {
        /// <summary>
        /// The date and time of the secret version's creation in RFC 3339 format.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The data payload of the secret version. This is a sensitive attribute containing the secret value. Learn more in the [data section](https://www.terraform.io/#data-information).
        /// </summary>
        public readonly string Data;
        /// <summary>
        /// (Optional) The description of the secret version (e.g. `my-new-description`).
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string OrganizationId;
        public readonly string? ProjectId;
        public readonly string? Region;
        public readonly string? Revision;
        public readonly string? SecretId;
        public readonly string? SecretName;
        /// <summary>
        /// The status of the secret version.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The date and time of the secret version's last update in RFC 3339 format.
        /// </summary>
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetVersionResult(
            string createdAt,

            string data,

            string description,

            string id,

            string organizationId,

            string? projectId,

            string? region,

            string? revision,

            string? secretId,

            string? secretName,

            string status,

            string updatedAt)
        {
            CreatedAt = createdAt;
            Data = data;
            Description = description;
            Id = id;
            OrganizationId = organizationId;
            ProjectId = projectId;
            Region = region;
            Revision = revision;
            SecretId = secretId;
            SecretName = secretName;
            Status = status;
            UpdatedAt = updatedAt;
        }
    }
}
