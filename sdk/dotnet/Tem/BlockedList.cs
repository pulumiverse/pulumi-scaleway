// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Tem
{
    /// <summary>
    /// Creates and manages blocklisted email addresses for a Scaleway Transactional Email Domain.
    /// For more information refer to the [API documentation](https://www.scaleway.com/en/developers/api/transactional-email/#post-transactional-email-v1alpha1-regions-region-blocklists).
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Scaleway.Tem.BlockedList("test", new()
    ///     {
    ///         DomainId = "fr-par/12345678-1234-1234-1234-123456789abc",
    ///         Email = "spam@example.com",
    ///         Type = "mailbox_full",
    ///         Reason = "Spam detected",
    ///         Region = "fr-par",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Blocklists can be imported using the `{region}/{id}`, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:tem/blockedList:BlockedList test fr-par/11111111-1111-1111-1111-111111111111
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:tem/blockedList:BlockedList")]
    public partial class BlockedList : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the domain affected by the blocklist. Must be in the format `{region}/{domain_id}`.
        /// </summary>
        [Output("domainId")]
        public Output<string> DomainId { get; private set; } = null!;

        /// <summary>
        /// The email address to block.
        /// </summary>
        [Output("email")]
        public Output<string> Email { get; private set; } = null!;

        /// <summary>
        /// The ID of the project this blocklist belongs to. Defaults to the provider's project ID.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Reason for blocking the email address.
        /// </summary>
        [Output("reason")]
        public Output<string?> Reason { get; private set; } = null!;

        /// <summary>
        /// The region in which the blocklist is created. Defaults to the provider's region.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Type of the blocklist. Possible values are:
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a BlockedList resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BlockedList(string name, BlockedListArgs args, CustomResourceOptions? options = null)
            : base("scaleway:tem/blockedList:BlockedList", name, args ?? new BlockedListArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BlockedList(string name, Input<string> id, BlockedListState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:tem/blockedList:BlockedList", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BlockedList resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BlockedList Get(string name, Input<string> id, BlockedListState? state = null, CustomResourceOptions? options = null)
        {
            return new BlockedList(name, id, state, options);
        }
    }

    public sealed class BlockedListArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the domain affected by the blocklist. Must be in the format `{region}/{domain_id}`.
        /// </summary>
        [Input("domainId", required: true)]
        public Input<string> DomainId { get; set; } = null!;

        /// <summary>
        /// The email address to block.
        /// </summary>
        [Input("email", required: true)]
        public Input<string> Email { get; set; } = null!;

        /// <summary>
        /// The ID of the project this blocklist belongs to. Defaults to the provider's project ID.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Reason for blocking the email address.
        /// </summary>
        [Input("reason")]
        public Input<string>? Reason { get; set; }

        /// <summary>
        /// The region in which the blocklist is created. Defaults to the provider's region.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Type of the blocklist. Possible values are:
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public BlockedListArgs()
        {
        }
        public static new BlockedListArgs Empty => new BlockedListArgs();
    }

    public sealed class BlockedListState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the domain affected by the blocklist. Must be in the format `{region}/{domain_id}`.
        /// </summary>
        [Input("domainId")]
        public Input<string>? DomainId { get; set; }

        /// <summary>
        /// The email address to block.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// The ID of the project this blocklist belongs to. Defaults to the provider's project ID.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Reason for blocking the email address.
        /// </summary>
        [Input("reason")]
        public Input<string>? Reason { get; set; }

        /// <summary>
        /// The region in which the blocklist is created. Defaults to the provider's region.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Type of the blocklist. Possible values are:
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public BlockedListState()
        {
        }
        public static new BlockedListState Empty => new BlockedListState();
    }
}
