// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway.Tem
{
    public static class GetDomain
    {
        /// <summary>
        /// Gets information about a transactional email domain.
        /// </summary>
        public static Task<GetDomainResult> InvokeAsync(GetDomainArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDomainResult>("scaleway:tem/getDomain:getDomain", args ?? new GetDomainArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a transactional email domain.
        /// </summary>
        public static Output<GetDomainResult> Invoke(GetDomainInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDomainResult>("scaleway:tem/getDomain:getDomain", args ?? new GetDomainInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a transactional email domain.
        /// </summary>
        public static Output<GetDomainResult> Invoke(GetDomainInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDomainResult>("scaleway:tem/getDomain:getDomain", args ?? new GetDomainInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDomainArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The domain id.
        /// Only one of `name` and `domain_id` should be specified.
        /// </summary>
        [Input("domainId")]
        public string? DomainId { get; set; }

        /// <summary>
        /// The domain name.
        /// Only one of `name` and `domain_id` should be specified.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// `project_id`) The ID of the project the domain is associated with.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// `region`) The region in which the domain exists.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetDomainArgs()
        {
        }
        public static new GetDomainArgs Empty => new GetDomainArgs();
    }

    public sealed class GetDomainInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The domain id.
        /// Only one of `name` and `domain_id` should be specified.
        /// </summary>
        [Input("domainId")]
        public Input<string>? DomainId { get; set; }

        /// <summary>
        /// The domain name.
        /// Only one of `name` and `domain_id` should be specified.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// `project_id`) The ID of the project the domain is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// `region`) The region in which the domain exists.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetDomainInvokeArgs()
        {
        }
        public static new GetDomainInvokeArgs Empty => new GetDomainInvokeArgs();
    }


    [OutputType]
    public sealed class GetDomainResult
    {
        public readonly bool AcceptTos;
        public readonly bool Autoconfig;
        public readonly string CreatedAt;
        public readonly string DkimConfig;
        public readonly string DmarcConfig;
        public readonly string DmarcName;
        public readonly string? DomainId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string LastError;
        public readonly string LastValidAt;
        public readonly string MxBlackhole;
        public readonly string? Name;
        public readonly string NextCheckAt;
        public readonly string? ProjectId;
        public readonly string? Region;
        public readonly ImmutableArray<Outputs.GetDomainReputationResult> Reputations;
        public readonly string RevokedAt;
        public readonly string SmtpHost;
        public readonly int SmtpPort;
        public readonly int SmtpPortAlternative;
        public readonly int SmtpPortUnsecure;
        public readonly string SmtpsAuthUser;
        public readonly int SmtpsPort;
        public readonly int SmtpsPortAlternative;
        public readonly string SpfConfig;
        public readonly string Status;

        [OutputConstructor]
        private GetDomainResult(
            bool acceptTos,

            bool autoconfig,

            string createdAt,

            string dkimConfig,

            string dmarcConfig,

            string dmarcName,

            string? domainId,

            string id,

            string lastError,

            string lastValidAt,

            string mxBlackhole,

            string? name,

            string nextCheckAt,

            string? projectId,

            string? region,

            ImmutableArray<Outputs.GetDomainReputationResult> reputations,

            string revokedAt,

            string smtpHost,

            int smtpPort,

            int smtpPortAlternative,

            int smtpPortUnsecure,

            string smtpsAuthUser,

            int smtpsPort,

            int smtpsPortAlternative,

            string spfConfig,

            string status)
        {
            AcceptTos = acceptTos;
            Autoconfig = autoconfig;
            CreatedAt = createdAt;
            DkimConfig = dkimConfig;
            DmarcConfig = dmarcConfig;
            DmarcName = dmarcName;
            DomainId = domainId;
            Id = id;
            LastError = lastError;
            LastValidAt = lastValidAt;
            MxBlackhole = mxBlackhole;
            Name = name;
            NextCheckAt = nextCheckAt;
            ProjectId = projectId;
            Region = region;
            Reputations = reputations;
            RevokedAt = revokedAt;
            SmtpHost = smtpHost;
            SmtpPort = smtpPort;
            SmtpPortAlternative = smtpPortAlternative;
            SmtpPortUnsecure = smtpPortUnsecure;
            SmtpsAuthUser = smtpsAuthUser;
            SmtpsPort = smtpsPort;
            SmtpsPortAlternative = smtpsPortAlternative;
            SpfConfig = spfConfig;
            Status = status;
        }
    }
}
