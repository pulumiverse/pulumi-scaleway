// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Scaleway
{
    /// <summary>
    /// Creates and manages Scaleway Transactional Email Webhooks.
    /// For more information, refer to [the API documentation](https://www.scaleway.com/en/developers/api/transactional-email).
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Scaleway.TemWebhook("main", new()
    ///     {
    ///         DomainId = "your-domain-id",
    ///         EventTypes = new[]
    ///         {
    ///             "email_delivered",
    ///             "email_bounced",
    ///         },
    ///         SnsArn = "arn:scw:sns:fr-par:project-xxxx:your-sns-topic",
    ///         Name = "example-webhook",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Complete Example with Dependencies
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumiverse.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var domainName = config.Require("domainName");
    ///     var sns = new Scaleway.MnqSns("sns");
    /// 
    ///     var snsCredentials = new Scaleway.MnqSnsCredentials("sns_credentials", new()
    ///     {
    ///         Permissions = new Scaleway.Inputs.MnqSnsCredentialsPermissionsArgs
    ///         {
    ///             CanManage = true,
    ///         },
    ///     });
    /// 
    ///     var snsTopic = new Scaleway.MnqSnsTopic("sns_topic", new()
    ///     {
    ///         Name = "test-mnq-sns-topic-basic",
    ///         AccessKey = snsCredentials.AccessKey,
    ///         SecretKey = snsCredentials.SecretKey,
    ///     });
    /// 
    ///     var cr01 = new Scaleway.TemDomain("cr01", new()
    ///     {
    ///         Name = domainName,
    ///         AcceptTos = true,
    ///     });
    /// 
    ///     var spf = new Scaleway.DomainRecord("spf", new()
    ///     {
    ///         DnsZone = domainName,
    ///         Type = "TXT",
    ///         Data = cr01.SpfConfig.Apply(spfConfig =&gt; $"v=spf1 {spfConfig} -all"),
    ///     });
    /// 
    ///     var dkim = new Scaleway.DomainRecord("dkim", new()
    ///     {
    ///         DnsZone = domainName,
    ///         Name = cr01.ProjectId.Apply(projectId =&gt; $"{projectId}._domainkey"),
    ///         Type = "TXT",
    ///         Data = cr01.DkimConfig,
    ///     });
    /// 
    ///     var mx = new Scaleway.DomainRecord("mx", new()
    ///     {
    ///         DnsZone = domainName,
    ///         Type = "MX",
    ///         Data = ".",
    ///     });
    /// 
    ///     var dmarc = new Scaleway.DomainRecord("dmarc", new()
    ///     {
    ///         DnsZone = domainName,
    ///         Name = cr01.DmarcName,
    ///         Type = "TXT",
    ///         Data = cr01.DmarcConfig,
    ///     });
    /// 
    ///     var valid = new Scaleway.TemDomainValidation("valid", new()
    ///     {
    ///         DomainId = cr01.Id,
    ///         Region = cr01.Region,
    ///         Timeout = 3600,
    ///     });
    /// 
    ///     var webhook = new Scaleway.TemWebhook("webhook", new()
    ///     {
    ///         Name = "example-webhook",
    ///         DomainId = cr01.Id,
    ///         EventTypes = new[]
    ///         {
    ///             "email_delivered",
    ///             "email_bounced",
    ///         },
    ///         SnsArn = snsTopic.Arn,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             valid,
    ///             snsTopic,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Webhooks can be imported using the {region}/{id}, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:index/temWebhook:TemWebhook main fr-par/11111111-1111-1111-1111-111111111111
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:index/temWebhook:TemWebhook")]
    public partial class TemWebhook : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The date and time of the webhook's creation (RFC 3339 format).
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The ID of the domain the webhook is associated with.
        /// </summary>
        [Output("domainId")]
        public Output<string> DomainId { get; private set; } = null!;

        /// <summary>
        /// A list of event types that trigger the webhook.
        /// </summary>
        [Output("eventTypes")]
        public Output<ImmutableArray<string>> EventTypes { get; private set; } = null!;

        /// <summary>
        /// The name of the webhook. Defaults to an autogenerated name if not provided.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the organization the webhook belongs to.
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// The ID of the project the webhook is associated with.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// . The region in which the webhook should be created.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the SNS topic.
        /// </summary>
        [Output("snsArn")]
        public Output<string> SnsArn { get; private set; } = null!;

        /// <summary>
        /// The date and time of the webhook's last update (RFC 3339 format).
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a TemWebhook resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TemWebhook(string name, TemWebhookArgs args, CustomResourceOptions? options = null)
            : base("scaleway:index/temWebhook:TemWebhook", name, args ?? new TemWebhookArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TemWebhook(string name, Input<string> id, TemWebhookState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:index/temWebhook:TemWebhook", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TemWebhook resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TemWebhook Get(string name, Input<string> id, TemWebhookState? state = null, CustomResourceOptions? options = null)
        {
            return new TemWebhook(name, id, state, options);
        }
    }

    public sealed class TemWebhookArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the domain the webhook is associated with.
        /// </summary>
        [Input("domainId", required: true)]
        public Input<string> DomainId { get; set; } = null!;

        [Input("eventTypes", required: true)]
        private InputList<string>? _eventTypes;

        /// <summary>
        /// A list of event types that trigger the webhook.
        /// </summary>
        public InputList<string> EventTypes
        {
            get => _eventTypes ?? (_eventTypes = new InputList<string>());
            set => _eventTypes = value;
        }

        /// <summary>
        /// The name of the webhook. Defaults to an autogenerated name if not provided.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project the webhook is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// . The region in which the webhook should be created.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the SNS topic.
        /// </summary>
        [Input("snsArn", required: true)]
        public Input<string> SnsArn { get; set; } = null!;

        public TemWebhookArgs()
        {
        }
        public static new TemWebhookArgs Empty => new TemWebhookArgs();
    }

    public sealed class TemWebhookState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The date and time of the webhook's creation (RFC 3339 format).
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The ID of the domain the webhook is associated with.
        /// </summary>
        [Input("domainId")]
        public Input<string>? DomainId { get; set; }

        [Input("eventTypes")]
        private InputList<string>? _eventTypes;

        /// <summary>
        /// A list of event types that trigger the webhook.
        /// </summary>
        public InputList<string> EventTypes
        {
            get => _eventTypes ?? (_eventTypes = new InputList<string>());
            set => _eventTypes = value;
        }

        /// <summary>
        /// The name of the webhook. Defaults to an autogenerated name if not provided.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the organization the webhook belongs to.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// The ID of the project the webhook is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// . The region in which the webhook should be created.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the SNS topic.
        /// </summary>
        [Input("snsArn")]
        public Input<string>? SnsArn { get; set; }

        /// <summary>
        /// The date and time of the webhook's last update (RFC 3339 format).
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public TemWebhookState()
        {
        }
        public static new TemWebhookState Empty => new TemWebhookState();
    }
}
