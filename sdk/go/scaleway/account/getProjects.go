// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package account

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// The `account.getProjects` data source is used to list all Scaleway projects in an Organization.
//
// Refer to the Organizations and Projects [documentation](https://www.scaleway.com/en/docs/organizations-and-projects/) and [API documentation](https://www.scaleway.com/en/developers/api/account/project-api/) for more information.
//
// ## Retrieve a Scaleway Projects
//
// The following commands allow you to:
//
// - retrieve all Projects in an Organization
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/account"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Get all Projects in an Organization
//			_, err := account.GetProjects(ctx, &account.GetProjectsArgs{
//				OrganizationId: pulumi.StringRef("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Example Usage
//
// ### Deploy an SSH key in all your organization's projects
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/account"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			all, err := account.GetProjects(ctx, &account.GetProjectsArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			var main []*account.SshKey
//			for index := 0; index < int(len(all.Projects)); index++ {
//				key0 := index
//				val0 := index
//				__res, err := account.NewSshKey(ctx, fmt.Sprintf("main-%v", key0), &account.SshKeyArgs{
//					Name:      pulumi.String("main"),
//					PublicKey: pulumi.Any(publicKey),
//					ProjectId: all.Projects[val0].Id,
//				})
//				if err != nil {
//					return err
//				}
//				main = append(main, __res)
//			}
//			return nil
//		})
//	}
//
// ```
func GetProjects(ctx *pulumi.Context, args *GetProjectsArgs, opts ...pulumi.InvokeOption) (*GetProjectsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetProjectsResult
	err := ctx.Invoke("scaleway:account/getProjects:getProjects", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjects.
type GetProjectsArgs struct {
	// The unique identifier of the Organization with which the Projects are associated.
	// If no default `organizationId` is set, one must be set explicitly in this datasource
	OrganizationId *string `pulumi:"organizationId"`
}

// A collection of values returned by getProjects.
type GetProjectsResult struct {
	// (Computed) The date and time when the project was created.
	CreatedAt string `pulumi:"createdAt"`
	// (Computed) The description of the project.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// (Computed) The name of the project.
	Name string `pulumi:"name"`
	// (Computed) The unique identifier of the organization with which the project is associated.
	OrganizationId string `pulumi:"organizationId"`
	// (Computed) A list of projects. Each project has the following attributes:
	Projects []GetProjectsProject `pulumi:"projects"`
	// (Computed) The date and time when the project was updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

func GetProjectsOutput(ctx *pulumi.Context, args GetProjectsOutputArgs, opts ...pulumi.InvokeOption) GetProjectsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetProjectsResultOutput, error) {
			args := v.(GetProjectsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("scaleway:account/getProjects:getProjects", args, GetProjectsResultOutput{}, options).(GetProjectsResultOutput), nil
		}).(GetProjectsResultOutput)
}

// A collection of arguments for invoking getProjects.
type GetProjectsOutputArgs struct {
	// The unique identifier of the Organization with which the Projects are associated.
	// If no default `organizationId` is set, one must be set explicitly in this datasource
	OrganizationId pulumi.StringPtrInput `pulumi:"organizationId"`
}

func (GetProjectsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsArgs)(nil)).Elem()
}

// A collection of values returned by getProjects.
type GetProjectsResultOutput struct{ *pulumi.OutputState }

func (GetProjectsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsResult)(nil)).Elem()
}

func (o GetProjectsResultOutput) ToGetProjectsResultOutput() GetProjectsResultOutput {
	return o
}

func (o GetProjectsResultOutput) ToGetProjectsResultOutputWithContext(ctx context.Context) GetProjectsResultOutput {
	return o
}

// (Computed) The date and time when the project was created.
func (o GetProjectsResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// (Computed) The description of the project.
func (o GetProjectsResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetProjectsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsResult) string { return v.Id }).(pulumi.StringOutput)
}

// (Computed) The name of the project.
func (o GetProjectsResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsResult) string { return v.Name }).(pulumi.StringOutput)
}

// (Computed) The unique identifier of the organization with which the project is associated.
func (o GetProjectsResultOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsResult) string { return v.OrganizationId }).(pulumi.StringOutput)
}

// (Computed) A list of projects. Each project has the following attributes:
func (o GetProjectsResultOutput) Projects() GetProjectsProjectArrayOutput {
	return o.ApplyT(func(v GetProjectsResult) []GetProjectsProject { return v.Projects }).(GetProjectsProjectArrayOutput)
}

// (Computed) The date and time when the project was updated.
func (o GetProjectsResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetProjectsResultOutput{})
}
