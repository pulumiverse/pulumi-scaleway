// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Apple silicon. For more information,
// see the [API documentation](https://www.scaleway.com/en/developers/api/apple-silicon/).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/applesilicon"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := applesilicon.NewServer(ctx, "server", &applesilicon.ServerArgs{
//				Name: pulumi.String("test-m1"),
//				Type: pulumi.String("M1-M"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Instance servers can be imported using the `{zone}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/appleSiliconServer:AppleSiliconServer main fr-par-1/11111111-1111-1111-1111-111111111111
// ```
//
// Deprecated: scaleway.index/applesiliconserver.AppleSiliconServer has been deprecated in favor of scaleway.applesilicon/server.Server
type AppleSiliconServer struct {
	pulumi.CustomResourceState

	// The date and time of the creation of the Apple Silicon server.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The minimal date and time on which you can delete this server due to Apple licence
	DeletableAt pulumi.StringOutput `pulumi:"deletableAt"`
	// : Enables the VPC option when set to true.
	EnableVpc pulumi.BoolPtrOutput `pulumi:"enableVpc"`
	// IPv4 address of the server (IPv4 address).
	Ip pulumi.StringOutput `pulumi:"ip"`
	// The name of the server.
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization ID the server is associated with.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The private networks to attach to the server
	PrivateNetworks AppleSiliconServerPrivateNetworkArrayOutput `pulumi:"privateNetworks"`
	// `projectId`) The ID of the project the server is
	// associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The state of the server.
	State pulumi.StringOutput `pulumi:"state"`
	// The commercial type of the server. You find all the available types on
	// the [pricing page](https://www.scaleway.com/en/pricing/apple-silicon/). Updates to this field will recreate a new
	// resource.
	Type pulumi.StringOutput `pulumi:"type"`
	// The date and time of the last update of the Apple Silicon server.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// URL of the VNC.
	VncUrl pulumi.StringOutput `pulumi:"vncUrl"`
	// The current status of the VPC option.
	VpcStatus pulumi.StringOutput `pulumi:"vpcStatus"`
	// `zone`) The zone in which
	// the server should be created.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewAppleSiliconServer registers a new resource with the given unique name, arguments, and options.
func NewAppleSiliconServer(ctx *pulumi.Context,
	name string, args *AppleSiliconServerArgs, opts ...pulumi.ResourceOption) (*AppleSiliconServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppleSiliconServer
	err := ctx.RegisterResource("scaleway:index/appleSiliconServer:AppleSiliconServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppleSiliconServer gets an existing AppleSiliconServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppleSiliconServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppleSiliconServerState, opts ...pulumi.ResourceOption) (*AppleSiliconServer, error) {
	var resource AppleSiliconServer
	err := ctx.ReadResource("scaleway:index/appleSiliconServer:AppleSiliconServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppleSiliconServer resources.
type appleSiliconServerState struct {
	// The date and time of the creation of the Apple Silicon server.
	CreatedAt *string `pulumi:"createdAt"`
	// The minimal date and time on which you can delete this server due to Apple licence
	DeletableAt *string `pulumi:"deletableAt"`
	// : Enables the VPC option when set to true.
	EnableVpc *bool `pulumi:"enableVpc"`
	// IPv4 address of the server (IPv4 address).
	Ip *string `pulumi:"ip"`
	// The name of the server.
	Name *string `pulumi:"name"`
	// The organization ID the server is associated with.
	OrganizationId *string `pulumi:"organizationId"`
	// The private networks to attach to the server
	PrivateNetworks []AppleSiliconServerPrivateNetwork `pulumi:"privateNetworks"`
	// `projectId`) The ID of the project the server is
	// associated with.
	ProjectId *string `pulumi:"projectId"`
	// The state of the server.
	State *string `pulumi:"state"`
	// The commercial type of the server. You find all the available types on
	// the [pricing page](https://www.scaleway.com/en/pricing/apple-silicon/). Updates to this field will recreate a new
	// resource.
	Type *string `pulumi:"type"`
	// The date and time of the last update of the Apple Silicon server.
	UpdatedAt *string `pulumi:"updatedAt"`
	// URL of the VNC.
	VncUrl *string `pulumi:"vncUrl"`
	// The current status of the VPC option.
	VpcStatus *string `pulumi:"vpcStatus"`
	// `zone`) The zone in which
	// the server should be created.
	Zone *string `pulumi:"zone"`
}

type AppleSiliconServerState struct {
	// The date and time of the creation of the Apple Silicon server.
	CreatedAt pulumi.StringPtrInput
	// The minimal date and time on which you can delete this server due to Apple licence
	DeletableAt pulumi.StringPtrInput
	// : Enables the VPC option when set to true.
	EnableVpc pulumi.BoolPtrInput
	// IPv4 address of the server (IPv4 address).
	Ip pulumi.StringPtrInput
	// The name of the server.
	Name pulumi.StringPtrInput
	// The organization ID the server is associated with.
	OrganizationId pulumi.StringPtrInput
	// The private networks to attach to the server
	PrivateNetworks AppleSiliconServerPrivateNetworkArrayInput
	// `projectId`) The ID of the project the server is
	// associated with.
	ProjectId pulumi.StringPtrInput
	// The state of the server.
	State pulumi.StringPtrInput
	// The commercial type of the server. You find all the available types on
	// the [pricing page](https://www.scaleway.com/en/pricing/apple-silicon/). Updates to this field will recreate a new
	// resource.
	Type pulumi.StringPtrInput
	// The date and time of the last update of the Apple Silicon server.
	UpdatedAt pulumi.StringPtrInput
	// URL of the VNC.
	VncUrl pulumi.StringPtrInput
	// The current status of the VPC option.
	VpcStatus pulumi.StringPtrInput
	// `zone`) The zone in which
	// the server should be created.
	Zone pulumi.StringPtrInput
}

func (AppleSiliconServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*appleSiliconServerState)(nil)).Elem()
}

type appleSiliconServerArgs struct {
	// : Enables the VPC option when set to true.
	EnableVpc *bool `pulumi:"enableVpc"`
	// The name of the server.
	Name *string `pulumi:"name"`
	// The private networks to attach to the server
	PrivateNetworks []AppleSiliconServerPrivateNetwork `pulumi:"privateNetworks"`
	// `projectId`) The ID of the project the server is
	// associated with.
	ProjectId *string `pulumi:"projectId"`
	// The commercial type of the server. You find all the available types on
	// the [pricing page](https://www.scaleway.com/en/pricing/apple-silicon/). Updates to this field will recreate a new
	// resource.
	Type string `pulumi:"type"`
	// `zone`) The zone in which
	// the server should be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a AppleSiliconServer resource.
type AppleSiliconServerArgs struct {
	// : Enables the VPC option when set to true.
	EnableVpc pulumi.BoolPtrInput
	// The name of the server.
	Name pulumi.StringPtrInput
	// The private networks to attach to the server
	PrivateNetworks AppleSiliconServerPrivateNetworkArrayInput
	// `projectId`) The ID of the project the server is
	// associated with.
	ProjectId pulumi.StringPtrInput
	// The commercial type of the server. You find all the available types on
	// the [pricing page](https://www.scaleway.com/en/pricing/apple-silicon/). Updates to this field will recreate a new
	// resource.
	Type pulumi.StringInput
	// `zone`) The zone in which
	// the server should be created.
	Zone pulumi.StringPtrInput
}

func (AppleSiliconServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appleSiliconServerArgs)(nil)).Elem()
}

type AppleSiliconServerInput interface {
	pulumi.Input

	ToAppleSiliconServerOutput() AppleSiliconServerOutput
	ToAppleSiliconServerOutputWithContext(ctx context.Context) AppleSiliconServerOutput
}

func (*AppleSiliconServer) ElementType() reflect.Type {
	return reflect.TypeOf((**AppleSiliconServer)(nil)).Elem()
}

func (i *AppleSiliconServer) ToAppleSiliconServerOutput() AppleSiliconServerOutput {
	return i.ToAppleSiliconServerOutputWithContext(context.Background())
}

func (i *AppleSiliconServer) ToAppleSiliconServerOutputWithContext(ctx context.Context) AppleSiliconServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppleSiliconServerOutput)
}

// AppleSiliconServerArrayInput is an input type that accepts AppleSiliconServerArray and AppleSiliconServerArrayOutput values.
// You can construct a concrete instance of `AppleSiliconServerArrayInput` via:
//
//	AppleSiliconServerArray{ AppleSiliconServerArgs{...} }
type AppleSiliconServerArrayInput interface {
	pulumi.Input

	ToAppleSiliconServerArrayOutput() AppleSiliconServerArrayOutput
	ToAppleSiliconServerArrayOutputWithContext(context.Context) AppleSiliconServerArrayOutput
}

type AppleSiliconServerArray []AppleSiliconServerInput

func (AppleSiliconServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppleSiliconServer)(nil)).Elem()
}

func (i AppleSiliconServerArray) ToAppleSiliconServerArrayOutput() AppleSiliconServerArrayOutput {
	return i.ToAppleSiliconServerArrayOutputWithContext(context.Background())
}

func (i AppleSiliconServerArray) ToAppleSiliconServerArrayOutputWithContext(ctx context.Context) AppleSiliconServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppleSiliconServerArrayOutput)
}

// AppleSiliconServerMapInput is an input type that accepts AppleSiliconServerMap and AppleSiliconServerMapOutput values.
// You can construct a concrete instance of `AppleSiliconServerMapInput` via:
//
//	AppleSiliconServerMap{ "key": AppleSiliconServerArgs{...} }
type AppleSiliconServerMapInput interface {
	pulumi.Input

	ToAppleSiliconServerMapOutput() AppleSiliconServerMapOutput
	ToAppleSiliconServerMapOutputWithContext(context.Context) AppleSiliconServerMapOutput
}

type AppleSiliconServerMap map[string]AppleSiliconServerInput

func (AppleSiliconServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppleSiliconServer)(nil)).Elem()
}

func (i AppleSiliconServerMap) ToAppleSiliconServerMapOutput() AppleSiliconServerMapOutput {
	return i.ToAppleSiliconServerMapOutputWithContext(context.Background())
}

func (i AppleSiliconServerMap) ToAppleSiliconServerMapOutputWithContext(ctx context.Context) AppleSiliconServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppleSiliconServerMapOutput)
}

type AppleSiliconServerOutput struct{ *pulumi.OutputState }

func (AppleSiliconServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppleSiliconServer)(nil)).Elem()
}

func (o AppleSiliconServerOutput) ToAppleSiliconServerOutput() AppleSiliconServerOutput {
	return o
}

func (o AppleSiliconServerOutput) ToAppleSiliconServerOutputWithContext(ctx context.Context) AppleSiliconServerOutput {
	return o
}

// The date and time of the creation of the Apple Silicon server.
func (o AppleSiliconServerOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *AppleSiliconServer) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The minimal date and time on which you can delete this server due to Apple licence
func (o AppleSiliconServerOutput) DeletableAt() pulumi.StringOutput {
	return o.ApplyT(func(v *AppleSiliconServer) pulumi.StringOutput { return v.DeletableAt }).(pulumi.StringOutput)
}

// : Enables the VPC option when set to true.
func (o AppleSiliconServerOutput) EnableVpc() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppleSiliconServer) pulumi.BoolPtrOutput { return v.EnableVpc }).(pulumi.BoolPtrOutput)
}

// IPv4 address of the server (IPv4 address).
func (o AppleSiliconServerOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *AppleSiliconServer) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// The name of the server.
func (o AppleSiliconServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppleSiliconServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The organization ID the server is associated with.
func (o AppleSiliconServerOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppleSiliconServer) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The private networks to attach to the server
func (o AppleSiliconServerOutput) PrivateNetworks() AppleSiliconServerPrivateNetworkArrayOutput {
	return o.ApplyT(func(v *AppleSiliconServer) AppleSiliconServerPrivateNetworkArrayOutput { return v.PrivateNetworks }).(AppleSiliconServerPrivateNetworkArrayOutput)
}

// `projectId`) The ID of the project the server is
// associated with.
func (o AppleSiliconServerOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppleSiliconServer) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The state of the server.
func (o AppleSiliconServerOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *AppleSiliconServer) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The commercial type of the server. You find all the available types on
// the [pricing page](https://www.scaleway.com/en/pricing/apple-silicon/). Updates to this field will recreate a new
// resource.
func (o AppleSiliconServerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AppleSiliconServer) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The date and time of the last update of the Apple Silicon server.
func (o AppleSiliconServerOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *AppleSiliconServer) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// URL of the VNC.
func (o AppleSiliconServerOutput) VncUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *AppleSiliconServer) pulumi.StringOutput { return v.VncUrl }).(pulumi.StringOutput)
}

// The current status of the VPC option.
func (o AppleSiliconServerOutput) VpcStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *AppleSiliconServer) pulumi.StringOutput { return v.VpcStatus }).(pulumi.StringOutput)
}

// `zone`) The zone in which
// the server should be created.
func (o AppleSiliconServerOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *AppleSiliconServer) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type AppleSiliconServerArrayOutput struct{ *pulumi.OutputState }

func (AppleSiliconServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppleSiliconServer)(nil)).Elem()
}

func (o AppleSiliconServerArrayOutput) ToAppleSiliconServerArrayOutput() AppleSiliconServerArrayOutput {
	return o
}

func (o AppleSiliconServerArrayOutput) ToAppleSiliconServerArrayOutputWithContext(ctx context.Context) AppleSiliconServerArrayOutput {
	return o
}

func (o AppleSiliconServerArrayOutput) Index(i pulumi.IntInput) AppleSiliconServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppleSiliconServer {
		return vs[0].([]*AppleSiliconServer)[vs[1].(int)]
	}).(AppleSiliconServerOutput)
}

type AppleSiliconServerMapOutput struct{ *pulumi.OutputState }

func (AppleSiliconServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppleSiliconServer)(nil)).Elem()
}

func (o AppleSiliconServerMapOutput) ToAppleSiliconServerMapOutput() AppleSiliconServerMapOutput {
	return o
}

func (o AppleSiliconServerMapOutput) ToAppleSiliconServerMapOutputWithContext(ctx context.Context) AppleSiliconServerMapOutput {
	return o
}

func (o AppleSiliconServerMapOutput) MapIndex(k pulumi.StringInput) AppleSiliconServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppleSiliconServer {
		return vs[0].(map[string]*AppleSiliconServer)[vs[1].(string)]
	}).(AppleSiliconServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppleSiliconServerInput)(nil)).Elem(), &AppleSiliconServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppleSiliconServerArrayInput)(nil)).Elem(), AppleSiliconServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppleSiliconServerMapInput)(nil)).Elem(), AppleSiliconServerMap{})
	pulumi.RegisterOutputType(AppleSiliconServerOutput{})
	pulumi.RegisterOutputType(AppleSiliconServerArrayOutput{})
	pulumi.RegisterOutputType(AppleSiliconServerMapOutput{})
}
