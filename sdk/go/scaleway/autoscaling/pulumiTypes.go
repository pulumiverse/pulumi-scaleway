// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autoscaling

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

var _ = internal.GetEnvOrDefault

type InstanceGroupCapacity struct {
	// Time (in seconds) after a scaling action during which requests to carry out a new scaling action will be denied.
	CooldownDelay *int `pulumi:"cooldownDelay"`
	// The maximum count of Instances for the Instance group.
	MaxReplicas *int `pulumi:"maxReplicas"`
	// The minimum count of Instances for the Instance group.
	MinReplicas *int `pulumi:"minReplicas"`
}

// InstanceGroupCapacityInput is an input type that accepts InstanceGroupCapacityArgs and InstanceGroupCapacityOutput values.
// You can construct a concrete instance of `InstanceGroupCapacityInput` via:
//
//	InstanceGroupCapacityArgs{...}
type InstanceGroupCapacityInput interface {
	pulumi.Input

	ToInstanceGroupCapacityOutput() InstanceGroupCapacityOutput
	ToInstanceGroupCapacityOutputWithContext(context.Context) InstanceGroupCapacityOutput
}

type InstanceGroupCapacityArgs struct {
	// Time (in seconds) after a scaling action during which requests to carry out a new scaling action will be denied.
	CooldownDelay pulumi.IntPtrInput `pulumi:"cooldownDelay"`
	// The maximum count of Instances for the Instance group.
	MaxReplicas pulumi.IntPtrInput `pulumi:"maxReplicas"`
	// The minimum count of Instances for the Instance group.
	MinReplicas pulumi.IntPtrInput `pulumi:"minReplicas"`
}

func (InstanceGroupCapacityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupCapacity)(nil)).Elem()
}

func (i InstanceGroupCapacityArgs) ToInstanceGroupCapacityOutput() InstanceGroupCapacityOutput {
	return i.ToInstanceGroupCapacityOutputWithContext(context.Background())
}

func (i InstanceGroupCapacityArgs) ToInstanceGroupCapacityOutputWithContext(ctx context.Context) InstanceGroupCapacityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupCapacityOutput)
}

// InstanceGroupCapacityArrayInput is an input type that accepts InstanceGroupCapacityArray and InstanceGroupCapacityArrayOutput values.
// You can construct a concrete instance of `InstanceGroupCapacityArrayInput` via:
//
//	InstanceGroupCapacityArray{ InstanceGroupCapacityArgs{...} }
type InstanceGroupCapacityArrayInput interface {
	pulumi.Input

	ToInstanceGroupCapacityArrayOutput() InstanceGroupCapacityArrayOutput
	ToInstanceGroupCapacityArrayOutputWithContext(context.Context) InstanceGroupCapacityArrayOutput
}

type InstanceGroupCapacityArray []InstanceGroupCapacityInput

func (InstanceGroupCapacityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGroupCapacity)(nil)).Elem()
}

func (i InstanceGroupCapacityArray) ToInstanceGroupCapacityArrayOutput() InstanceGroupCapacityArrayOutput {
	return i.ToInstanceGroupCapacityArrayOutputWithContext(context.Background())
}

func (i InstanceGroupCapacityArray) ToInstanceGroupCapacityArrayOutputWithContext(ctx context.Context) InstanceGroupCapacityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupCapacityArrayOutput)
}

type InstanceGroupCapacityOutput struct{ *pulumi.OutputState }

func (InstanceGroupCapacityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupCapacity)(nil)).Elem()
}

func (o InstanceGroupCapacityOutput) ToInstanceGroupCapacityOutput() InstanceGroupCapacityOutput {
	return o
}

func (o InstanceGroupCapacityOutput) ToInstanceGroupCapacityOutputWithContext(ctx context.Context) InstanceGroupCapacityOutput {
	return o
}

// Time (in seconds) after a scaling action during which requests to carry out a new scaling action will be denied.
func (o InstanceGroupCapacityOutput) CooldownDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceGroupCapacity) *int { return v.CooldownDelay }).(pulumi.IntPtrOutput)
}

// The maximum count of Instances for the Instance group.
func (o InstanceGroupCapacityOutput) MaxReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceGroupCapacity) *int { return v.MaxReplicas }).(pulumi.IntPtrOutput)
}

// The minimum count of Instances for the Instance group.
func (o InstanceGroupCapacityOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceGroupCapacity) *int { return v.MinReplicas }).(pulumi.IntPtrOutput)
}

type InstanceGroupCapacityArrayOutput struct{ *pulumi.OutputState }

func (InstanceGroupCapacityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGroupCapacity)(nil)).Elem()
}

func (o InstanceGroupCapacityArrayOutput) ToInstanceGroupCapacityArrayOutput() InstanceGroupCapacityArrayOutput {
	return o
}

func (o InstanceGroupCapacityArrayOutput) ToInstanceGroupCapacityArrayOutputWithContext(ctx context.Context) InstanceGroupCapacityArrayOutput {
	return o
}

func (o InstanceGroupCapacityArrayOutput) Index(i pulumi.IntInput) InstanceGroupCapacityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceGroupCapacity {
		return vs[0].([]InstanceGroupCapacity)[vs[1].(int)]
	}).(InstanceGroupCapacityOutput)
}

type InstanceGroupLoadBalancer struct {
	// The Load Balancer backend IDs.
	BackendIds []string `pulumi:"backendIds"`
	// The ID of the Load Balancer.
	Id *string `pulumi:"id"`
	// The ID of the Private Network attached to the Load Balancer.
	PrivateNetworkId *string `pulumi:"privateNetworkId"`
}

// InstanceGroupLoadBalancerInput is an input type that accepts InstanceGroupLoadBalancerArgs and InstanceGroupLoadBalancerOutput values.
// You can construct a concrete instance of `InstanceGroupLoadBalancerInput` via:
//
//	InstanceGroupLoadBalancerArgs{...}
type InstanceGroupLoadBalancerInput interface {
	pulumi.Input

	ToInstanceGroupLoadBalancerOutput() InstanceGroupLoadBalancerOutput
	ToInstanceGroupLoadBalancerOutputWithContext(context.Context) InstanceGroupLoadBalancerOutput
}

type InstanceGroupLoadBalancerArgs struct {
	// The Load Balancer backend IDs.
	BackendIds pulumi.StringArrayInput `pulumi:"backendIds"`
	// The ID of the Load Balancer.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The ID of the Private Network attached to the Load Balancer.
	PrivateNetworkId pulumi.StringPtrInput `pulumi:"privateNetworkId"`
}

func (InstanceGroupLoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupLoadBalancer)(nil)).Elem()
}

func (i InstanceGroupLoadBalancerArgs) ToInstanceGroupLoadBalancerOutput() InstanceGroupLoadBalancerOutput {
	return i.ToInstanceGroupLoadBalancerOutputWithContext(context.Background())
}

func (i InstanceGroupLoadBalancerArgs) ToInstanceGroupLoadBalancerOutputWithContext(ctx context.Context) InstanceGroupLoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupLoadBalancerOutput)
}

// InstanceGroupLoadBalancerArrayInput is an input type that accepts InstanceGroupLoadBalancerArray and InstanceGroupLoadBalancerArrayOutput values.
// You can construct a concrete instance of `InstanceGroupLoadBalancerArrayInput` via:
//
//	InstanceGroupLoadBalancerArray{ InstanceGroupLoadBalancerArgs{...} }
type InstanceGroupLoadBalancerArrayInput interface {
	pulumi.Input

	ToInstanceGroupLoadBalancerArrayOutput() InstanceGroupLoadBalancerArrayOutput
	ToInstanceGroupLoadBalancerArrayOutputWithContext(context.Context) InstanceGroupLoadBalancerArrayOutput
}

type InstanceGroupLoadBalancerArray []InstanceGroupLoadBalancerInput

func (InstanceGroupLoadBalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGroupLoadBalancer)(nil)).Elem()
}

func (i InstanceGroupLoadBalancerArray) ToInstanceGroupLoadBalancerArrayOutput() InstanceGroupLoadBalancerArrayOutput {
	return i.ToInstanceGroupLoadBalancerArrayOutputWithContext(context.Background())
}

func (i InstanceGroupLoadBalancerArray) ToInstanceGroupLoadBalancerArrayOutputWithContext(ctx context.Context) InstanceGroupLoadBalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupLoadBalancerArrayOutput)
}

type InstanceGroupLoadBalancerOutput struct{ *pulumi.OutputState }

func (InstanceGroupLoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupLoadBalancer)(nil)).Elem()
}

func (o InstanceGroupLoadBalancerOutput) ToInstanceGroupLoadBalancerOutput() InstanceGroupLoadBalancerOutput {
	return o
}

func (o InstanceGroupLoadBalancerOutput) ToInstanceGroupLoadBalancerOutputWithContext(ctx context.Context) InstanceGroupLoadBalancerOutput {
	return o
}

// The Load Balancer backend IDs.
func (o InstanceGroupLoadBalancerOutput) BackendIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceGroupLoadBalancer) []string { return v.BackendIds }).(pulumi.StringArrayOutput)
}

// The ID of the Load Balancer.
func (o InstanceGroupLoadBalancerOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceGroupLoadBalancer) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The ID of the Private Network attached to the Load Balancer.
func (o InstanceGroupLoadBalancerOutput) PrivateNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceGroupLoadBalancer) *string { return v.PrivateNetworkId }).(pulumi.StringPtrOutput)
}

type InstanceGroupLoadBalancerArrayOutput struct{ *pulumi.OutputState }

func (InstanceGroupLoadBalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGroupLoadBalancer)(nil)).Elem()
}

func (o InstanceGroupLoadBalancerArrayOutput) ToInstanceGroupLoadBalancerArrayOutput() InstanceGroupLoadBalancerArrayOutput {
	return o
}

func (o InstanceGroupLoadBalancerArrayOutput) ToInstanceGroupLoadBalancerArrayOutputWithContext(ctx context.Context) InstanceGroupLoadBalancerArrayOutput {
	return o
}

func (o InstanceGroupLoadBalancerArrayOutput) Index(i pulumi.IntInput) InstanceGroupLoadBalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceGroupLoadBalancer {
		return vs[0].([]InstanceGroupLoadBalancer)[vs[1].(int)]
	}).(InstanceGroupLoadBalancerOutput)
}

type InstancePolicyMetric struct {
	// How the values sampled for the `metric` should be aggregated.
	Aggregate string `pulumi:"aggregate"`
	// The custom metric to use for this policy. This must be stored in Scaleway Cockpit. The metric forms the basis of the condition that will be checked to determine whether a scaling action should be triggered
	CockpitMetricName *string `pulumi:"cockpitMetricName"`
	// The managed metric to use for this policy. These are available by default in Cockpit without any configuration or `nodeExporter`. The chosen metric forms the basis of the condition that will be checked to determine whether a scaling action should be triggered.
	ManagedMetric *string `pulumi:"managedMetric"`
	// Name or description of the metric policy.
	Name string `pulumi:"name"`
	// Operator used when comparing the threshold value of the chosen `metric` to the actual sampled and aggregated value.
	Operator string `pulumi:"operator"`
	// The Interval of time, in minutes, during which metric is sampled.
	SamplingRangeMin *int `pulumi:"samplingRangeMin"`
	// The threshold value to measure the aggregated sampled `metric` value against. Combined with the `operator` field, determines whether a scaling action should be triggered.
	Threshold *int `pulumi:"threshold"`
}

// InstancePolicyMetricInput is an input type that accepts InstancePolicyMetricArgs and InstancePolicyMetricOutput values.
// You can construct a concrete instance of `InstancePolicyMetricInput` via:
//
//	InstancePolicyMetricArgs{...}
type InstancePolicyMetricInput interface {
	pulumi.Input

	ToInstancePolicyMetricOutput() InstancePolicyMetricOutput
	ToInstancePolicyMetricOutputWithContext(context.Context) InstancePolicyMetricOutput
}

type InstancePolicyMetricArgs struct {
	// How the values sampled for the `metric` should be aggregated.
	Aggregate pulumi.StringInput `pulumi:"aggregate"`
	// The custom metric to use for this policy. This must be stored in Scaleway Cockpit. The metric forms the basis of the condition that will be checked to determine whether a scaling action should be triggered
	CockpitMetricName pulumi.StringPtrInput `pulumi:"cockpitMetricName"`
	// The managed metric to use for this policy. These are available by default in Cockpit without any configuration or `nodeExporter`. The chosen metric forms the basis of the condition that will be checked to determine whether a scaling action should be triggered.
	ManagedMetric pulumi.StringPtrInput `pulumi:"managedMetric"`
	// Name or description of the metric policy.
	Name pulumi.StringInput `pulumi:"name"`
	// Operator used when comparing the threshold value of the chosen `metric` to the actual sampled and aggregated value.
	Operator pulumi.StringInput `pulumi:"operator"`
	// The Interval of time, in minutes, during which metric is sampled.
	SamplingRangeMin pulumi.IntPtrInput `pulumi:"samplingRangeMin"`
	// The threshold value to measure the aggregated sampled `metric` value against. Combined with the `operator` field, determines whether a scaling action should be triggered.
	Threshold pulumi.IntPtrInput `pulumi:"threshold"`
}

func (InstancePolicyMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancePolicyMetric)(nil)).Elem()
}

func (i InstancePolicyMetricArgs) ToInstancePolicyMetricOutput() InstancePolicyMetricOutput {
	return i.ToInstancePolicyMetricOutputWithContext(context.Background())
}

func (i InstancePolicyMetricArgs) ToInstancePolicyMetricOutputWithContext(ctx context.Context) InstancePolicyMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePolicyMetricOutput)
}

// InstancePolicyMetricArrayInput is an input type that accepts InstancePolicyMetricArray and InstancePolicyMetricArrayOutput values.
// You can construct a concrete instance of `InstancePolicyMetricArrayInput` via:
//
//	InstancePolicyMetricArray{ InstancePolicyMetricArgs{...} }
type InstancePolicyMetricArrayInput interface {
	pulumi.Input

	ToInstancePolicyMetricArrayOutput() InstancePolicyMetricArrayOutput
	ToInstancePolicyMetricArrayOutputWithContext(context.Context) InstancePolicyMetricArrayOutput
}

type InstancePolicyMetricArray []InstancePolicyMetricInput

func (InstancePolicyMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancePolicyMetric)(nil)).Elem()
}

func (i InstancePolicyMetricArray) ToInstancePolicyMetricArrayOutput() InstancePolicyMetricArrayOutput {
	return i.ToInstancePolicyMetricArrayOutputWithContext(context.Background())
}

func (i InstancePolicyMetricArray) ToInstancePolicyMetricArrayOutputWithContext(ctx context.Context) InstancePolicyMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePolicyMetricArrayOutput)
}

type InstancePolicyMetricOutput struct{ *pulumi.OutputState }

func (InstancePolicyMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancePolicyMetric)(nil)).Elem()
}

func (o InstancePolicyMetricOutput) ToInstancePolicyMetricOutput() InstancePolicyMetricOutput {
	return o
}

func (o InstancePolicyMetricOutput) ToInstancePolicyMetricOutputWithContext(ctx context.Context) InstancePolicyMetricOutput {
	return o
}

// How the values sampled for the `metric` should be aggregated.
func (o InstancePolicyMetricOutput) Aggregate() pulumi.StringOutput {
	return o.ApplyT(func(v InstancePolicyMetric) string { return v.Aggregate }).(pulumi.StringOutput)
}

// The custom metric to use for this policy. This must be stored in Scaleway Cockpit. The metric forms the basis of the condition that will be checked to determine whether a scaling action should be triggered
func (o InstancePolicyMetricOutput) CockpitMetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstancePolicyMetric) *string { return v.CockpitMetricName }).(pulumi.StringPtrOutput)
}

// The managed metric to use for this policy. These are available by default in Cockpit without any configuration or `nodeExporter`. The chosen metric forms the basis of the condition that will be checked to determine whether a scaling action should be triggered.
func (o InstancePolicyMetricOutput) ManagedMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstancePolicyMetric) *string { return v.ManagedMetric }).(pulumi.StringPtrOutput)
}

// Name or description of the metric policy.
func (o InstancePolicyMetricOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InstancePolicyMetric) string { return v.Name }).(pulumi.StringOutput)
}

// Operator used when comparing the threshold value of the chosen `metric` to the actual sampled and aggregated value.
func (o InstancePolicyMetricOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v InstancePolicyMetric) string { return v.Operator }).(pulumi.StringOutput)
}

// The Interval of time, in minutes, during which metric is sampled.
func (o InstancePolicyMetricOutput) SamplingRangeMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstancePolicyMetric) *int { return v.SamplingRangeMin }).(pulumi.IntPtrOutput)
}

// The threshold value to measure the aggregated sampled `metric` value against. Combined with the `operator` field, determines whether a scaling action should be triggered.
func (o InstancePolicyMetricOutput) Threshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstancePolicyMetric) *int { return v.Threshold }).(pulumi.IntPtrOutput)
}

type InstancePolicyMetricArrayOutput struct{ *pulumi.OutputState }

func (InstancePolicyMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancePolicyMetric)(nil)).Elem()
}

func (o InstancePolicyMetricArrayOutput) ToInstancePolicyMetricArrayOutput() InstancePolicyMetricArrayOutput {
	return o
}

func (o InstancePolicyMetricArrayOutput) ToInstancePolicyMetricArrayOutputWithContext(ctx context.Context) InstancePolicyMetricArrayOutput {
	return o
}

func (o InstancePolicyMetricArrayOutput) Index(i pulumi.IntInput) InstancePolicyMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancePolicyMetric {
		return vs[0].([]InstancePolicyMetric)[vs[1].(int)]
	}).(InstancePolicyMetricOutput)
}

type InstanceTemplateVolume struct {
	// Force the Instance to boot on this volume.
	Boot *bool `pulumi:"boot"`
	// Volume instance template from empty
	FromEmpty *InstanceTemplateVolumeFromEmpty `pulumi:"fromEmpty"`
	// Volume instance template from snapshot
	FromSnapshot *InstanceTemplateVolumeFromSnapshot `pulumi:"fromSnapshot"`
	// The name of the volume.
	Name string `pulumi:"name"`
	// The maximum IO/s expected, according to the different options available in stock (`5000 | 15000`).
	PerfIops *int `pulumi:"perfIops"`
	// The list of tags assigned to the volume.
	Tags []string `pulumi:"tags"`
	// The type of the volume.
	VolumeType string `pulumi:"volumeType"`
}

// InstanceTemplateVolumeInput is an input type that accepts InstanceTemplateVolumeArgs and InstanceTemplateVolumeOutput values.
// You can construct a concrete instance of `InstanceTemplateVolumeInput` via:
//
//	InstanceTemplateVolumeArgs{...}
type InstanceTemplateVolumeInput interface {
	pulumi.Input

	ToInstanceTemplateVolumeOutput() InstanceTemplateVolumeOutput
	ToInstanceTemplateVolumeOutputWithContext(context.Context) InstanceTemplateVolumeOutput
}

type InstanceTemplateVolumeArgs struct {
	// Force the Instance to boot on this volume.
	Boot pulumi.BoolPtrInput `pulumi:"boot"`
	// Volume instance template from empty
	FromEmpty InstanceTemplateVolumeFromEmptyPtrInput `pulumi:"fromEmpty"`
	// Volume instance template from snapshot
	FromSnapshot InstanceTemplateVolumeFromSnapshotPtrInput `pulumi:"fromSnapshot"`
	// The name of the volume.
	Name pulumi.StringInput `pulumi:"name"`
	// The maximum IO/s expected, according to the different options available in stock (`5000 | 15000`).
	PerfIops pulumi.IntPtrInput `pulumi:"perfIops"`
	// The list of tags assigned to the volume.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// The type of the volume.
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
}

func (InstanceTemplateVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateVolume)(nil)).Elem()
}

func (i InstanceTemplateVolumeArgs) ToInstanceTemplateVolumeOutput() InstanceTemplateVolumeOutput {
	return i.ToInstanceTemplateVolumeOutputWithContext(context.Background())
}

func (i InstanceTemplateVolumeArgs) ToInstanceTemplateVolumeOutputWithContext(ctx context.Context) InstanceTemplateVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateVolumeOutput)
}

// InstanceTemplateVolumeArrayInput is an input type that accepts InstanceTemplateVolumeArray and InstanceTemplateVolumeArrayOutput values.
// You can construct a concrete instance of `InstanceTemplateVolumeArrayInput` via:
//
//	InstanceTemplateVolumeArray{ InstanceTemplateVolumeArgs{...} }
type InstanceTemplateVolumeArrayInput interface {
	pulumi.Input

	ToInstanceTemplateVolumeArrayOutput() InstanceTemplateVolumeArrayOutput
	ToInstanceTemplateVolumeArrayOutputWithContext(context.Context) InstanceTemplateVolumeArrayOutput
}

type InstanceTemplateVolumeArray []InstanceTemplateVolumeInput

func (InstanceTemplateVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTemplateVolume)(nil)).Elem()
}

func (i InstanceTemplateVolumeArray) ToInstanceTemplateVolumeArrayOutput() InstanceTemplateVolumeArrayOutput {
	return i.ToInstanceTemplateVolumeArrayOutputWithContext(context.Background())
}

func (i InstanceTemplateVolumeArray) ToInstanceTemplateVolumeArrayOutputWithContext(ctx context.Context) InstanceTemplateVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateVolumeArrayOutput)
}

type InstanceTemplateVolumeOutput struct{ *pulumi.OutputState }

func (InstanceTemplateVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateVolume)(nil)).Elem()
}

func (o InstanceTemplateVolumeOutput) ToInstanceTemplateVolumeOutput() InstanceTemplateVolumeOutput {
	return o
}

func (o InstanceTemplateVolumeOutput) ToInstanceTemplateVolumeOutputWithContext(ctx context.Context) InstanceTemplateVolumeOutput {
	return o
}

// Force the Instance to boot on this volume.
func (o InstanceTemplateVolumeOutput) Boot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceTemplateVolume) *bool { return v.Boot }).(pulumi.BoolPtrOutput)
}

// Volume instance template from empty
func (o InstanceTemplateVolumeOutput) FromEmpty() InstanceTemplateVolumeFromEmptyPtrOutput {
	return o.ApplyT(func(v InstanceTemplateVolume) *InstanceTemplateVolumeFromEmpty { return v.FromEmpty }).(InstanceTemplateVolumeFromEmptyPtrOutput)
}

// Volume instance template from snapshot
func (o InstanceTemplateVolumeOutput) FromSnapshot() InstanceTemplateVolumeFromSnapshotPtrOutput {
	return o.ApplyT(func(v InstanceTemplateVolume) *InstanceTemplateVolumeFromSnapshot { return v.FromSnapshot }).(InstanceTemplateVolumeFromSnapshotPtrOutput)
}

// The name of the volume.
func (o InstanceTemplateVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTemplateVolume) string { return v.Name }).(pulumi.StringOutput)
}

// The maximum IO/s expected, according to the different options available in stock (`5000 | 15000`).
func (o InstanceTemplateVolumeOutput) PerfIops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceTemplateVolume) *int { return v.PerfIops }).(pulumi.IntPtrOutput)
}

// The list of tags assigned to the volume.
func (o InstanceTemplateVolumeOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceTemplateVolume) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The type of the volume.
func (o InstanceTemplateVolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTemplateVolume) string { return v.VolumeType }).(pulumi.StringOutput)
}

type InstanceTemplateVolumeArrayOutput struct{ *pulumi.OutputState }

func (InstanceTemplateVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTemplateVolume)(nil)).Elem()
}

func (o InstanceTemplateVolumeArrayOutput) ToInstanceTemplateVolumeArrayOutput() InstanceTemplateVolumeArrayOutput {
	return o
}

func (o InstanceTemplateVolumeArrayOutput) ToInstanceTemplateVolumeArrayOutputWithContext(ctx context.Context) InstanceTemplateVolumeArrayOutput {
	return o
}

func (o InstanceTemplateVolumeArrayOutput) Index(i pulumi.IntInput) InstanceTemplateVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTemplateVolume {
		return vs[0].([]InstanceTemplateVolume)[vs[1].(int)]
	}).(InstanceTemplateVolumeOutput)
}

type InstanceTemplateVolumeFromEmpty struct {
	// Size in GB of the new empty volume
	Size int `pulumi:"size"`
}

// InstanceTemplateVolumeFromEmptyInput is an input type that accepts InstanceTemplateVolumeFromEmptyArgs and InstanceTemplateVolumeFromEmptyOutput values.
// You can construct a concrete instance of `InstanceTemplateVolumeFromEmptyInput` via:
//
//	InstanceTemplateVolumeFromEmptyArgs{...}
type InstanceTemplateVolumeFromEmptyInput interface {
	pulumi.Input

	ToInstanceTemplateVolumeFromEmptyOutput() InstanceTemplateVolumeFromEmptyOutput
	ToInstanceTemplateVolumeFromEmptyOutputWithContext(context.Context) InstanceTemplateVolumeFromEmptyOutput
}

type InstanceTemplateVolumeFromEmptyArgs struct {
	// Size in GB of the new empty volume
	Size pulumi.IntInput `pulumi:"size"`
}

func (InstanceTemplateVolumeFromEmptyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateVolumeFromEmpty)(nil)).Elem()
}

func (i InstanceTemplateVolumeFromEmptyArgs) ToInstanceTemplateVolumeFromEmptyOutput() InstanceTemplateVolumeFromEmptyOutput {
	return i.ToInstanceTemplateVolumeFromEmptyOutputWithContext(context.Background())
}

func (i InstanceTemplateVolumeFromEmptyArgs) ToInstanceTemplateVolumeFromEmptyOutputWithContext(ctx context.Context) InstanceTemplateVolumeFromEmptyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateVolumeFromEmptyOutput)
}

func (i InstanceTemplateVolumeFromEmptyArgs) ToInstanceTemplateVolumeFromEmptyPtrOutput() InstanceTemplateVolumeFromEmptyPtrOutput {
	return i.ToInstanceTemplateVolumeFromEmptyPtrOutputWithContext(context.Background())
}

func (i InstanceTemplateVolumeFromEmptyArgs) ToInstanceTemplateVolumeFromEmptyPtrOutputWithContext(ctx context.Context) InstanceTemplateVolumeFromEmptyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateVolumeFromEmptyOutput).ToInstanceTemplateVolumeFromEmptyPtrOutputWithContext(ctx)
}

// InstanceTemplateVolumeFromEmptyPtrInput is an input type that accepts InstanceTemplateVolumeFromEmptyArgs, InstanceTemplateVolumeFromEmptyPtr and InstanceTemplateVolumeFromEmptyPtrOutput values.
// You can construct a concrete instance of `InstanceTemplateVolumeFromEmptyPtrInput` via:
//
//	        InstanceTemplateVolumeFromEmptyArgs{...}
//
//	or:
//
//	        nil
type InstanceTemplateVolumeFromEmptyPtrInput interface {
	pulumi.Input

	ToInstanceTemplateVolumeFromEmptyPtrOutput() InstanceTemplateVolumeFromEmptyPtrOutput
	ToInstanceTemplateVolumeFromEmptyPtrOutputWithContext(context.Context) InstanceTemplateVolumeFromEmptyPtrOutput
}

type instanceTemplateVolumeFromEmptyPtrType InstanceTemplateVolumeFromEmptyArgs

func InstanceTemplateVolumeFromEmptyPtr(v *InstanceTemplateVolumeFromEmptyArgs) InstanceTemplateVolumeFromEmptyPtrInput {
	return (*instanceTemplateVolumeFromEmptyPtrType)(v)
}

func (*instanceTemplateVolumeFromEmptyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceTemplateVolumeFromEmpty)(nil)).Elem()
}

func (i *instanceTemplateVolumeFromEmptyPtrType) ToInstanceTemplateVolumeFromEmptyPtrOutput() InstanceTemplateVolumeFromEmptyPtrOutput {
	return i.ToInstanceTemplateVolumeFromEmptyPtrOutputWithContext(context.Background())
}

func (i *instanceTemplateVolumeFromEmptyPtrType) ToInstanceTemplateVolumeFromEmptyPtrOutputWithContext(ctx context.Context) InstanceTemplateVolumeFromEmptyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateVolumeFromEmptyPtrOutput)
}

type InstanceTemplateVolumeFromEmptyOutput struct{ *pulumi.OutputState }

func (InstanceTemplateVolumeFromEmptyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateVolumeFromEmpty)(nil)).Elem()
}

func (o InstanceTemplateVolumeFromEmptyOutput) ToInstanceTemplateVolumeFromEmptyOutput() InstanceTemplateVolumeFromEmptyOutput {
	return o
}

func (o InstanceTemplateVolumeFromEmptyOutput) ToInstanceTemplateVolumeFromEmptyOutputWithContext(ctx context.Context) InstanceTemplateVolumeFromEmptyOutput {
	return o
}

func (o InstanceTemplateVolumeFromEmptyOutput) ToInstanceTemplateVolumeFromEmptyPtrOutput() InstanceTemplateVolumeFromEmptyPtrOutput {
	return o.ToInstanceTemplateVolumeFromEmptyPtrOutputWithContext(context.Background())
}

func (o InstanceTemplateVolumeFromEmptyOutput) ToInstanceTemplateVolumeFromEmptyPtrOutputWithContext(ctx context.Context) InstanceTemplateVolumeFromEmptyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceTemplateVolumeFromEmpty) *InstanceTemplateVolumeFromEmpty {
		return &v
	}).(InstanceTemplateVolumeFromEmptyPtrOutput)
}

// Size in GB of the new empty volume
func (o InstanceTemplateVolumeFromEmptyOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTemplateVolumeFromEmpty) int { return v.Size }).(pulumi.IntOutput)
}

type InstanceTemplateVolumeFromEmptyPtrOutput struct{ *pulumi.OutputState }

func (InstanceTemplateVolumeFromEmptyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceTemplateVolumeFromEmpty)(nil)).Elem()
}

func (o InstanceTemplateVolumeFromEmptyPtrOutput) ToInstanceTemplateVolumeFromEmptyPtrOutput() InstanceTemplateVolumeFromEmptyPtrOutput {
	return o
}

func (o InstanceTemplateVolumeFromEmptyPtrOutput) ToInstanceTemplateVolumeFromEmptyPtrOutputWithContext(ctx context.Context) InstanceTemplateVolumeFromEmptyPtrOutput {
	return o
}

func (o InstanceTemplateVolumeFromEmptyPtrOutput) Elem() InstanceTemplateVolumeFromEmptyOutput {
	return o.ApplyT(func(v *InstanceTemplateVolumeFromEmpty) InstanceTemplateVolumeFromEmpty {
		if v != nil {
			return *v
		}
		var ret InstanceTemplateVolumeFromEmpty
		return ret
	}).(InstanceTemplateVolumeFromEmptyOutput)
}

// Size in GB of the new empty volume
func (o InstanceTemplateVolumeFromEmptyPtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceTemplateVolumeFromEmpty) *int {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(pulumi.IntPtrOutput)
}

type InstanceTemplateVolumeFromSnapshot struct {
	// Override size (in GB) of the cloned volume
	Size *int `pulumi:"size"`
	// ID of the snapshot to clone
	SnapshotId string `pulumi:"snapshotId"`
}

// InstanceTemplateVolumeFromSnapshotInput is an input type that accepts InstanceTemplateVolumeFromSnapshotArgs and InstanceTemplateVolumeFromSnapshotOutput values.
// You can construct a concrete instance of `InstanceTemplateVolumeFromSnapshotInput` via:
//
//	InstanceTemplateVolumeFromSnapshotArgs{...}
type InstanceTemplateVolumeFromSnapshotInput interface {
	pulumi.Input

	ToInstanceTemplateVolumeFromSnapshotOutput() InstanceTemplateVolumeFromSnapshotOutput
	ToInstanceTemplateVolumeFromSnapshotOutputWithContext(context.Context) InstanceTemplateVolumeFromSnapshotOutput
}

type InstanceTemplateVolumeFromSnapshotArgs struct {
	// Override size (in GB) of the cloned volume
	Size pulumi.IntPtrInput `pulumi:"size"`
	// ID of the snapshot to clone
	SnapshotId pulumi.StringInput `pulumi:"snapshotId"`
}

func (InstanceTemplateVolumeFromSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateVolumeFromSnapshot)(nil)).Elem()
}

func (i InstanceTemplateVolumeFromSnapshotArgs) ToInstanceTemplateVolumeFromSnapshotOutput() InstanceTemplateVolumeFromSnapshotOutput {
	return i.ToInstanceTemplateVolumeFromSnapshotOutputWithContext(context.Background())
}

func (i InstanceTemplateVolumeFromSnapshotArgs) ToInstanceTemplateVolumeFromSnapshotOutputWithContext(ctx context.Context) InstanceTemplateVolumeFromSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateVolumeFromSnapshotOutput)
}

func (i InstanceTemplateVolumeFromSnapshotArgs) ToInstanceTemplateVolumeFromSnapshotPtrOutput() InstanceTemplateVolumeFromSnapshotPtrOutput {
	return i.ToInstanceTemplateVolumeFromSnapshotPtrOutputWithContext(context.Background())
}

func (i InstanceTemplateVolumeFromSnapshotArgs) ToInstanceTemplateVolumeFromSnapshotPtrOutputWithContext(ctx context.Context) InstanceTemplateVolumeFromSnapshotPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateVolumeFromSnapshotOutput).ToInstanceTemplateVolumeFromSnapshotPtrOutputWithContext(ctx)
}

// InstanceTemplateVolumeFromSnapshotPtrInput is an input type that accepts InstanceTemplateVolumeFromSnapshotArgs, InstanceTemplateVolumeFromSnapshotPtr and InstanceTemplateVolumeFromSnapshotPtrOutput values.
// You can construct a concrete instance of `InstanceTemplateVolumeFromSnapshotPtrInput` via:
//
//	        InstanceTemplateVolumeFromSnapshotArgs{...}
//
//	or:
//
//	        nil
type InstanceTemplateVolumeFromSnapshotPtrInput interface {
	pulumi.Input

	ToInstanceTemplateVolumeFromSnapshotPtrOutput() InstanceTemplateVolumeFromSnapshotPtrOutput
	ToInstanceTemplateVolumeFromSnapshotPtrOutputWithContext(context.Context) InstanceTemplateVolumeFromSnapshotPtrOutput
}

type instanceTemplateVolumeFromSnapshotPtrType InstanceTemplateVolumeFromSnapshotArgs

func InstanceTemplateVolumeFromSnapshotPtr(v *InstanceTemplateVolumeFromSnapshotArgs) InstanceTemplateVolumeFromSnapshotPtrInput {
	return (*instanceTemplateVolumeFromSnapshotPtrType)(v)
}

func (*instanceTemplateVolumeFromSnapshotPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceTemplateVolumeFromSnapshot)(nil)).Elem()
}

func (i *instanceTemplateVolumeFromSnapshotPtrType) ToInstanceTemplateVolumeFromSnapshotPtrOutput() InstanceTemplateVolumeFromSnapshotPtrOutput {
	return i.ToInstanceTemplateVolumeFromSnapshotPtrOutputWithContext(context.Background())
}

func (i *instanceTemplateVolumeFromSnapshotPtrType) ToInstanceTemplateVolumeFromSnapshotPtrOutputWithContext(ctx context.Context) InstanceTemplateVolumeFromSnapshotPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateVolumeFromSnapshotPtrOutput)
}

type InstanceTemplateVolumeFromSnapshotOutput struct{ *pulumi.OutputState }

func (InstanceTemplateVolumeFromSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateVolumeFromSnapshot)(nil)).Elem()
}

func (o InstanceTemplateVolumeFromSnapshotOutput) ToInstanceTemplateVolumeFromSnapshotOutput() InstanceTemplateVolumeFromSnapshotOutput {
	return o
}

func (o InstanceTemplateVolumeFromSnapshotOutput) ToInstanceTemplateVolumeFromSnapshotOutputWithContext(ctx context.Context) InstanceTemplateVolumeFromSnapshotOutput {
	return o
}

func (o InstanceTemplateVolumeFromSnapshotOutput) ToInstanceTemplateVolumeFromSnapshotPtrOutput() InstanceTemplateVolumeFromSnapshotPtrOutput {
	return o.ToInstanceTemplateVolumeFromSnapshotPtrOutputWithContext(context.Background())
}

func (o InstanceTemplateVolumeFromSnapshotOutput) ToInstanceTemplateVolumeFromSnapshotPtrOutputWithContext(ctx context.Context) InstanceTemplateVolumeFromSnapshotPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceTemplateVolumeFromSnapshot) *InstanceTemplateVolumeFromSnapshot {
		return &v
	}).(InstanceTemplateVolumeFromSnapshotPtrOutput)
}

// Override size (in GB) of the cloned volume
func (o InstanceTemplateVolumeFromSnapshotOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceTemplateVolumeFromSnapshot) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// ID of the snapshot to clone
func (o InstanceTemplateVolumeFromSnapshotOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTemplateVolumeFromSnapshot) string { return v.SnapshotId }).(pulumi.StringOutput)
}

type InstanceTemplateVolumeFromSnapshotPtrOutput struct{ *pulumi.OutputState }

func (InstanceTemplateVolumeFromSnapshotPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceTemplateVolumeFromSnapshot)(nil)).Elem()
}

func (o InstanceTemplateVolumeFromSnapshotPtrOutput) ToInstanceTemplateVolumeFromSnapshotPtrOutput() InstanceTemplateVolumeFromSnapshotPtrOutput {
	return o
}

func (o InstanceTemplateVolumeFromSnapshotPtrOutput) ToInstanceTemplateVolumeFromSnapshotPtrOutputWithContext(ctx context.Context) InstanceTemplateVolumeFromSnapshotPtrOutput {
	return o
}

func (o InstanceTemplateVolumeFromSnapshotPtrOutput) Elem() InstanceTemplateVolumeFromSnapshotOutput {
	return o.ApplyT(func(v *InstanceTemplateVolumeFromSnapshot) InstanceTemplateVolumeFromSnapshot {
		if v != nil {
			return *v
		}
		var ret InstanceTemplateVolumeFromSnapshot
		return ret
	}).(InstanceTemplateVolumeFromSnapshotOutput)
}

// Override size (in GB) of the cloned volume
func (o InstanceTemplateVolumeFromSnapshotPtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceTemplateVolumeFromSnapshot) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

// ID of the snapshot to clone
func (o InstanceTemplateVolumeFromSnapshotPtrOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceTemplateVolumeFromSnapshot) *string {
		if v == nil {
			return nil
		}
		return &v.SnapshotId
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceGroupCapacityInput)(nil)).Elem(), InstanceGroupCapacityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceGroupCapacityArrayInput)(nil)).Elem(), InstanceGroupCapacityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceGroupLoadBalancerInput)(nil)).Elem(), InstanceGroupLoadBalancerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceGroupLoadBalancerArrayInput)(nil)).Elem(), InstanceGroupLoadBalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancePolicyMetricInput)(nil)).Elem(), InstancePolicyMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancePolicyMetricArrayInput)(nil)).Elem(), InstancePolicyMetricArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTemplateVolumeInput)(nil)).Elem(), InstanceTemplateVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTemplateVolumeArrayInput)(nil)).Elem(), InstanceTemplateVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTemplateVolumeFromEmptyInput)(nil)).Elem(), InstanceTemplateVolumeFromEmptyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTemplateVolumeFromEmptyPtrInput)(nil)).Elem(), InstanceTemplateVolumeFromEmptyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTemplateVolumeFromSnapshotInput)(nil)).Elem(), InstanceTemplateVolumeFromSnapshotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTemplateVolumeFromSnapshotPtrInput)(nil)).Elem(), InstanceTemplateVolumeFromSnapshotArgs{})
	pulumi.RegisterOutputType(InstanceGroupCapacityOutput{})
	pulumi.RegisterOutputType(InstanceGroupCapacityArrayOutput{})
	pulumi.RegisterOutputType(InstanceGroupLoadBalancerOutput{})
	pulumi.RegisterOutputType(InstanceGroupLoadBalancerArrayOutput{})
	pulumi.RegisterOutputType(InstancePolicyMetricOutput{})
	pulumi.RegisterOutputType(InstancePolicyMetricArrayOutput{})
	pulumi.RegisterOutputType(InstanceTemplateVolumeOutput{})
	pulumi.RegisterOutputType(InstanceTemplateVolumeArrayOutput{})
	pulumi.RegisterOutputType(InstanceTemplateVolumeFromEmptyOutput{})
	pulumi.RegisterOutputType(InstanceTemplateVolumeFromEmptyPtrOutput{})
	pulumi.RegisterOutputType(InstanceTemplateVolumeFromSnapshotOutput{})
	pulumi.RegisterOutputType(InstanceTemplateVolumeFromSnapshotPtrOutput{})
}
