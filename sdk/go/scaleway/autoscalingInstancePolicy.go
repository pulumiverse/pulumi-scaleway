// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Books and manages Autoscaling Instance policies.
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewAutoscalingInstancePolicy(ctx, "up", &scaleway.AutoscalingInstancePolicyArgs{
//				InstanceGroupId: pulumi.Any(main.Id),
//				Name:            pulumi.String("scale-up-if-cpu-high"),
//				Action:          pulumi.String("scale_up"),
//				Type:            pulumi.String("flat_count"),
//				Value:           pulumi.Int(1),
//				Priority:        pulumi.Int(1),
//				Metrics: scaleway.AutoscalingInstancePolicyMetricArray{
//					&scaleway.AutoscalingInstancePolicyMetricArgs{
//						Name:             pulumi.String("cpu scale up"),
//						ManagedMetric:    pulumi.String("managed_metric_instance_cpu"),
//						Operator:         pulumi.String("operator_greater_than"),
//						Aggregate:        pulumi.String("aggregate_average"),
//						SamplingRangeMin: pulumi.Int(5),
//						Threshold:        pulumi.Int(70),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewAutoscalingInstancePolicy(ctx, "down", &scaleway.AutoscalingInstancePolicyArgs{
//				InstanceGroupId: pulumi.Any(main.Id),
//				Name:            pulumi.String("scale-down-if-cpu-low"),
//				Action:          pulumi.String("scale_down"),
//				Type:            pulumi.String("flat_count"),
//				Value:           pulumi.Int(1),
//				Priority:        pulumi.Int(2),
//				Metrics: scaleway.AutoscalingInstancePolicyMetricArray{
//					&scaleway.AutoscalingInstancePolicyMetricArgs{
//						Name:             pulumi.String("cpu scale down"),
//						ManagedMetric:    pulumi.String("managed_metric_instance_cpu"),
//						Operator:         pulumi.String("operator_less_than"),
//						Aggregate:        pulumi.String("aggregate_average"),
//						SamplingRangeMin: pulumi.Int(5),
//						Threshold:        pulumi.Int(40),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Autoscaling instance policies can be imported using `{zone}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/autoscalingInstancePolicy:AutoscalingInstancePolicy main fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type AutoscalingInstancePolicy struct {
	pulumi.CustomResourceState

	// The action to execute when the metric-based condition is met.
	Action pulumi.StringOutput `pulumi:"action"`
	// The ID of the Instance group related to this policy.
	InstanceGroupId pulumi.StringOutput `pulumi:"instanceGroupId"`
	// Cockpit metric to use when determining whether to trigger a scale up/down action.
	Metrics AutoscalingInstancePolicyMetricArrayOutput `pulumi:"metrics"`
	// The Instance policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The priority of this policy compared to all other scaling policies. This determines the processing order. The lower the number, the higher the priority.
	Priority pulumi.IntOutput `pulumi:"priority"`
	// `projectId`) The ID of the Project the Instance policy is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// How to use the number defined in `value` when determining by how many Instances to scale up/down.
	Type pulumi.StringOutput `pulumi:"type"`
	// The value representing the magnitude of the scaling action to take for the Instance group. Depending on the `type` parameter, this number could represent a total number of Instances in the group, a number of Instances to add, or a percentage to scale the group by.
	Value pulumi.IntOutput `pulumi:"value"`
	// `zone`) The zone in which the Instance policy exists.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewAutoscalingInstancePolicy registers a new resource with the given unique name, arguments, and options.
func NewAutoscalingInstancePolicy(ctx *pulumi.Context,
	name string, args *AutoscalingInstancePolicyArgs, opts ...pulumi.ResourceOption) (*AutoscalingInstancePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.InstanceGroupId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceGroupId'")
	}
	if args.Priority == nil {
		return nil, errors.New("invalid value for required argument 'Priority'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AutoscalingInstancePolicy
	err := ctx.RegisterResource("scaleway:index/autoscalingInstancePolicy:AutoscalingInstancePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAutoscalingInstancePolicy gets an existing AutoscalingInstancePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAutoscalingInstancePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AutoscalingInstancePolicyState, opts ...pulumi.ResourceOption) (*AutoscalingInstancePolicy, error) {
	var resource AutoscalingInstancePolicy
	err := ctx.ReadResource("scaleway:index/autoscalingInstancePolicy:AutoscalingInstancePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AutoscalingInstancePolicy resources.
type autoscalingInstancePolicyState struct {
	// The action to execute when the metric-based condition is met.
	Action *string `pulumi:"action"`
	// The ID of the Instance group related to this policy.
	InstanceGroupId *string `pulumi:"instanceGroupId"`
	// Cockpit metric to use when determining whether to trigger a scale up/down action.
	Metrics []AutoscalingInstancePolicyMetric `pulumi:"metrics"`
	// The Instance policy name.
	Name *string `pulumi:"name"`
	// The priority of this policy compared to all other scaling policies. This determines the processing order. The lower the number, the higher the priority.
	Priority *int `pulumi:"priority"`
	// `projectId`) The ID of the Project the Instance policy is associated with.
	ProjectId *string `pulumi:"projectId"`
	// How to use the number defined in `value` when determining by how many Instances to scale up/down.
	Type *string `pulumi:"type"`
	// The value representing the magnitude of the scaling action to take for the Instance group. Depending on the `type` parameter, this number could represent a total number of Instances in the group, a number of Instances to add, or a percentage to scale the group by.
	Value *int `pulumi:"value"`
	// `zone`) The zone in which the Instance policy exists.
	Zone *string `pulumi:"zone"`
}

type AutoscalingInstancePolicyState struct {
	// The action to execute when the metric-based condition is met.
	Action pulumi.StringPtrInput
	// The ID of the Instance group related to this policy.
	InstanceGroupId pulumi.StringPtrInput
	// Cockpit metric to use when determining whether to trigger a scale up/down action.
	Metrics AutoscalingInstancePolicyMetricArrayInput
	// The Instance policy name.
	Name pulumi.StringPtrInput
	// The priority of this policy compared to all other scaling policies. This determines the processing order. The lower the number, the higher the priority.
	Priority pulumi.IntPtrInput
	// `projectId`) The ID of the Project the Instance policy is associated with.
	ProjectId pulumi.StringPtrInput
	// How to use the number defined in `value` when determining by how many Instances to scale up/down.
	Type pulumi.StringPtrInput
	// The value representing the magnitude of the scaling action to take for the Instance group. Depending on the `type` parameter, this number could represent a total number of Instances in the group, a number of Instances to add, or a percentage to scale the group by.
	Value pulumi.IntPtrInput
	// `zone`) The zone in which the Instance policy exists.
	Zone pulumi.StringPtrInput
}

func (AutoscalingInstancePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*autoscalingInstancePolicyState)(nil)).Elem()
}

type autoscalingInstancePolicyArgs struct {
	// The action to execute when the metric-based condition is met.
	Action string `pulumi:"action"`
	// The ID of the Instance group related to this policy.
	InstanceGroupId string `pulumi:"instanceGroupId"`
	// Cockpit metric to use when determining whether to trigger a scale up/down action.
	Metrics []AutoscalingInstancePolicyMetric `pulumi:"metrics"`
	// The Instance policy name.
	Name *string `pulumi:"name"`
	// The priority of this policy compared to all other scaling policies. This determines the processing order. The lower the number, the higher the priority.
	Priority int `pulumi:"priority"`
	// `projectId`) The ID of the Project the Instance policy is associated with.
	ProjectId *string `pulumi:"projectId"`
	// How to use the number defined in `value` when determining by how many Instances to scale up/down.
	Type string `pulumi:"type"`
	// The value representing the magnitude of the scaling action to take for the Instance group. Depending on the `type` parameter, this number could represent a total number of Instances in the group, a number of Instances to add, or a percentage to scale the group by.
	Value int `pulumi:"value"`
	// `zone`) The zone in which the Instance policy exists.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a AutoscalingInstancePolicy resource.
type AutoscalingInstancePolicyArgs struct {
	// The action to execute when the metric-based condition is met.
	Action pulumi.StringInput
	// The ID of the Instance group related to this policy.
	InstanceGroupId pulumi.StringInput
	// Cockpit metric to use when determining whether to trigger a scale up/down action.
	Metrics AutoscalingInstancePolicyMetricArrayInput
	// The Instance policy name.
	Name pulumi.StringPtrInput
	// The priority of this policy compared to all other scaling policies. This determines the processing order. The lower the number, the higher the priority.
	Priority pulumi.IntInput
	// `projectId`) The ID of the Project the Instance policy is associated with.
	ProjectId pulumi.StringPtrInput
	// How to use the number defined in `value` when determining by how many Instances to scale up/down.
	Type pulumi.StringInput
	// The value representing the magnitude of the scaling action to take for the Instance group. Depending on the `type` parameter, this number could represent a total number of Instances in the group, a number of Instances to add, or a percentage to scale the group by.
	Value pulumi.IntInput
	// `zone`) The zone in which the Instance policy exists.
	Zone pulumi.StringPtrInput
}

func (AutoscalingInstancePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*autoscalingInstancePolicyArgs)(nil)).Elem()
}

type AutoscalingInstancePolicyInput interface {
	pulumi.Input

	ToAutoscalingInstancePolicyOutput() AutoscalingInstancePolicyOutput
	ToAutoscalingInstancePolicyOutputWithContext(ctx context.Context) AutoscalingInstancePolicyOutput
}

func (*AutoscalingInstancePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingInstancePolicy)(nil)).Elem()
}

func (i *AutoscalingInstancePolicy) ToAutoscalingInstancePolicyOutput() AutoscalingInstancePolicyOutput {
	return i.ToAutoscalingInstancePolicyOutputWithContext(context.Background())
}

func (i *AutoscalingInstancePolicy) ToAutoscalingInstancePolicyOutputWithContext(ctx context.Context) AutoscalingInstancePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingInstancePolicyOutput)
}

// AutoscalingInstancePolicyArrayInput is an input type that accepts AutoscalingInstancePolicyArray and AutoscalingInstancePolicyArrayOutput values.
// You can construct a concrete instance of `AutoscalingInstancePolicyArrayInput` via:
//
//	AutoscalingInstancePolicyArray{ AutoscalingInstancePolicyArgs{...} }
type AutoscalingInstancePolicyArrayInput interface {
	pulumi.Input

	ToAutoscalingInstancePolicyArrayOutput() AutoscalingInstancePolicyArrayOutput
	ToAutoscalingInstancePolicyArrayOutputWithContext(context.Context) AutoscalingInstancePolicyArrayOutput
}

type AutoscalingInstancePolicyArray []AutoscalingInstancePolicyInput

func (AutoscalingInstancePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutoscalingInstancePolicy)(nil)).Elem()
}

func (i AutoscalingInstancePolicyArray) ToAutoscalingInstancePolicyArrayOutput() AutoscalingInstancePolicyArrayOutput {
	return i.ToAutoscalingInstancePolicyArrayOutputWithContext(context.Background())
}

func (i AutoscalingInstancePolicyArray) ToAutoscalingInstancePolicyArrayOutputWithContext(ctx context.Context) AutoscalingInstancePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingInstancePolicyArrayOutput)
}

// AutoscalingInstancePolicyMapInput is an input type that accepts AutoscalingInstancePolicyMap and AutoscalingInstancePolicyMapOutput values.
// You can construct a concrete instance of `AutoscalingInstancePolicyMapInput` via:
//
//	AutoscalingInstancePolicyMap{ "key": AutoscalingInstancePolicyArgs{...} }
type AutoscalingInstancePolicyMapInput interface {
	pulumi.Input

	ToAutoscalingInstancePolicyMapOutput() AutoscalingInstancePolicyMapOutput
	ToAutoscalingInstancePolicyMapOutputWithContext(context.Context) AutoscalingInstancePolicyMapOutput
}

type AutoscalingInstancePolicyMap map[string]AutoscalingInstancePolicyInput

func (AutoscalingInstancePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutoscalingInstancePolicy)(nil)).Elem()
}

func (i AutoscalingInstancePolicyMap) ToAutoscalingInstancePolicyMapOutput() AutoscalingInstancePolicyMapOutput {
	return i.ToAutoscalingInstancePolicyMapOutputWithContext(context.Background())
}

func (i AutoscalingInstancePolicyMap) ToAutoscalingInstancePolicyMapOutputWithContext(ctx context.Context) AutoscalingInstancePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingInstancePolicyMapOutput)
}

type AutoscalingInstancePolicyOutput struct{ *pulumi.OutputState }

func (AutoscalingInstancePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingInstancePolicy)(nil)).Elem()
}

func (o AutoscalingInstancePolicyOutput) ToAutoscalingInstancePolicyOutput() AutoscalingInstancePolicyOutput {
	return o
}

func (o AutoscalingInstancePolicyOutput) ToAutoscalingInstancePolicyOutputWithContext(ctx context.Context) AutoscalingInstancePolicyOutput {
	return o
}

// The action to execute when the metric-based condition is met.
func (o AutoscalingInstancePolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoscalingInstancePolicy) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// The ID of the Instance group related to this policy.
func (o AutoscalingInstancePolicyOutput) InstanceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoscalingInstancePolicy) pulumi.StringOutput { return v.InstanceGroupId }).(pulumi.StringOutput)
}

// Cockpit metric to use when determining whether to trigger a scale up/down action.
func (o AutoscalingInstancePolicyOutput) Metrics() AutoscalingInstancePolicyMetricArrayOutput {
	return o.ApplyT(func(v *AutoscalingInstancePolicy) AutoscalingInstancePolicyMetricArrayOutput { return v.Metrics }).(AutoscalingInstancePolicyMetricArrayOutput)
}

// The Instance policy name.
func (o AutoscalingInstancePolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoscalingInstancePolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The priority of this policy compared to all other scaling policies. This determines the processing order. The lower the number, the higher the priority.
func (o AutoscalingInstancePolicyOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *AutoscalingInstancePolicy) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// `projectId`) The ID of the Project the Instance policy is associated with.
func (o AutoscalingInstancePolicyOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoscalingInstancePolicy) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// How to use the number defined in `value` when determining by how many Instances to scale up/down.
func (o AutoscalingInstancePolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoscalingInstancePolicy) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The value representing the magnitude of the scaling action to take for the Instance group. Depending on the `type` parameter, this number could represent a total number of Instances in the group, a number of Instances to add, or a percentage to scale the group by.
func (o AutoscalingInstancePolicyOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v *AutoscalingInstancePolicy) pulumi.IntOutput { return v.Value }).(pulumi.IntOutput)
}

// `zone`) The zone in which the Instance policy exists.
func (o AutoscalingInstancePolicyOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoscalingInstancePolicy) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type AutoscalingInstancePolicyArrayOutput struct{ *pulumi.OutputState }

func (AutoscalingInstancePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutoscalingInstancePolicy)(nil)).Elem()
}

func (o AutoscalingInstancePolicyArrayOutput) ToAutoscalingInstancePolicyArrayOutput() AutoscalingInstancePolicyArrayOutput {
	return o
}

func (o AutoscalingInstancePolicyArrayOutput) ToAutoscalingInstancePolicyArrayOutputWithContext(ctx context.Context) AutoscalingInstancePolicyArrayOutput {
	return o
}

func (o AutoscalingInstancePolicyArrayOutput) Index(i pulumi.IntInput) AutoscalingInstancePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AutoscalingInstancePolicy {
		return vs[0].([]*AutoscalingInstancePolicy)[vs[1].(int)]
	}).(AutoscalingInstancePolicyOutput)
}

type AutoscalingInstancePolicyMapOutput struct{ *pulumi.OutputState }

func (AutoscalingInstancePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutoscalingInstancePolicy)(nil)).Elem()
}

func (o AutoscalingInstancePolicyMapOutput) ToAutoscalingInstancePolicyMapOutput() AutoscalingInstancePolicyMapOutput {
	return o
}

func (o AutoscalingInstancePolicyMapOutput) ToAutoscalingInstancePolicyMapOutputWithContext(ctx context.Context) AutoscalingInstancePolicyMapOutput {
	return o
}

func (o AutoscalingInstancePolicyMapOutput) MapIndex(k pulumi.StringInput) AutoscalingInstancePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AutoscalingInstancePolicy {
		return vs[0].(map[string]*AutoscalingInstancePolicy)[vs[1].(string)]
	}).(AutoscalingInstancePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingInstancePolicyInput)(nil)).Elem(), &AutoscalingInstancePolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingInstancePolicyArrayInput)(nil)).Elem(), AutoscalingInstancePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingInstancePolicyMapInput)(nil)).Elem(), AutoscalingInstancePolicyMap{})
	pulumi.RegisterOutputType(AutoscalingInstancePolicyOutput{})
	pulumi.RegisterOutputType(AutoscalingInstancePolicyArrayOutput{})
	pulumi.RegisterOutputType(AutoscalingInstancePolicyMapOutput{})
}
