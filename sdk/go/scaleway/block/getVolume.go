// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package block

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// The `block.Volume` data source is used to retrieve information about a Block Storage volume.
// Refer to the Block Storage [product documentation](https://www.scaleway.com/en/docs/block-storage/) and [API documentation](https://www.scaleway.com/en/developers/api/block/) for more information.
func LookupVolume(ctx *pulumi.Context, args *LookupVolumeArgs, opts ...pulumi.InvokeOption) (*LookupVolumeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVolumeResult
	err := ctx.Invoke("scaleway:block/getVolume:getVolume", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVolume.
type LookupVolumeArgs struct {
	// The name of the volume. Only one of `name` and `volumeId` should be specified.
	Name *string `pulumi:"name"`
	// The unique identifier of the Project to which the volume is associated.
	ProjectId *string `pulumi:"projectId"`
	// The unique identifier of the volume. Only one of `name` and `volumeId` should be specified.
	VolumeId *string `pulumi:"volumeId"`
	// ). The zone in which the volume exists.
	Zone *string `pulumi:"zone"`
}

// A collection of values returned by getVolume.
type LookupVolumeResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id               string   `pulumi:"id"`
	InstanceVolumeId string   `pulumi:"instanceVolumeId"`
	Iops             int      `pulumi:"iops"`
	Name             *string  `pulumi:"name"`
	ProjectId        *string  `pulumi:"projectId"`
	SizeInGb         int      `pulumi:"sizeInGb"`
	SnapshotId       string   `pulumi:"snapshotId"`
	Tags             []string `pulumi:"tags"`
	VolumeId         *string  `pulumi:"volumeId"`
	Zone             *string  `pulumi:"zone"`
}

func LookupVolumeOutput(ctx *pulumi.Context, args LookupVolumeOutputArgs, opts ...pulumi.InvokeOption) LookupVolumeResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVolumeResultOutput, error) {
			args := v.(LookupVolumeArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("scaleway:block/getVolume:getVolume", args, LookupVolumeResultOutput{}, options).(LookupVolumeResultOutput), nil
		}).(LookupVolumeResultOutput)
}

// A collection of arguments for invoking getVolume.
type LookupVolumeOutputArgs struct {
	// The name of the volume. Only one of `name` and `volumeId` should be specified.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The unique identifier of the Project to which the volume is associated.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// The unique identifier of the volume. Only one of `name` and `volumeId` should be specified.
	VolumeId pulumi.StringPtrInput `pulumi:"volumeId"`
	// ). The zone in which the volume exists.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (LookupVolumeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVolumeArgs)(nil)).Elem()
}

// A collection of values returned by getVolume.
type LookupVolumeResultOutput struct{ *pulumi.OutputState }

func (LookupVolumeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVolumeResult)(nil)).Elem()
}

func (o LookupVolumeResultOutput) ToLookupVolumeResultOutput() LookupVolumeResultOutput {
	return o
}

func (o LookupVolumeResultOutput) ToLookupVolumeResultOutputWithContext(ctx context.Context) LookupVolumeResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupVolumeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupVolumeResultOutput) InstanceVolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.InstanceVolumeId }).(pulumi.StringOutput)
}

func (o LookupVolumeResultOutput) Iops() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVolumeResult) int { return v.Iops }).(pulumi.IntOutput)
}

func (o LookupVolumeResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVolumeResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupVolumeResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVolumeResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

func (o LookupVolumeResultOutput) SizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVolumeResult) int { return v.SizeInGb }).(pulumi.IntOutput)
}

func (o LookupVolumeResultOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.SnapshotId }).(pulumi.StringOutput)
}

func (o LookupVolumeResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVolumeResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o LookupVolumeResultOutput) VolumeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVolumeResult) *string { return v.VolumeId }).(pulumi.StringPtrOutput)
}

func (o LookupVolumeResultOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVolumeResult) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVolumeResultOutput{})
}
