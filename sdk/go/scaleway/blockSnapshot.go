// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Block Snapshots.
// For more information, see [the documentation](https://www.scaleway.com/en/developers/api/block/).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewBlockSnapshot(ctx, "blockSnapshot", &scaleway.BlockSnapshotArgs{
//				VolumeId: pulumi.String("11111111-1111-1111-1111-111111111111"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Block Snapshots can be imported using the `{zone}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/blockSnapshot:BlockSnapshot main fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type BlockSnapshot struct {
	pulumi.CustomResourceState

	// The name of the snapshot. If not provided it will be randomly generated.
	Name pulumi.StringOutput `pulumi:"name"`
	// `projectId`) The ID of the project the snapshot is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// A list of tags to apply to the snapshot.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The ID of the volume to take a snapshot from.
	VolumeId pulumi.StringOutput `pulumi:"volumeId"`
	// `zone`) The zone in which the snapshot should be created.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewBlockSnapshot registers a new resource with the given unique name, arguments, and options.
func NewBlockSnapshot(ctx *pulumi.Context,
	name string, args *BlockSnapshotArgs, opts ...pulumi.ResourceOption) (*BlockSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VolumeId == nil {
		return nil, errors.New("invalid value for required argument 'VolumeId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BlockSnapshot
	err := ctx.RegisterResource("scaleway:index/blockSnapshot:BlockSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBlockSnapshot gets an existing BlockSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBlockSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BlockSnapshotState, opts ...pulumi.ResourceOption) (*BlockSnapshot, error) {
	var resource BlockSnapshot
	err := ctx.ReadResource("scaleway:index/blockSnapshot:BlockSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BlockSnapshot resources.
type blockSnapshotState struct {
	// The name of the snapshot. If not provided it will be randomly generated.
	Name *string `pulumi:"name"`
	// `projectId`) The ID of the project the snapshot is associated with.
	ProjectId *string `pulumi:"projectId"`
	// A list of tags to apply to the snapshot.
	Tags []string `pulumi:"tags"`
	// The ID of the volume to take a snapshot from.
	VolumeId *string `pulumi:"volumeId"`
	// `zone`) The zone in which the snapshot should be created.
	Zone *string `pulumi:"zone"`
}

type BlockSnapshotState struct {
	// The name of the snapshot. If not provided it will be randomly generated.
	Name pulumi.StringPtrInput
	// `projectId`) The ID of the project the snapshot is associated with.
	ProjectId pulumi.StringPtrInput
	// A list of tags to apply to the snapshot.
	Tags pulumi.StringArrayInput
	// The ID of the volume to take a snapshot from.
	VolumeId pulumi.StringPtrInput
	// `zone`) The zone in which the snapshot should be created.
	Zone pulumi.StringPtrInput
}

func (BlockSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*blockSnapshotState)(nil)).Elem()
}

type blockSnapshotArgs struct {
	// The name of the snapshot. If not provided it will be randomly generated.
	Name *string `pulumi:"name"`
	// `projectId`) The ID of the project the snapshot is associated with.
	ProjectId *string `pulumi:"projectId"`
	// A list of tags to apply to the snapshot.
	Tags []string `pulumi:"tags"`
	// The ID of the volume to take a snapshot from.
	VolumeId string `pulumi:"volumeId"`
	// `zone`) The zone in which the snapshot should be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a BlockSnapshot resource.
type BlockSnapshotArgs struct {
	// The name of the snapshot. If not provided it will be randomly generated.
	Name pulumi.StringPtrInput
	// `projectId`) The ID of the project the snapshot is associated with.
	ProjectId pulumi.StringPtrInput
	// A list of tags to apply to the snapshot.
	Tags pulumi.StringArrayInput
	// The ID of the volume to take a snapshot from.
	VolumeId pulumi.StringInput
	// `zone`) The zone in which the snapshot should be created.
	Zone pulumi.StringPtrInput
}

func (BlockSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*blockSnapshotArgs)(nil)).Elem()
}

type BlockSnapshotInput interface {
	pulumi.Input

	ToBlockSnapshotOutput() BlockSnapshotOutput
	ToBlockSnapshotOutputWithContext(ctx context.Context) BlockSnapshotOutput
}

func (*BlockSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**BlockSnapshot)(nil)).Elem()
}

func (i *BlockSnapshot) ToBlockSnapshotOutput() BlockSnapshotOutput {
	return i.ToBlockSnapshotOutputWithContext(context.Background())
}

func (i *BlockSnapshot) ToBlockSnapshotOutputWithContext(ctx context.Context) BlockSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockSnapshotOutput)
}

// BlockSnapshotArrayInput is an input type that accepts BlockSnapshotArray and BlockSnapshotArrayOutput values.
// You can construct a concrete instance of `BlockSnapshotArrayInput` via:
//
//	BlockSnapshotArray{ BlockSnapshotArgs{...} }
type BlockSnapshotArrayInput interface {
	pulumi.Input

	ToBlockSnapshotArrayOutput() BlockSnapshotArrayOutput
	ToBlockSnapshotArrayOutputWithContext(context.Context) BlockSnapshotArrayOutput
}

type BlockSnapshotArray []BlockSnapshotInput

func (BlockSnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BlockSnapshot)(nil)).Elem()
}

func (i BlockSnapshotArray) ToBlockSnapshotArrayOutput() BlockSnapshotArrayOutput {
	return i.ToBlockSnapshotArrayOutputWithContext(context.Background())
}

func (i BlockSnapshotArray) ToBlockSnapshotArrayOutputWithContext(ctx context.Context) BlockSnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockSnapshotArrayOutput)
}

// BlockSnapshotMapInput is an input type that accepts BlockSnapshotMap and BlockSnapshotMapOutput values.
// You can construct a concrete instance of `BlockSnapshotMapInput` via:
//
//	BlockSnapshotMap{ "key": BlockSnapshotArgs{...} }
type BlockSnapshotMapInput interface {
	pulumi.Input

	ToBlockSnapshotMapOutput() BlockSnapshotMapOutput
	ToBlockSnapshotMapOutputWithContext(context.Context) BlockSnapshotMapOutput
}

type BlockSnapshotMap map[string]BlockSnapshotInput

func (BlockSnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BlockSnapshot)(nil)).Elem()
}

func (i BlockSnapshotMap) ToBlockSnapshotMapOutput() BlockSnapshotMapOutput {
	return i.ToBlockSnapshotMapOutputWithContext(context.Background())
}

func (i BlockSnapshotMap) ToBlockSnapshotMapOutputWithContext(ctx context.Context) BlockSnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockSnapshotMapOutput)
}

type BlockSnapshotOutput struct{ *pulumi.OutputState }

func (BlockSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlockSnapshot)(nil)).Elem()
}

func (o BlockSnapshotOutput) ToBlockSnapshotOutput() BlockSnapshotOutput {
	return o
}

func (o BlockSnapshotOutput) ToBlockSnapshotOutputWithContext(ctx context.Context) BlockSnapshotOutput {
	return o
}

// The name of the snapshot. If not provided it will be randomly generated.
func (o BlockSnapshotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockSnapshot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// `projectId`) The ID of the project the snapshot is associated with.
func (o BlockSnapshotOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockSnapshot) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// A list of tags to apply to the snapshot.
func (o BlockSnapshotOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BlockSnapshot) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The ID of the volume to take a snapshot from.
func (o BlockSnapshotOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockSnapshot) pulumi.StringOutput { return v.VolumeId }).(pulumi.StringOutput)
}

// `zone`) The zone in which the snapshot should be created.
func (o BlockSnapshotOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockSnapshot) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type BlockSnapshotArrayOutput struct{ *pulumi.OutputState }

func (BlockSnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BlockSnapshot)(nil)).Elem()
}

func (o BlockSnapshotArrayOutput) ToBlockSnapshotArrayOutput() BlockSnapshotArrayOutput {
	return o
}

func (o BlockSnapshotArrayOutput) ToBlockSnapshotArrayOutputWithContext(ctx context.Context) BlockSnapshotArrayOutput {
	return o
}

func (o BlockSnapshotArrayOutput) Index(i pulumi.IntInput) BlockSnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BlockSnapshot {
		return vs[0].([]*BlockSnapshot)[vs[1].(int)]
	}).(BlockSnapshotOutput)
}

type BlockSnapshotMapOutput struct{ *pulumi.OutputState }

func (BlockSnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BlockSnapshot)(nil)).Elem()
}

func (o BlockSnapshotMapOutput) ToBlockSnapshotMapOutput() BlockSnapshotMapOutput {
	return o
}

func (o BlockSnapshotMapOutput) ToBlockSnapshotMapOutputWithContext(ctx context.Context) BlockSnapshotMapOutput {
	return o
}

func (o BlockSnapshotMapOutput) MapIndex(k pulumi.StringInput) BlockSnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BlockSnapshot {
		return vs[0].(map[string]*BlockSnapshot)[vs[1].(string)]
	}).(BlockSnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BlockSnapshotInput)(nil)).Elem(), &BlockSnapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlockSnapshotArrayInput)(nil)).Elem(), BlockSnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlockSnapshotMapInput)(nil)).Elem(), BlockSnapshotMap{})
	pulumi.RegisterOutputType(BlockSnapshotOutput{})
	pulumi.RegisterOutputType(BlockSnapshotArrayOutput{})
	pulumi.RegisterOutputType(BlockSnapshotMapOutput{})
}
