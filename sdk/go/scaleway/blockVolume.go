// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Block Volumes.
// For more information, see [the documentation](https://www.scaleway.com/en/developers/api/block/).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewBlockVolume(ctx, "blockVolume", &scaleway.BlockVolumeArgs{
//				Iops:     pulumi.Int(5000),
//				SizeInGb: pulumi.Int(20),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Block Volumes can be imported using the `{zone}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/blockVolume:BlockVolume block_volume fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type BlockVolume struct {
	pulumi.CustomResourceState

	// The maximum IO/s expected, must match available options.
	Iops pulumi.IntOutput `pulumi:"iops"`
	// The name of the volume. If not provided it will be randomly generated.
	Name pulumi.StringOutput `pulumi:"name"`
	// `projectId`) The ID of the project the volume is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The size of the volume. Only one of `sizeInGb`, and `snapshotId` should be specified.
	SizeInGb pulumi.IntOutput `pulumi:"sizeInGb"`
	// If set, the new volume will be created from this snapshot. Only one of `sizeInGb`, `snapshotId` should be specified.
	SnapshotId pulumi.StringPtrOutput `pulumi:"snapshotId"`
	// A list of tags to apply to the volume.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// `zone`) The zone in which the volume should be created.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewBlockVolume registers a new resource with the given unique name, arguments, and options.
func NewBlockVolume(ctx *pulumi.Context,
	name string, args *BlockVolumeArgs, opts ...pulumi.ResourceOption) (*BlockVolume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Iops == nil {
		return nil, errors.New("invalid value for required argument 'Iops'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BlockVolume
	err := ctx.RegisterResource("scaleway:index/blockVolume:BlockVolume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBlockVolume gets an existing BlockVolume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBlockVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BlockVolumeState, opts ...pulumi.ResourceOption) (*BlockVolume, error) {
	var resource BlockVolume
	err := ctx.ReadResource("scaleway:index/blockVolume:BlockVolume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BlockVolume resources.
type blockVolumeState struct {
	// The maximum IO/s expected, must match available options.
	Iops *int `pulumi:"iops"`
	// The name of the volume. If not provided it will be randomly generated.
	Name *string `pulumi:"name"`
	// `projectId`) The ID of the project the volume is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The size of the volume. Only one of `sizeInGb`, and `snapshotId` should be specified.
	SizeInGb *int `pulumi:"sizeInGb"`
	// If set, the new volume will be created from this snapshot. Only one of `sizeInGb`, `snapshotId` should be specified.
	SnapshotId *string `pulumi:"snapshotId"`
	// A list of tags to apply to the volume.
	Tags []string `pulumi:"tags"`
	// `zone`) The zone in which the volume should be created.
	Zone *string `pulumi:"zone"`
}

type BlockVolumeState struct {
	// The maximum IO/s expected, must match available options.
	Iops pulumi.IntPtrInput
	// The name of the volume. If not provided it will be randomly generated.
	Name pulumi.StringPtrInput
	// `projectId`) The ID of the project the volume is associated with.
	ProjectId pulumi.StringPtrInput
	// The size of the volume. Only one of `sizeInGb`, and `snapshotId` should be specified.
	SizeInGb pulumi.IntPtrInput
	// If set, the new volume will be created from this snapshot. Only one of `sizeInGb`, `snapshotId` should be specified.
	SnapshotId pulumi.StringPtrInput
	// A list of tags to apply to the volume.
	Tags pulumi.StringArrayInput
	// `zone`) The zone in which the volume should be created.
	Zone pulumi.StringPtrInput
}

func (BlockVolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*blockVolumeState)(nil)).Elem()
}

type blockVolumeArgs struct {
	// The maximum IO/s expected, must match available options.
	Iops int `pulumi:"iops"`
	// The name of the volume. If not provided it will be randomly generated.
	Name *string `pulumi:"name"`
	// `projectId`) The ID of the project the volume is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The size of the volume. Only one of `sizeInGb`, and `snapshotId` should be specified.
	SizeInGb *int `pulumi:"sizeInGb"`
	// If set, the new volume will be created from this snapshot. Only one of `sizeInGb`, `snapshotId` should be specified.
	SnapshotId *string `pulumi:"snapshotId"`
	// A list of tags to apply to the volume.
	Tags []string `pulumi:"tags"`
	// `zone`) The zone in which the volume should be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a BlockVolume resource.
type BlockVolumeArgs struct {
	// The maximum IO/s expected, must match available options.
	Iops pulumi.IntInput
	// The name of the volume. If not provided it will be randomly generated.
	Name pulumi.StringPtrInput
	// `projectId`) The ID of the project the volume is associated with.
	ProjectId pulumi.StringPtrInput
	// The size of the volume. Only one of `sizeInGb`, and `snapshotId` should be specified.
	SizeInGb pulumi.IntPtrInput
	// If set, the new volume will be created from this snapshot. Only one of `sizeInGb`, `snapshotId` should be specified.
	SnapshotId pulumi.StringPtrInput
	// A list of tags to apply to the volume.
	Tags pulumi.StringArrayInput
	// `zone`) The zone in which the volume should be created.
	Zone pulumi.StringPtrInput
}

func (BlockVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*blockVolumeArgs)(nil)).Elem()
}

type BlockVolumeInput interface {
	pulumi.Input

	ToBlockVolumeOutput() BlockVolumeOutput
	ToBlockVolumeOutputWithContext(ctx context.Context) BlockVolumeOutput
}

func (*BlockVolume) ElementType() reflect.Type {
	return reflect.TypeOf((**BlockVolume)(nil)).Elem()
}

func (i *BlockVolume) ToBlockVolumeOutput() BlockVolumeOutput {
	return i.ToBlockVolumeOutputWithContext(context.Background())
}

func (i *BlockVolume) ToBlockVolumeOutputWithContext(ctx context.Context) BlockVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockVolumeOutput)
}

// BlockVolumeArrayInput is an input type that accepts BlockVolumeArray and BlockVolumeArrayOutput values.
// You can construct a concrete instance of `BlockVolumeArrayInput` via:
//
//	BlockVolumeArray{ BlockVolumeArgs{...} }
type BlockVolumeArrayInput interface {
	pulumi.Input

	ToBlockVolumeArrayOutput() BlockVolumeArrayOutput
	ToBlockVolumeArrayOutputWithContext(context.Context) BlockVolumeArrayOutput
}

type BlockVolumeArray []BlockVolumeInput

func (BlockVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BlockVolume)(nil)).Elem()
}

func (i BlockVolumeArray) ToBlockVolumeArrayOutput() BlockVolumeArrayOutput {
	return i.ToBlockVolumeArrayOutputWithContext(context.Background())
}

func (i BlockVolumeArray) ToBlockVolumeArrayOutputWithContext(ctx context.Context) BlockVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockVolumeArrayOutput)
}

// BlockVolumeMapInput is an input type that accepts BlockVolumeMap and BlockVolumeMapOutput values.
// You can construct a concrete instance of `BlockVolumeMapInput` via:
//
//	BlockVolumeMap{ "key": BlockVolumeArgs{...} }
type BlockVolumeMapInput interface {
	pulumi.Input

	ToBlockVolumeMapOutput() BlockVolumeMapOutput
	ToBlockVolumeMapOutputWithContext(context.Context) BlockVolumeMapOutput
}

type BlockVolumeMap map[string]BlockVolumeInput

func (BlockVolumeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BlockVolume)(nil)).Elem()
}

func (i BlockVolumeMap) ToBlockVolumeMapOutput() BlockVolumeMapOutput {
	return i.ToBlockVolumeMapOutputWithContext(context.Background())
}

func (i BlockVolumeMap) ToBlockVolumeMapOutputWithContext(ctx context.Context) BlockVolumeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockVolumeMapOutput)
}

type BlockVolumeOutput struct{ *pulumi.OutputState }

func (BlockVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlockVolume)(nil)).Elem()
}

func (o BlockVolumeOutput) ToBlockVolumeOutput() BlockVolumeOutput {
	return o
}

func (o BlockVolumeOutput) ToBlockVolumeOutputWithContext(ctx context.Context) BlockVolumeOutput {
	return o
}

// The maximum IO/s expected, must match available options.
func (o BlockVolumeOutput) Iops() pulumi.IntOutput {
	return o.ApplyT(func(v *BlockVolume) pulumi.IntOutput { return v.Iops }).(pulumi.IntOutput)
}

// The name of the volume. If not provided it will be randomly generated.
func (o BlockVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockVolume) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// `projectId`) The ID of the project the volume is associated with.
func (o BlockVolumeOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockVolume) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The size of the volume. Only one of `sizeInGb`, and `snapshotId` should be specified.
func (o BlockVolumeOutput) SizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v *BlockVolume) pulumi.IntOutput { return v.SizeInGb }).(pulumi.IntOutput)
}

// If set, the new volume will be created from this snapshot. Only one of `sizeInGb`, `snapshotId` should be specified.
func (o BlockVolumeOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlockVolume) pulumi.StringPtrOutput { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// A list of tags to apply to the volume.
func (o BlockVolumeOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BlockVolume) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// `zone`) The zone in which the volume should be created.
func (o BlockVolumeOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockVolume) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type BlockVolumeArrayOutput struct{ *pulumi.OutputState }

func (BlockVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BlockVolume)(nil)).Elem()
}

func (o BlockVolumeArrayOutput) ToBlockVolumeArrayOutput() BlockVolumeArrayOutput {
	return o
}

func (o BlockVolumeArrayOutput) ToBlockVolumeArrayOutputWithContext(ctx context.Context) BlockVolumeArrayOutput {
	return o
}

func (o BlockVolumeArrayOutput) Index(i pulumi.IntInput) BlockVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BlockVolume {
		return vs[0].([]*BlockVolume)[vs[1].(int)]
	}).(BlockVolumeOutput)
}

type BlockVolumeMapOutput struct{ *pulumi.OutputState }

func (BlockVolumeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BlockVolume)(nil)).Elem()
}

func (o BlockVolumeMapOutput) ToBlockVolumeMapOutput() BlockVolumeMapOutput {
	return o
}

func (o BlockVolumeMapOutput) ToBlockVolumeMapOutputWithContext(ctx context.Context) BlockVolumeMapOutput {
	return o
}

func (o BlockVolumeMapOutput) MapIndex(k pulumi.StringInput) BlockVolumeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BlockVolume {
		return vs[0].(map[string]*BlockVolume)[vs[1].(string)]
	}).(BlockVolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BlockVolumeInput)(nil)).Elem(), &BlockVolume{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlockVolumeArrayInput)(nil)).Elem(), BlockVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlockVolumeMapInput)(nil)).Elem(), BlockVolumeMap{})
	pulumi.RegisterOutputType(BlockVolumeOutput{})
	pulumi.RegisterOutputType(BlockVolumeArrayOutput{})
	pulumi.RegisterOutputType(BlockVolumeMapOutput{})
}
