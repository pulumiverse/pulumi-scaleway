// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// The `CockpitGrafanaUser` resource allows you to create and manage [Grafana users](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#grafana-users) in Scaleway Cockpit.
//
// Refer to Cockpit's [product documentation](https://www.scaleway.com/en/docs/observability/cockpit/concepts/) and [API documentation](https://www.scaleway.com/en/developers/api/cockpit/regional-api) for more information.
//
// ## Example Usage
//
// ### Create a Grafana user
//
// The following command allows you to create a Grafana user within a specific Scaleway Project.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := scaleway.NewAccountProject(ctx, "project", &scaleway.AccountProjectArgs{
//				Name: pulumi.String("test project grafana user"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewCockpitGrafanaUser(ctx, "main", &scaleway.CockpitGrafanaUserArgs{
//				ProjectId: project.ID(),
//				Login:     pulumi.String("my-awesome-user"),
//				Role:      pulumi.String("editor"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// This section explains how to import Grafana users using the ID of the Project associated with Cockpit, and the Grafana user ID in the `{project_id}/{grafana_user_id}` format.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/cockpitGrafanaUser:CockpitGrafanaUser main 11111111-1111-1111-1111-111111111111/2
// ```
type CockpitGrafanaUser struct {
	pulumi.CustomResourceState

	// URL for Grafana.
	GrafanaUrl pulumi.StringOutput `pulumi:"grafanaUrl"`
	// The username of the Grafana user. The `admin` user is not yet available for creation. You need your Grafana username to log in to Grafana and access your dashboards.
	Login pulumi.StringOutput `pulumi:"login"`
	// The password of the Grafana user.
	Password pulumi.StringOutput `pulumi:"password"`
	// ) The ID of the Project the Cockpit is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The role assigned to the Grafana user. Must be `editor` or `viewer`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewCockpitGrafanaUser registers a new resource with the given unique name, arguments, and options.
func NewCockpitGrafanaUser(ctx *pulumi.Context,
	name string, args *CockpitGrafanaUserArgs, opts ...pulumi.ResourceOption) (*CockpitGrafanaUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Login == nil {
		return nil, errors.New("invalid value for required argument 'Login'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CockpitGrafanaUser
	err := ctx.RegisterResource("scaleway:index/cockpitGrafanaUser:CockpitGrafanaUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCockpitGrafanaUser gets an existing CockpitGrafanaUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCockpitGrafanaUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CockpitGrafanaUserState, opts ...pulumi.ResourceOption) (*CockpitGrafanaUser, error) {
	var resource CockpitGrafanaUser
	err := ctx.ReadResource("scaleway:index/cockpitGrafanaUser:CockpitGrafanaUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CockpitGrafanaUser resources.
type cockpitGrafanaUserState struct {
	// URL for Grafana.
	GrafanaUrl *string `pulumi:"grafanaUrl"`
	// The username of the Grafana user. The `admin` user is not yet available for creation. You need your Grafana username to log in to Grafana and access your dashboards.
	Login *string `pulumi:"login"`
	// The password of the Grafana user.
	Password *string `pulumi:"password"`
	// ) The ID of the Project the Cockpit is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The role assigned to the Grafana user. Must be `editor` or `viewer`.
	Role *string `pulumi:"role"`
}

type CockpitGrafanaUserState struct {
	// URL for Grafana.
	GrafanaUrl pulumi.StringPtrInput
	// The username of the Grafana user. The `admin` user is not yet available for creation. You need your Grafana username to log in to Grafana and access your dashboards.
	Login pulumi.StringPtrInput
	// The password of the Grafana user.
	Password pulumi.StringPtrInput
	// ) The ID of the Project the Cockpit is associated with.
	ProjectId pulumi.StringPtrInput
	// The role assigned to the Grafana user. Must be `editor` or `viewer`.
	Role pulumi.StringPtrInput
}

func (CockpitGrafanaUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*cockpitGrafanaUserState)(nil)).Elem()
}

type cockpitGrafanaUserArgs struct {
	// The username of the Grafana user. The `admin` user is not yet available for creation. You need your Grafana username to log in to Grafana and access your dashboards.
	Login string `pulumi:"login"`
	// ) The ID of the Project the Cockpit is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The role assigned to the Grafana user. Must be `editor` or `viewer`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a CockpitGrafanaUser resource.
type CockpitGrafanaUserArgs struct {
	// The username of the Grafana user. The `admin` user is not yet available for creation. You need your Grafana username to log in to Grafana and access your dashboards.
	Login pulumi.StringInput
	// ) The ID of the Project the Cockpit is associated with.
	ProjectId pulumi.StringPtrInput
	// The role assigned to the Grafana user. Must be `editor` or `viewer`.
	Role pulumi.StringInput
}

func (CockpitGrafanaUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cockpitGrafanaUserArgs)(nil)).Elem()
}

type CockpitGrafanaUserInput interface {
	pulumi.Input

	ToCockpitGrafanaUserOutput() CockpitGrafanaUserOutput
	ToCockpitGrafanaUserOutputWithContext(ctx context.Context) CockpitGrafanaUserOutput
}

func (*CockpitGrafanaUser) ElementType() reflect.Type {
	return reflect.TypeOf((**CockpitGrafanaUser)(nil)).Elem()
}

func (i *CockpitGrafanaUser) ToCockpitGrafanaUserOutput() CockpitGrafanaUserOutput {
	return i.ToCockpitGrafanaUserOutputWithContext(context.Background())
}

func (i *CockpitGrafanaUser) ToCockpitGrafanaUserOutputWithContext(ctx context.Context) CockpitGrafanaUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CockpitGrafanaUserOutput)
}

// CockpitGrafanaUserArrayInput is an input type that accepts CockpitGrafanaUserArray and CockpitGrafanaUserArrayOutput values.
// You can construct a concrete instance of `CockpitGrafanaUserArrayInput` via:
//
//	CockpitGrafanaUserArray{ CockpitGrafanaUserArgs{...} }
type CockpitGrafanaUserArrayInput interface {
	pulumi.Input

	ToCockpitGrafanaUserArrayOutput() CockpitGrafanaUserArrayOutput
	ToCockpitGrafanaUserArrayOutputWithContext(context.Context) CockpitGrafanaUserArrayOutput
}

type CockpitGrafanaUserArray []CockpitGrafanaUserInput

func (CockpitGrafanaUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CockpitGrafanaUser)(nil)).Elem()
}

func (i CockpitGrafanaUserArray) ToCockpitGrafanaUserArrayOutput() CockpitGrafanaUserArrayOutput {
	return i.ToCockpitGrafanaUserArrayOutputWithContext(context.Background())
}

func (i CockpitGrafanaUserArray) ToCockpitGrafanaUserArrayOutputWithContext(ctx context.Context) CockpitGrafanaUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CockpitGrafanaUserArrayOutput)
}

// CockpitGrafanaUserMapInput is an input type that accepts CockpitGrafanaUserMap and CockpitGrafanaUserMapOutput values.
// You can construct a concrete instance of `CockpitGrafanaUserMapInput` via:
//
//	CockpitGrafanaUserMap{ "key": CockpitGrafanaUserArgs{...} }
type CockpitGrafanaUserMapInput interface {
	pulumi.Input

	ToCockpitGrafanaUserMapOutput() CockpitGrafanaUserMapOutput
	ToCockpitGrafanaUserMapOutputWithContext(context.Context) CockpitGrafanaUserMapOutput
}

type CockpitGrafanaUserMap map[string]CockpitGrafanaUserInput

func (CockpitGrafanaUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CockpitGrafanaUser)(nil)).Elem()
}

func (i CockpitGrafanaUserMap) ToCockpitGrafanaUserMapOutput() CockpitGrafanaUserMapOutput {
	return i.ToCockpitGrafanaUserMapOutputWithContext(context.Background())
}

func (i CockpitGrafanaUserMap) ToCockpitGrafanaUserMapOutputWithContext(ctx context.Context) CockpitGrafanaUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CockpitGrafanaUserMapOutput)
}

type CockpitGrafanaUserOutput struct{ *pulumi.OutputState }

func (CockpitGrafanaUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CockpitGrafanaUser)(nil)).Elem()
}

func (o CockpitGrafanaUserOutput) ToCockpitGrafanaUserOutput() CockpitGrafanaUserOutput {
	return o
}

func (o CockpitGrafanaUserOutput) ToCockpitGrafanaUserOutputWithContext(ctx context.Context) CockpitGrafanaUserOutput {
	return o
}

// URL for Grafana.
func (o CockpitGrafanaUserOutput) GrafanaUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *CockpitGrafanaUser) pulumi.StringOutput { return v.GrafanaUrl }).(pulumi.StringOutput)
}

// The username of the Grafana user. The `admin` user is not yet available for creation. You need your Grafana username to log in to Grafana and access your dashboards.
func (o CockpitGrafanaUserOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v *CockpitGrafanaUser) pulumi.StringOutput { return v.Login }).(pulumi.StringOutput)
}

// The password of the Grafana user.
func (o CockpitGrafanaUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *CockpitGrafanaUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// ) The ID of the Project the Cockpit is associated with.
func (o CockpitGrafanaUserOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *CockpitGrafanaUser) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The role assigned to the Grafana user. Must be `editor` or `viewer`.
func (o CockpitGrafanaUserOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *CockpitGrafanaUser) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type CockpitGrafanaUserArrayOutput struct{ *pulumi.OutputState }

func (CockpitGrafanaUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CockpitGrafanaUser)(nil)).Elem()
}

func (o CockpitGrafanaUserArrayOutput) ToCockpitGrafanaUserArrayOutput() CockpitGrafanaUserArrayOutput {
	return o
}

func (o CockpitGrafanaUserArrayOutput) ToCockpitGrafanaUserArrayOutputWithContext(ctx context.Context) CockpitGrafanaUserArrayOutput {
	return o
}

func (o CockpitGrafanaUserArrayOutput) Index(i pulumi.IntInput) CockpitGrafanaUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CockpitGrafanaUser {
		return vs[0].([]*CockpitGrafanaUser)[vs[1].(int)]
	}).(CockpitGrafanaUserOutput)
}

type CockpitGrafanaUserMapOutput struct{ *pulumi.OutputState }

func (CockpitGrafanaUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CockpitGrafanaUser)(nil)).Elem()
}

func (o CockpitGrafanaUserMapOutput) ToCockpitGrafanaUserMapOutput() CockpitGrafanaUserMapOutput {
	return o
}

func (o CockpitGrafanaUserMapOutput) ToCockpitGrafanaUserMapOutputWithContext(ctx context.Context) CockpitGrafanaUserMapOutput {
	return o
}

func (o CockpitGrafanaUserMapOutput) MapIndex(k pulumi.StringInput) CockpitGrafanaUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CockpitGrafanaUser {
		return vs[0].(map[string]*CockpitGrafanaUser)[vs[1].(string)]
	}).(CockpitGrafanaUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CockpitGrafanaUserInput)(nil)).Elem(), &CockpitGrafanaUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*CockpitGrafanaUserArrayInput)(nil)).Elem(), CockpitGrafanaUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CockpitGrafanaUserMapInput)(nil)).Elem(), CockpitGrafanaUserMap{})
	pulumi.RegisterOutputType(CockpitGrafanaUserOutput{})
	pulumi.RegisterOutputType(CockpitGrafanaUserArrayOutput{})
	pulumi.RegisterOutputType(CockpitGrafanaUserMapOutput{})
}
