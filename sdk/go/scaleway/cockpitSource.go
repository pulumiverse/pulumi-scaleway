// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// The `CockpitSource` resource allows you to create and manage [data sources](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#data-sources) in Scaleway's Cockpit.
//
// Refer to Cockpit's [product documentation](https://www.scaleway.com/en/docs/observability/cockpit/concepts/) and [API documentation](https://www.scaleway.com/en/developers/api/cockpit/regional-api) for more information.
//
// ## Example Usage
//
// ### Create a data source
//
// The following command allows you to create a [metrics](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#metric) data source named `my-data-source` in a given Project.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := scaleway.NewAccountProject(ctx, "project", &scaleway.AccountProjectArgs{
//				Name: pulumi.String("test project data source"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewCockpitSource(ctx, "main", &scaleway.CockpitSourceArgs{
//				ProjectId: project.ID(),
//				Name:      pulumi.String("my-data-source"),
//				Type:      pulumi.String("metrics"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// This section explains how to import a data source using the ID of the region it is located in, in the `{region}/{id}` format.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/cockpitSource:CockpitSource main fr-par/11111111-1111-1111-1111-111111111111
// ```
type CockpitSource struct {
	pulumi.CustomResourceState

	// The date and time the data source was created (in RFC 3339 format).
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The name of the data source.
	Name pulumi.StringOutput `pulumi:"name"`
	// The origin of the Cockpit data source.
	Origin pulumi.StringOutput `pulumi:"origin"`
	// ) The ID of the Project the data source is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The URL endpoint used for pushing data to the Cockpit data source.
	PushUrl pulumi.StringOutput `pulumi:"pushUrl"`
	// ) The region where the data source is located.
	Region pulumi.StringOutput `pulumi:"region"`
	// Indicates whether the data source is synchronized with Grafana.
	SynchronizedWithGrafana pulumi.BoolOutput `pulumi:"synchronizedWithGrafana"`
	// The [type](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#data-types) of data source. Possible values are: `metrics`, `logs`, or `traces`.
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// The date and time the data source was last updated (in RFC 3339 format).
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The URL of the Cockpit data source.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewCockpitSource registers a new resource with the given unique name, arguments, and options.
func NewCockpitSource(ctx *pulumi.Context,
	name string, args *CockpitSourceArgs, opts ...pulumi.ResourceOption) (*CockpitSource, error) {
	if args == nil {
		args = &CockpitSourceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CockpitSource
	err := ctx.RegisterResource("scaleway:index/cockpitSource:CockpitSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCockpitSource gets an existing CockpitSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCockpitSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CockpitSourceState, opts ...pulumi.ResourceOption) (*CockpitSource, error) {
	var resource CockpitSource
	err := ctx.ReadResource("scaleway:index/cockpitSource:CockpitSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CockpitSource resources.
type cockpitSourceState struct {
	// The date and time the data source was created (in RFC 3339 format).
	CreatedAt *string `pulumi:"createdAt"`
	// The name of the data source.
	Name *string `pulumi:"name"`
	// The origin of the Cockpit data source.
	Origin *string `pulumi:"origin"`
	// ) The ID of the Project the data source is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The URL endpoint used for pushing data to the Cockpit data source.
	PushUrl *string `pulumi:"pushUrl"`
	// ) The region where the data source is located.
	Region *string `pulumi:"region"`
	// Indicates whether the data source is synchronized with Grafana.
	SynchronizedWithGrafana *bool `pulumi:"synchronizedWithGrafana"`
	// The [type](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#data-types) of data source. Possible values are: `metrics`, `logs`, or `traces`.
	Type *string `pulumi:"type"`
	// The date and time the data source was last updated (in RFC 3339 format).
	UpdatedAt *string `pulumi:"updatedAt"`
	// The URL of the Cockpit data source.
	Url *string `pulumi:"url"`
}

type CockpitSourceState struct {
	// The date and time the data source was created (in RFC 3339 format).
	CreatedAt pulumi.StringPtrInput
	// The name of the data source.
	Name pulumi.StringPtrInput
	// The origin of the Cockpit data source.
	Origin pulumi.StringPtrInput
	// ) The ID of the Project the data source is associated with.
	ProjectId pulumi.StringPtrInput
	// The URL endpoint used for pushing data to the Cockpit data source.
	PushUrl pulumi.StringPtrInput
	// ) The region where the data source is located.
	Region pulumi.StringPtrInput
	// Indicates whether the data source is synchronized with Grafana.
	SynchronizedWithGrafana pulumi.BoolPtrInput
	// The [type](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#data-types) of data source. Possible values are: `metrics`, `logs`, or `traces`.
	Type pulumi.StringPtrInput
	// The date and time the data source was last updated (in RFC 3339 format).
	UpdatedAt pulumi.StringPtrInput
	// The URL of the Cockpit data source.
	Url pulumi.StringPtrInput
}

func (CockpitSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*cockpitSourceState)(nil)).Elem()
}

type cockpitSourceArgs struct {
	// The name of the data source.
	Name *string `pulumi:"name"`
	// ) The ID of the Project the data source is associated with.
	ProjectId *string `pulumi:"projectId"`
	// ) The region where the data source is located.
	Region *string `pulumi:"region"`
	// The [type](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#data-types) of data source. Possible values are: `metrics`, `logs`, or `traces`.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a CockpitSource resource.
type CockpitSourceArgs struct {
	// The name of the data source.
	Name pulumi.StringPtrInput
	// ) The ID of the Project the data source is associated with.
	ProjectId pulumi.StringPtrInput
	// ) The region where the data source is located.
	Region pulumi.StringPtrInput
	// The [type](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#data-types) of data source. Possible values are: `metrics`, `logs`, or `traces`.
	Type pulumi.StringPtrInput
}

func (CockpitSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cockpitSourceArgs)(nil)).Elem()
}

type CockpitSourceInput interface {
	pulumi.Input

	ToCockpitSourceOutput() CockpitSourceOutput
	ToCockpitSourceOutputWithContext(ctx context.Context) CockpitSourceOutput
}

func (*CockpitSource) ElementType() reflect.Type {
	return reflect.TypeOf((**CockpitSource)(nil)).Elem()
}

func (i *CockpitSource) ToCockpitSourceOutput() CockpitSourceOutput {
	return i.ToCockpitSourceOutputWithContext(context.Background())
}

func (i *CockpitSource) ToCockpitSourceOutputWithContext(ctx context.Context) CockpitSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CockpitSourceOutput)
}

// CockpitSourceArrayInput is an input type that accepts CockpitSourceArray and CockpitSourceArrayOutput values.
// You can construct a concrete instance of `CockpitSourceArrayInput` via:
//
//	CockpitSourceArray{ CockpitSourceArgs{...} }
type CockpitSourceArrayInput interface {
	pulumi.Input

	ToCockpitSourceArrayOutput() CockpitSourceArrayOutput
	ToCockpitSourceArrayOutputWithContext(context.Context) CockpitSourceArrayOutput
}

type CockpitSourceArray []CockpitSourceInput

func (CockpitSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CockpitSource)(nil)).Elem()
}

func (i CockpitSourceArray) ToCockpitSourceArrayOutput() CockpitSourceArrayOutput {
	return i.ToCockpitSourceArrayOutputWithContext(context.Background())
}

func (i CockpitSourceArray) ToCockpitSourceArrayOutputWithContext(ctx context.Context) CockpitSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CockpitSourceArrayOutput)
}

// CockpitSourceMapInput is an input type that accepts CockpitSourceMap and CockpitSourceMapOutput values.
// You can construct a concrete instance of `CockpitSourceMapInput` via:
//
//	CockpitSourceMap{ "key": CockpitSourceArgs{...} }
type CockpitSourceMapInput interface {
	pulumi.Input

	ToCockpitSourceMapOutput() CockpitSourceMapOutput
	ToCockpitSourceMapOutputWithContext(context.Context) CockpitSourceMapOutput
}

type CockpitSourceMap map[string]CockpitSourceInput

func (CockpitSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CockpitSource)(nil)).Elem()
}

func (i CockpitSourceMap) ToCockpitSourceMapOutput() CockpitSourceMapOutput {
	return i.ToCockpitSourceMapOutputWithContext(context.Background())
}

func (i CockpitSourceMap) ToCockpitSourceMapOutputWithContext(ctx context.Context) CockpitSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CockpitSourceMapOutput)
}

type CockpitSourceOutput struct{ *pulumi.OutputState }

func (CockpitSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CockpitSource)(nil)).Elem()
}

func (o CockpitSourceOutput) ToCockpitSourceOutput() CockpitSourceOutput {
	return o
}

func (o CockpitSourceOutput) ToCockpitSourceOutputWithContext(ctx context.Context) CockpitSourceOutput {
	return o
}

// The date and time the data source was created (in RFC 3339 format).
func (o CockpitSourceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *CockpitSource) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The name of the data source.
func (o CockpitSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CockpitSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The origin of the Cockpit data source.
func (o CockpitSourceOutput) Origin() pulumi.StringOutput {
	return o.ApplyT(func(v *CockpitSource) pulumi.StringOutput { return v.Origin }).(pulumi.StringOutput)
}

// ) The ID of the Project the data source is associated with.
func (o CockpitSourceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *CockpitSource) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The URL endpoint used for pushing data to the Cockpit data source.
func (o CockpitSourceOutput) PushUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *CockpitSource) pulumi.StringOutput { return v.PushUrl }).(pulumi.StringOutput)
}

// ) The region where the data source is located.
func (o CockpitSourceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *CockpitSource) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Indicates whether the data source is synchronized with Grafana.
func (o CockpitSourceOutput) SynchronizedWithGrafana() pulumi.BoolOutput {
	return o.ApplyT(func(v *CockpitSource) pulumi.BoolOutput { return v.SynchronizedWithGrafana }).(pulumi.BoolOutput)
}

// The [type](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#data-types) of data source. Possible values are: `metrics`, `logs`, or `traces`.
func (o CockpitSourceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CockpitSource) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// The date and time the data source was last updated (in RFC 3339 format).
func (o CockpitSourceOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *CockpitSource) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The URL of the Cockpit data source.
func (o CockpitSourceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *CockpitSource) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type CockpitSourceArrayOutput struct{ *pulumi.OutputState }

func (CockpitSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CockpitSource)(nil)).Elem()
}

func (o CockpitSourceArrayOutput) ToCockpitSourceArrayOutput() CockpitSourceArrayOutput {
	return o
}

func (o CockpitSourceArrayOutput) ToCockpitSourceArrayOutputWithContext(ctx context.Context) CockpitSourceArrayOutput {
	return o
}

func (o CockpitSourceArrayOutput) Index(i pulumi.IntInput) CockpitSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CockpitSource {
		return vs[0].([]*CockpitSource)[vs[1].(int)]
	}).(CockpitSourceOutput)
}

type CockpitSourceMapOutput struct{ *pulumi.OutputState }

func (CockpitSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CockpitSource)(nil)).Elem()
}

func (o CockpitSourceMapOutput) ToCockpitSourceMapOutput() CockpitSourceMapOutput {
	return o
}

func (o CockpitSourceMapOutput) ToCockpitSourceMapOutputWithContext(ctx context.Context) CockpitSourceMapOutput {
	return o
}

func (o CockpitSourceMapOutput) MapIndex(k pulumi.StringInput) CockpitSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CockpitSource {
		return vs[0].(map[string]*CockpitSource)[vs[1].(string)]
	}).(CockpitSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CockpitSourceInput)(nil)).Elem(), &CockpitSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*CockpitSourceArrayInput)(nil)).Elem(), CockpitSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CockpitSourceMapInput)(nil)).Elem(), CockpitSourceMap{})
	pulumi.RegisterOutputType(CockpitSourceOutput{})
	pulumi.RegisterOutputType(CockpitSourceArrayOutput{})
	pulumi.RegisterOutputType(CockpitSourceMapOutput{})
}
