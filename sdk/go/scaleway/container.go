// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// The `containers.Container` resource allows you to create and manage [Serverless Containers](https://www.scaleway.com/en/docs/serverless/containers/).
//
// Refer to the Serverless Containers [product documentation](https://www.scaleway.com/en/docs/serverless/containers/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-containers/) for more information.
//
// For more information on the limitations of Serverless Containers, refer to the [dedicated documentation](https://www.scaleway.com/en/docs/serverless-containers/reference-content/containers-limitations/).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/containers"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := containers.NewNamespace(ctx, "main", &containers.NamespaceArgs{
//				Name:        pulumi.String("my-ns-test"),
//				Description: pulumi.String("test container"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = containers.NewContainer(ctx, "main", &containers.ContainerArgs{
//				Name:        pulumi.String("my-container-02"),
//				Description: pulumi.String("environment variables test"),
//				Tags: pulumi.StringArray{
//					pulumi.String("tag1"),
//					pulumi.String("tag2"),
//				},
//				NamespaceId: main.ID(),
//				RegistryImage: main.RegistryEndpoint.ApplyT(func(registryEndpoint string) (string, error) {
//					return fmt.Sprintf("%v/alpine:test", registryEndpoint), nil
//				}).(pulumi.StringOutput),
//				Port:           pulumi.Int(9997),
//				CpuLimit:       pulumi.Int(140),
//				MemoryLimit:    pulumi.Int(256),
//				MinScale:       pulumi.Int(3),
//				MaxScale:       pulumi.Int(5),
//				Timeout:        pulumi.Int(600),
//				MaxConcurrency: pulumi.Int(80),
//				Privacy:        pulumi.String("private"),
//				Protocol:       pulumi.String("http1"),
//				Deploy:         pulumi.Bool(true),
//				Commands: pulumi.StringArray{
//					pulumi.String("bash"),
//					pulumi.String("-c"),
//					pulumi.String("script.sh"),
//				},
//				Args: pulumi.StringArray{
//					pulumi.String("some"),
//					pulumi.String("args"),
//				},
//				EnvironmentVariables: pulumi.StringMap{
//					"foo": pulumi.String("var"),
//				},
//				SecretEnvironmentVariables: pulumi.StringMap{
//					"key": pulumi.String("secret"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Protocols
//
// The following protocols are supported:
//
// * `h2c`: HTTP/2 over TCP.
// * `http1`: Hypertext Transfer Protocol.
//
// > **Important:** Refer to the official [Apache documentation](https://httpd.apache.org/docs/2.4/howto/http2.html) for more information.
//
// ## Privacy
//
// By default, creating a container will make it `public`, meaning that anybody knowing the endpoint can execute it.
//
// A container can be made `private` with the privacy parameter.
//
// Refer to the [technical information](https://www.scaleway.com/en/developers/api/serverless-containers/#protocol-9dd4c8) for more information on container authentication.
//
// ## Memory and vCPUs configuration
//
// The vCPU represents a portion of the underlying, physical CPU that is assigned to a particular virtual machine (VM).
//
// You can determine the computing resources to allocate to each container.
//
// The `memoryLimit` (in MB) must correspond with the right amount of vCPU. Refer to the table below to determine the right memory/vCPU combination.
//
// | Memory (in MB) | vCPU |
// |----------------|------|
// | 128            | 70m  |
// | 256            | 140m |
// | 512            | 280m |
// | 1024           | 560m |
// | 2048           | 1120 |
// | 3072           | 1680 |
// | 4096           | 2240 |
//
// ~>**Important:** Make sure to select the right resources, as you will be billed based on compute usage over time and the number of Containers executions.
// Refer to the [Serverless Containers pricing](https://www.scaleway.com/en/docs/faq/serverless-containers/#prices) for more information.
//
// ## Health check configuration
//
// Custom health checks can be configured on the container.
//
// It's possible to specify the HTTP path that the probe will listen to and the number of failures before considering the container as unhealthy.
// During a deployment, if a newly created container fails to pass the health check, the deployment is aborted.
// As a result, lowering this value can help to reduce the time it takes to detect a failed deployment.
// The period between health checks is also configurable.
//
// Example:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/containers"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := containers.NewContainer(ctx, "main", &containers.ContainerArgs{
//				Name:        pulumi.String("my-container-02"),
//				NamespaceId: pulumi.Any(mainScalewayContainerNamespace.Id),
//				HealthChecks: containers.ContainerHealthCheckArray{
//					&containers.ContainerHealthCheckArgs{
//						Https: containers.ContainerHealthCheckHttpArray{
//							&containers.ContainerHealthCheckHttpArgs{
//								Path: pulumi.String("/ping"),
//							},
//						},
//						FailureThreshold: pulumi.Int(40),
//						Interval:         pulumi.String("5s"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ~>**Important:** Another probe type can be set to TCP with the API, but currently the SDK has not been updated with this parameter.
// This is why the only probe that can be used here is the HTTP probe.
// Refer to the [Serverless Containers pricing](https://www.scaleway.com/en/docs/faq/serverless-containers/#prices) for more information.
//
// ## Scaling option configuration
//
// Scaling option block configuration allows you to choose which parameter will scale up/down containers.
// Options are number of concurrent requests, CPU or memory usage.
// It replaces current `maxConcurrency` that has been deprecated.
//
// Example:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/containers"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := containers.NewContainer(ctx, "main", &containers.ContainerArgs{
//				Name:        pulumi.String("my-container-02"),
//				NamespaceId: pulumi.Any(mainScalewayContainerNamespace.Id),
//				ScalingOptions: containers.ContainerScalingOptionArray{
//					&containers.ContainerScalingOptionArgs{
//						ConcurrentRequestsThreshold: pulumi.Int(15),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ~>**Important**: A maximum of one of these parameters may be set. Also, when `cpuUsageThreshold` or `memoryUsageThreshold` are used, `minScale` can't be set to 0.
// Refer to the [API Reference](https://www.scaleway.com/en/developers/api/serverless-containers/#path-containers-create-a-new-container) for more information.
//
// ## Import
//
// Containers can be imported using, `{region}/{id}`, as shown below:
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/container:Container main fr-par/11111111-1111-1111-1111-111111111111
// ```
//
// Deprecated: scaleway.index/container.Container has been deprecated in favor of scaleway.containers/container.Container
type Container struct {
	pulumi.CustomResourceState

	// Arguments passed to the command specified in the "command" field. These override the default arguments from the container image, and behave like command-line parameters.
	Args pulumi.StringArrayOutput `pulumi:"args"`
	// Command executed when the container starts. This overrides the default command defined in the container image. This is usually the main executable, or entry point script to run.
	Commands pulumi.StringArrayOutput `pulumi:"commands"`
	// The amount of vCPU computing resources to allocate to each container.
	CpuLimit pulumi.IntOutput `pulumi:"cpuLimit"`
	// The cron status of the container.
	CronStatus pulumi.StringOutput `pulumi:"cronStatus"`
	// Boolean indicating whether the container is in a production environment.
	Deploy pulumi.BoolPtrOutput `pulumi:"deploy"`
	// The description of the container.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The native domain name of the container
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// The [environment variables](https://www.scaleway.com/en/docs/serverless-containers/concepts/#environment-variables) of the container.
	EnvironmentVariables pulumi.StringMapOutput `pulumi:"environmentVariables"`
	// The error message of the container.
	ErrorMessage pulumi.StringOutput `pulumi:"errorMessage"`
	// Health check configuration block of the container.
	HealthChecks ContainerHealthCheckArrayOutput `pulumi:"healthChecks"`
	// Allows both HTTP and HTTPS (`enabled`) or redirect HTTP to HTTPS (`redirected`). Defaults to `enabled`.
	HttpOption pulumi.StringPtrOutput `pulumi:"httpOption"`
	// Local storage limit of the container (in MB)
	LocalStorageLimit pulumi.IntOutput `pulumi:"localStorageLimit"`
	// The maximum number of simultaneous requests your container can handle at the same time. Use `scaling_option.concurrent_requests_threshold` instead.
	//
	// Deprecated: Use scaling_option.concurrent_requests_threshold instead. This attribute will be removed.
	MaxConcurrency pulumi.IntOutput `pulumi:"maxConcurrency"`
	// The maximum number of instances this container can scale to.
	MaxScale pulumi.IntOutput `pulumi:"maxScale"`
	// The memory resources in MB to allocate to each container.
	MemoryLimit pulumi.IntOutput `pulumi:"memoryLimit"`
	// The minimum number of container instances running continuously.
	MinScale pulumi.IntOutput `pulumi:"minScale"`
	// The unique name of the container name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Containers namespace ID of the container.
	//
	// > **Important** Updating the `name` argument will recreate the container.
	NamespaceId pulumi.StringOutput `pulumi:"namespaceId"`
	// The port to expose the container.
	Port pulumi.IntOutput `pulumi:"port"`
	// The privacy type defines the way to authenticate to your container. Please check our dedicated [section](https://www.scaleway.com/en/developers/api/serverless-containers/#protocol-9dd4c8).
	Privacy pulumi.StringPtrOutput `pulumi:"privacy"`
	// The ID of the Private Network the container is connected to.
	//
	// > **Important** This feature is currently in beta and requires a namespace with VPC integration activated by setting the `activateVpcIntegration` attribute to `true`.
	//
	// Note that if you want to use your own configuration, you must consult our configuration [restrictions](https://www.scaleway.com/en/docs/serverless-containers/reference-content/containers-limitations/#configuration-restrictions) section.
	PrivateNetworkId pulumi.StringPtrOutput `pulumi:"privateNetworkId"`
	// The communication [protocol](https://www.scaleway.com/en/developers/api/serverless-containers/#path-containers-update-an-existing-container) `http1` or `h2c`. Defaults to `http1`.
	Protocol pulumi.StringPtrOutput `pulumi:"protocol"`
	// (Defaults to provider `region`) The region in which the container was created.
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// The registry image address (e.g., `rg.fr-par.scw.cloud/$NAMESPACE/$IMAGE`)
	RegistryImage pulumi.StringOutput `pulumi:"registryImage"`
	// The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string.
	RegistrySha256 pulumi.StringPtrOutput `pulumi:"registrySha256"`
	// Execution environment of the container.
	Sandbox pulumi.StringOutput `pulumi:"sandbox"`
	// Configuration block used to decide when to scale up or down. Possible values:
	ScalingOptions ContainerScalingOptionArrayOutput `pulumi:"scalingOptions"`
	// The [secret environment variables](https://www.scaleway.com/en/docs/serverless-containers/concepts/#secrets) of the container.
	SecretEnvironmentVariables pulumi.StringMapOutput `pulumi:"secretEnvironmentVariables"`
	// The container status.
	Status pulumi.StringOutput `pulumi:"status"`
	// The list of tags associated with the container.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The maximum amount of time in seconds your container can spend processing a request before being stopped. Default to `300` seconds.
	Timeout pulumi.IntOutput `pulumi:"timeout"`
}

// NewContainer registers a new resource with the given unique name, arguments, and options.
func NewContainer(ctx *pulumi.Context,
	name string, args *ContainerArgs, opts ...pulumi.ResourceOption) (*Container, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NamespaceId == nil {
		return nil, errors.New("invalid value for required argument 'NamespaceId'")
	}
	if args.SecretEnvironmentVariables != nil {
		args.SecretEnvironmentVariables = pulumi.ToSecret(args.SecretEnvironmentVariables).(pulumi.StringMapInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secretEnvironmentVariables",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Container
	err := ctx.RegisterResource("scaleway:index/container:Container", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainer gets an existing Container resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerState, opts ...pulumi.ResourceOption) (*Container, error) {
	var resource Container
	err := ctx.ReadResource("scaleway:index/container:Container", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Container resources.
type containerState struct {
	// Arguments passed to the command specified in the "command" field. These override the default arguments from the container image, and behave like command-line parameters.
	Args []string `pulumi:"args"`
	// Command executed when the container starts. This overrides the default command defined in the container image. This is usually the main executable, or entry point script to run.
	Commands []string `pulumi:"commands"`
	// The amount of vCPU computing resources to allocate to each container.
	CpuLimit *int `pulumi:"cpuLimit"`
	// The cron status of the container.
	CronStatus *string `pulumi:"cronStatus"`
	// Boolean indicating whether the container is in a production environment.
	Deploy *bool `pulumi:"deploy"`
	// The description of the container.
	Description *string `pulumi:"description"`
	// The native domain name of the container
	DomainName *string `pulumi:"domainName"`
	// The [environment variables](https://www.scaleway.com/en/docs/serverless-containers/concepts/#environment-variables) of the container.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The error message of the container.
	ErrorMessage *string `pulumi:"errorMessage"`
	// Health check configuration block of the container.
	HealthChecks []ContainerHealthCheck `pulumi:"healthChecks"`
	// Allows both HTTP and HTTPS (`enabled`) or redirect HTTP to HTTPS (`redirected`). Defaults to `enabled`.
	HttpOption *string `pulumi:"httpOption"`
	// Local storage limit of the container (in MB)
	LocalStorageLimit *int `pulumi:"localStorageLimit"`
	// The maximum number of simultaneous requests your container can handle at the same time. Use `scaling_option.concurrent_requests_threshold` instead.
	//
	// Deprecated: Use scaling_option.concurrent_requests_threshold instead. This attribute will be removed.
	MaxConcurrency *int `pulumi:"maxConcurrency"`
	// The maximum number of instances this container can scale to.
	MaxScale *int `pulumi:"maxScale"`
	// The memory resources in MB to allocate to each container.
	MemoryLimit *int `pulumi:"memoryLimit"`
	// The minimum number of container instances running continuously.
	MinScale *int `pulumi:"minScale"`
	// The unique name of the container name.
	Name *string `pulumi:"name"`
	// The Containers namespace ID of the container.
	//
	// > **Important** Updating the `name` argument will recreate the container.
	NamespaceId *string `pulumi:"namespaceId"`
	// The port to expose the container.
	Port *int `pulumi:"port"`
	// The privacy type defines the way to authenticate to your container. Please check our dedicated [section](https://www.scaleway.com/en/developers/api/serverless-containers/#protocol-9dd4c8).
	Privacy *string `pulumi:"privacy"`
	// The ID of the Private Network the container is connected to.
	//
	// > **Important** This feature is currently in beta and requires a namespace with VPC integration activated by setting the `activateVpcIntegration` attribute to `true`.
	//
	// Note that if you want to use your own configuration, you must consult our configuration [restrictions](https://www.scaleway.com/en/docs/serverless-containers/reference-content/containers-limitations/#configuration-restrictions) section.
	PrivateNetworkId *string `pulumi:"privateNetworkId"`
	// The communication [protocol](https://www.scaleway.com/en/developers/api/serverless-containers/#path-containers-update-an-existing-container) `http1` or `h2c`. Defaults to `http1`.
	Protocol *string `pulumi:"protocol"`
	// (Defaults to provider `region`) The region in which the container was created.
	Region *string `pulumi:"region"`
	// The registry image address (e.g., `rg.fr-par.scw.cloud/$NAMESPACE/$IMAGE`)
	RegistryImage *string `pulumi:"registryImage"`
	// The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string.
	RegistrySha256 *string `pulumi:"registrySha256"`
	// Execution environment of the container.
	Sandbox *string `pulumi:"sandbox"`
	// Configuration block used to decide when to scale up or down. Possible values:
	ScalingOptions []ContainerScalingOption `pulumi:"scalingOptions"`
	// The [secret environment variables](https://www.scaleway.com/en/docs/serverless-containers/concepts/#secrets) of the container.
	SecretEnvironmentVariables map[string]string `pulumi:"secretEnvironmentVariables"`
	// The container status.
	Status *string `pulumi:"status"`
	// The list of tags associated with the container.
	Tags []string `pulumi:"tags"`
	// The maximum amount of time in seconds your container can spend processing a request before being stopped. Default to `300` seconds.
	Timeout *int `pulumi:"timeout"`
}

type ContainerState struct {
	// Arguments passed to the command specified in the "command" field. These override the default arguments from the container image, and behave like command-line parameters.
	Args pulumi.StringArrayInput
	// Command executed when the container starts. This overrides the default command defined in the container image. This is usually the main executable, or entry point script to run.
	Commands pulumi.StringArrayInput
	// The amount of vCPU computing resources to allocate to each container.
	CpuLimit pulumi.IntPtrInput
	// The cron status of the container.
	CronStatus pulumi.StringPtrInput
	// Boolean indicating whether the container is in a production environment.
	Deploy pulumi.BoolPtrInput
	// The description of the container.
	Description pulumi.StringPtrInput
	// The native domain name of the container
	DomainName pulumi.StringPtrInput
	// The [environment variables](https://www.scaleway.com/en/docs/serverless-containers/concepts/#environment-variables) of the container.
	EnvironmentVariables pulumi.StringMapInput
	// The error message of the container.
	ErrorMessage pulumi.StringPtrInput
	// Health check configuration block of the container.
	HealthChecks ContainerHealthCheckArrayInput
	// Allows both HTTP and HTTPS (`enabled`) or redirect HTTP to HTTPS (`redirected`). Defaults to `enabled`.
	HttpOption pulumi.StringPtrInput
	// Local storage limit of the container (in MB)
	LocalStorageLimit pulumi.IntPtrInput
	// The maximum number of simultaneous requests your container can handle at the same time. Use `scaling_option.concurrent_requests_threshold` instead.
	//
	// Deprecated: Use scaling_option.concurrent_requests_threshold instead. This attribute will be removed.
	MaxConcurrency pulumi.IntPtrInput
	// The maximum number of instances this container can scale to.
	MaxScale pulumi.IntPtrInput
	// The memory resources in MB to allocate to each container.
	MemoryLimit pulumi.IntPtrInput
	// The minimum number of container instances running continuously.
	MinScale pulumi.IntPtrInput
	// The unique name of the container name.
	Name pulumi.StringPtrInput
	// The Containers namespace ID of the container.
	//
	// > **Important** Updating the `name` argument will recreate the container.
	NamespaceId pulumi.StringPtrInput
	// The port to expose the container.
	Port pulumi.IntPtrInput
	// The privacy type defines the way to authenticate to your container. Please check our dedicated [section](https://www.scaleway.com/en/developers/api/serverless-containers/#protocol-9dd4c8).
	Privacy pulumi.StringPtrInput
	// The ID of the Private Network the container is connected to.
	//
	// > **Important** This feature is currently in beta and requires a namespace with VPC integration activated by setting the `activateVpcIntegration` attribute to `true`.
	//
	// Note that if you want to use your own configuration, you must consult our configuration [restrictions](https://www.scaleway.com/en/docs/serverless-containers/reference-content/containers-limitations/#configuration-restrictions) section.
	PrivateNetworkId pulumi.StringPtrInput
	// The communication [protocol](https://www.scaleway.com/en/developers/api/serverless-containers/#path-containers-update-an-existing-container) `http1` or `h2c`. Defaults to `http1`.
	Protocol pulumi.StringPtrInput
	// (Defaults to provider `region`) The region in which the container was created.
	Region pulumi.StringPtrInput
	// The registry image address (e.g., `rg.fr-par.scw.cloud/$NAMESPACE/$IMAGE`)
	RegistryImage pulumi.StringPtrInput
	// The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string.
	RegistrySha256 pulumi.StringPtrInput
	// Execution environment of the container.
	Sandbox pulumi.StringPtrInput
	// Configuration block used to decide when to scale up or down. Possible values:
	ScalingOptions ContainerScalingOptionArrayInput
	// The [secret environment variables](https://www.scaleway.com/en/docs/serverless-containers/concepts/#secrets) of the container.
	SecretEnvironmentVariables pulumi.StringMapInput
	// The container status.
	Status pulumi.StringPtrInput
	// The list of tags associated with the container.
	Tags pulumi.StringArrayInput
	// The maximum amount of time in seconds your container can spend processing a request before being stopped. Default to `300` seconds.
	Timeout pulumi.IntPtrInput
}

func (ContainerState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerState)(nil)).Elem()
}

type containerArgs struct {
	// Arguments passed to the command specified in the "command" field. These override the default arguments from the container image, and behave like command-line parameters.
	Args []string `pulumi:"args"`
	// Command executed when the container starts. This overrides the default command defined in the container image. This is usually the main executable, or entry point script to run.
	Commands []string `pulumi:"commands"`
	// The amount of vCPU computing resources to allocate to each container.
	CpuLimit *int `pulumi:"cpuLimit"`
	// Boolean indicating whether the container is in a production environment.
	Deploy *bool `pulumi:"deploy"`
	// The description of the container.
	Description *string `pulumi:"description"`
	// The [environment variables](https://www.scaleway.com/en/docs/serverless-containers/concepts/#environment-variables) of the container.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Health check configuration block of the container.
	HealthChecks []ContainerHealthCheck `pulumi:"healthChecks"`
	// Allows both HTTP and HTTPS (`enabled`) or redirect HTTP to HTTPS (`redirected`). Defaults to `enabled`.
	HttpOption *string `pulumi:"httpOption"`
	// Local storage limit of the container (in MB)
	LocalStorageLimit *int `pulumi:"localStorageLimit"`
	// The maximum number of simultaneous requests your container can handle at the same time. Use `scaling_option.concurrent_requests_threshold` instead.
	//
	// Deprecated: Use scaling_option.concurrent_requests_threshold instead. This attribute will be removed.
	MaxConcurrency *int `pulumi:"maxConcurrency"`
	// The maximum number of instances this container can scale to.
	MaxScale *int `pulumi:"maxScale"`
	// The memory resources in MB to allocate to each container.
	MemoryLimit *int `pulumi:"memoryLimit"`
	// The minimum number of container instances running continuously.
	MinScale *int `pulumi:"minScale"`
	// The unique name of the container name.
	Name *string `pulumi:"name"`
	// The Containers namespace ID of the container.
	//
	// > **Important** Updating the `name` argument will recreate the container.
	NamespaceId string `pulumi:"namespaceId"`
	// The port to expose the container.
	Port *int `pulumi:"port"`
	// The privacy type defines the way to authenticate to your container. Please check our dedicated [section](https://www.scaleway.com/en/developers/api/serverless-containers/#protocol-9dd4c8).
	Privacy *string `pulumi:"privacy"`
	// The ID of the Private Network the container is connected to.
	//
	// > **Important** This feature is currently in beta and requires a namespace with VPC integration activated by setting the `activateVpcIntegration` attribute to `true`.
	//
	// Note that if you want to use your own configuration, you must consult our configuration [restrictions](https://www.scaleway.com/en/docs/serverless-containers/reference-content/containers-limitations/#configuration-restrictions) section.
	PrivateNetworkId *string `pulumi:"privateNetworkId"`
	// The communication [protocol](https://www.scaleway.com/en/developers/api/serverless-containers/#path-containers-update-an-existing-container) `http1` or `h2c`. Defaults to `http1`.
	Protocol *string `pulumi:"protocol"`
	// (Defaults to provider `region`) The region in which the container was created.
	Region *string `pulumi:"region"`
	// The registry image address (e.g., `rg.fr-par.scw.cloud/$NAMESPACE/$IMAGE`)
	RegistryImage *string `pulumi:"registryImage"`
	// The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string.
	RegistrySha256 *string `pulumi:"registrySha256"`
	// Execution environment of the container.
	Sandbox *string `pulumi:"sandbox"`
	// Configuration block used to decide when to scale up or down. Possible values:
	ScalingOptions []ContainerScalingOption `pulumi:"scalingOptions"`
	// The [secret environment variables](https://www.scaleway.com/en/docs/serverless-containers/concepts/#secrets) of the container.
	SecretEnvironmentVariables map[string]string `pulumi:"secretEnvironmentVariables"`
	// The container status.
	Status *string `pulumi:"status"`
	// The list of tags associated with the container.
	Tags []string `pulumi:"tags"`
	// The maximum amount of time in seconds your container can spend processing a request before being stopped. Default to `300` seconds.
	Timeout *int `pulumi:"timeout"`
}

// The set of arguments for constructing a Container resource.
type ContainerArgs struct {
	// Arguments passed to the command specified in the "command" field. These override the default arguments from the container image, and behave like command-line parameters.
	Args pulumi.StringArrayInput
	// Command executed when the container starts. This overrides the default command defined in the container image. This is usually the main executable, or entry point script to run.
	Commands pulumi.StringArrayInput
	// The amount of vCPU computing resources to allocate to each container.
	CpuLimit pulumi.IntPtrInput
	// Boolean indicating whether the container is in a production environment.
	Deploy pulumi.BoolPtrInput
	// The description of the container.
	Description pulumi.StringPtrInput
	// The [environment variables](https://www.scaleway.com/en/docs/serverless-containers/concepts/#environment-variables) of the container.
	EnvironmentVariables pulumi.StringMapInput
	// Health check configuration block of the container.
	HealthChecks ContainerHealthCheckArrayInput
	// Allows both HTTP and HTTPS (`enabled`) or redirect HTTP to HTTPS (`redirected`). Defaults to `enabled`.
	HttpOption pulumi.StringPtrInput
	// Local storage limit of the container (in MB)
	LocalStorageLimit pulumi.IntPtrInput
	// The maximum number of simultaneous requests your container can handle at the same time. Use `scaling_option.concurrent_requests_threshold` instead.
	//
	// Deprecated: Use scaling_option.concurrent_requests_threshold instead. This attribute will be removed.
	MaxConcurrency pulumi.IntPtrInput
	// The maximum number of instances this container can scale to.
	MaxScale pulumi.IntPtrInput
	// The memory resources in MB to allocate to each container.
	MemoryLimit pulumi.IntPtrInput
	// The minimum number of container instances running continuously.
	MinScale pulumi.IntPtrInput
	// The unique name of the container name.
	Name pulumi.StringPtrInput
	// The Containers namespace ID of the container.
	//
	// > **Important** Updating the `name` argument will recreate the container.
	NamespaceId pulumi.StringInput
	// The port to expose the container.
	Port pulumi.IntPtrInput
	// The privacy type defines the way to authenticate to your container. Please check our dedicated [section](https://www.scaleway.com/en/developers/api/serverless-containers/#protocol-9dd4c8).
	Privacy pulumi.StringPtrInput
	// The ID of the Private Network the container is connected to.
	//
	// > **Important** This feature is currently in beta and requires a namespace with VPC integration activated by setting the `activateVpcIntegration` attribute to `true`.
	//
	// Note that if you want to use your own configuration, you must consult our configuration [restrictions](https://www.scaleway.com/en/docs/serverless-containers/reference-content/containers-limitations/#configuration-restrictions) section.
	PrivateNetworkId pulumi.StringPtrInput
	// The communication [protocol](https://www.scaleway.com/en/developers/api/serverless-containers/#path-containers-update-an-existing-container) `http1` or `h2c`. Defaults to `http1`.
	Protocol pulumi.StringPtrInput
	// (Defaults to provider `region`) The region in which the container was created.
	Region pulumi.StringPtrInput
	// The registry image address (e.g., `rg.fr-par.scw.cloud/$NAMESPACE/$IMAGE`)
	RegistryImage pulumi.StringPtrInput
	// The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string.
	RegistrySha256 pulumi.StringPtrInput
	// Execution environment of the container.
	Sandbox pulumi.StringPtrInput
	// Configuration block used to decide when to scale up or down. Possible values:
	ScalingOptions ContainerScalingOptionArrayInput
	// The [secret environment variables](https://www.scaleway.com/en/docs/serverless-containers/concepts/#secrets) of the container.
	SecretEnvironmentVariables pulumi.StringMapInput
	// The container status.
	Status pulumi.StringPtrInput
	// The list of tags associated with the container.
	Tags pulumi.StringArrayInput
	// The maximum amount of time in seconds your container can spend processing a request before being stopped. Default to `300` seconds.
	Timeout pulumi.IntPtrInput
}

func (ContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerArgs)(nil)).Elem()
}

type ContainerInput interface {
	pulumi.Input

	ToContainerOutput() ContainerOutput
	ToContainerOutputWithContext(ctx context.Context) ContainerOutput
}

func (*Container) ElementType() reflect.Type {
	return reflect.TypeOf((**Container)(nil)).Elem()
}

func (i *Container) ToContainerOutput() ContainerOutput {
	return i.ToContainerOutputWithContext(context.Background())
}

func (i *Container) ToContainerOutputWithContext(ctx context.Context) ContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerOutput)
}

// ContainerArrayInput is an input type that accepts ContainerArray and ContainerArrayOutput values.
// You can construct a concrete instance of `ContainerArrayInput` via:
//
//	ContainerArray{ ContainerArgs{...} }
type ContainerArrayInput interface {
	pulumi.Input

	ToContainerArrayOutput() ContainerArrayOutput
	ToContainerArrayOutputWithContext(context.Context) ContainerArrayOutput
}

type ContainerArray []ContainerInput

func (ContainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Container)(nil)).Elem()
}

func (i ContainerArray) ToContainerArrayOutput() ContainerArrayOutput {
	return i.ToContainerArrayOutputWithContext(context.Background())
}

func (i ContainerArray) ToContainerArrayOutputWithContext(ctx context.Context) ContainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerArrayOutput)
}

// ContainerMapInput is an input type that accepts ContainerMap and ContainerMapOutput values.
// You can construct a concrete instance of `ContainerMapInput` via:
//
//	ContainerMap{ "key": ContainerArgs{...} }
type ContainerMapInput interface {
	pulumi.Input

	ToContainerMapOutput() ContainerMapOutput
	ToContainerMapOutputWithContext(context.Context) ContainerMapOutput
}

type ContainerMap map[string]ContainerInput

func (ContainerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Container)(nil)).Elem()
}

func (i ContainerMap) ToContainerMapOutput() ContainerMapOutput {
	return i.ToContainerMapOutputWithContext(context.Background())
}

func (i ContainerMap) ToContainerMapOutputWithContext(ctx context.Context) ContainerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerMapOutput)
}

type ContainerOutput struct{ *pulumi.OutputState }

func (ContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Container)(nil)).Elem()
}

func (o ContainerOutput) ToContainerOutput() ContainerOutput {
	return o
}

func (o ContainerOutput) ToContainerOutputWithContext(ctx context.Context) ContainerOutput {
	return o
}

// Arguments passed to the command specified in the "command" field. These override the default arguments from the container image, and behave like command-line parameters.
func (o ContainerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Container) pulumi.StringArrayOutput { return v.Args }).(pulumi.StringArrayOutput)
}

// Command executed when the container starts. This overrides the default command defined in the container image. This is usually the main executable, or entry point script to run.
func (o ContainerOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Container) pulumi.StringArrayOutput { return v.Commands }).(pulumi.StringArrayOutput)
}

// The amount of vCPU computing resources to allocate to each container.
func (o ContainerOutput) CpuLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *Container) pulumi.IntOutput { return v.CpuLimit }).(pulumi.IntOutput)
}

// The cron status of the container.
func (o ContainerOutput) CronStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Container) pulumi.StringOutput { return v.CronStatus }).(pulumi.StringOutput)
}

// Boolean indicating whether the container is in a production environment.
func (o ContainerOutput) Deploy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.BoolPtrOutput { return v.Deploy }).(pulumi.BoolPtrOutput)
}

// The description of the container.
func (o ContainerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The native domain name of the container
func (o ContainerOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *Container) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// The [environment variables](https://www.scaleway.com/en/docs/serverless-containers/concepts/#environment-variables) of the container.
func (o ContainerOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Container) pulumi.StringMapOutput { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// The error message of the container.
func (o ContainerOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *Container) pulumi.StringOutput { return v.ErrorMessage }).(pulumi.StringOutput)
}

// Health check configuration block of the container.
func (o ContainerOutput) HealthChecks() ContainerHealthCheckArrayOutput {
	return o.ApplyT(func(v *Container) ContainerHealthCheckArrayOutput { return v.HealthChecks }).(ContainerHealthCheckArrayOutput)
}

// Allows both HTTP and HTTPS (`enabled`) or redirect HTTP to HTTPS (`redirected`). Defaults to `enabled`.
func (o ContainerOutput) HttpOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.StringPtrOutput { return v.HttpOption }).(pulumi.StringPtrOutput)
}

// Local storage limit of the container (in MB)
func (o ContainerOutput) LocalStorageLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *Container) pulumi.IntOutput { return v.LocalStorageLimit }).(pulumi.IntOutput)
}

// The maximum number of simultaneous requests your container can handle at the same time. Use `scaling_option.concurrent_requests_threshold` instead.
//
// Deprecated: Use scaling_option.concurrent_requests_threshold instead. This attribute will be removed.
func (o ContainerOutput) MaxConcurrency() pulumi.IntOutput {
	return o.ApplyT(func(v *Container) pulumi.IntOutput { return v.MaxConcurrency }).(pulumi.IntOutput)
}

// The maximum number of instances this container can scale to.
func (o ContainerOutput) MaxScale() pulumi.IntOutput {
	return o.ApplyT(func(v *Container) pulumi.IntOutput { return v.MaxScale }).(pulumi.IntOutput)
}

// The memory resources in MB to allocate to each container.
func (o ContainerOutput) MemoryLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *Container) pulumi.IntOutput { return v.MemoryLimit }).(pulumi.IntOutput)
}

// The minimum number of container instances running continuously.
func (o ContainerOutput) MinScale() pulumi.IntOutput {
	return o.ApplyT(func(v *Container) pulumi.IntOutput { return v.MinScale }).(pulumi.IntOutput)
}

// The unique name of the container name.
func (o ContainerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Container) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Containers namespace ID of the container.
//
// > **Important** Updating the `name` argument will recreate the container.
func (o ContainerOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Container) pulumi.StringOutput { return v.NamespaceId }).(pulumi.StringOutput)
}

// The port to expose the container.
func (o ContainerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Container) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The privacy type defines the way to authenticate to your container. Please check our dedicated [section](https://www.scaleway.com/en/developers/api/serverless-containers/#protocol-9dd4c8).
func (o ContainerOutput) Privacy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.StringPtrOutput { return v.Privacy }).(pulumi.StringPtrOutput)
}

// The ID of the Private Network the container is connected to.
//
// > **Important** This feature is currently in beta and requires a namespace with VPC integration activated by setting the `activateVpcIntegration` attribute to `true`.
//
// Note that if you want to use your own configuration, you must consult our configuration [restrictions](https://www.scaleway.com/en/docs/serverless-containers/reference-content/containers-limitations/#configuration-restrictions) section.
func (o ContainerOutput) PrivateNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.StringPtrOutput { return v.PrivateNetworkId }).(pulumi.StringPtrOutput)
}

// The communication [protocol](https://www.scaleway.com/en/developers/api/serverless-containers/#path-containers-update-an-existing-container) `http1` or `h2c`. Defaults to `http1`.
func (o ContainerOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.StringPtrOutput { return v.Protocol }).(pulumi.StringPtrOutput)
}

// (Defaults to provider `region`) The region in which the container was created.
func (o ContainerOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// The registry image address (e.g., `rg.fr-par.scw.cloud/$NAMESPACE/$IMAGE`)
func (o ContainerOutput) RegistryImage() pulumi.StringOutput {
	return o.ApplyT(func(v *Container) pulumi.StringOutput { return v.RegistryImage }).(pulumi.StringOutput)
}

// The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string.
func (o ContainerOutput) RegistrySha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Container) pulumi.StringPtrOutput { return v.RegistrySha256 }).(pulumi.StringPtrOutput)
}

// Execution environment of the container.
func (o ContainerOutput) Sandbox() pulumi.StringOutput {
	return o.ApplyT(func(v *Container) pulumi.StringOutput { return v.Sandbox }).(pulumi.StringOutput)
}

// Configuration block used to decide when to scale up or down. Possible values:
func (o ContainerOutput) ScalingOptions() ContainerScalingOptionArrayOutput {
	return o.ApplyT(func(v *Container) ContainerScalingOptionArrayOutput { return v.ScalingOptions }).(ContainerScalingOptionArrayOutput)
}

// The [secret environment variables](https://www.scaleway.com/en/docs/serverless-containers/concepts/#secrets) of the container.
func (o ContainerOutput) SecretEnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Container) pulumi.StringMapOutput { return v.SecretEnvironmentVariables }).(pulumi.StringMapOutput)
}

// The container status.
func (o ContainerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Container) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The list of tags associated with the container.
func (o ContainerOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Container) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The maximum amount of time in seconds your container can spend processing a request before being stopped. Default to `300` seconds.
func (o ContainerOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Container) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

type ContainerArrayOutput struct{ *pulumi.OutputState }

func (ContainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Container)(nil)).Elem()
}

func (o ContainerArrayOutput) ToContainerArrayOutput() ContainerArrayOutput {
	return o
}

func (o ContainerArrayOutput) ToContainerArrayOutputWithContext(ctx context.Context) ContainerArrayOutput {
	return o
}

func (o ContainerArrayOutput) Index(i pulumi.IntInput) ContainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Container {
		return vs[0].([]*Container)[vs[1].(int)]
	}).(ContainerOutput)
}

type ContainerMapOutput struct{ *pulumi.OutputState }

func (ContainerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Container)(nil)).Elem()
}

func (o ContainerMapOutput) ToContainerMapOutput() ContainerMapOutput {
	return o
}

func (o ContainerMapOutput) ToContainerMapOutputWithContext(ctx context.Context) ContainerMapOutput {
	return o
}

func (o ContainerMapOutput) MapIndex(k pulumi.StringInput) ContainerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Container {
		return vs[0].(map[string]*Container)[vs[1].(string)]
	}).(ContainerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInput)(nil)).Elem(), &Container{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerArrayInput)(nil)).Elem(), ContainerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerMapInput)(nil)).Elem(), ContainerMap{})
	pulumi.RegisterOutputType(ContainerOutput{})
	pulumi.RegisterOutputType(ContainerArrayOutput{})
	pulumi.RegisterOutputType(ContainerMapOutput{})
}
