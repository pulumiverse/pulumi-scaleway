// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// The `containers.Cron` resource allows you to create and manage CRON triggers for Scaleway [Serverless Containers](https://www.scaleway.com/en/docs/serverless/containers/).
//
// Refer to the Containers CRON triggers [documentation](https://www.scaleway.com/en/docs/serverless/containers/how-to/add-trigger-to-a-container/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-containers/#path-triggers-list-all-triggers) for more information.
//
// ## Example Usage
//
// The following command allows you to add a CRON trigger to a Serverless Container.
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/containers"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := containers.NewNamespace(ctx, "main", nil)
//			if err != nil {
//				return err
//			}
//			mainContainer, err := containers.NewContainer(ctx, "main", &containers.ContainerArgs{
//				Name:        pulumi.String("my-container-with-cron-tf"),
//				NamespaceId: main.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"address": map[string]interface{}{
//					"city":    "Paris",
//					"country": "FR",
//				},
//				"age":       23,
//				"firstName": "John",
//				"isAlive":   true,
//				"lastName":  "Smith",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = containers.NewCron(ctx, "main", &containers.CronArgs{
//				ContainerId: mainContainer.ID(),
//				Name:        pulumi.String("my-cron-name"),
//				Schedule:    pulumi.String("5 4 1 * *"),
//				Args:        pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Container Cron can be imported using `{region}/{id}`, as shown below:
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/containerCron:ContainerCron main fr-par/11111111-1111-1111-1111-111111111111
// ```
//
// Deprecated: scaleway.index/containercron.ContainerCron has been deprecated in favor of scaleway.containers/cron.Cron
type ContainerCron struct {
	pulumi.CustomResourceState

	// The key-value mapping to define arguments that will be passed to your container’s event object
	Args pulumi.StringOutput `pulumi:"args"`
	// The unique identifier of the container to link to your CRON trigger.
	ContainerId pulumi.StringOutput `pulumi:"containerId"`
	// The name of the container CRON trigger. If not provided, a random name is generated.
	Name pulumi.StringOutput `pulumi:"name"`
	// (Defaults to provider `region`) The region
	// in which the CRON trigger is created.
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// CRON format string (refer to the [CRON schedule reference](https://www.scaleway.com/en/docs/serverless/containers/reference-content/cron-schedules/) for more information).
	Schedule pulumi.StringOutput `pulumi:"schedule"`
	// The CRON status.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewContainerCron registers a new resource with the given unique name, arguments, and options.
func NewContainerCron(ctx *pulumi.Context,
	name string, args *ContainerCronArgs, opts ...pulumi.ResourceOption) (*ContainerCron, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Args == nil {
		return nil, errors.New("invalid value for required argument 'Args'")
	}
	if args.ContainerId == nil {
		return nil, errors.New("invalid value for required argument 'ContainerId'")
	}
	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ContainerCron
	err := ctx.RegisterResource("scaleway:index/containerCron:ContainerCron", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerCron gets an existing ContainerCron resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerCron(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerCronState, opts ...pulumi.ResourceOption) (*ContainerCron, error) {
	var resource ContainerCron
	err := ctx.ReadResource("scaleway:index/containerCron:ContainerCron", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerCron resources.
type containerCronState struct {
	// The key-value mapping to define arguments that will be passed to your container’s event object
	Args *string `pulumi:"args"`
	// The unique identifier of the container to link to your CRON trigger.
	ContainerId *string `pulumi:"containerId"`
	// The name of the container CRON trigger. If not provided, a random name is generated.
	Name *string `pulumi:"name"`
	// (Defaults to provider `region`) The region
	// in which the CRON trigger is created.
	Region *string `pulumi:"region"`
	// CRON format string (refer to the [CRON schedule reference](https://www.scaleway.com/en/docs/serverless/containers/reference-content/cron-schedules/) for more information).
	Schedule *string `pulumi:"schedule"`
	// The CRON status.
	Status *string `pulumi:"status"`
}

type ContainerCronState struct {
	// The key-value mapping to define arguments that will be passed to your container’s event object
	Args pulumi.StringPtrInput
	// The unique identifier of the container to link to your CRON trigger.
	ContainerId pulumi.StringPtrInput
	// The name of the container CRON trigger. If not provided, a random name is generated.
	Name pulumi.StringPtrInput
	// (Defaults to provider `region`) The region
	// in which the CRON trigger is created.
	Region pulumi.StringPtrInput
	// CRON format string (refer to the [CRON schedule reference](https://www.scaleway.com/en/docs/serverless/containers/reference-content/cron-schedules/) for more information).
	Schedule pulumi.StringPtrInput
	// The CRON status.
	Status pulumi.StringPtrInput
}

func (ContainerCronState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerCronState)(nil)).Elem()
}

type containerCronArgs struct {
	// The key-value mapping to define arguments that will be passed to your container’s event object
	Args string `pulumi:"args"`
	// The unique identifier of the container to link to your CRON trigger.
	ContainerId string `pulumi:"containerId"`
	// The name of the container CRON trigger. If not provided, a random name is generated.
	Name *string `pulumi:"name"`
	// (Defaults to provider `region`) The region
	// in which the CRON trigger is created.
	Region *string `pulumi:"region"`
	// CRON format string (refer to the [CRON schedule reference](https://www.scaleway.com/en/docs/serverless/containers/reference-content/cron-schedules/) for more information).
	Schedule string `pulumi:"schedule"`
}

// The set of arguments for constructing a ContainerCron resource.
type ContainerCronArgs struct {
	// The key-value mapping to define arguments that will be passed to your container’s event object
	Args pulumi.StringInput
	// The unique identifier of the container to link to your CRON trigger.
	ContainerId pulumi.StringInput
	// The name of the container CRON trigger. If not provided, a random name is generated.
	Name pulumi.StringPtrInput
	// (Defaults to provider `region`) The region
	// in which the CRON trigger is created.
	Region pulumi.StringPtrInput
	// CRON format string (refer to the [CRON schedule reference](https://www.scaleway.com/en/docs/serverless/containers/reference-content/cron-schedules/) for more information).
	Schedule pulumi.StringInput
}

func (ContainerCronArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerCronArgs)(nil)).Elem()
}

type ContainerCronInput interface {
	pulumi.Input

	ToContainerCronOutput() ContainerCronOutput
	ToContainerCronOutputWithContext(ctx context.Context) ContainerCronOutput
}

func (*ContainerCron) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerCron)(nil)).Elem()
}

func (i *ContainerCron) ToContainerCronOutput() ContainerCronOutput {
	return i.ToContainerCronOutputWithContext(context.Background())
}

func (i *ContainerCron) ToContainerCronOutputWithContext(ctx context.Context) ContainerCronOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerCronOutput)
}

// ContainerCronArrayInput is an input type that accepts ContainerCronArray and ContainerCronArrayOutput values.
// You can construct a concrete instance of `ContainerCronArrayInput` via:
//
//	ContainerCronArray{ ContainerCronArgs{...} }
type ContainerCronArrayInput interface {
	pulumi.Input

	ToContainerCronArrayOutput() ContainerCronArrayOutput
	ToContainerCronArrayOutputWithContext(context.Context) ContainerCronArrayOutput
}

type ContainerCronArray []ContainerCronInput

func (ContainerCronArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerCron)(nil)).Elem()
}

func (i ContainerCronArray) ToContainerCronArrayOutput() ContainerCronArrayOutput {
	return i.ToContainerCronArrayOutputWithContext(context.Background())
}

func (i ContainerCronArray) ToContainerCronArrayOutputWithContext(ctx context.Context) ContainerCronArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerCronArrayOutput)
}

// ContainerCronMapInput is an input type that accepts ContainerCronMap and ContainerCronMapOutput values.
// You can construct a concrete instance of `ContainerCronMapInput` via:
//
//	ContainerCronMap{ "key": ContainerCronArgs{...} }
type ContainerCronMapInput interface {
	pulumi.Input

	ToContainerCronMapOutput() ContainerCronMapOutput
	ToContainerCronMapOutputWithContext(context.Context) ContainerCronMapOutput
}

type ContainerCronMap map[string]ContainerCronInput

func (ContainerCronMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerCron)(nil)).Elem()
}

func (i ContainerCronMap) ToContainerCronMapOutput() ContainerCronMapOutput {
	return i.ToContainerCronMapOutputWithContext(context.Background())
}

func (i ContainerCronMap) ToContainerCronMapOutputWithContext(ctx context.Context) ContainerCronMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerCronMapOutput)
}

type ContainerCronOutput struct{ *pulumi.OutputState }

func (ContainerCronOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerCron)(nil)).Elem()
}

func (o ContainerCronOutput) ToContainerCronOutput() ContainerCronOutput {
	return o
}

func (o ContainerCronOutput) ToContainerCronOutputWithContext(ctx context.Context) ContainerCronOutput {
	return o
}

// The key-value mapping to define arguments that will be passed to your container’s event object
func (o ContainerCronOutput) Args() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerCron) pulumi.StringOutput { return v.Args }).(pulumi.StringOutput)
}

// The unique identifier of the container to link to your CRON trigger.
func (o ContainerCronOutput) ContainerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerCron) pulumi.StringOutput { return v.ContainerId }).(pulumi.StringOutput)
}

// The name of the container CRON trigger. If not provided, a random name is generated.
func (o ContainerCronOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerCron) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// (Defaults to provider `region`) The region
// in which the CRON trigger is created.
func (o ContainerCronOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerCron) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// CRON format string (refer to the [CRON schedule reference](https://www.scaleway.com/en/docs/serverless/containers/reference-content/cron-schedules/) for more information).
func (o ContainerCronOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerCron) pulumi.StringOutput { return v.Schedule }).(pulumi.StringOutput)
}

// The CRON status.
func (o ContainerCronOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerCron) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type ContainerCronArrayOutput struct{ *pulumi.OutputState }

func (ContainerCronArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerCron)(nil)).Elem()
}

func (o ContainerCronArrayOutput) ToContainerCronArrayOutput() ContainerCronArrayOutput {
	return o
}

func (o ContainerCronArrayOutput) ToContainerCronArrayOutputWithContext(ctx context.Context) ContainerCronArrayOutput {
	return o
}

func (o ContainerCronArrayOutput) Index(i pulumi.IntInput) ContainerCronOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContainerCron {
		return vs[0].([]*ContainerCron)[vs[1].(int)]
	}).(ContainerCronOutput)
}

type ContainerCronMapOutput struct{ *pulumi.OutputState }

func (ContainerCronMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerCron)(nil)).Elem()
}

func (o ContainerCronMapOutput) ToContainerCronMapOutput() ContainerCronMapOutput {
	return o
}

func (o ContainerCronMapOutput) ToContainerCronMapOutputWithContext(ctx context.Context) ContainerCronMapOutput {
	return o
}

func (o ContainerCronMapOutput) MapIndex(k pulumi.StringInput) ContainerCronOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContainerCron {
		return vs[0].(map[string]*ContainerCron)[vs[1].(string)]
	}).(ContainerCronOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerCronInput)(nil)).Elem(), &ContainerCron{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerCronArrayInput)(nil)).Elem(), ContainerCronArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerCronMapInput)(nil)).Elem(), ContainerCronMap{})
	pulumi.RegisterOutputType(ContainerCronOutput{})
	pulumi.RegisterOutputType(ContainerCronArrayOutput{})
	pulumi.RegisterOutputType(ContainerCronMapOutput{})
}
