// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containers

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// The `containers.Cron` resource allows you to create and manage CRON triggers for Scaleway [Serverless Containers](https://www.scaleway.com/en/docs/serverless/containers/).
//
// Refer to the Containers CRON triggers [documentation](https://www.scaleway.com/en/docs/serverless/containers/how-to/add-trigger-to-a-container/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-containers/#path-triggers-list-all-triggers) for more information.
//
// ## Example Usage
//
// The following command allows you to add a CRON trigger to a Serverless Container.
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/containers"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := containers.NewNamespace(ctx, "main", nil)
//			if err != nil {
//				return err
//			}
//			mainContainer, err := containers.NewContainer(ctx, "main", &containers.ContainerArgs{
//				Name:        pulumi.String("my-container-with-cron-tf"),
//				NamespaceId: main.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"address": map[string]interface{}{
//					"city":    "Paris",
//					"country": "FR",
//				},
//				"age":       23,
//				"firstName": "John",
//				"isAlive":   true,
//				"lastName":  "Smith",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = containers.NewCron(ctx, "main", &containers.CronArgs{
//				ContainerId: mainContainer.ID(),
//				Name:        pulumi.String("my-cron-name"),
//				Schedule:    pulumi.String("5 4 1 * *"),
//				Args:        pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Container Cron can be imported using `{region}/{id}`, as shown below:
//
// bash
//
// ```sh
// $ pulumi import scaleway:containers/cron:Cron main fr-par/11111111-1111-1111-1111-111111111111
// ```
type Cron struct {
	pulumi.CustomResourceState

	// The key-value mapping to define arguments that will be passed to your container’s event object
	Args pulumi.StringOutput `pulumi:"args"`
	// The unique identifier of the container to link to your CRON trigger.
	ContainerId pulumi.StringOutput `pulumi:"containerId"`
	// The name of the container CRON trigger. If not provided, a random name is generated.
	Name pulumi.StringOutput `pulumi:"name"`
	// (Defaults to provider `region`) The region
	// in which the CRON trigger is created.
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// CRON format string (refer to the [CRON schedule reference](https://www.scaleway.com/en/docs/serverless/containers/reference-content/cron-schedules/) for more information).
	Schedule pulumi.StringOutput `pulumi:"schedule"`
	// The CRON status.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewCron registers a new resource with the given unique name, arguments, and options.
func NewCron(ctx *pulumi.Context,
	name string, args *CronArgs, opts ...pulumi.ResourceOption) (*Cron, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Args == nil {
		return nil, errors.New("invalid value for required argument 'Args'")
	}
	if args.ContainerId == nil {
		return nil, errors.New("invalid value for required argument 'ContainerId'")
	}
	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/containerCron:ContainerCron"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cron
	err := ctx.RegisterResource("scaleway:containers/cron:Cron", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCron gets an existing Cron resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCron(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CronState, opts ...pulumi.ResourceOption) (*Cron, error) {
	var resource Cron
	err := ctx.ReadResource("scaleway:containers/cron:Cron", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cron resources.
type cronState struct {
	// The key-value mapping to define arguments that will be passed to your container’s event object
	Args *string `pulumi:"args"`
	// The unique identifier of the container to link to your CRON trigger.
	ContainerId *string `pulumi:"containerId"`
	// The name of the container CRON trigger. If not provided, a random name is generated.
	Name *string `pulumi:"name"`
	// (Defaults to provider `region`) The region
	// in which the CRON trigger is created.
	Region *string `pulumi:"region"`
	// CRON format string (refer to the [CRON schedule reference](https://www.scaleway.com/en/docs/serverless/containers/reference-content/cron-schedules/) for more information).
	Schedule *string `pulumi:"schedule"`
	// The CRON status.
	Status *string `pulumi:"status"`
}

type CronState struct {
	// The key-value mapping to define arguments that will be passed to your container’s event object
	Args pulumi.StringPtrInput
	// The unique identifier of the container to link to your CRON trigger.
	ContainerId pulumi.StringPtrInput
	// The name of the container CRON trigger. If not provided, a random name is generated.
	Name pulumi.StringPtrInput
	// (Defaults to provider `region`) The region
	// in which the CRON trigger is created.
	Region pulumi.StringPtrInput
	// CRON format string (refer to the [CRON schedule reference](https://www.scaleway.com/en/docs/serverless/containers/reference-content/cron-schedules/) for more information).
	Schedule pulumi.StringPtrInput
	// The CRON status.
	Status pulumi.StringPtrInput
}

func (CronState) ElementType() reflect.Type {
	return reflect.TypeOf((*cronState)(nil)).Elem()
}

type cronArgs struct {
	// The key-value mapping to define arguments that will be passed to your container’s event object
	Args string `pulumi:"args"`
	// The unique identifier of the container to link to your CRON trigger.
	ContainerId string `pulumi:"containerId"`
	// The name of the container CRON trigger. If not provided, a random name is generated.
	Name *string `pulumi:"name"`
	// (Defaults to provider `region`) The region
	// in which the CRON trigger is created.
	Region *string `pulumi:"region"`
	// CRON format string (refer to the [CRON schedule reference](https://www.scaleway.com/en/docs/serverless/containers/reference-content/cron-schedules/) for more information).
	Schedule string `pulumi:"schedule"`
}

// The set of arguments for constructing a Cron resource.
type CronArgs struct {
	// The key-value mapping to define arguments that will be passed to your container’s event object
	Args pulumi.StringInput
	// The unique identifier of the container to link to your CRON trigger.
	ContainerId pulumi.StringInput
	// The name of the container CRON trigger. If not provided, a random name is generated.
	Name pulumi.StringPtrInput
	// (Defaults to provider `region`) The region
	// in which the CRON trigger is created.
	Region pulumi.StringPtrInput
	// CRON format string (refer to the [CRON schedule reference](https://www.scaleway.com/en/docs/serverless/containers/reference-content/cron-schedules/) for more information).
	Schedule pulumi.StringInput
}

func (CronArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cronArgs)(nil)).Elem()
}

type CronInput interface {
	pulumi.Input

	ToCronOutput() CronOutput
	ToCronOutputWithContext(ctx context.Context) CronOutput
}

func (*Cron) ElementType() reflect.Type {
	return reflect.TypeOf((**Cron)(nil)).Elem()
}

func (i *Cron) ToCronOutput() CronOutput {
	return i.ToCronOutputWithContext(context.Background())
}

func (i *Cron) ToCronOutputWithContext(ctx context.Context) CronOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronOutput)
}

// CronArrayInput is an input type that accepts CronArray and CronArrayOutput values.
// You can construct a concrete instance of `CronArrayInput` via:
//
//	CronArray{ CronArgs{...} }
type CronArrayInput interface {
	pulumi.Input

	ToCronArrayOutput() CronArrayOutput
	ToCronArrayOutputWithContext(context.Context) CronArrayOutput
}

type CronArray []CronInput

func (CronArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cron)(nil)).Elem()
}

func (i CronArray) ToCronArrayOutput() CronArrayOutput {
	return i.ToCronArrayOutputWithContext(context.Background())
}

func (i CronArray) ToCronArrayOutputWithContext(ctx context.Context) CronArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronArrayOutput)
}

// CronMapInput is an input type that accepts CronMap and CronMapOutput values.
// You can construct a concrete instance of `CronMapInput` via:
//
//	CronMap{ "key": CronArgs{...} }
type CronMapInput interface {
	pulumi.Input

	ToCronMapOutput() CronMapOutput
	ToCronMapOutputWithContext(context.Context) CronMapOutput
}

type CronMap map[string]CronInput

func (CronMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cron)(nil)).Elem()
}

func (i CronMap) ToCronMapOutput() CronMapOutput {
	return i.ToCronMapOutputWithContext(context.Background())
}

func (i CronMap) ToCronMapOutputWithContext(ctx context.Context) CronMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronMapOutput)
}

type CronOutput struct{ *pulumi.OutputState }

func (CronOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cron)(nil)).Elem()
}

func (o CronOutput) ToCronOutput() CronOutput {
	return o
}

func (o CronOutput) ToCronOutputWithContext(ctx context.Context) CronOutput {
	return o
}

// The key-value mapping to define arguments that will be passed to your container’s event object
func (o CronOutput) Args() pulumi.StringOutput {
	return o.ApplyT(func(v *Cron) pulumi.StringOutput { return v.Args }).(pulumi.StringOutput)
}

// The unique identifier of the container to link to your CRON trigger.
func (o CronOutput) ContainerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cron) pulumi.StringOutput { return v.ContainerId }).(pulumi.StringOutput)
}

// The name of the container CRON trigger. If not provided, a random name is generated.
func (o CronOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cron) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// (Defaults to provider `region`) The region
// in which the CRON trigger is created.
func (o CronOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cron) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// CRON format string (refer to the [CRON schedule reference](https://www.scaleway.com/en/docs/serverless/containers/reference-content/cron-schedules/) for more information).
func (o CronOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v *Cron) pulumi.StringOutput { return v.Schedule }).(pulumi.StringOutput)
}

// The CRON status.
func (o CronOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Cron) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type CronArrayOutput struct{ *pulumi.OutputState }

func (CronArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cron)(nil)).Elem()
}

func (o CronArrayOutput) ToCronArrayOutput() CronArrayOutput {
	return o
}

func (o CronArrayOutput) ToCronArrayOutputWithContext(ctx context.Context) CronArrayOutput {
	return o
}

func (o CronArrayOutput) Index(i pulumi.IntInput) CronOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cron {
		return vs[0].([]*Cron)[vs[1].(int)]
	}).(CronOutput)
}

type CronMapOutput struct{ *pulumi.OutputState }

func (CronMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cron)(nil)).Elem()
}

func (o CronMapOutput) ToCronMapOutput() CronMapOutput {
	return o
}

func (o CronMapOutput) ToCronMapOutputWithContext(ctx context.Context) CronMapOutput {
	return o
}

func (o CronMapOutput) MapIndex(k pulumi.StringInput) CronOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cron {
		return vs[0].(map[string]*Cron)[vs[1].(string)]
	}).(CronOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CronInput)(nil)).Elem(), &Cron{})
	pulumi.RegisterInputType(reflect.TypeOf((*CronArrayInput)(nil)).Elem(), CronArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CronMapInput)(nil)).Elem(), CronMap{})
	pulumi.RegisterOutputType(CronOutput{})
	pulumi.RegisterOutputType(CronArrayOutput{})
	pulumi.RegisterOutputType(CronMapOutput{})
}
