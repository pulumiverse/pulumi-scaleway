// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containers

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

var _ = internal.GetEnvOrDefault

type ContainerHealthCheck struct {
	// Number of consecutive health check failures before considering the container unhealthy.
	FailureThreshold int `pulumi:"failureThreshold"`
	// HTTP health check configuration.
	Https []ContainerHealthCheckHttp `pulumi:"https"`
	// Period between health checks (in seconds).
	Interval string `pulumi:"interval"`
}

// ContainerHealthCheckInput is an input type that accepts ContainerHealthCheckArgs and ContainerHealthCheckOutput values.
// You can construct a concrete instance of `ContainerHealthCheckInput` via:
//
//	ContainerHealthCheckArgs{...}
type ContainerHealthCheckInput interface {
	pulumi.Input

	ToContainerHealthCheckOutput() ContainerHealthCheckOutput
	ToContainerHealthCheckOutputWithContext(context.Context) ContainerHealthCheckOutput
}

type ContainerHealthCheckArgs struct {
	// Number of consecutive health check failures before considering the container unhealthy.
	FailureThreshold pulumi.IntInput `pulumi:"failureThreshold"`
	// HTTP health check configuration.
	Https ContainerHealthCheckHttpArrayInput `pulumi:"https"`
	// Period between health checks (in seconds).
	Interval pulumi.StringInput `pulumi:"interval"`
}

func (ContainerHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerHealthCheck)(nil)).Elem()
}

func (i ContainerHealthCheckArgs) ToContainerHealthCheckOutput() ContainerHealthCheckOutput {
	return i.ToContainerHealthCheckOutputWithContext(context.Background())
}

func (i ContainerHealthCheckArgs) ToContainerHealthCheckOutputWithContext(ctx context.Context) ContainerHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerHealthCheckOutput)
}

// ContainerHealthCheckArrayInput is an input type that accepts ContainerHealthCheckArray and ContainerHealthCheckArrayOutput values.
// You can construct a concrete instance of `ContainerHealthCheckArrayInput` via:
//
//	ContainerHealthCheckArray{ ContainerHealthCheckArgs{...} }
type ContainerHealthCheckArrayInput interface {
	pulumi.Input

	ToContainerHealthCheckArrayOutput() ContainerHealthCheckArrayOutput
	ToContainerHealthCheckArrayOutputWithContext(context.Context) ContainerHealthCheckArrayOutput
}

type ContainerHealthCheckArray []ContainerHealthCheckInput

func (ContainerHealthCheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerHealthCheck)(nil)).Elem()
}

func (i ContainerHealthCheckArray) ToContainerHealthCheckArrayOutput() ContainerHealthCheckArrayOutput {
	return i.ToContainerHealthCheckArrayOutputWithContext(context.Background())
}

func (i ContainerHealthCheckArray) ToContainerHealthCheckArrayOutputWithContext(ctx context.Context) ContainerHealthCheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerHealthCheckArrayOutput)
}

type ContainerHealthCheckOutput struct{ *pulumi.OutputState }

func (ContainerHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerHealthCheck)(nil)).Elem()
}

func (o ContainerHealthCheckOutput) ToContainerHealthCheckOutput() ContainerHealthCheckOutput {
	return o
}

func (o ContainerHealthCheckOutput) ToContainerHealthCheckOutputWithContext(ctx context.Context) ContainerHealthCheckOutput {
	return o
}

// Number of consecutive health check failures before considering the container unhealthy.
func (o ContainerHealthCheckOutput) FailureThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerHealthCheck) int { return v.FailureThreshold }).(pulumi.IntOutput)
}

// HTTP health check configuration.
func (o ContainerHealthCheckOutput) Https() ContainerHealthCheckHttpArrayOutput {
	return o.ApplyT(func(v ContainerHealthCheck) []ContainerHealthCheckHttp { return v.Https }).(ContainerHealthCheckHttpArrayOutput)
}

// Period between health checks (in seconds).
func (o ContainerHealthCheckOutput) Interval() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerHealthCheck) string { return v.Interval }).(pulumi.StringOutput)
}

type ContainerHealthCheckArrayOutput struct{ *pulumi.OutputState }

func (ContainerHealthCheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerHealthCheck)(nil)).Elem()
}

func (o ContainerHealthCheckArrayOutput) ToContainerHealthCheckArrayOutput() ContainerHealthCheckArrayOutput {
	return o
}

func (o ContainerHealthCheckArrayOutput) ToContainerHealthCheckArrayOutputWithContext(ctx context.Context) ContainerHealthCheckArrayOutput {
	return o
}

func (o ContainerHealthCheckArrayOutput) Index(i pulumi.IntInput) ContainerHealthCheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerHealthCheck {
		return vs[0].([]ContainerHealthCheck)[vs[1].(int)]
	}).(ContainerHealthCheckOutput)
}

type ContainerHealthCheckHttp struct {
	// Path to use for the HTTP health check.
	Path string `pulumi:"path"`
}

// ContainerHealthCheckHttpInput is an input type that accepts ContainerHealthCheckHttpArgs and ContainerHealthCheckHttpOutput values.
// You can construct a concrete instance of `ContainerHealthCheckHttpInput` via:
//
//	ContainerHealthCheckHttpArgs{...}
type ContainerHealthCheckHttpInput interface {
	pulumi.Input

	ToContainerHealthCheckHttpOutput() ContainerHealthCheckHttpOutput
	ToContainerHealthCheckHttpOutputWithContext(context.Context) ContainerHealthCheckHttpOutput
}

type ContainerHealthCheckHttpArgs struct {
	// Path to use for the HTTP health check.
	Path pulumi.StringInput `pulumi:"path"`
}

func (ContainerHealthCheckHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerHealthCheckHttp)(nil)).Elem()
}

func (i ContainerHealthCheckHttpArgs) ToContainerHealthCheckHttpOutput() ContainerHealthCheckHttpOutput {
	return i.ToContainerHealthCheckHttpOutputWithContext(context.Background())
}

func (i ContainerHealthCheckHttpArgs) ToContainerHealthCheckHttpOutputWithContext(ctx context.Context) ContainerHealthCheckHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerHealthCheckHttpOutput)
}

// ContainerHealthCheckHttpArrayInput is an input type that accepts ContainerHealthCheckHttpArray and ContainerHealthCheckHttpArrayOutput values.
// You can construct a concrete instance of `ContainerHealthCheckHttpArrayInput` via:
//
//	ContainerHealthCheckHttpArray{ ContainerHealthCheckHttpArgs{...} }
type ContainerHealthCheckHttpArrayInput interface {
	pulumi.Input

	ToContainerHealthCheckHttpArrayOutput() ContainerHealthCheckHttpArrayOutput
	ToContainerHealthCheckHttpArrayOutputWithContext(context.Context) ContainerHealthCheckHttpArrayOutput
}

type ContainerHealthCheckHttpArray []ContainerHealthCheckHttpInput

func (ContainerHealthCheckHttpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerHealthCheckHttp)(nil)).Elem()
}

func (i ContainerHealthCheckHttpArray) ToContainerHealthCheckHttpArrayOutput() ContainerHealthCheckHttpArrayOutput {
	return i.ToContainerHealthCheckHttpArrayOutputWithContext(context.Background())
}

func (i ContainerHealthCheckHttpArray) ToContainerHealthCheckHttpArrayOutputWithContext(ctx context.Context) ContainerHealthCheckHttpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerHealthCheckHttpArrayOutput)
}

type ContainerHealthCheckHttpOutput struct{ *pulumi.OutputState }

func (ContainerHealthCheckHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerHealthCheckHttp)(nil)).Elem()
}

func (o ContainerHealthCheckHttpOutput) ToContainerHealthCheckHttpOutput() ContainerHealthCheckHttpOutput {
	return o
}

func (o ContainerHealthCheckHttpOutput) ToContainerHealthCheckHttpOutputWithContext(ctx context.Context) ContainerHealthCheckHttpOutput {
	return o
}

// Path to use for the HTTP health check.
func (o ContainerHealthCheckHttpOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerHealthCheckHttp) string { return v.Path }).(pulumi.StringOutput)
}

type ContainerHealthCheckHttpArrayOutput struct{ *pulumi.OutputState }

func (ContainerHealthCheckHttpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerHealthCheckHttp)(nil)).Elem()
}

func (o ContainerHealthCheckHttpArrayOutput) ToContainerHealthCheckHttpArrayOutput() ContainerHealthCheckHttpArrayOutput {
	return o
}

func (o ContainerHealthCheckHttpArrayOutput) ToContainerHealthCheckHttpArrayOutputWithContext(ctx context.Context) ContainerHealthCheckHttpArrayOutput {
	return o
}

func (o ContainerHealthCheckHttpArrayOutput) Index(i pulumi.IntInput) ContainerHealthCheckHttpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerHealthCheckHttp {
		return vs[0].([]ContainerHealthCheckHttp)[vs[1].(int)]
	}).(ContainerHealthCheckHttpOutput)
}

type ContainerScalingOption struct {
	// Scale depending on the number of concurrent requests being processed per container instance.
	ConcurrentRequestsThreshold *int `pulumi:"concurrentRequestsThreshold"`
	// Scale depending on the CPU usage of a container instance.
	CpuUsageThreshold *int `pulumi:"cpuUsageThreshold"`
	// Scale depending on the memory usage of a container instance.
	MemoryUsageThreshold *int `pulumi:"memoryUsageThreshold"`
}

// ContainerScalingOptionInput is an input type that accepts ContainerScalingOptionArgs and ContainerScalingOptionOutput values.
// You can construct a concrete instance of `ContainerScalingOptionInput` via:
//
//	ContainerScalingOptionArgs{...}
type ContainerScalingOptionInput interface {
	pulumi.Input

	ToContainerScalingOptionOutput() ContainerScalingOptionOutput
	ToContainerScalingOptionOutputWithContext(context.Context) ContainerScalingOptionOutput
}

type ContainerScalingOptionArgs struct {
	// Scale depending on the number of concurrent requests being processed per container instance.
	ConcurrentRequestsThreshold pulumi.IntPtrInput `pulumi:"concurrentRequestsThreshold"`
	// Scale depending on the CPU usage of a container instance.
	CpuUsageThreshold pulumi.IntPtrInput `pulumi:"cpuUsageThreshold"`
	// Scale depending on the memory usage of a container instance.
	MemoryUsageThreshold pulumi.IntPtrInput `pulumi:"memoryUsageThreshold"`
}

func (ContainerScalingOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerScalingOption)(nil)).Elem()
}

func (i ContainerScalingOptionArgs) ToContainerScalingOptionOutput() ContainerScalingOptionOutput {
	return i.ToContainerScalingOptionOutputWithContext(context.Background())
}

func (i ContainerScalingOptionArgs) ToContainerScalingOptionOutputWithContext(ctx context.Context) ContainerScalingOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerScalingOptionOutput)
}

// ContainerScalingOptionArrayInput is an input type that accepts ContainerScalingOptionArray and ContainerScalingOptionArrayOutput values.
// You can construct a concrete instance of `ContainerScalingOptionArrayInput` via:
//
//	ContainerScalingOptionArray{ ContainerScalingOptionArgs{...} }
type ContainerScalingOptionArrayInput interface {
	pulumi.Input

	ToContainerScalingOptionArrayOutput() ContainerScalingOptionArrayOutput
	ToContainerScalingOptionArrayOutputWithContext(context.Context) ContainerScalingOptionArrayOutput
}

type ContainerScalingOptionArray []ContainerScalingOptionInput

func (ContainerScalingOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerScalingOption)(nil)).Elem()
}

func (i ContainerScalingOptionArray) ToContainerScalingOptionArrayOutput() ContainerScalingOptionArrayOutput {
	return i.ToContainerScalingOptionArrayOutputWithContext(context.Background())
}

func (i ContainerScalingOptionArray) ToContainerScalingOptionArrayOutputWithContext(ctx context.Context) ContainerScalingOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerScalingOptionArrayOutput)
}

type ContainerScalingOptionOutput struct{ *pulumi.OutputState }

func (ContainerScalingOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerScalingOption)(nil)).Elem()
}

func (o ContainerScalingOptionOutput) ToContainerScalingOptionOutput() ContainerScalingOptionOutput {
	return o
}

func (o ContainerScalingOptionOutput) ToContainerScalingOptionOutputWithContext(ctx context.Context) ContainerScalingOptionOutput {
	return o
}

// Scale depending on the number of concurrent requests being processed per container instance.
func (o ContainerScalingOptionOutput) ConcurrentRequestsThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerScalingOption) *int { return v.ConcurrentRequestsThreshold }).(pulumi.IntPtrOutput)
}

// Scale depending on the CPU usage of a container instance.
func (o ContainerScalingOptionOutput) CpuUsageThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerScalingOption) *int { return v.CpuUsageThreshold }).(pulumi.IntPtrOutput)
}

// Scale depending on the memory usage of a container instance.
func (o ContainerScalingOptionOutput) MemoryUsageThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerScalingOption) *int { return v.MemoryUsageThreshold }).(pulumi.IntPtrOutput)
}

type ContainerScalingOptionArrayOutput struct{ *pulumi.OutputState }

func (ContainerScalingOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerScalingOption)(nil)).Elem()
}

func (o ContainerScalingOptionArrayOutput) ToContainerScalingOptionArrayOutput() ContainerScalingOptionArrayOutput {
	return o
}

func (o ContainerScalingOptionArrayOutput) ToContainerScalingOptionArrayOutputWithContext(ctx context.Context) ContainerScalingOptionArrayOutput {
	return o
}

func (o ContainerScalingOptionArrayOutput) Index(i pulumi.IntInput) ContainerScalingOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerScalingOption {
		return vs[0].([]ContainerScalingOption)[vs[1].(int)]
	}).(ContainerScalingOptionOutput)
}

type TriggerNats struct {
	// unique identifier of the Messaging and Queuing NATS account.
	AccountId *string `pulumi:"accountId"`
	// THe ID of the project that contains the Messaging and Queuing NATS account (defaults to provider `projectId`)
	ProjectId *string `pulumi:"projectId"`
	// Region where the Messaging and Queuing NATS account is enabled (defaults to provider `region`)
	Region *string `pulumi:"region"`
	// The subject to listen to.
	Subject string `pulumi:"subject"`
}

// TriggerNatsInput is an input type that accepts TriggerNatsArgs and TriggerNatsOutput values.
// You can construct a concrete instance of `TriggerNatsInput` via:
//
//	TriggerNatsArgs{...}
type TriggerNatsInput interface {
	pulumi.Input

	ToTriggerNatsOutput() TriggerNatsOutput
	ToTriggerNatsOutputWithContext(context.Context) TriggerNatsOutput
}

type TriggerNatsArgs struct {
	// unique identifier of the Messaging and Queuing NATS account.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// THe ID of the project that contains the Messaging and Queuing NATS account (defaults to provider `projectId`)
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Region where the Messaging and Queuing NATS account is enabled (defaults to provider `region`)
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The subject to listen to.
	Subject pulumi.StringInput `pulumi:"subject"`
}

func (TriggerNatsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerNats)(nil)).Elem()
}

func (i TriggerNatsArgs) ToTriggerNatsOutput() TriggerNatsOutput {
	return i.ToTriggerNatsOutputWithContext(context.Background())
}

func (i TriggerNatsArgs) ToTriggerNatsOutputWithContext(ctx context.Context) TriggerNatsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerNatsOutput)
}

func (i TriggerNatsArgs) ToTriggerNatsPtrOutput() TriggerNatsPtrOutput {
	return i.ToTriggerNatsPtrOutputWithContext(context.Background())
}

func (i TriggerNatsArgs) ToTriggerNatsPtrOutputWithContext(ctx context.Context) TriggerNatsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerNatsOutput).ToTriggerNatsPtrOutputWithContext(ctx)
}

// TriggerNatsPtrInput is an input type that accepts TriggerNatsArgs, TriggerNatsPtr and TriggerNatsPtrOutput values.
// You can construct a concrete instance of `TriggerNatsPtrInput` via:
//
//	        TriggerNatsArgs{...}
//
//	or:
//
//	        nil
type TriggerNatsPtrInput interface {
	pulumi.Input

	ToTriggerNatsPtrOutput() TriggerNatsPtrOutput
	ToTriggerNatsPtrOutputWithContext(context.Context) TriggerNatsPtrOutput
}

type triggerNatsPtrType TriggerNatsArgs

func TriggerNatsPtr(v *TriggerNatsArgs) TriggerNatsPtrInput {
	return (*triggerNatsPtrType)(v)
}

func (*triggerNatsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerNats)(nil)).Elem()
}

func (i *triggerNatsPtrType) ToTriggerNatsPtrOutput() TriggerNatsPtrOutput {
	return i.ToTriggerNatsPtrOutputWithContext(context.Background())
}

func (i *triggerNatsPtrType) ToTriggerNatsPtrOutputWithContext(ctx context.Context) TriggerNatsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerNatsPtrOutput)
}

type TriggerNatsOutput struct{ *pulumi.OutputState }

func (TriggerNatsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerNats)(nil)).Elem()
}

func (o TriggerNatsOutput) ToTriggerNatsOutput() TriggerNatsOutput {
	return o
}

func (o TriggerNatsOutput) ToTriggerNatsOutputWithContext(ctx context.Context) TriggerNatsOutput {
	return o
}

func (o TriggerNatsOutput) ToTriggerNatsPtrOutput() TriggerNatsPtrOutput {
	return o.ToTriggerNatsPtrOutputWithContext(context.Background())
}

func (o TriggerNatsOutput) ToTriggerNatsPtrOutputWithContext(ctx context.Context) TriggerNatsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TriggerNats) *TriggerNats {
		return &v
	}).(TriggerNatsPtrOutput)
}

// unique identifier of the Messaging and Queuing NATS account.
func (o TriggerNatsOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerNats) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// THe ID of the project that contains the Messaging and Queuing NATS account (defaults to provider `projectId`)
func (o TriggerNatsOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerNats) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Region where the Messaging and Queuing NATS account is enabled (defaults to provider `region`)
func (o TriggerNatsOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerNats) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The subject to listen to.
func (o TriggerNatsOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerNats) string { return v.Subject }).(pulumi.StringOutput)
}

type TriggerNatsPtrOutput struct{ *pulumi.OutputState }

func (TriggerNatsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerNats)(nil)).Elem()
}

func (o TriggerNatsPtrOutput) ToTriggerNatsPtrOutput() TriggerNatsPtrOutput {
	return o
}

func (o TriggerNatsPtrOutput) ToTriggerNatsPtrOutputWithContext(ctx context.Context) TriggerNatsPtrOutput {
	return o
}

func (o TriggerNatsPtrOutput) Elem() TriggerNatsOutput {
	return o.ApplyT(func(v *TriggerNats) TriggerNats {
		if v != nil {
			return *v
		}
		var ret TriggerNats
		return ret
	}).(TriggerNatsOutput)
}

// unique identifier of the Messaging and Queuing NATS account.
func (o TriggerNatsPtrOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerNats) *string {
		if v == nil {
			return nil
		}
		return v.AccountId
	}).(pulumi.StringPtrOutput)
}

// THe ID of the project that contains the Messaging and Queuing NATS account (defaults to provider `projectId`)
func (o TriggerNatsPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerNats) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// Region where the Messaging and Queuing NATS account is enabled (defaults to provider `region`)
func (o TriggerNatsPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerNats) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// The subject to listen to.
func (o TriggerNatsPtrOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerNats) *string {
		if v == nil {
			return nil
		}
		return &v.Subject
	}).(pulumi.StringPtrOutput)
}

type TriggerSqs struct {
	// ID of the Messaging and Queuing namespace. This argument is deprecated.
	//
	// Deprecated: The 'namespace_id' field is deprecated and will be removed in the next major version. It is no longer necessary to specify it
	NamespaceId *string `pulumi:"namespaceId"`
	// The ID of the project in which SQS is enabled, (defaults to provider `projectId`)
	ProjectId *string `pulumi:"projectId"`
	// The name of the SQS queue.
	Queue string `pulumi:"queue"`
	// Region where SQS is enabled (defaults to provider `region`)
	Region *string `pulumi:"region"`
}

// TriggerSqsInput is an input type that accepts TriggerSqsArgs and TriggerSqsOutput values.
// You can construct a concrete instance of `TriggerSqsInput` via:
//
//	TriggerSqsArgs{...}
type TriggerSqsInput interface {
	pulumi.Input

	ToTriggerSqsOutput() TriggerSqsOutput
	ToTriggerSqsOutputWithContext(context.Context) TriggerSqsOutput
}

type TriggerSqsArgs struct {
	// ID of the Messaging and Queuing namespace. This argument is deprecated.
	//
	// Deprecated: The 'namespace_id' field is deprecated and will be removed in the next major version. It is no longer necessary to specify it
	NamespaceId pulumi.StringPtrInput `pulumi:"namespaceId"`
	// The ID of the project in which SQS is enabled, (defaults to provider `projectId`)
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// The name of the SQS queue.
	Queue pulumi.StringInput `pulumi:"queue"`
	// Region where SQS is enabled (defaults to provider `region`)
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (TriggerSqsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerSqs)(nil)).Elem()
}

func (i TriggerSqsArgs) ToTriggerSqsOutput() TriggerSqsOutput {
	return i.ToTriggerSqsOutputWithContext(context.Background())
}

func (i TriggerSqsArgs) ToTriggerSqsOutputWithContext(ctx context.Context) TriggerSqsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerSqsOutput)
}

func (i TriggerSqsArgs) ToTriggerSqsPtrOutput() TriggerSqsPtrOutput {
	return i.ToTriggerSqsPtrOutputWithContext(context.Background())
}

func (i TriggerSqsArgs) ToTriggerSqsPtrOutputWithContext(ctx context.Context) TriggerSqsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerSqsOutput).ToTriggerSqsPtrOutputWithContext(ctx)
}

// TriggerSqsPtrInput is an input type that accepts TriggerSqsArgs, TriggerSqsPtr and TriggerSqsPtrOutput values.
// You can construct a concrete instance of `TriggerSqsPtrInput` via:
//
//	        TriggerSqsArgs{...}
//
//	or:
//
//	        nil
type TriggerSqsPtrInput interface {
	pulumi.Input

	ToTriggerSqsPtrOutput() TriggerSqsPtrOutput
	ToTriggerSqsPtrOutputWithContext(context.Context) TriggerSqsPtrOutput
}

type triggerSqsPtrType TriggerSqsArgs

func TriggerSqsPtr(v *TriggerSqsArgs) TriggerSqsPtrInput {
	return (*triggerSqsPtrType)(v)
}

func (*triggerSqsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerSqs)(nil)).Elem()
}

func (i *triggerSqsPtrType) ToTriggerSqsPtrOutput() TriggerSqsPtrOutput {
	return i.ToTriggerSqsPtrOutputWithContext(context.Background())
}

func (i *triggerSqsPtrType) ToTriggerSqsPtrOutputWithContext(ctx context.Context) TriggerSqsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerSqsPtrOutput)
}

type TriggerSqsOutput struct{ *pulumi.OutputState }

func (TriggerSqsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerSqs)(nil)).Elem()
}

func (o TriggerSqsOutput) ToTriggerSqsOutput() TriggerSqsOutput {
	return o
}

func (o TriggerSqsOutput) ToTriggerSqsOutputWithContext(ctx context.Context) TriggerSqsOutput {
	return o
}

func (o TriggerSqsOutput) ToTriggerSqsPtrOutput() TriggerSqsPtrOutput {
	return o.ToTriggerSqsPtrOutputWithContext(context.Background())
}

func (o TriggerSqsOutput) ToTriggerSqsPtrOutputWithContext(ctx context.Context) TriggerSqsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TriggerSqs) *TriggerSqs {
		return &v
	}).(TriggerSqsPtrOutput)
}

// ID of the Messaging and Queuing namespace. This argument is deprecated.
//
// Deprecated: The 'namespace_id' field is deprecated and will be removed in the next major version. It is no longer necessary to specify it
func (o TriggerSqsOutput) NamespaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerSqs) *string { return v.NamespaceId }).(pulumi.StringPtrOutput)
}

// The ID of the project in which SQS is enabled, (defaults to provider `projectId`)
func (o TriggerSqsOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerSqs) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The name of the SQS queue.
func (o TriggerSqsOutput) Queue() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerSqs) string { return v.Queue }).(pulumi.StringOutput)
}

// Region where SQS is enabled (defaults to provider `region`)
func (o TriggerSqsOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerSqs) *string { return v.Region }).(pulumi.StringPtrOutput)
}

type TriggerSqsPtrOutput struct{ *pulumi.OutputState }

func (TriggerSqsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerSqs)(nil)).Elem()
}

func (o TriggerSqsPtrOutput) ToTriggerSqsPtrOutput() TriggerSqsPtrOutput {
	return o
}

func (o TriggerSqsPtrOutput) ToTriggerSqsPtrOutputWithContext(ctx context.Context) TriggerSqsPtrOutput {
	return o
}

func (o TriggerSqsPtrOutput) Elem() TriggerSqsOutput {
	return o.ApplyT(func(v *TriggerSqs) TriggerSqs {
		if v != nil {
			return *v
		}
		var ret TriggerSqs
		return ret
	}).(TriggerSqsOutput)
}

// ID of the Messaging and Queuing namespace. This argument is deprecated.
//
// Deprecated: The 'namespace_id' field is deprecated and will be removed in the next major version. It is no longer necessary to specify it
func (o TriggerSqsPtrOutput) NamespaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerSqs) *string {
		if v == nil {
			return nil
		}
		return v.NamespaceId
	}).(pulumi.StringPtrOutput)
}

// The ID of the project in which SQS is enabled, (defaults to provider `projectId`)
func (o TriggerSqsPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerSqs) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// The name of the SQS queue.
func (o TriggerSqsPtrOutput) Queue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerSqs) *string {
		if v == nil {
			return nil
		}
		return &v.Queue
	}).(pulumi.StringPtrOutput)
}

// Region where SQS is enabled (defaults to provider `region`)
func (o TriggerSqsPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerSqs) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

type GetContainerHealthCheck struct {
	// Number of consecutive health check failures before considering the container unhealthy.
	FailureThreshold int `pulumi:"failureThreshold"`
	// HTTP health check configuration.
	Https []GetContainerHealthCheckHttp `pulumi:"https"`
	// Period between health checks (in seconds).
	Interval string `pulumi:"interval"`
}

// GetContainerHealthCheckInput is an input type that accepts GetContainerHealthCheckArgs and GetContainerHealthCheckOutput values.
// You can construct a concrete instance of `GetContainerHealthCheckInput` via:
//
//	GetContainerHealthCheckArgs{...}
type GetContainerHealthCheckInput interface {
	pulumi.Input

	ToGetContainerHealthCheckOutput() GetContainerHealthCheckOutput
	ToGetContainerHealthCheckOutputWithContext(context.Context) GetContainerHealthCheckOutput
}

type GetContainerHealthCheckArgs struct {
	// Number of consecutive health check failures before considering the container unhealthy.
	FailureThreshold pulumi.IntInput `pulumi:"failureThreshold"`
	// HTTP health check configuration.
	Https GetContainerHealthCheckHttpArrayInput `pulumi:"https"`
	// Period between health checks (in seconds).
	Interval pulumi.StringInput `pulumi:"interval"`
}

func (GetContainerHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerHealthCheck)(nil)).Elem()
}

func (i GetContainerHealthCheckArgs) ToGetContainerHealthCheckOutput() GetContainerHealthCheckOutput {
	return i.ToGetContainerHealthCheckOutputWithContext(context.Background())
}

func (i GetContainerHealthCheckArgs) ToGetContainerHealthCheckOutputWithContext(ctx context.Context) GetContainerHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerHealthCheckOutput)
}

// GetContainerHealthCheckArrayInput is an input type that accepts GetContainerHealthCheckArray and GetContainerHealthCheckArrayOutput values.
// You can construct a concrete instance of `GetContainerHealthCheckArrayInput` via:
//
//	GetContainerHealthCheckArray{ GetContainerHealthCheckArgs{...} }
type GetContainerHealthCheckArrayInput interface {
	pulumi.Input

	ToGetContainerHealthCheckArrayOutput() GetContainerHealthCheckArrayOutput
	ToGetContainerHealthCheckArrayOutputWithContext(context.Context) GetContainerHealthCheckArrayOutput
}

type GetContainerHealthCheckArray []GetContainerHealthCheckInput

func (GetContainerHealthCheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerHealthCheck)(nil)).Elem()
}

func (i GetContainerHealthCheckArray) ToGetContainerHealthCheckArrayOutput() GetContainerHealthCheckArrayOutput {
	return i.ToGetContainerHealthCheckArrayOutputWithContext(context.Background())
}

func (i GetContainerHealthCheckArray) ToGetContainerHealthCheckArrayOutputWithContext(ctx context.Context) GetContainerHealthCheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerHealthCheckArrayOutput)
}

type GetContainerHealthCheckOutput struct{ *pulumi.OutputState }

func (GetContainerHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerHealthCheck)(nil)).Elem()
}

func (o GetContainerHealthCheckOutput) ToGetContainerHealthCheckOutput() GetContainerHealthCheckOutput {
	return o
}

func (o GetContainerHealthCheckOutput) ToGetContainerHealthCheckOutputWithContext(ctx context.Context) GetContainerHealthCheckOutput {
	return o
}

// Number of consecutive health check failures before considering the container unhealthy.
func (o GetContainerHealthCheckOutput) FailureThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetContainerHealthCheck) int { return v.FailureThreshold }).(pulumi.IntOutput)
}

// HTTP health check configuration.
func (o GetContainerHealthCheckOutput) Https() GetContainerHealthCheckHttpArrayOutput {
	return o.ApplyT(func(v GetContainerHealthCheck) []GetContainerHealthCheckHttp { return v.Https }).(GetContainerHealthCheckHttpArrayOutput)
}

// Period between health checks (in seconds).
func (o GetContainerHealthCheckOutput) Interval() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerHealthCheck) string { return v.Interval }).(pulumi.StringOutput)
}

type GetContainerHealthCheckArrayOutput struct{ *pulumi.OutputState }

func (GetContainerHealthCheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerHealthCheck)(nil)).Elem()
}

func (o GetContainerHealthCheckArrayOutput) ToGetContainerHealthCheckArrayOutput() GetContainerHealthCheckArrayOutput {
	return o
}

func (o GetContainerHealthCheckArrayOutput) ToGetContainerHealthCheckArrayOutputWithContext(ctx context.Context) GetContainerHealthCheckArrayOutput {
	return o
}

func (o GetContainerHealthCheckArrayOutput) Index(i pulumi.IntInput) GetContainerHealthCheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetContainerHealthCheck {
		return vs[0].([]GetContainerHealthCheck)[vs[1].(int)]
	}).(GetContainerHealthCheckOutput)
}

type GetContainerHealthCheckHttp struct {
	// Path to use for the HTTP health check.
	Path string `pulumi:"path"`
}

// GetContainerHealthCheckHttpInput is an input type that accepts GetContainerHealthCheckHttpArgs and GetContainerHealthCheckHttpOutput values.
// You can construct a concrete instance of `GetContainerHealthCheckHttpInput` via:
//
//	GetContainerHealthCheckHttpArgs{...}
type GetContainerHealthCheckHttpInput interface {
	pulumi.Input

	ToGetContainerHealthCheckHttpOutput() GetContainerHealthCheckHttpOutput
	ToGetContainerHealthCheckHttpOutputWithContext(context.Context) GetContainerHealthCheckHttpOutput
}

type GetContainerHealthCheckHttpArgs struct {
	// Path to use for the HTTP health check.
	Path pulumi.StringInput `pulumi:"path"`
}

func (GetContainerHealthCheckHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerHealthCheckHttp)(nil)).Elem()
}

func (i GetContainerHealthCheckHttpArgs) ToGetContainerHealthCheckHttpOutput() GetContainerHealthCheckHttpOutput {
	return i.ToGetContainerHealthCheckHttpOutputWithContext(context.Background())
}

func (i GetContainerHealthCheckHttpArgs) ToGetContainerHealthCheckHttpOutputWithContext(ctx context.Context) GetContainerHealthCheckHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerHealthCheckHttpOutput)
}

// GetContainerHealthCheckHttpArrayInput is an input type that accepts GetContainerHealthCheckHttpArray and GetContainerHealthCheckHttpArrayOutput values.
// You can construct a concrete instance of `GetContainerHealthCheckHttpArrayInput` via:
//
//	GetContainerHealthCheckHttpArray{ GetContainerHealthCheckHttpArgs{...} }
type GetContainerHealthCheckHttpArrayInput interface {
	pulumi.Input

	ToGetContainerHealthCheckHttpArrayOutput() GetContainerHealthCheckHttpArrayOutput
	ToGetContainerHealthCheckHttpArrayOutputWithContext(context.Context) GetContainerHealthCheckHttpArrayOutput
}

type GetContainerHealthCheckHttpArray []GetContainerHealthCheckHttpInput

func (GetContainerHealthCheckHttpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerHealthCheckHttp)(nil)).Elem()
}

func (i GetContainerHealthCheckHttpArray) ToGetContainerHealthCheckHttpArrayOutput() GetContainerHealthCheckHttpArrayOutput {
	return i.ToGetContainerHealthCheckHttpArrayOutputWithContext(context.Background())
}

func (i GetContainerHealthCheckHttpArray) ToGetContainerHealthCheckHttpArrayOutputWithContext(ctx context.Context) GetContainerHealthCheckHttpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerHealthCheckHttpArrayOutput)
}

type GetContainerHealthCheckHttpOutput struct{ *pulumi.OutputState }

func (GetContainerHealthCheckHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerHealthCheckHttp)(nil)).Elem()
}

func (o GetContainerHealthCheckHttpOutput) ToGetContainerHealthCheckHttpOutput() GetContainerHealthCheckHttpOutput {
	return o
}

func (o GetContainerHealthCheckHttpOutput) ToGetContainerHealthCheckHttpOutputWithContext(ctx context.Context) GetContainerHealthCheckHttpOutput {
	return o
}

// Path to use for the HTTP health check.
func (o GetContainerHealthCheckHttpOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerHealthCheckHttp) string { return v.Path }).(pulumi.StringOutput)
}

type GetContainerHealthCheckHttpArrayOutput struct{ *pulumi.OutputState }

func (GetContainerHealthCheckHttpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerHealthCheckHttp)(nil)).Elem()
}

func (o GetContainerHealthCheckHttpArrayOutput) ToGetContainerHealthCheckHttpArrayOutput() GetContainerHealthCheckHttpArrayOutput {
	return o
}

func (o GetContainerHealthCheckHttpArrayOutput) ToGetContainerHealthCheckHttpArrayOutputWithContext(ctx context.Context) GetContainerHealthCheckHttpArrayOutput {
	return o
}

func (o GetContainerHealthCheckHttpArrayOutput) Index(i pulumi.IntInput) GetContainerHealthCheckHttpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetContainerHealthCheckHttp {
		return vs[0].([]GetContainerHealthCheckHttp)[vs[1].(int)]
	}).(GetContainerHealthCheckHttpOutput)
}

type GetContainerScalingOption struct {
	// Scale depending on the number of concurrent requests being processed per container instance.
	ConcurrentRequestsThreshold int `pulumi:"concurrentRequestsThreshold"`
	// Scale depending on the CPU usage of a container instance.
	CpuUsageThreshold int `pulumi:"cpuUsageThreshold"`
	// Scale depending on the memory usage of a container instance.
	MemoryUsageThreshold int `pulumi:"memoryUsageThreshold"`
}

// GetContainerScalingOptionInput is an input type that accepts GetContainerScalingOptionArgs and GetContainerScalingOptionOutput values.
// You can construct a concrete instance of `GetContainerScalingOptionInput` via:
//
//	GetContainerScalingOptionArgs{...}
type GetContainerScalingOptionInput interface {
	pulumi.Input

	ToGetContainerScalingOptionOutput() GetContainerScalingOptionOutput
	ToGetContainerScalingOptionOutputWithContext(context.Context) GetContainerScalingOptionOutput
}

type GetContainerScalingOptionArgs struct {
	// Scale depending on the number of concurrent requests being processed per container instance.
	ConcurrentRequestsThreshold pulumi.IntInput `pulumi:"concurrentRequestsThreshold"`
	// Scale depending on the CPU usage of a container instance.
	CpuUsageThreshold pulumi.IntInput `pulumi:"cpuUsageThreshold"`
	// Scale depending on the memory usage of a container instance.
	MemoryUsageThreshold pulumi.IntInput `pulumi:"memoryUsageThreshold"`
}

func (GetContainerScalingOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerScalingOption)(nil)).Elem()
}

func (i GetContainerScalingOptionArgs) ToGetContainerScalingOptionOutput() GetContainerScalingOptionOutput {
	return i.ToGetContainerScalingOptionOutputWithContext(context.Background())
}

func (i GetContainerScalingOptionArgs) ToGetContainerScalingOptionOutputWithContext(ctx context.Context) GetContainerScalingOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerScalingOptionOutput)
}

// GetContainerScalingOptionArrayInput is an input type that accepts GetContainerScalingOptionArray and GetContainerScalingOptionArrayOutput values.
// You can construct a concrete instance of `GetContainerScalingOptionArrayInput` via:
//
//	GetContainerScalingOptionArray{ GetContainerScalingOptionArgs{...} }
type GetContainerScalingOptionArrayInput interface {
	pulumi.Input

	ToGetContainerScalingOptionArrayOutput() GetContainerScalingOptionArrayOutput
	ToGetContainerScalingOptionArrayOutputWithContext(context.Context) GetContainerScalingOptionArrayOutput
}

type GetContainerScalingOptionArray []GetContainerScalingOptionInput

func (GetContainerScalingOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerScalingOption)(nil)).Elem()
}

func (i GetContainerScalingOptionArray) ToGetContainerScalingOptionArrayOutput() GetContainerScalingOptionArrayOutput {
	return i.ToGetContainerScalingOptionArrayOutputWithContext(context.Background())
}

func (i GetContainerScalingOptionArray) ToGetContainerScalingOptionArrayOutputWithContext(ctx context.Context) GetContainerScalingOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetContainerScalingOptionArrayOutput)
}

type GetContainerScalingOptionOutput struct{ *pulumi.OutputState }

func (GetContainerScalingOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerScalingOption)(nil)).Elem()
}

func (o GetContainerScalingOptionOutput) ToGetContainerScalingOptionOutput() GetContainerScalingOptionOutput {
	return o
}

func (o GetContainerScalingOptionOutput) ToGetContainerScalingOptionOutputWithContext(ctx context.Context) GetContainerScalingOptionOutput {
	return o
}

// Scale depending on the number of concurrent requests being processed per container instance.
func (o GetContainerScalingOptionOutput) ConcurrentRequestsThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetContainerScalingOption) int { return v.ConcurrentRequestsThreshold }).(pulumi.IntOutput)
}

// Scale depending on the CPU usage of a container instance.
func (o GetContainerScalingOptionOutput) CpuUsageThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetContainerScalingOption) int { return v.CpuUsageThreshold }).(pulumi.IntOutput)
}

// Scale depending on the memory usage of a container instance.
func (o GetContainerScalingOptionOutput) MemoryUsageThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetContainerScalingOption) int { return v.MemoryUsageThreshold }).(pulumi.IntOutput)
}

type GetContainerScalingOptionArrayOutput struct{ *pulumi.OutputState }

func (GetContainerScalingOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetContainerScalingOption)(nil)).Elem()
}

func (o GetContainerScalingOptionArrayOutput) ToGetContainerScalingOptionArrayOutput() GetContainerScalingOptionArrayOutput {
	return o
}

func (o GetContainerScalingOptionArrayOutput) ToGetContainerScalingOptionArrayOutputWithContext(ctx context.Context) GetContainerScalingOptionArrayOutput {
	return o
}

func (o GetContainerScalingOptionArrayOutput) Index(i pulumi.IntInput) GetContainerScalingOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetContainerScalingOption {
		return vs[0].([]GetContainerScalingOption)[vs[1].(int)]
	}).(GetContainerScalingOptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerHealthCheckInput)(nil)).Elem(), ContainerHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerHealthCheckArrayInput)(nil)).Elem(), ContainerHealthCheckArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerHealthCheckHttpInput)(nil)).Elem(), ContainerHealthCheckHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerHealthCheckHttpArrayInput)(nil)).Elem(), ContainerHealthCheckHttpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerScalingOptionInput)(nil)).Elem(), ContainerScalingOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerScalingOptionArrayInput)(nil)).Elem(), ContainerScalingOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerNatsInput)(nil)).Elem(), TriggerNatsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerNatsPtrInput)(nil)).Elem(), TriggerNatsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerSqsInput)(nil)).Elem(), TriggerSqsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerSqsPtrInput)(nil)).Elem(), TriggerSqsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerHealthCheckInput)(nil)).Elem(), GetContainerHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerHealthCheckArrayInput)(nil)).Elem(), GetContainerHealthCheckArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerHealthCheckHttpInput)(nil)).Elem(), GetContainerHealthCheckHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerHealthCheckHttpArrayInput)(nil)).Elem(), GetContainerHealthCheckHttpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerScalingOptionInput)(nil)).Elem(), GetContainerScalingOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetContainerScalingOptionArrayInput)(nil)).Elem(), GetContainerScalingOptionArray{})
	pulumi.RegisterOutputType(ContainerHealthCheckOutput{})
	pulumi.RegisterOutputType(ContainerHealthCheckArrayOutput{})
	pulumi.RegisterOutputType(ContainerHealthCheckHttpOutput{})
	pulumi.RegisterOutputType(ContainerHealthCheckHttpArrayOutput{})
	pulumi.RegisterOutputType(ContainerScalingOptionOutput{})
	pulumi.RegisterOutputType(ContainerScalingOptionArrayOutput{})
	pulumi.RegisterOutputType(TriggerNatsOutput{})
	pulumi.RegisterOutputType(TriggerNatsPtrOutput{})
	pulumi.RegisterOutputType(TriggerSqsOutput{})
	pulumi.RegisterOutputType(TriggerSqsPtrOutput{})
	pulumi.RegisterOutputType(GetContainerHealthCheckOutput{})
	pulumi.RegisterOutputType(GetContainerHealthCheckArrayOutput{})
	pulumi.RegisterOutputType(GetContainerHealthCheckHttpOutput{})
	pulumi.RegisterOutputType(GetContainerHealthCheckHttpArrayOutput{})
	pulumi.RegisterOutputType(GetContainerScalingOptionOutput{})
	pulumi.RegisterOutputType(GetContainerScalingOptionArrayOutput{})
}
