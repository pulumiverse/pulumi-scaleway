// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Database instance authorized IPs.
// For more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api/#acl-rules-allowed-ips).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewDatabaseAcl(ctx, "main", &scaleway.DatabaseAclArgs{
//				InstanceId: pulumi.Any(scaleway_rdb_instance.Main.Id),
//				AclRules: scaleway.DatabaseAclAclRuleArray{
//					&scaleway.DatabaseAclAclRuleArgs{
//						Ip:          pulumi.String("1.2.3.4/32"),
//						Description: pulumi.String("foo"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Database Instance can be imported using the `{region}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/databaseAcl:DatabaseAcl acl01 fr-par/11111111-1111-1111-1111-111111111111
// ```
type DatabaseAcl struct {
	pulumi.CustomResourceState

	// A list of ACLs (structure is described below)
	AclRules DatabaseAclAclRuleArrayOutput `pulumi:"aclRules"`
	// UUID of the rdb instance.
	//
	// > **Important:** Updates to `instanceId` will recreate the Database ACL.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// `region`) The region in which the Database Instance should be created.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewDatabaseAcl registers a new resource with the given unique name, arguments, and options.
func NewDatabaseAcl(ctx *pulumi.Context,
	name string, args *DatabaseAclArgs, opts ...pulumi.ResourceOption) (*DatabaseAcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AclRules == nil {
		return nil, errors.New("invalid value for required argument 'AclRules'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabaseAcl
	err := ctx.RegisterResource("scaleway:index/databaseAcl:DatabaseAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseAcl gets an existing DatabaseAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseAclState, opts ...pulumi.ResourceOption) (*DatabaseAcl, error) {
	var resource DatabaseAcl
	err := ctx.ReadResource("scaleway:index/databaseAcl:DatabaseAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseAcl resources.
type databaseAclState struct {
	// A list of ACLs (structure is described below)
	AclRules []DatabaseAclAclRule `pulumi:"aclRules"`
	// UUID of the rdb instance.
	//
	// > **Important:** Updates to `instanceId` will recreate the Database ACL.
	InstanceId *string `pulumi:"instanceId"`
	// `region`) The region in which the Database Instance should be created.
	Region *string `pulumi:"region"`
}

type DatabaseAclState struct {
	// A list of ACLs (structure is described below)
	AclRules DatabaseAclAclRuleArrayInput
	// UUID of the rdb instance.
	//
	// > **Important:** Updates to `instanceId` will recreate the Database ACL.
	InstanceId pulumi.StringPtrInput
	// `region`) The region in which the Database Instance should be created.
	Region pulumi.StringPtrInput
}

func (DatabaseAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseAclState)(nil)).Elem()
}

type databaseAclArgs struct {
	// A list of ACLs (structure is described below)
	AclRules []DatabaseAclAclRule `pulumi:"aclRules"`
	// UUID of the rdb instance.
	//
	// > **Important:** Updates to `instanceId` will recreate the Database ACL.
	InstanceId string `pulumi:"instanceId"`
	// `region`) The region in which the Database Instance should be created.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a DatabaseAcl resource.
type DatabaseAclArgs struct {
	// A list of ACLs (structure is described below)
	AclRules DatabaseAclAclRuleArrayInput
	// UUID of the rdb instance.
	//
	// > **Important:** Updates to `instanceId` will recreate the Database ACL.
	InstanceId pulumi.StringInput
	// `region`) The region in which the Database Instance should be created.
	Region pulumi.StringPtrInput
}

func (DatabaseAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseAclArgs)(nil)).Elem()
}

type DatabaseAclInput interface {
	pulumi.Input

	ToDatabaseAclOutput() DatabaseAclOutput
	ToDatabaseAclOutputWithContext(ctx context.Context) DatabaseAclOutput
}

func (*DatabaseAcl) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseAcl)(nil)).Elem()
}

func (i *DatabaseAcl) ToDatabaseAclOutput() DatabaseAclOutput {
	return i.ToDatabaseAclOutputWithContext(context.Background())
}

func (i *DatabaseAcl) ToDatabaseAclOutputWithContext(ctx context.Context) DatabaseAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseAclOutput)
}

// DatabaseAclArrayInput is an input type that accepts DatabaseAclArray and DatabaseAclArrayOutput values.
// You can construct a concrete instance of `DatabaseAclArrayInput` via:
//
//	DatabaseAclArray{ DatabaseAclArgs{...} }
type DatabaseAclArrayInput interface {
	pulumi.Input

	ToDatabaseAclArrayOutput() DatabaseAclArrayOutput
	ToDatabaseAclArrayOutputWithContext(context.Context) DatabaseAclArrayOutput
}

type DatabaseAclArray []DatabaseAclInput

func (DatabaseAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseAcl)(nil)).Elem()
}

func (i DatabaseAclArray) ToDatabaseAclArrayOutput() DatabaseAclArrayOutput {
	return i.ToDatabaseAclArrayOutputWithContext(context.Background())
}

func (i DatabaseAclArray) ToDatabaseAclArrayOutputWithContext(ctx context.Context) DatabaseAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseAclArrayOutput)
}

// DatabaseAclMapInput is an input type that accepts DatabaseAclMap and DatabaseAclMapOutput values.
// You can construct a concrete instance of `DatabaseAclMapInput` via:
//
//	DatabaseAclMap{ "key": DatabaseAclArgs{...} }
type DatabaseAclMapInput interface {
	pulumi.Input

	ToDatabaseAclMapOutput() DatabaseAclMapOutput
	ToDatabaseAclMapOutputWithContext(context.Context) DatabaseAclMapOutput
}

type DatabaseAclMap map[string]DatabaseAclInput

func (DatabaseAclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseAcl)(nil)).Elem()
}

func (i DatabaseAclMap) ToDatabaseAclMapOutput() DatabaseAclMapOutput {
	return i.ToDatabaseAclMapOutputWithContext(context.Background())
}

func (i DatabaseAclMap) ToDatabaseAclMapOutputWithContext(ctx context.Context) DatabaseAclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseAclMapOutput)
}

type DatabaseAclOutput struct{ *pulumi.OutputState }

func (DatabaseAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseAcl)(nil)).Elem()
}

func (o DatabaseAclOutput) ToDatabaseAclOutput() DatabaseAclOutput {
	return o
}

func (o DatabaseAclOutput) ToDatabaseAclOutputWithContext(ctx context.Context) DatabaseAclOutput {
	return o
}

// A list of ACLs (structure is described below)
func (o DatabaseAclOutput) AclRules() DatabaseAclAclRuleArrayOutput {
	return o.ApplyT(func(v *DatabaseAcl) DatabaseAclAclRuleArrayOutput { return v.AclRules }).(DatabaseAclAclRuleArrayOutput)
}

// UUID of the rdb instance.
//
// > **Important:** Updates to `instanceId` will recreate the Database ACL.
func (o DatabaseAclOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseAcl) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// `region`) The region in which the Database Instance should be created.
func (o DatabaseAclOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseAcl) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type DatabaseAclArrayOutput struct{ *pulumi.OutputState }

func (DatabaseAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseAcl)(nil)).Elem()
}

func (o DatabaseAclArrayOutput) ToDatabaseAclArrayOutput() DatabaseAclArrayOutput {
	return o
}

func (o DatabaseAclArrayOutput) ToDatabaseAclArrayOutputWithContext(ctx context.Context) DatabaseAclArrayOutput {
	return o
}

func (o DatabaseAclArrayOutput) Index(i pulumi.IntInput) DatabaseAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabaseAcl {
		return vs[0].([]*DatabaseAcl)[vs[1].(int)]
	}).(DatabaseAclOutput)
}

type DatabaseAclMapOutput struct{ *pulumi.OutputState }

func (DatabaseAclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseAcl)(nil)).Elem()
}

func (o DatabaseAclMapOutput) ToDatabaseAclMapOutput() DatabaseAclMapOutput {
	return o
}

func (o DatabaseAclMapOutput) ToDatabaseAclMapOutputWithContext(ctx context.Context) DatabaseAclMapOutput {
	return o
}

func (o DatabaseAclMapOutput) MapIndex(k pulumi.StringInput) DatabaseAclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabaseAcl {
		return vs[0].(map[string]*DatabaseAcl)[vs[1].(string)]
	}).(DatabaseAclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseAclInput)(nil)).Elem(), &DatabaseAcl{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseAclArrayInput)(nil)).Elem(), DatabaseAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseAclMapInput)(nil)).Elem(), DatabaseAclMap{})
	pulumi.RegisterOutputType(DatabaseAclOutput{})
	pulumi.RegisterOutputType(DatabaseAclArrayOutput{})
	pulumi.RegisterOutputType(DatabaseAclMapOutput{})
}
