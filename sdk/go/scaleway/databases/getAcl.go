// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databases

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Gets information about the Database Instance network Access Control List.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/databases"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Get the database ACL for the instance id 11111111-1111-1111-1111-111111111111 located in the default region e.g: fr-par
//			_, err := databases.LookupAcl(ctx, &databases.LookupAclArgs{
//				InstanceId: "11111111-1111-1111-1111-111111111111",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAcl(ctx *pulumi.Context, args *LookupAclArgs, opts ...pulumi.InvokeOption) (*LookupAclResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAclResult
	err := ctx.Invoke("scaleway:databases/getAcl:getAcl", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAcl.
type LookupAclArgs struct {
	// The RDB instance ID.
	InstanceId string `pulumi:"instanceId"`
	// `region`) The region in which the Database Instance should be created.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getAcl.
type LookupAclResult struct {
	// A list of ACLs rules (structure is described below)
	AclRules []GetAclAclRule `pulumi:"aclRules"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	InstanceId string  `pulumi:"instanceId"`
	Region     *string `pulumi:"region"`
}

func LookupAclOutput(ctx *pulumi.Context, args LookupAclOutputArgs, opts ...pulumi.InvokeOption) LookupAclResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAclResultOutput, error) {
			args := v.(LookupAclArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("scaleway:databases/getAcl:getAcl", args, LookupAclResultOutput{}, options).(LookupAclResultOutput), nil
		}).(LookupAclResultOutput)
}

// A collection of arguments for invoking getAcl.
type LookupAclOutputArgs struct {
	// The RDB instance ID.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// `region`) The region in which the Database Instance should be created.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (LookupAclOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAclArgs)(nil)).Elem()
}

// A collection of values returned by getAcl.
type LookupAclResultOutput struct{ *pulumi.OutputState }

func (LookupAclResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAclResult)(nil)).Elem()
}

func (o LookupAclResultOutput) ToLookupAclResultOutput() LookupAclResultOutput {
	return o
}

func (o LookupAclResultOutput) ToLookupAclResultOutputWithContext(ctx context.Context) LookupAclResultOutput {
	return o
}

// A list of ACLs rules (structure is described below)
func (o LookupAclResultOutput) AclRules() GetAclAclRuleArrayOutput {
	return o.ApplyT(func(v LookupAclResult) []GetAclAclRule { return v.AclRules }).(GetAclAclRuleArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAclResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAclResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupAclResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAclResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o LookupAclResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAclResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAclResultOutput{})
}
