// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databases

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Database Instances.
// For more information, see refer to the [API documentation](https://www.scaleway.com/en/developers/api/managed-database-postgre-mysql/).
//
// ## Example Usage
//
// ### Example Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/databases"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databases.NewInstance(ctx, "main", &databases.InstanceArgs{
//				Name:             pulumi.String("test-rdb"),
//				NodeType:         pulumi.String("DB-DEV-S"),
//				Engine:           pulumi.String("PostgreSQL-15"),
//				IsHaCluster:      pulumi.Bool(true),
//				DisableBackup:    pulumi.Bool(true),
//				UserName:         pulumi.String("my_initial_user"),
//				Password:         pulumi.String("thiZ_is_v&ry_s3cret"),
//				EncryptionAtRest: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Example Block Storage Low Latency
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/databases"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databases.NewInstance(ctx, "main", &databases.InstanceArgs{
//				Name:           pulumi.String("test-rdb-sbs"),
//				NodeType:       pulumi.String("db-play2-pico"),
//				Engine:         pulumi.String("PostgreSQL-15"),
//				IsHaCluster:    pulumi.Bool(true),
//				DisableBackup:  pulumi.Bool(true),
//				UserName:       pulumi.String("my_initial_user"),
//				Password:       pulumi.String("thiZ_is_v&ry_s3cret"),
//				VolumeType:     pulumi.String("sbs_15k"),
//				VolumeSizeInGb: pulumi.Int(10),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Example with Settings
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/databases"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databases.NewInstance(ctx, "main", &databases.InstanceArgs{
//				Name:          pulumi.String("test-rdb"),
//				NodeType:      pulumi.String("db-dev-s"),
//				DisableBackup: pulumi.Bool(true),
//				Engine:        pulumi.String("MySQL-8"),
//				UserName:      pulumi.String("my_initial_user"),
//				Password:      pulumi.String("thiZ_is_v&ry_s3cret"),
//				InitSettings: pulumi.StringMap{
//					"lower_case_table_names": pulumi.String("1"),
//				},
//				Settings: pulumi.StringMap{
//					"max_connections": pulumi.String("350"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Example with backup schedule
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/databases"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databases.NewInstance(ctx, "main", &databases.InstanceArgs{
//				Name:                    pulumi.String("test-rdb"),
//				NodeType:                pulumi.String("DB-DEV-S"),
//				Engine:                  pulumi.String("PostgreSQL-15"),
//				IsHaCluster:             pulumi.Bool(true),
//				UserName:                pulumi.String("my_initial_user"),
//				Password:                pulumi.String("thiZ_is_v&ry_s3cret"),
//				DisableBackup:           pulumi.Bool(false),
//				BackupScheduleFrequency: pulumi.Int(24),
//				BackupScheduleRetention: pulumi.Int(7),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Examples of endpoint configuration
//
// Database Instances can have a maximum of 1 public endpoint and 1 private endpoint. They can have both, or none.
//
// ### 1 static Private Network endpoint
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/databases"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/network"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			pn, err := network.NewPrivateNetwork(ctx, "pn", &network.PrivateNetworkArgs{
//				Ipv4Subnet: &network.PrivateNetworkIpv4SubnetArgs{
//					Subnet: pulumi.String("172.16.20.0/22"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databases.NewInstance(ctx, "main", &databases.InstanceArgs{
//				NodeType: pulumi.String("db-dev-s"),
//				Engine:   pulumi.String("PostgreSQL-15"),
//				PrivateNetwork: &databases.InstancePrivateNetworkArgs{
//					PnId:  pn.ID(),
//					IpNet: pulumi.String("172.16.20.4/22"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### 1 IPAM Private Network endpoint + 1 public endpoint
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/databases"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/network"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			pn, err := network.NewPrivateNetwork(ctx, "pn", nil)
//			if err != nil {
//				return err
//			}
//			_, err = databases.NewInstance(ctx, "main", &databases.InstanceArgs{
//				LoadBalancers: databases.InstanceLoadBalancerArray{
//					&databases.InstanceLoadBalancerArgs{},
//				},
//				NodeType: pulumi.String("DB-DEV-S"),
//				Engine:   pulumi.String("PostgreSQL-15"),
//				PrivateNetwork: &databases.InstancePrivateNetworkArgs{
//					PnId:       pn.ID(),
//					EnableIpam: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Default: 1 public endpoint
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/databases"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databases.NewInstance(ctx, "main", &databases.InstanceArgs{
//				NodeType: pulumi.String("db-dev-s"),
//				Engine:   pulumi.String("PostgreSQL-15"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// > **Note** If nothing is defined, your Database Instance will have a default public load-balancer endpoint.
//
// ## Limitations
//
// The Managed Database product is only compliant with the Private Network in the default availability zone (AZ).
// i.e. `fr-par-1`, `nl-ams-1`, `pl-waw-1`. To learn more, read our
// section [How to connect a PostgreSQL and MySQL Database Instance to a Private Network](https://www.scaleway.com/en/docs/managed-databases/postgresql-and-mysql/how-to/connect-database-private-network/)
//
// ## Import
//
// Database Instance can be imported using the `{region}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:databases/instance:Instance rdb01 fr-par/11111111-1111-1111-1111-111111111111
// ```
type Instance struct {
	pulumi.CustomResourceState

	// Boolean to store logical backups in the same region as the database instance
	BackupSameRegion pulumi.BoolOutput `pulumi:"backupSameRegion"`
	// Backup schedule frequency in hours
	BackupScheduleFrequency pulumi.IntOutput `pulumi:"backupScheduleFrequency"`
	// Backup schedule retention in days
	BackupScheduleRetention pulumi.IntOutput `pulumi:"backupScheduleRetention"`
	// Certificate of the Database Instance.
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// Disable automated backup for the database instance
	DisableBackup pulumi.BoolPtrOutput `pulumi:"disableBackup"`
	// Enable or disable encryption at rest for the Database Instance.
	EncryptionAtRest pulumi.BoolPtrOutput `pulumi:"encryptionAtRest"`
	// (Deprecated) The IP of the Database Instance. Please use the privateNetwork or the loadBalancer attribute.
	//
	// Deprecated: Please use the privateNetwork or the loadBalancer attribute
	EndpointIp pulumi.StringOutput `pulumi:"endpointIp"`
	// (Deprecated) The port of the Database Instance. Please use the privateNetwork or the loadBalancer attribute.
	//
	// Deprecated: Please use the privateNetwork or the loadBalancer attribute
	EndpointPort pulumi.IntOutput `pulumi:"endpointPort"`
	// Database Instance's engine version (e.g. `PostgreSQL-11`).
	//
	// > **Important** Updates to `engine` will recreate the Database Instance.
	Engine pulumi.StringOutput `pulumi:"engine"`
	// Map of engine settings to be set at database initialisation.
	InitSettings pulumi.StringMapOutput `pulumi:"initSettings"`
	// Enable or disable high availability for the Database Instance.
	//
	// > **Important** Updates to `isHaCluster` will recreate the Database Instance.
	IsHaCluster pulumi.BoolPtrOutput `pulumi:"isHaCluster"`
	// List of Load Balancer endpoints of the Database Instance.
	LoadBalancers InstanceLoadBalancerArrayOutput `pulumi:"loadBalancers"`
	// Logs policy configuration
	LogsPolicy InstanceLogsPolicyOutput `pulumi:"logsPolicy"`
	// The name of the Database Instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// The type of Database Instance you want to create (e.g. `db-dev-s`).
	//
	// > **Important** Updates to `nodeType` will upgrade the Database Instance to the desired `nodeType` without any
	// interruption.
	//
	// > **Important** Once your Database Instance reaches `diskFull` status, if you are using `lssd` storage, you should upgrade the `nodeType`, and if you are using `bssd` storage, you should increase the volume size before making any other changes to your Database Instance.
	NodeType pulumi.StringOutput `pulumi:"nodeType"`
	// The organization ID the Database Instance is associated with.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// Password for the first user of the Database Instance.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// List of Private Networks endpoints of the Database Instance.
	PrivateNetwork InstancePrivateNetworkPtrOutput `pulumi:"privateNetwork"`
	// `projectId`) The ID of the project the Database
	// Instance is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// List of read replicas of the Database Instance.
	ReadReplicas InstanceReadReplicaArrayOutput `pulumi:"readReplicas"`
	// `region`) The region
	// in which the Database Instance should be created.
	Region pulumi.StringOutput `pulumi:"region"`
	// Map of engine settings to be set on a running instance.
	Settings pulumi.StringMapOutput `pulumi:"settings"`
	// ID of an existing snapshot to create a new instance from. This allows restoring a database instance to the state
	// captured in the specified snapshot. Conflicts with the `engine` attribute.
	SnapshotId pulumi.StringPtrOutput `pulumi:"snapshotId"`
	// The tags associated with the Database Instance.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Identifier for the first user of the Database Instance.
	//
	// > **Important** Updates to `userName` will recreate the Database Instance.
	UserName pulumi.StringOutput `pulumi:"userName"`
	// Volume size (in GB). Cannot be used when `volumeType` is set to `lssd`.
	//
	// > **Important** Once your Database Instance reaches `diskFull` status, you should increase the volume size before making any other change to your Database Instance.
	VolumeSizeInGb pulumi.IntOutput `pulumi:"volumeSizeInGb"`
	// Type of volume where data are stored (`bssd`, `lssd`, `sbs5k` or `sbs15k`).
	VolumeType pulumi.StringPtrOutput `pulumi:"volumeType"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NodeType == nil {
		return nil, errors.New("invalid value for required argument 'NodeType'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/databaseInstance:DatabaseInstance"),
		},
	})
	opts = append(opts, aliases)
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Instance
	err := ctx.RegisterResource("scaleway:databases/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("scaleway:databases/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// Boolean to store logical backups in the same region as the database instance
	BackupSameRegion *bool `pulumi:"backupSameRegion"`
	// Backup schedule frequency in hours
	BackupScheduleFrequency *int `pulumi:"backupScheduleFrequency"`
	// Backup schedule retention in days
	BackupScheduleRetention *int `pulumi:"backupScheduleRetention"`
	// Certificate of the Database Instance.
	Certificate *string `pulumi:"certificate"`
	// Disable automated backup for the database instance
	DisableBackup *bool `pulumi:"disableBackup"`
	// Enable or disable encryption at rest for the Database Instance.
	EncryptionAtRest *bool `pulumi:"encryptionAtRest"`
	// (Deprecated) The IP of the Database Instance. Please use the privateNetwork or the loadBalancer attribute.
	//
	// Deprecated: Please use the privateNetwork or the loadBalancer attribute
	EndpointIp *string `pulumi:"endpointIp"`
	// (Deprecated) The port of the Database Instance. Please use the privateNetwork or the loadBalancer attribute.
	//
	// Deprecated: Please use the privateNetwork or the loadBalancer attribute
	EndpointPort *int `pulumi:"endpointPort"`
	// Database Instance's engine version (e.g. `PostgreSQL-11`).
	//
	// > **Important** Updates to `engine` will recreate the Database Instance.
	Engine *string `pulumi:"engine"`
	// Map of engine settings to be set at database initialisation.
	InitSettings map[string]string `pulumi:"initSettings"`
	// Enable or disable high availability for the Database Instance.
	//
	// > **Important** Updates to `isHaCluster` will recreate the Database Instance.
	IsHaCluster *bool `pulumi:"isHaCluster"`
	// List of Load Balancer endpoints of the Database Instance.
	LoadBalancers []InstanceLoadBalancer `pulumi:"loadBalancers"`
	// Logs policy configuration
	LogsPolicy *InstanceLogsPolicy `pulumi:"logsPolicy"`
	// The name of the Database Instance.
	Name *string `pulumi:"name"`
	// The type of Database Instance you want to create (e.g. `db-dev-s`).
	//
	// > **Important** Updates to `nodeType` will upgrade the Database Instance to the desired `nodeType` without any
	// interruption.
	//
	// > **Important** Once your Database Instance reaches `diskFull` status, if you are using `lssd` storage, you should upgrade the `nodeType`, and if you are using `bssd` storage, you should increase the volume size before making any other changes to your Database Instance.
	NodeType *string `pulumi:"nodeType"`
	// The organization ID the Database Instance is associated with.
	OrganizationId *string `pulumi:"organizationId"`
	// Password for the first user of the Database Instance.
	Password *string `pulumi:"password"`
	// List of Private Networks endpoints of the Database Instance.
	PrivateNetwork *InstancePrivateNetwork `pulumi:"privateNetwork"`
	// `projectId`) The ID of the project the Database
	// Instance is associated with.
	ProjectId *string `pulumi:"projectId"`
	// List of read replicas of the Database Instance.
	ReadReplicas []InstanceReadReplica `pulumi:"readReplicas"`
	// `region`) The region
	// in which the Database Instance should be created.
	Region *string `pulumi:"region"`
	// Map of engine settings to be set on a running instance.
	Settings map[string]string `pulumi:"settings"`
	// ID of an existing snapshot to create a new instance from. This allows restoring a database instance to the state
	// captured in the specified snapshot. Conflicts with the `engine` attribute.
	SnapshotId *string `pulumi:"snapshotId"`
	// The tags associated with the Database Instance.
	Tags []string `pulumi:"tags"`
	// Identifier for the first user of the Database Instance.
	//
	// > **Important** Updates to `userName` will recreate the Database Instance.
	UserName *string `pulumi:"userName"`
	// Volume size (in GB). Cannot be used when `volumeType` is set to `lssd`.
	//
	// > **Important** Once your Database Instance reaches `diskFull` status, you should increase the volume size before making any other change to your Database Instance.
	VolumeSizeInGb *int `pulumi:"volumeSizeInGb"`
	// Type of volume where data are stored (`bssd`, `lssd`, `sbs5k` or `sbs15k`).
	VolumeType *string `pulumi:"volumeType"`
}

type InstanceState struct {
	// Boolean to store logical backups in the same region as the database instance
	BackupSameRegion pulumi.BoolPtrInput
	// Backup schedule frequency in hours
	BackupScheduleFrequency pulumi.IntPtrInput
	// Backup schedule retention in days
	BackupScheduleRetention pulumi.IntPtrInput
	// Certificate of the Database Instance.
	Certificate pulumi.StringPtrInput
	// Disable automated backup for the database instance
	DisableBackup pulumi.BoolPtrInput
	// Enable or disable encryption at rest for the Database Instance.
	EncryptionAtRest pulumi.BoolPtrInput
	// (Deprecated) The IP of the Database Instance. Please use the privateNetwork or the loadBalancer attribute.
	//
	// Deprecated: Please use the privateNetwork or the loadBalancer attribute
	EndpointIp pulumi.StringPtrInput
	// (Deprecated) The port of the Database Instance. Please use the privateNetwork or the loadBalancer attribute.
	//
	// Deprecated: Please use the privateNetwork or the loadBalancer attribute
	EndpointPort pulumi.IntPtrInput
	// Database Instance's engine version (e.g. `PostgreSQL-11`).
	//
	// > **Important** Updates to `engine` will recreate the Database Instance.
	Engine pulumi.StringPtrInput
	// Map of engine settings to be set at database initialisation.
	InitSettings pulumi.StringMapInput
	// Enable or disable high availability for the Database Instance.
	//
	// > **Important** Updates to `isHaCluster` will recreate the Database Instance.
	IsHaCluster pulumi.BoolPtrInput
	// List of Load Balancer endpoints of the Database Instance.
	LoadBalancers InstanceLoadBalancerArrayInput
	// Logs policy configuration
	LogsPolicy InstanceLogsPolicyPtrInput
	// The name of the Database Instance.
	Name pulumi.StringPtrInput
	// The type of Database Instance you want to create (e.g. `db-dev-s`).
	//
	// > **Important** Updates to `nodeType` will upgrade the Database Instance to the desired `nodeType` without any
	// interruption.
	//
	// > **Important** Once your Database Instance reaches `diskFull` status, if you are using `lssd` storage, you should upgrade the `nodeType`, and if you are using `bssd` storage, you should increase the volume size before making any other changes to your Database Instance.
	NodeType pulumi.StringPtrInput
	// The organization ID the Database Instance is associated with.
	OrganizationId pulumi.StringPtrInput
	// Password for the first user of the Database Instance.
	Password pulumi.StringPtrInput
	// List of Private Networks endpoints of the Database Instance.
	PrivateNetwork InstancePrivateNetworkPtrInput
	// `projectId`) The ID of the project the Database
	// Instance is associated with.
	ProjectId pulumi.StringPtrInput
	// List of read replicas of the Database Instance.
	ReadReplicas InstanceReadReplicaArrayInput
	// `region`) The region
	// in which the Database Instance should be created.
	Region pulumi.StringPtrInput
	// Map of engine settings to be set on a running instance.
	Settings pulumi.StringMapInput
	// ID of an existing snapshot to create a new instance from. This allows restoring a database instance to the state
	// captured in the specified snapshot. Conflicts with the `engine` attribute.
	SnapshotId pulumi.StringPtrInput
	// The tags associated with the Database Instance.
	Tags pulumi.StringArrayInput
	// Identifier for the first user of the Database Instance.
	//
	// > **Important** Updates to `userName` will recreate the Database Instance.
	UserName pulumi.StringPtrInput
	// Volume size (in GB). Cannot be used when `volumeType` is set to `lssd`.
	//
	// > **Important** Once your Database Instance reaches `diskFull` status, you should increase the volume size before making any other change to your Database Instance.
	VolumeSizeInGb pulumi.IntPtrInput
	// Type of volume where data are stored (`bssd`, `lssd`, `sbs5k` or `sbs15k`).
	VolumeType pulumi.StringPtrInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// Boolean to store logical backups in the same region as the database instance
	BackupSameRegion *bool `pulumi:"backupSameRegion"`
	// Backup schedule frequency in hours
	BackupScheduleFrequency *int `pulumi:"backupScheduleFrequency"`
	// Backup schedule retention in days
	BackupScheduleRetention *int `pulumi:"backupScheduleRetention"`
	// Disable automated backup for the database instance
	DisableBackup *bool `pulumi:"disableBackup"`
	// Enable or disable encryption at rest for the Database Instance.
	EncryptionAtRest *bool `pulumi:"encryptionAtRest"`
	// Database Instance's engine version (e.g. `PostgreSQL-11`).
	//
	// > **Important** Updates to `engine` will recreate the Database Instance.
	Engine *string `pulumi:"engine"`
	// Map of engine settings to be set at database initialisation.
	InitSettings map[string]string `pulumi:"initSettings"`
	// Enable or disable high availability for the Database Instance.
	//
	// > **Important** Updates to `isHaCluster` will recreate the Database Instance.
	IsHaCluster *bool `pulumi:"isHaCluster"`
	// List of Load Balancer endpoints of the Database Instance.
	LoadBalancers []InstanceLoadBalancer `pulumi:"loadBalancers"`
	// Logs policy configuration
	LogsPolicy *InstanceLogsPolicy `pulumi:"logsPolicy"`
	// The name of the Database Instance.
	Name *string `pulumi:"name"`
	// The type of Database Instance you want to create (e.g. `db-dev-s`).
	//
	// > **Important** Updates to `nodeType` will upgrade the Database Instance to the desired `nodeType` without any
	// interruption.
	//
	// > **Important** Once your Database Instance reaches `diskFull` status, if you are using `lssd` storage, you should upgrade the `nodeType`, and if you are using `bssd` storage, you should increase the volume size before making any other changes to your Database Instance.
	NodeType string `pulumi:"nodeType"`
	// Password for the first user of the Database Instance.
	Password *string `pulumi:"password"`
	// List of Private Networks endpoints of the Database Instance.
	PrivateNetwork *InstancePrivateNetwork `pulumi:"privateNetwork"`
	// `projectId`) The ID of the project the Database
	// Instance is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region
	// in which the Database Instance should be created.
	Region *string `pulumi:"region"`
	// Map of engine settings to be set on a running instance.
	Settings map[string]string `pulumi:"settings"`
	// ID of an existing snapshot to create a new instance from. This allows restoring a database instance to the state
	// captured in the specified snapshot. Conflicts with the `engine` attribute.
	SnapshotId *string `pulumi:"snapshotId"`
	// The tags associated with the Database Instance.
	Tags []string `pulumi:"tags"`
	// Identifier for the first user of the Database Instance.
	//
	// > **Important** Updates to `userName` will recreate the Database Instance.
	UserName *string `pulumi:"userName"`
	// Volume size (in GB). Cannot be used when `volumeType` is set to `lssd`.
	//
	// > **Important** Once your Database Instance reaches `diskFull` status, you should increase the volume size before making any other change to your Database Instance.
	VolumeSizeInGb *int `pulumi:"volumeSizeInGb"`
	// Type of volume where data are stored (`bssd`, `lssd`, `sbs5k` or `sbs15k`).
	VolumeType *string `pulumi:"volumeType"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// Boolean to store logical backups in the same region as the database instance
	BackupSameRegion pulumi.BoolPtrInput
	// Backup schedule frequency in hours
	BackupScheduleFrequency pulumi.IntPtrInput
	// Backup schedule retention in days
	BackupScheduleRetention pulumi.IntPtrInput
	// Disable automated backup for the database instance
	DisableBackup pulumi.BoolPtrInput
	// Enable or disable encryption at rest for the Database Instance.
	EncryptionAtRest pulumi.BoolPtrInput
	// Database Instance's engine version (e.g. `PostgreSQL-11`).
	//
	// > **Important** Updates to `engine` will recreate the Database Instance.
	Engine pulumi.StringPtrInput
	// Map of engine settings to be set at database initialisation.
	InitSettings pulumi.StringMapInput
	// Enable or disable high availability for the Database Instance.
	//
	// > **Important** Updates to `isHaCluster` will recreate the Database Instance.
	IsHaCluster pulumi.BoolPtrInput
	// List of Load Balancer endpoints of the Database Instance.
	LoadBalancers InstanceLoadBalancerArrayInput
	// Logs policy configuration
	LogsPolicy InstanceLogsPolicyPtrInput
	// The name of the Database Instance.
	Name pulumi.StringPtrInput
	// The type of Database Instance you want to create (e.g. `db-dev-s`).
	//
	// > **Important** Updates to `nodeType` will upgrade the Database Instance to the desired `nodeType` without any
	// interruption.
	//
	// > **Important** Once your Database Instance reaches `diskFull` status, if you are using `lssd` storage, you should upgrade the `nodeType`, and if you are using `bssd` storage, you should increase the volume size before making any other changes to your Database Instance.
	NodeType pulumi.StringInput
	// Password for the first user of the Database Instance.
	Password pulumi.StringPtrInput
	// List of Private Networks endpoints of the Database Instance.
	PrivateNetwork InstancePrivateNetworkPtrInput
	// `projectId`) The ID of the project the Database
	// Instance is associated with.
	ProjectId pulumi.StringPtrInput
	// `region`) The region
	// in which the Database Instance should be created.
	Region pulumi.StringPtrInput
	// Map of engine settings to be set on a running instance.
	Settings pulumi.StringMapInput
	// ID of an existing snapshot to create a new instance from. This allows restoring a database instance to the state
	// captured in the specified snapshot. Conflicts with the `engine` attribute.
	SnapshotId pulumi.StringPtrInput
	// The tags associated with the Database Instance.
	Tags pulumi.StringArrayInput
	// Identifier for the first user of the Database Instance.
	//
	// > **Important** Updates to `userName` will recreate the Database Instance.
	UserName pulumi.StringPtrInput
	// Volume size (in GB). Cannot be used when `volumeType` is set to `lssd`.
	//
	// > **Important** Once your Database Instance reaches `diskFull` status, you should increase the volume size before making any other change to your Database Instance.
	VolumeSizeInGb pulumi.IntPtrInput
	// Type of volume where data are stored (`bssd`, `lssd`, `sbs5k` or `sbs15k`).
	VolumeType pulumi.StringPtrInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//	InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//	InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// Boolean to store logical backups in the same region as the database instance
func (o InstanceOutput) BackupSameRegion() pulumi.BoolOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolOutput { return v.BackupSameRegion }).(pulumi.BoolOutput)
}

// Backup schedule frequency in hours
func (o InstanceOutput) BackupScheduleFrequency() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.BackupScheduleFrequency }).(pulumi.IntOutput)
}

// Backup schedule retention in days
func (o InstanceOutput) BackupScheduleRetention() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.BackupScheduleRetention }).(pulumi.IntOutput)
}

// Certificate of the Database Instance.
func (o InstanceOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

// Disable automated backup for the database instance
func (o InstanceOutput) DisableBackup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.DisableBackup }).(pulumi.BoolPtrOutput)
}

// Enable or disable encryption at rest for the Database Instance.
func (o InstanceOutput) EncryptionAtRest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.EncryptionAtRest }).(pulumi.BoolPtrOutput)
}

// (Deprecated) The IP of the Database Instance. Please use the privateNetwork or the loadBalancer attribute.
//
// Deprecated: Please use the privateNetwork or the loadBalancer attribute
func (o InstanceOutput) EndpointIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.EndpointIp }).(pulumi.StringOutput)
}

// (Deprecated) The port of the Database Instance. Please use the privateNetwork or the loadBalancer attribute.
//
// Deprecated: Please use the privateNetwork or the loadBalancer attribute
func (o InstanceOutput) EndpointPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.EndpointPort }).(pulumi.IntOutput)
}

// Database Instance's engine version (e.g. `PostgreSQL-11`).
//
// > **Important** Updates to `engine` will recreate the Database Instance.
func (o InstanceOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Engine }).(pulumi.StringOutput)
}

// Map of engine settings to be set at database initialisation.
func (o InstanceOutput) InitSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringMapOutput { return v.InitSettings }).(pulumi.StringMapOutput)
}

// Enable or disable high availability for the Database Instance.
//
// > **Important** Updates to `isHaCluster` will recreate the Database Instance.
func (o InstanceOutput) IsHaCluster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.IsHaCluster }).(pulumi.BoolPtrOutput)
}

// List of Load Balancer endpoints of the Database Instance.
func (o InstanceOutput) LoadBalancers() InstanceLoadBalancerArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceLoadBalancerArrayOutput { return v.LoadBalancers }).(InstanceLoadBalancerArrayOutput)
}

// Logs policy configuration
func (o InstanceOutput) LogsPolicy() InstanceLogsPolicyOutput {
	return o.ApplyT(func(v *Instance) InstanceLogsPolicyOutput { return v.LogsPolicy }).(InstanceLogsPolicyOutput)
}

// The name of the Database Instance.
func (o InstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The type of Database Instance you want to create (e.g. `db-dev-s`).
//
// > **Important** Updates to `nodeType` will upgrade the Database Instance to the desired `nodeType` without any
// interruption.
//
// > **Important** Once your Database Instance reaches `diskFull` status, if you are using `lssd` storage, you should upgrade the `nodeType`, and if you are using `bssd` storage, you should increase the volume size before making any other changes to your Database Instance.
func (o InstanceOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.NodeType }).(pulumi.StringOutput)
}

// The organization ID the Database Instance is associated with.
func (o InstanceOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// Password for the first user of the Database Instance.
func (o InstanceOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// List of Private Networks endpoints of the Database Instance.
func (o InstanceOutput) PrivateNetwork() InstancePrivateNetworkPtrOutput {
	return o.ApplyT(func(v *Instance) InstancePrivateNetworkPtrOutput { return v.PrivateNetwork }).(InstancePrivateNetworkPtrOutput)
}

// `projectId`) The ID of the project the Database
// Instance is associated with.
func (o InstanceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// List of read replicas of the Database Instance.
func (o InstanceOutput) ReadReplicas() InstanceReadReplicaArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceReadReplicaArrayOutput { return v.ReadReplicas }).(InstanceReadReplicaArrayOutput)
}

// `region`) The region
// in which the Database Instance should be created.
func (o InstanceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Map of engine settings to be set on a running instance.
func (o InstanceOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringMapOutput { return v.Settings }).(pulumi.StringMapOutput)
}

// ID of an existing snapshot to create a new instance from. This allows restoring a database instance to the state
// captured in the specified snapshot. Conflicts with the `engine` attribute.
func (o InstanceOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// The tags associated with the Database Instance.
func (o InstanceOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Identifier for the first user of the Database Instance.
//
// > **Important** Updates to `userName` will recreate the Database Instance.
func (o InstanceOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

// Volume size (in GB). Cannot be used when `volumeType` is set to `lssd`.
//
// > **Important** Once your Database Instance reaches `diskFull` status, you should increase the volume size before making any other change to your Database Instance.
func (o InstanceOutput) VolumeSizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.VolumeSizeInGb }).(pulumi.IntOutput)
}

// Type of volume where data are stored (`bssd`, `lssd`, `sbs5k` or `sbs15k`).
func (o InstanceOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
