// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databases

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Create and manage Scaleway database privileges.
// For more information refer to the [API documentation](https://www.scaleway.com/en/developers/api/managed-database-postgre-mysql/#user-and-permissions).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/databases"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := databases.NewInstance(ctx, "main", &databases.InstanceArgs{
//				Name:          pulumi.String("rdb"),
//				NodeType:      pulumi.String("DB-DEV-S"),
//				Engine:        pulumi.String("PostgreSQL-11"),
//				IsHaCluster:   pulumi.Bool(true),
//				DisableBackup: pulumi.Bool(true),
//				UserName:      pulumi.String("my_initial_user"),
//				Password:      pulumi.String("thiZ_is_v&ry_s3cret"),
//			})
//			if err != nil {
//				return err
//			}
//			mainDatabase, err := databases.NewDatabase(ctx, "main", &databases.DatabaseArgs{
//				InstanceId: main.ID(),
//				Name:       pulumi.String("database"),
//			})
//			if err != nil {
//				return err
//			}
//			mainUser, err := databases.NewUser(ctx, "main", &databases.UserArgs{
//				InstanceId: main.ID(),
//				Name:       pulumi.String("my-db-user"),
//				Password:   pulumi.String("thiZ_is_v&ry_s3cret"),
//				IsAdmin:    pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databases.NewPrivilege(ctx, "main", &databases.PrivilegeArgs{
//				InstanceId:   main.ID(),
//				UserName:     mainUser.Name,
//				DatabaseName: mainDatabase.Name,
//				Permission:   pulumi.String("all"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The user privileges can be imported using the `{region}/{instance_id}/{database_name}/{user_name}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:databases/privilege:Privilege o fr-par/11111111-1111-1111-1111-111111111111/database_name/foo
// ```
type Privilege struct {
	pulumi.CustomResourceState

	// Name of the database (e.g. `my-db-name`).
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// UUID of the Database Instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.
	Permission pulumi.StringOutput `pulumi:"permission"`
	// `region`) The region in which the resource exists.
	Region pulumi.StringOutput `pulumi:"region"`
	// Name of the user (e.g. `my-db-user`).
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewPrivilege registers a new resource with the given unique name, arguments, and options.
func NewPrivilege(ctx *pulumi.Context,
	name string, args *PrivilegeArgs, opts ...pulumi.ResourceOption) (*Privilege, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Permission == nil {
		return nil, errors.New("invalid value for required argument 'Permission'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/databasePrivilege:DatabasePrivilege"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Privilege
	err := ctx.RegisterResource("scaleway:databases/privilege:Privilege", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrivilege gets an existing Privilege resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivilege(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrivilegeState, opts ...pulumi.ResourceOption) (*Privilege, error) {
	var resource Privilege
	err := ctx.ReadResource("scaleway:databases/privilege:Privilege", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Privilege resources.
type privilegeState struct {
	// Name of the database (e.g. `my-db-name`).
	DatabaseName *string `pulumi:"databaseName"`
	// UUID of the Database Instance.
	InstanceId *string `pulumi:"instanceId"`
	// Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.
	Permission *string `pulumi:"permission"`
	// `region`) The region in which the resource exists.
	Region *string `pulumi:"region"`
	// Name of the user (e.g. `my-db-user`).
	UserName *string `pulumi:"userName"`
}

type PrivilegeState struct {
	// Name of the database (e.g. `my-db-name`).
	DatabaseName pulumi.StringPtrInput
	// UUID of the Database Instance.
	InstanceId pulumi.StringPtrInput
	// Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.
	Permission pulumi.StringPtrInput
	// `region`) The region in which the resource exists.
	Region pulumi.StringPtrInput
	// Name of the user (e.g. `my-db-user`).
	UserName pulumi.StringPtrInput
}

func (PrivilegeState) ElementType() reflect.Type {
	return reflect.TypeOf((*privilegeState)(nil)).Elem()
}

type privilegeArgs struct {
	// Name of the database (e.g. `my-db-name`).
	DatabaseName string `pulumi:"databaseName"`
	// UUID of the Database Instance.
	InstanceId string `pulumi:"instanceId"`
	// Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.
	Permission string `pulumi:"permission"`
	// `region`) The region in which the resource exists.
	Region *string `pulumi:"region"`
	// Name of the user (e.g. `my-db-user`).
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a Privilege resource.
type PrivilegeArgs struct {
	// Name of the database (e.g. `my-db-name`).
	DatabaseName pulumi.StringInput
	// UUID of the Database Instance.
	InstanceId pulumi.StringInput
	// Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.
	Permission pulumi.StringInput
	// `region`) The region in which the resource exists.
	Region pulumi.StringPtrInput
	// Name of the user (e.g. `my-db-user`).
	UserName pulumi.StringInput
}

func (PrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*privilegeArgs)(nil)).Elem()
}

type PrivilegeInput interface {
	pulumi.Input

	ToPrivilegeOutput() PrivilegeOutput
	ToPrivilegeOutputWithContext(ctx context.Context) PrivilegeOutput
}

func (*Privilege) ElementType() reflect.Type {
	return reflect.TypeOf((**Privilege)(nil)).Elem()
}

func (i *Privilege) ToPrivilegeOutput() PrivilegeOutput {
	return i.ToPrivilegeOutputWithContext(context.Background())
}

func (i *Privilege) ToPrivilegeOutputWithContext(ctx context.Context) PrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegeOutput)
}

// PrivilegeArrayInput is an input type that accepts PrivilegeArray and PrivilegeArrayOutput values.
// You can construct a concrete instance of `PrivilegeArrayInput` via:
//
//	PrivilegeArray{ PrivilegeArgs{...} }
type PrivilegeArrayInput interface {
	pulumi.Input

	ToPrivilegeArrayOutput() PrivilegeArrayOutput
	ToPrivilegeArrayOutputWithContext(context.Context) PrivilegeArrayOutput
}

type PrivilegeArray []PrivilegeInput

func (PrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Privilege)(nil)).Elem()
}

func (i PrivilegeArray) ToPrivilegeArrayOutput() PrivilegeArrayOutput {
	return i.ToPrivilegeArrayOutputWithContext(context.Background())
}

func (i PrivilegeArray) ToPrivilegeArrayOutputWithContext(ctx context.Context) PrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegeArrayOutput)
}

// PrivilegeMapInput is an input type that accepts PrivilegeMap and PrivilegeMapOutput values.
// You can construct a concrete instance of `PrivilegeMapInput` via:
//
//	PrivilegeMap{ "key": PrivilegeArgs{...} }
type PrivilegeMapInput interface {
	pulumi.Input

	ToPrivilegeMapOutput() PrivilegeMapOutput
	ToPrivilegeMapOutputWithContext(context.Context) PrivilegeMapOutput
}

type PrivilegeMap map[string]PrivilegeInput

func (PrivilegeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Privilege)(nil)).Elem()
}

func (i PrivilegeMap) ToPrivilegeMapOutput() PrivilegeMapOutput {
	return i.ToPrivilegeMapOutputWithContext(context.Background())
}

func (i PrivilegeMap) ToPrivilegeMapOutputWithContext(ctx context.Context) PrivilegeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegeMapOutput)
}

type PrivilegeOutput struct{ *pulumi.OutputState }

func (PrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Privilege)(nil)).Elem()
}

func (o PrivilegeOutput) ToPrivilegeOutput() PrivilegeOutput {
	return o
}

func (o PrivilegeOutput) ToPrivilegeOutputWithContext(ctx context.Context) PrivilegeOutput {
	return o
}

// Name of the database (e.g. `my-db-name`).
func (o PrivilegeOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *Privilege) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

// UUID of the Database Instance.
func (o PrivilegeOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Privilege) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.
func (o PrivilegeOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v *Privilege) pulumi.StringOutput { return v.Permission }).(pulumi.StringOutput)
}

// `region`) The region in which the resource exists.
func (o PrivilegeOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Privilege) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Name of the user (e.g. `my-db-user`).
func (o PrivilegeOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *Privilege) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

type PrivilegeArrayOutput struct{ *pulumi.OutputState }

func (PrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Privilege)(nil)).Elem()
}

func (o PrivilegeArrayOutput) ToPrivilegeArrayOutput() PrivilegeArrayOutput {
	return o
}

func (o PrivilegeArrayOutput) ToPrivilegeArrayOutputWithContext(ctx context.Context) PrivilegeArrayOutput {
	return o
}

func (o PrivilegeArrayOutput) Index(i pulumi.IntInput) PrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Privilege {
		return vs[0].([]*Privilege)[vs[1].(int)]
	}).(PrivilegeOutput)
}

type PrivilegeMapOutput struct{ *pulumi.OutputState }

func (PrivilegeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Privilege)(nil)).Elem()
}

func (o PrivilegeMapOutput) ToPrivilegeMapOutput() PrivilegeMapOutput {
	return o
}

func (o PrivilegeMapOutput) ToPrivilegeMapOutputWithContext(ctx context.Context) PrivilegeMapOutput {
	return o
}

func (o PrivilegeMapOutput) MapIndex(k pulumi.StringInput) PrivilegeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Privilege {
		return vs[0].(map[string]*Privilege)[vs[1].(string)]
	}).(PrivilegeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrivilegeInput)(nil)).Elem(), &Privilege{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivilegeArrayInput)(nil)).Elem(), PrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivilegeMapInput)(nil)).Elem(), PrivilegeMap{})
	pulumi.RegisterOutputType(PrivilegeOutput{})
	pulumi.RegisterOutputType(PrivilegeArrayOutput{})
	pulumi.RegisterOutputType(PrivilegeMapOutput{})
}
