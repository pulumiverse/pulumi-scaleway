// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databases

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// The `databases.ServerlessDatabase` resource allows you to create and manage databases for Scaleway Serverless SQL Databases.
//
// Refer to the Serverless SQL Databases [documentation](https://www.scaleway.com/en/docs/serverless-sql-databases/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-databases/) for more information.
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/databases"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databases.NewServerlessDatabase(ctx, "database", &databases.ServerlessDatabaseArgs{
//				Name:   pulumi.String("my-database"),
//				MinCpu: pulumi.Int(0),
//				MaxCpu: pulumi.Int(8),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Serverless SQL Databases can be imported using the `{region}/{id}`, as shown below:
//
// bash
//
// ```sh
// $ pulumi import scaleway:databases/serverlessDatabase:ServerlessDatabase database fr-par/11111111-1111-1111-1111-111111111111
// ```
type ServerlessDatabase struct {
	pulumi.CustomResourceState

	// The endpoint of the database.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// The maximum number of CPU units for your database. Defaults to 15.
	MaxCpu pulumi.IntPtrOutput `pulumi:"maxCpu"`
	// The minimum number of CPU units for your database. Defaults to 0.
	MinCpu pulumi.IntPtrOutput `pulumi:"minCpu"`
	// The name of the database (e.g. `my-new-database`).
	//
	// > **Important:** Updates to the `name` argument will recreate the database.
	Name pulumi.StringOutput `pulumi:"name"`
	// The projectId you want to attach the resource to
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// `region`) The region in which the resource exists.
	Region pulumi.StringPtrOutput `pulumi:"region"`
}

// NewServerlessDatabase registers a new resource with the given unique name, arguments, and options.
func NewServerlessDatabase(ctx *pulumi.Context,
	name string, args *ServerlessDatabaseArgs, opts ...pulumi.ResourceOption) (*ServerlessDatabase, error) {
	if args == nil {
		args = &ServerlessDatabaseArgs{}
	}

	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/sdbDatabase:SdbDatabase"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerlessDatabase
	err := ctx.RegisterResource("scaleway:databases/serverlessDatabase:ServerlessDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerlessDatabase gets an existing ServerlessDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerlessDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerlessDatabaseState, opts ...pulumi.ResourceOption) (*ServerlessDatabase, error) {
	var resource ServerlessDatabase
	err := ctx.ReadResource("scaleway:databases/serverlessDatabase:ServerlessDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerlessDatabase resources.
type serverlessDatabaseState struct {
	// The endpoint of the database.
	Endpoint *string `pulumi:"endpoint"`
	// The maximum number of CPU units for your database. Defaults to 15.
	MaxCpu *int `pulumi:"maxCpu"`
	// The minimum number of CPU units for your database. Defaults to 0.
	MinCpu *int `pulumi:"minCpu"`
	// The name of the database (e.g. `my-new-database`).
	//
	// > **Important:** Updates to the `name` argument will recreate the database.
	Name *string `pulumi:"name"`
	// The projectId you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region in which the resource exists.
	Region *string `pulumi:"region"`
}

type ServerlessDatabaseState struct {
	// The endpoint of the database.
	Endpoint pulumi.StringPtrInput
	// The maximum number of CPU units for your database. Defaults to 15.
	MaxCpu pulumi.IntPtrInput
	// The minimum number of CPU units for your database. Defaults to 0.
	MinCpu pulumi.IntPtrInput
	// The name of the database (e.g. `my-new-database`).
	//
	// > **Important:** Updates to the `name` argument will recreate the database.
	Name pulumi.StringPtrInput
	// The projectId you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// `region`) The region in which the resource exists.
	Region pulumi.StringPtrInput
}

func (ServerlessDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessDatabaseState)(nil)).Elem()
}

type serverlessDatabaseArgs struct {
	// The maximum number of CPU units for your database. Defaults to 15.
	MaxCpu *int `pulumi:"maxCpu"`
	// The minimum number of CPU units for your database. Defaults to 0.
	MinCpu *int `pulumi:"minCpu"`
	// The name of the database (e.g. `my-new-database`).
	//
	// > **Important:** Updates to the `name` argument will recreate the database.
	Name *string `pulumi:"name"`
	// The projectId you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region in which the resource exists.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a ServerlessDatabase resource.
type ServerlessDatabaseArgs struct {
	// The maximum number of CPU units for your database. Defaults to 15.
	MaxCpu pulumi.IntPtrInput
	// The minimum number of CPU units for your database. Defaults to 0.
	MinCpu pulumi.IntPtrInput
	// The name of the database (e.g. `my-new-database`).
	//
	// > **Important:** Updates to the `name` argument will recreate the database.
	Name pulumi.StringPtrInput
	// The projectId you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// `region`) The region in which the resource exists.
	Region pulumi.StringPtrInput
}

func (ServerlessDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessDatabaseArgs)(nil)).Elem()
}

type ServerlessDatabaseInput interface {
	pulumi.Input

	ToServerlessDatabaseOutput() ServerlessDatabaseOutput
	ToServerlessDatabaseOutputWithContext(ctx context.Context) ServerlessDatabaseOutput
}

func (*ServerlessDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessDatabase)(nil)).Elem()
}

func (i *ServerlessDatabase) ToServerlessDatabaseOutput() ServerlessDatabaseOutput {
	return i.ToServerlessDatabaseOutputWithContext(context.Background())
}

func (i *ServerlessDatabase) ToServerlessDatabaseOutputWithContext(ctx context.Context) ServerlessDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessDatabaseOutput)
}

// ServerlessDatabaseArrayInput is an input type that accepts ServerlessDatabaseArray and ServerlessDatabaseArrayOutput values.
// You can construct a concrete instance of `ServerlessDatabaseArrayInput` via:
//
//	ServerlessDatabaseArray{ ServerlessDatabaseArgs{...} }
type ServerlessDatabaseArrayInput interface {
	pulumi.Input

	ToServerlessDatabaseArrayOutput() ServerlessDatabaseArrayOutput
	ToServerlessDatabaseArrayOutputWithContext(context.Context) ServerlessDatabaseArrayOutput
}

type ServerlessDatabaseArray []ServerlessDatabaseInput

func (ServerlessDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerlessDatabase)(nil)).Elem()
}

func (i ServerlessDatabaseArray) ToServerlessDatabaseArrayOutput() ServerlessDatabaseArrayOutput {
	return i.ToServerlessDatabaseArrayOutputWithContext(context.Background())
}

func (i ServerlessDatabaseArray) ToServerlessDatabaseArrayOutputWithContext(ctx context.Context) ServerlessDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessDatabaseArrayOutput)
}

// ServerlessDatabaseMapInput is an input type that accepts ServerlessDatabaseMap and ServerlessDatabaseMapOutput values.
// You can construct a concrete instance of `ServerlessDatabaseMapInput` via:
//
//	ServerlessDatabaseMap{ "key": ServerlessDatabaseArgs{...} }
type ServerlessDatabaseMapInput interface {
	pulumi.Input

	ToServerlessDatabaseMapOutput() ServerlessDatabaseMapOutput
	ToServerlessDatabaseMapOutputWithContext(context.Context) ServerlessDatabaseMapOutput
}

type ServerlessDatabaseMap map[string]ServerlessDatabaseInput

func (ServerlessDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerlessDatabase)(nil)).Elem()
}

func (i ServerlessDatabaseMap) ToServerlessDatabaseMapOutput() ServerlessDatabaseMapOutput {
	return i.ToServerlessDatabaseMapOutputWithContext(context.Background())
}

func (i ServerlessDatabaseMap) ToServerlessDatabaseMapOutputWithContext(ctx context.Context) ServerlessDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessDatabaseMapOutput)
}

type ServerlessDatabaseOutput struct{ *pulumi.OutputState }

func (ServerlessDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessDatabase)(nil)).Elem()
}

func (o ServerlessDatabaseOutput) ToServerlessDatabaseOutput() ServerlessDatabaseOutput {
	return o
}

func (o ServerlessDatabaseOutput) ToServerlessDatabaseOutputWithContext(ctx context.Context) ServerlessDatabaseOutput {
	return o
}

// The endpoint of the database.
func (o ServerlessDatabaseOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessDatabase) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// The maximum number of CPU units for your database. Defaults to 15.
func (o ServerlessDatabaseOutput) MaxCpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerlessDatabase) pulumi.IntPtrOutput { return v.MaxCpu }).(pulumi.IntPtrOutput)
}

// The minimum number of CPU units for your database. Defaults to 0.
func (o ServerlessDatabaseOutput) MinCpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerlessDatabase) pulumi.IntPtrOutput { return v.MinCpu }).(pulumi.IntPtrOutput)
}

// The name of the database (e.g. `my-new-database`).
//
// > **Important:** Updates to the `name` argument will recreate the database.
func (o ServerlessDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The projectId you want to attach the resource to
func (o ServerlessDatabaseOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessDatabase) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// `region`) The region in which the resource exists.
func (o ServerlessDatabaseOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessDatabase) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

type ServerlessDatabaseArrayOutput struct{ *pulumi.OutputState }

func (ServerlessDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerlessDatabase)(nil)).Elem()
}

func (o ServerlessDatabaseArrayOutput) ToServerlessDatabaseArrayOutput() ServerlessDatabaseArrayOutput {
	return o
}

func (o ServerlessDatabaseArrayOutput) ToServerlessDatabaseArrayOutputWithContext(ctx context.Context) ServerlessDatabaseArrayOutput {
	return o
}

func (o ServerlessDatabaseArrayOutput) Index(i pulumi.IntInput) ServerlessDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerlessDatabase {
		return vs[0].([]*ServerlessDatabase)[vs[1].(int)]
	}).(ServerlessDatabaseOutput)
}

type ServerlessDatabaseMapOutput struct{ *pulumi.OutputState }

func (ServerlessDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerlessDatabase)(nil)).Elem()
}

func (o ServerlessDatabaseMapOutput) ToServerlessDatabaseMapOutput() ServerlessDatabaseMapOutput {
	return o
}

func (o ServerlessDatabaseMapOutput) ToServerlessDatabaseMapOutputWithContext(ctx context.Context) ServerlessDatabaseMapOutput {
	return o
}

func (o ServerlessDatabaseMapOutput) MapIndex(k pulumi.StringInput) ServerlessDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerlessDatabase {
		return vs[0].(map[string]*ServerlessDatabase)[vs[1].(string)]
	}).(ServerlessDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessDatabaseInput)(nil)).Elem(), &ServerlessDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessDatabaseArrayInput)(nil)).Elem(), ServerlessDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessDatabaseMapInput)(nil)).Elem(), ServerlessDatabaseMap{})
	pulumi.RegisterOutputType(ServerlessDatabaseOutput{})
	pulumi.RegisterOutputType(ServerlessDatabaseArrayOutput{})
	pulumi.RegisterOutputType(ServerlessDatabaseMapOutput{})
}
