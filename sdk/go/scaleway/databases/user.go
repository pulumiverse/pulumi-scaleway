// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databases

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages database users.
// For more information refer to the [API documentation](https://www.scaleway.com/en/developers/api/managed-database-postgre-mysql/).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/databases"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := databases.NewInstance(ctx, "main", &databases.InstanceArgs{
//				Name:          pulumi.String("test-rdb"),
//				NodeType:      pulumi.String("DB-DEV-S"),
//				Engine:        pulumi.String("PostgreSQL-15"),
//				IsHaCluster:   pulumi.Bool(true),
//				DisableBackup: pulumi.Bool(true),
//				UserName:      pulumi.String("my_initial_user"),
//				Password:      pulumi.String("thiZ_is_v&ry_s3cret"),
//			})
//			if err != nil {
//				return err
//			}
//			dbPassword, err := random.NewRandomPassword(ctx, "db_password", &random.RandomPasswordArgs{
//				Length:  pulumi.Int(16),
//				Special: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databases.NewUser(ctx, "db_admin", &databases.UserArgs{
//				InstanceId: main.ID(),
//				Name:       pulumi.String("devtools"),
//				Password:   dbPassword.Result,
//				IsAdmin:    pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Database users can be imported using `{region}/{instance_id}/{user_name}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:databases/user:User admin fr-par/11111111-1111-1111-1111-111111111111/admin
// ```
type User struct {
	pulumi.CustomResourceState

	// UUID of the Database Instance.
	//
	// > **Important:** Updates to `instanceId` will recreate the database user.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Grant admin permissions to the database user.
	IsAdmin pulumi.BoolPtrOutput `pulumi:"isAdmin"`
	// database user name.
	//
	// > **Important:** Updates to `name` will recreate the database user.
	Name pulumi.StringOutput `pulumi:"name"`
	// database user password.
	Password pulumi.StringOutput `pulumi:"password"`
	// The Scaleway region this resource resides in.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/databaseUser:DatabaseUser"),
		},
	})
	opts = append(opts, aliases)
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("scaleway:databases/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("scaleway:databases/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// UUID of the Database Instance.
	//
	// > **Important:** Updates to `instanceId` will recreate the database user.
	InstanceId *string `pulumi:"instanceId"`
	// Grant admin permissions to the database user.
	IsAdmin *bool `pulumi:"isAdmin"`
	// database user name.
	//
	// > **Important:** Updates to `name` will recreate the database user.
	Name *string `pulumi:"name"`
	// database user password.
	Password *string `pulumi:"password"`
	// The Scaleway region this resource resides in.
	Region *string `pulumi:"region"`
}

type UserState struct {
	// UUID of the Database Instance.
	//
	// > **Important:** Updates to `instanceId` will recreate the database user.
	InstanceId pulumi.StringPtrInput
	// Grant admin permissions to the database user.
	IsAdmin pulumi.BoolPtrInput
	// database user name.
	//
	// > **Important:** Updates to `name` will recreate the database user.
	Name pulumi.StringPtrInput
	// database user password.
	Password pulumi.StringPtrInput
	// The Scaleway region this resource resides in.
	Region pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// UUID of the Database Instance.
	//
	// > **Important:** Updates to `instanceId` will recreate the database user.
	InstanceId string `pulumi:"instanceId"`
	// Grant admin permissions to the database user.
	IsAdmin *bool `pulumi:"isAdmin"`
	// database user name.
	//
	// > **Important:** Updates to `name` will recreate the database user.
	Name *string `pulumi:"name"`
	// database user password.
	Password string `pulumi:"password"`
	// The Scaleway region this resource resides in.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// UUID of the Database Instance.
	//
	// > **Important:** Updates to `instanceId` will recreate the database user.
	InstanceId pulumi.StringInput
	// Grant admin permissions to the database user.
	IsAdmin pulumi.BoolPtrInput
	// database user name.
	//
	// > **Important:** Updates to `name` will recreate the database user.
	Name pulumi.StringPtrInput
	// database user password.
	Password pulumi.StringInput
	// The Scaleway region this resource resides in.
	Region pulumi.StringPtrInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

// UUID of the Database Instance.
//
// > **Important:** Updates to `instanceId` will recreate the database user.
func (o UserOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Grant admin permissions to the database user.
func (o UserOutput) IsAdmin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.IsAdmin }).(pulumi.BoolPtrOutput)
}

// database user name.
//
// > **Important:** Updates to `name` will recreate the database user.
func (o UserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// database user password.
func (o UserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The Scaleway region this resource resides in.
func (o UserOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
