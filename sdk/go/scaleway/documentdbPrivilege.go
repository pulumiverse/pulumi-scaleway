// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Create and manage Scaleway DocumentDB database privilege.
// For more information, see [the documentation](https://www.scaleway.com/en/developers/api/document_db/).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewDocumentdbPrivilege(ctx, "main", &scaleway.DocumentdbPrivilegeArgs{
//				DatabaseName: pulumi.String("my-db-name"),
//				InstanceId:   pulumi.String("11111111-1111-1111-1111-111111111111"),
//				Permission:   pulumi.String("all"),
//				UserName:     pulumi.String("my-db-user"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The user privileges can be imported using the `{region}/{instance_id}/{database_name}/{user_name}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/documentdbPrivilege:DocumentdbPrivilege o fr-par/11111111-1111-1111-1111-111111111111/database_name/foo
// ```
type DocumentdbPrivilege struct {
	pulumi.CustomResourceState

	// Name of the database (e.g. `my-db-name`).
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// UUID of the rdb instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.
	Permission pulumi.StringOutput `pulumi:"permission"`
	// `region`) The region in which the resource exists.
	Region pulumi.StringOutput `pulumi:"region"`
	// Name of the user (e.g. `my-db-user`).
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewDocumentdbPrivilege registers a new resource with the given unique name, arguments, and options.
func NewDocumentdbPrivilege(ctx *pulumi.Context,
	name string, args *DocumentdbPrivilegeArgs, opts ...pulumi.ResourceOption) (*DocumentdbPrivilege, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Permission == nil {
		return nil, errors.New("invalid value for required argument 'Permission'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DocumentdbPrivilege
	err := ctx.RegisterResource("scaleway:index/documentdbPrivilege:DocumentdbPrivilege", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDocumentdbPrivilege gets an existing DocumentdbPrivilege resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDocumentdbPrivilege(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DocumentdbPrivilegeState, opts ...pulumi.ResourceOption) (*DocumentdbPrivilege, error) {
	var resource DocumentdbPrivilege
	err := ctx.ReadResource("scaleway:index/documentdbPrivilege:DocumentdbPrivilege", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DocumentdbPrivilege resources.
type documentdbPrivilegeState struct {
	// Name of the database (e.g. `my-db-name`).
	DatabaseName *string `pulumi:"databaseName"`
	// UUID of the rdb instance.
	InstanceId *string `pulumi:"instanceId"`
	// Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.
	Permission *string `pulumi:"permission"`
	// `region`) The region in which the resource exists.
	Region *string `pulumi:"region"`
	// Name of the user (e.g. `my-db-user`).
	UserName *string `pulumi:"userName"`
}

type DocumentdbPrivilegeState struct {
	// Name of the database (e.g. `my-db-name`).
	DatabaseName pulumi.StringPtrInput
	// UUID of the rdb instance.
	InstanceId pulumi.StringPtrInput
	// Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.
	Permission pulumi.StringPtrInput
	// `region`) The region in which the resource exists.
	Region pulumi.StringPtrInput
	// Name of the user (e.g. `my-db-user`).
	UserName pulumi.StringPtrInput
}

func (DocumentdbPrivilegeState) ElementType() reflect.Type {
	return reflect.TypeOf((*documentdbPrivilegeState)(nil)).Elem()
}

type documentdbPrivilegeArgs struct {
	// Name of the database (e.g. `my-db-name`).
	DatabaseName string `pulumi:"databaseName"`
	// UUID of the rdb instance.
	InstanceId string `pulumi:"instanceId"`
	// Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.
	Permission string `pulumi:"permission"`
	// `region`) The region in which the resource exists.
	Region *string `pulumi:"region"`
	// Name of the user (e.g. `my-db-user`).
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a DocumentdbPrivilege resource.
type DocumentdbPrivilegeArgs struct {
	// Name of the database (e.g. `my-db-name`).
	DatabaseName pulumi.StringInput
	// UUID of the rdb instance.
	InstanceId pulumi.StringInput
	// Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.
	Permission pulumi.StringInput
	// `region`) The region in which the resource exists.
	Region pulumi.StringPtrInput
	// Name of the user (e.g. `my-db-user`).
	UserName pulumi.StringInput
}

func (DocumentdbPrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*documentdbPrivilegeArgs)(nil)).Elem()
}

type DocumentdbPrivilegeInput interface {
	pulumi.Input

	ToDocumentdbPrivilegeOutput() DocumentdbPrivilegeOutput
	ToDocumentdbPrivilegeOutputWithContext(ctx context.Context) DocumentdbPrivilegeOutput
}

func (*DocumentdbPrivilege) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentdbPrivilege)(nil)).Elem()
}

func (i *DocumentdbPrivilege) ToDocumentdbPrivilegeOutput() DocumentdbPrivilegeOutput {
	return i.ToDocumentdbPrivilegeOutputWithContext(context.Background())
}

func (i *DocumentdbPrivilege) ToDocumentdbPrivilegeOutputWithContext(ctx context.Context) DocumentdbPrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentdbPrivilegeOutput)
}

// DocumentdbPrivilegeArrayInput is an input type that accepts DocumentdbPrivilegeArray and DocumentdbPrivilegeArrayOutput values.
// You can construct a concrete instance of `DocumentdbPrivilegeArrayInput` via:
//
//	DocumentdbPrivilegeArray{ DocumentdbPrivilegeArgs{...} }
type DocumentdbPrivilegeArrayInput interface {
	pulumi.Input

	ToDocumentdbPrivilegeArrayOutput() DocumentdbPrivilegeArrayOutput
	ToDocumentdbPrivilegeArrayOutputWithContext(context.Context) DocumentdbPrivilegeArrayOutput
}

type DocumentdbPrivilegeArray []DocumentdbPrivilegeInput

func (DocumentdbPrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DocumentdbPrivilege)(nil)).Elem()
}

func (i DocumentdbPrivilegeArray) ToDocumentdbPrivilegeArrayOutput() DocumentdbPrivilegeArrayOutput {
	return i.ToDocumentdbPrivilegeArrayOutputWithContext(context.Background())
}

func (i DocumentdbPrivilegeArray) ToDocumentdbPrivilegeArrayOutputWithContext(ctx context.Context) DocumentdbPrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentdbPrivilegeArrayOutput)
}

// DocumentdbPrivilegeMapInput is an input type that accepts DocumentdbPrivilegeMap and DocumentdbPrivilegeMapOutput values.
// You can construct a concrete instance of `DocumentdbPrivilegeMapInput` via:
//
//	DocumentdbPrivilegeMap{ "key": DocumentdbPrivilegeArgs{...} }
type DocumentdbPrivilegeMapInput interface {
	pulumi.Input

	ToDocumentdbPrivilegeMapOutput() DocumentdbPrivilegeMapOutput
	ToDocumentdbPrivilegeMapOutputWithContext(context.Context) DocumentdbPrivilegeMapOutput
}

type DocumentdbPrivilegeMap map[string]DocumentdbPrivilegeInput

func (DocumentdbPrivilegeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DocumentdbPrivilege)(nil)).Elem()
}

func (i DocumentdbPrivilegeMap) ToDocumentdbPrivilegeMapOutput() DocumentdbPrivilegeMapOutput {
	return i.ToDocumentdbPrivilegeMapOutputWithContext(context.Background())
}

func (i DocumentdbPrivilegeMap) ToDocumentdbPrivilegeMapOutputWithContext(ctx context.Context) DocumentdbPrivilegeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentdbPrivilegeMapOutput)
}

type DocumentdbPrivilegeOutput struct{ *pulumi.OutputState }

func (DocumentdbPrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentdbPrivilege)(nil)).Elem()
}

func (o DocumentdbPrivilegeOutput) ToDocumentdbPrivilegeOutput() DocumentdbPrivilegeOutput {
	return o
}

func (o DocumentdbPrivilegeOutput) ToDocumentdbPrivilegeOutputWithContext(ctx context.Context) DocumentdbPrivilegeOutput {
	return o
}

// Name of the database (e.g. `my-db-name`).
func (o DocumentdbPrivilegeOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentdbPrivilege) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

// UUID of the rdb instance.
func (o DocumentdbPrivilegeOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentdbPrivilege) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Permission to set. Valid values are `readonly`, `readwrite`, `all`, `custom` and `none`.
func (o DocumentdbPrivilegeOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentdbPrivilege) pulumi.StringOutput { return v.Permission }).(pulumi.StringOutput)
}

// `region`) The region in which the resource exists.
func (o DocumentdbPrivilegeOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentdbPrivilege) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Name of the user (e.g. `my-db-user`).
func (o DocumentdbPrivilegeOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentdbPrivilege) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

type DocumentdbPrivilegeArrayOutput struct{ *pulumi.OutputState }

func (DocumentdbPrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DocumentdbPrivilege)(nil)).Elem()
}

func (o DocumentdbPrivilegeArrayOutput) ToDocumentdbPrivilegeArrayOutput() DocumentdbPrivilegeArrayOutput {
	return o
}

func (o DocumentdbPrivilegeArrayOutput) ToDocumentdbPrivilegeArrayOutputWithContext(ctx context.Context) DocumentdbPrivilegeArrayOutput {
	return o
}

func (o DocumentdbPrivilegeArrayOutput) Index(i pulumi.IntInput) DocumentdbPrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DocumentdbPrivilege {
		return vs[0].([]*DocumentdbPrivilege)[vs[1].(int)]
	}).(DocumentdbPrivilegeOutput)
}

type DocumentdbPrivilegeMapOutput struct{ *pulumi.OutputState }

func (DocumentdbPrivilegeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DocumentdbPrivilege)(nil)).Elem()
}

func (o DocumentdbPrivilegeMapOutput) ToDocumentdbPrivilegeMapOutput() DocumentdbPrivilegeMapOutput {
	return o
}

func (o DocumentdbPrivilegeMapOutput) ToDocumentdbPrivilegeMapOutputWithContext(ctx context.Context) DocumentdbPrivilegeMapOutput {
	return o
}

func (o DocumentdbPrivilegeMapOutput) MapIndex(k pulumi.StringInput) DocumentdbPrivilegeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DocumentdbPrivilege {
		return vs[0].(map[string]*DocumentdbPrivilege)[vs[1].(string)]
	}).(DocumentdbPrivilegeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentdbPrivilegeInput)(nil)).Elem(), &DocumentdbPrivilege{})
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentdbPrivilegeArrayInput)(nil)).Elem(), DocumentdbPrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentdbPrivilegeMapInput)(nil)).Elem(), DocumentdbPrivilegeMap{})
	pulumi.RegisterOutputType(DocumentdbPrivilegeOutput{})
	pulumi.RegisterOutputType(DocumentdbPrivilegeArrayOutput{})
	pulumi.RegisterOutputType(DocumentdbPrivilegeMapOutput{})
}
