// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package domain

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

var _ = internal.GetEnvOrDefault

type RecordGeoIp struct {
	// The list of matches
	Matches []RecordGeoIpMatch `pulumi:"matches"`
}

// RecordGeoIpInput is an input type that accepts RecordGeoIpArgs and RecordGeoIpOutput values.
// You can construct a concrete instance of `RecordGeoIpInput` via:
//
//	RecordGeoIpArgs{...}
type RecordGeoIpInput interface {
	pulumi.Input

	ToRecordGeoIpOutput() RecordGeoIpOutput
	ToRecordGeoIpOutputWithContext(context.Context) RecordGeoIpOutput
}

type RecordGeoIpArgs struct {
	// The list of matches
	Matches RecordGeoIpMatchArrayInput `pulumi:"matches"`
}

func (RecordGeoIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordGeoIp)(nil)).Elem()
}

func (i RecordGeoIpArgs) ToRecordGeoIpOutput() RecordGeoIpOutput {
	return i.ToRecordGeoIpOutputWithContext(context.Background())
}

func (i RecordGeoIpArgs) ToRecordGeoIpOutputWithContext(ctx context.Context) RecordGeoIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordGeoIpOutput)
}

func (i RecordGeoIpArgs) ToRecordGeoIpPtrOutput() RecordGeoIpPtrOutput {
	return i.ToRecordGeoIpPtrOutputWithContext(context.Background())
}

func (i RecordGeoIpArgs) ToRecordGeoIpPtrOutputWithContext(ctx context.Context) RecordGeoIpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordGeoIpOutput).ToRecordGeoIpPtrOutputWithContext(ctx)
}

// RecordGeoIpPtrInput is an input type that accepts RecordGeoIpArgs, RecordGeoIpPtr and RecordGeoIpPtrOutput values.
// You can construct a concrete instance of `RecordGeoIpPtrInput` via:
//
//	        RecordGeoIpArgs{...}
//
//	or:
//
//	        nil
type RecordGeoIpPtrInput interface {
	pulumi.Input

	ToRecordGeoIpPtrOutput() RecordGeoIpPtrOutput
	ToRecordGeoIpPtrOutputWithContext(context.Context) RecordGeoIpPtrOutput
}

type recordGeoIpPtrType RecordGeoIpArgs

func RecordGeoIpPtr(v *RecordGeoIpArgs) RecordGeoIpPtrInput {
	return (*recordGeoIpPtrType)(v)
}

func (*recordGeoIpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordGeoIp)(nil)).Elem()
}

func (i *recordGeoIpPtrType) ToRecordGeoIpPtrOutput() RecordGeoIpPtrOutput {
	return i.ToRecordGeoIpPtrOutputWithContext(context.Background())
}

func (i *recordGeoIpPtrType) ToRecordGeoIpPtrOutputWithContext(ctx context.Context) RecordGeoIpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordGeoIpPtrOutput)
}

type RecordGeoIpOutput struct{ *pulumi.OutputState }

func (RecordGeoIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordGeoIp)(nil)).Elem()
}

func (o RecordGeoIpOutput) ToRecordGeoIpOutput() RecordGeoIpOutput {
	return o
}

func (o RecordGeoIpOutput) ToRecordGeoIpOutputWithContext(ctx context.Context) RecordGeoIpOutput {
	return o
}

func (o RecordGeoIpOutput) ToRecordGeoIpPtrOutput() RecordGeoIpPtrOutput {
	return o.ToRecordGeoIpPtrOutputWithContext(context.Background())
}

func (o RecordGeoIpOutput) ToRecordGeoIpPtrOutputWithContext(ctx context.Context) RecordGeoIpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordGeoIp) *RecordGeoIp {
		return &v
	}).(RecordGeoIpPtrOutput)
}

// The list of matches
func (o RecordGeoIpOutput) Matches() RecordGeoIpMatchArrayOutput {
	return o.ApplyT(func(v RecordGeoIp) []RecordGeoIpMatch { return v.Matches }).(RecordGeoIpMatchArrayOutput)
}

type RecordGeoIpPtrOutput struct{ *pulumi.OutputState }

func (RecordGeoIpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordGeoIp)(nil)).Elem()
}

func (o RecordGeoIpPtrOutput) ToRecordGeoIpPtrOutput() RecordGeoIpPtrOutput {
	return o
}

func (o RecordGeoIpPtrOutput) ToRecordGeoIpPtrOutputWithContext(ctx context.Context) RecordGeoIpPtrOutput {
	return o
}

func (o RecordGeoIpPtrOutput) Elem() RecordGeoIpOutput {
	return o.ApplyT(func(v *RecordGeoIp) RecordGeoIp {
		if v != nil {
			return *v
		}
		var ret RecordGeoIp
		return ret
	}).(RecordGeoIpOutput)
}

// The list of matches
func (o RecordGeoIpPtrOutput) Matches() RecordGeoIpMatchArrayOutput {
	return o.ApplyT(func(v *RecordGeoIp) []RecordGeoIpMatch {
		if v == nil {
			return nil
		}
		return v.Matches
	}).(RecordGeoIpMatchArrayOutput)
}

type RecordGeoIpMatch struct {
	// List of continents (eg: EU for Europe, NA for North America, AS for Asia...). List of all continents code: https://api.scaleway.com/domain-private/v2beta1/continents
	Continents []string `pulumi:"continents"`
	// List of countries (eg: FR for France, US for the United States, GB for Great Britain...). List of all countries code: https://api.scaleway.com/domain-private/v2beta1/countries
	Countries []string `pulumi:"countries"`
	// The content of the record (an IPv4 for an `A` record, a string for a `TXT` record, etc.).
	Data string `pulumi:"data"`
}

// RecordGeoIpMatchInput is an input type that accepts RecordGeoIpMatchArgs and RecordGeoIpMatchOutput values.
// You can construct a concrete instance of `RecordGeoIpMatchInput` via:
//
//	RecordGeoIpMatchArgs{...}
type RecordGeoIpMatchInput interface {
	pulumi.Input

	ToRecordGeoIpMatchOutput() RecordGeoIpMatchOutput
	ToRecordGeoIpMatchOutputWithContext(context.Context) RecordGeoIpMatchOutput
}

type RecordGeoIpMatchArgs struct {
	// List of continents (eg: EU for Europe, NA for North America, AS for Asia...). List of all continents code: https://api.scaleway.com/domain-private/v2beta1/continents
	Continents pulumi.StringArrayInput `pulumi:"continents"`
	// List of countries (eg: FR for France, US for the United States, GB for Great Britain...). List of all countries code: https://api.scaleway.com/domain-private/v2beta1/countries
	Countries pulumi.StringArrayInput `pulumi:"countries"`
	// The content of the record (an IPv4 for an `A` record, a string for a `TXT` record, etc.).
	Data pulumi.StringInput `pulumi:"data"`
}

func (RecordGeoIpMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordGeoIpMatch)(nil)).Elem()
}

func (i RecordGeoIpMatchArgs) ToRecordGeoIpMatchOutput() RecordGeoIpMatchOutput {
	return i.ToRecordGeoIpMatchOutputWithContext(context.Background())
}

func (i RecordGeoIpMatchArgs) ToRecordGeoIpMatchOutputWithContext(ctx context.Context) RecordGeoIpMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordGeoIpMatchOutput)
}

// RecordGeoIpMatchArrayInput is an input type that accepts RecordGeoIpMatchArray and RecordGeoIpMatchArrayOutput values.
// You can construct a concrete instance of `RecordGeoIpMatchArrayInput` via:
//
//	RecordGeoIpMatchArray{ RecordGeoIpMatchArgs{...} }
type RecordGeoIpMatchArrayInput interface {
	pulumi.Input

	ToRecordGeoIpMatchArrayOutput() RecordGeoIpMatchArrayOutput
	ToRecordGeoIpMatchArrayOutputWithContext(context.Context) RecordGeoIpMatchArrayOutput
}

type RecordGeoIpMatchArray []RecordGeoIpMatchInput

func (RecordGeoIpMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordGeoIpMatch)(nil)).Elem()
}

func (i RecordGeoIpMatchArray) ToRecordGeoIpMatchArrayOutput() RecordGeoIpMatchArrayOutput {
	return i.ToRecordGeoIpMatchArrayOutputWithContext(context.Background())
}

func (i RecordGeoIpMatchArray) ToRecordGeoIpMatchArrayOutputWithContext(ctx context.Context) RecordGeoIpMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordGeoIpMatchArrayOutput)
}

type RecordGeoIpMatchOutput struct{ *pulumi.OutputState }

func (RecordGeoIpMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordGeoIpMatch)(nil)).Elem()
}

func (o RecordGeoIpMatchOutput) ToRecordGeoIpMatchOutput() RecordGeoIpMatchOutput {
	return o
}

func (o RecordGeoIpMatchOutput) ToRecordGeoIpMatchOutputWithContext(ctx context.Context) RecordGeoIpMatchOutput {
	return o
}

// List of continents (eg: EU for Europe, NA for North America, AS for Asia...). List of all continents code: https://api.scaleway.com/domain-private/v2beta1/continents
func (o RecordGeoIpMatchOutput) Continents() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RecordGeoIpMatch) []string { return v.Continents }).(pulumi.StringArrayOutput)
}

// List of countries (eg: FR for France, US for the United States, GB for Great Britain...). List of all countries code: https://api.scaleway.com/domain-private/v2beta1/countries
func (o RecordGeoIpMatchOutput) Countries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RecordGeoIpMatch) []string { return v.Countries }).(pulumi.StringArrayOutput)
}

// The content of the record (an IPv4 for an `A` record, a string for a `TXT` record, etc.).
func (o RecordGeoIpMatchOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v RecordGeoIpMatch) string { return v.Data }).(pulumi.StringOutput)
}

type RecordGeoIpMatchArrayOutput struct{ *pulumi.OutputState }

func (RecordGeoIpMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordGeoIpMatch)(nil)).Elem()
}

func (o RecordGeoIpMatchArrayOutput) ToRecordGeoIpMatchArrayOutput() RecordGeoIpMatchArrayOutput {
	return o
}

func (o RecordGeoIpMatchArrayOutput) ToRecordGeoIpMatchArrayOutputWithContext(ctx context.Context) RecordGeoIpMatchArrayOutput {
	return o
}

func (o RecordGeoIpMatchArrayOutput) Index(i pulumi.IntInput) RecordGeoIpMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordGeoIpMatch {
		return vs[0].([]RecordGeoIpMatch)[vs[1].(int)]
	}).(RecordGeoIpMatchOutput)
}

type RecordHttpService struct {
	// IPs to check
	Ips []string `pulumi:"ips"`
	// Text to search
	MustContain string `pulumi:"mustContain"`
	// Strategy to return an IP from the IPs list
	Strategy string `pulumi:"strategy"`
	// URL to match the mustContain text to validate an IP
	Url string `pulumi:"url"`
	// User-agent used when checking the URL
	UserAgent *string `pulumi:"userAgent"`
}

// RecordHttpServiceInput is an input type that accepts RecordHttpServiceArgs and RecordHttpServiceOutput values.
// You can construct a concrete instance of `RecordHttpServiceInput` via:
//
//	RecordHttpServiceArgs{...}
type RecordHttpServiceInput interface {
	pulumi.Input

	ToRecordHttpServiceOutput() RecordHttpServiceOutput
	ToRecordHttpServiceOutputWithContext(context.Context) RecordHttpServiceOutput
}

type RecordHttpServiceArgs struct {
	// IPs to check
	Ips pulumi.StringArrayInput `pulumi:"ips"`
	// Text to search
	MustContain pulumi.StringInput `pulumi:"mustContain"`
	// Strategy to return an IP from the IPs list
	Strategy pulumi.StringInput `pulumi:"strategy"`
	// URL to match the mustContain text to validate an IP
	Url pulumi.StringInput `pulumi:"url"`
	// User-agent used when checking the URL
	UserAgent pulumi.StringPtrInput `pulumi:"userAgent"`
}

func (RecordHttpServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordHttpService)(nil)).Elem()
}

func (i RecordHttpServiceArgs) ToRecordHttpServiceOutput() RecordHttpServiceOutput {
	return i.ToRecordHttpServiceOutputWithContext(context.Background())
}

func (i RecordHttpServiceArgs) ToRecordHttpServiceOutputWithContext(ctx context.Context) RecordHttpServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordHttpServiceOutput)
}

func (i RecordHttpServiceArgs) ToRecordHttpServicePtrOutput() RecordHttpServicePtrOutput {
	return i.ToRecordHttpServicePtrOutputWithContext(context.Background())
}

func (i RecordHttpServiceArgs) ToRecordHttpServicePtrOutputWithContext(ctx context.Context) RecordHttpServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordHttpServiceOutput).ToRecordHttpServicePtrOutputWithContext(ctx)
}

// RecordHttpServicePtrInput is an input type that accepts RecordHttpServiceArgs, RecordHttpServicePtr and RecordHttpServicePtrOutput values.
// You can construct a concrete instance of `RecordHttpServicePtrInput` via:
//
//	        RecordHttpServiceArgs{...}
//
//	or:
//
//	        nil
type RecordHttpServicePtrInput interface {
	pulumi.Input

	ToRecordHttpServicePtrOutput() RecordHttpServicePtrOutput
	ToRecordHttpServicePtrOutputWithContext(context.Context) RecordHttpServicePtrOutput
}

type recordHttpServicePtrType RecordHttpServiceArgs

func RecordHttpServicePtr(v *RecordHttpServiceArgs) RecordHttpServicePtrInput {
	return (*recordHttpServicePtrType)(v)
}

func (*recordHttpServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordHttpService)(nil)).Elem()
}

func (i *recordHttpServicePtrType) ToRecordHttpServicePtrOutput() RecordHttpServicePtrOutput {
	return i.ToRecordHttpServicePtrOutputWithContext(context.Background())
}

func (i *recordHttpServicePtrType) ToRecordHttpServicePtrOutputWithContext(ctx context.Context) RecordHttpServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordHttpServicePtrOutput)
}

type RecordHttpServiceOutput struct{ *pulumi.OutputState }

func (RecordHttpServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordHttpService)(nil)).Elem()
}

func (o RecordHttpServiceOutput) ToRecordHttpServiceOutput() RecordHttpServiceOutput {
	return o
}

func (o RecordHttpServiceOutput) ToRecordHttpServiceOutputWithContext(ctx context.Context) RecordHttpServiceOutput {
	return o
}

func (o RecordHttpServiceOutput) ToRecordHttpServicePtrOutput() RecordHttpServicePtrOutput {
	return o.ToRecordHttpServicePtrOutputWithContext(context.Background())
}

func (o RecordHttpServiceOutput) ToRecordHttpServicePtrOutputWithContext(ctx context.Context) RecordHttpServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordHttpService) *RecordHttpService {
		return &v
	}).(RecordHttpServicePtrOutput)
}

// IPs to check
func (o RecordHttpServiceOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RecordHttpService) []string { return v.Ips }).(pulumi.StringArrayOutput)
}

// Text to search
func (o RecordHttpServiceOutput) MustContain() pulumi.StringOutput {
	return o.ApplyT(func(v RecordHttpService) string { return v.MustContain }).(pulumi.StringOutput)
}

// Strategy to return an IP from the IPs list
func (o RecordHttpServiceOutput) Strategy() pulumi.StringOutput {
	return o.ApplyT(func(v RecordHttpService) string { return v.Strategy }).(pulumi.StringOutput)
}

// URL to match the mustContain text to validate an IP
func (o RecordHttpServiceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v RecordHttpService) string { return v.Url }).(pulumi.StringOutput)
}

// User-agent used when checking the URL
func (o RecordHttpServiceOutput) UserAgent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordHttpService) *string { return v.UserAgent }).(pulumi.StringPtrOutput)
}

type RecordHttpServicePtrOutput struct{ *pulumi.OutputState }

func (RecordHttpServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordHttpService)(nil)).Elem()
}

func (o RecordHttpServicePtrOutput) ToRecordHttpServicePtrOutput() RecordHttpServicePtrOutput {
	return o
}

func (o RecordHttpServicePtrOutput) ToRecordHttpServicePtrOutputWithContext(ctx context.Context) RecordHttpServicePtrOutput {
	return o
}

func (o RecordHttpServicePtrOutput) Elem() RecordHttpServiceOutput {
	return o.ApplyT(func(v *RecordHttpService) RecordHttpService {
		if v != nil {
			return *v
		}
		var ret RecordHttpService
		return ret
	}).(RecordHttpServiceOutput)
}

// IPs to check
func (o RecordHttpServicePtrOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RecordHttpService) []string {
		if v == nil {
			return nil
		}
		return v.Ips
	}).(pulumi.StringArrayOutput)
}

// Text to search
func (o RecordHttpServicePtrOutput) MustContain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordHttpService) *string {
		if v == nil {
			return nil
		}
		return &v.MustContain
	}).(pulumi.StringPtrOutput)
}

// Strategy to return an IP from the IPs list
func (o RecordHttpServicePtrOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordHttpService) *string {
		if v == nil {
			return nil
		}
		return &v.Strategy
	}).(pulumi.StringPtrOutput)
}

// URL to match the mustContain text to validate an IP
func (o RecordHttpServicePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordHttpService) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

// User-agent used when checking the URL
func (o RecordHttpServicePtrOutput) UserAgent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordHttpService) *string {
		if v == nil {
			return nil
		}
		return v.UserAgent
	}).(pulumi.StringPtrOutput)
}

type RecordView struct {
	// The content of the record (an IPv4 for an `A` record, a string for a `TXT` record, etc.).
	Data string `pulumi:"data"`
	// The subnet of the view
	Subnet string `pulumi:"subnet"`
}

// RecordViewInput is an input type that accepts RecordViewArgs and RecordViewOutput values.
// You can construct a concrete instance of `RecordViewInput` via:
//
//	RecordViewArgs{...}
type RecordViewInput interface {
	pulumi.Input

	ToRecordViewOutput() RecordViewOutput
	ToRecordViewOutputWithContext(context.Context) RecordViewOutput
}

type RecordViewArgs struct {
	// The content of the record (an IPv4 for an `A` record, a string for a `TXT` record, etc.).
	Data pulumi.StringInput `pulumi:"data"`
	// The subnet of the view
	Subnet pulumi.StringInput `pulumi:"subnet"`
}

func (RecordViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordView)(nil)).Elem()
}

func (i RecordViewArgs) ToRecordViewOutput() RecordViewOutput {
	return i.ToRecordViewOutputWithContext(context.Background())
}

func (i RecordViewArgs) ToRecordViewOutputWithContext(ctx context.Context) RecordViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordViewOutput)
}

// RecordViewArrayInput is an input type that accepts RecordViewArray and RecordViewArrayOutput values.
// You can construct a concrete instance of `RecordViewArrayInput` via:
//
//	RecordViewArray{ RecordViewArgs{...} }
type RecordViewArrayInput interface {
	pulumi.Input

	ToRecordViewArrayOutput() RecordViewArrayOutput
	ToRecordViewArrayOutputWithContext(context.Context) RecordViewArrayOutput
}

type RecordViewArray []RecordViewInput

func (RecordViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordView)(nil)).Elem()
}

func (i RecordViewArray) ToRecordViewArrayOutput() RecordViewArrayOutput {
	return i.ToRecordViewArrayOutputWithContext(context.Background())
}

func (i RecordViewArray) ToRecordViewArrayOutputWithContext(ctx context.Context) RecordViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordViewArrayOutput)
}

type RecordViewOutput struct{ *pulumi.OutputState }

func (RecordViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordView)(nil)).Elem()
}

func (o RecordViewOutput) ToRecordViewOutput() RecordViewOutput {
	return o
}

func (o RecordViewOutput) ToRecordViewOutputWithContext(ctx context.Context) RecordViewOutput {
	return o
}

// The content of the record (an IPv4 for an `A` record, a string for a `TXT` record, etc.).
func (o RecordViewOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v RecordView) string { return v.Data }).(pulumi.StringOutput)
}

// The subnet of the view
func (o RecordViewOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v RecordView) string { return v.Subnet }).(pulumi.StringOutput)
}

type RecordViewArrayOutput struct{ *pulumi.OutputState }

func (RecordViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordView)(nil)).Elem()
}

func (o RecordViewArrayOutput) ToRecordViewArrayOutput() RecordViewArrayOutput {
	return o
}

func (o RecordViewArrayOutput) ToRecordViewArrayOutputWithContext(ctx context.Context) RecordViewArrayOutput {
	return o
}

func (o RecordViewArrayOutput) Index(i pulumi.IntInput) RecordViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordView {
		return vs[0].([]RecordView)[vs[1].(int)]
	}).(RecordViewOutput)
}

type RecordWeighted struct {
	// The weighted IP
	Ip string `pulumi:"ip"`
	// The weight of the IP
	Weight int `pulumi:"weight"`
}

// RecordWeightedInput is an input type that accepts RecordWeightedArgs and RecordWeightedOutput values.
// You can construct a concrete instance of `RecordWeightedInput` via:
//
//	RecordWeightedArgs{...}
type RecordWeightedInput interface {
	pulumi.Input

	ToRecordWeightedOutput() RecordWeightedOutput
	ToRecordWeightedOutputWithContext(context.Context) RecordWeightedOutput
}

type RecordWeightedArgs struct {
	// The weighted IP
	Ip pulumi.StringInput `pulumi:"ip"`
	// The weight of the IP
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (RecordWeightedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordWeighted)(nil)).Elem()
}

func (i RecordWeightedArgs) ToRecordWeightedOutput() RecordWeightedOutput {
	return i.ToRecordWeightedOutputWithContext(context.Background())
}

func (i RecordWeightedArgs) ToRecordWeightedOutputWithContext(ctx context.Context) RecordWeightedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordWeightedOutput)
}

// RecordWeightedArrayInput is an input type that accepts RecordWeightedArray and RecordWeightedArrayOutput values.
// You can construct a concrete instance of `RecordWeightedArrayInput` via:
//
//	RecordWeightedArray{ RecordWeightedArgs{...} }
type RecordWeightedArrayInput interface {
	pulumi.Input

	ToRecordWeightedArrayOutput() RecordWeightedArrayOutput
	ToRecordWeightedArrayOutputWithContext(context.Context) RecordWeightedArrayOutput
}

type RecordWeightedArray []RecordWeightedInput

func (RecordWeightedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordWeighted)(nil)).Elem()
}

func (i RecordWeightedArray) ToRecordWeightedArrayOutput() RecordWeightedArrayOutput {
	return i.ToRecordWeightedArrayOutputWithContext(context.Background())
}

func (i RecordWeightedArray) ToRecordWeightedArrayOutputWithContext(ctx context.Context) RecordWeightedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordWeightedArrayOutput)
}

type RecordWeightedOutput struct{ *pulumi.OutputState }

func (RecordWeightedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordWeighted)(nil)).Elem()
}

func (o RecordWeightedOutput) ToRecordWeightedOutput() RecordWeightedOutput {
	return o
}

func (o RecordWeightedOutput) ToRecordWeightedOutputWithContext(ctx context.Context) RecordWeightedOutput {
	return o
}

// The weighted IP
func (o RecordWeightedOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v RecordWeighted) string { return v.Ip }).(pulumi.StringOutput)
}

// The weight of the IP
func (o RecordWeightedOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v RecordWeighted) int { return v.Weight }).(pulumi.IntOutput)
}

type RecordWeightedArrayOutput struct{ *pulumi.OutputState }

func (RecordWeightedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordWeighted)(nil)).Elem()
}

func (o RecordWeightedArrayOutput) ToRecordWeightedArrayOutput() RecordWeightedArrayOutput {
	return o
}

func (o RecordWeightedArrayOutput) ToRecordWeightedArrayOutputWithContext(ctx context.Context) RecordWeightedArrayOutput {
	return o
}

func (o RecordWeightedArrayOutput) Index(i pulumi.IntInput) RecordWeightedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordWeighted {
		return vs[0].([]RecordWeighted)[vs[1].(int)]
	}).(RecordWeightedOutput)
}

type GetRecordGeoIp struct {
	// The list of matches
	Matches []GetRecordGeoIpMatch `pulumi:"matches"`
}

// GetRecordGeoIpInput is an input type that accepts GetRecordGeoIpArgs and GetRecordGeoIpOutput values.
// You can construct a concrete instance of `GetRecordGeoIpInput` via:
//
//	GetRecordGeoIpArgs{...}
type GetRecordGeoIpInput interface {
	pulumi.Input

	ToGetRecordGeoIpOutput() GetRecordGeoIpOutput
	ToGetRecordGeoIpOutputWithContext(context.Context) GetRecordGeoIpOutput
}

type GetRecordGeoIpArgs struct {
	// The list of matches
	Matches GetRecordGeoIpMatchArrayInput `pulumi:"matches"`
}

func (GetRecordGeoIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordGeoIp)(nil)).Elem()
}

func (i GetRecordGeoIpArgs) ToGetRecordGeoIpOutput() GetRecordGeoIpOutput {
	return i.ToGetRecordGeoIpOutputWithContext(context.Background())
}

func (i GetRecordGeoIpArgs) ToGetRecordGeoIpOutputWithContext(ctx context.Context) GetRecordGeoIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordGeoIpOutput)
}

// GetRecordGeoIpArrayInput is an input type that accepts GetRecordGeoIpArray and GetRecordGeoIpArrayOutput values.
// You can construct a concrete instance of `GetRecordGeoIpArrayInput` via:
//
//	GetRecordGeoIpArray{ GetRecordGeoIpArgs{...} }
type GetRecordGeoIpArrayInput interface {
	pulumi.Input

	ToGetRecordGeoIpArrayOutput() GetRecordGeoIpArrayOutput
	ToGetRecordGeoIpArrayOutputWithContext(context.Context) GetRecordGeoIpArrayOutput
}

type GetRecordGeoIpArray []GetRecordGeoIpInput

func (GetRecordGeoIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordGeoIp)(nil)).Elem()
}

func (i GetRecordGeoIpArray) ToGetRecordGeoIpArrayOutput() GetRecordGeoIpArrayOutput {
	return i.ToGetRecordGeoIpArrayOutputWithContext(context.Background())
}

func (i GetRecordGeoIpArray) ToGetRecordGeoIpArrayOutputWithContext(ctx context.Context) GetRecordGeoIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordGeoIpArrayOutput)
}

type GetRecordGeoIpOutput struct{ *pulumi.OutputState }

func (GetRecordGeoIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordGeoIp)(nil)).Elem()
}

func (o GetRecordGeoIpOutput) ToGetRecordGeoIpOutput() GetRecordGeoIpOutput {
	return o
}

func (o GetRecordGeoIpOutput) ToGetRecordGeoIpOutputWithContext(ctx context.Context) GetRecordGeoIpOutput {
	return o
}

// The list of matches
func (o GetRecordGeoIpOutput) Matches() GetRecordGeoIpMatchArrayOutput {
	return o.ApplyT(func(v GetRecordGeoIp) []GetRecordGeoIpMatch { return v.Matches }).(GetRecordGeoIpMatchArrayOutput)
}

type GetRecordGeoIpArrayOutput struct{ *pulumi.OutputState }

func (GetRecordGeoIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordGeoIp)(nil)).Elem()
}

func (o GetRecordGeoIpArrayOutput) ToGetRecordGeoIpArrayOutput() GetRecordGeoIpArrayOutput {
	return o
}

func (o GetRecordGeoIpArrayOutput) ToGetRecordGeoIpArrayOutputWithContext(ctx context.Context) GetRecordGeoIpArrayOutput {
	return o
}

func (o GetRecordGeoIpArrayOutput) Index(i pulumi.IntInput) GetRecordGeoIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRecordGeoIp {
		return vs[0].([]GetRecordGeoIp)[vs[1].(int)]
	}).(GetRecordGeoIpOutput)
}

type GetRecordGeoIpMatch struct {
	// List of continents (eg: EU for Europe, NA for North America, AS for Asia...). List of all continents code: https://api.scaleway.com/domain-private/v2beta1/continents
	Continents []string `pulumi:"continents"`
	// List of countries (eg: FR for France, US for the United States, GB for Great Britain...). List of all countries code: https://api.scaleway.com/domain-private/v2beta1/countries
	Countries []string `pulumi:"countries"`
	// The content of the record (e.g., an IPv4 address for an `A` record or a string for a `TXT` record). Cannot be used with `recordId`.
	Data string `pulumi:"data"`
}

// GetRecordGeoIpMatchInput is an input type that accepts GetRecordGeoIpMatchArgs and GetRecordGeoIpMatchOutput values.
// You can construct a concrete instance of `GetRecordGeoIpMatchInput` via:
//
//	GetRecordGeoIpMatchArgs{...}
type GetRecordGeoIpMatchInput interface {
	pulumi.Input

	ToGetRecordGeoIpMatchOutput() GetRecordGeoIpMatchOutput
	ToGetRecordGeoIpMatchOutputWithContext(context.Context) GetRecordGeoIpMatchOutput
}

type GetRecordGeoIpMatchArgs struct {
	// List of continents (eg: EU for Europe, NA for North America, AS for Asia...). List of all continents code: https://api.scaleway.com/domain-private/v2beta1/continents
	Continents pulumi.StringArrayInput `pulumi:"continents"`
	// List of countries (eg: FR for France, US for the United States, GB for Great Britain...). List of all countries code: https://api.scaleway.com/domain-private/v2beta1/countries
	Countries pulumi.StringArrayInput `pulumi:"countries"`
	// The content of the record (e.g., an IPv4 address for an `A` record or a string for a `TXT` record). Cannot be used with `recordId`.
	Data pulumi.StringInput `pulumi:"data"`
}

func (GetRecordGeoIpMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordGeoIpMatch)(nil)).Elem()
}

func (i GetRecordGeoIpMatchArgs) ToGetRecordGeoIpMatchOutput() GetRecordGeoIpMatchOutput {
	return i.ToGetRecordGeoIpMatchOutputWithContext(context.Background())
}

func (i GetRecordGeoIpMatchArgs) ToGetRecordGeoIpMatchOutputWithContext(ctx context.Context) GetRecordGeoIpMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordGeoIpMatchOutput)
}

// GetRecordGeoIpMatchArrayInput is an input type that accepts GetRecordGeoIpMatchArray and GetRecordGeoIpMatchArrayOutput values.
// You can construct a concrete instance of `GetRecordGeoIpMatchArrayInput` via:
//
//	GetRecordGeoIpMatchArray{ GetRecordGeoIpMatchArgs{...} }
type GetRecordGeoIpMatchArrayInput interface {
	pulumi.Input

	ToGetRecordGeoIpMatchArrayOutput() GetRecordGeoIpMatchArrayOutput
	ToGetRecordGeoIpMatchArrayOutputWithContext(context.Context) GetRecordGeoIpMatchArrayOutput
}

type GetRecordGeoIpMatchArray []GetRecordGeoIpMatchInput

func (GetRecordGeoIpMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordGeoIpMatch)(nil)).Elem()
}

func (i GetRecordGeoIpMatchArray) ToGetRecordGeoIpMatchArrayOutput() GetRecordGeoIpMatchArrayOutput {
	return i.ToGetRecordGeoIpMatchArrayOutputWithContext(context.Background())
}

func (i GetRecordGeoIpMatchArray) ToGetRecordGeoIpMatchArrayOutputWithContext(ctx context.Context) GetRecordGeoIpMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordGeoIpMatchArrayOutput)
}

type GetRecordGeoIpMatchOutput struct{ *pulumi.OutputState }

func (GetRecordGeoIpMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordGeoIpMatch)(nil)).Elem()
}

func (o GetRecordGeoIpMatchOutput) ToGetRecordGeoIpMatchOutput() GetRecordGeoIpMatchOutput {
	return o
}

func (o GetRecordGeoIpMatchOutput) ToGetRecordGeoIpMatchOutputWithContext(ctx context.Context) GetRecordGeoIpMatchOutput {
	return o
}

// List of continents (eg: EU for Europe, NA for North America, AS for Asia...). List of all continents code: https://api.scaleway.com/domain-private/v2beta1/continents
func (o GetRecordGeoIpMatchOutput) Continents() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRecordGeoIpMatch) []string { return v.Continents }).(pulumi.StringArrayOutput)
}

// List of countries (eg: FR for France, US for the United States, GB for Great Britain...). List of all countries code: https://api.scaleway.com/domain-private/v2beta1/countries
func (o GetRecordGeoIpMatchOutput) Countries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRecordGeoIpMatch) []string { return v.Countries }).(pulumi.StringArrayOutput)
}

// The content of the record (e.g., an IPv4 address for an `A` record or a string for a `TXT` record). Cannot be used with `recordId`.
func (o GetRecordGeoIpMatchOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordGeoIpMatch) string { return v.Data }).(pulumi.StringOutput)
}

type GetRecordGeoIpMatchArrayOutput struct{ *pulumi.OutputState }

func (GetRecordGeoIpMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordGeoIpMatch)(nil)).Elem()
}

func (o GetRecordGeoIpMatchArrayOutput) ToGetRecordGeoIpMatchArrayOutput() GetRecordGeoIpMatchArrayOutput {
	return o
}

func (o GetRecordGeoIpMatchArrayOutput) ToGetRecordGeoIpMatchArrayOutputWithContext(ctx context.Context) GetRecordGeoIpMatchArrayOutput {
	return o
}

func (o GetRecordGeoIpMatchArrayOutput) Index(i pulumi.IntInput) GetRecordGeoIpMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRecordGeoIpMatch {
		return vs[0].([]GetRecordGeoIpMatch)[vs[1].(int)]
	}).(GetRecordGeoIpMatchOutput)
}

type GetRecordHttpService struct {
	// IPs to check
	Ips []string `pulumi:"ips"`
	// Text to search
	MustContain string `pulumi:"mustContain"`
	// Strategy to return an IP from the IPs list
	Strategy string `pulumi:"strategy"`
	// URL to match the mustContain text to validate an IP
	Url string `pulumi:"url"`
	// User-agent used when checking the URL
	UserAgent string `pulumi:"userAgent"`
}

// GetRecordHttpServiceInput is an input type that accepts GetRecordHttpServiceArgs and GetRecordHttpServiceOutput values.
// You can construct a concrete instance of `GetRecordHttpServiceInput` via:
//
//	GetRecordHttpServiceArgs{...}
type GetRecordHttpServiceInput interface {
	pulumi.Input

	ToGetRecordHttpServiceOutput() GetRecordHttpServiceOutput
	ToGetRecordHttpServiceOutputWithContext(context.Context) GetRecordHttpServiceOutput
}

type GetRecordHttpServiceArgs struct {
	// IPs to check
	Ips pulumi.StringArrayInput `pulumi:"ips"`
	// Text to search
	MustContain pulumi.StringInput `pulumi:"mustContain"`
	// Strategy to return an IP from the IPs list
	Strategy pulumi.StringInput `pulumi:"strategy"`
	// URL to match the mustContain text to validate an IP
	Url pulumi.StringInput `pulumi:"url"`
	// User-agent used when checking the URL
	UserAgent pulumi.StringInput `pulumi:"userAgent"`
}

func (GetRecordHttpServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordHttpService)(nil)).Elem()
}

func (i GetRecordHttpServiceArgs) ToGetRecordHttpServiceOutput() GetRecordHttpServiceOutput {
	return i.ToGetRecordHttpServiceOutputWithContext(context.Background())
}

func (i GetRecordHttpServiceArgs) ToGetRecordHttpServiceOutputWithContext(ctx context.Context) GetRecordHttpServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordHttpServiceOutput)
}

// GetRecordHttpServiceArrayInput is an input type that accepts GetRecordHttpServiceArray and GetRecordHttpServiceArrayOutput values.
// You can construct a concrete instance of `GetRecordHttpServiceArrayInput` via:
//
//	GetRecordHttpServiceArray{ GetRecordHttpServiceArgs{...} }
type GetRecordHttpServiceArrayInput interface {
	pulumi.Input

	ToGetRecordHttpServiceArrayOutput() GetRecordHttpServiceArrayOutput
	ToGetRecordHttpServiceArrayOutputWithContext(context.Context) GetRecordHttpServiceArrayOutput
}

type GetRecordHttpServiceArray []GetRecordHttpServiceInput

func (GetRecordHttpServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordHttpService)(nil)).Elem()
}

func (i GetRecordHttpServiceArray) ToGetRecordHttpServiceArrayOutput() GetRecordHttpServiceArrayOutput {
	return i.ToGetRecordHttpServiceArrayOutputWithContext(context.Background())
}

func (i GetRecordHttpServiceArray) ToGetRecordHttpServiceArrayOutputWithContext(ctx context.Context) GetRecordHttpServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordHttpServiceArrayOutput)
}

type GetRecordHttpServiceOutput struct{ *pulumi.OutputState }

func (GetRecordHttpServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordHttpService)(nil)).Elem()
}

func (o GetRecordHttpServiceOutput) ToGetRecordHttpServiceOutput() GetRecordHttpServiceOutput {
	return o
}

func (o GetRecordHttpServiceOutput) ToGetRecordHttpServiceOutputWithContext(ctx context.Context) GetRecordHttpServiceOutput {
	return o
}

// IPs to check
func (o GetRecordHttpServiceOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRecordHttpService) []string { return v.Ips }).(pulumi.StringArrayOutput)
}

// Text to search
func (o GetRecordHttpServiceOutput) MustContain() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordHttpService) string { return v.MustContain }).(pulumi.StringOutput)
}

// Strategy to return an IP from the IPs list
func (o GetRecordHttpServiceOutput) Strategy() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordHttpService) string { return v.Strategy }).(pulumi.StringOutput)
}

// URL to match the mustContain text to validate an IP
func (o GetRecordHttpServiceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordHttpService) string { return v.Url }).(pulumi.StringOutput)
}

// User-agent used when checking the URL
func (o GetRecordHttpServiceOutput) UserAgent() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordHttpService) string { return v.UserAgent }).(pulumi.StringOutput)
}

type GetRecordHttpServiceArrayOutput struct{ *pulumi.OutputState }

func (GetRecordHttpServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordHttpService)(nil)).Elem()
}

func (o GetRecordHttpServiceArrayOutput) ToGetRecordHttpServiceArrayOutput() GetRecordHttpServiceArrayOutput {
	return o
}

func (o GetRecordHttpServiceArrayOutput) ToGetRecordHttpServiceArrayOutputWithContext(ctx context.Context) GetRecordHttpServiceArrayOutput {
	return o
}

func (o GetRecordHttpServiceArrayOutput) Index(i pulumi.IntInput) GetRecordHttpServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRecordHttpService {
		return vs[0].([]GetRecordHttpService)[vs[1].(int)]
	}).(GetRecordHttpServiceOutput)
}

type GetRecordView struct {
	// The content of the record (e.g., an IPv4 address for an `A` record or a string for a `TXT` record). Cannot be used with `recordId`.
	Data string `pulumi:"data"`
	// The subnet of the view
	Subnet string `pulumi:"subnet"`
}

// GetRecordViewInput is an input type that accepts GetRecordViewArgs and GetRecordViewOutput values.
// You can construct a concrete instance of `GetRecordViewInput` via:
//
//	GetRecordViewArgs{...}
type GetRecordViewInput interface {
	pulumi.Input

	ToGetRecordViewOutput() GetRecordViewOutput
	ToGetRecordViewOutputWithContext(context.Context) GetRecordViewOutput
}

type GetRecordViewArgs struct {
	// The content of the record (e.g., an IPv4 address for an `A` record or a string for a `TXT` record). Cannot be used with `recordId`.
	Data pulumi.StringInput `pulumi:"data"`
	// The subnet of the view
	Subnet pulumi.StringInput `pulumi:"subnet"`
}

func (GetRecordViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordView)(nil)).Elem()
}

func (i GetRecordViewArgs) ToGetRecordViewOutput() GetRecordViewOutput {
	return i.ToGetRecordViewOutputWithContext(context.Background())
}

func (i GetRecordViewArgs) ToGetRecordViewOutputWithContext(ctx context.Context) GetRecordViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordViewOutput)
}

// GetRecordViewArrayInput is an input type that accepts GetRecordViewArray and GetRecordViewArrayOutput values.
// You can construct a concrete instance of `GetRecordViewArrayInput` via:
//
//	GetRecordViewArray{ GetRecordViewArgs{...} }
type GetRecordViewArrayInput interface {
	pulumi.Input

	ToGetRecordViewArrayOutput() GetRecordViewArrayOutput
	ToGetRecordViewArrayOutputWithContext(context.Context) GetRecordViewArrayOutput
}

type GetRecordViewArray []GetRecordViewInput

func (GetRecordViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordView)(nil)).Elem()
}

func (i GetRecordViewArray) ToGetRecordViewArrayOutput() GetRecordViewArrayOutput {
	return i.ToGetRecordViewArrayOutputWithContext(context.Background())
}

func (i GetRecordViewArray) ToGetRecordViewArrayOutputWithContext(ctx context.Context) GetRecordViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordViewArrayOutput)
}

type GetRecordViewOutput struct{ *pulumi.OutputState }

func (GetRecordViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordView)(nil)).Elem()
}

func (o GetRecordViewOutput) ToGetRecordViewOutput() GetRecordViewOutput {
	return o
}

func (o GetRecordViewOutput) ToGetRecordViewOutputWithContext(ctx context.Context) GetRecordViewOutput {
	return o
}

// The content of the record (e.g., an IPv4 address for an `A` record or a string for a `TXT` record). Cannot be used with `recordId`.
func (o GetRecordViewOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordView) string { return v.Data }).(pulumi.StringOutput)
}

// The subnet of the view
func (o GetRecordViewOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordView) string { return v.Subnet }).(pulumi.StringOutput)
}

type GetRecordViewArrayOutput struct{ *pulumi.OutputState }

func (GetRecordViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordView)(nil)).Elem()
}

func (o GetRecordViewArrayOutput) ToGetRecordViewArrayOutput() GetRecordViewArrayOutput {
	return o
}

func (o GetRecordViewArrayOutput) ToGetRecordViewArrayOutputWithContext(ctx context.Context) GetRecordViewArrayOutput {
	return o
}

func (o GetRecordViewArrayOutput) Index(i pulumi.IntInput) GetRecordViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRecordView {
		return vs[0].([]GetRecordView)[vs[1].(int)]
	}).(GetRecordViewOutput)
}

type GetRecordWeighted struct {
	// The weighted IP
	Ip string `pulumi:"ip"`
	// The weight of the IP
	Weight int `pulumi:"weight"`
}

// GetRecordWeightedInput is an input type that accepts GetRecordWeightedArgs and GetRecordWeightedOutput values.
// You can construct a concrete instance of `GetRecordWeightedInput` via:
//
//	GetRecordWeightedArgs{...}
type GetRecordWeightedInput interface {
	pulumi.Input

	ToGetRecordWeightedOutput() GetRecordWeightedOutput
	ToGetRecordWeightedOutputWithContext(context.Context) GetRecordWeightedOutput
}

type GetRecordWeightedArgs struct {
	// The weighted IP
	Ip pulumi.StringInput `pulumi:"ip"`
	// The weight of the IP
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (GetRecordWeightedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordWeighted)(nil)).Elem()
}

func (i GetRecordWeightedArgs) ToGetRecordWeightedOutput() GetRecordWeightedOutput {
	return i.ToGetRecordWeightedOutputWithContext(context.Background())
}

func (i GetRecordWeightedArgs) ToGetRecordWeightedOutputWithContext(ctx context.Context) GetRecordWeightedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordWeightedOutput)
}

// GetRecordWeightedArrayInput is an input type that accepts GetRecordWeightedArray and GetRecordWeightedArrayOutput values.
// You can construct a concrete instance of `GetRecordWeightedArrayInput` via:
//
//	GetRecordWeightedArray{ GetRecordWeightedArgs{...} }
type GetRecordWeightedArrayInput interface {
	pulumi.Input

	ToGetRecordWeightedArrayOutput() GetRecordWeightedArrayOutput
	ToGetRecordWeightedArrayOutputWithContext(context.Context) GetRecordWeightedArrayOutput
}

type GetRecordWeightedArray []GetRecordWeightedInput

func (GetRecordWeightedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordWeighted)(nil)).Elem()
}

func (i GetRecordWeightedArray) ToGetRecordWeightedArrayOutput() GetRecordWeightedArrayOutput {
	return i.ToGetRecordWeightedArrayOutputWithContext(context.Background())
}

func (i GetRecordWeightedArray) ToGetRecordWeightedArrayOutputWithContext(ctx context.Context) GetRecordWeightedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordWeightedArrayOutput)
}

type GetRecordWeightedOutput struct{ *pulumi.OutputState }

func (GetRecordWeightedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordWeighted)(nil)).Elem()
}

func (o GetRecordWeightedOutput) ToGetRecordWeightedOutput() GetRecordWeightedOutput {
	return o
}

func (o GetRecordWeightedOutput) ToGetRecordWeightedOutputWithContext(ctx context.Context) GetRecordWeightedOutput {
	return o
}

// The weighted IP
func (o GetRecordWeightedOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordWeighted) string { return v.Ip }).(pulumi.StringOutput)
}

// The weight of the IP
func (o GetRecordWeightedOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v GetRecordWeighted) int { return v.Weight }).(pulumi.IntOutput)
}

type GetRecordWeightedArrayOutput struct{ *pulumi.OutputState }

func (GetRecordWeightedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordWeighted)(nil)).Elem()
}

func (o GetRecordWeightedArrayOutput) ToGetRecordWeightedArrayOutput() GetRecordWeightedArrayOutput {
	return o
}

func (o GetRecordWeightedArrayOutput) ToGetRecordWeightedArrayOutputWithContext(ctx context.Context) GetRecordWeightedArrayOutput {
	return o
}

func (o GetRecordWeightedArrayOutput) Index(i pulumi.IntInput) GetRecordWeightedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRecordWeighted {
		return vs[0].([]GetRecordWeighted)[vs[1].(int)]
	}).(GetRecordWeightedOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecordGeoIpInput)(nil)).Elem(), RecordGeoIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordGeoIpPtrInput)(nil)).Elem(), RecordGeoIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordGeoIpMatchInput)(nil)).Elem(), RecordGeoIpMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordGeoIpMatchArrayInput)(nil)).Elem(), RecordGeoIpMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordHttpServiceInput)(nil)).Elem(), RecordHttpServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordHttpServicePtrInput)(nil)).Elem(), RecordHttpServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordViewInput)(nil)).Elem(), RecordViewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordViewArrayInput)(nil)).Elem(), RecordViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordWeightedInput)(nil)).Elem(), RecordWeightedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordWeightedArrayInput)(nil)).Elem(), RecordWeightedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordGeoIpInput)(nil)).Elem(), GetRecordGeoIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordGeoIpArrayInput)(nil)).Elem(), GetRecordGeoIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordGeoIpMatchInput)(nil)).Elem(), GetRecordGeoIpMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordGeoIpMatchArrayInput)(nil)).Elem(), GetRecordGeoIpMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordHttpServiceInput)(nil)).Elem(), GetRecordHttpServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordHttpServiceArrayInput)(nil)).Elem(), GetRecordHttpServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordViewInput)(nil)).Elem(), GetRecordViewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordViewArrayInput)(nil)).Elem(), GetRecordViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordWeightedInput)(nil)).Elem(), GetRecordWeightedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordWeightedArrayInput)(nil)).Elem(), GetRecordWeightedArray{})
	pulumi.RegisterOutputType(RecordGeoIpOutput{})
	pulumi.RegisterOutputType(RecordGeoIpPtrOutput{})
	pulumi.RegisterOutputType(RecordGeoIpMatchOutput{})
	pulumi.RegisterOutputType(RecordGeoIpMatchArrayOutput{})
	pulumi.RegisterOutputType(RecordHttpServiceOutput{})
	pulumi.RegisterOutputType(RecordHttpServicePtrOutput{})
	pulumi.RegisterOutputType(RecordViewOutput{})
	pulumi.RegisterOutputType(RecordViewArrayOutput{})
	pulumi.RegisterOutputType(RecordWeightedOutput{})
	pulumi.RegisterOutputType(RecordWeightedArrayOutput{})
	pulumi.RegisterOutputType(GetRecordGeoIpOutput{})
	pulumi.RegisterOutputType(GetRecordGeoIpArrayOutput{})
	pulumi.RegisterOutputType(GetRecordGeoIpMatchOutput{})
	pulumi.RegisterOutputType(GetRecordGeoIpMatchArrayOutput{})
	pulumi.RegisterOutputType(GetRecordHttpServiceOutput{})
	pulumi.RegisterOutputType(GetRecordHttpServiceArrayOutput{})
	pulumi.RegisterOutputType(GetRecordViewOutput{})
	pulumi.RegisterOutputType(GetRecordViewArrayOutput{})
	pulumi.RegisterOutputType(GetRecordWeightedOutput{})
	pulumi.RegisterOutputType(GetRecordWeightedArrayOutput{})
}
