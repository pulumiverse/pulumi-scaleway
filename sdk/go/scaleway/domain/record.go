// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package domain

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// The `domain.Record` resource allows you to create and manage DNS records for Scaleway domains.
//
// Refer to the Domains and DNS [product documentation](https://www.scaleway.com/en/docs/network/domains-and-dns/) and [API documentation](https://www.scaleway.com/en/developers/api/domains-and-dns/) for more information.
//
// ## Example Usage
//
// ### Create basic DNS records
//
// The folllowing commands allow you to:
//
// - create an A record for the `www.domain.tld` domain, pointing to `1.2.3.4` and another one pointing to `1.2.3.5`
//
// - create an MX record with the `mx.online.net.` mail server and a priority of 10, and another one with the `mx-cache.online.net.` mail server and a priority of 20
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/domain"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := domain.NewRecord(ctx, "www", &domain.RecordArgs{
//				DnsZone: pulumi.String("domain.tld"),
//				Name:    pulumi.String("www"),
//				Type:    pulumi.String("A"),
//				Data:    pulumi.String("1.2.3.4"),
//				Ttl:     pulumi.Int(3600),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "www2", &domain.RecordArgs{
//				DnsZone: pulumi.String("domain.tld"),
//				Name:    pulumi.String("www"),
//				Type:    pulumi.String("A"),
//				Data:    pulumi.String("1.2.3.5"),
//				Ttl:     pulumi.Int(3600),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "mx", &domain.RecordArgs{
//				DnsZone:  pulumi.String("domain.tld"),
//				Name:     pulumi.String(""),
//				Type:     pulumi.String("MX"),
//				Data:     pulumi.String("mx.online.net."),
//				Ttl:      pulumi.Int(3600),
//				Priority: pulumi.Int(10),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "mx2", &domain.RecordArgs{
//				DnsZone:  pulumi.String("domain.tld"),
//				Name:     pulumi.String(""),
//				Type:     pulumi.String("MX"),
//				Data:     pulumi.String("mx-cache.online.net."),
//				Ttl:      pulumi.Int(3600),
//				Priority: pulumi.Int(20),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create dynamic records
//
// The folllowing commands allow you to:
//
// - create a Geo IP record for `images.domain.tld` that points to different IPs based on the user's location: `1.2.3.5` for users in France (EU), and `4.3.2.1` for users in North America (NA)
//
// - create an HTTP service record for `app.domain.tld` that checks the health of specified IPs and responds based on their status.
//
// - create view-based records for `db.domain.tld` that resolve differently based on the client's subnet.
//
// - create a weighted record for `web.domain.tld` that directs traffic to different IPs based on their weights.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/domain"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := domain.NewRecord(ctx, "geo_ip", &domain.RecordArgs{
//				DnsZone: pulumi.String("domain.tld"),
//				Name:    pulumi.String("images"),
//				Type:    pulumi.String("A"),
//				Data:    pulumi.String("1.2.3.4"),
//				Ttl:     pulumi.Int(3600),
//				GeoIp: &domain.RecordGeoIpArgs{
//					Matches: domain.RecordGeoIpMatchArray{
//						&domain.RecordGeoIpMatchArgs{
//							Continents: pulumi.StringArray{
//								pulumi.String("EU"),
//							},
//							Countries: pulumi.StringArray{
//								pulumi.String("FR"),
//							},
//							Data: pulumi.String("1.2.3.5"),
//						},
//						&domain.RecordGeoIpMatchArgs{
//							Continents: pulumi.StringArray{
//								pulumi.String("NA"),
//							},
//							Data: pulumi.String("4.3.2.1"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "http_service", &domain.RecordArgs{
//				DnsZone: pulumi.String("domain.tld"),
//				Name:    pulumi.String("app"),
//				Type:    pulumi.String("A"),
//				Data:    pulumi.String("1.2.3.4"),
//				Ttl:     pulumi.Int(3600),
//				HttpService: &domain.RecordHttpServiceArgs{
//					Ips: pulumi.StringArray{
//						pulumi.String("1.2.3.5"),
//						pulumi.String("1.2.3.6"),
//					},
//					MustContain: pulumi.String("up"),
//					Url:         pulumi.String("http://mywebsite.com/health"),
//					UserAgent:   pulumi.String("scw_service_up"),
//					Strategy:    pulumi.String("hashed"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "view", &domain.RecordArgs{
//				DnsZone: pulumi.String("domain.tld"),
//				Name:    pulumi.String("db"),
//				Type:    pulumi.String("A"),
//				Data:    pulumi.String("1.2.3.4"),
//				Ttl:     pulumi.Int(3600),
//				Views: domain.RecordViewArray{
//					&domain.RecordViewArgs{
//						Subnet: pulumi.String("100.0.0.0/16"),
//						Data:   pulumi.String("1.2.3.5"),
//					},
//					&domain.RecordViewArgs{
//						Subnet: pulumi.String("100.1.0.0/16"),
//						Data:   pulumi.String("1.2.3.6"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "weighted", &domain.RecordArgs{
//				DnsZone: pulumi.String("domain.tld"),
//				Name:    pulumi.String("web"),
//				Type:    pulumi.String("A"),
//				Data:    pulumi.String("1.2.3.4"),
//				Ttl:     pulumi.Int(3600),
//				Weighteds: domain.RecordWeightedArray{
//					&domain.RecordWeightedArgs{
//						Ip:     pulumi.String("1.2.3.5"),
//						Weight: pulumi.Int(1),
//					},
//					&domain.RecordWeightedArgs{
//						Ip:     pulumi.String("1.2.3.6"),
//						Weight: pulumi.Int(2),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create an Instance and add records with the new Instance IP
//
// The following commands allow you to:
//
// - create a Scaleway Instance
// - assign The Instance's IP address to various DNS records for a specified DNS zone
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/domain"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/instance"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			// Your project ID.
//			projectId := cfg.Require("projectId")
//			// The DNS Zone used for testing records.
//			dnsZone := cfg.Require("dnsZone")
//			publicIp, err := instance.NewIp(ctx, "public_ip", &instance.IpArgs{
//				ProjectId: pulumi.String(projectId),
//			})
//			if err != nil {
//				return err
//			}
//			web, err := instance.NewServer(ctx, "web", &instance.ServerArgs{
//				ProjectId: pulumi.String(projectId),
//				Type:      pulumi.String("DEV1-S"),
//				Image:     pulumi.String("ubuntu_jammy"),
//				Tags: pulumi.StringArray{
//					pulumi.String("front"),
//					pulumi.String("web"),
//				},
//				IpId: publicIp.ID(),
//				RootVolume: &instance.ServerRootVolumeArgs{
//					SizeInGb: pulumi.Int(20),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "web_A", &domain.RecordArgs{
//				DnsZone: pulumi.String(dnsZone),
//				Name:    pulumi.String("web"),
//				Type:    pulumi.String("A"),
//				Data:    web.PublicIp,
//				Ttl:     pulumi.Int(3600),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "web_cname", &domain.RecordArgs{
//				DnsZone: pulumi.String(dnsZone),
//				Name:    pulumi.String("www"),
//				Type:    pulumi.String("CNAME"),
//				Data:    pulumi.Sprintf("web.%v.", dnsZone),
//				Ttl:     pulumi.Int(3600),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "web_alias", &domain.RecordArgs{
//				DnsZone: pulumi.String(dnsZone),
//				Name:    pulumi.String(""),
//				Type:    pulumi.String("ALIAS"),
//				Data:    pulumi.Sprintf("web.%v.", dnsZone),
//				Ttl:     pulumi.Int(3600),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Multiple records
//
// Some record types can have multiple data with the same name (e.g., `A`, `AAAA`, `MX`, `NS`, etc.). You can duplicate a `domain.Record`  resource with the same `name`, and the records will be added.
//
// Note however, that some records (e.g., CNAME, multiple dynamic records of different types) must be unique.
//
// ## Import
//
// This section explains how to import a record using the `{dns_zone}/{id}` format.
//
// bash
//
// ```sh
// $ pulumi import scaleway:domain/record:Record www subdomain.domain.tld/11111111-1111-1111-1111-111111111111
// ```
type Record struct {
	pulumi.CustomResourceState

	// The content of the record (an IPv4 for an `A` record, a string for a `TXT` record, etc.).
	Data pulumi.StringOutput `pulumi:"data"`
	// The DNS zone of the domain. If the domain has no DNS zone, one will be automatically created.
	DnsZone pulumi.StringOutput `pulumi:"dnsZone"`
	// The FQDN of the record.
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// Return record based on client localisation
	GeoIp RecordGeoIpPtrOutput `pulumi:"geoIp"`
	// Return record based on client localisation
	HttpService RecordHttpServicePtrOutput `pulumi:"httpService"`
	// The name of the record (can be an empty string for a root record).
	Name pulumi.StringOutput `pulumi:"name"`
	// The priority of the record (mostly used with an `MX` record).
	Priority pulumi.IntOutput `pulumi:"priority"`
	// The projectId you want to attach the resource to
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Does the DNS zone is the root zone or not
	RootZone pulumi.BoolOutput `pulumi:"rootZone"`
	// Time To Live of the record in seconds.
	Ttl pulumi.IntPtrOutput `pulumi:"ttl"`
	// The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).
	Type pulumi.StringOutput `pulumi:"type"`
	// Return record based on client subnet
	Views RecordViewArrayOutput `pulumi:"views"`
	// Return record based on weight
	Weighteds RecordWeightedArrayOutput `pulumi:"weighteds"`
}

// NewRecord registers a new resource with the given unique name, arguments, and options.
func NewRecord(ctx *pulumi.Context,
	name string, args *RecordArgs, opts ...pulumi.ResourceOption) (*Record, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Data == nil {
		return nil, errors.New("invalid value for required argument 'Data'")
	}
	if args.DnsZone == nil {
		return nil, errors.New("invalid value for required argument 'DnsZone'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/domainRecord:DomainRecord"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Record
	err := ctx.RegisterResource("scaleway:domain/record:Record", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecord gets an existing Record resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecordState, opts ...pulumi.ResourceOption) (*Record, error) {
	var resource Record
	err := ctx.ReadResource("scaleway:domain/record:Record", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Record resources.
type recordState struct {
	// The content of the record (an IPv4 for an `A` record, a string for a `TXT` record, etc.).
	Data *string `pulumi:"data"`
	// The DNS zone of the domain. If the domain has no DNS zone, one will be automatically created.
	DnsZone *string `pulumi:"dnsZone"`
	// The FQDN of the record.
	Fqdn *string `pulumi:"fqdn"`
	// Return record based on client localisation
	GeoIp *RecordGeoIp `pulumi:"geoIp"`
	// Return record based on client localisation
	HttpService *RecordHttpService `pulumi:"httpService"`
	// The name of the record (can be an empty string for a root record).
	Name *string `pulumi:"name"`
	// The priority of the record (mostly used with an `MX` record).
	Priority *int `pulumi:"priority"`
	// The projectId you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// Does the DNS zone is the root zone or not
	RootZone *bool `pulumi:"rootZone"`
	// Time To Live of the record in seconds.
	Ttl *int `pulumi:"ttl"`
	// The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).
	Type *string `pulumi:"type"`
	// Return record based on client subnet
	Views []RecordView `pulumi:"views"`
	// Return record based on weight
	Weighteds []RecordWeighted `pulumi:"weighteds"`
}

type RecordState struct {
	// The content of the record (an IPv4 for an `A` record, a string for a `TXT` record, etc.).
	Data pulumi.StringPtrInput
	// The DNS zone of the domain. If the domain has no DNS zone, one will be automatically created.
	DnsZone pulumi.StringPtrInput
	// The FQDN of the record.
	Fqdn pulumi.StringPtrInput
	// Return record based on client localisation
	GeoIp RecordGeoIpPtrInput
	// Return record based on client localisation
	HttpService RecordHttpServicePtrInput
	// The name of the record (can be an empty string for a root record).
	Name pulumi.StringPtrInput
	// The priority of the record (mostly used with an `MX` record).
	Priority pulumi.IntPtrInput
	// The projectId you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// Does the DNS zone is the root zone or not
	RootZone pulumi.BoolPtrInput
	// Time To Live of the record in seconds.
	Ttl pulumi.IntPtrInput
	// The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).
	Type pulumi.StringPtrInput
	// Return record based on client subnet
	Views RecordViewArrayInput
	// Return record based on weight
	Weighteds RecordWeightedArrayInput
}

func (RecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*recordState)(nil)).Elem()
}

type recordArgs struct {
	// The content of the record (an IPv4 for an `A` record, a string for a `TXT` record, etc.).
	Data string `pulumi:"data"`
	// The DNS zone of the domain. If the domain has no DNS zone, one will be automatically created.
	DnsZone string `pulumi:"dnsZone"`
	// Return record based on client localisation
	GeoIp *RecordGeoIp `pulumi:"geoIp"`
	// Return record based on client localisation
	HttpService *RecordHttpService `pulumi:"httpService"`
	// The name of the record (can be an empty string for a root record).
	Name *string `pulumi:"name"`
	// The priority of the record (mostly used with an `MX` record).
	Priority *int `pulumi:"priority"`
	// The projectId you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// Time To Live of the record in seconds.
	Ttl *int `pulumi:"ttl"`
	// The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).
	Type string `pulumi:"type"`
	// Return record based on client subnet
	Views []RecordView `pulumi:"views"`
	// Return record based on weight
	Weighteds []RecordWeighted `pulumi:"weighteds"`
}

// The set of arguments for constructing a Record resource.
type RecordArgs struct {
	// The content of the record (an IPv4 for an `A` record, a string for a `TXT` record, etc.).
	Data pulumi.StringInput
	// The DNS zone of the domain. If the domain has no DNS zone, one will be automatically created.
	DnsZone pulumi.StringInput
	// Return record based on client localisation
	GeoIp RecordGeoIpPtrInput
	// Return record based on client localisation
	HttpService RecordHttpServicePtrInput
	// The name of the record (can be an empty string for a root record).
	Name pulumi.StringPtrInput
	// The priority of the record (mostly used with an `MX` record).
	Priority pulumi.IntPtrInput
	// The projectId you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// Time To Live of the record in seconds.
	Ttl pulumi.IntPtrInput
	// The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).
	Type pulumi.StringInput
	// Return record based on client subnet
	Views RecordViewArrayInput
	// Return record based on weight
	Weighteds RecordWeightedArrayInput
}

func (RecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recordArgs)(nil)).Elem()
}

type RecordInput interface {
	pulumi.Input

	ToRecordOutput() RecordOutput
	ToRecordOutputWithContext(ctx context.Context) RecordOutput
}

func (*Record) ElementType() reflect.Type {
	return reflect.TypeOf((**Record)(nil)).Elem()
}

func (i *Record) ToRecordOutput() RecordOutput {
	return i.ToRecordOutputWithContext(context.Background())
}

func (i *Record) ToRecordOutputWithContext(ctx context.Context) RecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordOutput)
}

// RecordArrayInput is an input type that accepts RecordArray and RecordArrayOutput values.
// You can construct a concrete instance of `RecordArrayInput` via:
//
//	RecordArray{ RecordArgs{...} }
type RecordArrayInput interface {
	pulumi.Input

	ToRecordArrayOutput() RecordArrayOutput
	ToRecordArrayOutputWithContext(context.Context) RecordArrayOutput
}

type RecordArray []RecordInput

func (RecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Record)(nil)).Elem()
}

func (i RecordArray) ToRecordArrayOutput() RecordArrayOutput {
	return i.ToRecordArrayOutputWithContext(context.Background())
}

func (i RecordArray) ToRecordArrayOutputWithContext(ctx context.Context) RecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordArrayOutput)
}

// RecordMapInput is an input type that accepts RecordMap and RecordMapOutput values.
// You can construct a concrete instance of `RecordMapInput` via:
//
//	RecordMap{ "key": RecordArgs{...} }
type RecordMapInput interface {
	pulumi.Input

	ToRecordMapOutput() RecordMapOutput
	ToRecordMapOutputWithContext(context.Context) RecordMapOutput
}

type RecordMap map[string]RecordInput

func (RecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Record)(nil)).Elem()
}

func (i RecordMap) ToRecordMapOutput() RecordMapOutput {
	return i.ToRecordMapOutputWithContext(context.Background())
}

func (i RecordMap) ToRecordMapOutputWithContext(ctx context.Context) RecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordMapOutput)
}

type RecordOutput struct{ *pulumi.OutputState }

func (RecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Record)(nil)).Elem()
}

func (o RecordOutput) ToRecordOutput() RecordOutput {
	return o
}

func (o RecordOutput) ToRecordOutputWithContext(ctx context.Context) RecordOutput {
	return o
}

// The content of the record (an IPv4 for an `A` record, a string for a `TXT` record, etc.).
func (o RecordOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.Data }).(pulumi.StringOutput)
}

// The DNS zone of the domain. If the domain has no DNS zone, one will be automatically created.
func (o RecordOutput) DnsZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.DnsZone }).(pulumi.StringOutput)
}

// The FQDN of the record.
func (o RecordOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.Fqdn }).(pulumi.StringOutput)
}

// Return record based on client localisation
func (o RecordOutput) GeoIp() RecordGeoIpPtrOutput {
	return o.ApplyT(func(v *Record) RecordGeoIpPtrOutput { return v.GeoIp }).(RecordGeoIpPtrOutput)
}

// Return record based on client localisation
func (o RecordOutput) HttpService() RecordHttpServicePtrOutput {
	return o.ApplyT(func(v *Record) RecordHttpServicePtrOutput { return v.HttpService }).(RecordHttpServicePtrOutput)
}

// The name of the record (can be an empty string for a root record).
func (o RecordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The priority of the record (mostly used with an `MX` record).
func (o RecordOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *Record) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// The projectId you want to attach the resource to
func (o RecordOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Does the DNS zone is the root zone or not
func (o RecordOutput) RootZone() pulumi.BoolOutput {
	return o.ApplyT(func(v *Record) pulumi.BoolOutput { return v.RootZone }).(pulumi.BoolOutput)
}

// Time To Live of the record in seconds.
func (o RecordOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Record) pulumi.IntPtrOutput { return v.Ttl }).(pulumi.IntPtrOutput)
}

// The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).
func (o RecordOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Return record based on client subnet
func (o RecordOutput) Views() RecordViewArrayOutput {
	return o.ApplyT(func(v *Record) RecordViewArrayOutput { return v.Views }).(RecordViewArrayOutput)
}

// Return record based on weight
func (o RecordOutput) Weighteds() RecordWeightedArrayOutput {
	return o.ApplyT(func(v *Record) RecordWeightedArrayOutput { return v.Weighteds }).(RecordWeightedArrayOutput)
}

type RecordArrayOutput struct{ *pulumi.OutputState }

func (RecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Record)(nil)).Elem()
}

func (o RecordArrayOutput) ToRecordArrayOutput() RecordArrayOutput {
	return o
}

func (o RecordArrayOutput) ToRecordArrayOutputWithContext(ctx context.Context) RecordArrayOutput {
	return o
}

func (o RecordArrayOutput) Index(i pulumi.IntInput) RecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Record {
		return vs[0].([]*Record)[vs[1].(int)]
	}).(RecordOutput)
}

type RecordMapOutput struct{ *pulumi.OutputState }

func (RecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Record)(nil)).Elem()
}

func (o RecordMapOutput) ToRecordMapOutput() RecordMapOutput {
	return o
}

func (o RecordMapOutput) ToRecordMapOutputWithContext(ctx context.Context) RecordMapOutput {
	return o
}

func (o RecordMapOutput) MapIndex(k pulumi.StringInput) RecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Record {
		return vs[0].(map[string]*Record)[vs[1].(string)]
	}).(RecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecordInput)(nil)).Elem(), &Record{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordArrayInput)(nil)).Elem(), RecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordMapInput)(nil)).Elem(), RecordMap{})
	pulumi.RegisterOutputType(RecordOutput{})
	pulumi.RegisterOutputType(RecordArrayOutput{})
	pulumi.RegisterOutputType(RecordMapOutput{})
}
