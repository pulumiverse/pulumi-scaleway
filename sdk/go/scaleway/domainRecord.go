// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// The `domain.Record` resource allows you to create and manage DNS records for Scaleway domains.
//
// Refer to the Domains and DNS [product documentation](https://www.scaleway.com/en/docs/network/domains-and-dns/) and [API documentation](https://www.scaleway.com/en/developers/api/domains-and-dns/) for more information.
//
// ## Example Usage
//
// ### Create basic DNS records
//
// The folllowing commands allow you to:
//
// - create an A record for the `www.domain.tld` domain, pointing to `1.2.3.4` and another one pointing to `1.2.3.5`
//
// - create an MX record with the `mx.online.net.` mail server and a priority of 10, and another one with the `mx-cache.online.net.` mail server and a priority of 20
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/domain"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := domain.NewRecord(ctx, "www", &domain.RecordArgs{
//				DnsZone: pulumi.String("domain.tld"),
//				Name:    pulumi.String("www"),
//				Type:    pulumi.String("A"),
//				Data:    pulumi.String("1.2.3.4"),
//				Ttl:     pulumi.Int(3600),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "www2", &domain.RecordArgs{
//				DnsZone: pulumi.String("domain.tld"),
//				Name:    pulumi.String("www"),
//				Type:    pulumi.String("A"),
//				Data:    pulumi.String("1.2.3.5"),
//				Ttl:     pulumi.Int(3600),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "mx", &domain.RecordArgs{
//				DnsZone:  pulumi.String("domain.tld"),
//				Name:     pulumi.String(""),
//				Type:     pulumi.String("MX"),
//				Data:     pulumi.String("mx.online.net."),
//				Ttl:      pulumi.Int(3600),
//				Priority: pulumi.Int(10),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "mx2", &domain.RecordArgs{
//				DnsZone:  pulumi.String("domain.tld"),
//				Name:     pulumi.String(""),
//				Type:     pulumi.String("MX"),
//				Data:     pulumi.String("mx-cache.online.net."),
//				Ttl:      pulumi.Int(3600),
//				Priority: pulumi.Int(20),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create dynamic records
//
// The folllowing commands allow you to:
//
// - create a Geo IP record for `images.domain.tld` that points to different IPs based on the user's location: `1.2.3.5` for users in France (EU), and `4.3.2.1` for users in North America (NA)
//
// - create an HTTP service record for `app.domain.tld` that checks the health of specified IPs and responds based on their status.
//
// - create view-based records for `db.domain.tld` that resolve differently based on the client's subnet.
//
// - create a weighted record for `web.domain.tld` that directs traffic to different IPs based on their weights.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/domain"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := domain.NewRecord(ctx, "geo_ip", &domain.RecordArgs{
//				DnsZone: pulumi.String("domain.tld"),
//				Name:    pulumi.String("images"),
//				Type:    pulumi.String("A"),
//				Data:    pulumi.String("1.2.3.4"),
//				Ttl:     pulumi.Int(3600),
//				GeoIp: &domain.RecordGeoIpArgs{
//					Matches: domain.RecordGeoIpMatchArray{
//						&domain.RecordGeoIpMatchArgs{
//							Continents: pulumi.StringArray{
//								pulumi.String("EU"),
//							},
//							Countries: pulumi.StringArray{
//								pulumi.String("FR"),
//							},
//							Data: pulumi.String("1.2.3.5"),
//						},
//						&domain.RecordGeoIpMatchArgs{
//							Continents: pulumi.StringArray{
//								pulumi.String("NA"),
//							},
//							Data: pulumi.String("4.3.2.1"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "http_service", &domain.RecordArgs{
//				DnsZone: pulumi.String("domain.tld"),
//				Name:    pulumi.String("app"),
//				Type:    pulumi.String("A"),
//				Data:    pulumi.String("1.2.3.4"),
//				Ttl:     pulumi.Int(3600),
//				HttpService: &domain.RecordHttpServiceArgs{
//					Ips: pulumi.StringArray{
//						pulumi.String("1.2.3.5"),
//						pulumi.String("1.2.3.6"),
//					},
//					MustContain: pulumi.String("up"),
//					Url:         pulumi.String("http://mywebsite.com/health"),
//					UserAgent:   pulumi.String("scw_service_up"),
//					Strategy:    pulumi.String("hashed"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "view", &domain.RecordArgs{
//				DnsZone: pulumi.String("domain.tld"),
//				Name:    pulumi.String("db"),
//				Type:    pulumi.String("A"),
//				Data:    pulumi.String("1.2.3.4"),
//				Ttl:     pulumi.Int(3600),
//				Views: domain.RecordViewArray{
//					&domain.RecordViewArgs{
//						Subnet: pulumi.String("100.0.0.0/16"),
//						Data:   pulumi.String("1.2.3.5"),
//					},
//					&domain.RecordViewArgs{
//						Subnet: pulumi.String("100.1.0.0/16"),
//						Data:   pulumi.String("1.2.3.6"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "weighted", &domain.RecordArgs{
//				DnsZone: pulumi.String("domain.tld"),
//				Name:    pulumi.String("web"),
//				Type:    pulumi.String("A"),
//				Data:    pulumi.String("1.2.3.4"),
//				Ttl:     pulumi.Int(3600),
//				Weighteds: domain.RecordWeightedArray{
//					&domain.RecordWeightedArgs{
//						Ip:     pulumi.String("1.2.3.5"),
//						Weight: pulumi.Int(1),
//					},
//					&domain.RecordWeightedArgs{
//						Ip:     pulumi.String("1.2.3.6"),
//						Weight: pulumi.Int(2),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create an Instance and add records with the new Instance IP
//
// The following commands allow you to:
//
// - create a Scaleway Instance
// - assign The Instance's IP address to various DNS records for a specified DNS zone
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/domain"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/instance"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			// Your project ID.
//			projectId := cfg.Require("projectId")
//			// The DNS Zone used for testing records.
//			dnsZone := cfg.Require("dnsZone")
//			publicIp, err := instance.NewIp(ctx, "public_ip", &instance.IpArgs{
//				ProjectId: pulumi.String(projectId),
//			})
//			if err != nil {
//				return err
//			}
//			web, err := instance.NewServer(ctx, "web", &instance.ServerArgs{
//				ProjectId: pulumi.String(projectId),
//				Type:      pulumi.String("DEV1-S"),
//				Image:     pulumi.String("ubuntu_jammy"),
//				Tags: pulumi.StringArray{
//					pulumi.String("front"),
//					pulumi.String("web"),
//				},
//				IpId: publicIp.ID(),
//				RootVolume: &instance.ServerRootVolumeArgs{
//					SizeInGb: pulumi.Int(20),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "web_A", &domain.RecordArgs{
//				DnsZone: pulumi.String(dnsZone),
//				Name:    pulumi.String("web"),
//				Type:    pulumi.String("A"),
//				Data:    web.PublicIp,
//				Ttl:     pulumi.Int(3600),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "web_cname", &domain.RecordArgs{
//				DnsZone: pulumi.String(dnsZone),
//				Name:    pulumi.String("www"),
//				Type:    pulumi.String("CNAME"),
//				Data:    pulumi.Sprintf("web.%v.", dnsZone),
//				Ttl:     pulumi.Int(3600),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "web_alias", &domain.RecordArgs{
//				DnsZone: pulumi.String(dnsZone),
//				Name:    pulumi.String(""),
//				Type:    pulumi.String("ALIAS"),
//				Data:    pulumi.Sprintf("web.%v.", dnsZone),
//				Ttl:     pulumi.Int(3600),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Multiple records
//
// Some record types can have multiple data with the same name (e.g., `A`, `AAAA`, `MX`, `NS`, etc.). You can duplicate a `domain.Record`  resource with the same `name`, and the records will be added.
//
// Note however, that some records (e.g., CNAME, multiple dynamic records of different types) must be unique.
//
// ## Import
//
// This section explains how to import a record using the `{dns_zone}/{id}` format.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/domainRecord:DomainRecord www subdomain.domain.tld/11111111-1111-1111-1111-111111111111
// ```
//
// Deprecated: scaleway.index/domainrecord.DomainRecord has been deprecated in favor of scaleway.domain/record.Record
type DomainRecord struct {
	pulumi.CustomResourceState

	// The content of the record (an IPv4 for an `A` record, a string for a `TXT` record, etc.).
	Data pulumi.StringOutput `pulumi:"data"`
	// The DNS zone of the domain. If the domain has no DNS zone, one will be automatically created.
	DnsZone pulumi.StringOutput `pulumi:"dnsZone"`
	// The FQDN of the record.
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// Return record based on client localisation
	GeoIp DomainRecordGeoIpPtrOutput `pulumi:"geoIp"`
	// Return record based on client localisation
	HttpService DomainRecordHttpServicePtrOutput `pulumi:"httpService"`
	// When destroying a resource, if only NS records remain and this is set to `false`, the zone will be deleted. Note that each zone not deleted will [be billed](https://www.scaleway.com/en/dns/).
	KeepEmptyZone pulumi.BoolPtrOutput `pulumi:"keepEmptyZone"`
	// The name of the record (can be an empty string for a root record).
	Name pulumi.StringOutput `pulumi:"name"`
	// The priority of the record (mostly used with an `MX` record).
	Priority pulumi.IntOutput `pulumi:"priority"`
	// The projectId you want to attach the resource to
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Does the DNS zone is the root zone or not
	RootZone pulumi.BoolOutput `pulumi:"rootZone"`
	// Time To Live of the record in seconds.
	Ttl pulumi.IntPtrOutput `pulumi:"ttl"`
	// The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).
	Type pulumi.StringOutput `pulumi:"type"`
	// Return record based on client subnet
	Views DomainRecordViewArrayOutput `pulumi:"views"`
	// Return record based on weight
	Weighteds DomainRecordWeightedArrayOutput `pulumi:"weighteds"`
}

// NewDomainRecord registers a new resource with the given unique name, arguments, and options.
func NewDomainRecord(ctx *pulumi.Context,
	name string, args *DomainRecordArgs, opts ...pulumi.ResourceOption) (*DomainRecord, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Data == nil {
		return nil, errors.New("invalid value for required argument 'Data'")
	}
	if args.DnsZone == nil {
		return nil, errors.New("invalid value for required argument 'DnsZone'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainRecord
	err := ctx.RegisterResource("scaleway:index/domainRecord:DomainRecord", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainRecord gets an existing DomainRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainRecordState, opts ...pulumi.ResourceOption) (*DomainRecord, error) {
	var resource DomainRecord
	err := ctx.ReadResource("scaleway:index/domainRecord:DomainRecord", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainRecord resources.
type domainRecordState struct {
	// The content of the record (an IPv4 for an `A` record, a string for a `TXT` record, etc.).
	Data *string `pulumi:"data"`
	// The DNS zone of the domain. If the domain has no DNS zone, one will be automatically created.
	DnsZone *string `pulumi:"dnsZone"`
	// The FQDN of the record.
	Fqdn *string `pulumi:"fqdn"`
	// Return record based on client localisation
	GeoIp *DomainRecordGeoIp `pulumi:"geoIp"`
	// Return record based on client localisation
	HttpService *DomainRecordHttpService `pulumi:"httpService"`
	// When destroying a resource, if only NS records remain and this is set to `false`, the zone will be deleted. Note that each zone not deleted will [be billed](https://www.scaleway.com/en/dns/).
	KeepEmptyZone *bool `pulumi:"keepEmptyZone"`
	// The name of the record (can be an empty string for a root record).
	Name *string `pulumi:"name"`
	// The priority of the record (mostly used with an `MX` record).
	Priority *int `pulumi:"priority"`
	// The projectId you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// Does the DNS zone is the root zone or not
	RootZone *bool `pulumi:"rootZone"`
	// Time To Live of the record in seconds.
	Ttl *int `pulumi:"ttl"`
	// The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).
	Type *string `pulumi:"type"`
	// Return record based on client subnet
	Views []DomainRecordView `pulumi:"views"`
	// Return record based on weight
	Weighteds []DomainRecordWeighted `pulumi:"weighteds"`
}

type DomainRecordState struct {
	// The content of the record (an IPv4 for an `A` record, a string for a `TXT` record, etc.).
	Data pulumi.StringPtrInput
	// The DNS zone of the domain. If the domain has no DNS zone, one will be automatically created.
	DnsZone pulumi.StringPtrInput
	// The FQDN of the record.
	Fqdn pulumi.StringPtrInput
	// Return record based on client localisation
	GeoIp DomainRecordGeoIpPtrInput
	// Return record based on client localisation
	HttpService DomainRecordHttpServicePtrInput
	// When destroying a resource, if only NS records remain and this is set to `false`, the zone will be deleted. Note that each zone not deleted will [be billed](https://www.scaleway.com/en/dns/).
	KeepEmptyZone pulumi.BoolPtrInput
	// The name of the record (can be an empty string for a root record).
	Name pulumi.StringPtrInput
	// The priority of the record (mostly used with an `MX` record).
	Priority pulumi.IntPtrInput
	// The projectId you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// Does the DNS zone is the root zone or not
	RootZone pulumi.BoolPtrInput
	// Time To Live of the record in seconds.
	Ttl pulumi.IntPtrInput
	// The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).
	Type pulumi.StringPtrInput
	// Return record based on client subnet
	Views DomainRecordViewArrayInput
	// Return record based on weight
	Weighteds DomainRecordWeightedArrayInput
}

func (DomainRecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainRecordState)(nil)).Elem()
}

type domainRecordArgs struct {
	// The content of the record (an IPv4 for an `A` record, a string for a `TXT` record, etc.).
	Data string `pulumi:"data"`
	// The DNS zone of the domain. If the domain has no DNS zone, one will be automatically created.
	DnsZone string `pulumi:"dnsZone"`
	// Return record based on client localisation
	GeoIp *DomainRecordGeoIp `pulumi:"geoIp"`
	// Return record based on client localisation
	HttpService *DomainRecordHttpService `pulumi:"httpService"`
	// When destroying a resource, if only NS records remain and this is set to `false`, the zone will be deleted. Note that each zone not deleted will [be billed](https://www.scaleway.com/en/dns/).
	KeepEmptyZone *bool `pulumi:"keepEmptyZone"`
	// The name of the record (can be an empty string for a root record).
	Name *string `pulumi:"name"`
	// The priority of the record (mostly used with an `MX` record).
	Priority *int `pulumi:"priority"`
	// The projectId you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// Time To Live of the record in seconds.
	Ttl *int `pulumi:"ttl"`
	// The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).
	Type string `pulumi:"type"`
	// Return record based on client subnet
	Views []DomainRecordView `pulumi:"views"`
	// Return record based on weight
	Weighteds []DomainRecordWeighted `pulumi:"weighteds"`
}

// The set of arguments for constructing a DomainRecord resource.
type DomainRecordArgs struct {
	// The content of the record (an IPv4 for an `A` record, a string for a `TXT` record, etc.).
	Data pulumi.StringInput
	// The DNS zone of the domain. If the domain has no DNS zone, one will be automatically created.
	DnsZone pulumi.StringInput
	// Return record based on client localisation
	GeoIp DomainRecordGeoIpPtrInput
	// Return record based on client localisation
	HttpService DomainRecordHttpServicePtrInput
	// When destroying a resource, if only NS records remain and this is set to `false`, the zone will be deleted. Note that each zone not deleted will [be billed](https://www.scaleway.com/en/dns/).
	KeepEmptyZone pulumi.BoolPtrInput
	// The name of the record (can be an empty string for a root record).
	Name pulumi.StringPtrInput
	// The priority of the record (mostly used with an `MX` record).
	Priority pulumi.IntPtrInput
	// The projectId you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// Time To Live of the record in seconds.
	Ttl pulumi.IntPtrInput
	// The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).
	Type pulumi.StringInput
	// Return record based on client subnet
	Views DomainRecordViewArrayInput
	// Return record based on weight
	Weighteds DomainRecordWeightedArrayInput
}

func (DomainRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainRecordArgs)(nil)).Elem()
}

type DomainRecordInput interface {
	pulumi.Input

	ToDomainRecordOutput() DomainRecordOutput
	ToDomainRecordOutputWithContext(ctx context.Context) DomainRecordOutput
}

func (*DomainRecord) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainRecord)(nil)).Elem()
}

func (i *DomainRecord) ToDomainRecordOutput() DomainRecordOutput {
	return i.ToDomainRecordOutputWithContext(context.Background())
}

func (i *DomainRecord) ToDomainRecordOutputWithContext(ctx context.Context) DomainRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRecordOutput)
}

// DomainRecordArrayInput is an input type that accepts DomainRecordArray and DomainRecordArrayOutput values.
// You can construct a concrete instance of `DomainRecordArrayInput` via:
//
//	DomainRecordArray{ DomainRecordArgs{...} }
type DomainRecordArrayInput interface {
	pulumi.Input

	ToDomainRecordArrayOutput() DomainRecordArrayOutput
	ToDomainRecordArrayOutputWithContext(context.Context) DomainRecordArrayOutput
}

type DomainRecordArray []DomainRecordInput

func (DomainRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainRecord)(nil)).Elem()
}

func (i DomainRecordArray) ToDomainRecordArrayOutput() DomainRecordArrayOutput {
	return i.ToDomainRecordArrayOutputWithContext(context.Background())
}

func (i DomainRecordArray) ToDomainRecordArrayOutputWithContext(ctx context.Context) DomainRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRecordArrayOutput)
}

// DomainRecordMapInput is an input type that accepts DomainRecordMap and DomainRecordMapOutput values.
// You can construct a concrete instance of `DomainRecordMapInput` via:
//
//	DomainRecordMap{ "key": DomainRecordArgs{...} }
type DomainRecordMapInput interface {
	pulumi.Input

	ToDomainRecordMapOutput() DomainRecordMapOutput
	ToDomainRecordMapOutputWithContext(context.Context) DomainRecordMapOutput
}

type DomainRecordMap map[string]DomainRecordInput

func (DomainRecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainRecord)(nil)).Elem()
}

func (i DomainRecordMap) ToDomainRecordMapOutput() DomainRecordMapOutput {
	return i.ToDomainRecordMapOutputWithContext(context.Background())
}

func (i DomainRecordMap) ToDomainRecordMapOutputWithContext(ctx context.Context) DomainRecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRecordMapOutput)
}

type DomainRecordOutput struct{ *pulumi.OutputState }

func (DomainRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainRecord)(nil)).Elem()
}

func (o DomainRecordOutput) ToDomainRecordOutput() DomainRecordOutput {
	return o
}

func (o DomainRecordOutput) ToDomainRecordOutputWithContext(ctx context.Context) DomainRecordOutput {
	return o
}

// The content of the record (an IPv4 for an `A` record, a string for a `TXT` record, etc.).
func (o DomainRecordOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainRecord) pulumi.StringOutput { return v.Data }).(pulumi.StringOutput)
}

// The DNS zone of the domain. If the domain has no DNS zone, one will be automatically created.
func (o DomainRecordOutput) DnsZone() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainRecord) pulumi.StringOutput { return v.DnsZone }).(pulumi.StringOutput)
}

// The FQDN of the record.
func (o DomainRecordOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainRecord) pulumi.StringOutput { return v.Fqdn }).(pulumi.StringOutput)
}

// Return record based on client localisation
func (o DomainRecordOutput) GeoIp() DomainRecordGeoIpPtrOutput {
	return o.ApplyT(func(v *DomainRecord) DomainRecordGeoIpPtrOutput { return v.GeoIp }).(DomainRecordGeoIpPtrOutput)
}

// Return record based on client localisation
func (o DomainRecordOutput) HttpService() DomainRecordHttpServicePtrOutput {
	return o.ApplyT(func(v *DomainRecord) DomainRecordHttpServicePtrOutput { return v.HttpService }).(DomainRecordHttpServicePtrOutput)
}

// When destroying a resource, if only NS records remain and this is set to `false`, the zone will be deleted. Note that each zone not deleted will [be billed](https://www.scaleway.com/en/dns/).
func (o DomainRecordOutput) KeepEmptyZone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainRecord) pulumi.BoolPtrOutput { return v.KeepEmptyZone }).(pulumi.BoolPtrOutput)
}

// The name of the record (can be an empty string for a root record).
func (o DomainRecordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainRecord) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The priority of the record (mostly used with an `MX` record).
func (o DomainRecordOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *DomainRecord) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// The projectId you want to attach the resource to
func (o DomainRecordOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainRecord) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Does the DNS zone is the root zone or not
func (o DomainRecordOutput) RootZone() pulumi.BoolOutput {
	return o.ApplyT(func(v *DomainRecord) pulumi.BoolOutput { return v.RootZone }).(pulumi.BoolOutput)
}

// Time To Live of the record in seconds.
func (o DomainRecordOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainRecord) pulumi.IntPtrOutput { return v.Ttl }).(pulumi.IntPtrOutput)
}

// The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).
func (o DomainRecordOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainRecord) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Return record based on client subnet
func (o DomainRecordOutput) Views() DomainRecordViewArrayOutput {
	return o.ApplyT(func(v *DomainRecord) DomainRecordViewArrayOutput { return v.Views }).(DomainRecordViewArrayOutput)
}

// Return record based on weight
func (o DomainRecordOutput) Weighteds() DomainRecordWeightedArrayOutput {
	return o.ApplyT(func(v *DomainRecord) DomainRecordWeightedArrayOutput { return v.Weighteds }).(DomainRecordWeightedArrayOutput)
}

type DomainRecordArrayOutput struct{ *pulumi.OutputState }

func (DomainRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainRecord)(nil)).Elem()
}

func (o DomainRecordArrayOutput) ToDomainRecordArrayOutput() DomainRecordArrayOutput {
	return o
}

func (o DomainRecordArrayOutput) ToDomainRecordArrayOutputWithContext(ctx context.Context) DomainRecordArrayOutput {
	return o
}

func (o DomainRecordArrayOutput) Index(i pulumi.IntInput) DomainRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DomainRecord {
		return vs[0].([]*DomainRecord)[vs[1].(int)]
	}).(DomainRecordOutput)
}

type DomainRecordMapOutput struct{ *pulumi.OutputState }

func (DomainRecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainRecord)(nil)).Elem()
}

func (o DomainRecordMapOutput) ToDomainRecordMapOutput() DomainRecordMapOutput {
	return o
}

func (o DomainRecordMapOutput) ToDomainRecordMapOutputWithContext(ctx context.Context) DomainRecordMapOutput {
	return o
}

func (o DomainRecordMapOutput) MapIndex(k pulumi.StringInput) DomainRecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DomainRecord {
		return vs[0].(map[string]*DomainRecord)[vs[1].(string)]
	}).(DomainRecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRecordInput)(nil)).Elem(), &DomainRecord{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRecordArrayInput)(nil)).Elem(), DomainRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRecordMapInput)(nil)).Elem(), DomainRecordMap{})
	pulumi.RegisterOutputType(DomainRecordOutput{})
	pulumi.RegisterOutputType(DomainRecordArrayOutput{})
	pulumi.RegisterOutputType(DomainRecordMapOutput{})
}
