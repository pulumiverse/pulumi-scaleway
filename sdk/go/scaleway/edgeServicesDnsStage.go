// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Edge Services DNS Stages.
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewEdgeServicesDnsStage(ctx, "main", &scaleway.EdgeServicesDnsStageArgs{
//				PipelineId: pulumi.Any(mainScalewayEdgeServicesPipeline.Id),
//				Fqdns: pulumi.StringArray{
//					pulumi.String("subdomain.example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DNS stages can be imported using the `{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/edgeServicesDnsStage:EdgeServicesDnsStage basic 11111111-1111-1111-1111-111111111111
// ```
type EdgeServicesDnsStage struct {
	pulumi.CustomResourceState

	// The backend stage ID the DNS stage will be linked to. Only one of `backendStageId`, `cacheStageId` and `tlsStageId` should be specified.
	BackendStageId pulumi.StringOutput `pulumi:"backendStageId"`
	// The cache stage ID the DNS stage will be linked to. Only one of `backendStageId`, `cacheStageId` and `tlsStageId` should be specified.
	CacheStageId pulumi.StringOutput `pulumi:"cacheStageId"`
	// The date and time of the creation of the DNS stage.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Fully Qualified Domain Name (in the format subdomain.example.com) to attach to the stage.
	Fqdns pulumi.StringArrayOutput `pulumi:"fqdns"`
	// The ID of the pipeline.
	PipelineId pulumi.StringOutput `pulumi:"pipelineId"`
	// `projectId`) The ID of the project the DNS stage is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The TLS stage ID the DNS stage will be linked to. Only one of `backendStageId`, `cacheStageId` and `tlsStageId` should be specified.
	TlsStageId pulumi.StringOutput `pulumi:"tlsStageId"`
	// The type of the stage.
	Type pulumi.StringOutput `pulumi:"type"`
	// The date and time of the last update of the DNS stage.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewEdgeServicesDnsStage registers a new resource with the given unique name, arguments, and options.
func NewEdgeServicesDnsStage(ctx *pulumi.Context,
	name string, args *EdgeServicesDnsStageArgs, opts ...pulumi.ResourceOption) (*EdgeServicesDnsStage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PipelineId == nil {
		return nil, errors.New("invalid value for required argument 'PipelineId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EdgeServicesDnsStage
	err := ctx.RegisterResource("scaleway:index/edgeServicesDnsStage:EdgeServicesDnsStage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEdgeServicesDnsStage gets an existing EdgeServicesDnsStage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEdgeServicesDnsStage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EdgeServicesDnsStageState, opts ...pulumi.ResourceOption) (*EdgeServicesDnsStage, error) {
	var resource EdgeServicesDnsStage
	err := ctx.ReadResource("scaleway:index/edgeServicesDnsStage:EdgeServicesDnsStage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EdgeServicesDnsStage resources.
type edgeServicesDnsStageState struct {
	// The backend stage ID the DNS stage will be linked to. Only one of `backendStageId`, `cacheStageId` and `tlsStageId` should be specified.
	BackendStageId *string `pulumi:"backendStageId"`
	// The cache stage ID the DNS stage will be linked to. Only one of `backendStageId`, `cacheStageId` and `tlsStageId` should be specified.
	CacheStageId *string `pulumi:"cacheStageId"`
	// The date and time of the creation of the DNS stage.
	CreatedAt *string `pulumi:"createdAt"`
	// Fully Qualified Domain Name (in the format subdomain.example.com) to attach to the stage.
	Fqdns []string `pulumi:"fqdns"`
	// The ID of the pipeline.
	PipelineId *string `pulumi:"pipelineId"`
	// `projectId`) The ID of the project the DNS stage is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The TLS stage ID the DNS stage will be linked to. Only one of `backendStageId`, `cacheStageId` and `tlsStageId` should be specified.
	TlsStageId *string `pulumi:"tlsStageId"`
	// The type of the stage.
	Type *string `pulumi:"type"`
	// The date and time of the last update of the DNS stage.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type EdgeServicesDnsStageState struct {
	// The backend stage ID the DNS stage will be linked to. Only one of `backendStageId`, `cacheStageId` and `tlsStageId` should be specified.
	BackendStageId pulumi.StringPtrInput
	// The cache stage ID the DNS stage will be linked to. Only one of `backendStageId`, `cacheStageId` and `tlsStageId` should be specified.
	CacheStageId pulumi.StringPtrInput
	// The date and time of the creation of the DNS stage.
	CreatedAt pulumi.StringPtrInput
	// Fully Qualified Domain Name (in the format subdomain.example.com) to attach to the stage.
	Fqdns pulumi.StringArrayInput
	// The ID of the pipeline.
	PipelineId pulumi.StringPtrInput
	// `projectId`) The ID of the project the DNS stage is associated with.
	ProjectId pulumi.StringPtrInput
	// The TLS stage ID the DNS stage will be linked to. Only one of `backendStageId`, `cacheStageId` and `tlsStageId` should be specified.
	TlsStageId pulumi.StringPtrInput
	// The type of the stage.
	Type pulumi.StringPtrInput
	// The date and time of the last update of the DNS stage.
	UpdatedAt pulumi.StringPtrInput
}

func (EdgeServicesDnsStageState) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeServicesDnsStageState)(nil)).Elem()
}

type edgeServicesDnsStageArgs struct {
	// The backend stage ID the DNS stage will be linked to. Only one of `backendStageId`, `cacheStageId` and `tlsStageId` should be specified.
	BackendStageId *string `pulumi:"backendStageId"`
	// The cache stage ID the DNS stage will be linked to. Only one of `backendStageId`, `cacheStageId` and `tlsStageId` should be specified.
	CacheStageId *string `pulumi:"cacheStageId"`
	// Fully Qualified Domain Name (in the format subdomain.example.com) to attach to the stage.
	Fqdns []string `pulumi:"fqdns"`
	// The ID of the pipeline.
	PipelineId string `pulumi:"pipelineId"`
	// `projectId`) The ID of the project the DNS stage is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The TLS stage ID the DNS stage will be linked to. Only one of `backendStageId`, `cacheStageId` and `tlsStageId` should be specified.
	TlsStageId *string `pulumi:"tlsStageId"`
}

// The set of arguments for constructing a EdgeServicesDnsStage resource.
type EdgeServicesDnsStageArgs struct {
	// The backend stage ID the DNS stage will be linked to. Only one of `backendStageId`, `cacheStageId` and `tlsStageId` should be specified.
	BackendStageId pulumi.StringPtrInput
	// The cache stage ID the DNS stage will be linked to. Only one of `backendStageId`, `cacheStageId` and `tlsStageId` should be specified.
	CacheStageId pulumi.StringPtrInput
	// Fully Qualified Domain Name (in the format subdomain.example.com) to attach to the stage.
	Fqdns pulumi.StringArrayInput
	// The ID of the pipeline.
	PipelineId pulumi.StringInput
	// `projectId`) The ID of the project the DNS stage is associated with.
	ProjectId pulumi.StringPtrInput
	// The TLS stage ID the DNS stage will be linked to. Only one of `backendStageId`, `cacheStageId` and `tlsStageId` should be specified.
	TlsStageId pulumi.StringPtrInput
}

func (EdgeServicesDnsStageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeServicesDnsStageArgs)(nil)).Elem()
}

type EdgeServicesDnsStageInput interface {
	pulumi.Input

	ToEdgeServicesDnsStageOutput() EdgeServicesDnsStageOutput
	ToEdgeServicesDnsStageOutputWithContext(ctx context.Context) EdgeServicesDnsStageOutput
}

func (*EdgeServicesDnsStage) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeServicesDnsStage)(nil)).Elem()
}

func (i *EdgeServicesDnsStage) ToEdgeServicesDnsStageOutput() EdgeServicesDnsStageOutput {
	return i.ToEdgeServicesDnsStageOutputWithContext(context.Background())
}

func (i *EdgeServicesDnsStage) ToEdgeServicesDnsStageOutputWithContext(ctx context.Context) EdgeServicesDnsStageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeServicesDnsStageOutput)
}

// EdgeServicesDnsStageArrayInput is an input type that accepts EdgeServicesDnsStageArray and EdgeServicesDnsStageArrayOutput values.
// You can construct a concrete instance of `EdgeServicesDnsStageArrayInput` via:
//
//	EdgeServicesDnsStageArray{ EdgeServicesDnsStageArgs{...} }
type EdgeServicesDnsStageArrayInput interface {
	pulumi.Input

	ToEdgeServicesDnsStageArrayOutput() EdgeServicesDnsStageArrayOutput
	ToEdgeServicesDnsStageArrayOutputWithContext(context.Context) EdgeServicesDnsStageArrayOutput
}

type EdgeServicesDnsStageArray []EdgeServicesDnsStageInput

func (EdgeServicesDnsStageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EdgeServicesDnsStage)(nil)).Elem()
}

func (i EdgeServicesDnsStageArray) ToEdgeServicesDnsStageArrayOutput() EdgeServicesDnsStageArrayOutput {
	return i.ToEdgeServicesDnsStageArrayOutputWithContext(context.Background())
}

func (i EdgeServicesDnsStageArray) ToEdgeServicesDnsStageArrayOutputWithContext(ctx context.Context) EdgeServicesDnsStageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeServicesDnsStageArrayOutput)
}

// EdgeServicesDnsStageMapInput is an input type that accepts EdgeServicesDnsStageMap and EdgeServicesDnsStageMapOutput values.
// You can construct a concrete instance of `EdgeServicesDnsStageMapInput` via:
//
//	EdgeServicesDnsStageMap{ "key": EdgeServicesDnsStageArgs{...} }
type EdgeServicesDnsStageMapInput interface {
	pulumi.Input

	ToEdgeServicesDnsStageMapOutput() EdgeServicesDnsStageMapOutput
	ToEdgeServicesDnsStageMapOutputWithContext(context.Context) EdgeServicesDnsStageMapOutput
}

type EdgeServicesDnsStageMap map[string]EdgeServicesDnsStageInput

func (EdgeServicesDnsStageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EdgeServicesDnsStage)(nil)).Elem()
}

func (i EdgeServicesDnsStageMap) ToEdgeServicesDnsStageMapOutput() EdgeServicesDnsStageMapOutput {
	return i.ToEdgeServicesDnsStageMapOutputWithContext(context.Background())
}

func (i EdgeServicesDnsStageMap) ToEdgeServicesDnsStageMapOutputWithContext(ctx context.Context) EdgeServicesDnsStageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeServicesDnsStageMapOutput)
}

type EdgeServicesDnsStageOutput struct{ *pulumi.OutputState }

func (EdgeServicesDnsStageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeServicesDnsStage)(nil)).Elem()
}

func (o EdgeServicesDnsStageOutput) ToEdgeServicesDnsStageOutput() EdgeServicesDnsStageOutput {
	return o
}

func (o EdgeServicesDnsStageOutput) ToEdgeServicesDnsStageOutputWithContext(ctx context.Context) EdgeServicesDnsStageOutput {
	return o
}

// The backend stage ID the DNS stage will be linked to. Only one of `backendStageId`, `cacheStageId` and `tlsStageId` should be specified.
func (o EdgeServicesDnsStageOutput) BackendStageId() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeServicesDnsStage) pulumi.StringOutput { return v.BackendStageId }).(pulumi.StringOutput)
}

// The cache stage ID the DNS stage will be linked to. Only one of `backendStageId`, `cacheStageId` and `tlsStageId` should be specified.
func (o EdgeServicesDnsStageOutput) CacheStageId() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeServicesDnsStage) pulumi.StringOutput { return v.CacheStageId }).(pulumi.StringOutput)
}

// The date and time of the creation of the DNS stage.
func (o EdgeServicesDnsStageOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeServicesDnsStage) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Fully Qualified Domain Name (in the format subdomain.example.com) to attach to the stage.
func (o EdgeServicesDnsStageOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EdgeServicesDnsStage) pulumi.StringArrayOutput { return v.Fqdns }).(pulumi.StringArrayOutput)
}

// The ID of the pipeline.
func (o EdgeServicesDnsStageOutput) PipelineId() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeServicesDnsStage) pulumi.StringOutput { return v.PipelineId }).(pulumi.StringOutput)
}

// `projectId`) The ID of the project the DNS stage is associated with.
func (o EdgeServicesDnsStageOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeServicesDnsStage) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The TLS stage ID the DNS stage will be linked to. Only one of `backendStageId`, `cacheStageId` and `tlsStageId` should be specified.
func (o EdgeServicesDnsStageOutput) TlsStageId() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeServicesDnsStage) pulumi.StringOutput { return v.TlsStageId }).(pulumi.StringOutput)
}

// The type of the stage.
func (o EdgeServicesDnsStageOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeServicesDnsStage) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The date and time of the last update of the DNS stage.
func (o EdgeServicesDnsStageOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeServicesDnsStage) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type EdgeServicesDnsStageArrayOutput struct{ *pulumi.OutputState }

func (EdgeServicesDnsStageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EdgeServicesDnsStage)(nil)).Elem()
}

func (o EdgeServicesDnsStageArrayOutput) ToEdgeServicesDnsStageArrayOutput() EdgeServicesDnsStageArrayOutput {
	return o
}

func (o EdgeServicesDnsStageArrayOutput) ToEdgeServicesDnsStageArrayOutputWithContext(ctx context.Context) EdgeServicesDnsStageArrayOutput {
	return o
}

func (o EdgeServicesDnsStageArrayOutput) Index(i pulumi.IntInput) EdgeServicesDnsStageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EdgeServicesDnsStage {
		return vs[0].([]*EdgeServicesDnsStage)[vs[1].(int)]
	}).(EdgeServicesDnsStageOutput)
}

type EdgeServicesDnsStageMapOutput struct{ *pulumi.OutputState }

func (EdgeServicesDnsStageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EdgeServicesDnsStage)(nil)).Elem()
}

func (o EdgeServicesDnsStageMapOutput) ToEdgeServicesDnsStageMapOutput() EdgeServicesDnsStageMapOutput {
	return o
}

func (o EdgeServicesDnsStageMapOutput) ToEdgeServicesDnsStageMapOutputWithContext(ctx context.Context) EdgeServicesDnsStageMapOutput {
	return o
}

func (o EdgeServicesDnsStageMapOutput) MapIndex(k pulumi.StringInput) EdgeServicesDnsStageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EdgeServicesDnsStage {
		return vs[0].(map[string]*EdgeServicesDnsStage)[vs[1].(string)]
	}).(EdgeServicesDnsStageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeServicesDnsStageInput)(nil)).Elem(), &EdgeServicesDnsStage{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeServicesDnsStageArrayInput)(nil)).Elem(), EdgeServicesDnsStageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeServicesDnsStageMapInput)(nil)).Elem(), EdgeServicesDnsStageMap{})
	pulumi.RegisterOutputType(EdgeServicesDnsStageOutput{})
	pulumi.RegisterOutputType(EdgeServicesDnsStageArrayOutput{})
	pulumi.RegisterOutputType(EdgeServicesDnsStageMapOutput{})
}
