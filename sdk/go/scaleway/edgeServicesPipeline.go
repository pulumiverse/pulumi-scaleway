// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Edge Services Pipelines.
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewEdgeServicesPipeline(ctx, "main", &scaleway.EdgeServicesPipelineArgs{
//				Name:        pulumi.String("pipeline-name"),
//				Description: pulumi.String("pipeline description"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Complete pipeline
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := scaleway.NewEdgeServicesPipeline(ctx, "main", &scaleway.EdgeServicesPipelineArgs{
//				Name:        pulumi.String("pipeline-name"),
//				Description: pulumi.String("pipeline description"),
//			})
//			if err != nil {
//				return err
//			}
//			mainEdgeServicesBackendStage, err := scaleway.NewEdgeServicesBackendStage(ctx, "main", &scaleway.EdgeServicesBackendStageArgs{
//				PipelineId: main.ID(),
//				S3BackendConfig: &scaleway.EdgeServicesBackendStageS3BackendConfigArgs{
//					BucketName:   pulumi.String("my-bucket-name"),
//					BucketRegion: pulumi.String("fr-par"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			mainEdgeServicesCacheStage, err := scaleway.NewEdgeServicesCacheStage(ctx, "main", &scaleway.EdgeServicesCacheStageArgs{
//				PipelineId:     main.ID(),
//				BackendStageId: mainEdgeServicesBackendStage.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			mainEdgeServicesTlsStage, err := scaleway.NewEdgeServicesTlsStage(ctx, "main", &scaleway.EdgeServicesTlsStageArgs{
//				PipelineId:         main.ID(),
//				CacheStageId:       mainEdgeServicesCacheStage.ID(),
//				ManagedCertificate: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			mainEdgeServicesDnsStage, err := scaleway.NewEdgeServicesDnsStage(ctx, "main", &scaleway.EdgeServicesDnsStageArgs{
//				PipelineId: main.ID(),
//				TlsStageId: mainEdgeServicesTlsStage.ID(),
//				Fqdns: pulumi.StringArray{
//					pulumi.String("subdomain.example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewEdgeServicesHeadStage(ctx, "main", &scaleway.EdgeServicesHeadStageArgs{
//				PipelineId:  main.ID(),
//				HeadStageId: mainEdgeServicesDnsStage.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Pipelines can be imported using the `{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/edgeServicesPipeline:EdgeServicesPipeline basic 11111111-1111-1111-1111-111111111111
// ```
type EdgeServicesPipeline struct {
	pulumi.CustomResourceState

	// The date and time of the creation of the pipeline.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the pipeline.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the pipeline.
	Name pulumi.StringOutput `pulumi:"name"`
	// `projectId`) The ID of the project the pipeline is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The status of user pipeline.
	Status pulumi.StringOutput `pulumi:"status"`
	// The date and time of the last update of the pipeline.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewEdgeServicesPipeline registers a new resource with the given unique name, arguments, and options.
func NewEdgeServicesPipeline(ctx *pulumi.Context,
	name string, args *EdgeServicesPipelineArgs, opts ...pulumi.ResourceOption) (*EdgeServicesPipeline, error) {
	if args == nil {
		args = &EdgeServicesPipelineArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EdgeServicesPipeline
	err := ctx.RegisterResource("scaleway:index/edgeServicesPipeline:EdgeServicesPipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEdgeServicesPipeline gets an existing EdgeServicesPipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEdgeServicesPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EdgeServicesPipelineState, opts ...pulumi.ResourceOption) (*EdgeServicesPipeline, error) {
	var resource EdgeServicesPipeline
	err := ctx.ReadResource("scaleway:index/edgeServicesPipeline:EdgeServicesPipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EdgeServicesPipeline resources.
type edgeServicesPipelineState struct {
	// The date and time of the creation of the pipeline.
	CreatedAt *string `pulumi:"createdAt"`
	// The description of the pipeline.
	Description *string `pulumi:"description"`
	// The name of the pipeline.
	Name *string `pulumi:"name"`
	// `projectId`) The ID of the project the pipeline is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The status of user pipeline.
	Status *string `pulumi:"status"`
	// The date and time of the last update of the pipeline.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type EdgeServicesPipelineState struct {
	// The date and time of the creation of the pipeline.
	CreatedAt pulumi.StringPtrInput
	// The description of the pipeline.
	Description pulumi.StringPtrInput
	// The name of the pipeline.
	Name pulumi.StringPtrInput
	// `projectId`) The ID of the project the pipeline is associated with.
	ProjectId pulumi.StringPtrInput
	// The status of user pipeline.
	Status pulumi.StringPtrInput
	// The date and time of the last update of the pipeline.
	UpdatedAt pulumi.StringPtrInput
}

func (EdgeServicesPipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeServicesPipelineState)(nil)).Elem()
}

type edgeServicesPipelineArgs struct {
	// The description of the pipeline.
	Description *string `pulumi:"description"`
	// The name of the pipeline.
	Name *string `pulumi:"name"`
	// `projectId`) The ID of the project the pipeline is associated with.
	ProjectId *string `pulumi:"projectId"`
}

// The set of arguments for constructing a EdgeServicesPipeline resource.
type EdgeServicesPipelineArgs struct {
	// The description of the pipeline.
	Description pulumi.StringPtrInput
	// The name of the pipeline.
	Name pulumi.StringPtrInput
	// `projectId`) The ID of the project the pipeline is associated with.
	ProjectId pulumi.StringPtrInput
}

func (EdgeServicesPipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeServicesPipelineArgs)(nil)).Elem()
}

type EdgeServicesPipelineInput interface {
	pulumi.Input

	ToEdgeServicesPipelineOutput() EdgeServicesPipelineOutput
	ToEdgeServicesPipelineOutputWithContext(ctx context.Context) EdgeServicesPipelineOutput
}

func (*EdgeServicesPipeline) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeServicesPipeline)(nil)).Elem()
}

func (i *EdgeServicesPipeline) ToEdgeServicesPipelineOutput() EdgeServicesPipelineOutput {
	return i.ToEdgeServicesPipelineOutputWithContext(context.Background())
}

func (i *EdgeServicesPipeline) ToEdgeServicesPipelineOutputWithContext(ctx context.Context) EdgeServicesPipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeServicesPipelineOutput)
}

// EdgeServicesPipelineArrayInput is an input type that accepts EdgeServicesPipelineArray and EdgeServicesPipelineArrayOutput values.
// You can construct a concrete instance of `EdgeServicesPipelineArrayInput` via:
//
//	EdgeServicesPipelineArray{ EdgeServicesPipelineArgs{...} }
type EdgeServicesPipelineArrayInput interface {
	pulumi.Input

	ToEdgeServicesPipelineArrayOutput() EdgeServicesPipelineArrayOutput
	ToEdgeServicesPipelineArrayOutputWithContext(context.Context) EdgeServicesPipelineArrayOutput
}

type EdgeServicesPipelineArray []EdgeServicesPipelineInput

func (EdgeServicesPipelineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EdgeServicesPipeline)(nil)).Elem()
}

func (i EdgeServicesPipelineArray) ToEdgeServicesPipelineArrayOutput() EdgeServicesPipelineArrayOutput {
	return i.ToEdgeServicesPipelineArrayOutputWithContext(context.Background())
}

func (i EdgeServicesPipelineArray) ToEdgeServicesPipelineArrayOutputWithContext(ctx context.Context) EdgeServicesPipelineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeServicesPipelineArrayOutput)
}

// EdgeServicesPipelineMapInput is an input type that accepts EdgeServicesPipelineMap and EdgeServicesPipelineMapOutput values.
// You can construct a concrete instance of `EdgeServicesPipelineMapInput` via:
//
//	EdgeServicesPipelineMap{ "key": EdgeServicesPipelineArgs{...} }
type EdgeServicesPipelineMapInput interface {
	pulumi.Input

	ToEdgeServicesPipelineMapOutput() EdgeServicesPipelineMapOutput
	ToEdgeServicesPipelineMapOutputWithContext(context.Context) EdgeServicesPipelineMapOutput
}

type EdgeServicesPipelineMap map[string]EdgeServicesPipelineInput

func (EdgeServicesPipelineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EdgeServicesPipeline)(nil)).Elem()
}

func (i EdgeServicesPipelineMap) ToEdgeServicesPipelineMapOutput() EdgeServicesPipelineMapOutput {
	return i.ToEdgeServicesPipelineMapOutputWithContext(context.Background())
}

func (i EdgeServicesPipelineMap) ToEdgeServicesPipelineMapOutputWithContext(ctx context.Context) EdgeServicesPipelineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeServicesPipelineMapOutput)
}

type EdgeServicesPipelineOutput struct{ *pulumi.OutputState }

func (EdgeServicesPipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeServicesPipeline)(nil)).Elem()
}

func (o EdgeServicesPipelineOutput) ToEdgeServicesPipelineOutput() EdgeServicesPipelineOutput {
	return o
}

func (o EdgeServicesPipelineOutput) ToEdgeServicesPipelineOutputWithContext(ctx context.Context) EdgeServicesPipelineOutput {
	return o
}

// The date and time of the creation of the pipeline.
func (o EdgeServicesPipelineOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeServicesPipeline) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the pipeline.
func (o EdgeServicesPipelineOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeServicesPipeline) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the pipeline.
func (o EdgeServicesPipelineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeServicesPipeline) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// `projectId`) The ID of the project the pipeline is associated with.
func (o EdgeServicesPipelineOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeServicesPipeline) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The status of user pipeline.
func (o EdgeServicesPipelineOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeServicesPipeline) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The date and time of the last update of the pipeline.
func (o EdgeServicesPipelineOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeServicesPipeline) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type EdgeServicesPipelineArrayOutput struct{ *pulumi.OutputState }

func (EdgeServicesPipelineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EdgeServicesPipeline)(nil)).Elem()
}

func (o EdgeServicesPipelineArrayOutput) ToEdgeServicesPipelineArrayOutput() EdgeServicesPipelineArrayOutput {
	return o
}

func (o EdgeServicesPipelineArrayOutput) ToEdgeServicesPipelineArrayOutputWithContext(ctx context.Context) EdgeServicesPipelineArrayOutput {
	return o
}

func (o EdgeServicesPipelineArrayOutput) Index(i pulumi.IntInput) EdgeServicesPipelineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EdgeServicesPipeline {
		return vs[0].([]*EdgeServicesPipeline)[vs[1].(int)]
	}).(EdgeServicesPipelineOutput)
}

type EdgeServicesPipelineMapOutput struct{ *pulumi.OutputState }

func (EdgeServicesPipelineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EdgeServicesPipeline)(nil)).Elem()
}

func (o EdgeServicesPipelineMapOutput) ToEdgeServicesPipelineMapOutput() EdgeServicesPipelineMapOutput {
	return o
}

func (o EdgeServicesPipelineMapOutput) ToEdgeServicesPipelineMapOutputWithContext(ctx context.Context) EdgeServicesPipelineMapOutput {
	return o
}

func (o EdgeServicesPipelineMapOutput) MapIndex(k pulumi.StringInput) EdgeServicesPipelineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EdgeServicesPipeline {
		return vs[0].(map[string]*EdgeServicesPipeline)[vs[1].(string)]
	}).(EdgeServicesPipelineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeServicesPipelineInput)(nil)).Elem(), &EdgeServicesPipeline{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeServicesPipelineArrayInput)(nil)).Elem(), EdgeServicesPipelineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeServicesPipelineMapInput)(nil)).Elem(), EdgeServicesPipelineMap{})
	pulumi.RegisterOutputType(EdgeServicesPipelineOutput{})
	pulumi.RegisterOutputType(EdgeServicesPipelineArrayOutput{})
	pulumi.RegisterOutputType(EdgeServicesPipelineMapOutput{})
}
