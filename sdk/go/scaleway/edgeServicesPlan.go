// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Edge Services plans.
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewEdgeServicesPlan(ctx, "main", &scaleway.EdgeServicesPlanArgs{
//				Name: pulumi.String("starter"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Plans can be imported using `{project_id}/{plan_name}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/edgeServicesPlan:EdgeServicesPlan main 11111111-1111-1111-1111-111111111111/starter
// ```
type EdgeServicesPlan struct {
	pulumi.CustomResourceState

	// The name of the plan.
	Name pulumi.StringOutput `pulumi:"name"`
	// `projectId`) The ID of the project the plan is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
}

// NewEdgeServicesPlan registers a new resource with the given unique name, arguments, and options.
func NewEdgeServicesPlan(ctx *pulumi.Context,
	name string, args *EdgeServicesPlanArgs, opts ...pulumi.ResourceOption) (*EdgeServicesPlan, error) {
	if args == nil {
		args = &EdgeServicesPlanArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EdgeServicesPlan
	err := ctx.RegisterResource("scaleway:index/edgeServicesPlan:EdgeServicesPlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEdgeServicesPlan gets an existing EdgeServicesPlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEdgeServicesPlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EdgeServicesPlanState, opts ...pulumi.ResourceOption) (*EdgeServicesPlan, error) {
	var resource EdgeServicesPlan
	err := ctx.ReadResource("scaleway:index/edgeServicesPlan:EdgeServicesPlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EdgeServicesPlan resources.
type edgeServicesPlanState struct {
	// The name of the plan.
	Name *string `pulumi:"name"`
	// `projectId`) The ID of the project the plan is associated with.
	ProjectId *string `pulumi:"projectId"`
}

type EdgeServicesPlanState struct {
	// The name of the plan.
	Name pulumi.StringPtrInput
	// `projectId`) The ID of the project the plan is associated with.
	ProjectId pulumi.StringPtrInput
}

func (EdgeServicesPlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeServicesPlanState)(nil)).Elem()
}

type edgeServicesPlanArgs struct {
	// The name of the plan.
	Name *string `pulumi:"name"`
	// `projectId`) The ID of the project the plan is associated with.
	ProjectId *string `pulumi:"projectId"`
}

// The set of arguments for constructing a EdgeServicesPlan resource.
type EdgeServicesPlanArgs struct {
	// The name of the plan.
	Name pulumi.StringPtrInput
	// `projectId`) The ID of the project the plan is associated with.
	ProjectId pulumi.StringPtrInput
}

func (EdgeServicesPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeServicesPlanArgs)(nil)).Elem()
}

type EdgeServicesPlanInput interface {
	pulumi.Input

	ToEdgeServicesPlanOutput() EdgeServicesPlanOutput
	ToEdgeServicesPlanOutputWithContext(ctx context.Context) EdgeServicesPlanOutput
}

func (*EdgeServicesPlan) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeServicesPlan)(nil)).Elem()
}

func (i *EdgeServicesPlan) ToEdgeServicesPlanOutput() EdgeServicesPlanOutput {
	return i.ToEdgeServicesPlanOutputWithContext(context.Background())
}

func (i *EdgeServicesPlan) ToEdgeServicesPlanOutputWithContext(ctx context.Context) EdgeServicesPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeServicesPlanOutput)
}

// EdgeServicesPlanArrayInput is an input type that accepts EdgeServicesPlanArray and EdgeServicesPlanArrayOutput values.
// You can construct a concrete instance of `EdgeServicesPlanArrayInput` via:
//
//	EdgeServicesPlanArray{ EdgeServicesPlanArgs{...} }
type EdgeServicesPlanArrayInput interface {
	pulumi.Input

	ToEdgeServicesPlanArrayOutput() EdgeServicesPlanArrayOutput
	ToEdgeServicesPlanArrayOutputWithContext(context.Context) EdgeServicesPlanArrayOutput
}

type EdgeServicesPlanArray []EdgeServicesPlanInput

func (EdgeServicesPlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EdgeServicesPlan)(nil)).Elem()
}

func (i EdgeServicesPlanArray) ToEdgeServicesPlanArrayOutput() EdgeServicesPlanArrayOutput {
	return i.ToEdgeServicesPlanArrayOutputWithContext(context.Background())
}

func (i EdgeServicesPlanArray) ToEdgeServicesPlanArrayOutputWithContext(ctx context.Context) EdgeServicesPlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeServicesPlanArrayOutput)
}

// EdgeServicesPlanMapInput is an input type that accepts EdgeServicesPlanMap and EdgeServicesPlanMapOutput values.
// You can construct a concrete instance of `EdgeServicesPlanMapInput` via:
//
//	EdgeServicesPlanMap{ "key": EdgeServicesPlanArgs{...} }
type EdgeServicesPlanMapInput interface {
	pulumi.Input

	ToEdgeServicesPlanMapOutput() EdgeServicesPlanMapOutput
	ToEdgeServicesPlanMapOutputWithContext(context.Context) EdgeServicesPlanMapOutput
}

type EdgeServicesPlanMap map[string]EdgeServicesPlanInput

func (EdgeServicesPlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EdgeServicesPlan)(nil)).Elem()
}

func (i EdgeServicesPlanMap) ToEdgeServicesPlanMapOutput() EdgeServicesPlanMapOutput {
	return i.ToEdgeServicesPlanMapOutputWithContext(context.Background())
}

func (i EdgeServicesPlanMap) ToEdgeServicesPlanMapOutputWithContext(ctx context.Context) EdgeServicesPlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeServicesPlanMapOutput)
}

type EdgeServicesPlanOutput struct{ *pulumi.OutputState }

func (EdgeServicesPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeServicesPlan)(nil)).Elem()
}

func (o EdgeServicesPlanOutput) ToEdgeServicesPlanOutput() EdgeServicesPlanOutput {
	return o
}

func (o EdgeServicesPlanOutput) ToEdgeServicesPlanOutputWithContext(ctx context.Context) EdgeServicesPlanOutput {
	return o
}

// The name of the plan.
func (o EdgeServicesPlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeServicesPlan) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// `projectId`) The ID of the project the plan is associated with.
func (o EdgeServicesPlanOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeServicesPlan) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

type EdgeServicesPlanArrayOutput struct{ *pulumi.OutputState }

func (EdgeServicesPlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EdgeServicesPlan)(nil)).Elem()
}

func (o EdgeServicesPlanArrayOutput) ToEdgeServicesPlanArrayOutput() EdgeServicesPlanArrayOutput {
	return o
}

func (o EdgeServicesPlanArrayOutput) ToEdgeServicesPlanArrayOutputWithContext(ctx context.Context) EdgeServicesPlanArrayOutput {
	return o
}

func (o EdgeServicesPlanArrayOutput) Index(i pulumi.IntInput) EdgeServicesPlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EdgeServicesPlan {
		return vs[0].([]*EdgeServicesPlan)[vs[1].(int)]
	}).(EdgeServicesPlanOutput)
}

type EdgeServicesPlanMapOutput struct{ *pulumi.OutputState }

func (EdgeServicesPlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EdgeServicesPlan)(nil)).Elem()
}

func (o EdgeServicesPlanMapOutput) ToEdgeServicesPlanMapOutput() EdgeServicesPlanMapOutput {
	return o
}

func (o EdgeServicesPlanMapOutput) ToEdgeServicesPlanMapOutputWithContext(ctx context.Context) EdgeServicesPlanMapOutput {
	return o
}

func (o EdgeServicesPlanMapOutput) MapIndex(k pulumi.StringInput) EdgeServicesPlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EdgeServicesPlan {
		return vs[0].(map[string]*EdgeServicesPlan)[vs[1].(string)]
	}).(EdgeServicesPlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeServicesPlanInput)(nil)).Elem(), &EdgeServicesPlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeServicesPlanArrayInput)(nil)).Elem(), EdgeServicesPlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeServicesPlanMapInput)(nil)).Elem(), EdgeServicesPlanMap{})
	pulumi.RegisterOutputType(EdgeServicesPlanOutput{})
	pulumi.RegisterOutputType(EdgeServicesPlanArrayOutput{})
	pulumi.RegisterOutputType(EdgeServicesPlanMapOutput{})
}
