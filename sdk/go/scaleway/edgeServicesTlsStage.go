// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Edge Services TLS Stages.
//
// ## Example Usage
//
// ### Managed
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewEdgeServicesTlsStage(ctx, "main", &scaleway.EdgeServicesTlsStageArgs{
//				PipelineId:         pulumi.Any(mainScalewayEdgeServicesPipeline.Id),
//				ManagedCertificate: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With a certificate stored in Scaleway Secret Manager
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewEdgeServicesTlsStage(ctx, "main", &scaleway.EdgeServicesTlsStageArgs{
//				PipelineId: pulumi.Any(mainScalewayEdgeServicesPipeline.Id),
//				Secrets: scaleway.EdgeServicesTlsStageSecretArray{
//					&scaleway.EdgeServicesTlsStageSecretArgs{
//						SecretId: pulumi.String("11111111-1111-1111-1111-111111111111"),
//						Region:   pulumi.String("fr-par"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// TLS stages can be imported using the `{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/edgeServicesTlsStage:EdgeServicesTlsStage basic 11111111-1111-1111-1111-111111111111
// ```
type EdgeServicesTlsStage struct {
	pulumi.CustomResourceState

	// The backend stage ID the TLS stage will be linked to.
	BackendStageId pulumi.StringOutput `pulumi:"backendStageId"`
	// The cache stage ID the TLS stage will be linked to.
	CacheStageId pulumi.StringOutput `pulumi:"cacheStageId"`
	// The expiration date of the certificate.
	CertificateExpiresAt pulumi.StringOutput `pulumi:"certificateExpiresAt"`
	// The date and time of the creation of the TLS stage.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Set to true when Scaleway generates and manages a Let's Encrypt certificate for the TLS stage/custom endpoint.
	ManagedCertificate pulumi.BoolOutput `pulumi:"managedCertificate"`
	// The ID of the pipeline.
	PipelineId pulumi.StringOutput `pulumi:"pipelineId"`
	// `projectId`) The ID of the project the TLS stage is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The TLS secrets.
	Secrets EdgeServicesTlsStageSecretArrayOutput `pulumi:"secrets"`
	// The date and time of the last update of the TLS stage.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewEdgeServicesTlsStage registers a new resource with the given unique name, arguments, and options.
func NewEdgeServicesTlsStage(ctx *pulumi.Context,
	name string, args *EdgeServicesTlsStageArgs, opts ...pulumi.ResourceOption) (*EdgeServicesTlsStage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PipelineId == nil {
		return nil, errors.New("invalid value for required argument 'PipelineId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EdgeServicesTlsStage
	err := ctx.RegisterResource("scaleway:index/edgeServicesTlsStage:EdgeServicesTlsStage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEdgeServicesTlsStage gets an existing EdgeServicesTlsStage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEdgeServicesTlsStage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EdgeServicesTlsStageState, opts ...pulumi.ResourceOption) (*EdgeServicesTlsStage, error) {
	var resource EdgeServicesTlsStage
	err := ctx.ReadResource("scaleway:index/edgeServicesTlsStage:EdgeServicesTlsStage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EdgeServicesTlsStage resources.
type edgeServicesTlsStageState struct {
	// The backend stage ID the TLS stage will be linked to.
	BackendStageId *string `pulumi:"backendStageId"`
	// The cache stage ID the TLS stage will be linked to.
	CacheStageId *string `pulumi:"cacheStageId"`
	// The expiration date of the certificate.
	CertificateExpiresAt *string `pulumi:"certificateExpiresAt"`
	// The date and time of the creation of the TLS stage.
	CreatedAt *string `pulumi:"createdAt"`
	// Set to true when Scaleway generates and manages a Let's Encrypt certificate for the TLS stage/custom endpoint.
	ManagedCertificate *bool `pulumi:"managedCertificate"`
	// The ID of the pipeline.
	PipelineId *string `pulumi:"pipelineId"`
	// `projectId`) The ID of the project the TLS stage is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The TLS secrets.
	Secrets []EdgeServicesTlsStageSecret `pulumi:"secrets"`
	// The date and time of the last update of the TLS stage.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type EdgeServicesTlsStageState struct {
	// The backend stage ID the TLS stage will be linked to.
	BackendStageId pulumi.StringPtrInput
	// The cache stage ID the TLS stage will be linked to.
	CacheStageId pulumi.StringPtrInput
	// The expiration date of the certificate.
	CertificateExpiresAt pulumi.StringPtrInput
	// The date and time of the creation of the TLS stage.
	CreatedAt pulumi.StringPtrInput
	// Set to true when Scaleway generates and manages a Let's Encrypt certificate for the TLS stage/custom endpoint.
	ManagedCertificate pulumi.BoolPtrInput
	// The ID of the pipeline.
	PipelineId pulumi.StringPtrInput
	// `projectId`) The ID of the project the TLS stage is associated with.
	ProjectId pulumi.StringPtrInput
	// The TLS secrets.
	Secrets EdgeServicesTlsStageSecretArrayInput
	// The date and time of the last update of the TLS stage.
	UpdatedAt pulumi.StringPtrInput
}

func (EdgeServicesTlsStageState) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeServicesTlsStageState)(nil)).Elem()
}

type edgeServicesTlsStageArgs struct {
	// The backend stage ID the TLS stage will be linked to.
	BackendStageId *string `pulumi:"backendStageId"`
	// The cache stage ID the TLS stage will be linked to.
	CacheStageId *string `pulumi:"cacheStageId"`
	// Set to true when Scaleway generates and manages a Let's Encrypt certificate for the TLS stage/custom endpoint.
	ManagedCertificate *bool `pulumi:"managedCertificate"`
	// The ID of the pipeline.
	PipelineId string `pulumi:"pipelineId"`
	// `projectId`) The ID of the project the TLS stage is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The TLS secrets.
	Secrets []EdgeServicesTlsStageSecret `pulumi:"secrets"`
}

// The set of arguments for constructing a EdgeServicesTlsStage resource.
type EdgeServicesTlsStageArgs struct {
	// The backend stage ID the TLS stage will be linked to.
	BackendStageId pulumi.StringPtrInput
	// The cache stage ID the TLS stage will be linked to.
	CacheStageId pulumi.StringPtrInput
	// Set to true when Scaleway generates and manages a Let's Encrypt certificate for the TLS stage/custom endpoint.
	ManagedCertificate pulumi.BoolPtrInput
	// The ID of the pipeline.
	PipelineId pulumi.StringInput
	// `projectId`) The ID of the project the TLS stage is associated with.
	ProjectId pulumi.StringPtrInput
	// The TLS secrets.
	Secrets EdgeServicesTlsStageSecretArrayInput
}

func (EdgeServicesTlsStageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeServicesTlsStageArgs)(nil)).Elem()
}

type EdgeServicesTlsStageInput interface {
	pulumi.Input

	ToEdgeServicesTlsStageOutput() EdgeServicesTlsStageOutput
	ToEdgeServicesTlsStageOutputWithContext(ctx context.Context) EdgeServicesTlsStageOutput
}

func (*EdgeServicesTlsStage) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeServicesTlsStage)(nil)).Elem()
}

func (i *EdgeServicesTlsStage) ToEdgeServicesTlsStageOutput() EdgeServicesTlsStageOutput {
	return i.ToEdgeServicesTlsStageOutputWithContext(context.Background())
}

func (i *EdgeServicesTlsStage) ToEdgeServicesTlsStageOutputWithContext(ctx context.Context) EdgeServicesTlsStageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeServicesTlsStageOutput)
}

// EdgeServicesTlsStageArrayInput is an input type that accepts EdgeServicesTlsStageArray and EdgeServicesTlsStageArrayOutput values.
// You can construct a concrete instance of `EdgeServicesTlsStageArrayInput` via:
//
//	EdgeServicesTlsStageArray{ EdgeServicesTlsStageArgs{...} }
type EdgeServicesTlsStageArrayInput interface {
	pulumi.Input

	ToEdgeServicesTlsStageArrayOutput() EdgeServicesTlsStageArrayOutput
	ToEdgeServicesTlsStageArrayOutputWithContext(context.Context) EdgeServicesTlsStageArrayOutput
}

type EdgeServicesTlsStageArray []EdgeServicesTlsStageInput

func (EdgeServicesTlsStageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EdgeServicesTlsStage)(nil)).Elem()
}

func (i EdgeServicesTlsStageArray) ToEdgeServicesTlsStageArrayOutput() EdgeServicesTlsStageArrayOutput {
	return i.ToEdgeServicesTlsStageArrayOutputWithContext(context.Background())
}

func (i EdgeServicesTlsStageArray) ToEdgeServicesTlsStageArrayOutputWithContext(ctx context.Context) EdgeServicesTlsStageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeServicesTlsStageArrayOutput)
}

// EdgeServicesTlsStageMapInput is an input type that accepts EdgeServicesTlsStageMap and EdgeServicesTlsStageMapOutput values.
// You can construct a concrete instance of `EdgeServicesTlsStageMapInput` via:
//
//	EdgeServicesTlsStageMap{ "key": EdgeServicesTlsStageArgs{...} }
type EdgeServicesTlsStageMapInput interface {
	pulumi.Input

	ToEdgeServicesTlsStageMapOutput() EdgeServicesTlsStageMapOutput
	ToEdgeServicesTlsStageMapOutputWithContext(context.Context) EdgeServicesTlsStageMapOutput
}

type EdgeServicesTlsStageMap map[string]EdgeServicesTlsStageInput

func (EdgeServicesTlsStageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EdgeServicesTlsStage)(nil)).Elem()
}

func (i EdgeServicesTlsStageMap) ToEdgeServicesTlsStageMapOutput() EdgeServicesTlsStageMapOutput {
	return i.ToEdgeServicesTlsStageMapOutputWithContext(context.Background())
}

func (i EdgeServicesTlsStageMap) ToEdgeServicesTlsStageMapOutputWithContext(ctx context.Context) EdgeServicesTlsStageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeServicesTlsStageMapOutput)
}

type EdgeServicesTlsStageOutput struct{ *pulumi.OutputState }

func (EdgeServicesTlsStageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeServicesTlsStage)(nil)).Elem()
}

func (o EdgeServicesTlsStageOutput) ToEdgeServicesTlsStageOutput() EdgeServicesTlsStageOutput {
	return o
}

func (o EdgeServicesTlsStageOutput) ToEdgeServicesTlsStageOutputWithContext(ctx context.Context) EdgeServicesTlsStageOutput {
	return o
}

// The backend stage ID the TLS stage will be linked to.
func (o EdgeServicesTlsStageOutput) BackendStageId() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeServicesTlsStage) pulumi.StringOutput { return v.BackendStageId }).(pulumi.StringOutput)
}

// The cache stage ID the TLS stage will be linked to.
func (o EdgeServicesTlsStageOutput) CacheStageId() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeServicesTlsStage) pulumi.StringOutput { return v.CacheStageId }).(pulumi.StringOutput)
}

// The expiration date of the certificate.
func (o EdgeServicesTlsStageOutput) CertificateExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeServicesTlsStage) pulumi.StringOutput { return v.CertificateExpiresAt }).(pulumi.StringOutput)
}

// The date and time of the creation of the TLS stage.
func (o EdgeServicesTlsStageOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeServicesTlsStage) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Set to true when Scaleway generates and manages a Let's Encrypt certificate for the TLS stage/custom endpoint.
func (o EdgeServicesTlsStageOutput) ManagedCertificate() pulumi.BoolOutput {
	return o.ApplyT(func(v *EdgeServicesTlsStage) pulumi.BoolOutput { return v.ManagedCertificate }).(pulumi.BoolOutput)
}

// The ID of the pipeline.
func (o EdgeServicesTlsStageOutput) PipelineId() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeServicesTlsStage) pulumi.StringOutput { return v.PipelineId }).(pulumi.StringOutput)
}

// `projectId`) The ID of the project the TLS stage is associated with.
func (o EdgeServicesTlsStageOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeServicesTlsStage) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The TLS secrets.
func (o EdgeServicesTlsStageOutput) Secrets() EdgeServicesTlsStageSecretArrayOutput {
	return o.ApplyT(func(v *EdgeServicesTlsStage) EdgeServicesTlsStageSecretArrayOutput { return v.Secrets }).(EdgeServicesTlsStageSecretArrayOutput)
}

// The date and time of the last update of the TLS stage.
func (o EdgeServicesTlsStageOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeServicesTlsStage) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type EdgeServicesTlsStageArrayOutput struct{ *pulumi.OutputState }

func (EdgeServicesTlsStageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EdgeServicesTlsStage)(nil)).Elem()
}

func (o EdgeServicesTlsStageArrayOutput) ToEdgeServicesTlsStageArrayOutput() EdgeServicesTlsStageArrayOutput {
	return o
}

func (o EdgeServicesTlsStageArrayOutput) ToEdgeServicesTlsStageArrayOutputWithContext(ctx context.Context) EdgeServicesTlsStageArrayOutput {
	return o
}

func (o EdgeServicesTlsStageArrayOutput) Index(i pulumi.IntInput) EdgeServicesTlsStageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EdgeServicesTlsStage {
		return vs[0].([]*EdgeServicesTlsStage)[vs[1].(int)]
	}).(EdgeServicesTlsStageOutput)
}

type EdgeServicesTlsStageMapOutput struct{ *pulumi.OutputState }

func (EdgeServicesTlsStageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EdgeServicesTlsStage)(nil)).Elem()
}

func (o EdgeServicesTlsStageMapOutput) ToEdgeServicesTlsStageMapOutput() EdgeServicesTlsStageMapOutput {
	return o
}

func (o EdgeServicesTlsStageMapOutput) ToEdgeServicesTlsStageMapOutputWithContext(ctx context.Context) EdgeServicesTlsStageMapOutput {
	return o
}

func (o EdgeServicesTlsStageMapOutput) MapIndex(k pulumi.StringInput) EdgeServicesTlsStageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EdgeServicesTlsStage {
		return vs[0].(map[string]*EdgeServicesTlsStage)[vs[1].(string)]
	}).(EdgeServicesTlsStageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeServicesTlsStageInput)(nil)).Elem(), &EdgeServicesTlsStage{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeServicesTlsStageArrayInput)(nil)).Elem(), EdgeServicesTlsStageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeServicesTlsStageMapInput)(nil)).Elem(), EdgeServicesTlsStageMap{})
	pulumi.RegisterOutputType(EdgeServicesTlsStageOutput{})
	pulumi.RegisterOutputType(EdgeServicesTlsStageArrayOutput{})
	pulumi.RegisterOutputType(EdgeServicesTlsStageMapOutput{})
}
