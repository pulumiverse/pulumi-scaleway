// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticmetal

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// The scalewayEasyPartitioning data source allows you to retrieve a ready-to-use partitioning schema for a BareMetal server. This schema can be used for custom installations with optional swap and extra partitions.
//
// This data source simplifies the process of generating valid partitioning configurations, especially useful when dealing with OS and offer compatibility requirements.
func GetEasyPartitioning(ctx *pulumi.Context, args *GetEasyPartitioningArgs, opts ...pulumi.InvokeOption) (*GetEasyPartitioningResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetEasyPartitioningResult
	err := ctx.Invoke("scaleway:elasticmetal/getEasyPartitioning:getEasyPartitioning", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEasyPartitioning.
type GetEasyPartitioningArgs struct {
	// The mount point for the extra partition. Must be an absolute path using alphanumeric characters and underscores.
	Ext4Mountpoint *string `pulumi:"ext4Mountpoint"`
	// Whether to add an extra ext4 data partition.
	ExtraPartition *bool `pulumi:"extraPartition"`
	// The UUID of the BareMetal offer.
	OfferId string `pulumi:"offerId"`
	// The UUID of the OS image.
	OsId string `pulumi:"osId"`
	// Whether to include a swap partition.
	Swap *bool `pulumi:"swap"`
}

// A collection of values returned by getEasyPartitioning.
type GetEasyPartitioningResult struct {
	Ext4Mountpoint *string `pulumi:"ext4Mountpoint"`
	ExtraPartition *bool   `pulumi:"extraPartition"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// — A validated partitioning schema in JSON format that can be directly used for BareMetal server deployment.
	JsonPartition string `pulumi:"jsonPartition"`
	OfferId       string `pulumi:"offerId"`
	OsId          string `pulumi:"osId"`
	Swap          *bool  `pulumi:"swap"`
}

func GetEasyPartitioningOutput(ctx *pulumi.Context, args GetEasyPartitioningOutputArgs, opts ...pulumi.InvokeOption) GetEasyPartitioningResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetEasyPartitioningResultOutput, error) {
			args := v.(GetEasyPartitioningArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("scaleway:elasticmetal/getEasyPartitioning:getEasyPartitioning", args, GetEasyPartitioningResultOutput{}, options).(GetEasyPartitioningResultOutput), nil
		}).(GetEasyPartitioningResultOutput)
}

// A collection of arguments for invoking getEasyPartitioning.
type GetEasyPartitioningOutputArgs struct {
	// The mount point for the extra partition. Must be an absolute path using alphanumeric characters and underscores.
	Ext4Mountpoint pulumi.StringPtrInput `pulumi:"ext4Mountpoint"`
	// Whether to add an extra ext4 data partition.
	ExtraPartition pulumi.BoolPtrInput `pulumi:"extraPartition"`
	// The UUID of the BareMetal offer.
	OfferId pulumi.StringInput `pulumi:"offerId"`
	// The UUID of the OS image.
	OsId pulumi.StringInput `pulumi:"osId"`
	// Whether to include a swap partition.
	Swap pulumi.BoolPtrInput `pulumi:"swap"`
}

func (GetEasyPartitioningOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEasyPartitioningArgs)(nil)).Elem()
}

// A collection of values returned by getEasyPartitioning.
type GetEasyPartitioningResultOutput struct{ *pulumi.OutputState }

func (GetEasyPartitioningResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEasyPartitioningResult)(nil)).Elem()
}

func (o GetEasyPartitioningResultOutput) ToGetEasyPartitioningResultOutput() GetEasyPartitioningResultOutput {
	return o
}

func (o GetEasyPartitioningResultOutput) ToGetEasyPartitioningResultOutputWithContext(ctx context.Context) GetEasyPartitioningResultOutput {
	return o
}

func (o GetEasyPartitioningResultOutput) Ext4Mountpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEasyPartitioningResult) *string { return v.Ext4Mountpoint }).(pulumi.StringPtrOutput)
}

func (o GetEasyPartitioningResultOutput) ExtraPartition() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetEasyPartitioningResult) *bool { return v.ExtraPartition }).(pulumi.BoolPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetEasyPartitioningResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetEasyPartitioningResult) string { return v.Id }).(pulumi.StringOutput)
}

// — A validated partitioning schema in JSON format that can be directly used for BareMetal server deployment.
func (o GetEasyPartitioningResultOutput) JsonPartition() pulumi.StringOutput {
	return o.ApplyT(func(v GetEasyPartitioningResult) string { return v.JsonPartition }).(pulumi.StringOutput)
}

func (o GetEasyPartitioningResultOutput) OfferId() pulumi.StringOutput {
	return o.ApplyT(func(v GetEasyPartitioningResult) string { return v.OfferId }).(pulumi.StringOutput)
}

func (o GetEasyPartitioningResultOutput) OsId() pulumi.StringOutput {
	return o.ApplyT(func(v GetEasyPartitioningResult) string { return v.OsId }).(pulumi.StringOutput)
}

func (o GetEasyPartitioningResultOutput) Swap() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetEasyPartitioningResult) *bool { return v.Swap }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetEasyPartitioningResultOutput{})
}
