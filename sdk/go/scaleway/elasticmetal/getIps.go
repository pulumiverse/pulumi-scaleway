// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticmetal

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Gets information about multiple Flexible IPs.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/elasticmetal"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Find ips that share the same tags
//			_, err := elasticmetal.GetIps(ctx, &elasticmetal.GetIpsArgs{
//				Tags: []string{
//					"a tag",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Find ips that share the same Server ID
//			myOffer, err := elasticmetal.GetOffer(ctx, &elasticmetal.GetOfferArgs{
//				Name: pulumi.StringRef("EM-B112X-SSD"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			base, err := elasticmetal.NewServer(ctx, "base", &elasticmetal.ServerArgs{
//				Name:                   pulumi.String("MyServer"),
//				Offer:                  pulumi.String(myOffer.OfferId),
//				InstallConfigAfterward: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = elasticmetal.NewIp(ctx, "first", &elasticmetal.IpArgs{
//				ServerId: base.ID(),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo"),
//					pulumi.String("first"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = elasticmetal.NewIp(ctx, "second", &elasticmetal.IpArgs{
//				ServerId: base.ID(),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo"),
//					pulumi.String("second"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = elasticmetal.GetIpsOutput(ctx, elasticmetal.GetIpsOutputArgs{
//				ServerIds: pulumi.StringArray{
//					base.ID(),
//				},
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetIps(ctx *pulumi.Context, args *GetIpsArgs, opts ...pulumi.InvokeOption) (*GetIpsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetIpsResult
	err := ctx.Invoke("scaleway:elasticmetal/getIps:getIps", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIps.
type GetIpsArgs struct {
	// (Defaults to provider `projectId`) The ID of the project the IP is in.
	ProjectId *string `pulumi:"projectId"`
	// List of server IDs used as filter. IPs with these exact server IDs are listed.
	ServerIds []string `pulumi:"serverIds"`
	// List of tags used as filter. IPs with these exact tags are listed.
	Tags []string `pulumi:"tags"`
	// `zone`) The zone in which IPs exist.
	Zone *string `pulumi:"zone"`
}

// A collection of values returned by getIps.
type GetIpsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// List of found flexible IPS
	Ips []GetIpsIp `pulumi:"ips"`
	// (Defaults to provider `organizationId`) The ID of the organization the IP is in.
	OrganizationId string `pulumi:"organizationId"`
	// (Defaults to provider `projectId`) The ID of the project the IP is in.
	ProjectId string   `pulumi:"projectId"`
	ServerIds []string `pulumi:"serverIds"`
	// The list of tags which are attached to the flexible IP.
	Tags []string `pulumi:"tags"`
	// (Defaults to provider `zone`) The zone in which the MAC address exist.
	Zone string `pulumi:"zone"`
}

func GetIpsOutput(ctx *pulumi.Context, args GetIpsOutputArgs, opts ...pulumi.InvokeOption) GetIpsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetIpsResultOutput, error) {
			args := v.(GetIpsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("scaleway:elasticmetal/getIps:getIps", args, GetIpsResultOutput{}, options).(GetIpsResultOutput), nil
		}).(GetIpsResultOutput)
}

// A collection of arguments for invoking getIps.
type GetIpsOutputArgs struct {
	// (Defaults to provider `projectId`) The ID of the project the IP is in.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// List of server IDs used as filter. IPs with these exact server IDs are listed.
	ServerIds pulumi.StringArrayInput `pulumi:"serverIds"`
	// List of tags used as filter. IPs with these exact tags are listed.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// `zone`) The zone in which IPs exist.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (GetIpsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpsArgs)(nil)).Elem()
}

// A collection of values returned by getIps.
type GetIpsResultOutput struct{ *pulumi.OutputState }

func (GetIpsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpsResult)(nil)).Elem()
}

func (o GetIpsResultOutput) ToGetIpsResultOutput() GetIpsResultOutput {
	return o
}

func (o GetIpsResultOutput) ToGetIpsResultOutputWithContext(ctx context.Context) GetIpsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetIpsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsResult) string { return v.Id }).(pulumi.StringOutput)
}

// List of found flexible IPS
func (o GetIpsResultOutput) Ips() GetIpsIpArrayOutput {
	return o.ApplyT(func(v GetIpsResult) []GetIpsIp { return v.Ips }).(GetIpsIpArrayOutput)
}

// (Defaults to provider `organizationId`) The ID of the organization the IP is in.
func (o GetIpsResultOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsResult) string { return v.OrganizationId }).(pulumi.StringOutput)
}

// (Defaults to provider `projectId`) The ID of the project the IP is in.
func (o GetIpsResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o GetIpsResultOutput) ServerIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIpsResult) []string { return v.ServerIds }).(pulumi.StringArrayOutput)
}

// The list of tags which are attached to the flexible IP.
func (o GetIpsResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIpsResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// (Defaults to provider `zone`) The zone in which the MAC address exist.
func (o GetIpsResultOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsResult) string { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetIpsResultOutput{})
}
