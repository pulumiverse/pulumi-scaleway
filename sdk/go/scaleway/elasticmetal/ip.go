// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticmetal

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway flexible IPs.
// For more information, see the [API documentation](https://www.scaleway.com/en/developers/api/elastic-metal-flexible-ip).
//
// > **Note:**
// Flexible IPs are exclusively available for Elastic Metal (bare metal) servers. They are not compatible with other Scaleway products.
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/elasticmetal"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := elasticmetal.NewIp(ctx, "main", &elasticmetal.IpArgs{
//				Reverse: pulumi.String("my-reverse.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With zone
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/elasticmetal"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := elasticmetal.NewIp(ctx, "main", &elasticmetal.IpArgs{
//				Zone: pulumi.String("fr-par-2"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With IPv6
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/elasticmetal"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := elasticmetal.NewIp(ctx, "main", &elasticmetal.IpArgs{
//				IsIpv6: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With baremetal server
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/account"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/elasticmetal"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := account.NewSshKey(ctx, "main", &account.SshKeyArgs{
//				Name:      pulumi.String("main"),
//				PublicKey: pulumi.String("ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILHy/M5FVm5ydLGcal3e5LNcfTalbeN7QL/ZGCvDEdqJ foobar@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			byId, err := elasticmetal.GetOs(ctx, &elasticmetal.GetOsArgs{
//				Zone:    pulumi.StringRef("fr-par-2"),
//				Name:    pulumi.StringRef("Ubuntu"),
//				Version: pulumi.StringRef("20.04 LTS (Focal Fossa)"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			myOffer, err := elasticmetal.GetOffer(ctx, &elasticmetal.GetOfferArgs{
//				Zone: pulumi.StringRef("fr-par-2"),
//				Name: pulumi.StringRef("EM-A210R-HDD"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			base, err := elasticmetal.NewServer(ctx, "base", &elasticmetal.ServerArgs{
//				Zone:      pulumi.String("fr-par-2"),
//				Offer:     pulumi.String(myOffer.OfferId),
//				Os:        pulumi.String(byId.OsId),
//				SshKeyIds: main.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = elasticmetal.NewIp(ctx, "main", &elasticmetal.IpArgs{
//				ServerId: base.ID(),
//				Zone:     pulumi.String("fr-par-2"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Flexible IPs can be imported using the `{zone}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:elasticmetal/ip:Ip main fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type Ip struct {
	pulumi.CustomResourceState

	// The date and time of the creation of the Flexible IP (Format ISO 8601).
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// A description of the flexible IP.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The IP address of the Flexible IP.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// Defines whether the flexible IP has an IPv6 address.
	IsIpv6 pulumi.BoolPtrOutput `pulumi:"isIpv6"`
	// The organization of the Flexible IP.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// `projectId`) The ID of the Project the Flexible IP is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The reverse domain associated with this flexible IP.
	Reverse pulumi.StringOutput `pulumi:"reverse"`
	// The ID of the associated server.
	ServerId pulumi.StringPtrOutput `pulumi:"serverId"`
	// The status of the flexible IP.
	Status pulumi.StringOutput `pulumi:"status"`
	// A list of tags to apply to the flexible IP.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The date and time of the last update of the Flexible IP (Format ISO 8601).
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// `zone`) The zone of the Flexible IP.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewIp registers a new resource with the given unique name, arguments, and options.
func NewIp(ctx *pulumi.Context,
	name string, args *IpArgs, opts ...pulumi.ResourceOption) (*Ip, error) {
	if args == nil {
		args = &IpArgs{}
	}

	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/flexibleIp:FlexibleIp"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ip
	err := ctx.RegisterResource("scaleway:elasticmetal/ip:Ip", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIp gets an existing Ip resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpState, opts ...pulumi.ResourceOption) (*Ip, error) {
	var resource Ip
	err := ctx.ReadResource("scaleway:elasticmetal/ip:Ip", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ip resources.
type ipState struct {
	// The date and time of the creation of the Flexible IP (Format ISO 8601).
	CreatedAt *string `pulumi:"createdAt"`
	// A description of the flexible IP.
	Description *string `pulumi:"description"`
	// The IP address of the Flexible IP.
	IpAddress *string `pulumi:"ipAddress"`
	// Defines whether the flexible IP has an IPv6 address.
	IsIpv6 *bool `pulumi:"isIpv6"`
	// The organization of the Flexible IP.
	OrganizationId *string `pulumi:"organizationId"`
	// `projectId`) The ID of the Project the Flexible IP is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The reverse domain associated with this flexible IP.
	Reverse *string `pulumi:"reverse"`
	// The ID of the associated server.
	ServerId *string `pulumi:"serverId"`
	// The status of the flexible IP.
	Status *string `pulumi:"status"`
	// A list of tags to apply to the flexible IP.
	Tags []string `pulumi:"tags"`
	// The date and time of the last update of the Flexible IP (Format ISO 8601).
	UpdatedAt *string `pulumi:"updatedAt"`
	// `zone`) The zone of the Flexible IP.
	Zone *string `pulumi:"zone"`
}

type IpState struct {
	// The date and time of the creation of the Flexible IP (Format ISO 8601).
	CreatedAt pulumi.StringPtrInput
	// A description of the flexible IP.
	Description pulumi.StringPtrInput
	// The IP address of the Flexible IP.
	IpAddress pulumi.StringPtrInput
	// Defines whether the flexible IP has an IPv6 address.
	IsIpv6 pulumi.BoolPtrInput
	// The organization of the Flexible IP.
	OrganizationId pulumi.StringPtrInput
	// `projectId`) The ID of the Project the Flexible IP is associated with.
	ProjectId pulumi.StringPtrInput
	// The reverse domain associated with this flexible IP.
	Reverse pulumi.StringPtrInput
	// The ID of the associated server.
	ServerId pulumi.StringPtrInput
	// The status of the flexible IP.
	Status pulumi.StringPtrInput
	// A list of tags to apply to the flexible IP.
	Tags pulumi.StringArrayInput
	// The date and time of the last update of the Flexible IP (Format ISO 8601).
	UpdatedAt pulumi.StringPtrInput
	// `zone`) The zone of the Flexible IP.
	Zone pulumi.StringPtrInput
}

func (IpState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipState)(nil)).Elem()
}

type ipArgs struct {
	// A description of the flexible IP.
	Description *string `pulumi:"description"`
	// Defines whether the flexible IP has an IPv6 address.
	IsIpv6 *bool `pulumi:"isIpv6"`
	// `projectId`) The ID of the Project the Flexible IP is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The reverse domain associated with this flexible IP.
	Reverse *string `pulumi:"reverse"`
	// The ID of the associated server.
	ServerId *string `pulumi:"serverId"`
	// A list of tags to apply to the flexible IP.
	Tags []string `pulumi:"tags"`
	// `zone`) The zone of the Flexible IP.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a Ip resource.
type IpArgs struct {
	// A description of the flexible IP.
	Description pulumi.StringPtrInput
	// Defines whether the flexible IP has an IPv6 address.
	IsIpv6 pulumi.BoolPtrInput
	// `projectId`) The ID of the Project the Flexible IP is associated with.
	ProjectId pulumi.StringPtrInput
	// The reverse domain associated with this flexible IP.
	Reverse pulumi.StringPtrInput
	// The ID of the associated server.
	ServerId pulumi.StringPtrInput
	// A list of tags to apply to the flexible IP.
	Tags pulumi.StringArrayInput
	// `zone`) The zone of the Flexible IP.
	Zone pulumi.StringPtrInput
}

func (IpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipArgs)(nil)).Elem()
}

type IpInput interface {
	pulumi.Input

	ToIpOutput() IpOutput
	ToIpOutputWithContext(ctx context.Context) IpOutput
}

func (*Ip) ElementType() reflect.Type {
	return reflect.TypeOf((**Ip)(nil)).Elem()
}

func (i *Ip) ToIpOutput() IpOutput {
	return i.ToIpOutputWithContext(context.Background())
}

func (i *Ip) ToIpOutputWithContext(ctx context.Context) IpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpOutput)
}

// IpArrayInput is an input type that accepts IpArray and IpArrayOutput values.
// You can construct a concrete instance of `IpArrayInput` via:
//
//	IpArray{ IpArgs{...} }
type IpArrayInput interface {
	pulumi.Input

	ToIpArrayOutput() IpArrayOutput
	ToIpArrayOutputWithContext(context.Context) IpArrayOutput
}

type IpArray []IpInput

func (IpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ip)(nil)).Elem()
}

func (i IpArray) ToIpArrayOutput() IpArrayOutput {
	return i.ToIpArrayOutputWithContext(context.Background())
}

func (i IpArray) ToIpArrayOutputWithContext(ctx context.Context) IpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpArrayOutput)
}

// IpMapInput is an input type that accepts IpMap and IpMapOutput values.
// You can construct a concrete instance of `IpMapInput` via:
//
//	IpMap{ "key": IpArgs{...} }
type IpMapInput interface {
	pulumi.Input

	ToIpMapOutput() IpMapOutput
	ToIpMapOutputWithContext(context.Context) IpMapOutput
}

type IpMap map[string]IpInput

func (IpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ip)(nil)).Elem()
}

func (i IpMap) ToIpMapOutput() IpMapOutput {
	return i.ToIpMapOutputWithContext(context.Background())
}

func (i IpMap) ToIpMapOutputWithContext(ctx context.Context) IpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpMapOutput)
}

type IpOutput struct{ *pulumi.OutputState }

func (IpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ip)(nil)).Elem()
}

func (o IpOutput) ToIpOutput() IpOutput {
	return o
}

func (o IpOutput) ToIpOutputWithContext(ctx context.Context) IpOutput {
	return o
}

// The date and time of the creation of the Flexible IP (Format ISO 8601).
func (o IpOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// A description of the flexible IP.
func (o IpOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ip) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The IP address of the Flexible IP.
func (o IpOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// Defines whether the flexible IP has an IPv6 address.
func (o IpOutput) IsIpv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ip) pulumi.BoolPtrOutput { return v.IsIpv6 }).(pulumi.BoolPtrOutput)
}

// The organization of the Flexible IP.
func (o IpOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// `projectId`) The ID of the Project the Flexible IP is associated with.
func (o IpOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The reverse domain associated with this flexible IP.
func (o IpOutput) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip) pulumi.StringOutput { return v.Reverse }).(pulumi.StringOutput)
}

// The ID of the associated server.
func (o IpOutput) ServerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ip) pulumi.StringPtrOutput { return v.ServerId }).(pulumi.StringPtrOutput)
}

// The status of the flexible IP.
func (o IpOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// A list of tags to apply to the flexible IP.
func (o IpOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Ip) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The date and time of the last update of the Flexible IP (Format ISO 8601).
func (o IpOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// `zone`) The zone of the Flexible IP.
func (o IpOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type IpArrayOutput struct{ *pulumi.OutputState }

func (IpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ip)(nil)).Elem()
}

func (o IpArrayOutput) ToIpArrayOutput() IpArrayOutput {
	return o
}

func (o IpArrayOutput) ToIpArrayOutputWithContext(ctx context.Context) IpArrayOutput {
	return o
}

func (o IpArrayOutput) Index(i pulumi.IntInput) IpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ip {
		return vs[0].([]*Ip)[vs[1].(int)]
	}).(IpOutput)
}

type IpMapOutput struct{ *pulumi.OutputState }

func (IpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ip)(nil)).Elem()
}

func (o IpMapOutput) ToIpMapOutput() IpMapOutput {
	return o
}

func (o IpMapOutput) ToIpMapOutputWithContext(ctx context.Context) IpMapOutput {
	return o
}

func (o IpMapOutput) MapIndex(k pulumi.StringInput) IpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ip {
		return vs[0].(map[string]*Ip)[vs[1].(string)]
	}).(IpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpInput)(nil)).Elem(), &Ip{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpArrayInput)(nil)).Elem(), IpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpMapInput)(nil)).Elem(), IpMap{})
	pulumi.RegisterOutputType(IpOutput{})
	pulumi.RegisterOutputType(IpArrayOutput{})
	pulumi.RegisterOutputType(IpMapOutput{})
}
