// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticmetal

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

var _ = internal.GetEnvOrDefault

type ServerIp struct {
	// The address of the IPv6.
	Address *string `pulumi:"address"`
	// The ID of the IPv6.
	Id *string `pulumi:"id"`
	// The reverse of the IPv6.
	Reverse *string `pulumi:"reverse"`
	// The type of the IPv6.
	Version *string `pulumi:"version"`
}

// ServerIpInput is an input type that accepts ServerIpArgs and ServerIpOutput values.
// You can construct a concrete instance of `ServerIpInput` via:
//
//	ServerIpArgs{...}
type ServerIpInput interface {
	pulumi.Input

	ToServerIpOutput() ServerIpOutput
	ToServerIpOutputWithContext(context.Context) ServerIpOutput
}

type ServerIpArgs struct {
	// The address of the IPv6.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The ID of the IPv6.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The reverse of the IPv6.
	Reverse pulumi.StringPtrInput `pulumi:"reverse"`
	// The type of the IPv6.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ServerIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerIp)(nil)).Elem()
}

func (i ServerIpArgs) ToServerIpOutput() ServerIpOutput {
	return i.ToServerIpOutputWithContext(context.Background())
}

func (i ServerIpArgs) ToServerIpOutputWithContext(ctx context.Context) ServerIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerIpOutput)
}

// ServerIpArrayInput is an input type that accepts ServerIpArray and ServerIpArrayOutput values.
// You can construct a concrete instance of `ServerIpArrayInput` via:
//
//	ServerIpArray{ ServerIpArgs{...} }
type ServerIpArrayInput interface {
	pulumi.Input

	ToServerIpArrayOutput() ServerIpArrayOutput
	ToServerIpArrayOutputWithContext(context.Context) ServerIpArrayOutput
}

type ServerIpArray []ServerIpInput

func (ServerIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerIp)(nil)).Elem()
}

func (i ServerIpArray) ToServerIpArrayOutput() ServerIpArrayOutput {
	return i.ToServerIpArrayOutputWithContext(context.Background())
}

func (i ServerIpArray) ToServerIpArrayOutputWithContext(ctx context.Context) ServerIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerIpArrayOutput)
}

type ServerIpOutput struct{ *pulumi.OutputState }

func (ServerIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerIp)(nil)).Elem()
}

func (o ServerIpOutput) ToServerIpOutput() ServerIpOutput {
	return o
}

func (o ServerIpOutput) ToServerIpOutputWithContext(ctx context.Context) ServerIpOutput {
	return o
}

// The address of the IPv6.
func (o ServerIpOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerIp) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The ID of the IPv6.
func (o ServerIpOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerIp) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The reverse of the IPv6.
func (o ServerIpOutput) Reverse() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerIp) *string { return v.Reverse }).(pulumi.StringPtrOutput)
}

// The type of the IPv6.
func (o ServerIpOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerIp) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ServerIpArrayOutput struct{ *pulumi.OutputState }

func (ServerIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerIp)(nil)).Elem()
}

func (o ServerIpArrayOutput) ToServerIpArrayOutput() ServerIpArrayOutput {
	return o
}

func (o ServerIpArrayOutput) ToServerIpArrayOutputWithContext(ctx context.Context) ServerIpArrayOutput {
	return o
}

func (o ServerIpArrayOutput) Index(i pulumi.IntInput) ServerIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerIp {
		return vs[0].([]ServerIp)[vs[1].(int)]
	}).(ServerIpOutput)
}

type ServerIpv4 struct {
	// The address of the IPv6.
	Address *string `pulumi:"address"`
	// The ID of the IPv6.
	Id *string `pulumi:"id"`
	// The reverse of the IPv6.
	Reverse *string `pulumi:"reverse"`
	// The type of the IPv6.
	Version *string `pulumi:"version"`
}

// ServerIpv4Input is an input type that accepts ServerIpv4Args and ServerIpv4Output values.
// You can construct a concrete instance of `ServerIpv4Input` via:
//
//	ServerIpv4Args{...}
type ServerIpv4Input interface {
	pulumi.Input

	ToServerIpv4Output() ServerIpv4Output
	ToServerIpv4OutputWithContext(context.Context) ServerIpv4Output
}

type ServerIpv4Args struct {
	// The address of the IPv6.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The ID of the IPv6.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The reverse of the IPv6.
	Reverse pulumi.StringPtrInput `pulumi:"reverse"`
	// The type of the IPv6.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ServerIpv4Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerIpv4)(nil)).Elem()
}

func (i ServerIpv4Args) ToServerIpv4Output() ServerIpv4Output {
	return i.ToServerIpv4OutputWithContext(context.Background())
}

func (i ServerIpv4Args) ToServerIpv4OutputWithContext(ctx context.Context) ServerIpv4Output {
	return pulumi.ToOutputWithContext(ctx, i).(ServerIpv4Output)
}

// ServerIpv4ArrayInput is an input type that accepts ServerIpv4Array and ServerIpv4ArrayOutput values.
// You can construct a concrete instance of `ServerIpv4ArrayInput` via:
//
//	ServerIpv4Array{ ServerIpv4Args{...} }
type ServerIpv4ArrayInput interface {
	pulumi.Input

	ToServerIpv4ArrayOutput() ServerIpv4ArrayOutput
	ToServerIpv4ArrayOutputWithContext(context.Context) ServerIpv4ArrayOutput
}

type ServerIpv4Array []ServerIpv4Input

func (ServerIpv4Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerIpv4)(nil)).Elem()
}

func (i ServerIpv4Array) ToServerIpv4ArrayOutput() ServerIpv4ArrayOutput {
	return i.ToServerIpv4ArrayOutputWithContext(context.Background())
}

func (i ServerIpv4Array) ToServerIpv4ArrayOutputWithContext(ctx context.Context) ServerIpv4ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerIpv4ArrayOutput)
}

type ServerIpv4Output struct{ *pulumi.OutputState }

func (ServerIpv4Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerIpv4)(nil)).Elem()
}

func (o ServerIpv4Output) ToServerIpv4Output() ServerIpv4Output {
	return o
}

func (o ServerIpv4Output) ToServerIpv4OutputWithContext(ctx context.Context) ServerIpv4Output {
	return o
}

// The address of the IPv6.
func (o ServerIpv4Output) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerIpv4) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The ID of the IPv6.
func (o ServerIpv4Output) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerIpv4) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The reverse of the IPv6.
func (o ServerIpv4Output) Reverse() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerIpv4) *string { return v.Reverse }).(pulumi.StringPtrOutput)
}

// The type of the IPv6.
func (o ServerIpv4Output) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerIpv4) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ServerIpv4ArrayOutput struct{ *pulumi.OutputState }

func (ServerIpv4ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerIpv4)(nil)).Elem()
}

func (o ServerIpv4ArrayOutput) ToServerIpv4ArrayOutput() ServerIpv4ArrayOutput {
	return o
}

func (o ServerIpv4ArrayOutput) ToServerIpv4ArrayOutputWithContext(ctx context.Context) ServerIpv4ArrayOutput {
	return o
}

func (o ServerIpv4ArrayOutput) Index(i pulumi.IntInput) ServerIpv4Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerIpv4 {
		return vs[0].([]ServerIpv4)[vs[1].(int)]
	}).(ServerIpv4Output)
}

type ServerIpv6 struct {
	// The address of the IPv6.
	Address *string `pulumi:"address"`
	// The ID of the IPv6.
	Id *string `pulumi:"id"`
	// The reverse of the IPv6.
	Reverse *string `pulumi:"reverse"`
	// The type of the IPv6.
	Version *string `pulumi:"version"`
}

// ServerIpv6Input is an input type that accepts ServerIpv6Args and ServerIpv6Output values.
// You can construct a concrete instance of `ServerIpv6Input` via:
//
//	ServerIpv6Args{...}
type ServerIpv6Input interface {
	pulumi.Input

	ToServerIpv6Output() ServerIpv6Output
	ToServerIpv6OutputWithContext(context.Context) ServerIpv6Output
}

type ServerIpv6Args struct {
	// The address of the IPv6.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The ID of the IPv6.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The reverse of the IPv6.
	Reverse pulumi.StringPtrInput `pulumi:"reverse"`
	// The type of the IPv6.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ServerIpv6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerIpv6)(nil)).Elem()
}

func (i ServerIpv6Args) ToServerIpv6Output() ServerIpv6Output {
	return i.ToServerIpv6OutputWithContext(context.Background())
}

func (i ServerIpv6Args) ToServerIpv6OutputWithContext(ctx context.Context) ServerIpv6Output {
	return pulumi.ToOutputWithContext(ctx, i).(ServerIpv6Output)
}

// ServerIpv6ArrayInput is an input type that accepts ServerIpv6Array and ServerIpv6ArrayOutput values.
// You can construct a concrete instance of `ServerIpv6ArrayInput` via:
//
//	ServerIpv6Array{ ServerIpv6Args{...} }
type ServerIpv6ArrayInput interface {
	pulumi.Input

	ToServerIpv6ArrayOutput() ServerIpv6ArrayOutput
	ToServerIpv6ArrayOutputWithContext(context.Context) ServerIpv6ArrayOutput
}

type ServerIpv6Array []ServerIpv6Input

func (ServerIpv6Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerIpv6)(nil)).Elem()
}

func (i ServerIpv6Array) ToServerIpv6ArrayOutput() ServerIpv6ArrayOutput {
	return i.ToServerIpv6ArrayOutputWithContext(context.Background())
}

func (i ServerIpv6Array) ToServerIpv6ArrayOutputWithContext(ctx context.Context) ServerIpv6ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerIpv6ArrayOutput)
}

type ServerIpv6Output struct{ *pulumi.OutputState }

func (ServerIpv6Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerIpv6)(nil)).Elem()
}

func (o ServerIpv6Output) ToServerIpv6Output() ServerIpv6Output {
	return o
}

func (o ServerIpv6Output) ToServerIpv6OutputWithContext(ctx context.Context) ServerIpv6Output {
	return o
}

// The address of the IPv6.
func (o ServerIpv6Output) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerIpv6) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The ID of the IPv6.
func (o ServerIpv6Output) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerIpv6) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The reverse of the IPv6.
func (o ServerIpv6Output) Reverse() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerIpv6) *string { return v.Reverse }).(pulumi.StringPtrOutput)
}

// The type of the IPv6.
func (o ServerIpv6Output) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerIpv6) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ServerIpv6ArrayOutput struct{ *pulumi.OutputState }

func (ServerIpv6ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerIpv6)(nil)).Elem()
}

func (o ServerIpv6ArrayOutput) ToServerIpv6ArrayOutput() ServerIpv6ArrayOutput {
	return o
}

func (o ServerIpv6ArrayOutput) ToServerIpv6ArrayOutputWithContext(ctx context.Context) ServerIpv6ArrayOutput {
	return o
}

func (o ServerIpv6ArrayOutput) Index(i pulumi.IntInput) ServerIpv6Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerIpv6 {
		return vs[0].([]ServerIpv6)[vs[1].(int)]
	}).(ServerIpv6Output)
}

type ServerOption struct {
	// The auto expiration date for compatible options
	ExpiresAt *string `pulumi:"expiresAt"`
	// The id of the option to enable. Use [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-options-list-options) to find the available options IDs.
	Id string `pulumi:"id"`
	// The name of the server.
	Name *string `pulumi:"name"`
}

// ServerOptionInput is an input type that accepts ServerOptionArgs and ServerOptionOutput values.
// You can construct a concrete instance of `ServerOptionInput` via:
//
//	ServerOptionArgs{...}
type ServerOptionInput interface {
	pulumi.Input

	ToServerOptionOutput() ServerOptionOutput
	ToServerOptionOutputWithContext(context.Context) ServerOptionOutput
}

type ServerOptionArgs struct {
	// The auto expiration date for compatible options
	ExpiresAt pulumi.StringPtrInput `pulumi:"expiresAt"`
	// The id of the option to enable. Use [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-options-list-options) to find the available options IDs.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the server.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ServerOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerOption)(nil)).Elem()
}

func (i ServerOptionArgs) ToServerOptionOutput() ServerOptionOutput {
	return i.ToServerOptionOutputWithContext(context.Background())
}

func (i ServerOptionArgs) ToServerOptionOutputWithContext(ctx context.Context) ServerOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerOptionOutput)
}

// ServerOptionArrayInput is an input type that accepts ServerOptionArray and ServerOptionArrayOutput values.
// You can construct a concrete instance of `ServerOptionArrayInput` via:
//
//	ServerOptionArray{ ServerOptionArgs{...} }
type ServerOptionArrayInput interface {
	pulumi.Input

	ToServerOptionArrayOutput() ServerOptionArrayOutput
	ToServerOptionArrayOutputWithContext(context.Context) ServerOptionArrayOutput
}

type ServerOptionArray []ServerOptionInput

func (ServerOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerOption)(nil)).Elem()
}

func (i ServerOptionArray) ToServerOptionArrayOutput() ServerOptionArrayOutput {
	return i.ToServerOptionArrayOutputWithContext(context.Background())
}

func (i ServerOptionArray) ToServerOptionArrayOutputWithContext(ctx context.Context) ServerOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerOptionArrayOutput)
}

type ServerOptionOutput struct{ *pulumi.OutputState }

func (ServerOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerOption)(nil)).Elem()
}

func (o ServerOptionOutput) ToServerOptionOutput() ServerOptionOutput {
	return o
}

func (o ServerOptionOutput) ToServerOptionOutputWithContext(ctx context.Context) ServerOptionOutput {
	return o
}

// The auto expiration date for compatible options
func (o ServerOptionOutput) ExpiresAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerOption) *string { return v.ExpiresAt }).(pulumi.StringPtrOutput)
}

// The id of the option to enable. Use [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-options-list-options) to find the available options IDs.
func (o ServerOptionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ServerOption) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the server.
func (o ServerOptionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerOption) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ServerOptionArrayOutput struct{ *pulumi.OutputState }

func (ServerOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerOption)(nil)).Elem()
}

func (o ServerOptionArrayOutput) ToServerOptionArrayOutput() ServerOptionArrayOutput {
	return o
}

func (o ServerOptionArrayOutput) ToServerOptionArrayOutputWithContext(ctx context.Context) ServerOptionArrayOutput {
	return o
}

func (o ServerOptionArrayOutput) Index(i pulumi.IntInput) ServerOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerOption {
		return vs[0].([]ServerOption)[vs[1].(int)]
	}).(ServerOptionOutput)
}

type ServerPrivateNetwork struct {
	// The date and time of the creation of the private network.
	CreatedAt *string `pulumi:"createdAt"`
	// The id of the private network to attach.
	Id string `pulumi:"id"`
	// List of IPAM IP IDs to assign to the server in the requested private network.
	IpamIpIds []string `pulumi:"ipamIpIds"`
	// The private network status.
	Status *string `pulumi:"status"`
	// The date and time of the last update of the private network.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The VLAN ID associated to the private network.
	Vlan *int `pulumi:"vlan"`
}

// ServerPrivateNetworkInput is an input type that accepts ServerPrivateNetworkArgs and ServerPrivateNetworkOutput values.
// You can construct a concrete instance of `ServerPrivateNetworkInput` via:
//
//	ServerPrivateNetworkArgs{...}
type ServerPrivateNetworkInput interface {
	pulumi.Input

	ToServerPrivateNetworkOutput() ServerPrivateNetworkOutput
	ToServerPrivateNetworkOutputWithContext(context.Context) ServerPrivateNetworkOutput
}

type ServerPrivateNetworkArgs struct {
	// The date and time of the creation of the private network.
	CreatedAt pulumi.StringPtrInput `pulumi:"createdAt"`
	// The id of the private network to attach.
	Id pulumi.StringInput `pulumi:"id"`
	// List of IPAM IP IDs to assign to the server in the requested private network.
	IpamIpIds pulumi.StringArrayInput `pulumi:"ipamIpIds"`
	// The private network status.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The date and time of the last update of the private network.
	UpdatedAt pulumi.StringPtrInput `pulumi:"updatedAt"`
	// The VLAN ID associated to the private network.
	Vlan pulumi.IntPtrInput `pulumi:"vlan"`
}

func (ServerPrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerPrivateNetwork)(nil)).Elem()
}

func (i ServerPrivateNetworkArgs) ToServerPrivateNetworkOutput() ServerPrivateNetworkOutput {
	return i.ToServerPrivateNetworkOutputWithContext(context.Background())
}

func (i ServerPrivateNetworkArgs) ToServerPrivateNetworkOutputWithContext(ctx context.Context) ServerPrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerPrivateNetworkOutput)
}

// ServerPrivateNetworkArrayInput is an input type that accepts ServerPrivateNetworkArray and ServerPrivateNetworkArrayOutput values.
// You can construct a concrete instance of `ServerPrivateNetworkArrayInput` via:
//
//	ServerPrivateNetworkArray{ ServerPrivateNetworkArgs{...} }
type ServerPrivateNetworkArrayInput interface {
	pulumi.Input

	ToServerPrivateNetworkArrayOutput() ServerPrivateNetworkArrayOutput
	ToServerPrivateNetworkArrayOutputWithContext(context.Context) ServerPrivateNetworkArrayOutput
}

type ServerPrivateNetworkArray []ServerPrivateNetworkInput

func (ServerPrivateNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerPrivateNetwork)(nil)).Elem()
}

func (i ServerPrivateNetworkArray) ToServerPrivateNetworkArrayOutput() ServerPrivateNetworkArrayOutput {
	return i.ToServerPrivateNetworkArrayOutputWithContext(context.Background())
}

func (i ServerPrivateNetworkArray) ToServerPrivateNetworkArrayOutputWithContext(ctx context.Context) ServerPrivateNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerPrivateNetworkArrayOutput)
}

type ServerPrivateNetworkOutput struct{ *pulumi.OutputState }

func (ServerPrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerPrivateNetwork)(nil)).Elem()
}

func (o ServerPrivateNetworkOutput) ToServerPrivateNetworkOutput() ServerPrivateNetworkOutput {
	return o
}

func (o ServerPrivateNetworkOutput) ToServerPrivateNetworkOutputWithContext(ctx context.Context) ServerPrivateNetworkOutput {
	return o
}

// The date and time of the creation of the private network.
func (o ServerPrivateNetworkOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerPrivateNetwork) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The id of the private network to attach.
func (o ServerPrivateNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ServerPrivateNetwork) string { return v.Id }).(pulumi.StringOutput)
}

// List of IPAM IP IDs to assign to the server in the requested private network.
func (o ServerPrivateNetworkOutput) IpamIpIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServerPrivateNetwork) []string { return v.IpamIpIds }).(pulumi.StringArrayOutput)
}

// The private network status.
func (o ServerPrivateNetworkOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerPrivateNetwork) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The date and time of the last update of the private network.
func (o ServerPrivateNetworkOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerPrivateNetwork) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

// The VLAN ID associated to the private network.
func (o ServerPrivateNetworkOutput) Vlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerPrivateNetwork) *int { return v.Vlan }).(pulumi.IntPtrOutput)
}

type ServerPrivateNetworkArrayOutput struct{ *pulumi.OutputState }

func (ServerPrivateNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerPrivateNetwork)(nil)).Elem()
}

func (o ServerPrivateNetworkArrayOutput) ToServerPrivateNetworkArrayOutput() ServerPrivateNetworkArrayOutput {
	return o
}

func (o ServerPrivateNetworkArrayOutput) ToServerPrivateNetworkArrayOutputWithContext(ctx context.Context) ServerPrivateNetworkArrayOutput {
	return o
}

func (o ServerPrivateNetworkArrayOutput) Index(i pulumi.IntInput) ServerPrivateNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerPrivateNetwork {
		return vs[0].([]ServerPrivateNetwork)[vs[1].(int)]
	}).(ServerPrivateNetworkOutput)
}

type GetIpsIp struct {
	// The date on which the flexible IP was created (RFC 3339 format).
	CreatedAt string `pulumi:"createdAt"`
	// The description of the flexible IP.
	Description string `pulumi:"description"`
	// The MAC address ID.
	Id        string `pulumi:"id"`
	IpAddress string `pulumi:"ipAddress"`
	// The MAC address of the Virtual MAC.
	MacAddresses []GetIpsIpMacAddress `pulumi:"macAddresses"`
	// (Defaults to provider `organizationId`) The ID of the organization the IP is in.
	OrganizationId string `pulumi:"organizationId"`
	// (Defaults to provider `projectId`) The ID of the project the IP is in.
	ProjectId string `pulumi:"projectId"`
	// The reverse domain associated with this IP.
	Reverse string `pulumi:"reverse"`
	// The status of virtual MAC.
	Status string `pulumi:"status"`
	// List of tags used as filter. IPs with these exact tags are listed.
	Tags []string `pulumi:"tags"`
	// The date on which the flexible IP was last updated (RFC 3339 format).
	UpdatedAt string `pulumi:"updatedAt"`
	// `zone`) The zone in which IPs exist.
	Zone string `pulumi:"zone"`
}

// GetIpsIpInput is an input type that accepts GetIpsIpArgs and GetIpsIpOutput values.
// You can construct a concrete instance of `GetIpsIpInput` via:
//
//	GetIpsIpArgs{...}
type GetIpsIpInput interface {
	pulumi.Input

	ToGetIpsIpOutput() GetIpsIpOutput
	ToGetIpsIpOutputWithContext(context.Context) GetIpsIpOutput
}

type GetIpsIpArgs struct {
	// The date on which the flexible IP was created (RFC 3339 format).
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of the flexible IP.
	Description pulumi.StringInput `pulumi:"description"`
	// The MAC address ID.
	Id        pulumi.StringInput `pulumi:"id"`
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The MAC address of the Virtual MAC.
	MacAddresses GetIpsIpMacAddressArrayInput `pulumi:"macAddresses"`
	// (Defaults to provider `organizationId`) The ID of the organization the IP is in.
	OrganizationId pulumi.StringInput `pulumi:"organizationId"`
	// (Defaults to provider `projectId`) The ID of the project the IP is in.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The reverse domain associated with this IP.
	Reverse pulumi.StringInput `pulumi:"reverse"`
	// The status of virtual MAC.
	Status pulumi.StringInput `pulumi:"status"`
	// List of tags used as filter. IPs with these exact tags are listed.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// The date on which the flexible IP was last updated (RFC 3339 format).
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// `zone`) The zone in which IPs exist.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetIpsIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpsIp)(nil)).Elem()
}

func (i GetIpsIpArgs) ToGetIpsIpOutput() GetIpsIpOutput {
	return i.ToGetIpsIpOutputWithContext(context.Background())
}

func (i GetIpsIpArgs) ToGetIpsIpOutputWithContext(ctx context.Context) GetIpsIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIpsIpOutput)
}

// GetIpsIpArrayInput is an input type that accepts GetIpsIpArray and GetIpsIpArrayOutput values.
// You can construct a concrete instance of `GetIpsIpArrayInput` via:
//
//	GetIpsIpArray{ GetIpsIpArgs{...} }
type GetIpsIpArrayInput interface {
	pulumi.Input

	ToGetIpsIpArrayOutput() GetIpsIpArrayOutput
	ToGetIpsIpArrayOutputWithContext(context.Context) GetIpsIpArrayOutput
}

type GetIpsIpArray []GetIpsIpInput

func (GetIpsIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIpsIp)(nil)).Elem()
}

func (i GetIpsIpArray) ToGetIpsIpArrayOutput() GetIpsIpArrayOutput {
	return i.ToGetIpsIpArrayOutputWithContext(context.Background())
}

func (i GetIpsIpArray) ToGetIpsIpArrayOutputWithContext(ctx context.Context) GetIpsIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIpsIpArrayOutput)
}

type GetIpsIpOutput struct{ *pulumi.OutputState }

func (GetIpsIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpsIp)(nil)).Elem()
}

func (o GetIpsIpOutput) ToGetIpsIpOutput() GetIpsIpOutput {
	return o
}

func (o GetIpsIpOutput) ToGetIpsIpOutputWithContext(ctx context.Context) GetIpsIpOutput {
	return o
}

// The date on which the flexible IP was created (RFC 3339 format).
func (o GetIpsIpOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIp) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the flexible IP.
func (o GetIpsIpOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIp) string { return v.Description }).(pulumi.StringOutput)
}

// The MAC address ID.
func (o GetIpsIpOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIp) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetIpsIpOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIp) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The MAC address of the Virtual MAC.
func (o GetIpsIpOutput) MacAddresses() GetIpsIpMacAddressArrayOutput {
	return o.ApplyT(func(v GetIpsIp) []GetIpsIpMacAddress { return v.MacAddresses }).(GetIpsIpMacAddressArrayOutput)
}

// (Defaults to provider `organizationId`) The ID of the organization the IP is in.
func (o GetIpsIpOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIp) string { return v.OrganizationId }).(pulumi.StringOutput)
}

// (Defaults to provider `projectId`) The ID of the project the IP is in.
func (o GetIpsIpOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIp) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The reverse domain associated with this IP.
func (o GetIpsIpOutput) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIp) string { return v.Reverse }).(pulumi.StringOutput)
}

// The status of virtual MAC.
func (o GetIpsIpOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIp) string { return v.Status }).(pulumi.StringOutput)
}

// List of tags used as filter. IPs with these exact tags are listed.
func (o GetIpsIpOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIpsIp) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The date on which the flexible IP was last updated (RFC 3339 format).
func (o GetIpsIpOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIp) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// `zone`) The zone in which IPs exist.
func (o GetIpsIpOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIp) string { return v.Zone }).(pulumi.StringOutput)
}

type GetIpsIpArrayOutput struct{ *pulumi.OutputState }

func (GetIpsIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIpsIp)(nil)).Elem()
}

func (o GetIpsIpArrayOutput) ToGetIpsIpArrayOutput() GetIpsIpArrayOutput {
	return o
}

func (o GetIpsIpArrayOutput) ToGetIpsIpArrayOutputWithContext(ctx context.Context) GetIpsIpArrayOutput {
	return o
}

func (o GetIpsIpArrayOutput) Index(i pulumi.IntInput) GetIpsIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIpsIp {
		return vs[0].([]GetIpsIp)[vs[1].(int)]
	}).(GetIpsIpOutput)
}

type GetIpsIpMacAddress struct {
	// The date on which the flexible IP was created (RFC 3339 format).
	CreatedAt string `pulumi:"createdAt"`
	// The MAC address ID.
	Id string `pulumi:"id"`
	// The MAC address of the Virtual MAC.
	MacAddress string `pulumi:"macAddress"`
	// The type of virtual MAC.
	MacType string `pulumi:"macType"`
	// The status of virtual MAC.
	Status string `pulumi:"status"`
	// The date on which the flexible IP was last updated (RFC 3339 format).
	UpdatedAt string `pulumi:"updatedAt"`
	// `zone`) The zone in which IPs exist.
	Zone string `pulumi:"zone"`
}

// GetIpsIpMacAddressInput is an input type that accepts GetIpsIpMacAddressArgs and GetIpsIpMacAddressOutput values.
// You can construct a concrete instance of `GetIpsIpMacAddressInput` via:
//
//	GetIpsIpMacAddressArgs{...}
type GetIpsIpMacAddressInput interface {
	pulumi.Input

	ToGetIpsIpMacAddressOutput() GetIpsIpMacAddressOutput
	ToGetIpsIpMacAddressOutputWithContext(context.Context) GetIpsIpMacAddressOutput
}

type GetIpsIpMacAddressArgs struct {
	// The date on which the flexible IP was created (RFC 3339 format).
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The MAC address ID.
	Id pulumi.StringInput `pulumi:"id"`
	// The MAC address of the Virtual MAC.
	MacAddress pulumi.StringInput `pulumi:"macAddress"`
	// The type of virtual MAC.
	MacType pulumi.StringInput `pulumi:"macType"`
	// The status of virtual MAC.
	Status pulumi.StringInput `pulumi:"status"`
	// The date on which the flexible IP was last updated (RFC 3339 format).
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// `zone`) The zone in which IPs exist.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetIpsIpMacAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpsIpMacAddress)(nil)).Elem()
}

func (i GetIpsIpMacAddressArgs) ToGetIpsIpMacAddressOutput() GetIpsIpMacAddressOutput {
	return i.ToGetIpsIpMacAddressOutputWithContext(context.Background())
}

func (i GetIpsIpMacAddressArgs) ToGetIpsIpMacAddressOutputWithContext(ctx context.Context) GetIpsIpMacAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIpsIpMacAddressOutput)
}

// GetIpsIpMacAddressArrayInput is an input type that accepts GetIpsIpMacAddressArray and GetIpsIpMacAddressArrayOutput values.
// You can construct a concrete instance of `GetIpsIpMacAddressArrayInput` via:
//
//	GetIpsIpMacAddressArray{ GetIpsIpMacAddressArgs{...} }
type GetIpsIpMacAddressArrayInput interface {
	pulumi.Input

	ToGetIpsIpMacAddressArrayOutput() GetIpsIpMacAddressArrayOutput
	ToGetIpsIpMacAddressArrayOutputWithContext(context.Context) GetIpsIpMacAddressArrayOutput
}

type GetIpsIpMacAddressArray []GetIpsIpMacAddressInput

func (GetIpsIpMacAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIpsIpMacAddress)(nil)).Elem()
}

func (i GetIpsIpMacAddressArray) ToGetIpsIpMacAddressArrayOutput() GetIpsIpMacAddressArrayOutput {
	return i.ToGetIpsIpMacAddressArrayOutputWithContext(context.Background())
}

func (i GetIpsIpMacAddressArray) ToGetIpsIpMacAddressArrayOutputWithContext(ctx context.Context) GetIpsIpMacAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIpsIpMacAddressArrayOutput)
}

type GetIpsIpMacAddressOutput struct{ *pulumi.OutputState }

func (GetIpsIpMacAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpsIpMacAddress)(nil)).Elem()
}

func (o GetIpsIpMacAddressOutput) ToGetIpsIpMacAddressOutput() GetIpsIpMacAddressOutput {
	return o
}

func (o GetIpsIpMacAddressOutput) ToGetIpsIpMacAddressOutputWithContext(ctx context.Context) GetIpsIpMacAddressOutput {
	return o
}

// The date on which the flexible IP was created (RFC 3339 format).
func (o GetIpsIpMacAddressOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIpMacAddress) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The MAC address ID.
func (o GetIpsIpMacAddressOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIpMacAddress) string { return v.Id }).(pulumi.StringOutput)
}

// The MAC address of the Virtual MAC.
func (o GetIpsIpMacAddressOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIpMacAddress) string { return v.MacAddress }).(pulumi.StringOutput)
}

// The type of virtual MAC.
func (o GetIpsIpMacAddressOutput) MacType() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIpMacAddress) string { return v.MacType }).(pulumi.StringOutput)
}

// The status of virtual MAC.
func (o GetIpsIpMacAddressOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIpMacAddress) string { return v.Status }).(pulumi.StringOutput)
}

// The date on which the flexible IP was last updated (RFC 3339 format).
func (o GetIpsIpMacAddressOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIpMacAddress) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// `zone`) The zone in which IPs exist.
func (o GetIpsIpMacAddressOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIpMacAddress) string { return v.Zone }).(pulumi.StringOutput)
}

type GetIpsIpMacAddressArrayOutput struct{ *pulumi.OutputState }

func (GetIpsIpMacAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIpsIpMacAddress)(nil)).Elem()
}

func (o GetIpsIpMacAddressArrayOutput) ToGetIpsIpMacAddressArrayOutput() GetIpsIpMacAddressArrayOutput {
	return o
}

func (o GetIpsIpMacAddressArrayOutput) ToGetIpsIpMacAddressArrayOutputWithContext(ctx context.Context) GetIpsIpMacAddressArrayOutput {
	return o
}

func (o GetIpsIpMacAddressArrayOutput) Index(i pulumi.IntInput) GetIpsIpMacAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIpsIpMacAddress {
		return vs[0].([]GetIpsIpMacAddress)[vs[1].(int)]
	}).(GetIpsIpMacAddressOutput)
}

type GetOfferCpu struct {
	// Number of core on this CPU.
	CoreCount int `pulumi:"coreCount"`
	// Frequency of the memory in MHz.
	Frequency int `pulumi:"frequency"`
	// The offer name. Only one of `name` and `offerId` should be specified.
	Name string `pulumi:"name"`
	// Number of thread on this CPU.
	ThreadCount int `pulumi:"threadCount"`
}

// GetOfferCpuInput is an input type that accepts GetOfferCpuArgs and GetOfferCpuOutput values.
// You can construct a concrete instance of `GetOfferCpuInput` via:
//
//	GetOfferCpuArgs{...}
type GetOfferCpuInput interface {
	pulumi.Input

	ToGetOfferCpuOutput() GetOfferCpuOutput
	ToGetOfferCpuOutputWithContext(context.Context) GetOfferCpuOutput
}

type GetOfferCpuArgs struct {
	// Number of core on this CPU.
	CoreCount pulumi.IntInput `pulumi:"coreCount"`
	// Frequency of the memory in MHz.
	Frequency pulumi.IntInput `pulumi:"frequency"`
	// The offer name. Only one of `name` and `offerId` should be specified.
	Name pulumi.StringInput `pulumi:"name"`
	// Number of thread on this CPU.
	ThreadCount pulumi.IntInput `pulumi:"threadCount"`
}

func (GetOfferCpuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOfferCpu)(nil)).Elem()
}

func (i GetOfferCpuArgs) ToGetOfferCpuOutput() GetOfferCpuOutput {
	return i.ToGetOfferCpuOutputWithContext(context.Background())
}

func (i GetOfferCpuArgs) ToGetOfferCpuOutputWithContext(ctx context.Context) GetOfferCpuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOfferCpuOutput)
}

type GetOfferCpuOutput struct{ *pulumi.OutputState }

func (GetOfferCpuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOfferCpu)(nil)).Elem()
}

func (o GetOfferCpuOutput) ToGetOfferCpuOutput() GetOfferCpuOutput {
	return o
}

func (o GetOfferCpuOutput) ToGetOfferCpuOutputWithContext(ctx context.Context) GetOfferCpuOutput {
	return o
}

// Number of core on this CPU.
func (o GetOfferCpuOutput) CoreCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetOfferCpu) int { return v.CoreCount }).(pulumi.IntOutput)
}

// Frequency of the memory in MHz.
func (o GetOfferCpuOutput) Frequency() pulumi.IntOutput {
	return o.ApplyT(func(v GetOfferCpu) int { return v.Frequency }).(pulumi.IntOutput)
}

// The offer name. Only one of `name` and `offerId` should be specified.
func (o GetOfferCpuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetOfferCpu) string { return v.Name }).(pulumi.StringOutput)
}

// Number of thread on this CPU.
func (o GetOfferCpuOutput) ThreadCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetOfferCpu) int { return v.ThreadCount }).(pulumi.IntOutput)
}

type GetOfferDisk struct {
	// Capacity of the memory in GB.
	Capacity int `pulumi:"capacity"`
	// Type of memory.
	Type string `pulumi:"type"`
}

// GetOfferDiskInput is an input type that accepts GetOfferDiskArgs and GetOfferDiskOutput values.
// You can construct a concrete instance of `GetOfferDiskInput` via:
//
//	GetOfferDiskArgs{...}
type GetOfferDiskInput interface {
	pulumi.Input

	ToGetOfferDiskOutput() GetOfferDiskOutput
	ToGetOfferDiskOutputWithContext(context.Context) GetOfferDiskOutput
}

type GetOfferDiskArgs struct {
	// Capacity of the memory in GB.
	Capacity pulumi.IntInput `pulumi:"capacity"`
	// Type of memory.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetOfferDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOfferDisk)(nil)).Elem()
}

func (i GetOfferDiskArgs) ToGetOfferDiskOutput() GetOfferDiskOutput {
	return i.ToGetOfferDiskOutputWithContext(context.Background())
}

func (i GetOfferDiskArgs) ToGetOfferDiskOutputWithContext(ctx context.Context) GetOfferDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOfferDiskOutput)
}

// GetOfferDiskArrayInput is an input type that accepts GetOfferDiskArray and GetOfferDiskArrayOutput values.
// You can construct a concrete instance of `GetOfferDiskArrayInput` via:
//
//	GetOfferDiskArray{ GetOfferDiskArgs{...} }
type GetOfferDiskArrayInput interface {
	pulumi.Input

	ToGetOfferDiskArrayOutput() GetOfferDiskArrayOutput
	ToGetOfferDiskArrayOutputWithContext(context.Context) GetOfferDiskArrayOutput
}

type GetOfferDiskArray []GetOfferDiskInput

func (GetOfferDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOfferDisk)(nil)).Elem()
}

func (i GetOfferDiskArray) ToGetOfferDiskArrayOutput() GetOfferDiskArrayOutput {
	return i.ToGetOfferDiskArrayOutputWithContext(context.Background())
}

func (i GetOfferDiskArray) ToGetOfferDiskArrayOutputWithContext(ctx context.Context) GetOfferDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOfferDiskArrayOutput)
}

type GetOfferDiskOutput struct{ *pulumi.OutputState }

func (GetOfferDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOfferDisk)(nil)).Elem()
}

func (o GetOfferDiskOutput) ToGetOfferDiskOutput() GetOfferDiskOutput {
	return o
}

func (o GetOfferDiskOutput) ToGetOfferDiskOutputWithContext(ctx context.Context) GetOfferDiskOutput {
	return o
}

// Capacity of the memory in GB.
func (o GetOfferDiskOutput) Capacity() pulumi.IntOutput {
	return o.ApplyT(func(v GetOfferDisk) int { return v.Capacity }).(pulumi.IntOutput)
}

// Type of memory.
func (o GetOfferDiskOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetOfferDisk) string { return v.Type }).(pulumi.StringOutput)
}

type GetOfferDiskArrayOutput struct{ *pulumi.OutputState }

func (GetOfferDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOfferDisk)(nil)).Elem()
}

func (o GetOfferDiskArrayOutput) ToGetOfferDiskArrayOutput() GetOfferDiskArrayOutput {
	return o
}

func (o GetOfferDiskArrayOutput) ToGetOfferDiskArrayOutputWithContext(ctx context.Context) GetOfferDiskArrayOutput {
	return o
}

func (o GetOfferDiskArrayOutput) Index(i pulumi.IntInput) GetOfferDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOfferDisk {
		return vs[0].([]GetOfferDisk)[vs[1].(int)]
	}).(GetOfferDiskOutput)
}

type GetOfferMemory struct {
	// Capacity of the memory in GB.
	Capacity int `pulumi:"capacity"`
	// Frequency of the memory in MHz.
	Frequency int `pulumi:"frequency"`
	// True if error-correcting code is available on this memory.
	IsEcc bool `pulumi:"isEcc"`
	// Type of memory.
	Type string `pulumi:"type"`
}

// GetOfferMemoryInput is an input type that accepts GetOfferMemoryArgs and GetOfferMemoryOutput values.
// You can construct a concrete instance of `GetOfferMemoryInput` via:
//
//	GetOfferMemoryArgs{...}
type GetOfferMemoryInput interface {
	pulumi.Input

	ToGetOfferMemoryOutput() GetOfferMemoryOutput
	ToGetOfferMemoryOutputWithContext(context.Context) GetOfferMemoryOutput
}

type GetOfferMemoryArgs struct {
	// Capacity of the memory in GB.
	Capacity pulumi.IntInput `pulumi:"capacity"`
	// Frequency of the memory in MHz.
	Frequency pulumi.IntInput `pulumi:"frequency"`
	// True if error-correcting code is available on this memory.
	IsEcc pulumi.BoolInput `pulumi:"isEcc"`
	// Type of memory.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetOfferMemoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOfferMemory)(nil)).Elem()
}

func (i GetOfferMemoryArgs) ToGetOfferMemoryOutput() GetOfferMemoryOutput {
	return i.ToGetOfferMemoryOutputWithContext(context.Background())
}

func (i GetOfferMemoryArgs) ToGetOfferMemoryOutputWithContext(ctx context.Context) GetOfferMemoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOfferMemoryOutput)
}

// GetOfferMemoryArrayInput is an input type that accepts GetOfferMemoryArray and GetOfferMemoryArrayOutput values.
// You can construct a concrete instance of `GetOfferMemoryArrayInput` via:
//
//	GetOfferMemoryArray{ GetOfferMemoryArgs{...} }
type GetOfferMemoryArrayInput interface {
	pulumi.Input

	ToGetOfferMemoryArrayOutput() GetOfferMemoryArrayOutput
	ToGetOfferMemoryArrayOutputWithContext(context.Context) GetOfferMemoryArrayOutput
}

type GetOfferMemoryArray []GetOfferMemoryInput

func (GetOfferMemoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOfferMemory)(nil)).Elem()
}

func (i GetOfferMemoryArray) ToGetOfferMemoryArrayOutput() GetOfferMemoryArrayOutput {
	return i.ToGetOfferMemoryArrayOutputWithContext(context.Background())
}

func (i GetOfferMemoryArray) ToGetOfferMemoryArrayOutputWithContext(ctx context.Context) GetOfferMemoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOfferMemoryArrayOutput)
}

type GetOfferMemoryOutput struct{ *pulumi.OutputState }

func (GetOfferMemoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOfferMemory)(nil)).Elem()
}

func (o GetOfferMemoryOutput) ToGetOfferMemoryOutput() GetOfferMemoryOutput {
	return o
}

func (o GetOfferMemoryOutput) ToGetOfferMemoryOutputWithContext(ctx context.Context) GetOfferMemoryOutput {
	return o
}

// Capacity of the memory in GB.
func (o GetOfferMemoryOutput) Capacity() pulumi.IntOutput {
	return o.ApplyT(func(v GetOfferMemory) int { return v.Capacity }).(pulumi.IntOutput)
}

// Frequency of the memory in MHz.
func (o GetOfferMemoryOutput) Frequency() pulumi.IntOutput {
	return o.ApplyT(func(v GetOfferMemory) int { return v.Frequency }).(pulumi.IntOutput)
}

// True if error-correcting code is available on this memory.
func (o GetOfferMemoryOutput) IsEcc() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOfferMemory) bool { return v.IsEcc }).(pulumi.BoolOutput)
}

// Type of memory.
func (o GetOfferMemoryOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetOfferMemory) string { return v.Type }).(pulumi.StringOutput)
}

type GetOfferMemoryArrayOutput struct{ *pulumi.OutputState }

func (GetOfferMemoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOfferMemory)(nil)).Elem()
}

func (o GetOfferMemoryArrayOutput) ToGetOfferMemoryArrayOutput() GetOfferMemoryArrayOutput {
	return o
}

func (o GetOfferMemoryArrayOutput) ToGetOfferMemoryArrayOutputWithContext(ctx context.Context) GetOfferMemoryArrayOutput {
	return o
}

func (o GetOfferMemoryArrayOutput) Index(i pulumi.IntInput) GetOfferMemoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOfferMemory {
		return vs[0].([]GetOfferMemory)[vs[1].(int)]
	}).(GetOfferMemoryOutput)
}

type GetServerIp struct {
	// The IPv6 address
	Address string `pulumi:"address"`
	// The ID of the server.
	Id string `pulumi:"id"`
	// The Reverse of the IPv6
	Reverse string `pulumi:"reverse"`
	// The version of the IPv6
	Version string `pulumi:"version"`
}

// GetServerIpInput is an input type that accepts GetServerIpArgs and GetServerIpOutput values.
// You can construct a concrete instance of `GetServerIpInput` via:
//
//	GetServerIpArgs{...}
type GetServerIpInput interface {
	pulumi.Input

	ToGetServerIpOutput() GetServerIpOutput
	ToGetServerIpOutputWithContext(context.Context) GetServerIpOutput
}

type GetServerIpArgs struct {
	// The IPv6 address
	Address pulumi.StringInput `pulumi:"address"`
	// The ID of the server.
	Id pulumi.StringInput `pulumi:"id"`
	// The Reverse of the IPv6
	Reverse pulumi.StringInput `pulumi:"reverse"`
	// The version of the IPv6
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetServerIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerIp)(nil)).Elem()
}

func (i GetServerIpArgs) ToGetServerIpOutput() GetServerIpOutput {
	return i.ToGetServerIpOutputWithContext(context.Background())
}

func (i GetServerIpArgs) ToGetServerIpOutputWithContext(ctx context.Context) GetServerIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerIpOutput)
}

// GetServerIpArrayInput is an input type that accepts GetServerIpArray and GetServerIpArrayOutput values.
// You can construct a concrete instance of `GetServerIpArrayInput` via:
//
//	GetServerIpArray{ GetServerIpArgs{...} }
type GetServerIpArrayInput interface {
	pulumi.Input

	ToGetServerIpArrayOutput() GetServerIpArrayOutput
	ToGetServerIpArrayOutputWithContext(context.Context) GetServerIpArrayOutput
}

type GetServerIpArray []GetServerIpInput

func (GetServerIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerIp)(nil)).Elem()
}

func (i GetServerIpArray) ToGetServerIpArrayOutput() GetServerIpArrayOutput {
	return i.ToGetServerIpArrayOutputWithContext(context.Background())
}

func (i GetServerIpArray) ToGetServerIpArrayOutputWithContext(ctx context.Context) GetServerIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerIpArrayOutput)
}

type GetServerIpOutput struct{ *pulumi.OutputState }

func (GetServerIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerIp)(nil)).Elem()
}

func (o GetServerIpOutput) ToGetServerIpOutput() GetServerIpOutput {
	return o
}

func (o GetServerIpOutput) ToGetServerIpOutputWithContext(ctx context.Context) GetServerIpOutput {
	return o
}

// The IPv6 address
func (o GetServerIpOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIp) string { return v.Address }).(pulumi.StringOutput)
}

// The ID of the server.
func (o GetServerIpOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIp) string { return v.Id }).(pulumi.StringOutput)
}

// The Reverse of the IPv6
func (o GetServerIpOutput) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIp) string { return v.Reverse }).(pulumi.StringOutput)
}

// The version of the IPv6
func (o GetServerIpOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIp) string { return v.Version }).(pulumi.StringOutput)
}

type GetServerIpArrayOutput struct{ *pulumi.OutputState }

func (GetServerIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerIp)(nil)).Elem()
}

func (o GetServerIpArrayOutput) ToGetServerIpArrayOutput() GetServerIpArrayOutput {
	return o
}

func (o GetServerIpArrayOutput) ToGetServerIpArrayOutputWithContext(ctx context.Context) GetServerIpArrayOutput {
	return o
}

func (o GetServerIpArrayOutput) Index(i pulumi.IntInput) GetServerIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerIp {
		return vs[0].([]GetServerIp)[vs[1].(int)]
	}).(GetServerIpOutput)
}

type GetServerIpv4 struct {
	// The IPv6 address
	Address string `pulumi:"address"`
	// The ID of the server.
	Id string `pulumi:"id"`
	// The Reverse of the IPv6
	Reverse string `pulumi:"reverse"`
	// The version of the IPv6
	Version string `pulumi:"version"`
}

// GetServerIpv4Input is an input type that accepts GetServerIpv4Args and GetServerIpv4Output values.
// You can construct a concrete instance of `GetServerIpv4Input` via:
//
//	GetServerIpv4Args{...}
type GetServerIpv4Input interface {
	pulumi.Input

	ToGetServerIpv4Output() GetServerIpv4Output
	ToGetServerIpv4OutputWithContext(context.Context) GetServerIpv4Output
}

type GetServerIpv4Args struct {
	// The IPv6 address
	Address pulumi.StringInput `pulumi:"address"`
	// The ID of the server.
	Id pulumi.StringInput `pulumi:"id"`
	// The Reverse of the IPv6
	Reverse pulumi.StringInput `pulumi:"reverse"`
	// The version of the IPv6
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetServerIpv4Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerIpv4)(nil)).Elem()
}

func (i GetServerIpv4Args) ToGetServerIpv4Output() GetServerIpv4Output {
	return i.ToGetServerIpv4OutputWithContext(context.Background())
}

func (i GetServerIpv4Args) ToGetServerIpv4OutputWithContext(ctx context.Context) GetServerIpv4Output {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerIpv4Output)
}

// GetServerIpv4ArrayInput is an input type that accepts GetServerIpv4Array and GetServerIpv4ArrayOutput values.
// You can construct a concrete instance of `GetServerIpv4ArrayInput` via:
//
//	GetServerIpv4Array{ GetServerIpv4Args{...} }
type GetServerIpv4ArrayInput interface {
	pulumi.Input

	ToGetServerIpv4ArrayOutput() GetServerIpv4ArrayOutput
	ToGetServerIpv4ArrayOutputWithContext(context.Context) GetServerIpv4ArrayOutput
}

type GetServerIpv4Array []GetServerIpv4Input

func (GetServerIpv4Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerIpv4)(nil)).Elem()
}

func (i GetServerIpv4Array) ToGetServerIpv4ArrayOutput() GetServerIpv4ArrayOutput {
	return i.ToGetServerIpv4ArrayOutputWithContext(context.Background())
}

func (i GetServerIpv4Array) ToGetServerIpv4ArrayOutputWithContext(ctx context.Context) GetServerIpv4ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerIpv4ArrayOutput)
}

type GetServerIpv4Output struct{ *pulumi.OutputState }

func (GetServerIpv4Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerIpv4)(nil)).Elem()
}

func (o GetServerIpv4Output) ToGetServerIpv4Output() GetServerIpv4Output {
	return o
}

func (o GetServerIpv4Output) ToGetServerIpv4OutputWithContext(ctx context.Context) GetServerIpv4Output {
	return o
}

// The IPv6 address
func (o GetServerIpv4Output) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIpv4) string { return v.Address }).(pulumi.StringOutput)
}

// The ID of the server.
func (o GetServerIpv4Output) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIpv4) string { return v.Id }).(pulumi.StringOutput)
}

// The Reverse of the IPv6
func (o GetServerIpv4Output) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIpv4) string { return v.Reverse }).(pulumi.StringOutput)
}

// The version of the IPv6
func (o GetServerIpv4Output) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIpv4) string { return v.Version }).(pulumi.StringOutput)
}

type GetServerIpv4ArrayOutput struct{ *pulumi.OutputState }

func (GetServerIpv4ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerIpv4)(nil)).Elem()
}

func (o GetServerIpv4ArrayOutput) ToGetServerIpv4ArrayOutput() GetServerIpv4ArrayOutput {
	return o
}

func (o GetServerIpv4ArrayOutput) ToGetServerIpv4ArrayOutputWithContext(ctx context.Context) GetServerIpv4ArrayOutput {
	return o
}

func (o GetServerIpv4ArrayOutput) Index(i pulumi.IntInput) GetServerIpv4Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerIpv4 {
		return vs[0].([]GetServerIpv4)[vs[1].(int)]
	}).(GetServerIpv4Output)
}

type GetServerIpv6 struct {
	// The IPv6 address
	Address string `pulumi:"address"`
	// The ID of the server.
	Id string `pulumi:"id"`
	// The Reverse of the IPv6
	Reverse string `pulumi:"reverse"`
	// The version of the IPv6
	Version string `pulumi:"version"`
}

// GetServerIpv6Input is an input type that accepts GetServerIpv6Args and GetServerIpv6Output values.
// You can construct a concrete instance of `GetServerIpv6Input` via:
//
//	GetServerIpv6Args{...}
type GetServerIpv6Input interface {
	pulumi.Input

	ToGetServerIpv6Output() GetServerIpv6Output
	ToGetServerIpv6OutputWithContext(context.Context) GetServerIpv6Output
}

type GetServerIpv6Args struct {
	// The IPv6 address
	Address pulumi.StringInput `pulumi:"address"`
	// The ID of the server.
	Id pulumi.StringInput `pulumi:"id"`
	// The Reverse of the IPv6
	Reverse pulumi.StringInput `pulumi:"reverse"`
	// The version of the IPv6
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetServerIpv6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerIpv6)(nil)).Elem()
}

func (i GetServerIpv6Args) ToGetServerIpv6Output() GetServerIpv6Output {
	return i.ToGetServerIpv6OutputWithContext(context.Background())
}

func (i GetServerIpv6Args) ToGetServerIpv6OutputWithContext(ctx context.Context) GetServerIpv6Output {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerIpv6Output)
}

// GetServerIpv6ArrayInput is an input type that accepts GetServerIpv6Array and GetServerIpv6ArrayOutput values.
// You can construct a concrete instance of `GetServerIpv6ArrayInput` via:
//
//	GetServerIpv6Array{ GetServerIpv6Args{...} }
type GetServerIpv6ArrayInput interface {
	pulumi.Input

	ToGetServerIpv6ArrayOutput() GetServerIpv6ArrayOutput
	ToGetServerIpv6ArrayOutputWithContext(context.Context) GetServerIpv6ArrayOutput
}

type GetServerIpv6Array []GetServerIpv6Input

func (GetServerIpv6Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerIpv6)(nil)).Elem()
}

func (i GetServerIpv6Array) ToGetServerIpv6ArrayOutput() GetServerIpv6ArrayOutput {
	return i.ToGetServerIpv6ArrayOutputWithContext(context.Background())
}

func (i GetServerIpv6Array) ToGetServerIpv6ArrayOutputWithContext(ctx context.Context) GetServerIpv6ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerIpv6ArrayOutput)
}

type GetServerIpv6Output struct{ *pulumi.OutputState }

func (GetServerIpv6Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerIpv6)(nil)).Elem()
}

func (o GetServerIpv6Output) ToGetServerIpv6Output() GetServerIpv6Output {
	return o
}

func (o GetServerIpv6Output) ToGetServerIpv6OutputWithContext(ctx context.Context) GetServerIpv6Output {
	return o
}

// The IPv6 address
func (o GetServerIpv6Output) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIpv6) string { return v.Address }).(pulumi.StringOutput)
}

// The ID of the server.
func (o GetServerIpv6Output) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIpv6) string { return v.Id }).(pulumi.StringOutput)
}

// The Reverse of the IPv6
func (o GetServerIpv6Output) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIpv6) string { return v.Reverse }).(pulumi.StringOutput)
}

// The version of the IPv6
func (o GetServerIpv6Output) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIpv6) string { return v.Version }).(pulumi.StringOutput)
}

type GetServerIpv6ArrayOutput struct{ *pulumi.OutputState }

func (GetServerIpv6ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerIpv6)(nil)).Elem()
}

func (o GetServerIpv6ArrayOutput) ToGetServerIpv6ArrayOutput() GetServerIpv6ArrayOutput {
	return o
}

func (o GetServerIpv6ArrayOutput) ToGetServerIpv6ArrayOutputWithContext(ctx context.Context) GetServerIpv6ArrayOutput {
	return o
}

func (o GetServerIpv6ArrayOutput) Index(i pulumi.IntInput) GetServerIpv6Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerIpv6 {
		return vs[0].([]GetServerIpv6)[vs[1].(int)]
	}).(GetServerIpv6Output)
}

type GetServerOption struct {
	// Auto expire the option after this date
	ExpiresAt string `pulumi:"expiresAt"`
	// The ID of the server.
	Id string `pulumi:"id"`
	// The server name. Only one of `name` and `serverId` should be specified.
	Name string `pulumi:"name"`
}

// GetServerOptionInput is an input type that accepts GetServerOptionArgs and GetServerOptionOutput values.
// You can construct a concrete instance of `GetServerOptionInput` via:
//
//	GetServerOptionArgs{...}
type GetServerOptionInput interface {
	pulumi.Input

	ToGetServerOptionOutput() GetServerOptionOutput
	ToGetServerOptionOutputWithContext(context.Context) GetServerOptionOutput
}

type GetServerOptionArgs struct {
	// Auto expire the option after this date
	ExpiresAt pulumi.StringInput `pulumi:"expiresAt"`
	// The ID of the server.
	Id pulumi.StringInput `pulumi:"id"`
	// The server name. Only one of `name` and `serverId` should be specified.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetServerOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerOption)(nil)).Elem()
}

func (i GetServerOptionArgs) ToGetServerOptionOutput() GetServerOptionOutput {
	return i.ToGetServerOptionOutputWithContext(context.Background())
}

func (i GetServerOptionArgs) ToGetServerOptionOutputWithContext(ctx context.Context) GetServerOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerOptionOutput)
}

// GetServerOptionArrayInput is an input type that accepts GetServerOptionArray and GetServerOptionArrayOutput values.
// You can construct a concrete instance of `GetServerOptionArrayInput` via:
//
//	GetServerOptionArray{ GetServerOptionArgs{...} }
type GetServerOptionArrayInput interface {
	pulumi.Input

	ToGetServerOptionArrayOutput() GetServerOptionArrayOutput
	ToGetServerOptionArrayOutputWithContext(context.Context) GetServerOptionArrayOutput
}

type GetServerOptionArray []GetServerOptionInput

func (GetServerOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerOption)(nil)).Elem()
}

func (i GetServerOptionArray) ToGetServerOptionArrayOutput() GetServerOptionArrayOutput {
	return i.ToGetServerOptionArrayOutputWithContext(context.Background())
}

func (i GetServerOptionArray) ToGetServerOptionArrayOutputWithContext(ctx context.Context) GetServerOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerOptionArrayOutput)
}

type GetServerOptionOutput struct{ *pulumi.OutputState }

func (GetServerOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerOption)(nil)).Elem()
}

func (o GetServerOptionOutput) ToGetServerOptionOutput() GetServerOptionOutput {
	return o
}

func (o GetServerOptionOutput) ToGetServerOptionOutputWithContext(ctx context.Context) GetServerOptionOutput {
	return o
}

// Auto expire the option after this date
func (o GetServerOptionOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerOption) string { return v.ExpiresAt }).(pulumi.StringOutput)
}

// The ID of the server.
func (o GetServerOptionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerOption) string { return v.Id }).(pulumi.StringOutput)
}

// The server name. Only one of `name` and `serverId` should be specified.
func (o GetServerOptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerOption) string { return v.Name }).(pulumi.StringOutput)
}

type GetServerOptionArrayOutput struct{ *pulumi.OutputState }

func (GetServerOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerOption)(nil)).Elem()
}

func (o GetServerOptionArrayOutput) ToGetServerOptionArrayOutput() GetServerOptionArrayOutput {
	return o
}

func (o GetServerOptionArrayOutput) ToGetServerOptionArrayOutputWithContext(ctx context.Context) GetServerOptionArrayOutput {
	return o
}

func (o GetServerOptionArrayOutput) Index(i pulumi.IntInput) GetServerOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerOption {
		return vs[0].([]GetServerOption)[vs[1].(int)]
	}).(GetServerOptionOutput)
}

type GetServerPrivateNetwork struct {
	// The date and time of the creation of the private network
	CreatedAt string `pulumi:"createdAt"`
	// The ID of the server.
	Id string `pulumi:"id"`
	// List of IPAM IP IDs to attach to the server
	IpamIpIds []string `pulumi:"ipamIpIds"`
	// The private network status
	Status string `pulumi:"status"`
	// The date and time of the last update of the private network
	UpdatedAt string `pulumi:"updatedAt"`
	// The VLAN ID associated to the private network
	Vlan int `pulumi:"vlan"`
}

// GetServerPrivateNetworkInput is an input type that accepts GetServerPrivateNetworkArgs and GetServerPrivateNetworkOutput values.
// You can construct a concrete instance of `GetServerPrivateNetworkInput` via:
//
//	GetServerPrivateNetworkArgs{...}
type GetServerPrivateNetworkInput interface {
	pulumi.Input

	ToGetServerPrivateNetworkOutput() GetServerPrivateNetworkOutput
	ToGetServerPrivateNetworkOutputWithContext(context.Context) GetServerPrivateNetworkOutput
}

type GetServerPrivateNetworkArgs struct {
	// The date and time of the creation of the private network
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The ID of the server.
	Id pulumi.StringInput `pulumi:"id"`
	// List of IPAM IP IDs to attach to the server
	IpamIpIds pulumi.StringArrayInput `pulumi:"ipamIpIds"`
	// The private network status
	Status pulumi.StringInput `pulumi:"status"`
	// The date and time of the last update of the private network
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The VLAN ID associated to the private network
	Vlan pulumi.IntInput `pulumi:"vlan"`
}

func (GetServerPrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerPrivateNetwork)(nil)).Elem()
}

func (i GetServerPrivateNetworkArgs) ToGetServerPrivateNetworkOutput() GetServerPrivateNetworkOutput {
	return i.ToGetServerPrivateNetworkOutputWithContext(context.Background())
}

func (i GetServerPrivateNetworkArgs) ToGetServerPrivateNetworkOutputWithContext(ctx context.Context) GetServerPrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerPrivateNetworkOutput)
}

// GetServerPrivateNetworkArrayInput is an input type that accepts GetServerPrivateNetworkArray and GetServerPrivateNetworkArrayOutput values.
// You can construct a concrete instance of `GetServerPrivateNetworkArrayInput` via:
//
//	GetServerPrivateNetworkArray{ GetServerPrivateNetworkArgs{...} }
type GetServerPrivateNetworkArrayInput interface {
	pulumi.Input

	ToGetServerPrivateNetworkArrayOutput() GetServerPrivateNetworkArrayOutput
	ToGetServerPrivateNetworkArrayOutputWithContext(context.Context) GetServerPrivateNetworkArrayOutput
}

type GetServerPrivateNetworkArray []GetServerPrivateNetworkInput

func (GetServerPrivateNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerPrivateNetwork)(nil)).Elem()
}

func (i GetServerPrivateNetworkArray) ToGetServerPrivateNetworkArrayOutput() GetServerPrivateNetworkArrayOutput {
	return i.ToGetServerPrivateNetworkArrayOutputWithContext(context.Background())
}

func (i GetServerPrivateNetworkArray) ToGetServerPrivateNetworkArrayOutputWithContext(ctx context.Context) GetServerPrivateNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerPrivateNetworkArrayOutput)
}

type GetServerPrivateNetworkOutput struct{ *pulumi.OutputState }

func (GetServerPrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerPrivateNetwork)(nil)).Elem()
}

func (o GetServerPrivateNetworkOutput) ToGetServerPrivateNetworkOutput() GetServerPrivateNetworkOutput {
	return o
}

func (o GetServerPrivateNetworkOutput) ToGetServerPrivateNetworkOutputWithContext(ctx context.Context) GetServerPrivateNetworkOutput {
	return o
}

// The date and time of the creation of the private network
func (o GetServerPrivateNetworkOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerPrivateNetwork) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of the server.
func (o GetServerPrivateNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerPrivateNetwork) string { return v.Id }).(pulumi.StringOutput)
}

// List of IPAM IP IDs to attach to the server
func (o GetServerPrivateNetworkOutput) IpamIpIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetServerPrivateNetwork) []string { return v.IpamIpIds }).(pulumi.StringArrayOutput)
}

// The private network status
func (o GetServerPrivateNetworkOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerPrivateNetwork) string { return v.Status }).(pulumi.StringOutput)
}

// The date and time of the last update of the private network
func (o GetServerPrivateNetworkOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerPrivateNetwork) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The VLAN ID associated to the private network
func (o GetServerPrivateNetworkOutput) Vlan() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerPrivateNetwork) int { return v.Vlan }).(pulumi.IntOutput)
}

type GetServerPrivateNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetServerPrivateNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerPrivateNetwork)(nil)).Elem()
}

func (o GetServerPrivateNetworkArrayOutput) ToGetServerPrivateNetworkArrayOutput() GetServerPrivateNetworkArrayOutput {
	return o
}

func (o GetServerPrivateNetworkArrayOutput) ToGetServerPrivateNetworkArrayOutputWithContext(ctx context.Context) GetServerPrivateNetworkArrayOutput {
	return o
}

func (o GetServerPrivateNetworkArrayOutput) Index(i pulumi.IntInput) GetServerPrivateNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerPrivateNetwork {
		return vs[0].([]GetServerPrivateNetwork)[vs[1].(int)]
	}).(GetServerPrivateNetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerIpInput)(nil)).Elem(), ServerIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerIpArrayInput)(nil)).Elem(), ServerIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerIpv4Input)(nil)).Elem(), ServerIpv4Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerIpv4ArrayInput)(nil)).Elem(), ServerIpv4Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerIpv6Input)(nil)).Elem(), ServerIpv6Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerIpv6ArrayInput)(nil)).Elem(), ServerIpv6Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerOptionInput)(nil)).Elem(), ServerOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerOptionArrayInput)(nil)).Elem(), ServerOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerPrivateNetworkInput)(nil)).Elem(), ServerPrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerPrivateNetworkArrayInput)(nil)).Elem(), ServerPrivateNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIpsIpInput)(nil)).Elem(), GetIpsIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIpsIpArrayInput)(nil)).Elem(), GetIpsIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIpsIpMacAddressInput)(nil)).Elem(), GetIpsIpMacAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIpsIpMacAddressArrayInput)(nil)).Elem(), GetIpsIpMacAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOfferCpuInput)(nil)).Elem(), GetOfferCpuArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOfferDiskInput)(nil)).Elem(), GetOfferDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOfferDiskArrayInput)(nil)).Elem(), GetOfferDiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOfferMemoryInput)(nil)).Elem(), GetOfferMemoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOfferMemoryArrayInput)(nil)).Elem(), GetOfferMemoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerIpInput)(nil)).Elem(), GetServerIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerIpArrayInput)(nil)).Elem(), GetServerIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerIpv4Input)(nil)).Elem(), GetServerIpv4Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerIpv4ArrayInput)(nil)).Elem(), GetServerIpv4Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerIpv6Input)(nil)).Elem(), GetServerIpv6Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerIpv6ArrayInput)(nil)).Elem(), GetServerIpv6Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerOptionInput)(nil)).Elem(), GetServerOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerOptionArrayInput)(nil)).Elem(), GetServerOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerPrivateNetworkInput)(nil)).Elem(), GetServerPrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerPrivateNetworkArrayInput)(nil)).Elem(), GetServerPrivateNetworkArray{})
	pulumi.RegisterOutputType(ServerIpOutput{})
	pulumi.RegisterOutputType(ServerIpArrayOutput{})
	pulumi.RegisterOutputType(ServerIpv4Output{})
	pulumi.RegisterOutputType(ServerIpv4ArrayOutput{})
	pulumi.RegisterOutputType(ServerIpv6Output{})
	pulumi.RegisterOutputType(ServerIpv6ArrayOutput{})
	pulumi.RegisterOutputType(ServerOptionOutput{})
	pulumi.RegisterOutputType(ServerOptionArrayOutput{})
	pulumi.RegisterOutputType(ServerPrivateNetworkOutput{})
	pulumi.RegisterOutputType(ServerPrivateNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetIpsIpOutput{})
	pulumi.RegisterOutputType(GetIpsIpArrayOutput{})
	pulumi.RegisterOutputType(GetIpsIpMacAddressOutput{})
	pulumi.RegisterOutputType(GetIpsIpMacAddressArrayOutput{})
	pulumi.RegisterOutputType(GetOfferCpuOutput{})
	pulumi.RegisterOutputType(GetOfferDiskOutput{})
	pulumi.RegisterOutputType(GetOfferDiskArrayOutput{})
	pulumi.RegisterOutputType(GetOfferMemoryOutput{})
	pulumi.RegisterOutputType(GetOfferMemoryArrayOutput{})
	pulumi.RegisterOutputType(GetServerIpOutput{})
	pulumi.RegisterOutputType(GetServerIpArrayOutput{})
	pulumi.RegisterOutputType(GetServerIpv4Output{})
	pulumi.RegisterOutputType(GetServerIpv4ArrayOutput{})
	pulumi.RegisterOutputType(GetServerIpv6Output{})
	pulumi.RegisterOutputType(GetServerIpv6ArrayOutput{})
	pulumi.RegisterOutputType(GetServerOptionOutput{})
	pulumi.RegisterOutputType(GetServerOptionArrayOutput{})
	pulumi.RegisterOutputType(GetServerPrivateNetworkOutput{})
	pulumi.RegisterOutputType(GetServerPrivateNetworkArrayOutput{})
}
