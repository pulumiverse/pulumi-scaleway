// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticmetal

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Compute Baremetal servers. For more information, see the [API documentation](https://www.scaleway.com/en/developers/api/elastic-metal/).
//
// ## Example Usage
//
// ### Without install config
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/elasticmetal"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myOffer, err := elasticmetal.GetOffer(ctx, &elasticmetal.GetOfferArgs{
//				Zone: pulumi.StringRef("fr-par-2"),
//				Name: pulumi.StringRef("EM-B112X-SSD"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = elasticmetal.NewServer(ctx, "my_server", &elasticmetal.ServerArgs{
//				Zone:                   pulumi.String("fr-par-2"),
//				Offer:                  pulumi.String(myOffer.OfferId),
//				InstallConfigAfterward: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With custom partitioning
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/elasticmetal"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/iam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			configCustomPartitioning := "{\"disks\":[{\"device\":\"/dev/nvme0n1\",\"partitions\":[{\"label\":\"uefi\",\"number\":1,\"size\":536870912,\"useAllAvailableSpace\":false},{\"label\":\"boot\",\"number\":2,\"size\":536870912,\"useAllAvailableSpace\":false},{\"label\":\"root\",\"number\":3,\"size\":1018839433216,\"useAllAvailableSpace\":false}]},{\"device\":\"/dev/nvme1n1\",\"partitions\":[{\"label\":\"boot\",\"number\":1,\"size\":536870912,\"useAllAvailableSpace\":false},{\"label\":\"data\",\"number\":2,\"size\":1018839433216,\"useAllAvailableSpace\":false}]}],\"filesystems\":[{\"device\":\"/dev/nvme0n1p1\",\"format\":\"fat32\",\"mountpoint\":\"/boot/efi\"},{\"device\":\"/dev/nvme0n1p2\",\"format\":\"ext4\",\"mountpoint\":\"/boot\"},{\"device\":\"/dev/nvme0n1p3\",\"format\":\"ext4\",\"mountpoint\":\"/\"},{\"device\":\"/dev/nvme1n1p2\",\"format\":\"ext4\",\"mountpoint\":\"/data\"}],\"raids\":[]}"
//			if param := cfg.Get("configCustomPartitioning"); param != "" {
//				configCustomPartitioning = param
//			}
//			myOs, err := elasticmetal.GetOs(ctx, &elasticmetal.GetOsArgs{
//				Zone:    pulumi.StringRef("fr-par-1"),
//				Name:    pulumi.StringRef("Ubuntu"),
//				Version: pulumi.StringRef("22.04 LTS (Jammy Jellyfish)"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			mySshKey, err := iam.NewSshKey(ctx, "my_ssh_key", &iam.SshKeyArgs{
//				Name:      pulumi.String("my_ssh_key"),
//				PublicKey: pulumi.String("ssh XXXXXXXXXXX"),
//			})
//			if err != nil {
//				return err
//			}
//			myOffer, err := elasticmetal.GetOffer(ctx, &elasticmetal.GetOfferArgs{
//				Zone:               pulumi.StringRef("fr-par-1"),
//				Name:               pulumi.StringRef("EM-B220E-NVME"),
//				SubscriptionPeriod: pulumi.StringRef("hourly"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = elasticmetal.NewServer(ctx, "my_server", &elasticmetal.ServerArgs{
//				Name:         pulumi.String("my_super_server"),
//				Zone:         pulumi.String("fr-par-1"),
//				Description:  pulumi.String("test a description"),
//				Offer:        pulumi.String(myOffer.OfferId),
//				Os:           pulumi.String(myOs.OsId),
//				Partitioning: pulumi.String(configCustomPartitioning),
//				Tags: pulumi.StringArray{
//					pulumi.String("terraform-test"),
//					pulumi.String("scaleway_baremetal_server"),
//					pulumi.String("minimal"),
//				},
//				SshKeyIds: pulumi.StringArray{
//					mySshKey.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Migrate from hourly to monthly plan
//
// To migrate from an hourly to a monthly subscription for a Scaleway Baremetal server, it is important to understand that the migration can only be done by using the data source.
// You cannot directly modify the subscriptionPeriod of an existing elasticmetal.getOffer resource. Instead, you must define the monthly offer using the data source and then update the server configuration accordingly.
//
// ### Hourly Plan Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/elasticmetal"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myOffer, err := elasticmetal.GetOffer(ctx, &elasticmetal.GetOfferArgs{
//				Zone:               pulumi.StringRef("fr-par-1"),
//				Name:               pulumi.StringRef("EM-B220E-NVME"),
//				SubscriptionPeriod: pulumi.StringRef("hourly"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = elasticmetal.NewServer(ctx, "my_server", &elasticmetal.ServerArgs{
//				Name:                   pulumi.String("UpdateSubscriptionPeriod"),
//				Offer:                  pulumi.String(myOffer.OfferId),
//				Zone:                   pulumi.String("%s"),
//				InstallConfigAfterward: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Monthly Plan Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/elasticmetal"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myOffer, err := elasticmetal.GetOffer(ctx, &elasticmetal.GetOfferArgs{
//				Zone:               pulumi.StringRef("fr-par-1"),
//				Name:               pulumi.StringRef("EM-B220E-NVME"),
//				SubscriptionPeriod: pulumi.StringRef("monthly"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = elasticmetal.NewServer(ctx, "my_server", &elasticmetal.ServerArgs{
//				Name:                   pulumi.String("UpdateSubscriptionPeriod"),
//				Offer:                  pulumi.String(myOffer.OfferId),
//				Zone:                   pulumi.String("fr-par-1"),
//				InstallConfigAfterward: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// **Important**  Once you migrate to a monthly subscription, you cannot downgrade back to an hourly plan. Ensure that the monthly plan meets your needs before making the switch.
//
// ## Import
//
// Baremetal servers can be imported using the `{zone}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:elasticmetal/server:Server web fr-par-2/11111111-1111-1111-1111-111111111111
// ```
type Server struct {
	pulumi.CustomResourceState

	// A description for the server.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The domain of the server.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// The hostname of the server.
	Hostname pulumi.StringPtrOutput `pulumi:"hostname"`
	// If True, this boolean allows to create a server without the install config if you want to provide it later.
	InstallConfigAfterward pulumi.BoolPtrOutput `pulumi:"installConfigAfterward"`
	// (List of) The IPs of the server.
	Ips ServerIpArrayOutput `pulumi:"ips"`
	// (List of) The IPv4 addresses of the server.
	Ipv4s ServerIpv4ArrayOutput `pulumi:"ipv4s"`
	// (List of) The IPv6 addresses of the server.
	Ipv6s ServerIpv6ArrayOutput `pulumi:"ipv6s"`
	// The name of the server.
	Name pulumi.StringOutput `pulumi:"name"`
	// The offer UUID of the baremetal server.
	// Use [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-servers-get-a-specific-elastic-metal-server) to find the right offer.
	//
	// > **Important:** Updates to `offer` will recreate the server.
	Offer pulumi.StringOutput `pulumi:"offer"`
	// The ID of the offer.
	OfferId pulumi.StringOutput `pulumi:"offerId"`
	// The name of the offer.
	OfferName pulumi.StringOutput `pulumi:"offerName"`
	// The options to enable on the server.
	// > The `options` block supports:
	Options ServerOptionArrayOutput `pulumi:"options"`
	// The organization ID the server is associated with.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The UUID of the os to install on the server.
	// Use [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-os-list-available-oses) to find the right OS ID.
	// > **Important:** Updates to `os` will reinstall the server.
	Os pulumi.StringPtrOutput `pulumi:"os"`
	// The name of the os.
	OsName pulumi.StringOutput `pulumi:"osName"`
	// The partitioning schema in JSON format
	Partitioning pulumi.StringPtrOutput `pulumi:"partitioning"`
	// Password used for the installation. May be required depending on used os.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The list of private IPv4 and IPv6 addresses associated with the resource.
	PrivateIps ServerPrivateIpArrayOutput `pulumi:"privateIps"`
	// The private networks to attach to the server. For more information, see [the documentation](https://www.scaleway.com/en/docs/compute/elastic-metal/how-to/use-private-networks/)
	PrivateNetworks ServerPrivateNetworkArrayOutput `pulumi:"privateNetworks"`
	// `projectId`) The ID of the project the server is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// If True, this boolean allows to reinstall the server on install config changes.
	// > **Important:** Updates to `sshKeyIds`, `user`, `password`, `serviceUser` or `servicePassword` will not take effect on the server, it requires to reinstall it. To do so please set 'reinstall_on_config_changes' argument to true.
	ReinstallOnConfigChanges pulumi.BoolPtrOutput `pulumi:"reinstallOnConfigChanges"`
	// Password used for the service to install. May be required depending on used os.
	ServicePassword pulumi.StringPtrOutput `pulumi:"servicePassword"`
	// User used for the service to install.
	ServiceUser pulumi.StringOutput `pulumi:"serviceUser"`
	// List of SSH keys allowed to connect to the server.
	SshKeyIds pulumi.StringArrayOutput `pulumi:"sshKeyIds"`
	// The tags associated with the server.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// User used for the installation.
	User pulumi.StringOutput `pulumi:"user"`
	// `zone`) The zone in which the server should be created.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewServer registers a new resource with the given unique name, arguments, and options.
func NewServer(ctx *pulumi.Context,
	name string, args *ServerArgs, opts ...pulumi.ResourceOption) (*Server, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Offer == nil {
		return nil, errors.New("invalid value for required argument 'Offer'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/baremetalServer:BaremetalServer"),
		},
	})
	opts = append(opts, aliases)
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.ServicePassword != nil {
		args.ServicePassword = pulumi.ToSecret(args.ServicePassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"servicePassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Server
	err := ctx.RegisterResource("scaleway:elasticmetal/server:Server", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServer gets an existing Server resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerState, opts ...pulumi.ResourceOption) (*Server, error) {
	var resource Server
	err := ctx.ReadResource("scaleway:elasticmetal/server:Server", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Server resources.
type serverState struct {
	// A description for the server.
	Description *string `pulumi:"description"`
	// The domain of the server.
	Domain *string `pulumi:"domain"`
	// The hostname of the server.
	Hostname *string `pulumi:"hostname"`
	// If True, this boolean allows to create a server without the install config if you want to provide it later.
	InstallConfigAfterward *bool `pulumi:"installConfigAfterward"`
	// (List of) The IPs of the server.
	Ips []ServerIp `pulumi:"ips"`
	// (List of) The IPv4 addresses of the server.
	Ipv4s []ServerIpv4 `pulumi:"ipv4s"`
	// (List of) The IPv6 addresses of the server.
	Ipv6s []ServerIpv6 `pulumi:"ipv6s"`
	// The name of the server.
	Name *string `pulumi:"name"`
	// The offer UUID of the baremetal server.
	// Use [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-servers-get-a-specific-elastic-metal-server) to find the right offer.
	//
	// > **Important:** Updates to `offer` will recreate the server.
	Offer *string `pulumi:"offer"`
	// The ID of the offer.
	OfferId *string `pulumi:"offerId"`
	// The name of the offer.
	OfferName *string `pulumi:"offerName"`
	// The options to enable on the server.
	// > The `options` block supports:
	Options []ServerOption `pulumi:"options"`
	// The organization ID the server is associated with.
	OrganizationId *string `pulumi:"organizationId"`
	// The UUID of the os to install on the server.
	// Use [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-os-list-available-oses) to find the right OS ID.
	// > **Important:** Updates to `os` will reinstall the server.
	Os *string `pulumi:"os"`
	// The name of the os.
	OsName *string `pulumi:"osName"`
	// The partitioning schema in JSON format
	Partitioning *string `pulumi:"partitioning"`
	// Password used for the installation. May be required depending on used os.
	Password *string `pulumi:"password"`
	// The list of private IPv4 and IPv6 addresses associated with the resource.
	PrivateIps []ServerPrivateIp `pulumi:"privateIps"`
	// The private networks to attach to the server. For more information, see [the documentation](https://www.scaleway.com/en/docs/compute/elastic-metal/how-to/use-private-networks/)
	PrivateNetworks []ServerPrivateNetwork `pulumi:"privateNetworks"`
	// `projectId`) The ID of the project the server is associated with.
	ProjectId *string `pulumi:"projectId"`
	// If True, this boolean allows to reinstall the server on install config changes.
	// > **Important:** Updates to `sshKeyIds`, `user`, `password`, `serviceUser` or `servicePassword` will not take effect on the server, it requires to reinstall it. To do so please set 'reinstall_on_config_changes' argument to true.
	ReinstallOnConfigChanges *bool `pulumi:"reinstallOnConfigChanges"`
	// Password used for the service to install. May be required depending on used os.
	ServicePassword *string `pulumi:"servicePassword"`
	// User used for the service to install.
	ServiceUser *string `pulumi:"serviceUser"`
	// List of SSH keys allowed to connect to the server.
	SshKeyIds []string `pulumi:"sshKeyIds"`
	// The tags associated with the server.
	Tags []string `pulumi:"tags"`
	// User used for the installation.
	User *string `pulumi:"user"`
	// `zone`) The zone in which the server should be created.
	Zone *string `pulumi:"zone"`
}

type ServerState struct {
	// A description for the server.
	Description pulumi.StringPtrInput
	// The domain of the server.
	Domain pulumi.StringPtrInput
	// The hostname of the server.
	Hostname pulumi.StringPtrInput
	// If True, this boolean allows to create a server without the install config if you want to provide it later.
	InstallConfigAfterward pulumi.BoolPtrInput
	// (List of) The IPs of the server.
	Ips ServerIpArrayInput
	// (List of) The IPv4 addresses of the server.
	Ipv4s ServerIpv4ArrayInput
	// (List of) The IPv6 addresses of the server.
	Ipv6s ServerIpv6ArrayInput
	// The name of the server.
	Name pulumi.StringPtrInput
	// The offer UUID of the baremetal server.
	// Use [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-servers-get-a-specific-elastic-metal-server) to find the right offer.
	//
	// > **Important:** Updates to `offer` will recreate the server.
	Offer pulumi.StringPtrInput
	// The ID of the offer.
	OfferId pulumi.StringPtrInput
	// The name of the offer.
	OfferName pulumi.StringPtrInput
	// The options to enable on the server.
	// > The `options` block supports:
	Options ServerOptionArrayInput
	// The organization ID the server is associated with.
	OrganizationId pulumi.StringPtrInput
	// The UUID of the os to install on the server.
	// Use [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-os-list-available-oses) to find the right OS ID.
	// > **Important:** Updates to `os` will reinstall the server.
	Os pulumi.StringPtrInput
	// The name of the os.
	OsName pulumi.StringPtrInput
	// The partitioning schema in JSON format
	Partitioning pulumi.StringPtrInput
	// Password used for the installation. May be required depending on used os.
	Password pulumi.StringPtrInput
	// The list of private IPv4 and IPv6 addresses associated with the resource.
	PrivateIps ServerPrivateIpArrayInput
	// The private networks to attach to the server. For more information, see [the documentation](https://www.scaleway.com/en/docs/compute/elastic-metal/how-to/use-private-networks/)
	PrivateNetworks ServerPrivateNetworkArrayInput
	// `projectId`) The ID of the project the server is associated with.
	ProjectId pulumi.StringPtrInput
	// If True, this boolean allows to reinstall the server on install config changes.
	// > **Important:** Updates to `sshKeyIds`, `user`, `password`, `serviceUser` or `servicePassword` will not take effect on the server, it requires to reinstall it. To do so please set 'reinstall_on_config_changes' argument to true.
	ReinstallOnConfigChanges pulumi.BoolPtrInput
	// Password used for the service to install. May be required depending on used os.
	ServicePassword pulumi.StringPtrInput
	// User used for the service to install.
	ServiceUser pulumi.StringPtrInput
	// List of SSH keys allowed to connect to the server.
	SshKeyIds pulumi.StringArrayInput
	// The tags associated with the server.
	Tags pulumi.StringArrayInput
	// User used for the installation.
	User pulumi.StringPtrInput
	// `zone`) The zone in which the server should be created.
	Zone pulumi.StringPtrInput
}

func (ServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverState)(nil)).Elem()
}

type serverArgs struct {
	// A description for the server.
	Description *string `pulumi:"description"`
	// The hostname of the server.
	Hostname *string `pulumi:"hostname"`
	// If True, this boolean allows to create a server without the install config if you want to provide it later.
	InstallConfigAfterward *bool `pulumi:"installConfigAfterward"`
	// The name of the server.
	Name *string `pulumi:"name"`
	// The offer UUID of the baremetal server.
	// Use [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-servers-get-a-specific-elastic-metal-server) to find the right offer.
	//
	// > **Important:** Updates to `offer` will recreate the server.
	Offer string `pulumi:"offer"`
	// The options to enable on the server.
	// > The `options` block supports:
	Options []ServerOption `pulumi:"options"`
	// The UUID of the os to install on the server.
	// Use [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-os-list-available-oses) to find the right OS ID.
	// > **Important:** Updates to `os` will reinstall the server.
	Os *string `pulumi:"os"`
	// The partitioning schema in JSON format
	Partitioning *string `pulumi:"partitioning"`
	// Password used for the installation. May be required depending on used os.
	Password *string `pulumi:"password"`
	// The list of private IPv4 and IPv6 addresses associated with the resource.
	PrivateIps []ServerPrivateIp `pulumi:"privateIps"`
	// The private networks to attach to the server. For more information, see [the documentation](https://www.scaleway.com/en/docs/compute/elastic-metal/how-to/use-private-networks/)
	PrivateNetworks []ServerPrivateNetwork `pulumi:"privateNetworks"`
	// `projectId`) The ID of the project the server is associated with.
	ProjectId *string `pulumi:"projectId"`
	// If True, this boolean allows to reinstall the server on install config changes.
	// > **Important:** Updates to `sshKeyIds`, `user`, `password`, `serviceUser` or `servicePassword` will not take effect on the server, it requires to reinstall it. To do so please set 'reinstall_on_config_changes' argument to true.
	ReinstallOnConfigChanges *bool `pulumi:"reinstallOnConfigChanges"`
	// Password used for the service to install. May be required depending on used os.
	ServicePassword *string `pulumi:"servicePassword"`
	// User used for the service to install.
	ServiceUser *string `pulumi:"serviceUser"`
	// List of SSH keys allowed to connect to the server.
	SshKeyIds []string `pulumi:"sshKeyIds"`
	// The tags associated with the server.
	Tags []string `pulumi:"tags"`
	// User used for the installation.
	User *string `pulumi:"user"`
	// `zone`) The zone in which the server should be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a Server resource.
type ServerArgs struct {
	// A description for the server.
	Description pulumi.StringPtrInput
	// The hostname of the server.
	Hostname pulumi.StringPtrInput
	// If True, this boolean allows to create a server without the install config if you want to provide it later.
	InstallConfigAfterward pulumi.BoolPtrInput
	// The name of the server.
	Name pulumi.StringPtrInput
	// The offer UUID of the baremetal server.
	// Use [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-servers-get-a-specific-elastic-metal-server) to find the right offer.
	//
	// > **Important:** Updates to `offer` will recreate the server.
	Offer pulumi.StringInput
	// The options to enable on the server.
	// > The `options` block supports:
	Options ServerOptionArrayInput
	// The UUID of the os to install on the server.
	// Use [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-os-list-available-oses) to find the right OS ID.
	// > **Important:** Updates to `os` will reinstall the server.
	Os pulumi.StringPtrInput
	// The partitioning schema in JSON format
	Partitioning pulumi.StringPtrInput
	// Password used for the installation. May be required depending on used os.
	Password pulumi.StringPtrInput
	// The list of private IPv4 and IPv6 addresses associated with the resource.
	PrivateIps ServerPrivateIpArrayInput
	// The private networks to attach to the server. For more information, see [the documentation](https://www.scaleway.com/en/docs/compute/elastic-metal/how-to/use-private-networks/)
	PrivateNetworks ServerPrivateNetworkArrayInput
	// `projectId`) The ID of the project the server is associated with.
	ProjectId pulumi.StringPtrInput
	// If True, this boolean allows to reinstall the server on install config changes.
	// > **Important:** Updates to `sshKeyIds`, `user`, `password`, `serviceUser` or `servicePassword` will not take effect on the server, it requires to reinstall it. To do so please set 'reinstall_on_config_changes' argument to true.
	ReinstallOnConfigChanges pulumi.BoolPtrInput
	// Password used for the service to install. May be required depending on used os.
	ServicePassword pulumi.StringPtrInput
	// User used for the service to install.
	ServiceUser pulumi.StringPtrInput
	// List of SSH keys allowed to connect to the server.
	SshKeyIds pulumi.StringArrayInput
	// The tags associated with the server.
	Tags pulumi.StringArrayInput
	// User used for the installation.
	User pulumi.StringPtrInput
	// `zone`) The zone in which the server should be created.
	Zone pulumi.StringPtrInput
}

func (ServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverArgs)(nil)).Elem()
}

type ServerInput interface {
	pulumi.Input

	ToServerOutput() ServerOutput
	ToServerOutputWithContext(ctx context.Context) ServerOutput
}

func (*Server) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (i *Server) ToServerOutput() ServerOutput {
	return i.ToServerOutputWithContext(context.Background())
}

func (i *Server) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerOutput)
}

// ServerArrayInput is an input type that accepts ServerArray and ServerArrayOutput values.
// You can construct a concrete instance of `ServerArrayInput` via:
//
//	ServerArray{ ServerArgs{...} }
type ServerArrayInput interface {
	pulumi.Input

	ToServerArrayOutput() ServerArrayOutput
	ToServerArrayOutputWithContext(context.Context) ServerArrayOutput
}

type ServerArray []ServerInput

func (ServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (i ServerArray) ToServerArrayOutput() ServerArrayOutput {
	return i.ToServerArrayOutputWithContext(context.Background())
}

func (i ServerArray) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerArrayOutput)
}

// ServerMapInput is an input type that accepts ServerMap and ServerMapOutput values.
// You can construct a concrete instance of `ServerMapInput` via:
//
//	ServerMap{ "key": ServerArgs{...} }
type ServerMapInput interface {
	pulumi.Input

	ToServerMapOutput() ServerMapOutput
	ToServerMapOutputWithContext(context.Context) ServerMapOutput
}

type ServerMap map[string]ServerInput

func (ServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (i ServerMap) ToServerMapOutput() ServerMapOutput {
	return i.ToServerMapOutputWithContext(context.Background())
}

func (i ServerMap) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerMapOutput)
}

type ServerOutput struct{ *pulumi.OutputState }

func (ServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (o ServerOutput) ToServerOutput() ServerOutput {
	return o
}

func (o ServerOutput) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return o
}

// A description for the server.
func (o ServerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The domain of the server.
func (o ServerOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// The hostname of the server.
func (o ServerOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.Hostname }).(pulumi.StringPtrOutput)
}

// If True, this boolean allows to create a server without the install config if you want to provide it later.
func (o ServerOutput) InstallConfigAfterward() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.BoolPtrOutput { return v.InstallConfigAfterward }).(pulumi.BoolPtrOutput)
}

// (List of) The IPs of the server.
func (o ServerOutput) Ips() ServerIpArrayOutput {
	return o.ApplyT(func(v *Server) ServerIpArrayOutput { return v.Ips }).(ServerIpArrayOutput)
}

// (List of) The IPv4 addresses of the server.
func (o ServerOutput) Ipv4s() ServerIpv4ArrayOutput {
	return o.ApplyT(func(v *Server) ServerIpv4ArrayOutput { return v.Ipv4s }).(ServerIpv4ArrayOutput)
}

// (List of) The IPv6 addresses of the server.
func (o ServerOutput) Ipv6s() ServerIpv6ArrayOutput {
	return o.ApplyT(func(v *Server) ServerIpv6ArrayOutput { return v.Ipv6s }).(ServerIpv6ArrayOutput)
}

// The name of the server.
func (o ServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The offer UUID of the baremetal server.
// Use [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-servers-get-a-specific-elastic-metal-server) to find the right offer.
//
// > **Important:** Updates to `offer` will recreate the server.
func (o ServerOutput) Offer() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Offer }).(pulumi.StringOutput)
}

// The ID of the offer.
func (o ServerOutput) OfferId() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.OfferId }).(pulumi.StringOutput)
}

// The name of the offer.
func (o ServerOutput) OfferName() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.OfferName }).(pulumi.StringOutput)
}

// The options to enable on the server.
// > The `options` block supports:
func (o ServerOutput) Options() ServerOptionArrayOutput {
	return o.ApplyT(func(v *Server) ServerOptionArrayOutput { return v.Options }).(ServerOptionArrayOutput)
}

// The organization ID the server is associated with.
func (o ServerOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The UUID of the os to install on the server.
// Use [this endpoint](https://www.scaleway.com/en/developers/api/elastic-metal/#path-os-list-available-oses) to find the right OS ID.
// > **Important:** Updates to `os` will reinstall the server.
func (o ServerOutput) Os() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.Os }).(pulumi.StringPtrOutput)
}

// The name of the os.
func (o ServerOutput) OsName() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.OsName }).(pulumi.StringOutput)
}

// The partitioning schema in JSON format
func (o ServerOutput) Partitioning() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.Partitioning }).(pulumi.StringPtrOutput)
}

// Password used for the installation. May be required depending on used os.
func (o ServerOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The list of private IPv4 and IPv6 addresses associated with the resource.
func (o ServerOutput) PrivateIps() ServerPrivateIpArrayOutput {
	return o.ApplyT(func(v *Server) ServerPrivateIpArrayOutput { return v.PrivateIps }).(ServerPrivateIpArrayOutput)
}

// The private networks to attach to the server. For more information, see [the documentation](https://www.scaleway.com/en/docs/compute/elastic-metal/how-to/use-private-networks/)
func (o ServerOutput) PrivateNetworks() ServerPrivateNetworkArrayOutput {
	return o.ApplyT(func(v *Server) ServerPrivateNetworkArrayOutput { return v.PrivateNetworks }).(ServerPrivateNetworkArrayOutput)
}

// `projectId`) The ID of the project the server is associated with.
func (o ServerOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// If True, this boolean allows to reinstall the server on install config changes.
// > **Important:** Updates to `sshKeyIds`, `user`, `password`, `serviceUser` or `servicePassword` will not take effect on the server, it requires to reinstall it. To do so please set 'reinstall_on_config_changes' argument to true.
func (o ServerOutput) ReinstallOnConfigChanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.BoolPtrOutput { return v.ReinstallOnConfigChanges }).(pulumi.BoolPtrOutput)
}

// Password used for the service to install. May be required depending on used os.
func (o ServerOutput) ServicePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.ServicePassword }).(pulumi.StringPtrOutput)
}

// User used for the service to install.
func (o ServerOutput) ServiceUser() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.ServiceUser }).(pulumi.StringOutput)
}

// List of SSH keys allowed to connect to the server.
func (o ServerOutput) SshKeyIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Server) pulumi.StringArrayOutput { return v.SshKeyIds }).(pulumi.StringArrayOutput)
}

// The tags associated with the server.
func (o ServerOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Server) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// User used for the installation.
func (o ServerOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

// `zone`) The zone in which the server should be created.
func (o ServerOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type ServerArrayOutput struct{ *pulumi.OutputState }

func (ServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (o ServerArrayOutput) ToServerArrayOutput() ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) Index(i pulumi.IntInput) ServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Server {
		return vs[0].([]*Server)[vs[1].(int)]
	}).(ServerOutput)
}

type ServerMapOutput struct{ *pulumi.OutputState }

func (ServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (o ServerMapOutput) ToServerMapOutput() ServerMapOutput {
	return o
}

func (o ServerMapOutput) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return o
}

func (o ServerMapOutput) MapIndex(k pulumi.StringInput) ServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Server {
		return vs[0].(map[string]*Server)[vs[1].(string)]
	}).(ServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerInput)(nil)).Elem(), &Server{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerArrayInput)(nil)).Elem(), ServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerMapInput)(nil)).Elem(), ServerMap{})
	pulumi.RegisterOutputType(ServerOutput{})
	pulumi.RegisterOutputType(ServerArrayOutput{})
	pulumi.RegisterOutputType(ServerMapOutput{})
}
