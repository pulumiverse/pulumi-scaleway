// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages a Scaleway File Storage (NFS) filesystem in a specific region. A filesystem is a scalable storage resource that can be mounted on Compute instances and is typically used for shared, persistent storage.
//
// This resource allows you to define and manage the size, tags, and region of a filesystem, and track its creation and update timestamps, current status, and number of active attachments.
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewFileFilesystem(ctx, "file", &scaleway.FileFilesystemArgs{
//				Name: pulumi.String("my-nfs-filesystem"),
//				Size: pulumi.Int(100000000000),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// File Storage filesystems can be imported using the `{region}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/fileFilesystem:FileFilesystem main fr-par/11111111-1111-1111-1111-111111111111
// ```
type FileFilesystem struct {
	pulumi.CustomResourceState

	// The date and time when the File Storage filesystem was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The name of the filesystem. If not provided, a random name will be generated.
	Name pulumi.StringOutput `pulumi:"name"`
	// The number of active attachments (mounts) on the filesystem.
	NumberOfAttachments pulumi.IntOutput `pulumi:"numberOfAttachments"`
	// `organizationId`) The ID of the organization the user is associated with.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// `projectId`) The ID of the project the server is
	// associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// `region`) The region where the filesystem will be created (e.g., fr-par, nl-ams).
	Region pulumi.StringOutput `pulumi:"region"`
	// The size of the filesystem in bytes, with a granularity of 100 GB (10¹¹ bytes).
	// - Minimum: 100 GB (100000000000 bytes)
	// - Maximum: 10 TB (10000000000000 bytes)
	Size pulumi.IntOutput `pulumi:"size"`
	// The current status of the filesystem. Possible values include creating, available, etc.
	Status pulumi.StringOutput `pulumi:"status"`
	// A list of tags associated with the filesystem.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The date and time of the last update to the File Storage filesystem.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewFileFilesystem registers a new resource with the given unique name, arguments, and options.
func NewFileFilesystem(ctx *pulumi.Context,
	name string, args *FileFilesystemArgs, opts ...pulumi.ResourceOption) (*FileFilesystem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FileFilesystem
	err := ctx.RegisterResource("scaleway:index/fileFilesystem:FileFilesystem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFileFilesystem gets an existing FileFilesystem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFileFilesystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileFilesystemState, opts ...pulumi.ResourceOption) (*FileFilesystem, error) {
	var resource FileFilesystem
	err := ctx.ReadResource("scaleway:index/fileFilesystem:FileFilesystem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FileFilesystem resources.
type fileFilesystemState struct {
	// The date and time when the File Storage filesystem was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The name of the filesystem. If not provided, a random name will be generated.
	Name *string `pulumi:"name"`
	// The number of active attachments (mounts) on the filesystem.
	NumberOfAttachments *int `pulumi:"numberOfAttachments"`
	// `organizationId`) The ID of the organization the user is associated with.
	OrganizationId *string `pulumi:"organizationId"`
	// `projectId`) The ID of the project the server is
	// associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region where the filesystem will be created (e.g., fr-par, nl-ams).
	Region *string `pulumi:"region"`
	// The size of the filesystem in bytes, with a granularity of 100 GB (10¹¹ bytes).
	// - Minimum: 100 GB (100000000000 bytes)
	// - Maximum: 10 TB (10000000000000 bytes)
	Size *int `pulumi:"size"`
	// The current status of the filesystem. Possible values include creating, available, etc.
	Status *string `pulumi:"status"`
	// A list of tags associated with the filesystem.
	Tags []string `pulumi:"tags"`
	// The date and time of the last update to the File Storage filesystem.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type FileFilesystemState struct {
	// The date and time when the File Storage filesystem was created.
	CreatedAt pulumi.StringPtrInput
	// The name of the filesystem. If not provided, a random name will be generated.
	Name pulumi.StringPtrInput
	// The number of active attachments (mounts) on the filesystem.
	NumberOfAttachments pulumi.IntPtrInput
	// `organizationId`) The ID of the organization the user is associated with.
	OrganizationId pulumi.StringPtrInput
	// `projectId`) The ID of the project the server is
	// associated with.
	ProjectId pulumi.StringPtrInput
	// `region`) The region where the filesystem will be created (e.g., fr-par, nl-ams).
	Region pulumi.StringPtrInput
	// The size of the filesystem in bytes, with a granularity of 100 GB (10¹¹ bytes).
	// - Minimum: 100 GB (100000000000 bytes)
	// - Maximum: 10 TB (10000000000000 bytes)
	Size pulumi.IntPtrInput
	// The current status of the filesystem. Possible values include creating, available, etc.
	Status pulumi.StringPtrInput
	// A list of tags associated with the filesystem.
	Tags pulumi.StringArrayInput
	// The date and time of the last update to the File Storage filesystem.
	UpdatedAt pulumi.StringPtrInput
}

func (FileFilesystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileFilesystemState)(nil)).Elem()
}

type fileFilesystemArgs struct {
	// The name of the filesystem. If not provided, a random name will be generated.
	Name *string `pulumi:"name"`
	// `projectId`) The ID of the project the server is
	// associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region where the filesystem will be created (e.g., fr-par, nl-ams).
	Region *string `pulumi:"region"`
	// The size of the filesystem in bytes, with a granularity of 100 GB (10¹¹ bytes).
	// - Minimum: 100 GB (100000000000 bytes)
	// - Maximum: 10 TB (10000000000000 bytes)
	Size int `pulumi:"size"`
	// A list of tags associated with the filesystem.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a FileFilesystem resource.
type FileFilesystemArgs struct {
	// The name of the filesystem. If not provided, a random name will be generated.
	Name pulumi.StringPtrInput
	// `projectId`) The ID of the project the server is
	// associated with.
	ProjectId pulumi.StringPtrInput
	// `region`) The region where the filesystem will be created (e.g., fr-par, nl-ams).
	Region pulumi.StringPtrInput
	// The size of the filesystem in bytes, with a granularity of 100 GB (10¹¹ bytes).
	// - Minimum: 100 GB (100000000000 bytes)
	// - Maximum: 10 TB (10000000000000 bytes)
	Size pulumi.IntInput
	// A list of tags associated with the filesystem.
	Tags pulumi.StringArrayInput
}

func (FileFilesystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileFilesystemArgs)(nil)).Elem()
}

type FileFilesystemInput interface {
	pulumi.Input

	ToFileFilesystemOutput() FileFilesystemOutput
	ToFileFilesystemOutputWithContext(ctx context.Context) FileFilesystemOutput
}

func (*FileFilesystem) ElementType() reflect.Type {
	return reflect.TypeOf((**FileFilesystem)(nil)).Elem()
}

func (i *FileFilesystem) ToFileFilesystemOutput() FileFilesystemOutput {
	return i.ToFileFilesystemOutputWithContext(context.Background())
}

func (i *FileFilesystem) ToFileFilesystemOutputWithContext(ctx context.Context) FileFilesystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileFilesystemOutput)
}

// FileFilesystemArrayInput is an input type that accepts FileFilesystemArray and FileFilesystemArrayOutput values.
// You can construct a concrete instance of `FileFilesystemArrayInput` via:
//
//	FileFilesystemArray{ FileFilesystemArgs{...} }
type FileFilesystemArrayInput interface {
	pulumi.Input

	ToFileFilesystemArrayOutput() FileFilesystemArrayOutput
	ToFileFilesystemArrayOutputWithContext(context.Context) FileFilesystemArrayOutput
}

type FileFilesystemArray []FileFilesystemInput

func (FileFilesystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileFilesystem)(nil)).Elem()
}

func (i FileFilesystemArray) ToFileFilesystemArrayOutput() FileFilesystemArrayOutput {
	return i.ToFileFilesystemArrayOutputWithContext(context.Background())
}

func (i FileFilesystemArray) ToFileFilesystemArrayOutputWithContext(ctx context.Context) FileFilesystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileFilesystemArrayOutput)
}

// FileFilesystemMapInput is an input type that accepts FileFilesystemMap and FileFilesystemMapOutput values.
// You can construct a concrete instance of `FileFilesystemMapInput` via:
//
//	FileFilesystemMap{ "key": FileFilesystemArgs{...} }
type FileFilesystemMapInput interface {
	pulumi.Input

	ToFileFilesystemMapOutput() FileFilesystemMapOutput
	ToFileFilesystemMapOutputWithContext(context.Context) FileFilesystemMapOutput
}

type FileFilesystemMap map[string]FileFilesystemInput

func (FileFilesystemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileFilesystem)(nil)).Elem()
}

func (i FileFilesystemMap) ToFileFilesystemMapOutput() FileFilesystemMapOutput {
	return i.ToFileFilesystemMapOutputWithContext(context.Background())
}

func (i FileFilesystemMap) ToFileFilesystemMapOutputWithContext(ctx context.Context) FileFilesystemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileFilesystemMapOutput)
}

type FileFilesystemOutput struct{ *pulumi.OutputState }

func (FileFilesystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileFilesystem)(nil)).Elem()
}

func (o FileFilesystemOutput) ToFileFilesystemOutput() FileFilesystemOutput {
	return o
}

func (o FileFilesystemOutput) ToFileFilesystemOutputWithContext(ctx context.Context) FileFilesystemOutput {
	return o
}

// The date and time when the File Storage filesystem was created.
func (o FileFilesystemOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFilesystem) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The name of the filesystem. If not provided, a random name will be generated.
func (o FileFilesystemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFilesystem) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The number of active attachments (mounts) on the filesystem.
func (o FileFilesystemOutput) NumberOfAttachments() pulumi.IntOutput {
	return o.ApplyT(func(v *FileFilesystem) pulumi.IntOutput { return v.NumberOfAttachments }).(pulumi.IntOutput)
}

// `organizationId`) The ID of the organization the user is associated with.
func (o FileFilesystemOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFilesystem) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// `projectId`) The ID of the project the server is
// associated with.
func (o FileFilesystemOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFilesystem) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// `region`) The region where the filesystem will be created (e.g., fr-par, nl-ams).
func (o FileFilesystemOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFilesystem) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The size of the filesystem in bytes, with a granularity of 100 GB (10¹¹ bytes).
// - Minimum: 100 GB (100000000000 bytes)
// - Maximum: 10 TB (10000000000000 bytes)
func (o FileFilesystemOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *FileFilesystem) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// The current status of the filesystem. Possible values include creating, available, etc.
func (o FileFilesystemOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFilesystem) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// A list of tags associated with the filesystem.
func (o FileFilesystemOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FileFilesystem) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The date and time of the last update to the File Storage filesystem.
func (o FileFilesystemOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *FileFilesystem) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type FileFilesystemArrayOutput struct{ *pulumi.OutputState }

func (FileFilesystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileFilesystem)(nil)).Elem()
}

func (o FileFilesystemArrayOutput) ToFileFilesystemArrayOutput() FileFilesystemArrayOutput {
	return o
}

func (o FileFilesystemArrayOutput) ToFileFilesystemArrayOutputWithContext(ctx context.Context) FileFilesystemArrayOutput {
	return o
}

func (o FileFilesystemArrayOutput) Index(i pulumi.IntInput) FileFilesystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FileFilesystem {
		return vs[0].([]*FileFilesystem)[vs[1].(int)]
	}).(FileFilesystemOutput)
}

type FileFilesystemMapOutput struct{ *pulumi.OutputState }

func (FileFilesystemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileFilesystem)(nil)).Elem()
}

func (o FileFilesystemMapOutput) ToFileFilesystemMapOutput() FileFilesystemMapOutput {
	return o
}

func (o FileFilesystemMapOutput) ToFileFilesystemMapOutputWithContext(ctx context.Context) FileFilesystemMapOutput {
	return o
}

func (o FileFilesystemMapOutput) MapIndex(k pulumi.StringInput) FileFilesystemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FileFilesystem {
		return vs[0].(map[string]*FileFilesystem)[vs[1].(string)]
	}).(FileFilesystemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FileFilesystemInput)(nil)).Elem(), &FileFilesystem{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileFilesystemArrayInput)(nil)).Elem(), FileFilesystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileFilesystemMapInput)(nil)).Elem(), FileFilesystemMap{})
	pulumi.RegisterOutputType(FileFilesystemOutput{})
	pulumi.RegisterOutputType(FileFilesystemArrayOutput{})
	pulumi.RegisterOutputType(FileFilesystemMapOutput{})
}
