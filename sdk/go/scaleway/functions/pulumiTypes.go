// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package functions

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

var _ = internal.GetEnvOrDefault

type TriggerNats struct {
	// unique identifier of the Messaging and Queuing NATS account.
	AccountId *string `pulumi:"accountId"`
	// THe ID of the project that contains the Messaging and Queuing NATS account (defaults to provider `projectId`)
	ProjectId *string `pulumi:"projectId"`
	// Region where the Messaging and Queuing NATS account is enabled (defaults to provider `region`)
	Region *string `pulumi:"region"`
	// The subject to listen to.
	Subject string `pulumi:"subject"`
}

// TriggerNatsInput is an input type that accepts TriggerNatsArgs and TriggerNatsOutput values.
// You can construct a concrete instance of `TriggerNatsInput` via:
//
//	TriggerNatsArgs{...}
type TriggerNatsInput interface {
	pulumi.Input

	ToTriggerNatsOutput() TriggerNatsOutput
	ToTriggerNatsOutputWithContext(context.Context) TriggerNatsOutput
}

type TriggerNatsArgs struct {
	// unique identifier of the Messaging and Queuing NATS account.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// THe ID of the project that contains the Messaging and Queuing NATS account (defaults to provider `projectId`)
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Region where the Messaging and Queuing NATS account is enabled (defaults to provider `region`)
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The subject to listen to.
	Subject pulumi.StringInput `pulumi:"subject"`
}

func (TriggerNatsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerNats)(nil)).Elem()
}

func (i TriggerNatsArgs) ToTriggerNatsOutput() TriggerNatsOutput {
	return i.ToTriggerNatsOutputWithContext(context.Background())
}

func (i TriggerNatsArgs) ToTriggerNatsOutputWithContext(ctx context.Context) TriggerNatsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerNatsOutput)
}

func (i TriggerNatsArgs) ToTriggerNatsPtrOutput() TriggerNatsPtrOutput {
	return i.ToTriggerNatsPtrOutputWithContext(context.Background())
}

func (i TriggerNatsArgs) ToTriggerNatsPtrOutputWithContext(ctx context.Context) TriggerNatsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerNatsOutput).ToTriggerNatsPtrOutputWithContext(ctx)
}

// TriggerNatsPtrInput is an input type that accepts TriggerNatsArgs, TriggerNatsPtr and TriggerNatsPtrOutput values.
// You can construct a concrete instance of `TriggerNatsPtrInput` via:
//
//	        TriggerNatsArgs{...}
//
//	or:
//
//	        nil
type TriggerNatsPtrInput interface {
	pulumi.Input

	ToTriggerNatsPtrOutput() TriggerNatsPtrOutput
	ToTriggerNatsPtrOutputWithContext(context.Context) TriggerNatsPtrOutput
}

type triggerNatsPtrType TriggerNatsArgs

func TriggerNatsPtr(v *TriggerNatsArgs) TriggerNatsPtrInput {
	return (*triggerNatsPtrType)(v)
}

func (*triggerNatsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerNats)(nil)).Elem()
}

func (i *triggerNatsPtrType) ToTriggerNatsPtrOutput() TriggerNatsPtrOutput {
	return i.ToTriggerNatsPtrOutputWithContext(context.Background())
}

func (i *triggerNatsPtrType) ToTriggerNatsPtrOutputWithContext(ctx context.Context) TriggerNatsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerNatsPtrOutput)
}

type TriggerNatsOutput struct{ *pulumi.OutputState }

func (TriggerNatsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerNats)(nil)).Elem()
}

func (o TriggerNatsOutput) ToTriggerNatsOutput() TriggerNatsOutput {
	return o
}

func (o TriggerNatsOutput) ToTriggerNatsOutputWithContext(ctx context.Context) TriggerNatsOutput {
	return o
}

func (o TriggerNatsOutput) ToTriggerNatsPtrOutput() TriggerNatsPtrOutput {
	return o.ToTriggerNatsPtrOutputWithContext(context.Background())
}

func (o TriggerNatsOutput) ToTriggerNatsPtrOutputWithContext(ctx context.Context) TriggerNatsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TriggerNats) *TriggerNats {
		return &v
	}).(TriggerNatsPtrOutput)
}

// unique identifier of the Messaging and Queuing NATS account.
func (o TriggerNatsOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerNats) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// THe ID of the project that contains the Messaging and Queuing NATS account (defaults to provider `projectId`)
func (o TriggerNatsOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerNats) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Region where the Messaging and Queuing NATS account is enabled (defaults to provider `region`)
func (o TriggerNatsOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerNats) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The subject to listen to.
func (o TriggerNatsOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerNats) string { return v.Subject }).(pulumi.StringOutput)
}

type TriggerNatsPtrOutput struct{ *pulumi.OutputState }

func (TriggerNatsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerNats)(nil)).Elem()
}

func (o TriggerNatsPtrOutput) ToTriggerNatsPtrOutput() TriggerNatsPtrOutput {
	return o
}

func (o TriggerNatsPtrOutput) ToTriggerNatsPtrOutputWithContext(ctx context.Context) TriggerNatsPtrOutput {
	return o
}

func (o TriggerNatsPtrOutput) Elem() TriggerNatsOutput {
	return o.ApplyT(func(v *TriggerNats) TriggerNats {
		if v != nil {
			return *v
		}
		var ret TriggerNats
		return ret
	}).(TriggerNatsOutput)
}

// unique identifier of the Messaging and Queuing NATS account.
func (o TriggerNatsPtrOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerNats) *string {
		if v == nil {
			return nil
		}
		return v.AccountId
	}).(pulumi.StringPtrOutput)
}

// THe ID of the project that contains the Messaging and Queuing NATS account (defaults to provider `projectId`)
func (o TriggerNatsPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerNats) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// Region where the Messaging and Queuing NATS account is enabled (defaults to provider `region`)
func (o TriggerNatsPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerNats) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// The subject to listen to.
func (o TriggerNatsPtrOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerNats) *string {
		if v == nil {
			return nil
		}
		return &v.Subject
	}).(pulumi.StringPtrOutput)
}

type TriggerSqs struct {
	// ID of the Messaging and Queuing namespace. This argument is deprecated.
	//
	// Deprecated: The 'namespace_id' field is deprecated and will be removed in the next major version. It is no longer necessary to specify it
	NamespaceId *string `pulumi:"namespaceId"`
	// The ID of the project in which SQS is enabled, (defaults to provider `projectId`)
	ProjectId *string `pulumi:"projectId"`
	// The name of the SQS queue.
	Queue string `pulumi:"queue"`
	// Region where SQS is enabled (defaults to provider `region`)
	Region *string `pulumi:"region"`
}

// TriggerSqsInput is an input type that accepts TriggerSqsArgs and TriggerSqsOutput values.
// You can construct a concrete instance of `TriggerSqsInput` via:
//
//	TriggerSqsArgs{...}
type TriggerSqsInput interface {
	pulumi.Input

	ToTriggerSqsOutput() TriggerSqsOutput
	ToTriggerSqsOutputWithContext(context.Context) TriggerSqsOutput
}

type TriggerSqsArgs struct {
	// ID of the Messaging and Queuing namespace. This argument is deprecated.
	//
	// Deprecated: The 'namespace_id' field is deprecated and will be removed in the next major version. It is no longer necessary to specify it
	NamespaceId pulumi.StringPtrInput `pulumi:"namespaceId"`
	// The ID of the project in which SQS is enabled, (defaults to provider `projectId`)
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// The name of the SQS queue.
	Queue pulumi.StringInput `pulumi:"queue"`
	// Region where SQS is enabled (defaults to provider `region`)
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (TriggerSqsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerSqs)(nil)).Elem()
}

func (i TriggerSqsArgs) ToTriggerSqsOutput() TriggerSqsOutput {
	return i.ToTriggerSqsOutputWithContext(context.Background())
}

func (i TriggerSqsArgs) ToTriggerSqsOutputWithContext(ctx context.Context) TriggerSqsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerSqsOutput)
}

func (i TriggerSqsArgs) ToTriggerSqsPtrOutput() TriggerSqsPtrOutput {
	return i.ToTriggerSqsPtrOutputWithContext(context.Background())
}

func (i TriggerSqsArgs) ToTriggerSqsPtrOutputWithContext(ctx context.Context) TriggerSqsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerSqsOutput).ToTriggerSqsPtrOutputWithContext(ctx)
}

// TriggerSqsPtrInput is an input type that accepts TriggerSqsArgs, TriggerSqsPtr and TriggerSqsPtrOutput values.
// You can construct a concrete instance of `TriggerSqsPtrInput` via:
//
//	        TriggerSqsArgs{...}
//
//	or:
//
//	        nil
type TriggerSqsPtrInput interface {
	pulumi.Input

	ToTriggerSqsPtrOutput() TriggerSqsPtrOutput
	ToTriggerSqsPtrOutputWithContext(context.Context) TriggerSqsPtrOutput
}

type triggerSqsPtrType TriggerSqsArgs

func TriggerSqsPtr(v *TriggerSqsArgs) TriggerSqsPtrInput {
	return (*triggerSqsPtrType)(v)
}

func (*triggerSqsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerSqs)(nil)).Elem()
}

func (i *triggerSqsPtrType) ToTriggerSqsPtrOutput() TriggerSqsPtrOutput {
	return i.ToTriggerSqsPtrOutputWithContext(context.Background())
}

func (i *triggerSqsPtrType) ToTriggerSqsPtrOutputWithContext(ctx context.Context) TriggerSqsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerSqsPtrOutput)
}

type TriggerSqsOutput struct{ *pulumi.OutputState }

func (TriggerSqsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerSqs)(nil)).Elem()
}

func (o TriggerSqsOutput) ToTriggerSqsOutput() TriggerSqsOutput {
	return o
}

func (o TriggerSqsOutput) ToTriggerSqsOutputWithContext(ctx context.Context) TriggerSqsOutput {
	return o
}

func (o TriggerSqsOutput) ToTriggerSqsPtrOutput() TriggerSqsPtrOutput {
	return o.ToTriggerSqsPtrOutputWithContext(context.Background())
}

func (o TriggerSqsOutput) ToTriggerSqsPtrOutputWithContext(ctx context.Context) TriggerSqsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TriggerSqs) *TriggerSqs {
		return &v
	}).(TriggerSqsPtrOutput)
}

// ID of the Messaging and Queuing namespace. This argument is deprecated.
//
// Deprecated: The 'namespace_id' field is deprecated and will be removed in the next major version. It is no longer necessary to specify it
func (o TriggerSqsOutput) NamespaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerSqs) *string { return v.NamespaceId }).(pulumi.StringPtrOutput)
}

// The ID of the project in which SQS is enabled, (defaults to provider `projectId`)
func (o TriggerSqsOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerSqs) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The name of the SQS queue.
func (o TriggerSqsOutput) Queue() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerSqs) string { return v.Queue }).(pulumi.StringOutput)
}

// Region where SQS is enabled (defaults to provider `region`)
func (o TriggerSqsOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerSqs) *string { return v.Region }).(pulumi.StringPtrOutput)
}

type TriggerSqsPtrOutput struct{ *pulumi.OutputState }

func (TriggerSqsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerSqs)(nil)).Elem()
}

func (o TriggerSqsPtrOutput) ToTriggerSqsPtrOutput() TriggerSqsPtrOutput {
	return o
}

func (o TriggerSqsPtrOutput) ToTriggerSqsPtrOutputWithContext(ctx context.Context) TriggerSqsPtrOutput {
	return o
}

func (o TriggerSqsPtrOutput) Elem() TriggerSqsOutput {
	return o.ApplyT(func(v *TriggerSqs) TriggerSqs {
		if v != nil {
			return *v
		}
		var ret TriggerSqs
		return ret
	}).(TriggerSqsOutput)
}

// ID of the Messaging and Queuing namespace. This argument is deprecated.
//
// Deprecated: The 'namespace_id' field is deprecated and will be removed in the next major version. It is no longer necessary to specify it
func (o TriggerSqsPtrOutput) NamespaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerSqs) *string {
		if v == nil {
			return nil
		}
		return v.NamespaceId
	}).(pulumi.StringPtrOutput)
}

// The ID of the project in which SQS is enabled, (defaults to provider `projectId`)
func (o TriggerSqsPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerSqs) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// The name of the SQS queue.
func (o TriggerSqsPtrOutput) Queue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerSqs) *string {
		if v == nil {
			return nil
		}
		return &v.Queue
	}).(pulumi.StringPtrOutput)
}

// Region where SQS is enabled (defaults to provider `region`)
func (o TriggerSqsPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerSqs) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerNatsInput)(nil)).Elem(), TriggerNatsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerNatsPtrInput)(nil)).Elem(), TriggerNatsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerSqsInput)(nil)).Elem(), TriggerSqsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerSqsPtrInput)(nil)).Elem(), TriggerSqsArgs{})
	pulumi.RegisterOutputType(TriggerNatsOutput{})
	pulumi.RegisterOutputType(TriggerNatsPtrOutput{})
	pulumi.RegisterOutputType(TriggerSqsOutput{})
	pulumi.RegisterOutputType(TriggerSqsPtrOutput{})
}
