// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// The `observability.Source` data source allows you to retrieve information about a specific [data source](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#data-sources) in Scaleway's Cockpit.
//
// Refer to Cockpit's [product documentation](https://www.scaleway.com/en/docs/observability/cockpit/concepts/) and [API documentation](https://www.scaleway.com/en/developers/api/cockpit/regional-api) for more information.
//
// ## Example Usage
//
// ### Retrieve a specific data source by ID
//
// The following example retrieves a Cockpit data source by its unique ID.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/observability"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := observability.LookupSource(ctx, &observability.LookupSourceArgs{
//				Id: pulumi.StringRef("fr-par/11111111-1111-1111-1111-111111111111"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Retrieve a data source by filters
//
// You can also retrieve a data source by specifying filtering criteria such as `name`, `type`, and `origin`.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/observability"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := observability.LookupSource(ctx, &observability.LookupSourceArgs{
//				ProjectId: pulumi.StringRef("11111111-1111-1111-1111-111111111111"),
//				Region:    pulumi.StringRef("fr-par"),
//				Name:      pulumi.StringRef("my-data-source"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: scaleway.index/getcockpitsource.getCockpitSource has been deprecated in favor of scaleway.observability/getsource.getSource
func LookupCockpitSource(ctx *pulumi.Context, args *LookupCockpitSourceArgs, opts ...pulumi.InvokeOption) (*LookupCockpitSourceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCockpitSourceResult
	err := ctx.Invoke("scaleway:index/getCockpitSource:getCockpitSource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCockpitSource.
type LookupCockpitSourceArgs struct {
	// The unique identifier of the Cockpit data source in the `{region}/{id}` format. If specified, other filters are ignored.
	Id *string `pulumi:"id"`
	// The name of the data source.
	Name *string `pulumi:"name"`
	// The origin of the data source. Possible values are:
	Origin *string `pulumi:"origin"`
	// The ID of the Project the data source is associated with. Defaults to the Project ID specified in the provider configuration.
	ProjectId *string `pulumi:"projectId"`
	// The region where the data source is located. Defaults to the region specified in the provider configuration.
	Region *string `pulumi:"region"`
	// The [type](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#data-types) of data source. Possible values are: `metrics`, `logs`, or `traces`.
	Type *string `pulumi:"type"`
}

// A collection of values returned by getCockpitSource.
type LookupCockpitSourceResult struct {
	// The date and time the data source was created (in RFC 3339 format).
	CreatedAt string `pulumi:"createdAt"`
	// The unique identifier of the data source in the `{region}/{id}` format.
	Id   *string `pulumi:"id"`
	Name *string `pulumi:"name"`
	// The origin of the data source.
	Origin    *string `pulumi:"origin"`
	ProjectId *string `pulumi:"projectId"`
	PushUrl   string  `pulumi:"pushUrl"`
	Region    *string `pulumi:"region"`
	// The number of days the data is retained in the data source.
	RetentionDays int `pulumi:"retentionDays"`
	// Indicates whether the data source is synchronized with Grafana.
	SynchronizedWithGrafana bool    `pulumi:"synchronizedWithGrafana"`
	Type                    *string `pulumi:"type"`
	// The date and time the data source was last updated (in RFC 3339 format).
	UpdatedAt string `pulumi:"updatedAt"`
	// The URL of the Cockpit data source.
	Url string `pulumi:"url"`
}

func LookupCockpitSourceOutput(ctx *pulumi.Context, args LookupCockpitSourceOutputArgs, opts ...pulumi.InvokeOption) LookupCockpitSourceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCockpitSourceResultOutput, error) {
			args := v.(LookupCockpitSourceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("scaleway:index/getCockpitSource:getCockpitSource", args, LookupCockpitSourceResultOutput{}, options).(LookupCockpitSourceResultOutput), nil
		}).(LookupCockpitSourceResultOutput)
}

// A collection of arguments for invoking getCockpitSource.
type LookupCockpitSourceOutputArgs struct {
	// The unique identifier of the Cockpit data source in the `{region}/{id}` format. If specified, other filters are ignored.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the data source.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The origin of the data source. Possible values are:
	Origin pulumi.StringPtrInput `pulumi:"origin"`
	// The ID of the Project the data source is associated with. Defaults to the Project ID specified in the provider configuration.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// The region where the data source is located. Defaults to the region specified in the provider configuration.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The [type](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#data-types) of data source. Possible values are: `metrics`, `logs`, or `traces`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (LookupCockpitSourceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCockpitSourceArgs)(nil)).Elem()
}

// A collection of values returned by getCockpitSource.
type LookupCockpitSourceResultOutput struct{ *pulumi.OutputState }

func (LookupCockpitSourceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCockpitSourceResult)(nil)).Elem()
}

func (o LookupCockpitSourceResultOutput) ToLookupCockpitSourceResultOutput() LookupCockpitSourceResultOutput {
	return o
}

func (o LookupCockpitSourceResultOutput) ToLookupCockpitSourceResultOutputWithContext(ctx context.Context) LookupCockpitSourceResultOutput {
	return o
}

// The date and time the data source was created (in RFC 3339 format).
func (o LookupCockpitSourceResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCockpitSourceResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The unique identifier of the data source in the `{region}/{id}` format.
func (o LookupCockpitSourceResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCockpitSourceResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupCockpitSourceResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCockpitSourceResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The origin of the data source.
func (o LookupCockpitSourceResultOutput) Origin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCockpitSourceResult) *string { return v.Origin }).(pulumi.StringPtrOutput)
}

func (o LookupCockpitSourceResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCockpitSourceResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

func (o LookupCockpitSourceResultOutput) PushUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCockpitSourceResult) string { return v.PushUrl }).(pulumi.StringOutput)
}

func (o LookupCockpitSourceResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCockpitSourceResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The number of days the data is retained in the data source.
func (o LookupCockpitSourceResultOutput) RetentionDays() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCockpitSourceResult) int { return v.RetentionDays }).(pulumi.IntOutput)
}

// Indicates whether the data source is synchronized with Grafana.
func (o LookupCockpitSourceResultOutput) SynchronizedWithGrafana() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCockpitSourceResult) bool { return v.SynchronizedWithGrafana }).(pulumi.BoolOutput)
}

func (o LookupCockpitSourceResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCockpitSourceResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The date and time the data source was last updated (in RFC 3339 format).
func (o LookupCockpitSourceResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCockpitSourceResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The URL of the Cockpit data source.
func (o LookupCockpitSourceResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCockpitSourceResult) string { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCockpitSourceResultOutput{})
}
