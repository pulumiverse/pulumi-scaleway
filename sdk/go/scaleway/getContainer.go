// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// The `Container` data source is used to retrieve information about a Serverless Container.
//
// Refer to the Serverless Containers [product documentation](https://www.scaleway.com/en/docs/serverless/containers/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-containers/) for more information.
//
// For more information on the limitations of Serverless Containers, refer to the [dedicated documentation](https://www.scaleway.com/en/docs/serverless-containers/reference-content/containers-limitations/).
//
// ## Retrieve a Serverless Container
//
// The following commands allow you to:
//
// - retrieve a container by its name
// - retrieve a container by its ID
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := scaleway.NewContainerNamespace(ctx, "main", nil)
//			if err != nil {
//				return err
//			}
//			mainContainer, err := scaleway.NewContainer(ctx, "main", &scaleway.ContainerArgs{
//				Name:        pulumi.String("test-container-data"),
//				NamespaceId: main.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			// Get info by container name
//			_ = scaleway.LookupContainerOutput(ctx, scaleway.GetContainerOutputArgs{
//				NamespaceId: main.ID(),
//				Name:        mainContainer.Name,
//			}, nil)
//			// Get info by container ID
//			_ = scaleway.LookupContainerOutput(ctx, scaleway.GetContainerOutputArgs{
//				NamespaceId: main.ID(),
//				ContainerId: mainContainer.ID(),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
//
// ## Arguments reference
//
// This section lists the arguments that you can provide to the `Container` data source to filter and retrieve the desired namespace. Each argument has a specific purpose:
//
// - `name` - (Required) The unique name of the container.
//
// - `namespaceId` - (Required) The container namespace ID of the container.
//
// - `projectId` - (Optional) The unique identifier of the project with which the container is associated.
//
// > **Important** Updating the `name` argument will recreate the container.
func LookupContainer(ctx *pulumi.Context, args *LookupContainerArgs, opts ...pulumi.InvokeOption) (*LookupContainerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupContainerResult
	err := ctx.Invoke("scaleway:index/getContainer:getContainer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getContainer.
type LookupContainerArgs struct {
	ContainerId *string `pulumi:"containerId"`
	Name        *string `pulumi:"name"`
	NamespaceId string  `pulumi:"namespaceId"`
	ProjectId   *string `pulumi:"projectId"`
	// (Defaults to provider `region`) The region in which the container was created.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getContainer.
type LookupContainerResult struct {
	ContainerId *string `pulumi:"containerId"`
	// The amount of vCPU computing resources to allocate to each container.
	CpuLimit int `pulumi:"cpuLimit"`
	// The cron status of the container.
	CronStatus string `pulumi:"cronStatus"`
	// Boolean indicating whether the container is on a production environment.
	Deploy bool `pulumi:"deploy"`
	// The description of the container.
	Description string `pulumi:"description"`
	// The container domain name.
	DomainName string `pulumi:"domainName"`
	// The [environment](https://www.scaleway.com/en/docs/serverless-containers/concepts/#environment-variables) variables of the container.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The error message of the container.
	ErrorMessage string                    `pulumi:"errorMessage"`
	HealthChecks []GetContainerHealthCheck `pulumi:"healthChecks"`
	HttpOption   string                    `pulumi:"httpOption"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The maximum number of simultaneous requests your container can handle at the same time.
	MaxConcurrency int `pulumi:"maxConcurrency"`
	// The maximum number of instances the container can scale to.
	MaxScale int `pulumi:"maxScale"`
	// The memory resources in MB to allocate to each container.
	MemoryLimit int `pulumi:"memoryLimit"`
	// The minimum number of container instances running continuously.
	MinScale    int     `pulumi:"minScale"`
	Name        *string `pulumi:"name"`
	NamespaceId string  `pulumi:"namespaceId"`
	// The port to expose the container.
	Port int `pulumi:"port"`
	// The privacy type define the way to authenticate to your container. Refer to the [dedicated documentation](https://www.scaleway.com/en/developers/api/serverless-containers/#path-containers-update-an-existing-container) for more information.
	Privacy   string  `pulumi:"privacy"`
	ProjectId *string `pulumi:"projectId"`
	// The communication [protocol](https://www.scaleway.com/en/developers/api/serverless-containers/#path-containers-update-an-existing-container) `http1` or `h2c`. Defaults to `http1`.
	Protocol string `pulumi:"protocol"`
	// (Defaults to provider `region`) The region in which the container was created.
	Region *string `pulumi:"region"`
	// The registry image address (e.g. `rg.fr-par.scw.cloud/$NAMESPACE/$IMAGE`).
	RegistryImage string `pulumi:"registryImage"`
	// The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string.
	RegistrySha256 string `pulumi:"registrySha256"`
	// (Optional) Execution environment of the container.
	Sandbox string `pulumi:"sandbox"`
	// Configuration block used to decide when to scale up or down. Possible values:
	ScalingOptions             []GetContainerScalingOption `pulumi:"scalingOptions"`
	SecretEnvironmentVariables map[string]string           `pulumi:"secretEnvironmentVariables"`
	// The container status.
	Status string `pulumi:"status"`
	// The maximum amount of time your container can spend processing a request before being stopped.
	Timeout int `pulumi:"timeout"`
}

func LookupContainerOutput(ctx *pulumi.Context, args LookupContainerOutputArgs, opts ...pulumi.InvokeOption) LookupContainerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupContainerResultOutput, error) {
			args := v.(LookupContainerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("scaleway:index/getContainer:getContainer", args, LookupContainerResultOutput{}, options).(LookupContainerResultOutput), nil
		}).(LookupContainerResultOutput)
}

// A collection of arguments for invoking getContainer.
type LookupContainerOutputArgs struct {
	ContainerId pulumi.StringPtrInput `pulumi:"containerId"`
	Name        pulumi.StringPtrInput `pulumi:"name"`
	NamespaceId pulumi.StringInput    `pulumi:"namespaceId"`
	ProjectId   pulumi.StringPtrInput `pulumi:"projectId"`
	// (Defaults to provider `region`) The region in which the container was created.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (LookupContainerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupContainerArgs)(nil)).Elem()
}

// A collection of values returned by getContainer.
type LookupContainerResultOutput struct{ *pulumi.OutputState }

func (LookupContainerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupContainerResult)(nil)).Elem()
}

func (o LookupContainerResultOutput) ToLookupContainerResultOutput() LookupContainerResultOutput {
	return o
}

func (o LookupContainerResultOutput) ToLookupContainerResultOutputWithContext(ctx context.Context) LookupContainerResultOutput {
	return o
}

func (o LookupContainerResultOutput) ContainerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupContainerResult) *string { return v.ContainerId }).(pulumi.StringPtrOutput)
}

// The amount of vCPU computing resources to allocate to each container.
func (o LookupContainerResultOutput) CpuLimit() pulumi.IntOutput {
	return o.ApplyT(func(v LookupContainerResult) int { return v.CpuLimit }).(pulumi.IntOutput)
}

// The cron status of the container.
func (o LookupContainerResultOutput) CronStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerResult) string { return v.CronStatus }).(pulumi.StringOutput)
}

// Boolean indicating whether the container is on a production environment.
func (o LookupContainerResultOutput) Deploy() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerResult) bool { return v.Deploy }).(pulumi.BoolOutput)
}

// The description of the container.
func (o LookupContainerResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerResult) string { return v.Description }).(pulumi.StringOutput)
}

// The container domain name.
func (o LookupContainerResultOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerResult) string { return v.DomainName }).(pulumi.StringOutput)
}

// The [environment](https://www.scaleway.com/en/docs/serverless-containers/concepts/#environment-variables) variables of the container.
func (o LookupContainerResultOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupContainerResult) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// The error message of the container.
func (o LookupContainerResultOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerResult) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

func (o LookupContainerResultOutput) HealthChecks() GetContainerHealthCheckArrayOutput {
	return o.ApplyT(func(v LookupContainerResult) []GetContainerHealthCheck { return v.HealthChecks }).(GetContainerHealthCheckArrayOutput)
}

func (o LookupContainerResultOutput) HttpOption() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerResult) string { return v.HttpOption }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupContainerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerResult) string { return v.Id }).(pulumi.StringOutput)
}

// The maximum number of simultaneous requests your container can handle at the same time.
func (o LookupContainerResultOutput) MaxConcurrency() pulumi.IntOutput {
	return o.ApplyT(func(v LookupContainerResult) int { return v.MaxConcurrency }).(pulumi.IntOutput)
}

// The maximum number of instances the container can scale to.
func (o LookupContainerResultOutput) MaxScale() pulumi.IntOutput {
	return o.ApplyT(func(v LookupContainerResult) int { return v.MaxScale }).(pulumi.IntOutput)
}

// The memory resources in MB to allocate to each container.
func (o LookupContainerResultOutput) MemoryLimit() pulumi.IntOutput {
	return o.ApplyT(func(v LookupContainerResult) int { return v.MemoryLimit }).(pulumi.IntOutput)
}

// The minimum number of container instances running continuously.
func (o LookupContainerResultOutput) MinScale() pulumi.IntOutput {
	return o.ApplyT(func(v LookupContainerResult) int { return v.MinScale }).(pulumi.IntOutput)
}

func (o LookupContainerResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupContainerResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupContainerResultOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerResult) string { return v.NamespaceId }).(pulumi.StringOutput)
}

// The port to expose the container.
func (o LookupContainerResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupContainerResult) int { return v.Port }).(pulumi.IntOutput)
}

// The privacy type define the way to authenticate to your container. Refer to the [dedicated documentation](https://www.scaleway.com/en/developers/api/serverless-containers/#path-containers-update-an-existing-container) for more information.
func (o LookupContainerResultOutput) Privacy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerResult) string { return v.Privacy }).(pulumi.StringOutput)
}

func (o LookupContainerResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupContainerResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The communication [protocol](https://www.scaleway.com/en/developers/api/serverless-containers/#path-containers-update-an-existing-container) `http1` or `h2c`. Defaults to `http1`.
func (o LookupContainerResultOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerResult) string { return v.Protocol }).(pulumi.StringOutput)
}

// (Defaults to provider `region`) The region in which the container was created.
func (o LookupContainerResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupContainerResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The registry image address (e.g. `rg.fr-par.scw.cloud/$NAMESPACE/$IMAGE`).
func (o LookupContainerResultOutput) RegistryImage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerResult) string { return v.RegistryImage }).(pulumi.StringOutput)
}

// The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string.
func (o LookupContainerResultOutput) RegistrySha256() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerResult) string { return v.RegistrySha256 }).(pulumi.StringOutput)
}

// (Optional) Execution environment of the container.
func (o LookupContainerResultOutput) Sandbox() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerResult) string { return v.Sandbox }).(pulumi.StringOutput)
}

// Configuration block used to decide when to scale up or down. Possible values:
func (o LookupContainerResultOutput) ScalingOptions() GetContainerScalingOptionArrayOutput {
	return o.ApplyT(func(v LookupContainerResult) []GetContainerScalingOption { return v.ScalingOptions }).(GetContainerScalingOptionArrayOutput)
}

func (o LookupContainerResultOutput) SecretEnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupContainerResult) map[string]string { return v.SecretEnvironmentVariables }).(pulumi.StringMapOutput)
}

// The container status.
func (o LookupContainerResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerResult) string { return v.Status }).(pulumi.StringOutput)
}

// The maximum amount of time your container can spend processing a request before being stopped.
func (o LookupContainerResultOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupContainerResult) int { return v.Timeout }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupContainerResultOutput{})
}
