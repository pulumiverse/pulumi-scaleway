// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// The `domain.Record` data source is used to get information about an existing domain record.
//
// Refer to the Domains and DNS [product documentation](https://www.scaleway.com/en/docs/network/domains-and-dns/) and [API documentation](https://www.scaleway.com/en/developers/api/domains-and-dns/) for more information.
//
// ## Query domain records
//
// The following commands allow you to:
//
// - query a domain record specified by the DNS zone (`domain.tld`), the record name (`www`), the record type (`A`), and the record content (`1.2.3.4`).
// - query a domain record specified by the DNS zone (`domain.tld`) and the unique record ID (`11111111-1111-1111-1111-111111111111`).
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/domain"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Query record by DNS zone, record name, type and content
//			_, err := domain.LookupRecord(ctx, &domain.LookupRecordArgs{
//				DnsZone: pulumi.StringRef("domain.tld"),
//				Name:    pulumi.StringRef("www"),
//				Type:    pulumi.StringRef("A"),
//				Data:    pulumi.StringRef("1.2.3.4"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Query record by DNS zone and record ID
//			_, err = domain.LookupRecord(ctx, &domain.LookupRecordArgs{
//				DnsZone:  pulumi.StringRef("domain.tld"),
//				RecordId: pulumi.StringRef("11111111-1111-1111-1111-111111111111"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: scaleway.index/getdomainrecord.getDomainRecord has been deprecated in favor of scaleway.domain/getrecord.getRecord
func LookupDomainRecord(ctx *pulumi.Context, args *LookupDomainRecordArgs, opts ...pulumi.InvokeOption) (*LookupDomainRecordResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDomainRecordResult
	err := ctx.Invoke("scaleway:index/getDomainRecord:getDomainRecord", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDomainRecord.
type LookupDomainRecordArgs struct {
	// The content of the record (e.g., an IPv4 address for an `A` record or a string for a `TXT` record). Cannot be used with `recordId`.
	Data *string `pulumi:"data"`
	// The DNS zone (domain) to which the record belongs. This is a required field in both examples above but is optional in the context of defining the data source.
	DnsZone *string `pulumi:"dnsZone"`
	// The name of the record, which can be an empty string for a root record. Cannot be used with `recordId`.
	Name *string `pulumi:"name"`
	// ). The ID of the Project associated with the domain.
	ProjectId *string `pulumi:"projectId"`
	// The unique identifier of the record. Cannot be used with `name`, `type`, and `data`.
	RecordId *string `pulumi:"recordId"`
	// The type of the record (`A`, `AAAA`, `MX`, `CNAME`, etc.). Cannot be used with `recordId`.
	Type *string `pulumi:"type"`
}

// A collection of values returned by getDomainRecord.
type LookupDomainRecordResult struct {
	Data    *string `pulumi:"data"`
	DnsZone *string `pulumi:"dnsZone"`
	Fqdn    string  `pulumi:"fqdn"`
	// Information about dynamic records based on user geolocation. Find out more about dynamic records.
	GeoIps []GetDomainRecordGeoIp `pulumi:"geoIps"`
	// Information about dynamic records based on URL resolution. Find out more about dynamic records.
	HttpServices []GetDomainRecordHttpService `pulumi:"httpServices"`
	// The provider-assigned unique ID for this managed resource.
	Id            string  `pulumi:"id"`
	KeepEmptyZone bool    `pulumi:"keepEmptyZone"`
	Name          *string `pulumi:"name"`
	// The priority of the record, mainly used with `MX` records.
	Priority  int     `pulumi:"priority"`
	ProjectId *string `pulumi:"projectId"`
	RecordId  *string `pulumi:"recordId"`
	RootZone  bool    `pulumi:"rootZone"`
	// The Time To Live (TTL) of the record in seconds.
	Ttl  int     `pulumi:"ttl"`
	Type *string `pulumi:"type"`
	// Information about dynamic records based on the clientâ€™s (resolver) subnet. Find out more about dynamic records.
	Views []GetDomainRecordView `pulumi:"views"`
	// Information about dynamic records based on IP weights. Find out more about dynamic records.
	Weighteds []GetDomainRecordWeighted `pulumi:"weighteds"`
}

func LookupDomainRecordOutput(ctx *pulumi.Context, args LookupDomainRecordOutputArgs, opts ...pulumi.InvokeOption) LookupDomainRecordResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDomainRecordResultOutput, error) {
			args := v.(LookupDomainRecordArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("scaleway:index/getDomainRecord:getDomainRecord", args, LookupDomainRecordResultOutput{}, options).(LookupDomainRecordResultOutput), nil
		}).(LookupDomainRecordResultOutput)
}

// A collection of arguments for invoking getDomainRecord.
type LookupDomainRecordOutputArgs struct {
	// The content of the record (e.g., an IPv4 address for an `A` record or a string for a `TXT` record). Cannot be used with `recordId`.
	Data pulumi.StringPtrInput `pulumi:"data"`
	// The DNS zone (domain) to which the record belongs. This is a required field in both examples above but is optional in the context of defining the data source.
	DnsZone pulumi.StringPtrInput `pulumi:"dnsZone"`
	// The name of the record, which can be an empty string for a root record. Cannot be used with `recordId`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// ). The ID of the Project associated with the domain.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// The unique identifier of the record. Cannot be used with `name`, `type`, and `data`.
	RecordId pulumi.StringPtrInput `pulumi:"recordId"`
	// The type of the record (`A`, `AAAA`, `MX`, `CNAME`, etc.). Cannot be used with `recordId`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (LookupDomainRecordOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDomainRecordArgs)(nil)).Elem()
}

// A collection of values returned by getDomainRecord.
type LookupDomainRecordResultOutput struct{ *pulumi.OutputState }

func (LookupDomainRecordResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDomainRecordResult)(nil)).Elem()
}

func (o LookupDomainRecordResultOutput) ToLookupDomainRecordResultOutput() LookupDomainRecordResultOutput {
	return o
}

func (o LookupDomainRecordResultOutput) ToLookupDomainRecordResultOutputWithContext(ctx context.Context) LookupDomainRecordResultOutput {
	return o
}

func (o LookupDomainRecordResultOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDomainRecordResult) *string { return v.Data }).(pulumi.StringPtrOutput)
}

func (o LookupDomainRecordResultOutput) DnsZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDomainRecordResult) *string { return v.DnsZone }).(pulumi.StringPtrOutput)
}

func (o LookupDomainRecordResultOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainRecordResult) string { return v.Fqdn }).(pulumi.StringOutput)
}

// Information about dynamic records based on user geolocation. Find out more about dynamic records.
func (o LookupDomainRecordResultOutput) GeoIps() GetDomainRecordGeoIpArrayOutput {
	return o.ApplyT(func(v LookupDomainRecordResult) []GetDomainRecordGeoIp { return v.GeoIps }).(GetDomainRecordGeoIpArrayOutput)
}

// Information about dynamic records based on URL resolution. Find out more about dynamic records.
func (o LookupDomainRecordResultOutput) HttpServices() GetDomainRecordHttpServiceArrayOutput {
	return o.ApplyT(func(v LookupDomainRecordResult) []GetDomainRecordHttpService { return v.HttpServices }).(GetDomainRecordHttpServiceArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDomainRecordResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainRecordResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupDomainRecordResultOutput) KeepEmptyZone() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDomainRecordResult) bool { return v.KeepEmptyZone }).(pulumi.BoolOutput)
}

func (o LookupDomainRecordResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDomainRecordResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The priority of the record, mainly used with `MX` records.
func (o LookupDomainRecordResultOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDomainRecordResult) int { return v.Priority }).(pulumi.IntOutput)
}

func (o LookupDomainRecordResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDomainRecordResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

func (o LookupDomainRecordResultOutput) RecordId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDomainRecordResult) *string { return v.RecordId }).(pulumi.StringPtrOutput)
}

func (o LookupDomainRecordResultOutput) RootZone() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDomainRecordResult) bool { return v.RootZone }).(pulumi.BoolOutput)
}

// The Time To Live (TTL) of the record in seconds.
func (o LookupDomainRecordResultOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDomainRecordResult) int { return v.Ttl }).(pulumi.IntOutput)
}

func (o LookupDomainRecordResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDomainRecordResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Information about dynamic records based on the clientâ€™s (resolver) subnet. Find out more about dynamic records.
func (o LookupDomainRecordResultOutput) Views() GetDomainRecordViewArrayOutput {
	return o.ApplyT(func(v LookupDomainRecordResult) []GetDomainRecordView { return v.Views }).(GetDomainRecordViewArrayOutput)
}

// Information about dynamic records based on IP weights. Find out more about dynamic records.
func (o LookupDomainRecordResultOutput) Weighteds() GetDomainRecordWeightedArrayOutput {
	return o.ApplyT(func(v LookupDomainRecordResult) []GetDomainRecordWeighted { return v.Weighteds }).(GetDomainRecordWeightedArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDomainRecordResultOutput{})
}
