// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Get information about Scaleway Load-Balancer Backends.
// For more information, see [the documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-backends).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			mainLoadbalancerIp, err := scaleway.NewLoadbalancerIp(ctx, "mainLoadbalancerIp", nil)
//			if err != nil {
//				return err
//			}
//			mainLoadbalancer, err := scaleway.NewLoadbalancer(ctx, "mainLoadbalancer", &scaleway.LoadbalancerArgs{
//				IpId: mainLoadbalancerIp.ID(),
//				Type: pulumi.String("LB-S"),
//			})
//			if err != nil {
//				return err
//			}
//			mainLoadbalancerBackend, err := scaleway.NewLoadbalancerBackend(ctx, "mainLoadbalancerBackend", &scaleway.LoadbalancerBackendArgs{
//				LbId:            mainLoadbalancer.ID(),
//				ForwardProtocol: pulumi.String("http"),
//				ForwardPort:     pulumi.Int(80),
//			})
//			if err != nil {
//				return err
//			}
//			_ = scaleway.GetLbBackendOutput(ctx, scaleway.GetLbBackendOutputArgs{
//				BackendId: mainLoadbalancerBackend.ID(),
//			}, nil)
//			_ = scaleway.GetLbBackendOutput(ctx, scaleway.GetLbBackendOutputArgs{
//				Name: mainLoadbalancerBackend.Name,
//				LbId: mainLoadbalancer.ID(),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetLbBackend(ctx *pulumi.Context, args *GetLbBackendArgs, opts ...pulumi.InvokeOption) (*GetLbBackendResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetLbBackendResult
	err := ctx.Invoke("scaleway:index/getLbBackend:getLbBackend", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLbBackend.
type GetLbBackendArgs struct {
	// The backend id.
	// - Only one of `name` and `backendId` should be specified.
	BackendId *string `pulumi:"backendId"`
	// The load-balancer ID this backend is attached to.
	LbId *string `pulumi:"lbId"`
	// The name of the backend.
	// - When using the `name` you should specify the `lb-id`
	Name *string `pulumi:"name"`
}

// A collection of values returned by getLbBackend.
type GetLbBackendResult struct {
	BackendId                 *string                       `pulumi:"backendId"`
	FailoverHost              string                        `pulumi:"failoverHost"`
	ForwardPort               int                           `pulumi:"forwardPort"`
	ForwardPortAlgorithm      string                        `pulumi:"forwardPortAlgorithm"`
	ForwardProtocol           string                        `pulumi:"forwardProtocol"`
	HealthCheckDelay          string                        `pulumi:"healthCheckDelay"`
	HealthCheckHttp           []GetLbBackendHealthCheckHttp `pulumi:"healthCheckHttp"`
	HealthCheckHttps          []GetLbBackendHealthCheckHttp `pulumi:"healthCheckHttps"`
	HealthCheckMaxRetries     int                           `pulumi:"healthCheckMaxRetries"`
	HealthCheckPort           int                           `pulumi:"healthCheckPort"`
	HealthCheckSendProxy      bool                          `pulumi:"healthCheckSendProxy"`
	HealthCheckTcps           []GetLbBackendHealthCheckTcp  `pulumi:"healthCheckTcps"`
	HealthCheckTimeout        string                        `pulumi:"healthCheckTimeout"`
	HealthCheckTransientDelay string                        `pulumi:"healthCheckTransientDelay"`
	// The provider-assigned unique ID for this managed resource.
	Id                       string   `pulumi:"id"`
	IgnoreSslServerVerify    bool     `pulumi:"ignoreSslServerVerify"`
	LbId                     *string  `pulumi:"lbId"`
	MaxConnections           int      `pulumi:"maxConnections"`
	MaxRetries               int      `pulumi:"maxRetries"`
	Name                     *string  `pulumi:"name"`
	OnMarkedDownAction       string   `pulumi:"onMarkedDownAction"`
	ProxyProtocol            string   `pulumi:"proxyProtocol"`
	RedispatchAttemptCount   int      `pulumi:"redispatchAttemptCount"`
	SendProxyV2              bool     `pulumi:"sendProxyV2"`
	ServerIps                []string `pulumi:"serverIps"`
	SslBridging              bool     `pulumi:"sslBridging"`
	StickySessions           string   `pulumi:"stickySessions"`
	StickySessionsCookieName string   `pulumi:"stickySessionsCookieName"`
	TimeoutConnect           string   `pulumi:"timeoutConnect"`
	TimeoutQueue             string   `pulumi:"timeoutQueue"`
	TimeoutServer            string   `pulumi:"timeoutServer"`
	TimeoutTunnel            string   `pulumi:"timeoutTunnel"`
}

func GetLbBackendOutput(ctx *pulumi.Context, args GetLbBackendOutputArgs, opts ...pulumi.InvokeOption) GetLbBackendResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetLbBackendResult, error) {
			args := v.(GetLbBackendArgs)
			r, err := GetLbBackend(ctx, &args, opts...)
			var s GetLbBackendResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetLbBackendResultOutput)
}

// A collection of arguments for invoking getLbBackend.
type GetLbBackendOutputArgs struct {
	// The backend id.
	// - Only one of `name` and `backendId` should be specified.
	BackendId pulumi.StringPtrInput `pulumi:"backendId"`
	// The load-balancer ID this backend is attached to.
	LbId pulumi.StringPtrInput `pulumi:"lbId"`
	// The name of the backend.
	// - When using the `name` you should specify the `lb-id`
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GetLbBackendOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbBackendArgs)(nil)).Elem()
}

// A collection of values returned by getLbBackend.
type GetLbBackendResultOutput struct{ *pulumi.OutputState }

func (GetLbBackendResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbBackendResult)(nil)).Elem()
}

func (o GetLbBackendResultOutput) ToGetLbBackendResultOutput() GetLbBackendResultOutput {
	return o
}

func (o GetLbBackendResultOutput) ToGetLbBackendResultOutputWithContext(ctx context.Context) GetLbBackendResultOutput {
	return o
}

func (o GetLbBackendResultOutput) BackendId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLbBackendResult) *string { return v.BackendId }).(pulumi.StringPtrOutput)
}

func (o GetLbBackendResultOutput) FailoverHost() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendResult) string { return v.FailoverHost }).(pulumi.StringOutput)
}

func (o GetLbBackendResultOutput) ForwardPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetLbBackendResult) int { return v.ForwardPort }).(pulumi.IntOutput)
}

func (o GetLbBackendResultOutput) ForwardPortAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendResult) string { return v.ForwardPortAlgorithm }).(pulumi.StringOutput)
}

func (o GetLbBackendResultOutput) ForwardProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendResult) string { return v.ForwardProtocol }).(pulumi.StringOutput)
}

func (o GetLbBackendResultOutput) HealthCheckDelay() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendResult) string { return v.HealthCheckDelay }).(pulumi.StringOutput)
}

func (o GetLbBackendResultOutput) HealthCheckHttp() GetLbBackendHealthCheckHttpArrayOutput {
	return o.ApplyT(func(v GetLbBackendResult) []GetLbBackendHealthCheckHttp { return v.HealthCheckHttp }).(GetLbBackendHealthCheckHttpArrayOutput)
}

func (o GetLbBackendResultOutput) HealthCheckHttps() GetLbBackendHealthCheckHttpArrayOutput {
	return o.ApplyT(func(v GetLbBackendResult) []GetLbBackendHealthCheckHttp { return v.HealthCheckHttps }).(GetLbBackendHealthCheckHttpArrayOutput)
}

func (o GetLbBackendResultOutput) HealthCheckMaxRetries() pulumi.IntOutput {
	return o.ApplyT(func(v GetLbBackendResult) int { return v.HealthCheckMaxRetries }).(pulumi.IntOutput)
}

func (o GetLbBackendResultOutput) HealthCheckPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetLbBackendResult) int { return v.HealthCheckPort }).(pulumi.IntOutput)
}

func (o GetLbBackendResultOutput) HealthCheckSendProxy() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLbBackendResult) bool { return v.HealthCheckSendProxy }).(pulumi.BoolOutput)
}

func (o GetLbBackendResultOutput) HealthCheckTcps() GetLbBackendHealthCheckTcpArrayOutput {
	return o.ApplyT(func(v GetLbBackendResult) []GetLbBackendHealthCheckTcp { return v.HealthCheckTcps }).(GetLbBackendHealthCheckTcpArrayOutput)
}

func (o GetLbBackendResultOutput) HealthCheckTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendResult) string { return v.HealthCheckTimeout }).(pulumi.StringOutput)
}

func (o GetLbBackendResultOutput) HealthCheckTransientDelay() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendResult) string { return v.HealthCheckTransientDelay }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetLbBackendResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetLbBackendResultOutput) IgnoreSslServerVerify() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLbBackendResult) bool { return v.IgnoreSslServerVerify }).(pulumi.BoolOutput)
}

func (o GetLbBackendResultOutput) LbId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLbBackendResult) *string { return v.LbId }).(pulumi.StringPtrOutput)
}

func (o GetLbBackendResultOutput) MaxConnections() pulumi.IntOutput {
	return o.ApplyT(func(v GetLbBackendResult) int { return v.MaxConnections }).(pulumi.IntOutput)
}

func (o GetLbBackendResultOutput) MaxRetries() pulumi.IntOutput {
	return o.ApplyT(func(v GetLbBackendResult) int { return v.MaxRetries }).(pulumi.IntOutput)
}

func (o GetLbBackendResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLbBackendResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetLbBackendResultOutput) OnMarkedDownAction() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendResult) string { return v.OnMarkedDownAction }).(pulumi.StringOutput)
}

func (o GetLbBackendResultOutput) ProxyProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendResult) string { return v.ProxyProtocol }).(pulumi.StringOutput)
}

func (o GetLbBackendResultOutput) RedispatchAttemptCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetLbBackendResult) int { return v.RedispatchAttemptCount }).(pulumi.IntOutput)
}

func (o GetLbBackendResultOutput) SendProxyV2() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLbBackendResult) bool { return v.SendProxyV2 }).(pulumi.BoolOutput)
}

func (o GetLbBackendResultOutput) ServerIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLbBackendResult) []string { return v.ServerIps }).(pulumi.StringArrayOutput)
}

func (o GetLbBackendResultOutput) SslBridging() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLbBackendResult) bool { return v.SslBridging }).(pulumi.BoolOutput)
}

func (o GetLbBackendResultOutput) StickySessions() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendResult) string { return v.StickySessions }).(pulumi.StringOutput)
}

func (o GetLbBackendResultOutput) StickySessionsCookieName() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendResult) string { return v.StickySessionsCookieName }).(pulumi.StringOutput)
}

func (o GetLbBackendResultOutput) TimeoutConnect() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendResult) string { return v.TimeoutConnect }).(pulumi.StringOutput)
}

func (o GetLbBackendResultOutput) TimeoutQueue() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendResult) string { return v.TimeoutQueue }).(pulumi.StringOutput)
}

func (o GetLbBackendResultOutput) TimeoutServer() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendResult) string { return v.TimeoutServer }).(pulumi.StringOutput)
}

func (o GetLbBackendResultOutput) TimeoutTunnel() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbBackendResult) string { return v.TimeoutTunnel }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetLbBackendResultOutput{})
}
