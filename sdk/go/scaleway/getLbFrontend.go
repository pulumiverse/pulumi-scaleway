// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Get information about Scaleway Load Balancer frontends.
//
// For more information, see the [main documentation](https://www.scaleway.com/en/docs/load-balancer/reference-content/configuring-frontends/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-frontends).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/loadbalancers"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			ip01, err := loadbalancers.NewIp(ctx, "ip01", nil)
//			if err != nil {
//				return err
//			}
//			lb01, err := loadbalancers.NewLoadBalancer(ctx, "lb01", &loadbalancers.LoadBalancerArgs{
//				IpId: ip01.ID(),
//				Name: pulumi.String("test-lb"),
//				Type: pulumi.String("lb-s"),
//			})
//			if err != nil {
//				return err
//			}
//			bkd01, err := loadbalancers.NewBackend(ctx, "bkd01", &loadbalancers.BackendArgs{
//				LbId:            lb01.ID(),
//				ForwardProtocol: pulumi.String("tcp"),
//				ForwardPort:     pulumi.Int(80),
//				ProxyProtocol:   pulumi.String("none"),
//			})
//			if err != nil {
//				return err
//			}
//			frt01, err := loadbalancers.NewFrontend(ctx, "frt01", &loadbalancers.FrontendArgs{
//				LbId:        lb01.ID(),
//				BackendId:   bkd01.ID(),
//				InboundPort: pulumi.Int(80),
//			})
//			if err != nil {
//				return err
//			}
//			_ = loadbalancers.LookupFrontendOutput(ctx, loadbalancers.GetFrontendOutputArgs{
//				FrontendId: frt01.ID(),
//			}, nil)
//			_ = loadbalancers.LookupFrontendOutput(ctx, loadbalancers.GetFrontendOutputArgs{
//				Name: frt01.Name,
//				LbId: lb01.ID(),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: scaleway.index/getlbfrontend.getLbFrontend has been deprecated in favor of scaleway.loadbalancers/getfrontend.getFrontend
func GetLbFrontend(ctx *pulumi.Context, args *GetLbFrontendArgs, opts ...pulumi.InvokeOption) (*GetLbFrontendResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetLbFrontendResult
	err := ctx.Invoke("scaleway:index/getLbFrontend:getLbFrontend", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLbFrontend.
type GetLbFrontendArgs struct {
	// The frontend ID.
	// - Only one of `name` and `frontendId` should be specified.
	FrontendId *string `pulumi:"frontendId"`
	// The Load Balancer ID this frontend is attached to.
	LbId *string `pulumi:"lbId"`
	// The name of the frontend.
	// - When using the `name` you should specify the `lb-id`
	Name *string `pulumi:"name"`
}

// A collection of values returned by getLbFrontend.
type GetLbFrontendResult struct {
	Acls           []GetLbFrontendAcl `pulumi:"acls"`
	BackendId      string             `pulumi:"backendId"`
	CertificateId  string             `pulumi:"certificateId"`
	CertificateIds []string           `pulumi:"certificateIds"`
	EnableHttp3    bool               `pulumi:"enableHttp3"`
	ExternalAcls   bool               `pulumi:"externalAcls"`
	FrontendId     *string            `pulumi:"frontendId"`
	// The provider-assigned unique ID for this managed resource.
	Id            string  `pulumi:"id"`
	InboundPort   int     `pulumi:"inboundPort"`
	LbId          *string `pulumi:"lbId"`
	Name          *string `pulumi:"name"`
	TimeoutClient string  `pulumi:"timeoutClient"`
}

func GetLbFrontendOutput(ctx *pulumi.Context, args GetLbFrontendOutputArgs, opts ...pulumi.InvokeOption) GetLbFrontendResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetLbFrontendResultOutput, error) {
			args := v.(GetLbFrontendArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("scaleway:index/getLbFrontend:getLbFrontend", args, GetLbFrontendResultOutput{}, options).(GetLbFrontendResultOutput), nil
		}).(GetLbFrontendResultOutput)
}

// A collection of arguments for invoking getLbFrontend.
type GetLbFrontendOutputArgs struct {
	// The frontend ID.
	// - Only one of `name` and `frontendId` should be specified.
	FrontendId pulumi.StringPtrInput `pulumi:"frontendId"`
	// The Load Balancer ID this frontend is attached to.
	LbId pulumi.StringPtrInput `pulumi:"lbId"`
	// The name of the frontend.
	// - When using the `name` you should specify the `lb-id`
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GetLbFrontendOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbFrontendArgs)(nil)).Elem()
}

// A collection of values returned by getLbFrontend.
type GetLbFrontendResultOutput struct{ *pulumi.OutputState }

func (GetLbFrontendResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbFrontendResult)(nil)).Elem()
}

func (o GetLbFrontendResultOutput) ToGetLbFrontendResultOutput() GetLbFrontendResultOutput {
	return o
}

func (o GetLbFrontendResultOutput) ToGetLbFrontendResultOutputWithContext(ctx context.Context) GetLbFrontendResultOutput {
	return o
}

func (o GetLbFrontendResultOutput) Acls() GetLbFrontendAclArrayOutput {
	return o.ApplyT(func(v GetLbFrontendResult) []GetLbFrontendAcl { return v.Acls }).(GetLbFrontendAclArrayOutput)
}

func (o GetLbFrontendResultOutput) BackendId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbFrontendResult) string { return v.BackendId }).(pulumi.StringOutput)
}

func (o GetLbFrontendResultOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbFrontendResult) string { return v.CertificateId }).(pulumi.StringOutput)
}

func (o GetLbFrontendResultOutput) CertificateIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLbFrontendResult) []string { return v.CertificateIds }).(pulumi.StringArrayOutput)
}

func (o GetLbFrontendResultOutput) EnableHttp3() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLbFrontendResult) bool { return v.EnableHttp3 }).(pulumi.BoolOutput)
}

func (o GetLbFrontendResultOutput) ExternalAcls() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLbFrontendResult) bool { return v.ExternalAcls }).(pulumi.BoolOutput)
}

func (o GetLbFrontendResultOutput) FrontendId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLbFrontendResult) *string { return v.FrontendId }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetLbFrontendResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbFrontendResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetLbFrontendResultOutput) InboundPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetLbFrontendResult) int { return v.InboundPort }).(pulumi.IntOutput)
}

func (o GetLbFrontendResultOutput) LbId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLbFrontendResult) *string { return v.LbId }).(pulumi.StringPtrOutput)
}

func (o GetLbFrontendResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLbFrontendResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetLbFrontendResultOutput) TimeoutClient() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbFrontendResult) string { return v.TimeoutClient }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetLbFrontendResultOutput{})
}
