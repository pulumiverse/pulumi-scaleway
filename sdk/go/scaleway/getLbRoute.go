// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Get information about Scaleway Load Balancer routes.
//
// For more information, see the [main documentation](https://www.scaleway.com/en/docs/load-balancer/how-to/create-manage-routes/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-route).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/loadbalancers"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			ip01, err := loadbalancers.NewIp(ctx, "ip01", nil)
//			if err != nil {
//				return err
//			}
//			lb01, err := loadbalancers.NewLoadBalancer(ctx, "lb01", &loadbalancers.LoadBalancerArgs{
//				IpId: ip01.ID(),
//				Name: pulumi.String("test-lb"),
//				Type: pulumi.String("lb-s"),
//			})
//			if err != nil {
//				return err
//			}
//			bkd01, err := loadbalancers.NewBackend(ctx, "bkd01", &loadbalancers.BackendArgs{
//				LbId:            lb01.ID(),
//				ForwardProtocol: pulumi.String("tcp"),
//				ForwardPort:     pulumi.Int(80),
//				ProxyProtocol:   pulumi.String("none"),
//			})
//			if err != nil {
//				return err
//			}
//			frt01, err := loadbalancers.NewFrontend(ctx, "frt01", &loadbalancers.FrontendArgs{
//				LbId:        lb01.ID(),
//				BackendId:   bkd01.ID(),
//				InboundPort: pulumi.Int(80),
//			})
//			if err != nil {
//				return err
//			}
//			rt01, err := loadbalancers.NewRoute(ctx, "rt01", &loadbalancers.RouteArgs{
//				FrontendId: frt01.ID(),
//				BackendId:  bkd01.ID(),
//				MatchSni:   pulumi.String("sni.scaleway.com"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = loadbalancers.LookupRouteOutput(ctx, loadbalancers.GetRouteOutputArgs{
//				RouteId: rt01.ID(),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: scaleway.index/getlbroute.getLbRoute has been deprecated in favor of scaleway.loadbalancers/getroute.getRoute
func GetLbRoute(ctx *pulumi.Context, args *GetLbRouteArgs, opts ...pulumi.InvokeOption) (*GetLbRouteResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetLbRouteResult
	err := ctx.Invoke("scaleway:index/getLbRoute:getLbRoute", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLbRoute.
type GetLbRouteArgs struct {
	// The route ID.
	RouteId string `pulumi:"routeId"`
}

// A collection of values returned by getLbRoute.
type GetLbRouteResult struct {
	BackendId  string `pulumi:"backendId"`
	CreatedAt  string `pulumi:"createdAt"`
	FrontendId string `pulumi:"frontendId"`
	// The provider-assigned unique ID for this managed resource.
	Id              string `pulumi:"id"`
	MatchHostHeader string `pulumi:"matchHostHeader"`
	MatchPathBegin  string `pulumi:"matchPathBegin"`
	MatchSni        string `pulumi:"matchSni"`
	MatchSubdomains bool   `pulumi:"matchSubdomains"`
	RouteId         string `pulumi:"routeId"`
	UpdatedAt       string `pulumi:"updatedAt"`
}

func GetLbRouteOutput(ctx *pulumi.Context, args GetLbRouteOutputArgs, opts ...pulumi.InvokeOption) GetLbRouteResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetLbRouteResultOutput, error) {
			args := v.(GetLbRouteArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("scaleway:index/getLbRoute:getLbRoute", args, GetLbRouteResultOutput{}, options).(GetLbRouteResultOutput), nil
		}).(GetLbRouteResultOutput)
}

// A collection of arguments for invoking getLbRoute.
type GetLbRouteOutputArgs struct {
	// The route ID.
	RouteId pulumi.StringInput `pulumi:"routeId"`
}

func (GetLbRouteOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbRouteArgs)(nil)).Elem()
}

// A collection of values returned by getLbRoute.
type GetLbRouteResultOutput struct{ *pulumi.OutputState }

func (GetLbRouteResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLbRouteResult)(nil)).Elem()
}

func (o GetLbRouteResultOutput) ToGetLbRouteResultOutput() GetLbRouteResultOutput {
	return o
}

func (o GetLbRouteResultOutput) ToGetLbRouteResultOutputWithContext(ctx context.Context) GetLbRouteResultOutput {
	return o
}

func (o GetLbRouteResultOutput) BackendId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbRouteResult) string { return v.BackendId }).(pulumi.StringOutput)
}

func (o GetLbRouteResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbRouteResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o GetLbRouteResultOutput) FrontendId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbRouteResult) string { return v.FrontendId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetLbRouteResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbRouteResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetLbRouteResultOutput) MatchHostHeader() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbRouteResult) string { return v.MatchHostHeader }).(pulumi.StringOutput)
}

func (o GetLbRouteResultOutput) MatchPathBegin() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbRouteResult) string { return v.MatchPathBegin }).(pulumi.StringOutput)
}

func (o GetLbRouteResultOutput) MatchSni() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbRouteResult) string { return v.MatchSni }).(pulumi.StringOutput)
}

func (o GetLbRouteResultOutput) MatchSubdomains() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLbRouteResult) bool { return v.MatchSubdomains }).(pulumi.BoolOutput)
}

func (o GetLbRouteResultOutput) RouteId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbRouteResult) string { return v.RouteId }).(pulumi.StringOutput)
}

func (o GetLbRouteResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetLbRouteResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetLbRouteResultOutput{})
}
