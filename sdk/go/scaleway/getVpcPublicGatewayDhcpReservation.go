// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// > **Important:**  The data source `network.PublicGatewayDhcpReservation` has been deprecated and will no longer be supported.
// In 2023, DHCP functionality was moved from Public Gateways to Private Networks, DHCP resources are now no longer needed.
// You can use IPAM to manage your IPs. For more information, please refer to the dedicated guide.
//
// Gets information about a DHCP entry. For further information, please see the
// [API documentation](https://www.scaleway.com/en/developers/api/public-gateway/#path-dhcp-entries-list-dhcp-entries).
//
// ## Example Dynamic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/instance"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/network"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := network.NewPrivateNetwork(ctx, "main", nil)
//			if err != nil {
//				return err
//			}
//			mainServer, err := instance.NewServer(ctx, "main", &instance.ServerArgs{
//				Image: pulumi.String("ubuntu_jammy"),
//				Type:  pulumi.String("DEV1-S"),
//				Zone:  pulumi.String("fr-par-1"),
//			})
//			if err != nil {
//				return err
//			}
//			mainPrivateNic, err := instance.NewPrivateNic(ctx, "main", &instance.PrivateNicArgs{
//				ServerId:         mainServer.ID(),
//				PrivateNetworkId: main.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			mainPublicGatewayIp, err := network.NewPublicGatewayIp(ctx, "main", nil)
//			if err != nil {
//				return err
//			}
//			mainPublicGatewayDhcp, err := network.NewPublicGatewayDhcp(ctx, "main", &network.PublicGatewayDhcpArgs{
//				Subnet: pulumi.String("192.168.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			mainPublicGateway, err := network.NewPublicGateway(ctx, "main", &network.PublicGatewayArgs{
//				Name: pulumi.String("foobar"),
//				Type: pulumi.String("VPC-GW-S"),
//				IpId: mainPublicGatewayIp.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			mainGatewayNetwork, err := network.NewGatewayNetwork(ctx, "main", &network.GatewayNetworkArgs{
//				GatewayId:        mainPublicGateway.ID(),
//				PrivateNetworkId: main.ID(),
//				DhcpId:           mainPublicGatewayDhcp.ID(),
//				CleanupDhcp:      pulumi.Bool(true),
//				EnableMasquerade: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			// # Retrieve the dynamic entries generated by mac address & gateway network
//			_ = network.LookupPublicGatewayDhcpReservationOutput(ctx, network.GetPublicGatewayDhcpReservationOutputArgs{
//				MacAddress:       mainPrivateNic.MacAddress,
//				GatewayNetworkId: mainGatewayNetwork.ID(),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
//
// ## Example Static and PAT Rule
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/instance"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/network"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := network.NewPrivateNetwork(ctx, "main", nil)
//			if err != nil {
//				return err
//			}
//			mainSecurityGroup, err := instance.NewSecurityGroup(ctx, "main", &instance.SecurityGroupArgs{
//				InboundDefaultPolicy:  pulumi.String("drop"),
//				OutboundDefaultPolicy: pulumi.String("accept"),
//				InboundRules: instance.SecurityGroupInboundRuleArray{
//					&instance.SecurityGroupInboundRuleArgs{
//						Action: pulumi.String("accept"),
//						Port:   pulumi.Int(22),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			mainServer, err := instance.NewServer(ctx, "main", &instance.ServerArgs{
//				Image:           pulumi.String("ubuntu_jammy"),
//				Type:            pulumi.String("DEV1-S"),
//				Zone:            pulumi.String("fr-par-1"),
//				SecurityGroupId: mainSecurityGroup.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			mainPrivateNic, err := instance.NewPrivateNic(ctx, "main", &instance.PrivateNicArgs{
//				ServerId:         mainServer.ID(),
//				PrivateNetworkId: main.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			mainPublicGatewayIp, err := network.NewPublicGatewayIp(ctx, "main", nil)
//			if err != nil {
//				return err
//			}
//			mainPublicGatewayDhcp, err := network.NewPublicGatewayDhcp(ctx, "main", &network.PublicGatewayDhcpArgs{
//				Subnet: pulumi.String("192.168.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			mainPublicGateway, err := network.NewPublicGateway(ctx, "main", &network.PublicGatewayArgs{
//				Name: pulumi.String("foobar"),
//				Type: pulumi.String("VPC-GW-S"),
//				IpId: mainPublicGatewayIp.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			mainGatewayNetwork, err := network.NewGatewayNetwork(ctx, "main", &network.GatewayNetworkArgs{
//				GatewayId:        mainPublicGateway.ID(),
//				PrivateNetworkId: main.ID(),
//				DhcpId:           mainPublicGatewayDhcp.ID(),
//				CleanupDhcp:      pulumi.Bool(true),
//				EnableMasquerade: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			mainPublicGatewayDhcpReservation, err := network.NewPublicGatewayDhcpReservation(ctx, "main", &network.PublicGatewayDhcpReservationArgs{
//				GatewayNetworkId: mainGatewayNetwork.ID(),
//				MacAddress:       mainPrivateNic.MacAddress,
//				IpAddress:        pulumi.String("192.168.1.4"),
//			})
//			if err != nil {
//				return err
//			}
//			// ## VPC PAT RULE
//			_, err = network.NewPublicGatewayPatRule(ctx, "main", &network.PublicGatewayPatRuleArgs{
//				GatewayId:   mainPublicGateway.ID(),
//				PrivateIp:   mainPublicGatewayDhcpReservation.IpAddress,
//				PrivatePort: pulumi.Int(22),
//				PublicPort:  pulumi.Int(2222),
//				Protocol:    pulumi.String("tcp"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = network.LookupPublicGatewayDhcpReservationOutput(ctx, network.GetPublicGatewayDhcpReservationOutputArgs{
//				ReservationId: mainPublicGatewayDhcpReservation.ID(),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: scaleway.index/getvpcpublicgatewaydhcpreservation.getVpcPublicGatewayDhcpReservation has been deprecated in favor of scaleway.network/getpublicgatewaydhcpreservation.getPublicGatewayDhcpReservation
func LookupVpcPublicGatewayDhcpReservation(ctx *pulumi.Context, args *LookupVpcPublicGatewayDhcpReservationArgs, opts ...pulumi.InvokeOption) (*LookupVpcPublicGatewayDhcpReservationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVpcPublicGatewayDhcpReservationResult
	err := ctx.Invoke("scaleway:index/getVpcPublicGatewayDhcpReservation:getVpcPublicGatewayDhcpReservation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpcPublicGatewayDhcpReservation.
type LookupVpcPublicGatewayDhcpReservationArgs struct {
	// The ID of the owning GatewayNetwork.
	//
	// > Only one of `reservationId` or `macAddress` with `gatewayNetworkId` should be specified.
	GatewayNetworkId *string `pulumi:"gatewayNetworkId"`
	// The MAC address of the reservation to retrieve.
	MacAddress *string `pulumi:"macAddress"`
	// The ID of the reservation (DHCP entry) to retrieve.
	ReservationId *string `pulumi:"reservationId"`
	// Whether to wait for `macAddress` to exist in DHCP.
	WaitForDhcp *bool `pulumi:"waitForDhcp"`
	// `zone`). The zone in which the reservation exists.
	Zone *string `pulumi:"zone"`
}

// A collection of values returned by getVpcPublicGatewayDhcpReservation.
type LookupVpcPublicGatewayDhcpReservationResult struct {
	CreatedAt        string  `pulumi:"createdAt"`
	GatewayNetworkId *string `pulumi:"gatewayNetworkId"`
	Hostname         string  `pulumi:"hostname"`
	// The provider-assigned unique ID for this managed resource.
	Id            string  `pulumi:"id"`
	IpAddress     string  `pulumi:"ipAddress"`
	MacAddress    *string `pulumi:"macAddress"`
	ReservationId *string `pulumi:"reservationId"`
	Type          string  `pulumi:"type"`
	UpdatedAt     string  `pulumi:"updatedAt"`
	WaitForDhcp   *bool   `pulumi:"waitForDhcp"`
	Zone          *string `pulumi:"zone"`
}

func LookupVpcPublicGatewayDhcpReservationOutput(ctx *pulumi.Context, args LookupVpcPublicGatewayDhcpReservationOutputArgs, opts ...pulumi.InvokeOption) LookupVpcPublicGatewayDhcpReservationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVpcPublicGatewayDhcpReservationResultOutput, error) {
			args := v.(LookupVpcPublicGatewayDhcpReservationArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("scaleway:index/getVpcPublicGatewayDhcpReservation:getVpcPublicGatewayDhcpReservation", args, LookupVpcPublicGatewayDhcpReservationResultOutput{}, options).(LookupVpcPublicGatewayDhcpReservationResultOutput), nil
		}).(LookupVpcPublicGatewayDhcpReservationResultOutput)
}

// A collection of arguments for invoking getVpcPublicGatewayDhcpReservation.
type LookupVpcPublicGatewayDhcpReservationOutputArgs struct {
	// The ID of the owning GatewayNetwork.
	//
	// > Only one of `reservationId` or `macAddress` with `gatewayNetworkId` should be specified.
	GatewayNetworkId pulumi.StringPtrInput `pulumi:"gatewayNetworkId"`
	// The MAC address of the reservation to retrieve.
	MacAddress pulumi.StringPtrInput `pulumi:"macAddress"`
	// The ID of the reservation (DHCP entry) to retrieve.
	ReservationId pulumi.StringPtrInput `pulumi:"reservationId"`
	// Whether to wait for `macAddress` to exist in DHCP.
	WaitForDhcp pulumi.BoolPtrInput `pulumi:"waitForDhcp"`
	// `zone`). The zone in which the reservation exists.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (LookupVpcPublicGatewayDhcpReservationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpcPublicGatewayDhcpReservationArgs)(nil)).Elem()
}

// A collection of values returned by getVpcPublicGatewayDhcpReservation.
type LookupVpcPublicGatewayDhcpReservationResultOutput struct{ *pulumi.OutputState }

func (LookupVpcPublicGatewayDhcpReservationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpcPublicGatewayDhcpReservationResult)(nil)).Elem()
}

func (o LookupVpcPublicGatewayDhcpReservationResultOutput) ToLookupVpcPublicGatewayDhcpReservationResultOutput() LookupVpcPublicGatewayDhcpReservationResultOutput {
	return o
}

func (o LookupVpcPublicGatewayDhcpReservationResultOutput) ToLookupVpcPublicGatewayDhcpReservationResultOutputWithContext(ctx context.Context) LookupVpcPublicGatewayDhcpReservationResultOutput {
	return o
}

func (o LookupVpcPublicGatewayDhcpReservationResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcPublicGatewayDhcpReservationResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o LookupVpcPublicGatewayDhcpReservationResultOutput) GatewayNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVpcPublicGatewayDhcpReservationResult) *string { return v.GatewayNetworkId }).(pulumi.StringPtrOutput)
}

func (o LookupVpcPublicGatewayDhcpReservationResultOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcPublicGatewayDhcpReservationResult) string { return v.Hostname }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupVpcPublicGatewayDhcpReservationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcPublicGatewayDhcpReservationResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupVpcPublicGatewayDhcpReservationResultOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcPublicGatewayDhcpReservationResult) string { return v.IpAddress }).(pulumi.StringOutput)
}

func (o LookupVpcPublicGatewayDhcpReservationResultOutput) MacAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVpcPublicGatewayDhcpReservationResult) *string { return v.MacAddress }).(pulumi.StringPtrOutput)
}

func (o LookupVpcPublicGatewayDhcpReservationResultOutput) ReservationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVpcPublicGatewayDhcpReservationResult) *string { return v.ReservationId }).(pulumi.StringPtrOutput)
}

func (o LookupVpcPublicGatewayDhcpReservationResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcPublicGatewayDhcpReservationResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o LookupVpcPublicGatewayDhcpReservationResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcPublicGatewayDhcpReservationResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func (o LookupVpcPublicGatewayDhcpReservationResultOutput) WaitForDhcp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupVpcPublicGatewayDhcpReservationResult) *bool { return v.WaitForDhcp }).(pulumi.BoolPtrOutput)
}

func (o LookupVpcPublicGatewayDhcpReservationResultOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVpcPublicGatewayDhcpReservationResult) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVpcPublicGatewayDhcpReservationResultOutput{})
}
