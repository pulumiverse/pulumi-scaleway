// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hosting

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Web Hostings.
// For more information, see the [API documentation](https://www.scaleway.com/en/developers/api/webhosting/hosting-api/).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/hosting"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			byName, err := hosting.GetOffer(ctx, &hosting.GetOfferArgs{
//				Name:         pulumi.StringRef("lite"),
//				ControlPanel: pulumi.StringRef("Cpanel"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = hosting.NewHosting(ctx, "main", &hosting.HostingArgs{
//				OfferId: pulumi.String(byName.OfferId),
//				Email:   pulumi.String("your@email.com"),
//				Domain:  pulumi.String("yourdomain.com"),
//				Tags: pulumi.StringArray{
//					pulumi.String("webhosting"),
//					pulumi.String("provider"),
//					pulumi.String("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Hostings can be imported using the `{region}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:hosting/hosting:Hosting hosting01 fr-par/11111111-1111-1111-1111-111111111111
// ```
type Hosting struct {
	pulumi.CustomResourceState

	// The URL to connect to cPanel Dashboard and to Webmail interface.
	CpanelUrls HostingCpanelUrlArrayOutput `pulumi:"cpanelUrls"`
	// Date and time of hosting's creation (RFC 3339 format).
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The DNS status of the hosting.
	DnsStatus pulumi.StringOutput `pulumi:"dnsStatus"`
	// The domain name of the hosting.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// The contact email of the client for the hosting.
	Email pulumi.StringOutput `pulumi:"email"`
	// List of nameservers associated with the webhosting.
	NameServers HostingNameServerArrayOutput `pulumi:"nameServers"`
	// The ID of the selected offer for the hosting.
	OfferId pulumi.StringOutput `pulumi:"offerId"`
	// The name of the active offer.
	OfferName pulumi.StringOutput `pulumi:"offerName"`
	// The IDs of the selected options for the hosting.
	OptionIds pulumi.StringArrayOutput `pulumi:"optionIds"`
	// The active options of the hosting.
	Options HostingOptionArrayOutput `pulumi:"options"`
	// (Deprecated) The organization ID the hosting is associated with.
	//
	// Deprecated: The organizationId field is deprecated and will be removed in the next major version.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The hostname of the host platform.
	PlatformHostname pulumi.StringOutput `pulumi:"platformHostname"`
	// The number of the host platform.
	PlatformNumber pulumi.IntOutput `pulumi:"platformNumber"`
	// `projectId`) The ID of the project the VPC is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// List of DNS records associated with the webhosting.
	Records HostingRecordArrayOutput `pulumi:"records"`
	// `region`) The region of the Hosting.
	Region pulumi.StringOutput `pulumi:"region"`
	// The hosting status.
	Status pulumi.StringOutput `pulumi:"status"`
	// The tags associated with the hosting.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Date and time of hosting's last update (RFC 3339 format).
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The main hosting cPanel username.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewHosting registers a new resource with the given unique name, arguments, and options.
func NewHosting(ctx *pulumi.Context,
	name string, args *HostingArgs, opts ...pulumi.ResourceOption) (*Hosting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.OfferId == nil {
		return nil, errors.New("invalid value for required argument 'OfferId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/webhosting:Webhosting"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Hosting
	err := ctx.RegisterResource("scaleway:hosting/hosting:Hosting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHosting gets an existing Hosting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHosting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostingState, opts ...pulumi.ResourceOption) (*Hosting, error) {
	var resource Hosting
	err := ctx.ReadResource("scaleway:hosting/hosting:Hosting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Hosting resources.
type hostingState struct {
	// The URL to connect to cPanel Dashboard and to Webmail interface.
	CpanelUrls []HostingCpanelUrl `pulumi:"cpanelUrls"`
	// Date and time of hosting's creation (RFC 3339 format).
	CreatedAt *string `pulumi:"createdAt"`
	// The DNS status of the hosting.
	DnsStatus *string `pulumi:"dnsStatus"`
	// The domain name of the hosting.
	Domain *string `pulumi:"domain"`
	// The contact email of the client for the hosting.
	Email *string `pulumi:"email"`
	// List of nameservers associated with the webhosting.
	NameServers []HostingNameServer `pulumi:"nameServers"`
	// The ID of the selected offer for the hosting.
	OfferId *string `pulumi:"offerId"`
	// The name of the active offer.
	OfferName *string `pulumi:"offerName"`
	// The IDs of the selected options for the hosting.
	OptionIds []string `pulumi:"optionIds"`
	// The active options of the hosting.
	Options []HostingOption `pulumi:"options"`
	// (Deprecated) The organization ID the hosting is associated with.
	//
	// Deprecated: The organizationId field is deprecated and will be removed in the next major version.
	OrganizationId *string `pulumi:"organizationId"`
	// The hostname of the host platform.
	PlatformHostname *string `pulumi:"platformHostname"`
	// The number of the host platform.
	PlatformNumber *int `pulumi:"platformNumber"`
	// `projectId`) The ID of the project the VPC is associated with.
	ProjectId *string `pulumi:"projectId"`
	// List of DNS records associated with the webhosting.
	Records []HostingRecord `pulumi:"records"`
	// `region`) The region of the Hosting.
	Region *string `pulumi:"region"`
	// The hosting status.
	Status *string `pulumi:"status"`
	// The tags associated with the hosting.
	Tags []string `pulumi:"tags"`
	// Date and time of hosting's last update (RFC 3339 format).
	UpdatedAt *string `pulumi:"updatedAt"`
	// The main hosting cPanel username.
	Username *string `pulumi:"username"`
}

type HostingState struct {
	// The URL to connect to cPanel Dashboard and to Webmail interface.
	CpanelUrls HostingCpanelUrlArrayInput
	// Date and time of hosting's creation (RFC 3339 format).
	CreatedAt pulumi.StringPtrInput
	// The DNS status of the hosting.
	DnsStatus pulumi.StringPtrInput
	// The domain name of the hosting.
	Domain pulumi.StringPtrInput
	// The contact email of the client for the hosting.
	Email pulumi.StringPtrInput
	// List of nameservers associated with the webhosting.
	NameServers HostingNameServerArrayInput
	// The ID of the selected offer for the hosting.
	OfferId pulumi.StringPtrInput
	// The name of the active offer.
	OfferName pulumi.StringPtrInput
	// The IDs of the selected options for the hosting.
	OptionIds pulumi.StringArrayInput
	// The active options of the hosting.
	Options HostingOptionArrayInput
	// (Deprecated) The organization ID the hosting is associated with.
	//
	// Deprecated: The organizationId field is deprecated and will be removed in the next major version.
	OrganizationId pulumi.StringPtrInput
	// The hostname of the host platform.
	PlatformHostname pulumi.StringPtrInput
	// The number of the host platform.
	PlatformNumber pulumi.IntPtrInput
	// `projectId`) The ID of the project the VPC is associated with.
	ProjectId pulumi.StringPtrInput
	// List of DNS records associated with the webhosting.
	Records HostingRecordArrayInput
	// `region`) The region of the Hosting.
	Region pulumi.StringPtrInput
	// The hosting status.
	Status pulumi.StringPtrInput
	// The tags associated with the hosting.
	Tags pulumi.StringArrayInput
	// Date and time of hosting's last update (RFC 3339 format).
	UpdatedAt pulumi.StringPtrInput
	// The main hosting cPanel username.
	Username pulumi.StringPtrInput
}

func (HostingState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostingState)(nil)).Elem()
}

type hostingArgs struct {
	// The domain name of the hosting.
	Domain string `pulumi:"domain"`
	// The contact email of the client for the hosting.
	Email string `pulumi:"email"`
	// The ID of the selected offer for the hosting.
	OfferId string `pulumi:"offerId"`
	// The IDs of the selected options for the hosting.
	OptionIds []string `pulumi:"optionIds"`
	// `projectId`) The ID of the project the VPC is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region of the Hosting.
	Region *string `pulumi:"region"`
	// The tags associated with the hosting.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a Hosting resource.
type HostingArgs struct {
	// The domain name of the hosting.
	Domain pulumi.StringInput
	// The contact email of the client for the hosting.
	Email pulumi.StringInput
	// The ID of the selected offer for the hosting.
	OfferId pulumi.StringInput
	// The IDs of the selected options for the hosting.
	OptionIds pulumi.StringArrayInput
	// `projectId`) The ID of the project the VPC is associated with.
	ProjectId pulumi.StringPtrInput
	// `region`) The region of the Hosting.
	Region pulumi.StringPtrInput
	// The tags associated with the hosting.
	Tags pulumi.StringArrayInput
}

func (HostingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostingArgs)(nil)).Elem()
}

type HostingInput interface {
	pulumi.Input

	ToHostingOutput() HostingOutput
	ToHostingOutputWithContext(ctx context.Context) HostingOutput
}

func (*Hosting) ElementType() reflect.Type {
	return reflect.TypeOf((**Hosting)(nil)).Elem()
}

func (i *Hosting) ToHostingOutput() HostingOutput {
	return i.ToHostingOutputWithContext(context.Background())
}

func (i *Hosting) ToHostingOutputWithContext(ctx context.Context) HostingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostingOutput)
}

// HostingArrayInput is an input type that accepts HostingArray and HostingArrayOutput values.
// You can construct a concrete instance of `HostingArrayInput` via:
//
//	HostingArray{ HostingArgs{...} }
type HostingArrayInput interface {
	pulumi.Input

	ToHostingArrayOutput() HostingArrayOutput
	ToHostingArrayOutputWithContext(context.Context) HostingArrayOutput
}

type HostingArray []HostingInput

func (HostingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hosting)(nil)).Elem()
}

func (i HostingArray) ToHostingArrayOutput() HostingArrayOutput {
	return i.ToHostingArrayOutputWithContext(context.Background())
}

func (i HostingArray) ToHostingArrayOutputWithContext(ctx context.Context) HostingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostingArrayOutput)
}

// HostingMapInput is an input type that accepts HostingMap and HostingMapOutput values.
// You can construct a concrete instance of `HostingMapInput` via:
//
//	HostingMap{ "key": HostingArgs{...} }
type HostingMapInput interface {
	pulumi.Input

	ToHostingMapOutput() HostingMapOutput
	ToHostingMapOutputWithContext(context.Context) HostingMapOutput
}

type HostingMap map[string]HostingInput

func (HostingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hosting)(nil)).Elem()
}

func (i HostingMap) ToHostingMapOutput() HostingMapOutput {
	return i.ToHostingMapOutputWithContext(context.Background())
}

func (i HostingMap) ToHostingMapOutputWithContext(ctx context.Context) HostingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostingMapOutput)
}

type HostingOutput struct{ *pulumi.OutputState }

func (HostingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hosting)(nil)).Elem()
}

func (o HostingOutput) ToHostingOutput() HostingOutput {
	return o
}

func (o HostingOutput) ToHostingOutputWithContext(ctx context.Context) HostingOutput {
	return o
}

// The URL to connect to cPanel Dashboard and to Webmail interface.
func (o HostingOutput) CpanelUrls() HostingCpanelUrlArrayOutput {
	return o.ApplyT(func(v *Hosting) HostingCpanelUrlArrayOutput { return v.CpanelUrls }).(HostingCpanelUrlArrayOutput)
}

// Date and time of hosting's creation (RFC 3339 format).
func (o HostingOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Hosting) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The DNS status of the hosting.
func (o HostingOutput) DnsStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Hosting) pulumi.StringOutput { return v.DnsStatus }).(pulumi.StringOutput)
}

// The domain name of the hosting.
func (o HostingOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *Hosting) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// The contact email of the client for the hosting.
func (o HostingOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *Hosting) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// List of nameservers associated with the webhosting.
func (o HostingOutput) NameServers() HostingNameServerArrayOutput {
	return o.ApplyT(func(v *Hosting) HostingNameServerArrayOutput { return v.NameServers }).(HostingNameServerArrayOutput)
}

// The ID of the selected offer for the hosting.
func (o HostingOutput) OfferId() pulumi.StringOutput {
	return o.ApplyT(func(v *Hosting) pulumi.StringOutput { return v.OfferId }).(pulumi.StringOutput)
}

// The name of the active offer.
func (o HostingOutput) OfferName() pulumi.StringOutput {
	return o.ApplyT(func(v *Hosting) pulumi.StringOutput { return v.OfferName }).(pulumi.StringOutput)
}

// The IDs of the selected options for the hosting.
func (o HostingOutput) OptionIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Hosting) pulumi.StringArrayOutput { return v.OptionIds }).(pulumi.StringArrayOutput)
}

// The active options of the hosting.
func (o HostingOutput) Options() HostingOptionArrayOutput {
	return o.ApplyT(func(v *Hosting) HostingOptionArrayOutput { return v.Options }).(HostingOptionArrayOutput)
}

// (Deprecated) The organization ID the hosting is associated with.
//
// Deprecated: The organizationId field is deprecated and will be removed in the next major version.
func (o HostingOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Hosting) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The hostname of the host platform.
func (o HostingOutput) PlatformHostname() pulumi.StringOutput {
	return o.ApplyT(func(v *Hosting) pulumi.StringOutput { return v.PlatformHostname }).(pulumi.StringOutput)
}

// The number of the host platform.
func (o HostingOutput) PlatformNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *Hosting) pulumi.IntOutput { return v.PlatformNumber }).(pulumi.IntOutput)
}

// `projectId`) The ID of the project the VPC is associated with.
func (o HostingOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Hosting) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// List of DNS records associated with the webhosting.
func (o HostingOutput) Records() HostingRecordArrayOutput {
	return o.ApplyT(func(v *Hosting) HostingRecordArrayOutput { return v.Records }).(HostingRecordArrayOutput)
}

// `region`) The region of the Hosting.
func (o HostingOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Hosting) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The hosting status.
func (o HostingOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Hosting) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The tags associated with the hosting.
func (o HostingOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Hosting) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Date and time of hosting's last update (RFC 3339 format).
func (o HostingOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Hosting) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The main hosting cPanel username.
func (o HostingOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *Hosting) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type HostingArrayOutput struct{ *pulumi.OutputState }

func (HostingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hosting)(nil)).Elem()
}

func (o HostingArrayOutput) ToHostingArrayOutput() HostingArrayOutput {
	return o
}

func (o HostingArrayOutput) ToHostingArrayOutputWithContext(ctx context.Context) HostingArrayOutput {
	return o
}

func (o HostingArrayOutput) Index(i pulumi.IntInput) HostingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Hosting {
		return vs[0].([]*Hosting)[vs[1].(int)]
	}).(HostingOutput)
}

type HostingMapOutput struct{ *pulumi.OutputState }

func (HostingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hosting)(nil)).Elem()
}

func (o HostingMapOutput) ToHostingMapOutput() HostingMapOutput {
	return o
}

func (o HostingMapOutput) ToHostingMapOutputWithContext(ctx context.Context) HostingMapOutput {
	return o
}

func (o HostingMapOutput) MapIndex(k pulumi.StringInput) HostingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Hosting {
		return vs[0].(map[string]*Hosting)[vs[1].(string)]
	}).(HostingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostingInput)(nil)).Elem(), &Hosting{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostingArrayInput)(nil)).Elem(), HostingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostingMapInput)(nil)).Elem(), HostingMap{})
	pulumi.RegisterOutputType(HostingOutput{})
	pulumi.RegisterOutputType(HostingArrayOutput{})
	pulumi.RegisterOutputType(HostingMapOutput{})
}
