// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway API Keys. For more information, refer to the [IAM API documentation](https://www.scaleway.com/en/developers/api/iam/#api-keys-3665ae).
//
// ## Example Usage
//
// ### With application
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/iam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iam.NewApplication(ctx, "ci_cd", &iam.ApplicationArgs{
//				Name: pulumi.String("My application"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewApiKey(ctx, "main", &iam.ApiKeyArgs{
//				ApplicationId: pulumi.Any(mainScalewayIamApplication.Id),
//				Description:   pulumi.String("a description"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With user
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/iam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := iam.NewUser(ctx, "main", &iam.UserArgs{
//				Email: pulumi.String("test@test.com"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewApiKey(ctx, "main", &iam.ApiKeyArgs{
//				UserId:      main.ID(),
//				Description: pulumi.String("a description"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With expiration
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-time/sdk/go/time"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/iam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			rotateAfterAYear, err := time.NewRotating(ctx, "rotate_after_a_year", &time.RotatingArgs{
//				RotationYears: 1,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewApiKey(ctx, "main", &iam.ApiKeyArgs{
//				ApplicationId: pulumi.Any(mainScalewayIamApplication.Id),
//				ExpiresAt:     rotateAfterAYear.RotationRfc3339,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Api keys can be imported using the `{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:iam/apiKey:ApiKey main 11111111111111111111
// ```
type ApiKey struct {
	pulumi.CustomResourceState

	// The access key of the IAM API key.
	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// ID of the application attached to the API key.
	ApplicationId pulumi.StringPtrOutput `pulumi:"applicationId"`
	// The date and time of the creation of the IAM API key.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The IP Address of the device which created the API key.
	CreationIp pulumi.StringOutput `pulumi:"creationIp"`
	// The default Project ID to use with Object Storage.
	DefaultProjectId pulumi.StringOutput `pulumi:"defaultProjectId"`
	// The description of the API key.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether the IAM API key is editable.
	Editable pulumi.BoolOutput `pulumi:"editable"`
	// The date and time of the expiration of the IAM API key. Please note that in case of any changes,
	// the resource will be recreated.
	ExpiresAt pulumi.StringPtrOutput `pulumi:"expiresAt"`
	// The secret Key of the IAM API key.
	SecretKey pulumi.StringOutput `pulumi:"secretKey"`
	// The date and time of the last update of the IAM API key.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// ID of the user attached to the API key.
	// > **Note** You must specify at least one: `applicationId` and/or `userId`.
	UserId pulumi.StringPtrOutput `pulumi:"userId"`
}

// NewApiKey registers a new resource with the given unique name, arguments, and options.
func NewApiKey(ctx *pulumi.Context,
	name string, args *ApiKeyArgs, opts ...pulumi.ResourceOption) (*ApiKey, error) {
	if args == nil {
		args = &ApiKeyArgs{}
	}

	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/iamApiKey:IamApiKey"),
		},
	})
	opts = append(opts, aliases)
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secretKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApiKey
	err := ctx.RegisterResource("scaleway:iam/apiKey:ApiKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiKey gets an existing ApiKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiKeyState, opts ...pulumi.ResourceOption) (*ApiKey, error) {
	var resource ApiKey
	err := ctx.ReadResource("scaleway:iam/apiKey:ApiKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiKey resources.
type apiKeyState struct {
	// The access key of the IAM API key.
	AccessKey *string `pulumi:"accessKey"`
	// ID of the application attached to the API key.
	ApplicationId *string `pulumi:"applicationId"`
	// The date and time of the creation of the IAM API key.
	CreatedAt *string `pulumi:"createdAt"`
	// The IP Address of the device which created the API key.
	CreationIp *string `pulumi:"creationIp"`
	// The default Project ID to use with Object Storage.
	DefaultProjectId *string `pulumi:"defaultProjectId"`
	// The description of the API key.
	Description *string `pulumi:"description"`
	// Whether the IAM API key is editable.
	Editable *bool `pulumi:"editable"`
	// The date and time of the expiration of the IAM API key. Please note that in case of any changes,
	// the resource will be recreated.
	ExpiresAt *string `pulumi:"expiresAt"`
	// The secret Key of the IAM API key.
	SecretKey *string `pulumi:"secretKey"`
	// The date and time of the last update of the IAM API key.
	UpdatedAt *string `pulumi:"updatedAt"`
	// ID of the user attached to the API key.
	// > **Note** You must specify at least one: `applicationId` and/or `userId`.
	UserId *string `pulumi:"userId"`
}

type ApiKeyState struct {
	// The access key of the IAM API key.
	AccessKey pulumi.StringPtrInput
	// ID of the application attached to the API key.
	ApplicationId pulumi.StringPtrInput
	// The date and time of the creation of the IAM API key.
	CreatedAt pulumi.StringPtrInput
	// The IP Address of the device which created the API key.
	CreationIp pulumi.StringPtrInput
	// The default Project ID to use with Object Storage.
	DefaultProjectId pulumi.StringPtrInput
	// The description of the API key.
	Description pulumi.StringPtrInput
	// Whether the IAM API key is editable.
	Editable pulumi.BoolPtrInput
	// The date and time of the expiration of the IAM API key. Please note that in case of any changes,
	// the resource will be recreated.
	ExpiresAt pulumi.StringPtrInput
	// The secret Key of the IAM API key.
	SecretKey pulumi.StringPtrInput
	// The date and time of the last update of the IAM API key.
	UpdatedAt pulumi.StringPtrInput
	// ID of the user attached to the API key.
	// > **Note** You must specify at least one: `applicationId` and/or `userId`.
	UserId pulumi.StringPtrInput
}

func (ApiKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiKeyState)(nil)).Elem()
}

type apiKeyArgs struct {
	// ID of the application attached to the API key.
	ApplicationId *string `pulumi:"applicationId"`
	// The default Project ID to use with Object Storage.
	DefaultProjectId *string `pulumi:"defaultProjectId"`
	// The description of the API key.
	Description *string `pulumi:"description"`
	// The date and time of the expiration of the IAM API key. Please note that in case of any changes,
	// the resource will be recreated.
	ExpiresAt *string `pulumi:"expiresAt"`
	// ID of the user attached to the API key.
	// > **Note** You must specify at least one: `applicationId` and/or `userId`.
	UserId *string `pulumi:"userId"`
}

// The set of arguments for constructing a ApiKey resource.
type ApiKeyArgs struct {
	// ID of the application attached to the API key.
	ApplicationId pulumi.StringPtrInput
	// The default Project ID to use with Object Storage.
	DefaultProjectId pulumi.StringPtrInput
	// The description of the API key.
	Description pulumi.StringPtrInput
	// The date and time of the expiration of the IAM API key. Please note that in case of any changes,
	// the resource will be recreated.
	ExpiresAt pulumi.StringPtrInput
	// ID of the user attached to the API key.
	// > **Note** You must specify at least one: `applicationId` and/or `userId`.
	UserId pulumi.StringPtrInput
}

func (ApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiKeyArgs)(nil)).Elem()
}

type ApiKeyInput interface {
	pulumi.Input

	ToApiKeyOutput() ApiKeyOutput
	ToApiKeyOutputWithContext(ctx context.Context) ApiKeyOutput
}

func (*ApiKey) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiKey)(nil)).Elem()
}

func (i *ApiKey) ToApiKeyOutput() ApiKeyOutput {
	return i.ToApiKeyOutputWithContext(context.Background())
}

func (i *ApiKey) ToApiKeyOutputWithContext(ctx context.Context) ApiKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyOutput)
}

// ApiKeyArrayInput is an input type that accepts ApiKeyArray and ApiKeyArrayOutput values.
// You can construct a concrete instance of `ApiKeyArrayInput` via:
//
//	ApiKeyArray{ ApiKeyArgs{...} }
type ApiKeyArrayInput interface {
	pulumi.Input

	ToApiKeyArrayOutput() ApiKeyArrayOutput
	ToApiKeyArrayOutputWithContext(context.Context) ApiKeyArrayOutput
}

type ApiKeyArray []ApiKeyInput

func (ApiKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiKey)(nil)).Elem()
}

func (i ApiKeyArray) ToApiKeyArrayOutput() ApiKeyArrayOutput {
	return i.ToApiKeyArrayOutputWithContext(context.Background())
}

func (i ApiKeyArray) ToApiKeyArrayOutputWithContext(ctx context.Context) ApiKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyArrayOutput)
}

// ApiKeyMapInput is an input type that accepts ApiKeyMap and ApiKeyMapOutput values.
// You can construct a concrete instance of `ApiKeyMapInput` via:
//
//	ApiKeyMap{ "key": ApiKeyArgs{...} }
type ApiKeyMapInput interface {
	pulumi.Input

	ToApiKeyMapOutput() ApiKeyMapOutput
	ToApiKeyMapOutputWithContext(context.Context) ApiKeyMapOutput
}

type ApiKeyMap map[string]ApiKeyInput

func (ApiKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiKey)(nil)).Elem()
}

func (i ApiKeyMap) ToApiKeyMapOutput() ApiKeyMapOutput {
	return i.ToApiKeyMapOutputWithContext(context.Background())
}

func (i ApiKeyMap) ToApiKeyMapOutputWithContext(ctx context.Context) ApiKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyMapOutput)
}

type ApiKeyOutput struct{ *pulumi.OutputState }

func (ApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiKey)(nil)).Elem()
}

func (o ApiKeyOutput) ToApiKeyOutput() ApiKeyOutput {
	return o
}

func (o ApiKeyOutput) ToApiKeyOutputWithContext(ctx context.Context) ApiKeyOutput {
	return o
}

// The access key of the IAM API key.
func (o ApiKeyOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringOutput { return v.AccessKey }).(pulumi.StringOutput)
}

// ID of the application attached to the API key.
func (o ApiKeyOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringPtrOutput { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// The date and time of the creation of the IAM API key.
func (o ApiKeyOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The IP Address of the device which created the API key.
func (o ApiKeyOutput) CreationIp() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringOutput { return v.CreationIp }).(pulumi.StringOutput)
}

// The default Project ID to use with Object Storage.
func (o ApiKeyOutput) DefaultProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringOutput { return v.DefaultProjectId }).(pulumi.StringOutput)
}

// The description of the API key.
func (o ApiKeyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the IAM API key is editable.
func (o ApiKeyOutput) Editable() pulumi.BoolOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.BoolOutput { return v.Editable }).(pulumi.BoolOutput)
}

// The date and time of the expiration of the IAM API key. Please note that in case of any changes,
// the resource will be recreated.
func (o ApiKeyOutput) ExpiresAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringPtrOutput { return v.ExpiresAt }).(pulumi.StringPtrOutput)
}

// The secret Key of the IAM API key.
func (o ApiKeyOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringOutput { return v.SecretKey }).(pulumi.StringOutput)
}

// The date and time of the last update of the IAM API key.
func (o ApiKeyOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// ID of the user attached to the API key.
// > **Note** You must specify at least one: `applicationId` and/or `userId`.
func (o ApiKeyOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringPtrOutput { return v.UserId }).(pulumi.StringPtrOutput)
}

type ApiKeyArrayOutput struct{ *pulumi.OutputState }

func (ApiKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiKey)(nil)).Elem()
}

func (o ApiKeyArrayOutput) ToApiKeyArrayOutput() ApiKeyArrayOutput {
	return o
}

func (o ApiKeyArrayOutput) ToApiKeyArrayOutputWithContext(ctx context.Context) ApiKeyArrayOutput {
	return o
}

func (o ApiKeyArrayOutput) Index(i pulumi.IntInput) ApiKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApiKey {
		return vs[0].([]*ApiKey)[vs[1].(int)]
	}).(ApiKeyOutput)
}

type ApiKeyMapOutput struct{ *pulumi.OutputState }

func (ApiKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiKey)(nil)).Elem()
}

func (o ApiKeyMapOutput) ToApiKeyMapOutput() ApiKeyMapOutput {
	return o
}

func (o ApiKeyMapOutput) ToApiKeyMapOutputWithContext(ctx context.Context) ApiKeyMapOutput {
	return o
}

func (o ApiKeyMapOutput) MapIndex(k pulumi.StringInput) ApiKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApiKey {
		return vs[0].(map[string]*ApiKey)[vs[1].(string)]
	}).(ApiKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyInput)(nil)).Elem(), &ApiKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyArrayInput)(nil)).Elem(), ApiKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyMapInput)(nil)).Elem(), ApiKeyMap{})
	pulumi.RegisterOutputType(ApiKeyOutput{})
	pulumi.RegisterOutputType(ApiKeyArrayOutput{})
	pulumi.RegisterOutputType(ApiKeyMapOutput{})
}
