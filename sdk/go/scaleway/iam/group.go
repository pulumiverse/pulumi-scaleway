// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway IAM Groups.
// For more information refer to the [IAM API documentation](https://www.scaleway.com/en/developers/api/iam/#groups-f592eb).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/iam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iam.NewGroup(ctx, "basic", &iam.GroupArgs{
//				Name:           pulumi.String("iam_group_basic"),
//				Description:    pulumi.String("basic description"),
//				ApplicationIds: pulumi.StringArray{},
//				UserIds:        pulumi.StringArray{},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With applications
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/iam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			app, err := iam.NewApplication(ctx, "app", nil)
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewGroup(ctx, "with_app", &iam.GroupArgs{
//				Name: pulumi.String("iam_group_with_app"),
//				ApplicationIds: pulumi.StringArray{
//					app.ID(),
//				},
//				UserIds: pulumi.StringArray{},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IAM groups can be imported using the `{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:iam/group:Group basic 11111111-1111-1111-1111-111111111111
// ```
type Group struct {
	pulumi.CustomResourceState

	// The list of IDs of the applications attached to the group.
	ApplicationIds pulumi.StringArrayOutput `pulumi:"applicationIds"`
	// The date and time of the creation of the group
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the IAM group.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Manage membership externally. This make the resource ignore userIds and application_ids. Should be used when using iam_group_membership
	ExternalMembership pulumi.BoolPtrOutput `pulumi:"externalMembership"`
	// The name of the IAM group.
	Name pulumi.StringOutput `pulumi:"name"`
	// `organizationId`) The ID of the organization the group is associated with.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The tags associated with the group.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The date and time of the last update of the group
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The list of IDs of the users attached to the group.
	UserIds pulumi.StringArrayOutput `pulumi:"userIds"`
}

// NewGroup registers a new resource with the given unique name, arguments, and options.
func NewGroup(ctx *pulumi.Context,
	name string, args *GroupArgs, opts ...pulumi.ResourceOption) (*Group, error) {
	if args == nil {
		args = &GroupArgs{}
	}

	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/iamGroup:IamGroup"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Group
	err := ctx.RegisterResource("scaleway:iam/group:Group", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroup gets an existing Group resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupState, opts ...pulumi.ResourceOption) (*Group, error) {
	var resource Group
	err := ctx.ReadResource("scaleway:iam/group:Group", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Group resources.
type groupState struct {
	// The list of IDs of the applications attached to the group.
	ApplicationIds []string `pulumi:"applicationIds"`
	// The date and time of the creation of the group
	CreatedAt *string `pulumi:"createdAt"`
	// The description of the IAM group.
	Description *string `pulumi:"description"`
	// Manage membership externally. This make the resource ignore userIds and application_ids. Should be used when using iam_group_membership
	ExternalMembership *bool `pulumi:"externalMembership"`
	// The name of the IAM group.
	Name *string `pulumi:"name"`
	// `organizationId`) The ID of the organization the group is associated with.
	OrganizationId *string `pulumi:"organizationId"`
	// The tags associated with the group.
	Tags []string `pulumi:"tags"`
	// The date and time of the last update of the group
	UpdatedAt *string `pulumi:"updatedAt"`
	// The list of IDs of the users attached to the group.
	UserIds []string `pulumi:"userIds"`
}

type GroupState struct {
	// The list of IDs of the applications attached to the group.
	ApplicationIds pulumi.StringArrayInput
	// The date and time of the creation of the group
	CreatedAt pulumi.StringPtrInput
	// The description of the IAM group.
	Description pulumi.StringPtrInput
	// Manage membership externally. This make the resource ignore userIds and application_ids. Should be used when using iam_group_membership
	ExternalMembership pulumi.BoolPtrInput
	// The name of the IAM group.
	Name pulumi.StringPtrInput
	// `organizationId`) The ID of the organization the group is associated with.
	OrganizationId pulumi.StringPtrInput
	// The tags associated with the group.
	Tags pulumi.StringArrayInput
	// The date and time of the last update of the group
	UpdatedAt pulumi.StringPtrInput
	// The list of IDs of the users attached to the group.
	UserIds pulumi.StringArrayInput
}

func (GroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupState)(nil)).Elem()
}

type groupArgs struct {
	// The list of IDs of the applications attached to the group.
	ApplicationIds []string `pulumi:"applicationIds"`
	// The description of the IAM group.
	Description *string `pulumi:"description"`
	// Manage membership externally. This make the resource ignore userIds and application_ids. Should be used when using iam_group_membership
	ExternalMembership *bool `pulumi:"externalMembership"`
	// The name of the IAM group.
	Name *string `pulumi:"name"`
	// `organizationId`) The ID of the organization the group is associated with.
	OrganizationId *string `pulumi:"organizationId"`
	// The tags associated with the group.
	Tags []string `pulumi:"tags"`
	// The list of IDs of the users attached to the group.
	UserIds []string `pulumi:"userIds"`
}

// The set of arguments for constructing a Group resource.
type GroupArgs struct {
	// The list of IDs of the applications attached to the group.
	ApplicationIds pulumi.StringArrayInput
	// The description of the IAM group.
	Description pulumi.StringPtrInput
	// Manage membership externally. This make the resource ignore userIds and application_ids. Should be used when using iam_group_membership
	ExternalMembership pulumi.BoolPtrInput
	// The name of the IAM group.
	Name pulumi.StringPtrInput
	// `organizationId`) The ID of the organization the group is associated with.
	OrganizationId pulumi.StringPtrInput
	// The tags associated with the group.
	Tags pulumi.StringArrayInput
	// The list of IDs of the users attached to the group.
	UserIds pulumi.StringArrayInput
}

func (GroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupArgs)(nil)).Elem()
}

type GroupInput interface {
	pulumi.Input

	ToGroupOutput() GroupOutput
	ToGroupOutputWithContext(ctx context.Context) GroupOutput
}

func (*Group) ElementType() reflect.Type {
	return reflect.TypeOf((**Group)(nil)).Elem()
}

func (i *Group) ToGroupOutput() GroupOutput {
	return i.ToGroupOutputWithContext(context.Background())
}

func (i *Group) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupOutput)
}

// GroupArrayInput is an input type that accepts GroupArray and GroupArrayOutput values.
// You can construct a concrete instance of `GroupArrayInput` via:
//
//	GroupArray{ GroupArgs{...} }
type GroupArrayInput interface {
	pulumi.Input

	ToGroupArrayOutput() GroupArrayOutput
	ToGroupArrayOutputWithContext(context.Context) GroupArrayOutput
}

type GroupArray []GroupInput

func (GroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Group)(nil)).Elem()
}

func (i GroupArray) ToGroupArrayOutput() GroupArrayOutput {
	return i.ToGroupArrayOutputWithContext(context.Background())
}

func (i GroupArray) ToGroupArrayOutputWithContext(ctx context.Context) GroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupArrayOutput)
}

// GroupMapInput is an input type that accepts GroupMap and GroupMapOutput values.
// You can construct a concrete instance of `GroupMapInput` via:
//
//	GroupMap{ "key": GroupArgs{...} }
type GroupMapInput interface {
	pulumi.Input

	ToGroupMapOutput() GroupMapOutput
	ToGroupMapOutputWithContext(context.Context) GroupMapOutput
}

type GroupMap map[string]GroupInput

func (GroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Group)(nil)).Elem()
}

func (i GroupMap) ToGroupMapOutput() GroupMapOutput {
	return i.ToGroupMapOutputWithContext(context.Background())
}

func (i GroupMap) ToGroupMapOutputWithContext(ctx context.Context) GroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMapOutput)
}

type GroupOutput struct{ *pulumi.OutputState }

func (GroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Group)(nil)).Elem()
}

func (o GroupOutput) ToGroupOutput() GroupOutput {
	return o
}

func (o GroupOutput) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return o
}

// The list of IDs of the applications attached to the group.
func (o GroupOutput) ApplicationIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Group) pulumi.StringArrayOutput { return v.ApplicationIds }).(pulumi.StringArrayOutput)
}

// The date and time of the creation of the group
func (o GroupOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the IAM group.
func (o GroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Manage membership externally. This make the resource ignore userIds and application_ids. Should be used when using iam_group_membership
func (o GroupOutput) ExternalMembership() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.ExternalMembership }).(pulumi.BoolPtrOutput)
}

// The name of the IAM group.
func (o GroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// `organizationId`) The ID of the organization the group is associated with.
func (o GroupOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The tags associated with the group.
func (o GroupOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Group) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The date and time of the last update of the group
func (o GroupOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The list of IDs of the users attached to the group.
func (o GroupOutput) UserIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Group) pulumi.StringArrayOutput { return v.UserIds }).(pulumi.StringArrayOutput)
}

type GroupArrayOutput struct{ *pulumi.OutputState }

func (GroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Group)(nil)).Elem()
}

func (o GroupArrayOutput) ToGroupArrayOutput() GroupArrayOutput {
	return o
}

func (o GroupArrayOutput) ToGroupArrayOutputWithContext(ctx context.Context) GroupArrayOutput {
	return o
}

func (o GroupArrayOutput) Index(i pulumi.IntInput) GroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Group {
		return vs[0].([]*Group)[vs[1].(int)]
	}).(GroupOutput)
}

type GroupMapOutput struct{ *pulumi.OutputState }

func (GroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Group)(nil)).Elem()
}

func (o GroupMapOutput) ToGroupMapOutput() GroupMapOutput {
	return o
}

func (o GroupMapOutput) ToGroupMapOutputWithContext(ctx context.Context) GroupMapOutput {
	return o
}

func (o GroupMapOutput) MapIndex(k pulumi.StringInput) GroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Group {
		return vs[0].(map[string]*Group)[vs[1].(string)]
	}).(GroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupInput)(nil)).Elem(), &Group{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupArrayInput)(nil)).Elem(), GroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMapInput)(nil)).Elem(), GroupMap{})
	pulumi.RegisterOutputType(GroupOutput{})
	pulumi.RegisterOutputType(GroupArrayOutput{})
	pulumi.RegisterOutputType(GroupMapOutput{})
}
