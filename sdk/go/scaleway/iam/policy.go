// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway IAM Policies. For more information refer to the [IAM API documentation](https://www.scaleway.com/en/developers/api/iam/#path-policies-create-a-new-policy).
//
// > You can find a detailed list of all permission sets available at Scaleway in the permission sets [reference page](https://www.scaleway.com/en/docs/iam/reference-content/permission-sets/).
//
// ## Example Usage
//
// ### Create a policy for an organization's project
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/account"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/iam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := account.LookupProject(ctx, &account.LookupProjectArgs{
//				Name: pulumi.StringRef("default"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			app, err := iam.NewApplication(ctx, "app", &iam.ApplicationArgs{
//				Name: pulumi.String("my app"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewPolicy(ctx, "object_read_only", &iam.PolicyArgs{
//				Name:          pulumi.String("my policy"),
//				Description:   pulumi.String("gives app readonly access to object storage in project"),
//				ApplicationId: app.ID(),
//				Rules: iam.PolicyRuleArray{
//					&iam.PolicyRuleArgs{
//						ProjectIds: pulumi.StringArray{
//							pulumi.String(_default.Id),
//						},
//						PermissionSetNames: pulumi.StringArray{
//							pulumi.String("ObjectStorageReadOnly"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a policy for all current and future projects in an organization
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/iam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			app, err := iam.NewApplication(ctx, "app", &iam.ApplicationArgs{
//				Name: pulumi.String("my app"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewPolicy(ctx, "object_read_only", &iam.PolicyArgs{
//				Name:          pulumi.String("my policy"),
//				Description:   pulumi.String("gives app readonly access to object storage in project"),
//				ApplicationId: app.ID(),
//				Rules: iam.PolicyRuleArray{
//					&iam.PolicyRuleArgs{
//						OrganizationId: app.OrganizationId,
//						PermissionSetNames: pulumi.StringArray{
//							pulumi.String("ObjectStorageReadOnly"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a policy with a particular condition
//
// IAM policy rule can use a condition to be applied.
// The following variables are available:
//
// - `request.ip`
// - `request.user_agent`
// - `request.time`
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/iam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iam.NewPolicy(ctx, "main", &iam.PolicyArgs{
//				Name:        pulumi.String("tf_tests_policy_condition"),
//				NoPrincipal: pulumi.Bool(true),
//				Rules: iam.PolicyRuleArray{
//					&iam.PolicyRuleArgs{
//						OrganizationId: pulumi.String("%s"),
//						PermissionSetNames: pulumi.StringArray{
//							pulumi.String("AllProductsFullAccess"),
//						},
//						Condition: pulumi.String("request.user_agent == 'My User Agent'"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Policies can be imported using the `{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:iam/policy:Policy main 11111111-1111-1111-1111-111111111111
// ```
type Policy struct {
	pulumi.CustomResourceState

	// ID of the application the policy will be linked to
	ApplicationId pulumi.StringPtrOutput `pulumi:"applicationId"`
	// The date and time of the creation of the policy.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the IAM policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether the policy is editable.
	Editable pulumi.BoolOutput `pulumi:"editable"`
	// ID of the group the policy will be linked to
	GroupId pulumi.StringPtrOutput `pulumi:"groupId"`
	// The name of the IAM policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// If the policy doesn't apply to a principal.
	//
	// > **Important** Only one of `userId`, `groupId`, `applicationId` and `noPrincipal` may be set.
	NoPrincipal pulumi.BoolPtrOutput `pulumi:"noPrincipal"`
	// `organizationId`) The ID of the organization the policy is associated with.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// List of rules in the policy.
	Rules PolicyRuleArrayOutput `pulumi:"rules"`
	// The tags associated with the IAM policy.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The date and time of the last update of the policy.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// ID of the user the policy will be linked to
	UserId pulumi.StringPtrOutput `pulumi:"userId"`
}

// NewPolicy registers a new resource with the given unique name, arguments, and options.
func NewPolicy(ctx *pulumi.Context,
	name string, args *PolicyArgs, opts ...pulumi.ResourceOption) (*Policy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/iamPolicy:IamPolicy"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Policy
	err := ctx.RegisterResource("scaleway:iam/policy:Policy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicy gets an existing Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyState, opts ...pulumi.ResourceOption) (*Policy, error) {
	var resource Policy
	err := ctx.ReadResource("scaleway:iam/policy:Policy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Policy resources.
type policyState struct {
	// ID of the application the policy will be linked to
	ApplicationId *string `pulumi:"applicationId"`
	// The date and time of the creation of the policy.
	CreatedAt *string `pulumi:"createdAt"`
	// The description of the IAM policy.
	Description *string `pulumi:"description"`
	// Whether the policy is editable.
	Editable *bool `pulumi:"editable"`
	// ID of the group the policy will be linked to
	GroupId *string `pulumi:"groupId"`
	// The name of the IAM policy.
	Name *string `pulumi:"name"`
	// If the policy doesn't apply to a principal.
	//
	// > **Important** Only one of `userId`, `groupId`, `applicationId` and `noPrincipal` may be set.
	NoPrincipal *bool `pulumi:"noPrincipal"`
	// `organizationId`) The ID of the organization the policy is associated with.
	OrganizationId *string `pulumi:"organizationId"`
	// List of rules in the policy.
	Rules []PolicyRule `pulumi:"rules"`
	// The tags associated with the IAM policy.
	Tags []string `pulumi:"tags"`
	// The date and time of the last update of the policy.
	UpdatedAt *string `pulumi:"updatedAt"`
	// ID of the user the policy will be linked to
	UserId *string `pulumi:"userId"`
}

type PolicyState struct {
	// ID of the application the policy will be linked to
	ApplicationId pulumi.StringPtrInput
	// The date and time of the creation of the policy.
	CreatedAt pulumi.StringPtrInput
	// The description of the IAM policy.
	Description pulumi.StringPtrInput
	// Whether the policy is editable.
	Editable pulumi.BoolPtrInput
	// ID of the group the policy will be linked to
	GroupId pulumi.StringPtrInput
	// The name of the IAM policy.
	Name pulumi.StringPtrInput
	// If the policy doesn't apply to a principal.
	//
	// > **Important** Only one of `userId`, `groupId`, `applicationId` and `noPrincipal` may be set.
	NoPrincipal pulumi.BoolPtrInput
	// `organizationId`) The ID of the organization the policy is associated with.
	OrganizationId pulumi.StringPtrInput
	// List of rules in the policy.
	Rules PolicyRuleArrayInput
	// The tags associated with the IAM policy.
	Tags pulumi.StringArrayInput
	// The date and time of the last update of the policy.
	UpdatedAt pulumi.StringPtrInput
	// ID of the user the policy will be linked to
	UserId pulumi.StringPtrInput
}

func (PolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyState)(nil)).Elem()
}

type policyArgs struct {
	// ID of the application the policy will be linked to
	ApplicationId *string `pulumi:"applicationId"`
	// The description of the IAM policy.
	Description *string `pulumi:"description"`
	// ID of the group the policy will be linked to
	GroupId *string `pulumi:"groupId"`
	// The name of the IAM policy.
	Name *string `pulumi:"name"`
	// If the policy doesn't apply to a principal.
	//
	// > **Important** Only one of `userId`, `groupId`, `applicationId` and `noPrincipal` may be set.
	NoPrincipal *bool `pulumi:"noPrincipal"`
	// `organizationId`) The ID of the organization the policy is associated with.
	OrganizationId *string `pulumi:"organizationId"`
	// List of rules in the policy.
	Rules []PolicyRule `pulumi:"rules"`
	// The tags associated with the IAM policy.
	Tags []string `pulumi:"tags"`
	// ID of the user the policy will be linked to
	UserId *string `pulumi:"userId"`
}

// The set of arguments for constructing a Policy resource.
type PolicyArgs struct {
	// ID of the application the policy will be linked to
	ApplicationId pulumi.StringPtrInput
	// The description of the IAM policy.
	Description pulumi.StringPtrInput
	// ID of the group the policy will be linked to
	GroupId pulumi.StringPtrInput
	// The name of the IAM policy.
	Name pulumi.StringPtrInput
	// If the policy doesn't apply to a principal.
	//
	// > **Important** Only one of `userId`, `groupId`, `applicationId` and `noPrincipal` may be set.
	NoPrincipal pulumi.BoolPtrInput
	// `organizationId`) The ID of the organization the policy is associated with.
	OrganizationId pulumi.StringPtrInput
	// List of rules in the policy.
	Rules PolicyRuleArrayInput
	// The tags associated with the IAM policy.
	Tags pulumi.StringArrayInput
	// ID of the user the policy will be linked to
	UserId pulumi.StringPtrInput
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyArgs)(nil)).Elem()
}

type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(ctx context.Context) PolicyOutput
}

func (*Policy) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *Policy) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i *Policy) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

// PolicyArrayInput is an input type that accepts PolicyArray and PolicyArrayOutput values.
// You can construct a concrete instance of `PolicyArrayInput` via:
//
//	PolicyArray{ PolicyArgs{...} }
type PolicyArrayInput interface {
	pulumi.Input

	ToPolicyArrayOutput() PolicyArrayOutput
	ToPolicyArrayOutputWithContext(context.Context) PolicyArrayOutput
}

type PolicyArray []PolicyInput

func (PolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (i PolicyArray) ToPolicyArrayOutput() PolicyArrayOutput {
	return i.ToPolicyArrayOutputWithContext(context.Background())
}

func (i PolicyArray) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyArrayOutput)
}

// PolicyMapInput is an input type that accepts PolicyMap and PolicyMapOutput values.
// You can construct a concrete instance of `PolicyMapInput` via:
//
//	PolicyMap{ "key": PolicyArgs{...} }
type PolicyMapInput interface {
	pulumi.Input

	ToPolicyMapOutput() PolicyMapOutput
	ToPolicyMapOutputWithContext(context.Context) PolicyMapOutput
}

type PolicyMap map[string]PolicyInput

func (PolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (i PolicyMap) ToPolicyMapOutput() PolicyMapOutput {
	return i.ToPolicyMapOutputWithContext(context.Background())
}

func (i PolicyMap) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMapOutput)
}

type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

// ID of the application the policy will be linked to
func (o PolicyOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// The date and time of the creation of the policy.
func (o PolicyOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the IAM policy.
func (o PolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the policy is editable.
func (o PolicyOutput) Editable() pulumi.BoolOutput {
	return o.ApplyT(func(v *Policy) pulumi.BoolOutput { return v.Editable }).(pulumi.BoolOutput)
}

// ID of the group the policy will be linked to
func (o PolicyOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.GroupId }).(pulumi.StringPtrOutput)
}

// The name of the IAM policy.
func (o PolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// If the policy doesn't apply to a principal.
//
// > **Important** Only one of `userId`, `groupId`, `applicationId` and `noPrincipal` may be set.
func (o PolicyOutput) NoPrincipal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.BoolPtrOutput { return v.NoPrincipal }).(pulumi.BoolPtrOutput)
}

// `organizationId`) The ID of the organization the policy is associated with.
func (o PolicyOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// List of rules in the policy.
func (o PolicyOutput) Rules() PolicyRuleArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyRuleArrayOutput { return v.Rules }).(PolicyRuleArrayOutput)
}

// The tags associated with the IAM policy.
func (o PolicyOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The date and time of the last update of the policy.
func (o PolicyOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// ID of the user the policy will be linked to
func (o PolicyOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.UserId }).(pulumi.StringPtrOutput)
}

type PolicyArrayOutput struct{ *pulumi.OutputState }

func (PolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (o PolicyArrayOutput) ToPolicyArrayOutput() PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) Index(i pulumi.IntInput) PolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Policy {
		return vs[0].([]*Policy)[vs[1].(int)]
	}).(PolicyOutput)
}

type PolicyMapOutput struct{ *pulumi.OutputState }

func (PolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (o PolicyMapOutput) ToPolicyMapOutput() PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) MapIndex(k pulumi.StringInput) PolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Policy {
		return vs[0].(map[string]*Policy)[vs[1].(string)]
	}).(PolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyInput)(nil)).Elem(), &Policy{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyArrayInput)(nil)).Elem(), PolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyMapInput)(nil)).Elem(), PolicyMap{})
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyArrayOutput{})
	pulumi.RegisterOutputType(PolicyMapOutput{})
}
