// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

var _ = internal.GetEnvOrDefault

type PolicyRule struct {
	// The condition of the rule.
	//
	// **_TIP:_** You can use the Scaleway CLI to list the permissions details. e.g:
	Condition *string `pulumi:"condition"`
	// ID of organization scoped to the rule, this can be used to create a rule for all projects in an organization.
	OrganizationId *string `pulumi:"organizationId"`
	// Names of permission sets bind to the rule.
	PermissionSetNames []string `pulumi:"permissionSetNames"`
	// List of project IDs scoped to the rule.
	//
	// > **Important** One `organizationId` or `projectIds` must be set per rule.
	ProjectIds []string `pulumi:"projectIds"`
}

// PolicyRuleInput is an input type that accepts PolicyRuleArgs and PolicyRuleOutput values.
// You can construct a concrete instance of `PolicyRuleInput` via:
//
//	PolicyRuleArgs{...}
type PolicyRuleInput interface {
	pulumi.Input

	ToPolicyRuleOutput() PolicyRuleOutput
	ToPolicyRuleOutputWithContext(context.Context) PolicyRuleOutput
}

type PolicyRuleArgs struct {
	// The condition of the rule.
	//
	// **_TIP:_** You can use the Scaleway CLI to list the permissions details. e.g:
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// ID of organization scoped to the rule, this can be used to create a rule for all projects in an organization.
	OrganizationId pulumi.StringPtrInput `pulumi:"organizationId"`
	// Names of permission sets bind to the rule.
	PermissionSetNames pulumi.StringArrayInput `pulumi:"permissionSetNames"`
	// List of project IDs scoped to the rule.
	//
	// > **Important** One `organizationId` or `projectIds` must be set per rule.
	ProjectIds pulumi.StringArrayInput `pulumi:"projectIds"`
}

func (PolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRule)(nil)).Elem()
}

func (i PolicyRuleArgs) ToPolicyRuleOutput() PolicyRuleOutput {
	return i.ToPolicyRuleOutputWithContext(context.Background())
}

func (i PolicyRuleArgs) ToPolicyRuleOutputWithContext(ctx context.Context) PolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleOutput)
}

// PolicyRuleArrayInput is an input type that accepts PolicyRuleArray and PolicyRuleArrayOutput values.
// You can construct a concrete instance of `PolicyRuleArrayInput` via:
//
//	PolicyRuleArray{ PolicyRuleArgs{...} }
type PolicyRuleArrayInput interface {
	pulumi.Input

	ToPolicyRuleArrayOutput() PolicyRuleArrayOutput
	ToPolicyRuleArrayOutputWithContext(context.Context) PolicyRuleArrayOutput
}

type PolicyRuleArray []PolicyRuleInput

func (PolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyRule)(nil)).Elem()
}

func (i PolicyRuleArray) ToPolicyRuleArrayOutput() PolicyRuleArrayOutput {
	return i.ToPolicyRuleArrayOutputWithContext(context.Background())
}

func (i PolicyRuleArray) ToPolicyRuleArrayOutputWithContext(ctx context.Context) PolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleArrayOutput)
}

type PolicyRuleOutput struct{ *pulumi.OutputState }

func (PolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRule)(nil)).Elem()
}

func (o PolicyRuleOutput) ToPolicyRuleOutput() PolicyRuleOutput {
	return o
}

func (o PolicyRuleOutput) ToPolicyRuleOutputWithContext(ctx context.Context) PolicyRuleOutput {
	return o
}

// The condition of the rule.
//
// **_TIP:_** You can use the Scaleway CLI to list the permissions details. e.g:
func (o PolicyRuleOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRule) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// ID of organization scoped to the rule, this can be used to create a rule for all projects in an organization.
func (o PolicyRuleOutput) OrganizationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRule) *string { return v.OrganizationId }).(pulumi.StringPtrOutput)
}

// Names of permission sets bind to the rule.
func (o PolicyRuleOutput) PermissionSetNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyRule) []string { return v.PermissionSetNames }).(pulumi.StringArrayOutput)
}

// List of project IDs scoped to the rule.
//
// > **Important** One `organizationId` or `projectIds` must be set per rule.
func (o PolicyRuleOutput) ProjectIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyRule) []string { return v.ProjectIds }).(pulumi.StringArrayOutput)
}

type PolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (PolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyRule)(nil)).Elem()
}

func (o PolicyRuleArrayOutput) ToPolicyRuleArrayOutput() PolicyRuleArrayOutput {
	return o
}

func (o PolicyRuleArrayOutput) ToPolicyRuleArrayOutputWithContext(ctx context.Context) PolicyRuleArrayOutput {
	return o
}

func (o PolicyRuleArrayOutput) Index(i pulumi.IntInput) PolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyRule {
		return vs[0].([]PolicyRule)[vs[1].(int)]
	}).(PolicyRuleOutput)
}

type GetPolicyRule struct {
	// The condition of the rule.
	Condition string `pulumi:"condition"`
	// ID of organization scoped to the rule.
	OrganizationId string `pulumi:"organizationId"`
	// Names of permission sets bound to the rule.
	PermissionSetNames []string `pulumi:"permissionSetNames"`
	// List of project IDs scoped to the rule.
	ProjectIds []string `pulumi:"projectIds"`
}

// GetPolicyRuleInput is an input type that accepts GetPolicyRuleArgs and GetPolicyRuleOutput values.
// You can construct a concrete instance of `GetPolicyRuleInput` via:
//
//	GetPolicyRuleArgs{...}
type GetPolicyRuleInput interface {
	pulumi.Input

	ToGetPolicyRuleOutput() GetPolicyRuleOutput
	ToGetPolicyRuleOutputWithContext(context.Context) GetPolicyRuleOutput
}

type GetPolicyRuleArgs struct {
	// The condition of the rule.
	Condition pulumi.StringInput `pulumi:"condition"`
	// ID of organization scoped to the rule.
	OrganizationId pulumi.StringInput `pulumi:"organizationId"`
	// Names of permission sets bound to the rule.
	PermissionSetNames pulumi.StringArrayInput `pulumi:"permissionSetNames"`
	// List of project IDs scoped to the rule.
	ProjectIds pulumi.StringArrayInput `pulumi:"projectIds"`
}

func (GetPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyRule)(nil)).Elem()
}

func (i GetPolicyRuleArgs) ToGetPolicyRuleOutput() GetPolicyRuleOutput {
	return i.ToGetPolicyRuleOutputWithContext(context.Background())
}

func (i GetPolicyRuleArgs) ToGetPolicyRuleOutputWithContext(ctx context.Context) GetPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyRuleOutput)
}

// GetPolicyRuleArrayInput is an input type that accepts GetPolicyRuleArray and GetPolicyRuleArrayOutput values.
// You can construct a concrete instance of `GetPolicyRuleArrayInput` via:
//
//	GetPolicyRuleArray{ GetPolicyRuleArgs{...} }
type GetPolicyRuleArrayInput interface {
	pulumi.Input

	ToGetPolicyRuleArrayOutput() GetPolicyRuleArrayOutput
	ToGetPolicyRuleArrayOutputWithContext(context.Context) GetPolicyRuleArrayOutput
}

type GetPolicyRuleArray []GetPolicyRuleInput

func (GetPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyRule)(nil)).Elem()
}

func (i GetPolicyRuleArray) ToGetPolicyRuleArrayOutput() GetPolicyRuleArrayOutput {
	return i.ToGetPolicyRuleArrayOutputWithContext(context.Background())
}

func (i GetPolicyRuleArray) ToGetPolicyRuleArrayOutputWithContext(ctx context.Context) GetPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyRuleArrayOutput)
}

type GetPolicyRuleOutput struct{ *pulumi.OutputState }

func (GetPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyRule)(nil)).Elem()
}

func (o GetPolicyRuleOutput) ToGetPolicyRuleOutput() GetPolicyRuleOutput {
	return o
}

func (o GetPolicyRuleOutput) ToGetPolicyRuleOutputWithContext(ctx context.Context) GetPolicyRuleOutput {
	return o
}

// The condition of the rule.
func (o GetPolicyRuleOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRule) string { return v.Condition }).(pulumi.StringOutput)
}

// ID of organization scoped to the rule.
func (o GetPolicyRuleOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRule) string { return v.OrganizationId }).(pulumi.StringOutput)
}

// Names of permission sets bound to the rule.
func (o GetPolicyRuleOutput) PermissionSetNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPolicyRule) []string { return v.PermissionSetNames }).(pulumi.StringArrayOutput)
}

// List of project IDs scoped to the rule.
func (o GetPolicyRuleOutput) ProjectIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPolicyRule) []string { return v.ProjectIds }).(pulumi.StringArrayOutput)
}

type GetPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (GetPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyRule)(nil)).Elem()
}

func (o GetPolicyRuleArrayOutput) ToGetPolicyRuleArrayOutput() GetPolicyRuleArrayOutput {
	return o
}

func (o GetPolicyRuleArrayOutput) ToGetPolicyRuleArrayOutputWithContext(ctx context.Context) GetPolicyRuleArrayOutput {
	return o
}

func (o GetPolicyRuleArrayOutput) Index(i pulumi.IntInput) GetPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPolicyRule {
		return vs[0].([]GetPolicyRule)[vs[1].(int)]
	}).(GetPolicyRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRuleInput)(nil)).Elem(), PolicyRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRuleArrayInput)(nil)).Elem(), PolicyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyRuleInput)(nil)).Elem(), GetPolicyRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyRuleArrayInput)(nil)).Elem(), GetPolicyRuleArray{})
	pulumi.RegisterOutputType(PolicyRuleOutput{})
	pulumi.RegisterOutputType(PolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(GetPolicyRuleOutput{})
	pulumi.RegisterOutputType(GetPolicyRuleArrayOutput{})
}
