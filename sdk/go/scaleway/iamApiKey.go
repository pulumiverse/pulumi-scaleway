// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway API Keys. For more information, refer to the [IAM API documentation](https://www.scaleway.com/en/developers/api/iam/#api-keys-3665ae).
//
// ## Example Usage
//
// ### With application
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewIamApplication(ctx, "ciCd", nil)
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewIamApiKey(ctx, "main", &scaleway.IamApiKeyArgs{
//				ApplicationId: pulumi.Any(scaleway_iam_application.Main.Id),
//				Description:   pulumi.String("a description"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With user
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			mainIamUser, err := scaleway.NewIamUser(ctx, "mainIamUser", &scaleway.IamUserArgs{
//				Email: pulumi.String("test@test.com"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewIamApiKey(ctx, "mainIamApiKey", &scaleway.IamApiKeyArgs{
//				UserId:      mainIamUser.ID(),
//				Description: pulumi.String("a description"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With expiration
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//	"github.com/pulumiverse/pulumi-time/sdk/go/time"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			rotateAfterAYear, err := time.NewRotating(ctx, "rotateAfterAYear", &time.RotatingArgs{
//				RotationYears: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewIamApiKey(ctx, "main", &scaleway.IamApiKeyArgs{
//				ApplicationId: pulumi.Any(scaleway_iam_application.Main.Id),
//				ExpiresAt:     rotateAfterAYear.RotationRfc3339,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Api keys can be imported using the `{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/iamApiKey:IamApiKey main 11111111111111111111
// ```
type IamApiKey struct {
	pulumi.CustomResourceState

	// The access key of the IAM API key.
	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// ID of the application attached to the API key.
	ApplicationId pulumi.StringPtrOutput `pulumi:"applicationId"`
	// The date and time of the creation of the IAM API key.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The IP Address of the device which created the API key.
	CreationIp pulumi.StringOutput `pulumi:"creationIp"`
	// The default Project ID to use with Object Storage.
	DefaultProjectId pulumi.StringOutput `pulumi:"defaultProjectId"`
	// The description of the API key.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether the IAM API key is editable.
	Editable pulumi.BoolOutput `pulumi:"editable"`
	// The date and time of the expiration of the IAM API key. Please note that in case of any changes,
	// the resource will be recreated.
	ExpiresAt pulumi.StringPtrOutput `pulumi:"expiresAt"`
	// The secret Key of the IAM API key.
	SecretKey pulumi.StringOutput `pulumi:"secretKey"`
	// The date and time of the last update of the IAM API key.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// ID of the user attached to the API key.
	// > **Note** You must specify at least one: `applicationId` and/or `userId`.
	UserId pulumi.StringPtrOutput `pulumi:"userId"`
}

// NewIamApiKey registers a new resource with the given unique name, arguments, and options.
func NewIamApiKey(ctx *pulumi.Context,
	name string, args *IamApiKeyArgs, opts ...pulumi.ResourceOption) (*IamApiKey, error) {
	if args == nil {
		args = &IamApiKeyArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secretKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IamApiKey
	err := ctx.RegisterResource("scaleway:index/iamApiKey:IamApiKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIamApiKey gets an existing IamApiKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIamApiKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IamApiKeyState, opts ...pulumi.ResourceOption) (*IamApiKey, error) {
	var resource IamApiKey
	err := ctx.ReadResource("scaleway:index/iamApiKey:IamApiKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IamApiKey resources.
type iamApiKeyState struct {
	// The access key of the IAM API key.
	AccessKey *string `pulumi:"accessKey"`
	// ID of the application attached to the API key.
	ApplicationId *string `pulumi:"applicationId"`
	// The date and time of the creation of the IAM API key.
	CreatedAt *string `pulumi:"createdAt"`
	// The IP Address of the device which created the API key.
	CreationIp *string `pulumi:"creationIp"`
	// The default Project ID to use with Object Storage.
	DefaultProjectId *string `pulumi:"defaultProjectId"`
	// The description of the API key.
	Description *string `pulumi:"description"`
	// Whether the IAM API key is editable.
	Editable *bool `pulumi:"editable"`
	// The date and time of the expiration of the IAM API key. Please note that in case of any changes,
	// the resource will be recreated.
	ExpiresAt *string `pulumi:"expiresAt"`
	// The secret Key of the IAM API key.
	SecretKey *string `pulumi:"secretKey"`
	// The date and time of the last update of the IAM API key.
	UpdatedAt *string `pulumi:"updatedAt"`
	// ID of the user attached to the API key.
	// > **Note** You must specify at least one: `applicationId` and/or `userId`.
	UserId *string `pulumi:"userId"`
}

type IamApiKeyState struct {
	// The access key of the IAM API key.
	AccessKey pulumi.StringPtrInput
	// ID of the application attached to the API key.
	ApplicationId pulumi.StringPtrInput
	// The date and time of the creation of the IAM API key.
	CreatedAt pulumi.StringPtrInput
	// The IP Address of the device which created the API key.
	CreationIp pulumi.StringPtrInput
	// The default Project ID to use with Object Storage.
	DefaultProjectId pulumi.StringPtrInput
	// The description of the API key.
	Description pulumi.StringPtrInput
	// Whether the IAM API key is editable.
	Editable pulumi.BoolPtrInput
	// The date and time of the expiration of the IAM API key. Please note that in case of any changes,
	// the resource will be recreated.
	ExpiresAt pulumi.StringPtrInput
	// The secret Key of the IAM API key.
	SecretKey pulumi.StringPtrInput
	// The date and time of the last update of the IAM API key.
	UpdatedAt pulumi.StringPtrInput
	// ID of the user attached to the API key.
	// > **Note** You must specify at least one: `applicationId` and/or `userId`.
	UserId pulumi.StringPtrInput
}

func (IamApiKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*iamApiKeyState)(nil)).Elem()
}

type iamApiKeyArgs struct {
	// ID of the application attached to the API key.
	ApplicationId *string `pulumi:"applicationId"`
	// The default Project ID to use with Object Storage.
	DefaultProjectId *string `pulumi:"defaultProjectId"`
	// The description of the API key.
	Description *string `pulumi:"description"`
	// The date and time of the expiration of the IAM API key. Please note that in case of any changes,
	// the resource will be recreated.
	ExpiresAt *string `pulumi:"expiresAt"`
	// ID of the user attached to the API key.
	// > **Note** You must specify at least one: `applicationId` and/or `userId`.
	UserId *string `pulumi:"userId"`
}

// The set of arguments for constructing a IamApiKey resource.
type IamApiKeyArgs struct {
	// ID of the application attached to the API key.
	ApplicationId pulumi.StringPtrInput
	// The default Project ID to use with Object Storage.
	DefaultProjectId pulumi.StringPtrInput
	// The description of the API key.
	Description pulumi.StringPtrInput
	// The date and time of the expiration of the IAM API key. Please note that in case of any changes,
	// the resource will be recreated.
	ExpiresAt pulumi.StringPtrInput
	// ID of the user attached to the API key.
	// > **Note** You must specify at least one: `applicationId` and/or `userId`.
	UserId pulumi.StringPtrInput
}

func (IamApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamApiKeyArgs)(nil)).Elem()
}

type IamApiKeyInput interface {
	pulumi.Input

	ToIamApiKeyOutput() IamApiKeyOutput
	ToIamApiKeyOutputWithContext(ctx context.Context) IamApiKeyOutput
}

func (*IamApiKey) ElementType() reflect.Type {
	return reflect.TypeOf((**IamApiKey)(nil)).Elem()
}

func (i *IamApiKey) ToIamApiKeyOutput() IamApiKeyOutput {
	return i.ToIamApiKeyOutputWithContext(context.Background())
}

func (i *IamApiKey) ToIamApiKeyOutputWithContext(ctx context.Context) IamApiKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamApiKeyOutput)
}

// IamApiKeyArrayInput is an input type that accepts IamApiKeyArray and IamApiKeyArrayOutput values.
// You can construct a concrete instance of `IamApiKeyArrayInput` via:
//
//	IamApiKeyArray{ IamApiKeyArgs{...} }
type IamApiKeyArrayInput interface {
	pulumi.Input

	ToIamApiKeyArrayOutput() IamApiKeyArrayOutput
	ToIamApiKeyArrayOutputWithContext(context.Context) IamApiKeyArrayOutput
}

type IamApiKeyArray []IamApiKeyInput

func (IamApiKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamApiKey)(nil)).Elem()
}

func (i IamApiKeyArray) ToIamApiKeyArrayOutput() IamApiKeyArrayOutput {
	return i.ToIamApiKeyArrayOutputWithContext(context.Background())
}

func (i IamApiKeyArray) ToIamApiKeyArrayOutputWithContext(ctx context.Context) IamApiKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamApiKeyArrayOutput)
}

// IamApiKeyMapInput is an input type that accepts IamApiKeyMap and IamApiKeyMapOutput values.
// You can construct a concrete instance of `IamApiKeyMapInput` via:
//
//	IamApiKeyMap{ "key": IamApiKeyArgs{...} }
type IamApiKeyMapInput interface {
	pulumi.Input

	ToIamApiKeyMapOutput() IamApiKeyMapOutput
	ToIamApiKeyMapOutputWithContext(context.Context) IamApiKeyMapOutput
}

type IamApiKeyMap map[string]IamApiKeyInput

func (IamApiKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamApiKey)(nil)).Elem()
}

func (i IamApiKeyMap) ToIamApiKeyMapOutput() IamApiKeyMapOutput {
	return i.ToIamApiKeyMapOutputWithContext(context.Background())
}

func (i IamApiKeyMap) ToIamApiKeyMapOutputWithContext(ctx context.Context) IamApiKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamApiKeyMapOutput)
}

type IamApiKeyOutput struct{ *pulumi.OutputState }

func (IamApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamApiKey)(nil)).Elem()
}

func (o IamApiKeyOutput) ToIamApiKeyOutput() IamApiKeyOutput {
	return o
}

func (o IamApiKeyOutput) ToIamApiKeyOutputWithContext(ctx context.Context) IamApiKeyOutput {
	return o
}

// The access key of the IAM API key.
func (o IamApiKeyOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *IamApiKey) pulumi.StringOutput { return v.AccessKey }).(pulumi.StringOutput)
}

// ID of the application attached to the API key.
func (o IamApiKeyOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IamApiKey) pulumi.StringPtrOutput { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// The date and time of the creation of the IAM API key.
func (o IamApiKeyOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *IamApiKey) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The IP Address of the device which created the API key.
func (o IamApiKeyOutput) CreationIp() pulumi.StringOutput {
	return o.ApplyT(func(v *IamApiKey) pulumi.StringOutput { return v.CreationIp }).(pulumi.StringOutput)
}

// The default Project ID to use with Object Storage.
func (o IamApiKeyOutput) DefaultProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *IamApiKey) pulumi.StringOutput { return v.DefaultProjectId }).(pulumi.StringOutput)
}

// The description of the API key.
func (o IamApiKeyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IamApiKey) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the IAM API key is editable.
func (o IamApiKeyOutput) Editable() pulumi.BoolOutput {
	return o.ApplyT(func(v *IamApiKey) pulumi.BoolOutput { return v.Editable }).(pulumi.BoolOutput)
}

// The date and time of the expiration of the IAM API key. Please note that in case of any changes,
// the resource will be recreated.
func (o IamApiKeyOutput) ExpiresAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IamApiKey) pulumi.StringPtrOutput { return v.ExpiresAt }).(pulumi.StringPtrOutput)
}

// The secret Key of the IAM API key.
func (o IamApiKeyOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v *IamApiKey) pulumi.StringOutput { return v.SecretKey }).(pulumi.StringOutput)
}

// The date and time of the last update of the IAM API key.
func (o IamApiKeyOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *IamApiKey) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// ID of the user attached to the API key.
// > **Note** You must specify at least one: `applicationId` and/or `userId`.
func (o IamApiKeyOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IamApiKey) pulumi.StringPtrOutput { return v.UserId }).(pulumi.StringPtrOutput)
}

type IamApiKeyArrayOutput struct{ *pulumi.OutputState }

func (IamApiKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamApiKey)(nil)).Elem()
}

func (o IamApiKeyArrayOutput) ToIamApiKeyArrayOutput() IamApiKeyArrayOutput {
	return o
}

func (o IamApiKeyArrayOutput) ToIamApiKeyArrayOutputWithContext(ctx context.Context) IamApiKeyArrayOutput {
	return o
}

func (o IamApiKeyArrayOutput) Index(i pulumi.IntInput) IamApiKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IamApiKey {
		return vs[0].([]*IamApiKey)[vs[1].(int)]
	}).(IamApiKeyOutput)
}

type IamApiKeyMapOutput struct{ *pulumi.OutputState }

func (IamApiKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamApiKey)(nil)).Elem()
}

func (o IamApiKeyMapOutput) ToIamApiKeyMapOutput() IamApiKeyMapOutput {
	return o
}

func (o IamApiKeyMapOutput) ToIamApiKeyMapOutputWithContext(ctx context.Context) IamApiKeyMapOutput {
	return o
}

func (o IamApiKeyMapOutput) MapIndex(k pulumi.StringInput) IamApiKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IamApiKey {
		return vs[0].(map[string]*IamApiKey)[vs[1].(string)]
	}).(IamApiKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamApiKeyInput)(nil)).Elem(), &IamApiKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamApiKeyArrayInput)(nil)).Elem(), IamApiKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamApiKeyMapInput)(nil)).Elem(), IamApiKeyMap{})
	pulumi.RegisterOutputType(IamApiKeyOutput{})
	pulumi.RegisterOutputType(IamApiKeyArrayOutput{})
	pulumi.RegisterOutputType(IamApiKeyMapOutput{})
}
