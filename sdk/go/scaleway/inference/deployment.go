// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package inference

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Managed Inference deployments.
// For more information, see the [API documentation](https://www.scaleway.com/en/developers/api/inference/).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/inference"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := inference.NewDeployment(ctx, "deployment", &inference.DeploymentArgs{
//				Name:      pulumi.String("tf-inference-deployment"),
//				NodeType:  pulumi.String("L4"),
//				ModelName: pulumi.String("meta/llama-3.1-8b-instruct:fp8"),
//				PublicEndpoint: &inference.DeploymentPublicEndpointArgs{
//					IsEnabled: pulumi.Bool(true),
//				},
//				AcceptEula: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Functions can be imported using, `{region}/{id}`, as shown below:
//
// bash
//
// ```sh
// $ pulumi import scaleway:inference/deployment:Deployment deployment fr-par/11111111-1111-1111-1111-111111111111
// ```
type Deployment struct {
	pulumi.CustomResourceState

	// Some models (e.g Meta Llama) require end-user license agreements. Set `true` to accept.
	AcceptEula pulumi.BoolPtrOutput `pulumi:"acceptEula"`
	// The date and time of the creation of the deployment.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The maximum size of the pool.
	MaxSize pulumi.IntOutput `pulumi:"maxSize"`
	// The minimum size of the pool.
	MinSize pulumi.IntOutput `pulumi:"minSize"`
	// The model id used for the deployment.
	ModelId pulumi.StringOutput `pulumi:"modelId"`
	// The model name to use for the deployment. Model names can be found in Console or using Scaleway's CLI (`scw inference model list`)
	ModelName pulumi.StringOutput `pulumi:"modelName"`
	// The deployment name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The node type to use for the deployment. Node types can be found using Scaleway's CLI (`scw inference node-type list`)
	NodeType pulumi.StringOutput `pulumi:"nodeType"`
	// Configuration of the deployment's private endpoint.
	PrivateEndpoint DeploymentPrivateEndpointPtrOutput `pulumi:"privateEndpoint"`
	// `projectId`) The ID of the project the deployment is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Configuration of the deployment's public endpoint.
	PublicEndpoint DeploymentPublicEndpointPtrOutput `pulumi:"publicEndpoint"`
	// `region`) The region in which the deployment is created.
	Region pulumi.StringOutput `pulumi:"region"`
	// The size of the pool.
	Size pulumi.IntOutput `pulumi:"size"`
	// The status of the deployment.
	Status pulumi.StringOutput `pulumi:"status"`
	// The tags associated with the deployment.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The date and time of the last update of the deployment.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewDeployment registers a new resource with the given unique name, arguments, and options.
func NewDeployment(ctx *pulumi.Context,
	name string, args *DeploymentArgs, opts ...pulumi.ResourceOption) (*Deployment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ModelName == nil {
		return nil, errors.New("invalid value for required argument 'ModelName'")
	}
	if args.NodeType == nil {
		return nil, errors.New("invalid value for required argument 'NodeType'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/inferenceDeployment:InferenceDeployment"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Deployment
	err := ctx.RegisterResource("scaleway:inference/deployment:Deployment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeployment gets an existing Deployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeploymentState, opts ...pulumi.ResourceOption) (*Deployment, error) {
	var resource Deployment
	err := ctx.ReadResource("scaleway:inference/deployment:Deployment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Deployment resources.
type deploymentState struct {
	// Some models (e.g Meta Llama) require end-user license agreements. Set `true` to accept.
	AcceptEula *bool `pulumi:"acceptEula"`
	// The date and time of the creation of the deployment.
	CreatedAt *string `pulumi:"createdAt"`
	// The maximum size of the pool.
	MaxSize *int `pulumi:"maxSize"`
	// The minimum size of the pool.
	MinSize *int `pulumi:"minSize"`
	// The model id used for the deployment.
	ModelId *string `pulumi:"modelId"`
	// The model name to use for the deployment. Model names can be found in Console or using Scaleway's CLI (`scw inference model list`)
	ModelName *string `pulumi:"modelName"`
	// The deployment name.
	Name *string `pulumi:"name"`
	// The node type to use for the deployment. Node types can be found using Scaleway's CLI (`scw inference node-type list`)
	NodeType *string `pulumi:"nodeType"`
	// Configuration of the deployment's private endpoint.
	PrivateEndpoint *DeploymentPrivateEndpoint `pulumi:"privateEndpoint"`
	// `projectId`) The ID of the project the deployment is associated with.
	ProjectId *string `pulumi:"projectId"`
	// Configuration of the deployment's public endpoint.
	PublicEndpoint *DeploymentPublicEndpoint `pulumi:"publicEndpoint"`
	// `region`) The region in which the deployment is created.
	Region *string `pulumi:"region"`
	// The size of the pool.
	Size *int `pulumi:"size"`
	// The status of the deployment.
	Status *string `pulumi:"status"`
	// The tags associated with the deployment.
	Tags []string `pulumi:"tags"`
	// The date and time of the last update of the deployment.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type DeploymentState struct {
	// Some models (e.g Meta Llama) require end-user license agreements. Set `true` to accept.
	AcceptEula pulumi.BoolPtrInput
	// The date and time of the creation of the deployment.
	CreatedAt pulumi.StringPtrInput
	// The maximum size of the pool.
	MaxSize pulumi.IntPtrInput
	// The minimum size of the pool.
	MinSize pulumi.IntPtrInput
	// The model id used for the deployment.
	ModelId pulumi.StringPtrInput
	// The model name to use for the deployment. Model names can be found in Console or using Scaleway's CLI (`scw inference model list`)
	ModelName pulumi.StringPtrInput
	// The deployment name.
	Name pulumi.StringPtrInput
	// The node type to use for the deployment. Node types can be found using Scaleway's CLI (`scw inference node-type list`)
	NodeType pulumi.StringPtrInput
	// Configuration of the deployment's private endpoint.
	PrivateEndpoint DeploymentPrivateEndpointPtrInput
	// `projectId`) The ID of the project the deployment is associated with.
	ProjectId pulumi.StringPtrInput
	// Configuration of the deployment's public endpoint.
	PublicEndpoint DeploymentPublicEndpointPtrInput
	// `region`) The region in which the deployment is created.
	Region pulumi.StringPtrInput
	// The size of the pool.
	Size pulumi.IntPtrInput
	// The status of the deployment.
	Status pulumi.StringPtrInput
	// The tags associated with the deployment.
	Tags pulumi.StringArrayInput
	// The date and time of the last update of the deployment.
	UpdatedAt pulumi.StringPtrInput
}

func (DeploymentState) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentState)(nil)).Elem()
}

type deploymentArgs struct {
	// Some models (e.g Meta Llama) require end-user license agreements. Set `true` to accept.
	AcceptEula *bool `pulumi:"acceptEula"`
	// The maximum size of the pool.
	MaxSize *int `pulumi:"maxSize"`
	// The minimum size of the pool.
	MinSize *int `pulumi:"minSize"`
	// The model name to use for the deployment. Model names can be found in Console or using Scaleway's CLI (`scw inference model list`)
	ModelName string `pulumi:"modelName"`
	// The deployment name.
	Name *string `pulumi:"name"`
	// The node type to use for the deployment. Node types can be found using Scaleway's CLI (`scw inference node-type list`)
	NodeType string `pulumi:"nodeType"`
	// Configuration of the deployment's private endpoint.
	PrivateEndpoint *DeploymentPrivateEndpoint `pulumi:"privateEndpoint"`
	// `projectId`) The ID of the project the deployment is associated with.
	ProjectId *string `pulumi:"projectId"`
	// Configuration of the deployment's public endpoint.
	PublicEndpoint *DeploymentPublicEndpoint `pulumi:"publicEndpoint"`
	// `region`) The region in which the deployment is created.
	Region *string `pulumi:"region"`
	// The tags associated with the deployment.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a Deployment resource.
type DeploymentArgs struct {
	// Some models (e.g Meta Llama) require end-user license agreements. Set `true` to accept.
	AcceptEula pulumi.BoolPtrInput
	// The maximum size of the pool.
	MaxSize pulumi.IntPtrInput
	// The minimum size of the pool.
	MinSize pulumi.IntPtrInput
	// The model name to use for the deployment. Model names can be found in Console or using Scaleway's CLI (`scw inference model list`)
	ModelName pulumi.StringInput
	// The deployment name.
	Name pulumi.StringPtrInput
	// The node type to use for the deployment. Node types can be found using Scaleway's CLI (`scw inference node-type list`)
	NodeType pulumi.StringInput
	// Configuration of the deployment's private endpoint.
	PrivateEndpoint DeploymentPrivateEndpointPtrInput
	// `projectId`) The ID of the project the deployment is associated with.
	ProjectId pulumi.StringPtrInput
	// Configuration of the deployment's public endpoint.
	PublicEndpoint DeploymentPublicEndpointPtrInput
	// `region`) The region in which the deployment is created.
	Region pulumi.StringPtrInput
	// The tags associated with the deployment.
	Tags pulumi.StringArrayInput
}

func (DeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentArgs)(nil)).Elem()
}

type DeploymentInput interface {
	pulumi.Input

	ToDeploymentOutput() DeploymentOutput
	ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput
}

func (*Deployment) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (i *Deployment) ToDeploymentOutput() DeploymentOutput {
	return i.ToDeploymentOutputWithContext(context.Background())
}

func (i *Deployment) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentOutput)
}

// DeploymentArrayInput is an input type that accepts DeploymentArray and DeploymentArrayOutput values.
// You can construct a concrete instance of `DeploymentArrayInput` via:
//
//	DeploymentArray{ DeploymentArgs{...} }
type DeploymentArrayInput interface {
	pulumi.Input

	ToDeploymentArrayOutput() DeploymentArrayOutput
	ToDeploymentArrayOutputWithContext(context.Context) DeploymentArrayOutput
}

type DeploymentArray []DeploymentInput

func (DeploymentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Deployment)(nil)).Elem()
}

func (i DeploymentArray) ToDeploymentArrayOutput() DeploymentArrayOutput {
	return i.ToDeploymentArrayOutputWithContext(context.Background())
}

func (i DeploymentArray) ToDeploymentArrayOutputWithContext(ctx context.Context) DeploymentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentArrayOutput)
}

// DeploymentMapInput is an input type that accepts DeploymentMap and DeploymentMapOutput values.
// You can construct a concrete instance of `DeploymentMapInput` via:
//
//	DeploymentMap{ "key": DeploymentArgs{...} }
type DeploymentMapInput interface {
	pulumi.Input

	ToDeploymentMapOutput() DeploymentMapOutput
	ToDeploymentMapOutputWithContext(context.Context) DeploymentMapOutput
}

type DeploymentMap map[string]DeploymentInput

func (DeploymentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Deployment)(nil)).Elem()
}

func (i DeploymentMap) ToDeploymentMapOutput() DeploymentMapOutput {
	return i.ToDeploymentMapOutputWithContext(context.Background())
}

func (i DeploymentMap) ToDeploymentMapOutputWithContext(ctx context.Context) DeploymentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentMapOutput)
}

type DeploymentOutput struct{ *pulumi.OutputState }

func (DeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (o DeploymentOutput) ToDeploymentOutput() DeploymentOutput {
	return o
}

func (o DeploymentOutput) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return o
}

// Some models (e.g Meta Llama) require end-user license agreements. Set `true` to accept.
func (o DeploymentOutput) AcceptEula() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Deployment) pulumi.BoolPtrOutput { return v.AcceptEula }).(pulumi.BoolPtrOutput)
}

// The date and time of the creation of the deployment.
func (o DeploymentOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The maximum size of the pool.
func (o DeploymentOutput) MaxSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Deployment) pulumi.IntOutput { return v.MaxSize }).(pulumi.IntOutput)
}

// The minimum size of the pool.
func (o DeploymentOutput) MinSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Deployment) pulumi.IntOutput { return v.MinSize }).(pulumi.IntOutput)
}

// The model id used for the deployment.
func (o DeploymentOutput) ModelId() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.ModelId }).(pulumi.StringOutput)
}

// The model name to use for the deployment. Model names can be found in Console or using Scaleway's CLI (`scw inference model list`)
func (o DeploymentOutput) ModelName() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.ModelName }).(pulumi.StringOutput)
}

// The deployment name.
func (o DeploymentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The node type to use for the deployment. Node types can be found using Scaleway's CLI (`scw inference node-type list`)
func (o DeploymentOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.NodeType }).(pulumi.StringOutput)
}

// Configuration of the deployment's private endpoint.
func (o DeploymentOutput) PrivateEndpoint() DeploymentPrivateEndpointPtrOutput {
	return o.ApplyT(func(v *Deployment) DeploymentPrivateEndpointPtrOutput { return v.PrivateEndpoint }).(DeploymentPrivateEndpointPtrOutput)
}

// `projectId`) The ID of the project the deployment is associated with.
func (o DeploymentOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Configuration of the deployment's public endpoint.
func (o DeploymentOutput) PublicEndpoint() DeploymentPublicEndpointPtrOutput {
	return o.ApplyT(func(v *Deployment) DeploymentPublicEndpointPtrOutput { return v.PublicEndpoint }).(DeploymentPublicEndpointPtrOutput)
}

// `region`) The region in which the deployment is created.
func (o DeploymentOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The size of the pool.
func (o DeploymentOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *Deployment) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// The status of the deployment.
func (o DeploymentOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The tags associated with the deployment.
func (o DeploymentOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The date and time of the last update of the deployment.
func (o DeploymentOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type DeploymentArrayOutput struct{ *pulumi.OutputState }

func (DeploymentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Deployment)(nil)).Elem()
}

func (o DeploymentArrayOutput) ToDeploymentArrayOutput() DeploymentArrayOutput {
	return o
}

func (o DeploymentArrayOutput) ToDeploymentArrayOutputWithContext(ctx context.Context) DeploymentArrayOutput {
	return o
}

func (o DeploymentArrayOutput) Index(i pulumi.IntInput) DeploymentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Deployment {
		return vs[0].([]*Deployment)[vs[1].(int)]
	}).(DeploymentOutput)
}

type DeploymentMapOutput struct{ *pulumi.OutputState }

func (DeploymentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Deployment)(nil)).Elem()
}

func (o DeploymentMapOutput) ToDeploymentMapOutput() DeploymentMapOutput {
	return o
}

func (o DeploymentMapOutput) ToDeploymentMapOutputWithContext(ctx context.Context) DeploymentMapOutput {
	return o
}

func (o DeploymentMapOutput) MapIndex(k pulumi.StringInput) DeploymentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Deployment {
		return vs[0].(map[string]*Deployment)[vs[1].(string)]
	}).(DeploymentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentInput)(nil)).Elem(), &Deployment{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentArrayInput)(nil)).Elem(), DeploymentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentMapInput)(nil)).Elem(), DeploymentMap{})
	pulumi.RegisterOutputType(DeploymentOutput{})
	pulumi.RegisterOutputType(DeploymentArrayOutput{})
	pulumi.RegisterOutputType(DeploymentMapOutput{})
}
