// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package inference

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// The `inference.Model` data source allows you to retrieve information about an inference model available in the Scaleway Inference API, either by providing the model's `name` or its `modelId`.
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/inference"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := inference.LookupModel(ctx, &inference.LookupModelArgs{
//				Name: pulumi.StringRef("meta/llama-3.1-8b-instruct:fp8"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupModel(ctx *pulumi.Context, args *LookupModelArgs, opts ...pulumi.InvokeOption) (*LookupModelResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupModelResult
	err := ctx.Invoke("scaleway:inference/getModel:getModel", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getModel.
type LookupModelArgs struct {
	// The ID of the model to retrieve. Must be a valid UUID with locality (i.e., Scaleway's zoned UUID format).
	ModelId *string `pulumi:"modelId"`
	// The fully qualified name of the model to look up (e.g., "meta/llama-3.1-8b-instruct:fp8"). The provider will search for a model with an exact name match in the selected region and project.
	Name *string `pulumi:"name"`
	Url  *string `pulumi:"url"`
}

// A collection of values returned by getModel.
type LookupModelResult struct {
	CreatedAt string `pulumi:"createdAt"`
	// A textual description of the model (if available).
	Description string `pulumi:"description"`
	// Whether the model requires end-user license agreement acceptance before use.
	HasEula bool `pulumi:"hasEula"`
	// The provider-assigned unique ID for this managed resource.
	Id      string  `pulumi:"id"`
	ModelId *string `pulumi:"modelId"`
	Name    *string `pulumi:"name"`
	// List of supported node types and their quantization options. Each entry contains:
	NodesSupports []GetModelNodesSupport `pulumi:"nodesSupports"`
	// Size, in bits, of the model parameters.
	ParameterSizeBits int    `pulumi:"parameterSizeBits"`
	ProjectId         string `pulumi:"projectId"`
	Region            string `pulumi:"region"`
	Secret            string `pulumi:"secret"`
	// Total size, in bytes, of the model archive.
	SizeBytes int `pulumi:"sizeBytes"`
	// The current status of the model (e.g., ready, error, etc.).
	Status string `pulumi:"status"`
	// Tags associated with the model.
	Tags      []string `pulumi:"tags"`
	UpdatedAt string   `pulumi:"updatedAt"`
	Url       *string  `pulumi:"url"`
}

func LookupModelOutput(ctx *pulumi.Context, args LookupModelOutputArgs, opts ...pulumi.InvokeOption) LookupModelResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupModelResultOutput, error) {
			args := v.(LookupModelArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("scaleway:inference/getModel:getModel", args, LookupModelResultOutput{}, options).(LookupModelResultOutput), nil
		}).(LookupModelResultOutput)
}

// A collection of arguments for invoking getModel.
type LookupModelOutputArgs struct {
	// The ID of the model to retrieve. Must be a valid UUID with locality (i.e., Scaleway's zoned UUID format).
	ModelId pulumi.StringPtrInput `pulumi:"modelId"`
	// The fully qualified name of the model to look up (e.g., "meta/llama-3.1-8b-instruct:fp8"). The provider will search for a model with an exact name match in the selected region and project.
	Name pulumi.StringPtrInput `pulumi:"name"`
	Url  pulumi.StringPtrInput `pulumi:"url"`
}

func (LookupModelOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupModelArgs)(nil)).Elem()
}

// A collection of values returned by getModel.
type LookupModelResultOutput struct{ *pulumi.OutputState }

func (LookupModelResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupModelResult)(nil)).Elem()
}

func (o LookupModelResultOutput) ToLookupModelResultOutput() LookupModelResultOutput {
	return o
}

func (o LookupModelResultOutput) ToLookupModelResultOutputWithContext(ctx context.Context) LookupModelResultOutput {
	return o
}

func (o LookupModelResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModelResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// A textual description of the model (if available).
func (o LookupModelResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModelResult) string { return v.Description }).(pulumi.StringOutput)
}

// Whether the model requires end-user license agreement acceptance before use.
func (o LookupModelResultOutput) HasEula() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupModelResult) bool { return v.HasEula }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupModelResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModelResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupModelResultOutput) ModelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupModelResult) *string { return v.ModelId }).(pulumi.StringPtrOutput)
}

func (o LookupModelResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupModelResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of supported node types and their quantization options. Each entry contains:
func (o LookupModelResultOutput) NodesSupports() GetModelNodesSupportArrayOutput {
	return o.ApplyT(func(v LookupModelResult) []GetModelNodesSupport { return v.NodesSupports }).(GetModelNodesSupportArrayOutput)
}

// Size, in bits, of the model parameters.
func (o LookupModelResultOutput) ParameterSizeBits() pulumi.IntOutput {
	return o.ApplyT(func(v LookupModelResult) int { return v.ParameterSizeBits }).(pulumi.IntOutput)
}

func (o LookupModelResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModelResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o LookupModelResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModelResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o LookupModelResultOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModelResult) string { return v.Secret }).(pulumi.StringOutput)
}

// Total size, in bytes, of the model archive.
func (o LookupModelResultOutput) SizeBytes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupModelResult) int { return v.SizeBytes }).(pulumi.IntOutput)
}

// The current status of the model (e.g., ready, error, etc.).
func (o LookupModelResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModelResult) string { return v.Status }).(pulumi.StringOutput)
}

// Tags associated with the model.
func (o LookupModelResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupModelResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o LookupModelResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModelResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func (o LookupModelResultOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupModelResult) *string { return v.Url }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupModelResultOutput{})
}
