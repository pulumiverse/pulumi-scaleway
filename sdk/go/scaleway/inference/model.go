// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package inference

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// The inference.Model resource allows you to upload and manage inference models in the Scaleway Inference ecosystem. Once registered, a model can be used in any inference.Deployment resource.
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/inference"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := inference.NewModel(ctx, "test", &inference.ModelArgs{
//				Name:   pulumi.String("my-awesome-model"),
//				Url:    pulumi.String("https://huggingface.co/agentica-org/DeepCoder-14B-Preview"),
//				Secret: pulumi.String("my-secret-token"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Deploy your own model on your managed inference
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/inference"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myModel, err := inference.NewModel(ctx, "my_model", &inference.ModelArgs{
//				Name:   pulumi.String("my-awesome-model"),
//				Url:    pulumi.String("https://huggingface.co/agentica-org/DeepCoder-14B-Preview"),
//				Secret: pulumi.String("my-secret-token"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = inference.NewDeployment(ctx, "my_deployment", &inference.DeploymentArgs{
//				Name:     pulumi.String("test-inference-deployment-basic"),
//				NodeType: pulumi.String("H100"),
//				ModelId:  myModel.ID(),
//				PublicEndpoint: &inference.DeploymentPublicEndpointArgs{
//					IsEnabled: pulumi.Bool(true),
//				},
//				AcceptEula: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Models can be imported using, `{region}/{id}`, as shown below:
//
// bash
//
// ```sh
// $ pulumi import scaleway:inference/model:Model my_model fr-par/11111111-1111-1111-1111-111111111111
// ```
type Model struct {
	pulumi.CustomResourceState

	// The date and time of the creation of the model
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// A textual description of the model (if available).
	Description pulumi.StringOutput `pulumi:"description"`
	// Whether the model requires end-user license agreement acceptance before use.
	HasEula pulumi.BoolOutput `pulumi:"hasEula"`
	// The name of the model. This must be unique within the project.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of supported node types and their quantization options. Each entry contains:
	NodesSupports ModelNodesSupportArrayOutput `pulumi:"nodesSupports"`
	// Size, in bits, of the model parameters.
	ParameterSizeBits pulumi.IntOutput `pulumi:"parameterSizeBits"`
	// `projectId`) The ID of the project the deployment is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// `region`) The region in which the deployment is created.
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// Authentication token used to pull the model from a private or gated URL (e.g., a Hugging Face access token with read permission).
	Secret pulumi.StringPtrOutput `pulumi:"secret"`
	// Total size, in bytes, of the model archive.
	SizeBytes pulumi.IntOutput `pulumi:"sizeBytes"`
	// The current status of the model (e.g., ready, error, etc.).
	Status pulumi.StringOutput `pulumi:"status"`
	// Tags associated with the model.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The date and time of the last update of the model
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The HTTPS source URL from which the model will be downloaded. This is typically a Hugging Face repository URL (e.g., https://huggingface.co/agentica-org/DeepCoder-14B-Preview). The URL must be publicly accessible or require valid credentials via `secret`
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewModel registers a new resource with the given unique name, arguments, and options.
func NewModel(ctx *pulumi.Context,
	name string, args *ModelArgs, opts ...pulumi.ResourceOption) (*Model, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.Secret != nil {
		args.Secret = pulumi.ToSecret(args.Secret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Model
	err := ctx.RegisterResource("scaleway:inference/model:Model", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModel gets an existing Model resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ModelState, opts ...pulumi.ResourceOption) (*Model, error) {
	var resource Model
	err := ctx.ReadResource("scaleway:inference/model:Model", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Model resources.
type modelState struct {
	// The date and time of the creation of the model
	CreatedAt *string `pulumi:"createdAt"`
	// A textual description of the model (if available).
	Description *string `pulumi:"description"`
	// Whether the model requires end-user license agreement acceptance before use.
	HasEula *bool `pulumi:"hasEula"`
	// The name of the model. This must be unique within the project.
	Name *string `pulumi:"name"`
	// List of supported node types and their quantization options. Each entry contains:
	NodesSupports []ModelNodesSupport `pulumi:"nodesSupports"`
	// Size, in bits, of the model parameters.
	ParameterSizeBits *int `pulumi:"parameterSizeBits"`
	// `projectId`) The ID of the project the deployment is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region in which the deployment is created.
	Region *string `pulumi:"region"`
	// Authentication token used to pull the model from a private or gated URL (e.g., a Hugging Face access token with read permission).
	Secret *string `pulumi:"secret"`
	// Total size, in bytes, of the model archive.
	SizeBytes *int `pulumi:"sizeBytes"`
	// The current status of the model (e.g., ready, error, etc.).
	Status *string `pulumi:"status"`
	// Tags associated with the model.
	Tags []string `pulumi:"tags"`
	// The date and time of the last update of the model
	UpdatedAt *string `pulumi:"updatedAt"`
	// The HTTPS source URL from which the model will be downloaded. This is typically a Hugging Face repository URL (e.g., https://huggingface.co/agentica-org/DeepCoder-14B-Preview). The URL must be publicly accessible or require valid credentials via `secret`
	Url *string `pulumi:"url"`
}

type ModelState struct {
	// The date and time of the creation of the model
	CreatedAt pulumi.StringPtrInput
	// A textual description of the model (if available).
	Description pulumi.StringPtrInput
	// Whether the model requires end-user license agreement acceptance before use.
	HasEula pulumi.BoolPtrInput
	// The name of the model. This must be unique within the project.
	Name pulumi.StringPtrInput
	// List of supported node types and their quantization options. Each entry contains:
	NodesSupports ModelNodesSupportArrayInput
	// Size, in bits, of the model parameters.
	ParameterSizeBits pulumi.IntPtrInput
	// `projectId`) The ID of the project the deployment is associated with.
	ProjectId pulumi.StringPtrInput
	// `region`) The region in which the deployment is created.
	Region pulumi.StringPtrInput
	// Authentication token used to pull the model from a private or gated URL (e.g., a Hugging Face access token with read permission).
	Secret pulumi.StringPtrInput
	// Total size, in bytes, of the model archive.
	SizeBytes pulumi.IntPtrInput
	// The current status of the model (e.g., ready, error, etc.).
	Status pulumi.StringPtrInput
	// Tags associated with the model.
	Tags pulumi.StringArrayInput
	// The date and time of the last update of the model
	UpdatedAt pulumi.StringPtrInput
	// The HTTPS source URL from which the model will be downloaded. This is typically a Hugging Face repository URL (e.g., https://huggingface.co/agentica-org/DeepCoder-14B-Preview). The URL must be publicly accessible or require valid credentials via `secret`
	Url pulumi.StringPtrInput
}

func (ModelState) ElementType() reflect.Type {
	return reflect.TypeOf((*modelState)(nil)).Elem()
}

type modelArgs struct {
	// The name of the model. This must be unique within the project.
	Name *string `pulumi:"name"`
	// `projectId`) The ID of the project the deployment is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region in which the deployment is created.
	Region *string `pulumi:"region"`
	// Authentication token used to pull the model from a private or gated URL (e.g., a Hugging Face access token with read permission).
	Secret *string `pulumi:"secret"`
	// The HTTPS source URL from which the model will be downloaded. This is typically a Hugging Face repository URL (e.g., https://huggingface.co/agentica-org/DeepCoder-14B-Preview). The URL must be publicly accessible or require valid credentials via `secret`
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a Model resource.
type ModelArgs struct {
	// The name of the model. This must be unique within the project.
	Name pulumi.StringPtrInput
	// `projectId`) The ID of the project the deployment is associated with.
	ProjectId pulumi.StringPtrInput
	// `region`) The region in which the deployment is created.
	Region pulumi.StringPtrInput
	// Authentication token used to pull the model from a private or gated URL (e.g., a Hugging Face access token with read permission).
	Secret pulumi.StringPtrInput
	// The HTTPS source URL from which the model will be downloaded. This is typically a Hugging Face repository URL (e.g., https://huggingface.co/agentica-org/DeepCoder-14B-Preview). The URL must be publicly accessible or require valid credentials via `secret`
	Url pulumi.StringInput
}

func (ModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*modelArgs)(nil)).Elem()
}

type ModelInput interface {
	pulumi.Input

	ToModelOutput() ModelOutput
	ToModelOutputWithContext(ctx context.Context) ModelOutput
}

func (*Model) ElementType() reflect.Type {
	return reflect.TypeOf((**Model)(nil)).Elem()
}

func (i *Model) ToModelOutput() ModelOutput {
	return i.ToModelOutputWithContext(context.Background())
}

func (i *Model) ToModelOutputWithContext(ctx context.Context) ModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelOutput)
}

// ModelArrayInput is an input type that accepts ModelArray and ModelArrayOutput values.
// You can construct a concrete instance of `ModelArrayInput` via:
//
//	ModelArray{ ModelArgs{...} }
type ModelArrayInput interface {
	pulumi.Input

	ToModelArrayOutput() ModelArrayOutput
	ToModelArrayOutputWithContext(context.Context) ModelArrayOutput
}

type ModelArray []ModelInput

func (ModelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Model)(nil)).Elem()
}

func (i ModelArray) ToModelArrayOutput() ModelArrayOutput {
	return i.ToModelArrayOutputWithContext(context.Background())
}

func (i ModelArray) ToModelArrayOutputWithContext(ctx context.Context) ModelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelArrayOutput)
}

// ModelMapInput is an input type that accepts ModelMap and ModelMapOutput values.
// You can construct a concrete instance of `ModelMapInput` via:
//
//	ModelMap{ "key": ModelArgs{...} }
type ModelMapInput interface {
	pulumi.Input

	ToModelMapOutput() ModelMapOutput
	ToModelMapOutputWithContext(context.Context) ModelMapOutput
}

type ModelMap map[string]ModelInput

func (ModelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Model)(nil)).Elem()
}

func (i ModelMap) ToModelMapOutput() ModelMapOutput {
	return i.ToModelMapOutputWithContext(context.Background())
}

func (i ModelMap) ToModelMapOutputWithContext(ctx context.Context) ModelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelMapOutput)
}

type ModelOutput struct{ *pulumi.OutputState }

func (ModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Model)(nil)).Elem()
}

func (o ModelOutput) ToModelOutput() ModelOutput {
	return o
}

func (o ModelOutput) ToModelOutputWithContext(ctx context.Context) ModelOutput {
	return o
}

// The date and time of the creation of the model
func (o ModelOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Model) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// A textual description of the model (if available).
func (o ModelOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Model) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Whether the model requires end-user license agreement acceptance before use.
func (o ModelOutput) HasEula() pulumi.BoolOutput {
	return o.ApplyT(func(v *Model) pulumi.BoolOutput { return v.HasEula }).(pulumi.BoolOutput)
}

// The name of the model. This must be unique within the project.
func (o ModelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Model) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of supported node types and their quantization options. Each entry contains:
func (o ModelOutput) NodesSupports() ModelNodesSupportArrayOutput {
	return o.ApplyT(func(v *Model) ModelNodesSupportArrayOutput { return v.NodesSupports }).(ModelNodesSupportArrayOutput)
}

// Size, in bits, of the model parameters.
func (o ModelOutput) ParameterSizeBits() pulumi.IntOutput {
	return o.ApplyT(func(v *Model) pulumi.IntOutput { return v.ParameterSizeBits }).(pulumi.IntOutput)
}

// `projectId`) The ID of the project the deployment is associated with.
func (o ModelOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Model) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// `region`) The region in which the deployment is created.
func (o ModelOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Model) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// Authentication token used to pull the model from a private or gated URL (e.g., a Hugging Face access token with read permission).
func (o ModelOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Model) pulumi.StringPtrOutput { return v.Secret }).(pulumi.StringPtrOutput)
}

// Total size, in bytes, of the model archive.
func (o ModelOutput) SizeBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *Model) pulumi.IntOutput { return v.SizeBytes }).(pulumi.IntOutput)
}

// The current status of the model (e.g., ready, error, etc.).
func (o ModelOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Model) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Tags associated with the model.
func (o ModelOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Model) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The date and time of the last update of the model
func (o ModelOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Model) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The HTTPS source URL from which the model will be downloaded. This is typically a Hugging Face repository URL (e.g., https://huggingface.co/agentica-org/DeepCoder-14B-Preview). The URL must be publicly accessible or require valid credentials via `secret`
func (o ModelOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Model) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type ModelArrayOutput struct{ *pulumi.OutputState }

func (ModelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Model)(nil)).Elem()
}

func (o ModelArrayOutput) ToModelArrayOutput() ModelArrayOutput {
	return o
}

func (o ModelArrayOutput) ToModelArrayOutputWithContext(ctx context.Context) ModelArrayOutput {
	return o
}

func (o ModelArrayOutput) Index(i pulumi.IntInput) ModelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Model {
		return vs[0].([]*Model)[vs[1].(int)]
	}).(ModelOutput)
}

type ModelMapOutput struct{ *pulumi.OutputState }

func (ModelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Model)(nil)).Elem()
}

func (o ModelMapOutput) ToModelMapOutput() ModelMapOutput {
	return o
}

func (o ModelMapOutput) ToModelMapOutputWithContext(ctx context.Context) ModelMapOutput {
	return o
}

func (o ModelMapOutput) MapIndex(k pulumi.StringInput) ModelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Model {
		return vs[0].(map[string]*Model)[vs[1].(string)]
	}).(ModelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ModelInput)(nil)).Elem(), &Model{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelArrayInput)(nil)).Elem(), ModelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelMapInput)(nil)).Elem(), ModelMap{})
	pulumi.RegisterOutputType(ModelOutput{})
	pulumi.RegisterOutputType(ModelArrayOutput{})
	pulumi.RegisterOutputType(ModelMapOutput{})
}
