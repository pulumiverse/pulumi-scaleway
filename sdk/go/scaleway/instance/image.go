// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package instance

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Compute Images.
// For more information, see the [API documentation](https://www.scaleway.com/en/developers/api/instance/#path-images-list-instance-images).
//
// ## Example Usage
//
// ### From a volume
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/instance"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			volume, err := instance.NewVolume(ctx, "volume", &instance.VolumeArgs{
//				Type:     pulumi.String("b_ssd"),
//				SizeInGb: pulumi.Int(20),
//			})
//			if err != nil {
//				return err
//			}
//			volumeSnapshot, err := instance.NewSnapshot(ctx, "volume_snapshot", &instance.SnapshotArgs{
//				VolumeId: volume.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = instance.NewImage(ctx, "volume_image", &instance.ImageArgs{
//				Name:         pulumi.String("image_from_volume"),
//				RootVolumeId: volumeSnapshot.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### From a server
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/instance"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := instance.NewServer(ctx, "server", &instance.ServerArgs{
//				Image: pulumi.String("ubuntu_jammy"),
//				Type:  pulumi.String("DEV1-S"),
//			})
//			if err != nil {
//				return err
//			}
//			serverSnapshot, err := instance.NewSnapshot(ctx, "server_snapshot", &instance.SnapshotArgs{
//				VolumeId: pulumi.Any(main.RootVolume[0].VolumeId),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = instance.NewImage(ctx, "server_image", &instance.ImageArgs{
//				Name:         pulumi.String("image_from_server"),
//				RootVolumeId: serverSnapshot.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With additional volumes
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/instance"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := instance.NewServer(ctx, "server", &instance.ServerArgs{
//				Image: pulumi.String("ubuntu_jammy"),
//				Type:  pulumi.String("DEV1-S"),
//			})
//			if err != nil {
//				return err
//			}
//			volume, err := instance.NewVolume(ctx, "volume", &instance.VolumeArgs{
//				Type:     pulumi.String("b_ssd"),
//				SizeInGb: pulumi.Int(20),
//			})
//			if err != nil {
//				return err
//			}
//			volumeSnapshot, err := instance.NewSnapshot(ctx, "volume_snapshot", &instance.SnapshotArgs{
//				VolumeId: volume.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			serverSnapshot, err := instance.NewSnapshot(ctx, "server_snapshot", &instance.SnapshotArgs{
//				VolumeId: pulumi.Any(main.RootVolume[0].VolumeId),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = instance.NewImage(ctx, "image", &instance.ImageArgs{
//				Name:         pulumi.String("image_with_extra_volumes"),
//				RootVolumeId: serverSnapshot.ID(),
//				AdditionalVolumeIds: pulumi.StringArray{
//					volumeSnapshot.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Images can be imported using the `{zone}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:instance/image:Image main fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type Image struct {
	pulumi.CustomResourceState

	// List of IDs of the snapshots of the additional volumes to be attached to the image.
	AdditionalVolumeIds pulumi.StringArrayOutput `pulumi:"additionalVolumeIds"`
	// The description of the extra volumes attached to the image.
	AdditionalVolumes ImageAdditionalVolumeArrayOutput `pulumi:"additionalVolumes"`
	// The architecture the image is compatible with. Possible values are: `x8664` or `arm`.
	Architecture pulumi.StringPtrOutput `pulumi:"architecture"`
	// Date of the image creation.
	CreationDate pulumi.StringOutput `pulumi:"creationDate"`
	// ID of the server the image is based on (in case it is a backup).
	FromServerId pulumi.StringOutput `pulumi:"fromServerId"`
	// Date of image latest update.
	ModificationDate pulumi.StringOutput `pulumi:"modificationDate"`
	// The name of the image. If not provided it will be randomly generated.
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization ID the image is associated with.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The ID of the project the image is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Set to `true` if the image is public.
	Public pulumi.BoolPtrOutput `pulumi:"public"`
	// The ID of the snapshot of the volume to be used as root in the image.
	RootVolumeId pulumi.StringOutput `pulumi:"rootVolumeId"`
	// The description of the root volume attached to the image.
	RootVolumes ImageRootVolumeArrayOutput `pulumi:"rootVolumes"`
	// State of the image. Possible values are: `available`, `creating` or `error`.
	State pulumi.StringOutput `pulumi:"state"`
	// A list of tags to apply to the image.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The zone in which the image should be created.
	Zone pulumi.StringPtrOutput `pulumi:"zone"`
}

// NewImage registers a new resource with the given unique name, arguments, and options.
func NewImage(ctx *pulumi.Context,
	name string, args *ImageArgs, opts ...pulumi.ResourceOption) (*Image, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RootVolumeId == nil {
		return nil, errors.New("invalid value for required argument 'RootVolumeId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/instanceImage:InstanceImage"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Image
	err := ctx.RegisterResource("scaleway:instance/image:Image", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImage gets an existing Image resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageState, opts ...pulumi.ResourceOption) (*Image, error) {
	var resource Image
	err := ctx.ReadResource("scaleway:instance/image:Image", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Image resources.
type imageState struct {
	// List of IDs of the snapshots of the additional volumes to be attached to the image.
	AdditionalVolumeIds []string `pulumi:"additionalVolumeIds"`
	// The description of the extra volumes attached to the image.
	AdditionalVolumes []ImageAdditionalVolume `pulumi:"additionalVolumes"`
	// The architecture the image is compatible with. Possible values are: `x8664` or `arm`.
	Architecture *string `pulumi:"architecture"`
	// Date of the image creation.
	CreationDate *string `pulumi:"creationDate"`
	// ID of the server the image is based on (in case it is a backup).
	FromServerId *string `pulumi:"fromServerId"`
	// Date of image latest update.
	ModificationDate *string `pulumi:"modificationDate"`
	// The name of the image. If not provided it will be randomly generated.
	Name *string `pulumi:"name"`
	// The organization ID the image is associated with.
	OrganizationId *string `pulumi:"organizationId"`
	// The ID of the project the image is associated with.
	ProjectId *string `pulumi:"projectId"`
	// Set to `true` if the image is public.
	Public *bool `pulumi:"public"`
	// The ID of the snapshot of the volume to be used as root in the image.
	RootVolumeId *string `pulumi:"rootVolumeId"`
	// The description of the root volume attached to the image.
	RootVolumes []ImageRootVolume `pulumi:"rootVolumes"`
	// State of the image. Possible values are: `available`, `creating` or `error`.
	State *string `pulumi:"state"`
	// A list of tags to apply to the image.
	Tags []string `pulumi:"tags"`
	// The zone in which the image should be created.
	Zone *string `pulumi:"zone"`
}

type ImageState struct {
	// List of IDs of the snapshots of the additional volumes to be attached to the image.
	AdditionalVolumeIds pulumi.StringArrayInput
	// The description of the extra volumes attached to the image.
	AdditionalVolumes ImageAdditionalVolumeArrayInput
	// The architecture the image is compatible with. Possible values are: `x8664` or `arm`.
	Architecture pulumi.StringPtrInput
	// Date of the image creation.
	CreationDate pulumi.StringPtrInput
	// ID of the server the image is based on (in case it is a backup).
	FromServerId pulumi.StringPtrInput
	// Date of image latest update.
	ModificationDate pulumi.StringPtrInput
	// The name of the image. If not provided it will be randomly generated.
	Name pulumi.StringPtrInput
	// The organization ID the image is associated with.
	OrganizationId pulumi.StringPtrInput
	// The ID of the project the image is associated with.
	ProjectId pulumi.StringPtrInput
	// Set to `true` if the image is public.
	Public pulumi.BoolPtrInput
	// The ID of the snapshot of the volume to be used as root in the image.
	RootVolumeId pulumi.StringPtrInput
	// The description of the root volume attached to the image.
	RootVolumes ImageRootVolumeArrayInput
	// State of the image. Possible values are: `available`, `creating` or `error`.
	State pulumi.StringPtrInput
	// A list of tags to apply to the image.
	Tags pulumi.StringArrayInput
	// The zone in which the image should be created.
	Zone pulumi.StringPtrInput
}

func (ImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageState)(nil)).Elem()
}

type imageArgs struct {
	// List of IDs of the snapshots of the additional volumes to be attached to the image.
	AdditionalVolumeIds []string `pulumi:"additionalVolumeIds"`
	// The architecture the image is compatible with. Possible values are: `x8664` or `arm`.
	Architecture *string `pulumi:"architecture"`
	// The name of the image. If not provided it will be randomly generated.
	Name *string `pulumi:"name"`
	// The ID of the project the image is associated with.
	ProjectId *string `pulumi:"projectId"`
	// Set to `true` if the image is public.
	Public *bool `pulumi:"public"`
	// The ID of the snapshot of the volume to be used as root in the image.
	RootVolumeId string `pulumi:"rootVolumeId"`
	// A list of tags to apply to the image.
	Tags []string `pulumi:"tags"`
	// The zone in which the image should be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a Image resource.
type ImageArgs struct {
	// List of IDs of the snapshots of the additional volumes to be attached to the image.
	AdditionalVolumeIds pulumi.StringArrayInput
	// The architecture the image is compatible with. Possible values are: `x8664` or `arm`.
	Architecture pulumi.StringPtrInput
	// The name of the image. If not provided it will be randomly generated.
	Name pulumi.StringPtrInput
	// The ID of the project the image is associated with.
	ProjectId pulumi.StringPtrInput
	// Set to `true` if the image is public.
	Public pulumi.BoolPtrInput
	// The ID of the snapshot of the volume to be used as root in the image.
	RootVolumeId pulumi.StringInput
	// A list of tags to apply to the image.
	Tags pulumi.StringArrayInput
	// The zone in which the image should be created.
	Zone pulumi.StringPtrInput
}

func (ImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageArgs)(nil)).Elem()
}

type ImageInput interface {
	pulumi.Input

	ToImageOutput() ImageOutput
	ToImageOutputWithContext(ctx context.Context) ImageOutput
}

func (*Image) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (i *Image) ToImageOutput() ImageOutput {
	return i.ToImageOutputWithContext(context.Background())
}

func (i *Image) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput)
}

// ImageArrayInput is an input type that accepts ImageArray and ImageArrayOutput values.
// You can construct a concrete instance of `ImageArrayInput` via:
//
//	ImageArray{ ImageArgs{...} }
type ImageArrayInput interface {
	pulumi.Input

	ToImageArrayOutput() ImageArrayOutput
	ToImageArrayOutputWithContext(context.Context) ImageArrayOutput
}

type ImageArray []ImageInput

func (ImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (i ImageArray) ToImageArrayOutput() ImageArrayOutput {
	return i.ToImageArrayOutputWithContext(context.Background())
}

func (i ImageArray) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageArrayOutput)
}

// ImageMapInput is an input type that accepts ImageMap and ImageMapOutput values.
// You can construct a concrete instance of `ImageMapInput` via:
//
//	ImageMap{ "key": ImageArgs{...} }
type ImageMapInput interface {
	pulumi.Input

	ToImageMapOutput() ImageMapOutput
	ToImageMapOutputWithContext(context.Context) ImageMapOutput
}

type ImageMap map[string]ImageInput

func (ImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (i ImageMap) ToImageMapOutput() ImageMapOutput {
	return i.ToImageMapOutputWithContext(context.Background())
}

func (i ImageMap) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageMapOutput)
}

type ImageOutput struct{ *pulumi.OutputState }

func (ImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (o ImageOutput) ToImageOutput() ImageOutput {
	return o
}

func (o ImageOutput) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return o
}

// List of IDs of the snapshots of the additional volumes to be attached to the image.
func (o ImageOutput) AdditionalVolumeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Image) pulumi.StringArrayOutput { return v.AdditionalVolumeIds }).(pulumi.StringArrayOutput)
}

// The description of the extra volumes attached to the image.
func (o ImageOutput) AdditionalVolumes() ImageAdditionalVolumeArrayOutput {
	return o.ApplyT(func(v *Image) ImageAdditionalVolumeArrayOutput { return v.AdditionalVolumes }).(ImageAdditionalVolumeArrayOutput)
}

// The architecture the image is compatible with. Possible values are: `x8664` or `arm`.
func (o ImageOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.StringPtrOutput { return v.Architecture }).(pulumi.StringPtrOutput)
}

// Date of the image creation.
func (o ImageOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.CreationDate }).(pulumi.StringOutput)
}

// ID of the server the image is based on (in case it is a backup).
func (o ImageOutput) FromServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.FromServerId }).(pulumi.StringOutput)
}

// Date of image latest update.
func (o ImageOutput) ModificationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.ModificationDate }).(pulumi.StringOutput)
}

// The name of the image. If not provided it will be randomly generated.
func (o ImageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The organization ID the image is associated with.
func (o ImageOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The ID of the project the image is associated with.
func (o ImageOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Set to `true` if the image is public.
func (o ImageOutput) Public() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.BoolPtrOutput { return v.Public }).(pulumi.BoolPtrOutput)
}

// The ID of the snapshot of the volume to be used as root in the image.
func (o ImageOutput) RootVolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.RootVolumeId }).(pulumi.StringOutput)
}

// The description of the root volume attached to the image.
func (o ImageOutput) RootVolumes() ImageRootVolumeArrayOutput {
	return o.ApplyT(func(v *Image) ImageRootVolumeArrayOutput { return v.RootVolumes }).(ImageRootVolumeArrayOutput)
}

// State of the image. Possible values are: `available`, `creating` or `error`.
func (o ImageOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// A list of tags to apply to the image.
func (o ImageOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Image) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The zone in which the image should be created.
func (o ImageOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.StringPtrOutput { return v.Zone }).(pulumi.StringPtrOutput)
}

type ImageArrayOutput struct{ *pulumi.OutputState }

func (ImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (o ImageArrayOutput) ToImageArrayOutput() ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) Index(i pulumi.IntInput) ImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Image {
		return vs[0].([]*Image)[vs[1].(int)]
	}).(ImageOutput)
}

type ImageMapOutput struct{ *pulumi.OutputState }

func (ImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (o ImageMapOutput) ToImageMapOutput() ImageMapOutput {
	return o
}

func (o ImageMapOutput) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return o
}

func (o ImageMapOutput) MapIndex(k pulumi.StringInput) ImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Image {
		return vs[0].(map[string]*Image)[vs[1].(string)]
	}).(ImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageInput)(nil)).Elem(), &Image{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageArrayInput)(nil)).Elem(), ImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageMapInput)(nil)).Elem(), ImageMap{})
	pulumi.RegisterOutputType(ImageOutput{})
	pulumi.RegisterOutputType(ImageArrayOutput{})
	pulumi.RegisterOutputType(ImageMapOutput{})
}
