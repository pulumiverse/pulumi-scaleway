// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package instance

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway compute Instance IPs. For more information, see the [API documentation](https://www.scaleway.com/en/developers/api/instance/#path-ips-list-all-flexible-ips).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/instance"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := instance.NewIp(ctx, "server_ip", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IPs can be imported using the `{zone}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:instance/ip:Ip server_ip fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type Ip struct {
	pulumi.CustomResourceState

	// The IP address.
	Address pulumi.StringOutput `pulumi:"address"`
	// The organization ID the IP is associated with.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The IP Prefix.
	Prefix pulumi.StringOutput `pulumi:"prefix"`
	// `projectId`) The ID of the project the IP is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The reverse dns attached to this IP
	Reverse pulumi.StringOutput `pulumi:"reverse"`
	// The server associated with this IP
	ServerId pulumi.StringOutput `pulumi:"serverId"`
	// The tags associated with the IP.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The type of the IP (`routedIpv4`, `routedIpv6`), more information in [the documentation](https://www.scaleway.com/en/docs/compute/instances/api-cli/using-routed-ips/)
	Type pulumi.StringOutput `pulumi:"type"`
	// `zone`) The zone in which the IP should be reserved.
	Zone pulumi.StringPtrOutput `pulumi:"zone"`
}

// NewIp registers a new resource with the given unique name, arguments, and options.
func NewIp(ctx *pulumi.Context,
	name string, args *IpArgs, opts ...pulumi.ResourceOption) (*Ip, error) {
	if args == nil {
		args = &IpArgs{}
	}

	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/instanceIp:InstanceIp"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ip
	err := ctx.RegisterResource("scaleway:instance/ip:Ip", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIp gets an existing Ip resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpState, opts ...pulumi.ResourceOption) (*Ip, error) {
	var resource Ip
	err := ctx.ReadResource("scaleway:instance/ip:Ip", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ip resources.
type ipState struct {
	// The IP address.
	Address *string `pulumi:"address"`
	// The organization ID the IP is associated with.
	OrganizationId *string `pulumi:"organizationId"`
	// The IP Prefix.
	Prefix *string `pulumi:"prefix"`
	// `projectId`) The ID of the project the IP is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The reverse dns attached to this IP
	Reverse *string `pulumi:"reverse"`
	// The server associated with this IP
	ServerId *string `pulumi:"serverId"`
	// The tags associated with the IP.
	Tags []string `pulumi:"tags"`
	// The type of the IP (`routedIpv4`, `routedIpv6`), more information in [the documentation](https://www.scaleway.com/en/docs/compute/instances/api-cli/using-routed-ips/)
	Type *string `pulumi:"type"`
	// `zone`) The zone in which the IP should be reserved.
	Zone *string `pulumi:"zone"`
}

type IpState struct {
	// The IP address.
	Address pulumi.StringPtrInput
	// The organization ID the IP is associated with.
	OrganizationId pulumi.StringPtrInput
	// The IP Prefix.
	Prefix pulumi.StringPtrInput
	// `projectId`) The ID of the project the IP is associated with.
	ProjectId pulumi.StringPtrInput
	// The reverse dns attached to this IP
	Reverse pulumi.StringPtrInput
	// The server associated with this IP
	ServerId pulumi.StringPtrInput
	// The tags associated with the IP.
	Tags pulumi.StringArrayInput
	// The type of the IP (`routedIpv4`, `routedIpv6`), more information in [the documentation](https://www.scaleway.com/en/docs/compute/instances/api-cli/using-routed-ips/)
	Type pulumi.StringPtrInput
	// `zone`) The zone in which the IP should be reserved.
	Zone pulumi.StringPtrInput
}

func (IpState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipState)(nil)).Elem()
}

type ipArgs struct {
	// `projectId`) The ID of the project the IP is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The tags associated with the IP.
	Tags []string `pulumi:"tags"`
	// The type of the IP (`routedIpv4`, `routedIpv6`), more information in [the documentation](https://www.scaleway.com/en/docs/compute/instances/api-cli/using-routed-ips/)
	Type *string `pulumi:"type"`
	// `zone`) The zone in which the IP should be reserved.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a Ip resource.
type IpArgs struct {
	// `projectId`) The ID of the project the IP is associated with.
	ProjectId pulumi.StringPtrInput
	// The tags associated with the IP.
	Tags pulumi.StringArrayInput
	// The type of the IP (`routedIpv4`, `routedIpv6`), more information in [the documentation](https://www.scaleway.com/en/docs/compute/instances/api-cli/using-routed-ips/)
	Type pulumi.StringPtrInput
	// `zone`) The zone in which the IP should be reserved.
	Zone pulumi.StringPtrInput
}

func (IpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipArgs)(nil)).Elem()
}

type IpInput interface {
	pulumi.Input

	ToIpOutput() IpOutput
	ToIpOutputWithContext(ctx context.Context) IpOutput
}

func (*Ip) ElementType() reflect.Type {
	return reflect.TypeOf((**Ip)(nil)).Elem()
}

func (i *Ip) ToIpOutput() IpOutput {
	return i.ToIpOutputWithContext(context.Background())
}

func (i *Ip) ToIpOutputWithContext(ctx context.Context) IpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpOutput)
}

// IpArrayInput is an input type that accepts IpArray and IpArrayOutput values.
// You can construct a concrete instance of `IpArrayInput` via:
//
//	IpArray{ IpArgs{...} }
type IpArrayInput interface {
	pulumi.Input

	ToIpArrayOutput() IpArrayOutput
	ToIpArrayOutputWithContext(context.Context) IpArrayOutput
}

type IpArray []IpInput

func (IpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ip)(nil)).Elem()
}

func (i IpArray) ToIpArrayOutput() IpArrayOutput {
	return i.ToIpArrayOutputWithContext(context.Background())
}

func (i IpArray) ToIpArrayOutputWithContext(ctx context.Context) IpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpArrayOutput)
}

// IpMapInput is an input type that accepts IpMap and IpMapOutput values.
// You can construct a concrete instance of `IpMapInput` via:
//
//	IpMap{ "key": IpArgs{...} }
type IpMapInput interface {
	pulumi.Input

	ToIpMapOutput() IpMapOutput
	ToIpMapOutputWithContext(context.Context) IpMapOutput
}

type IpMap map[string]IpInput

func (IpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ip)(nil)).Elem()
}

func (i IpMap) ToIpMapOutput() IpMapOutput {
	return i.ToIpMapOutputWithContext(context.Background())
}

func (i IpMap) ToIpMapOutputWithContext(ctx context.Context) IpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpMapOutput)
}

type IpOutput struct{ *pulumi.OutputState }

func (IpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ip)(nil)).Elem()
}

func (o IpOutput) ToIpOutput() IpOutput {
	return o
}

func (o IpOutput) ToIpOutputWithContext(ctx context.Context) IpOutput {
	return o
}

// The IP address.
func (o IpOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// The organization ID the IP is associated with.
func (o IpOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The IP Prefix.
func (o IpOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip) pulumi.StringOutput { return v.Prefix }).(pulumi.StringOutput)
}

// `projectId`) The ID of the project the IP is associated with.
func (o IpOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The reverse dns attached to this IP
func (o IpOutput) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip) pulumi.StringOutput { return v.Reverse }).(pulumi.StringOutput)
}

// The server associated with this IP
func (o IpOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

// The tags associated with the IP.
func (o IpOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Ip) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The type of the IP (`routedIpv4`, `routedIpv6`), more information in [the documentation](https://www.scaleway.com/en/docs/compute/instances/api-cli/using-routed-ips/)
func (o IpOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// `zone`) The zone in which the IP should be reserved.
func (o IpOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ip) pulumi.StringPtrOutput { return v.Zone }).(pulumi.StringPtrOutput)
}

type IpArrayOutput struct{ *pulumi.OutputState }

func (IpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ip)(nil)).Elem()
}

func (o IpArrayOutput) ToIpArrayOutput() IpArrayOutput {
	return o
}

func (o IpArrayOutput) ToIpArrayOutputWithContext(ctx context.Context) IpArrayOutput {
	return o
}

func (o IpArrayOutput) Index(i pulumi.IntInput) IpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ip {
		return vs[0].([]*Ip)[vs[1].(int)]
	}).(IpOutput)
}

type IpMapOutput struct{ *pulumi.OutputState }

func (IpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ip)(nil)).Elem()
}

func (o IpMapOutput) ToIpMapOutput() IpMapOutput {
	return o
}

func (o IpMapOutput) ToIpMapOutputWithContext(ctx context.Context) IpMapOutput {
	return o
}

func (o IpMapOutput) MapIndex(k pulumi.StringInput) IpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ip {
		return vs[0].(map[string]*Ip)[vs[1].(string)]
	}).(IpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpInput)(nil)).Elem(), &Ip{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpArrayInput)(nil)).Elem(), IpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpMapInput)(nil)).Elem(), IpMap{})
	pulumi.RegisterOutputType(IpOutput{})
	pulumi.RegisterOutputType(IpArrayOutput{})
	pulumi.RegisterOutputType(IpMapOutput{})
}
