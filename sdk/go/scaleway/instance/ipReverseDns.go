// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package instance

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Manages Scaleway compute Instance IPs Reverse DNS.
//
// Please check our [guide](https://www.scaleway.com/en/docs/compute/instances/how-to/configure-reverse-dns/) for more details
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/domain"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/instance"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			serverIp, err := instance.NewIp(ctx, "server_ip", nil)
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "tf_A", &domain.RecordArgs{
//				DnsZone:  pulumi.String("scaleway.com"),
//				Name:     pulumi.String("www"),
//				Type:     pulumi.String("A"),
//				Data:     serverIp.Address,
//				Ttl:      pulumi.Int(3600),
//				Priority: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = instance.NewIpReverseDns(ctx, "reverse", &instance.IpReverseDnsArgs{
//				IpId:    serverIp.ID(),
//				Reverse: pulumi.String("www.scaleway.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IPs reverse DNS can be imported using the `{zone}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:instance/ipReverseDns:IpReverseDns reverse fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type IpReverseDns struct {
	pulumi.CustomResourceState

	// The IP ID
	IpId pulumi.StringOutput `pulumi:"ipId"`
	// The reverse DNS for this IP.
	Reverse pulumi.StringOutput `pulumi:"reverse"`
	// `zone`) The zone in which the IP should be reserved.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewIpReverseDns registers a new resource with the given unique name, arguments, and options.
func NewIpReverseDns(ctx *pulumi.Context,
	name string, args *IpReverseDnsArgs, opts ...pulumi.ResourceOption) (*IpReverseDns, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpId == nil {
		return nil, errors.New("invalid value for required argument 'IpId'")
	}
	if args.Reverse == nil {
		return nil, errors.New("invalid value for required argument 'Reverse'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/instanceIpReverseDns:InstanceIpReverseDns"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpReverseDns
	err := ctx.RegisterResource("scaleway:instance/ipReverseDns:IpReverseDns", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpReverseDns gets an existing IpReverseDns resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpReverseDns(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpReverseDnsState, opts ...pulumi.ResourceOption) (*IpReverseDns, error) {
	var resource IpReverseDns
	err := ctx.ReadResource("scaleway:instance/ipReverseDns:IpReverseDns", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpReverseDns resources.
type ipReverseDnsState struct {
	// The IP ID
	IpId *string `pulumi:"ipId"`
	// The reverse DNS for this IP.
	Reverse *string `pulumi:"reverse"`
	// `zone`) The zone in which the IP should be reserved.
	Zone *string `pulumi:"zone"`
}

type IpReverseDnsState struct {
	// The IP ID
	IpId pulumi.StringPtrInput
	// The reverse DNS for this IP.
	Reverse pulumi.StringPtrInput
	// `zone`) The zone in which the IP should be reserved.
	Zone pulumi.StringPtrInput
}

func (IpReverseDnsState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipReverseDnsState)(nil)).Elem()
}

type ipReverseDnsArgs struct {
	// The IP ID
	IpId string `pulumi:"ipId"`
	// The reverse DNS for this IP.
	Reverse string `pulumi:"reverse"`
	// `zone`) The zone in which the IP should be reserved.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a IpReverseDns resource.
type IpReverseDnsArgs struct {
	// The IP ID
	IpId pulumi.StringInput
	// The reverse DNS for this IP.
	Reverse pulumi.StringInput
	// `zone`) The zone in which the IP should be reserved.
	Zone pulumi.StringPtrInput
}

func (IpReverseDnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipReverseDnsArgs)(nil)).Elem()
}

type IpReverseDnsInput interface {
	pulumi.Input

	ToIpReverseDnsOutput() IpReverseDnsOutput
	ToIpReverseDnsOutputWithContext(ctx context.Context) IpReverseDnsOutput
}

func (*IpReverseDns) ElementType() reflect.Type {
	return reflect.TypeOf((**IpReverseDns)(nil)).Elem()
}

func (i *IpReverseDns) ToIpReverseDnsOutput() IpReverseDnsOutput {
	return i.ToIpReverseDnsOutputWithContext(context.Background())
}

func (i *IpReverseDns) ToIpReverseDnsOutputWithContext(ctx context.Context) IpReverseDnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpReverseDnsOutput)
}

// IpReverseDnsArrayInput is an input type that accepts IpReverseDnsArray and IpReverseDnsArrayOutput values.
// You can construct a concrete instance of `IpReverseDnsArrayInput` via:
//
//	IpReverseDnsArray{ IpReverseDnsArgs{...} }
type IpReverseDnsArrayInput interface {
	pulumi.Input

	ToIpReverseDnsArrayOutput() IpReverseDnsArrayOutput
	ToIpReverseDnsArrayOutputWithContext(context.Context) IpReverseDnsArrayOutput
}

type IpReverseDnsArray []IpReverseDnsInput

func (IpReverseDnsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpReverseDns)(nil)).Elem()
}

func (i IpReverseDnsArray) ToIpReverseDnsArrayOutput() IpReverseDnsArrayOutput {
	return i.ToIpReverseDnsArrayOutputWithContext(context.Background())
}

func (i IpReverseDnsArray) ToIpReverseDnsArrayOutputWithContext(ctx context.Context) IpReverseDnsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpReverseDnsArrayOutput)
}

// IpReverseDnsMapInput is an input type that accepts IpReverseDnsMap and IpReverseDnsMapOutput values.
// You can construct a concrete instance of `IpReverseDnsMapInput` via:
//
//	IpReverseDnsMap{ "key": IpReverseDnsArgs{...} }
type IpReverseDnsMapInput interface {
	pulumi.Input

	ToIpReverseDnsMapOutput() IpReverseDnsMapOutput
	ToIpReverseDnsMapOutputWithContext(context.Context) IpReverseDnsMapOutput
}

type IpReverseDnsMap map[string]IpReverseDnsInput

func (IpReverseDnsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpReverseDns)(nil)).Elem()
}

func (i IpReverseDnsMap) ToIpReverseDnsMapOutput() IpReverseDnsMapOutput {
	return i.ToIpReverseDnsMapOutputWithContext(context.Background())
}

func (i IpReverseDnsMap) ToIpReverseDnsMapOutputWithContext(ctx context.Context) IpReverseDnsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpReverseDnsMapOutput)
}

type IpReverseDnsOutput struct{ *pulumi.OutputState }

func (IpReverseDnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpReverseDns)(nil)).Elem()
}

func (o IpReverseDnsOutput) ToIpReverseDnsOutput() IpReverseDnsOutput {
	return o
}

func (o IpReverseDnsOutput) ToIpReverseDnsOutputWithContext(ctx context.Context) IpReverseDnsOutput {
	return o
}

// The IP ID
func (o IpReverseDnsOutput) IpId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpReverseDns) pulumi.StringOutput { return v.IpId }).(pulumi.StringOutput)
}

// The reverse DNS for this IP.
func (o IpReverseDnsOutput) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v *IpReverseDns) pulumi.StringOutput { return v.Reverse }).(pulumi.StringOutput)
}

// `zone`) The zone in which the IP should be reserved.
func (o IpReverseDnsOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *IpReverseDns) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type IpReverseDnsArrayOutput struct{ *pulumi.OutputState }

func (IpReverseDnsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpReverseDns)(nil)).Elem()
}

func (o IpReverseDnsArrayOutput) ToIpReverseDnsArrayOutput() IpReverseDnsArrayOutput {
	return o
}

func (o IpReverseDnsArrayOutput) ToIpReverseDnsArrayOutputWithContext(ctx context.Context) IpReverseDnsArrayOutput {
	return o
}

func (o IpReverseDnsArrayOutput) Index(i pulumi.IntInput) IpReverseDnsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpReverseDns {
		return vs[0].([]*IpReverseDns)[vs[1].(int)]
	}).(IpReverseDnsOutput)
}

type IpReverseDnsMapOutput struct{ *pulumi.OutputState }

func (IpReverseDnsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpReverseDns)(nil)).Elem()
}

func (o IpReverseDnsMapOutput) ToIpReverseDnsMapOutput() IpReverseDnsMapOutput {
	return o
}

func (o IpReverseDnsMapOutput) ToIpReverseDnsMapOutputWithContext(ctx context.Context) IpReverseDnsMapOutput {
	return o
}

func (o IpReverseDnsMapOutput) MapIndex(k pulumi.StringInput) IpReverseDnsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpReverseDns {
		return vs[0].(map[string]*IpReverseDns)[vs[1].(string)]
	}).(IpReverseDnsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpReverseDnsInput)(nil)).Elem(), &IpReverseDns{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpReverseDnsArrayInput)(nil)).Elem(), IpReverseDnsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpReverseDnsMapInput)(nil)).Elem(), IpReverseDnsMap{})
	pulumi.RegisterOutputType(IpReverseDnsOutput{})
	pulumi.RegisterOutputType(IpReverseDnsArrayOutput{})
	pulumi.RegisterOutputType(IpReverseDnsMapOutput{})
}
