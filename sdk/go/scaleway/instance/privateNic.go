// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package instance

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Instance Private NICs. For more information, see
// the [API documentation](https://www.scaleway.com/en/developers/api/instance/#path-private-nics-list-all-private-nics).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/instance"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := instance.NewPrivateNic(ctx, "pnic01", &instance.PrivateNicArgs{
//				ServerId:         pulumi.String("fr-par-1/11111111-1111-1111-1111-111111111111"),
//				PrivateNetworkId: pulumi.String("fr-par-1/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With zone
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/instance"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/network"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			pn01, err := network.NewPrivateNetwork(ctx, "pn01", &network.PrivateNetworkArgs{
//				Name:   pulumi.String("private_network_instance"),
//				Region: pulumi.String("fr-par"),
//			})
//			if err != nil {
//				return err
//			}
//			base, err := instance.NewServer(ctx, "base", &instance.ServerArgs{
//				Image: pulumi.String("ubuntu_jammy"),
//				Type:  pulumi.String("DEV1-S"),
//				Zone:  pn01.Zone,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = instance.NewPrivateNic(ctx, "pnic01", &instance.PrivateNicArgs{
//				ServerId:         base.ID(),
//				PrivateNetworkId: pn01.ID(),
//				Zone:             pn01.Zone,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With IPAM IP IDs
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/instance"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/ipam"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/network"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			vpc01, err := network.NewVpc(ctx, "vpc01", &network.VpcArgs{
//				Name: pulumi.String("vpc_instance"),
//			})
//			if err != nil {
//				return err
//			}
//			pn01, err := network.NewPrivateNetwork(ctx, "pn01", &network.PrivateNetworkArgs{
//				Name: pulumi.String("private_network_instance"),
//				Ipv4Subnet: &network.PrivateNetworkIpv4SubnetArgs{
//					Subnet: pulumi.String("172.16.64.0/22"),
//				},
//				VpcId: vpc01.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			ip01, err := ipam.NewIp(ctx, "ip01", &ipam.IpArgs{
//				Address: pulumi.String("172.16.64.7"),
//				Sources: ipam.IpSourceArray{
//					&ipam.IpSourceArgs{
//						PrivateNetworkId: pn01.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			server01, err := instance.NewServer(ctx, "server01", &instance.ServerArgs{
//				Image: pulumi.String("ubuntu_focal"),
//				Type:  pulumi.String("PLAY2-MICRO"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = instance.NewPrivateNic(ctx, "pnic01", &instance.PrivateNicArgs{
//				PrivateNetworkId: pn01.ID(),
//				ServerId:         server01.ID(),
//				IpamIpIds: pulumi.StringArray{
//					ip01.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Private NICs can be imported using the `{zone}/{server_id}/{private_nic_id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:instance/privateNic:PrivateNic pnic01 fr-par-1/11111111-1111-1111-1111-111111111111/22222222-2222-2222-2222-222222222222
// ```
type PrivateNic struct {
	pulumi.CustomResourceState

	// IPAM ip list, should be for internal use only
	IpIds pulumi.StringArrayOutput `pulumi:"ipIds"`
	// IPAM IDs of a pre-reserved IP addresses to assign to the Instance in the requested private network.
	IpamIpIds pulumi.StringArrayOutput `pulumi:"ipamIpIds"`
	// The MAC address of the private NIC.
	MacAddress pulumi.StringOutput `pulumi:"macAddress"`
	// The list of private IPv4 and IPv6 addresses associated with the resource.
	PrivateIps PrivateNicPrivateIpArrayOutput `pulumi:"privateIps"`
	// The ID of the private network attached to.
	PrivateNetworkId pulumi.StringOutput `pulumi:"privateNetworkId"`
	// The ID of the server associated with.
	ServerId pulumi.StringOutput `pulumi:"serverId"`
	// The tags associated with the private NIC.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// `zone`) The zone in which the server must be created.
	Zone pulumi.StringPtrOutput `pulumi:"zone"`
}

// NewPrivateNic registers a new resource with the given unique name, arguments, and options.
func NewPrivateNic(ctx *pulumi.Context,
	name string, args *PrivateNicArgs, opts ...pulumi.ResourceOption) (*PrivateNic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PrivateNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'PrivateNetworkId'")
	}
	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/instancePrivateNic:InstancePrivateNic"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PrivateNic
	err := ctx.RegisterResource("scaleway:instance/privateNic:PrivateNic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrivateNic gets an existing PrivateNic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivateNic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrivateNicState, opts ...pulumi.ResourceOption) (*PrivateNic, error) {
	var resource PrivateNic
	err := ctx.ReadResource("scaleway:instance/privateNic:PrivateNic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrivateNic resources.
type privateNicState struct {
	// IPAM ip list, should be for internal use only
	IpIds []string `pulumi:"ipIds"`
	// IPAM IDs of a pre-reserved IP addresses to assign to the Instance in the requested private network.
	IpamIpIds []string `pulumi:"ipamIpIds"`
	// The MAC address of the private NIC.
	MacAddress *string `pulumi:"macAddress"`
	// The list of private IPv4 and IPv6 addresses associated with the resource.
	PrivateIps []PrivateNicPrivateIp `pulumi:"privateIps"`
	// The ID of the private network attached to.
	PrivateNetworkId *string `pulumi:"privateNetworkId"`
	// The ID of the server associated with.
	ServerId *string `pulumi:"serverId"`
	// The tags associated with the private NIC.
	Tags []string `pulumi:"tags"`
	// `zone`) The zone in which the server must be created.
	Zone *string `pulumi:"zone"`
}

type PrivateNicState struct {
	// IPAM ip list, should be for internal use only
	IpIds pulumi.StringArrayInput
	// IPAM IDs of a pre-reserved IP addresses to assign to the Instance in the requested private network.
	IpamIpIds pulumi.StringArrayInput
	// The MAC address of the private NIC.
	MacAddress pulumi.StringPtrInput
	// The list of private IPv4 and IPv6 addresses associated with the resource.
	PrivateIps PrivateNicPrivateIpArrayInput
	// The ID of the private network attached to.
	PrivateNetworkId pulumi.StringPtrInput
	// The ID of the server associated with.
	ServerId pulumi.StringPtrInput
	// The tags associated with the private NIC.
	Tags pulumi.StringArrayInput
	// `zone`) The zone in which the server must be created.
	Zone pulumi.StringPtrInput
}

func (PrivateNicState) ElementType() reflect.Type {
	return reflect.TypeOf((*privateNicState)(nil)).Elem()
}

type privateNicArgs struct {
	// IPAM ip list, should be for internal use only
	IpIds []string `pulumi:"ipIds"`
	// IPAM IDs of a pre-reserved IP addresses to assign to the Instance in the requested private network.
	IpamIpIds []string `pulumi:"ipamIpIds"`
	// The list of private IPv4 and IPv6 addresses associated with the resource.
	PrivateIps []PrivateNicPrivateIp `pulumi:"privateIps"`
	// The ID of the private network attached to.
	PrivateNetworkId string `pulumi:"privateNetworkId"`
	// The ID of the server associated with.
	ServerId string `pulumi:"serverId"`
	// The tags associated with the private NIC.
	Tags []string `pulumi:"tags"`
	// `zone`) The zone in which the server must be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a PrivateNic resource.
type PrivateNicArgs struct {
	// IPAM ip list, should be for internal use only
	IpIds pulumi.StringArrayInput
	// IPAM IDs of a pre-reserved IP addresses to assign to the Instance in the requested private network.
	IpamIpIds pulumi.StringArrayInput
	// The list of private IPv4 and IPv6 addresses associated with the resource.
	PrivateIps PrivateNicPrivateIpArrayInput
	// The ID of the private network attached to.
	PrivateNetworkId pulumi.StringInput
	// The ID of the server associated with.
	ServerId pulumi.StringInput
	// The tags associated with the private NIC.
	Tags pulumi.StringArrayInput
	// `zone`) The zone in which the server must be created.
	Zone pulumi.StringPtrInput
}

func (PrivateNicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*privateNicArgs)(nil)).Elem()
}

type PrivateNicInput interface {
	pulumi.Input

	ToPrivateNicOutput() PrivateNicOutput
	ToPrivateNicOutputWithContext(ctx context.Context) PrivateNicOutput
}

func (*PrivateNic) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateNic)(nil)).Elem()
}

func (i *PrivateNic) ToPrivateNicOutput() PrivateNicOutput {
	return i.ToPrivateNicOutputWithContext(context.Background())
}

func (i *PrivateNic) ToPrivateNicOutputWithContext(ctx context.Context) PrivateNicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateNicOutput)
}

// PrivateNicArrayInput is an input type that accepts PrivateNicArray and PrivateNicArrayOutput values.
// You can construct a concrete instance of `PrivateNicArrayInput` via:
//
//	PrivateNicArray{ PrivateNicArgs{...} }
type PrivateNicArrayInput interface {
	pulumi.Input

	ToPrivateNicArrayOutput() PrivateNicArrayOutput
	ToPrivateNicArrayOutputWithContext(context.Context) PrivateNicArrayOutput
}

type PrivateNicArray []PrivateNicInput

func (PrivateNicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrivateNic)(nil)).Elem()
}

func (i PrivateNicArray) ToPrivateNicArrayOutput() PrivateNicArrayOutput {
	return i.ToPrivateNicArrayOutputWithContext(context.Background())
}

func (i PrivateNicArray) ToPrivateNicArrayOutputWithContext(ctx context.Context) PrivateNicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateNicArrayOutput)
}

// PrivateNicMapInput is an input type that accepts PrivateNicMap and PrivateNicMapOutput values.
// You can construct a concrete instance of `PrivateNicMapInput` via:
//
//	PrivateNicMap{ "key": PrivateNicArgs{...} }
type PrivateNicMapInput interface {
	pulumi.Input

	ToPrivateNicMapOutput() PrivateNicMapOutput
	ToPrivateNicMapOutputWithContext(context.Context) PrivateNicMapOutput
}

type PrivateNicMap map[string]PrivateNicInput

func (PrivateNicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrivateNic)(nil)).Elem()
}

func (i PrivateNicMap) ToPrivateNicMapOutput() PrivateNicMapOutput {
	return i.ToPrivateNicMapOutputWithContext(context.Background())
}

func (i PrivateNicMap) ToPrivateNicMapOutputWithContext(ctx context.Context) PrivateNicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateNicMapOutput)
}

type PrivateNicOutput struct{ *pulumi.OutputState }

func (PrivateNicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateNic)(nil)).Elem()
}

func (o PrivateNicOutput) ToPrivateNicOutput() PrivateNicOutput {
	return o
}

func (o PrivateNicOutput) ToPrivateNicOutputWithContext(ctx context.Context) PrivateNicOutput {
	return o
}

// IPAM ip list, should be for internal use only
func (o PrivateNicOutput) IpIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PrivateNic) pulumi.StringArrayOutput { return v.IpIds }).(pulumi.StringArrayOutput)
}

// IPAM IDs of a pre-reserved IP addresses to assign to the Instance in the requested private network.
func (o PrivateNicOutput) IpamIpIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PrivateNic) pulumi.StringArrayOutput { return v.IpamIpIds }).(pulumi.StringArrayOutput)
}

// The MAC address of the private NIC.
func (o PrivateNicOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateNic) pulumi.StringOutput { return v.MacAddress }).(pulumi.StringOutput)
}

// The list of private IPv4 and IPv6 addresses associated with the resource.
func (o PrivateNicOutput) PrivateIps() PrivateNicPrivateIpArrayOutput {
	return o.ApplyT(func(v *PrivateNic) PrivateNicPrivateIpArrayOutput { return v.PrivateIps }).(PrivateNicPrivateIpArrayOutput)
}

// The ID of the private network attached to.
func (o PrivateNicOutput) PrivateNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateNic) pulumi.StringOutput { return v.PrivateNetworkId }).(pulumi.StringOutput)
}

// The ID of the server associated with.
func (o PrivateNicOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateNic) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

// The tags associated with the private NIC.
func (o PrivateNicOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PrivateNic) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// `zone`) The zone in which the server must be created.
func (o PrivateNicOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateNic) pulumi.StringPtrOutput { return v.Zone }).(pulumi.StringPtrOutput)
}

type PrivateNicArrayOutput struct{ *pulumi.OutputState }

func (PrivateNicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrivateNic)(nil)).Elem()
}

func (o PrivateNicArrayOutput) ToPrivateNicArrayOutput() PrivateNicArrayOutput {
	return o
}

func (o PrivateNicArrayOutput) ToPrivateNicArrayOutputWithContext(ctx context.Context) PrivateNicArrayOutput {
	return o
}

func (o PrivateNicArrayOutput) Index(i pulumi.IntInput) PrivateNicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PrivateNic {
		return vs[0].([]*PrivateNic)[vs[1].(int)]
	}).(PrivateNicOutput)
}

type PrivateNicMapOutput struct{ *pulumi.OutputState }

func (PrivateNicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrivateNic)(nil)).Elem()
}

func (o PrivateNicMapOutput) ToPrivateNicMapOutput() PrivateNicMapOutput {
	return o
}

func (o PrivateNicMapOutput) ToPrivateNicMapOutputWithContext(ctx context.Context) PrivateNicMapOutput {
	return o
}

func (o PrivateNicMapOutput) MapIndex(k pulumi.StringInput) PrivateNicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PrivateNic {
		return vs[0].(map[string]*PrivateNic)[vs[1].(string)]
	}).(PrivateNicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateNicInput)(nil)).Elem(), &PrivateNic{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateNicArrayInput)(nil)).Elem(), PrivateNicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateNicMapInput)(nil)).Elem(), PrivateNicMap{})
	pulumi.RegisterOutputType(PrivateNicOutput{})
	pulumi.RegisterOutputType(PrivateNicArrayOutput{})
	pulumi.RegisterOutputType(PrivateNicMapOutput{})
}
