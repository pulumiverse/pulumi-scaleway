// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package instance

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

var _ = internal.GetEnvOrDefault

type ImageAdditionalVolume struct {
	// Date of the volume creation.
	CreationDate *string `pulumi:"creationDate"`
	// The export URI of the volume.
	ExportUri *string `pulumi:"exportUri"`
	// ID of the server containing the volume.
	Id *string `pulumi:"id"`
	// Date of volume latest update.
	ModificationDate *string `pulumi:"modificationDate"`
	// The name of the image. If not provided it will be randomly generated.
	Name *string `pulumi:"name"`
	// The organization ID the volume is associated with.
	Organization *string `pulumi:"organization"`
	// ID of the project the volume is associated with
	Project *string `pulumi:"project"`
	// Description of the server containing the volume (in case the image is a backup from a server).
	Server map[string]string `pulumi:"server"`
	// The size of the volume.
	Size *int `pulumi:"size"`
	// State of the volume.
	State *string `pulumi:"state"`
	// A list of tags to apply to the image.
	Tags []string `pulumi:"tags"`
	// The type of volume, possible values are `lSsd` and `bSsd`.
	VolumeType *string `pulumi:"volumeType"`
	// The zone in which the image should be created.
	Zone *string `pulumi:"zone"`
}

// ImageAdditionalVolumeInput is an input type that accepts ImageAdditionalVolumeArgs and ImageAdditionalVolumeOutput values.
// You can construct a concrete instance of `ImageAdditionalVolumeInput` via:
//
//	ImageAdditionalVolumeArgs{...}
type ImageAdditionalVolumeInput interface {
	pulumi.Input

	ToImageAdditionalVolumeOutput() ImageAdditionalVolumeOutput
	ToImageAdditionalVolumeOutputWithContext(context.Context) ImageAdditionalVolumeOutput
}

type ImageAdditionalVolumeArgs struct {
	// Date of the volume creation.
	CreationDate pulumi.StringPtrInput `pulumi:"creationDate"`
	// The export URI of the volume.
	ExportUri pulumi.StringPtrInput `pulumi:"exportUri"`
	// ID of the server containing the volume.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Date of volume latest update.
	ModificationDate pulumi.StringPtrInput `pulumi:"modificationDate"`
	// The name of the image. If not provided it will be randomly generated.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The organization ID the volume is associated with.
	Organization pulumi.StringPtrInput `pulumi:"organization"`
	// ID of the project the volume is associated with
	Project pulumi.StringPtrInput `pulumi:"project"`
	// Description of the server containing the volume (in case the image is a backup from a server).
	Server pulumi.StringMapInput `pulumi:"server"`
	// The size of the volume.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// State of the volume.
	State pulumi.StringPtrInput `pulumi:"state"`
	// A list of tags to apply to the image.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// The type of volume, possible values are `lSsd` and `bSsd`.
	VolumeType pulumi.StringPtrInput `pulumi:"volumeType"`
	// The zone in which the image should be created.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (ImageAdditionalVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageAdditionalVolume)(nil)).Elem()
}

func (i ImageAdditionalVolumeArgs) ToImageAdditionalVolumeOutput() ImageAdditionalVolumeOutput {
	return i.ToImageAdditionalVolumeOutputWithContext(context.Background())
}

func (i ImageAdditionalVolumeArgs) ToImageAdditionalVolumeOutputWithContext(ctx context.Context) ImageAdditionalVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageAdditionalVolumeOutput)
}

// ImageAdditionalVolumeArrayInput is an input type that accepts ImageAdditionalVolumeArray and ImageAdditionalVolumeArrayOutput values.
// You can construct a concrete instance of `ImageAdditionalVolumeArrayInput` via:
//
//	ImageAdditionalVolumeArray{ ImageAdditionalVolumeArgs{...} }
type ImageAdditionalVolumeArrayInput interface {
	pulumi.Input

	ToImageAdditionalVolumeArrayOutput() ImageAdditionalVolumeArrayOutput
	ToImageAdditionalVolumeArrayOutputWithContext(context.Context) ImageAdditionalVolumeArrayOutput
}

type ImageAdditionalVolumeArray []ImageAdditionalVolumeInput

func (ImageAdditionalVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageAdditionalVolume)(nil)).Elem()
}

func (i ImageAdditionalVolumeArray) ToImageAdditionalVolumeArrayOutput() ImageAdditionalVolumeArrayOutput {
	return i.ToImageAdditionalVolumeArrayOutputWithContext(context.Background())
}

func (i ImageAdditionalVolumeArray) ToImageAdditionalVolumeArrayOutputWithContext(ctx context.Context) ImageAdditionalVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageAdditionalVolumeArrayOutput)
}

type ImageAdditionalVolumeOutput struct{ *pulumi.OutputState }

func (ImageAdditionalVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageAdditionalVolume)(nil)).Elem()
}

func (o ImageAdditionalVolumeOutput) ToImageAdditionalVolumeOutput() ImageAdditionalVolumeOutput {
	return o
}

func (o ImageAdditionalVolumeOutput) ToImageAdditionalVolumeOutputWithContext(ctx context.Context) ImageAdditionalVolumeOutput {
	return o
}

// Date of the volume creation.
func (o ImageAdditionalVolumeOutput) CreationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageAdditionalVolume) *string { return v.CreationDate }).(pulumi.StringPtrOutput)
}

// The export URI of the volume.
func (o ImageAdditionalVolumeOutput) ExportUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageAdditionalVolume) *string { return v.ExportUri }).(pulumi.StringPtrOutput)
}

// ID of the server containing the volume.
func (o ImageAdditionalVolumeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageAdditionalVolume) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Date of volume latest update.
func (o ImageAdditionalVolumeOutput) ModificationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageAdditionalVolume) *string { return v.ModificationDate }).(pulumi.StringPtrOutput)
}

// The name of the image. If not provided it will be randomly generated.
func (o ImageAdditionalVolumeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageAdditionalVolume) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The organization ID the volume is associated with.
func (o ImageAdditionalVolumeOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageAdditionalVolume) *string { return v.Organization }).(pulumi.StringPtrOutput)
}

// ID of the project the volume is associated with
func (o ImageAdditionalVolumeOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageAdditionalVolume) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// Description of the server containing the volume (in case the image is a backup from a server).
func (o ImageAdditionalVolumeOutput) Server() pulumi.StringMapOutput {
	return o.ApplyT(func(v ImageAdditionalVolume) map[string]string { return v.Server }).(pulumi.StringMapOutput)
}

// The size of the volume.
func (o ImageAdditionalVolumeOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageAdditionalVolume) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// State of the volume.
func (o ImageAdditionalVolumeOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageAdditionalVolume) *string { return v.State }).(pulumi.StringPtrOutput)
}

// A list of tags to apply to the image.
func (o ImageAdditionalVolumeOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImageAdditionalVolume) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The type of volume, possible values are `lSsd` and `bSsd`.
func (o ImageAdditionalVolumeOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageAdditionalVolume) *string { return v.VolumeType }).(pulumi.StringPtrOutput)
}

// The zone in which the image should be created.
func (o ImageAdditionalVolumeOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageAdditionalVolume) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type ImageAdditionalVolumeArrayOutput struct{ *pulumi.OutputState }

func (ImageAdditionalVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageAdditionalVolume)(nil)).Elem()
}

func (o ImageAdditionalVolumeArrayOutput) ToImageAdditionalVolumeArrayOutput() ImageAdditionalVolumeArrayOutput {
	return o
}

func (o ImageAdditionalVolumeArrayOutput) ToImageAdditionalVolumeArrayOutputWithContext(ctx context.Context) ImageAdditionalVolumeArrayOutput {
	return o
}

func (o ImageAdditionalVolumeArrayOutput) Index(i pulumi.IntInput) ImageAdditionalVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageAdditionalVolume {
		return vs[0].([]ImageAdditionalVolume)[vs[1].(int)]
	}).(ImageAdditionalVolumeOutput)
}

type PrivateNicPrivateIp struct {
	// The private IP address.
	Address *string `pulumi:"address"`
	// The ID of the IP address resource.
	Id *string `pulumi:"id"`
}

// PrivateNicPrivateIpInput is an input type that accepts PrivateNicPrivateIpArgs and PrivateNicPrivateIpOutput values.
// You can construct a concrete instance of `PrivateNicPrivateIpInput` via:
//
//	PrivateNicPrivateIpArgs{...}
type PrivateNicPrivateIpInput interface {
	pulumi.Input

	ToPrivateNicPrivateIpOutput() PrivateNicPrivateIpOutput
	ToPrivateNicPrivateIpOutputWithContext(context.Context) PrivateNicPrivateIpOutput
}

type PrivateNicPrivateIpArgs struct {
	// The private IP address.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The ID of the IP address resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (PrivateNicPrivateIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateNicPrivateIp)(nil)).Elem()
}

func (i PrivateNicPrivateIpArgs) ToPrivateNicPrivateIpOutput() PrivateNicPrivateIpOutput {
	return i.ToPrivateNicPrivateIpOutputWithContext(context.Background())
}

func (i PrivateNicPrivateIpArgs) ToPrivateNicPrivateIpOutputWithContext(ctx context.Context) PrivateNicPrivateIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateNicPrivateIpOutput)
}

// PrivateNicPrivateIpArrayInput is an input type that accepts PrivateNicPrivateIpArray and PrivateNicPrivateIpArrayOutput values.
// You can construct a concrete instance of `PrivateNicPrivateIpArrayInput` via:
//
//	PrivateNicPrivateIpArray{ PrivateNicPrivateIpArgs{...} }
type PrivateNicPrivateIpArrayInput interface {
	pulumi.Input

	ToPrivateNicPrivateIpArrayOutput() PrivateNicPrivateIpArrayOutput
	ToPrivateNicPrivateIpArrayOutputWithContext(context.Context) PrivateNicPrivateIpArrayOutput
}

type PrivateNicPrivateIpArray []PrivateNicPrivateIpInput

func (PrivateNicPrivateIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateNicPrivateIp)(nil)).Elem()
}

func (i PrivateNicPrivateIpArray) ToPrivateNicPrivateIpArrayOutput() PrivateNicPrivateIpArrayOutput {
	return i.ToPrivateNicPrivateIpArrayOutputWithContext(context.Background())
}

func (i PrivateNicPrivateIpArray) ToPrivateNicPrivateIpArrayOutputWithContext(ctx context.Context) PrivateNicPrivateIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateNicPrivateIpArrayOutput)
}

type PrivateNicPrivateIpOutput struct{ *pulumi.OutputState }

func (PrivateNicPrivateIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateNicPrivateIp)(nil)).Elem()
}

func (o PrivateNicPrivateIpOutput) ToPrivateNicPrivateIpOutput() PrivateNicPrivateIpOutput {
	return o
}

func (o PrivateNicPrivateIpOutput) ToPrivateNicPrivateIpOutputWithContext(ctx context.Context) PrivateNicPrivateIpOutput {
	return o
}

// The private IP address.
func (o PrivateNicPrivateIpOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateNicPrivateIp) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The ID of the IP address resource.
func (o PrivateNicPrivateIpOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateNicPrivateIp) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type PrivateNicPrivateIpArrayOutput struct{ *pulumi.OutputState }

func (PrivateNicPrivateIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateNicPrivateIp)(nil)).Elem()
}

func (o PrivateNicPrivateIpArrayOutput) ToPrivateNicPrivateIpArrayOutput() PrivateNicPrivateIpArrayOutput {
	return o
}

func (o PrivateNicPrivateIpArrayOutput) ToPrivateNicPrivateIpArrayOutputWithContext(ctx context.Context) PrivateNicPrivateIpArrayOutput {
	return o
}

func (o PrivateNicPrivateIpArrayOutput) Index(i pulumi.IntInput) PrivateNicPrivateIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateNicPrivateIp {
		return vs[0].([]PrivateNicPrivateIp)[vs[1].(int)]
	}).(PrivateNicPrivateIpOutput)
}

type SecurityGroupInboundRule struct {
	// The action to take when rule match. Possible values are: `accept` or `drop`.
	Action string `pulumi:"action"`
	// The ip this rule apply to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
	//
	// Deprecated: Ip address is deprecated. Please use ipRange instead
	Ip *string `pulumi:"ip"`
	// The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
	IpRange *string `pulumi:"ipRange"`
	// The port this rule applies to. If no `port` nor `portRange` are specified, the rule will apply to all port. Only one of `port` and `portRange` should be specified.
	Port *int `pulumi:"port"`
	// Computed port range for this rule (e.g: 1-1024, 22-22)
	PortRange *string `pulumi:"portRange"`
	// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
	Protocol *string `pulumi:"protocol"`
}

// SecurityGroupInboundRuleInput is an input type that accepts SecurityGroupInboundRuleArgs and SecurityGroupInboundRuleOutput values.
// You can construct a concrete instance of `SecurityGroupInboundRuleInput` via:
//
//	SecurityGroupInboundRuleArgs{...}
type SecurityGroupInboundRuleInput interface {
	pulumi.Input

	ToSecurityGroupInboundRuleOutput() SecurityGroupInboundRuleOutput
	ToSecurityGroupInboundRuleOutputWithContext(context.Context) SecurityGroupInboundRuleOutput
}

type SecurityGroupInboundRuleArgs struct {
	// The action to take when rule match. Possible values are: `accept` or `drop`.
	Action pulumi.StringInput `pulumi:"action"`
	// The ip this rule apply to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
	//
	// Deprecated: Ip address is deprecated. Please use ipRange instead
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
	IpRange pulumi.StringPtrInput `pulumi:"ipRange"`
	// The port this rule applies to. If no `port` nor `portRange` are specified, the rule will apply to all port. Only one of `port` and `portRange` should be specified.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Computed port range for this rule (e.g: 1-1024, 22-22)
	PortRange pulumi.StringPtrInput `pulumi:"portRange"`
	// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (SecurityGroupInboundRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupInboundRule)(nil)).Elem()
}

func (i SecurityGroupInboundRuleArgs) ToSecurityGroupInboundRuleOutput() SecurityGroupInboundRuleOutput {
	return i.ToSecurityGroupInboundRuleOutputWithContext(context.Background())
}

func (i SecurityGroupInboundRuleArgs) ToSecurityGroupInboundRuleOutputWithContext(ctx context.Context) SecurityGroupInboundRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupInboundRuleOutput)
}

// SecurityGroupInboundRuleArrayInput is an input type that accepts SecurityGroupInboundRuleArray and SecurityGroupInboundRuleArrayOutput values.
// You can construct a concrete instance of `SecurityGroupInboundRuleArrayInput` via:
//
//	SecurityGroupInboundRuleArray{ SecurityGroupInboundRuleArgs{...} }
type SecurityGroupInboundRuleArrayInput interface {
	pulumi.Input

	ToSecurityGroupInboundRuleArrayOutput() SecurityGroupInboundRuleArrayOutput
	ToSecurityGroupInboundRuleArrayOutputWithContext(context.Context) SecurityGroupInboundRuleArrayOutput
}

type SecurityGroupInboundRuleArray []SecurityGroupInboundRuleInput

func (SecurityGroupInboundRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupInboundRule)(nil)).Elem()
}

func (i SecurityGroupInboundRuleArray) ToSecurityGroupInboundRuleArrayOutput() SecurityGroupInboundRuleArrayOutput {
	return i.ToSecurityGroupInboundRuleArrayOutputWithContext(context.Background())
}

func (i SecurityGroupInboundRuleArray) ToSecurityGroupInboundRuleArrayOutputWithContext(ctx context.Context) SecurityGroupInboundRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupInboundRuleArrayOutput)
}

type SecurityGroupInboundRuleOutput struct{ *pulumi.OutputState }

func (SecurityGroupInboundRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupInboundRule)(nil)).Elem()
}

func (o SecurityGroupInboundRuleOutput) ToSecurityGroupInboundRuleOutput() SecurityGroupInboundRuleOutput {
	return o
}

func (o SecurityGroupInboundRuleOutput) ToSecurityGroupInboundRuleOutputWithContext(ctx context.Context) SecurityGroupInboundRuleOutput {
	return o
}

// The action to take when rule match. Possible values are: `accept` or `drop`.
func (o SecurityGroupInboundRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityGroupInboundRule) string { return v.Action }).(pulumi.StringOutput)
}

// The ip this rule apply to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
//
// Deprecated: Ip address is deprecated. Please use ipRange instead
func (o SecurityGroupInboundRuleOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupInboundRule) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
func (o SecurityGroupInboundRuleOutput) IpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupInboundRule) *string { return v.IpRange }).(pulumi.StringPtrOutput)
}

// The port this rule applies to. If no `port` nor `portRange` are specified, the rule will apply to all port. Only one of `port` and `portRange` should be specified.
func (o SecurityGroupInboundRuleOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityGroupInboundRule) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Computed port range for this rule (e.g: 1-1024, 22-22)
func (o SecurityGroupInboundRuleOutput) PortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupInboundRule) *string { return v.PortRange }).(pulumi.StringPtrOutput)
}

// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
func (o SecurityGroupInboundRuleOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupInboundRule) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type SecurityGroupInboundRuleArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupInboundRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupInboundRule)(nil)).Elem()
}

func (o SecurityGroupInboundRuleArrayOutput) ToSecurityGroupInboundRuleArrayOutput() SecurityGroupInboundRuleArrayOutput {
	return o
}

func (o SecurityGroupInboundRuleArrayOutput) ToSecurityGroupInboundRuleArrayOutputWithContext(ctx context.Context) SecurityGroupInboundRuleArrayOutput {
	return o
}

func (o SecurityGroupInboundRuleArrayOutput) Index(i pulumi.IntInput) SecurityGroupInboundRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityGroupInboundRule {
		return vs[0].([]SecurityGroupInboundRule)[vs[1].(int)]
	}).(SecurityGroupInboundRuleOutput)
}

type SecurityGroupOutboundRule struct {
	// Action when rule match request (drop or accept)
	Action string `pulumi:"action"`
	// Ip address for this rule (e.g: 1.1.1.1). Only one of ip or ipRange should be provided
	//
	// Deprecated: Ip address is deprecated. Please use ipRange instead
	Ip *string `pulumi:"ip"`
	// Ip range for this rule (e.g: 192.168.1.0/24). Only one of ip or ipRange should be provided
	IpRange *string `pulumi:"ipRange"`
	// Network port for this rule
	Port *int `pulumi:"port"`
	// Computed port range for this rule (e.g: 1-1024, 22-22)
	PortRange *string `pulumi:"portRange"`
	// Protocol for this rule (TCP, UDP, ICMP or ANY)
	Protocol *string `pulumi:"protocol"`
}

// SecurityGroupOutboundRuleInput is an input type that accepts SecurityGroupOutboundRuleArgs and SecurityGroupOutboundRuleOutput values.
// You can construct a concrete instance of `SecurityGroupOutboundRuleInput` via:
//
//	SecurityGroupOutboundRuleArgs{...}
type SecurityGroupOutboundRuleInput interface {
	pulumi.Input

	ToSecurityGroupOutboundRuleOutput() SecurityGroupOutboundRuleOutput
	ToSecurityGroupOutboundRuleOutputWithContext(context.Context) SecurityGroupOutboundRuleOutput
}

type SecurityGroupOutboundRuleArgs struct {
	// Action when rule match request (drop or accept)
	Action pulumi.StringInput `pulumi:"action"`
	// Ip address for this rule (e.g: 1.1.1.1). Only one of ip or ipRange should be provided
	//
	// Deprecated: Ip address is deprecated. Please use ipRange instead
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// Ip range for this rule (e.g: 192.168.1.0/24). Only one of ip or ipRange should be provided
	IpRange pulumi.StringPtrInput `pulumi:"ipRange"`
	// Network port for this rule
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Computed port range for this rule (e.g: 1-1024, 22-22)
	PortRange pulumi.StringPtrInput `pulumi:"portRange"`
	// Protocol for this rule (TCP, UDP, ICMP or ANY)
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (SecurityGroupOutboundRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupOutboundRule)(nil)).Elem()
}

func (i SecurityGroupOutboundRuleArgs) ToSecurityGroupOutboundRuleOutput() SecurityGroupOutboundRuleOutput {
	return i.ToSecurityGroupOutboundRuleOutputWithContext(context.Background())
}

func (i SecurityGroupOutboundRuleArgs) ToSecurityGroupOutboundRuleOutputWithContext(ctx context.Context) SecurityGroupOutboundRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupOutboundRuleOutput)
}

// SecurityGroupOutboundRuleArrayInput is an input type that accepts SecurityGroupOutboundRuleArray and SecurityGroupOutboundRuleArrayOutput values.
// You can construct a concrete instance of `SecurityGroupOutboundRuleArrayInput` via:
//
//	SecurityGroupOutboundRuleArray{ SecurityGroupOutboundRuleArgs{...} }
type SecurityGroupOutboundRuleArrayInput interface {
	pulumi.Input

	ToSecurityGroupOutboundRuleArrayOutput() SecurityGroupOutboundRuleArrayOutput
	ToSecurityGroupOutboundRuleArrayOutputWithContext(context.Context) SecurityGroupOutboundRuleArrayOutput
}

type SecurityGroupOutboundRuleArray []SecurityGroupOutboundRuleInput

func (SecurityGroupOutboundRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupOutboundRule)(nil)).Elem()
}

func (i SecurityGroupOutboundRuleArray) ToSecurityGroupOutboundRuleArrayOutput() SecurityGroupOutboundRuleArrayOutput {
	return i.ToSecurityGroupOutboundRuleArrayOutputWithContext(context.Background())
}

func (i SecurityGroupOutboundRuleArray) ToSecurityGroupOutboundRuleArrayOutputWithContext(ctx context.Context) SecurityGroupOutboundRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupOutboundRuleArrayOutput)
}

type SecurityGroupOutboundRuleOutput struct{ *pulumi.OutputState }

func (SecurityGroupOutboundRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupOutboundRule)(nil)).Elem()
}

func (o SecurityGroupOutboundRuleOutput) ToSecurityGroupOutboundRuleOutput() SecurityGroupOutboundRuleOutput {
	return o
}

func (o SecurityGroupOutboundRuleOutput) ToSecurityGroupOutboundRuleOutputWithContext(ctx context.Context) SecurityGroupOutboundRuleOutput {
	return o
}

// Action when rule match request (drop or accept)
func (o SecurityGroupOutboundRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityGroupOutboundRule) string { return v.Action }).(pulumi.StringOutput)
}

// Ip address for this rule (e.g: 1.1.1.1). Only one of ip or ipRange should be provided
//
// Deprecated: Ip address is deprecated. Please use ipRange instead
func (o SecurityGroupOutboundRuleOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupOutboundRule) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// Ip range for this rule (e.g: 192.168.1.0/24). Only one of ip or ipRange should be provided
func (o SecurityGroupOutboundRuleOutput) IpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupOutboundRule) *string { return v.IpRange }).(pulumi.StringPtrOutput)
}

// Network port for this rule
func (o SecurityGroupOutboundRuleOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityGroupOutboundRule) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Computed port range for this rule (e.g: 1-1024, 22-22)
func (o SecurityGroupOutboundRuleOutput) PortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupOutboundRule) *string { return v.PortRange }).(pulumi.StringPtrOutput)
}

// Protocol for this rule (TCP, UDP, ICMP or ANY)
func (o SecurityGroupOutboundRuleOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupOutboundRule) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type SecurityGroupOutboundRuleArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupOutboundRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupOutboundRule)(nil)).Elem()
}

func (o SecurityGroupOutboundRuleArrayOutput) ToSecurityGroupOutboundRuleArrayOutput() SecurityGroupOutboundRuleArrayOutput {
	return o
}

func (o SecurityGroupOutboundRuleArrayOutput) ToSecurityGroupOutboundRuleArrayOutputWithContext(ctx context.Context) SecurityGroupOutboundRuleArrayOutput {
	return o
}

func (o SecurityGroupOutboundRuleArrayOutput) Index(i pulumi.IntInput) SecurityGroupOutboundRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityGroupOutboundRule {
		return vs[0].([]SecurityGroupOutboundRule)[vs[1].(int)]
	}).(SecurityGroupOutboundRuleOutput)
}

type SecurityGroupRulesInboundRule struct {
	// The action to take when rule match. Possible values are: `accept` or `drop`.
	Action string `pulumi:"action"`
	// The ip this rule apply to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
	//
	// Deprecated: Ip address is deprecated. Please use ipRange instead
	Ip *string `pulumi:"ip"`
	// The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
	IpRange *string `pulumi:"ipRange"`
	// The port this rule apply to. If no port is specified, rule will apply to all port.
	Port *int `pulumi:"port"`
	// Computed port range for this rule (e.g: 1-1024, 22-22)
	PortRange *string `pulumi:"portRange"`
	// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
	Protocol *string `pulumi:"protocol"`
}

// SecurityGroupRulesInboundRuleInput is an input type that accepts SecurityGroupRulesInboundRuleArgs and SecurityGroupRulesInboundRuleOutput values.
// You can construct a concrete instance of `SecurityGroupRulesInboundRuleInput` via:
//
//	SecurityGroupRulesInboundRuleArgs{...}
type SecurityGroupRulesInboundRuleInput interface {
	pulumi.Input

	ToSecurityGroupRulesInboundRuleOutput() SecurityGroupRulesInboundRuleOutput
	ToSecurityGroupRulesInboundRuleOutputWithContext(context.Context) SecurityGroupRulesInboundRuleOutput
}

type SecurityGroupRulesInboundRuleArgs struct {
	// The action to take when rule match. Possible values are: `accept` or `drop`.
	Action pulumi.StringInput `pulumi:"action"`
	// The ip this rule apply to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
	//
	// Deprecated: Ip address is deprecated. Please use ipRange instead
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
	IpRange pulumi.StringPtrInput `pulumi:"ipRange"`
	// The port this rule apply to. If no port is specified, rule will apply to all port.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Computed port range for this rule (e.g: 1-1024, 22-22)
	PortRange pulumi.StringPtrInput `pulumi:"portRange"`
	// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (SecurityGroupRulesInboundRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupRulesInboundRule)(nil)).Elem()
}

func (i SecurityGroupRulesInboundRuleArgs) ToSecurityGroupRulesInboundRuleOutput() SecurityGroupRulesInboundRuleOutput {
	return i.ToSecurityGroupRulesInboundRuleOutputWithContext(context.Background())
}

func (i SecurityGroupRulesInboundRuleArgs) ToSecurityGroupRulesInboundRuleOutputWithContext(ctx context.Context) SecurityGroupRulesInboundRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRulesInboundRuleOutput)
}

// SecurityGroupRulesInboundRuleArrayInput is an input type that accepts SecurityGroupRulesInboundRuleArray and SecurityGroupRulesInboundRuleArrayOutput values.
// You can construct a concrete instance of `SecurityGroupRulesInboundRuleArrayInput` via:
//
//	SecurityGroupRulesInboundRuleArray{ SecurityGroupRulesInboundRuleArgs{...} }
type SecurityGroupRulesInboundRuleArrayInput interface {
	pulumi.Input

	ToSecurityGroupRulesInboundRuleArrayOutput() SecurityGroupRulesInboundRuleArrayOutput
	ToSecurityGroupRulesInboundRuleArrayOutputWithContext(context.Context) SecurityGroupRulesInboundRuleArrayOutput
}

type SecurityGroupRulesInboundRuleArray []SecurityGroupRulesInboundRuleInput

func (SecurityGroupRulesInboundRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupRulesInboundRule)(nil)).Elem()
}

func (i SecurityGroupRulesInboundRuleArray) ToSecurityGroupRulesInboundRuleArrayOutput() SecurityGroupRulesInboundRuleArrayOutput {
	return i.ToSecurityGroupRulesInboundRuleArrayOutputWithContext(context.Background())
}

func (i SecurityGroupRulesInboundRuleArray) ToSecurityGroupRulesInboundRuleArrayOutputWithContext(ctx context.Context) SecurityGroupRulesInboundRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRulesInboundRuleArrayOutput)
}

type SecurityGroupRulesInboundRuleOutput struct{ *pulumi.OutputState }

func (SecurityGroupRulesInboundRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupRulesInboundRule)(nil)).Elem()
}

func (o SecurityGroupRulesInboundRuleOutput) ToSecurityGroupRulesInboundRuleOutput() SecurityGroupRulesInboundRuleOutput {
	return o
}

func (o SecurityGroupRulesInboundRuleOutput) ToSecurityGroupRulesInboundRuleOutputWithContext(ctx context.Context) SecurityGroupRulesInboundRuleOutput {
	return o
}

// The action to take when rule match. Possible values are: `accept` or `drop`.
func (o SecurityGroupRulesInboundRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityGroupRulesInboundRule) string { return v.Action }).(pulumi.StringOutput)
}

// The ip this rule apply to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
//
// Deprecated: Ip address is deprecated. Please use ipRange instead
func (o SecurityGroupRulesInboundRuleOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupRulesInboundRule) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// The ip range (e.g `192.168.1.0/24`) this rule applies to. If no `ip` nor `ipRange` are specified, rule will apply to all ip. Only one of `ip` and `ipRange` should be specified.
func (o SecurityGroupRulesInboundRuleOutput) IpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupRulesInboundRule) *string { return v.IpRange }).(pulumi.StringPtrOutput)
}

// The port this rule apply to. If no port is specified, rule will apply to all port.
func (o SecurityGroupRulesInboundRuleOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityGroupRulesInboundRule) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Computed port range for this rule (e.g: 1-1024, 22-22)
func (o SecurityGroupRulesInboundRuleOutput) PortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupRulesInboundRule) *string { return v.PortRange }).(pulumi.StringPtrOutput)
}

// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
func (o SecurityGroupRulesInboundRuleOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupRulesInboundRule) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type SecurityGroupRulesInboundRuleArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupRulesInboundRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupRulesInboundRule)(nil)).Elem()
}

func (o SecurityGroupRulesInboundRuleArrayOutput) ToSecurityGroupRulesInboundRuleArrayOutput() SecurityGroupRulesInboundRuleArrayOutput {
	return o
}

func (o SecurityGroupRulesInboundRuleArrayOutput) ToSecurityGroupRulesInboundRuleArrayOutputWithContext(ctx context.Context) SecurityGroupRulesInboundRuleArrayOutput {
	return o
}

func (o SecurityGroupRulesInboundRuleArrayOutput) Index(i pulumi.IntInput) SecurityGroupRulesInboundRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityGroupRulesInboundRule {
		return vs[0].([]SecurityGroupRulesInboundRule)[vs[1].(int)]
	}).(SecurityGroupRulesInboundRuleOutput)
}

type SecurityGroupRulesOutboundRule struct {
	// Action when rule match request (drop or accept)
	Action string `pulumi:"action"`
	// Ip address for this rule (e.g: 1.1.1.1). Only one of ip or ipRange should be provided
	//
	// Deprecated: Ip address is deprecated. Please use ipRange instead
	Ip *string `pulumi:"ip"`
	// Ip range for this rule (e.g: 192.168.1.0/24). Only one of ip or ipRange should be provided
	IpRange *string `pulumi:"ipRange"`
	// Network port for this rule
	Port *int `pulumi:"port"`
	// Computed port range for this rule (e.g: 1-1024, 22-22)
	PortRange *string `pulumi:"portRange"`
	// Protocol for this rule (TCP, UDP, ICMP or ANY)
	Protocol *string `pulumi:"protocol"`
}

// SecurityGroupRulesOutboundRuleInput is an input type that accepts SecurityGroupRulesOutboundRuleArgs and SecurityGroupRulesOutboundRuleOutput values.
// You can construct a concrete instance of `SecurityGroupRulesOutboundRuleInput` via:
//
//	SecurityGroupRulesOutboundRuleArgs{...}
type SecurityGroupRulesOutboundRuleInput interface {
	pulumi.Input

	ToSecurityGroupRulesOutboundRuleOutput() SecurityGroupRulesOutboundRuleOutput
	ToSecurityGroupRulesOutboundRuleOutputWithContext(context.Context) SecurityGroupRulesOutboundRuleOutput
}

type SecurityGroupRulesOutboundRuleArgs struct {
	// Action when rule match request (drop or accept)
	Action pulumi.StringInput `pulumi:"action"`
	// Ip address for this rule (e.g: 1.1.1.1). Only one of ip or ipRange should be provided
	//
	// Deprecated: Ip address is deprecated. Please use ipRange instead
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// Ip range for this rule (e.g: 192.168.1.0/24). Only one of ip or ipRange should be provided
	IpRange pulumi.StringPtrInput `pulumi:"ipRange"`
	// Network port for this rule
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Computed port range for this rule (e.g: 1-1024, 22-22)
	PortRange pulumi.StringPtrInput `pulumi:"portRange"`
	// Protocol for this rule (TCP, UDP, ICMP or ANY)
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (SecurityGroupRulesOutboundRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupRulesOutboundRule)(nil)).Elem()
}

func (i SecurityGroupRulesOutboundRuleArgs) ToSecurityGroupRulesOutboundRuleOutput() SecurityGroupRulesOutboundRuleOutput {
	return i.ToSecurityGroupRulesOutboundRuleOutputWithContext(context.Background())
}

func (i SecurityGroupRulesOutboundRuleArgs) ToSecurityGroupRulesOutboundRuleOutputWithContext(ctx context.Context) SecurityGroupRulesOutboundRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRulesOutboundRuleOutput)
}

// SecurityGroupRulesOutboundRuleArrayInput is an input type that accepts SecurityGroupRulesOutboundRuleArray and SecurityGroupRulesOutboundRuleArrayOutput values.
// You can construct a concrete instance of `SecurityGroupRulesOutboundRuleArrayInput` via:
//
//	SecurityGroupRulesOutboundRuleArray{ SecurityGroupRulesOutboundRuleArgs{...} }
type SecurityGroupRulesOutboundRuleArrayInput interface {
	pulumi.Input

	ToSecurityGroupRulesOutboundRuleArrayOutput() SecurityGroupRulesOutboundRuleArrayOutput
	ToSecurityGroupRulesOutboundRuleArrayOutputWithContext(context.Context) SecurityGroupRulesOutboundRuleArrayOutput
}

type SecurityGroupRulesOutboundRuleArray []SecurityGroupRulesOutboundRuleInput

func (SecurityGroupRulesOutboundRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupRulesOutboundRule)(nil)).Elem()
}

func (i SecurityGroupRulesOutboundRuleArray) ToSecurityGroupRulesOutboundRuleArrayOutput() SecurityGroupRulesOutboundRuleArrayOutput {
	return i.ToSecurityGroupRulesOutboundRuleArrayOutputWithContext(context.Background())
}

func (i SecurityGroupRulesOutboundRuleArray) ToSecurityGroupRulesOutboundRuleArrayOutputWithContext(ctx context.Context) SecurityGroupRulesOutboundRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRulesOutboundRuleArrayOutput)
}

type SecurityGroupRulesOutboundRuleOutput struct{ *pulumi.OutputState }

func (SecurityGroupRulesOutboundRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupRulesOutboundRule)(nil)).Elem()
}

func (o SecurityGroupRulesOutboundRuleOutput) ToSecurityGroupRulesOutboundRuleOutput() SecurityGroupRulesOutboundRuleOutput {
	return o
}

func (o SecurityGroupRulesOutboundRuleOutput) ToSecurityGroupRulesOutboundRuleOutputWithContext(ctx context.Context) SecurityGroupRulesOutboundRuleOutput {
	return o
}

// Action when rule match request (drop or accept)
func (o SecurityGroupRulesOutboundRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityGroupRulesOutboundRule) string { return v.Action }).(pulumi.StringOutput)
}

// Ip address for this rule (e.g: 1.1.1.1). Only one of ip or ipRange should be provided
//
// Deprecated: Ip address is deprecated. Please use ipRange instead
func (o SecurityGroupRulesOutboundRuleOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupRulesOutboundRule) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// Ip range for this rule (e.g: 192.168.1.0/24). Only one of ip or ipRange should be provided
func (o SecurityGroupRulesOutboundRuleOutput) IpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupRulesOutboundRule) *string { return v.IpRange }).(pulumi.StringPtrOutput)
}

// Network port for this rule
func (o SecurityGroupRulesOutboundRuleOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityGroupRulesOutboundRule) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Computed port range for this rule (e.g: 1-1024, 22-22)
func (o SecurityGroupRulesOutboundRuleOutput) PortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupRulesOutboundRule) *string { return v.PortRange }).(pulumi.StringPtrOutput)
}

// Protocol for this rule (TCP, UDP, ICMP or ANY)
func (o SecurityGroupRulesOutboundRuleOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupRulesOutboundRule) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type SecurityGroupRulesOutboundRuleArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupRulesOutboundRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupRulesOutboundRule)(nil)).Elem()
}

func (o SecurityGroupRulesOutboundRuleArrayOutput) ToSecurityGroupRulesOutboundRuleArrayOutput() SecurityGroupRulesOutboundRuleArrayOutput {
	return o
}

func (o SecurityGroupRulesOutboundRuleArrayOutput) ToSecurityGroupRulesOutboundRuleArrayOutputWithContext(ctx context.Context) SecurityGroupRulesOutboundRuleArrayOutput {
	return o
}

func (o SecurityGroupRulesOutboundRuleArrayOutput) Index(i pulumi.IntInput) SecurityGroupRulesOutboundRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityGroupRulesOutboundRule {
		return vs[0].([]SecurityGroupRulesOutboundRule)[vs[1].(int)]
	}).(SecurityGroupRulesOutboundRuleOutput)
}

type ServerPrivateIp struct {
	// The private IP address.
	Address *string `pulumi:"address"`
	// The ID of the IP address resource.
	Id *string `pulumi:"id"`
}

// ServerPrivateIpInput is an input type that accepts ServerPrivateIpArgs and ServerPrivateIpOutput values.
// You can construct a concrete instance of `ServerPrivateIpInput` via:
//
//	ServerPrivateIpArgs{...}
type ServerPrivateIpInput interface {
	pulumi.Input

	ToServerPrivateIpOutput() ServerPrivateIpOutput
	ToServerPrivateIpOutputWithContext(context.Context) ServerPrivateIpOutput
}

type ServerPrivateIpArgs struct {
	// The private IP address.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The ID of the IP address resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (ServerPrivateIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerPrivateIp)(nil)).Elem()
}

func (i ServerPrivateIpArgs) ToServerPrivateIpOutput() ServerPrivateIpOutput {
	return i.ToServerPrivateIpOutputWithContext(context.Background())
}

func (i ServerPrivateIpArgs) ToServerPrivateIpOutputWithContext(ctx context.Context) ServerPrivateIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerPrivateIpOutput)
}

// ServerPrivateIpArrayInput is an input type that accepts ServerPrivateIpArray and ServerPrivateIpArrayOutput values.
// You can construct a concrete instance of `ServerPrivateIpArrayInput` via:
//
//	ServerPrivateIpArray{ ServerPrivateIpArgs{...} }
type ServerPrivateIpArrayInput interface {
	pulumi.Input

	ToServerPrivateIpArrayOutput() ServerPrivateIpArrayOutput
	ToServerPrivateIpArrayOutputWithContext(context.Context) ServerPrivateIpArrayOutput
}

type ServerPrivateIpArray []ServerPrivateIpInput

func (ServerPrivateIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerPrivateIp)(nil)).Elem()
}

func (i ServerPrivateIpArray) ToServerPrivateIpArrayOutput() ServerPrivateIpArrayOutput {
	return i.ToServerPrivateIpArrayOutputWithContext(context.Background())
}

func (i ServerPrivateIpArray) ToServerPrivateIpArrayOutputWithContext(ctx context.Context) ServerPrivateIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerPrivateIpArrayOutput)
}

type ServerPrivateIpOutput struct{ *pulumi.OutputState }

func (ServerPrivateIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerPrivateIp)(nil)).Elem()
}

func (o ServerPrivateIpOutput) ToServerPrivateIpOutput() ServerPrivateIpOutput {
	return o
}

func (o ServerPrivateIpOutput) ToServerPrivateIpOutputWithContext(ctx context.Context) ServerPrivateIpOutput {
	return o
}

// The private IP address.
func (o ServerPrivateIpOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerPrivateIp) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The ID of the IP address resource.
func (o ServerPrivateIpOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerPrivateIp) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type ServerPrivateIpArrayOutput struct{ *pulumi.OutputState }

func (ServerPrivateIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerPrivateIp)(nil)).Elem()
}

func (o ServerPrivateIpArrayOutput) ToServerPrivateIpArrayOutput() ServerPrivateIpArrayOutput {
	return o
}

func (o ServerPrivateIpArrayOutput) ToServerPrivateIpArrayOutputWithContext(ctx context.Context) ServerPrivateIpArrayOutput {
	return o
}

func (o ServerPrivateIpArrayOutput) Index(i pulumi.IntInput) ServerPrivateIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerPrivateIp {
		return vs[0].([]ServerPrivateIp)[vs[1].(int)]
	}).(ServerPrivateIpOutput)
}

type ServerPrivateNetwork struct {
	// MAC address of the NIC
	MacAddress *string `pulumi:"macAddress"`
	// The Private Network ID
	PnId string `pulumi:"pnId"`
	// The ID of the NIC
	PnicId *string `pulumi:"pnicId"`
	// The private NIC state
	Status *string `pulumi:"status"`
	// `zone`) The zone in which the server should be created.
	Zone *string `pulumi:"zone"`
}

// ServerPrivateNetworkInput is an input type that accepts ServerPrivateNetworkArgs and ServerPrivateNetworkOutput values.
// You can construct a concrete instance of `ServerPrivateNetworkInput` via:
//
//	ServerPrivateNetworkArgs{...}
type ServerPrivateNetworkInput interface {
	pulumi.Input

	ToServerPrivateNetworkOutput() ServerPrivateNetworkOutput
	ToServerPrivateNetworkOutputWithContext(context.Context) ServerPrivateNetworkOutput
}

type ServerPrivateNetworkArgs struct {
	// MAC address of the NIC
	MacAddress pulumi.StringPtrInput `pulumi:"macAddress"`
	// The Private Network ID
	PnId pulumi.StringInput `pulumi:"pnId"`
	// The ID of the NIC
	PnicId pulumi.StringPtrInput `pulumi:"pnicId"`
	// The private NIC state
	Status pulumi.StringPtrInput `pulumi:"status"`
	// `zone`) The zone in which the server should be created.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (ServerPrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerPrivateNetwork)(nil)).Elem()
}

func (i ServerPrivateNetworkArgs) ToServerPrivateNetworkOutput() ServerPrivateNetworkOutput {
	return i.ToServerPrivateNetworkOutputWithContext(context.Background())
}

func (i ServerPrivateNetworkArgs) ToServerPrivateNetworkOutputWithContext(ctx context.Context) ServerPrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerPrivateNetworkOutput)
}

// ServerPrivateNetworkArrayInput is an input type that accepts ServerPrivateNetworkArray and ServerPrivateNetworkArrayOutput values.
// You can construct a concrete instance of `ServerPrivateNetworkArrayInput` via:
//
//	ServerPrivateNetworkArray{ ServerPrivateNetworkArgs{...} }
type ServerPrivateNetworkArrayInput interface {
	pulumi.Input

	ToServerPrivateNetworkArrayOutput() ServerPrivateNetworkArrayOutput
	ToServerPrivateNetworkArrayOutputWithContext(context.Context) ServerPrivateNetworkArrayOutput
}

type ServerPrivateNetworkArray []ServerPrivateNetworkInput

func (ServerPrivateNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerPrivateNetwork)(nil)).Elem()
}

func (i ServerPrivateNetworkArray) ToServerPrivateNetworkArrayOutput() ServerPrivateNetworkArrayOutput {
	return i.ToServerPrivateNetworkArrayOutputWithContext(context.Background())
}

func (i ServerPrivateNetworkArray) ToServerPrivateNetworkArrayOutputWithContext(ctx context.Context) ServerPrivateNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerPrivateNetworkArrayOutput)
}

type ServerPrivateNetworkOutput struct{ *pulumi.OutputState }

func (ServerPrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerPrivateNetwork)(nil)).Elem()
}

func (o ServerPrivateNetworkOutput) ToServerPrivateNetworkOutput() ServerPrivateNetworkOutput {
	return o
}

func (o ServerPrivateNetworkOutput) ToServerPrivateNetworkOutputWithContext(ctx context.Context) ServerPrivateNetworkOutput {
	return o
}

// MAC address of the NIC
func (o ServerPrivateNetworkOutput) MacAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerPrivateNetwork) *string { return v.MacAddress }).(pulumi.StringPtrOutput)
}

// The Private Network ID
func (o ServerPrivateNetworkOutput) PnId() pulumi.StringOutput {
	return o.ApplyT(func(v ServerPrivateNetwork) string { return v.PnId }).(pulumi.StringOutput)
}

// The ID of the NIC
func (o ServerPrivateNetworkOutput) PnicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerPrivateNetwork) *string { return v.PnicId }).(pulumi.StringPtrOutput)
}

// The private NIC state
func (o ServerPrivateNetworkOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerPrivateNetwork) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// `zone`) The zone in which the server should be created.
func (o ServerPrivateNetworkOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerPrivateNetwork) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type ServerPrivateNetworkArrayOutput struct{ *pulumi.OutputState }

func (ServerPrivateNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerPrivateNetwork)(nil)).Elem()
}

func (o ServerPrivateNetworkArrayOutput) ToServerPrivateNetworkArrayOutput() ServerPrivateNetworkArrayOutput {
	return o
}

func (o ServerPrivateNetworkArrayOutput) ToServerPrivateNetworkArrayOutputWithContext(ctx context.Context) ServerPrivateNetworkArrayOutput {
	return o
}

func (o ServerPrivateNetworkArrayOutput) Index(i pulumi.IntInput) ServerPrivateNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerPrivateNetwork {
		return vs[0].([]ServerPrivateNetwork)[vs[1].(int)]
	}).(ServerPrivateNetworkOutput)
}

type ServerPublicIp struct {
	// The address of the IP
	Address *string `pulumi:"address"`
	// The ID of the IP
	Id *string `pulumi:"id"`
}

// ServerPublicIpInput is an input type that accepts ServerPublicIpArgs and ServerPublicIpOutput values.
// You can construct a concrete instance of `ServerPublicIpInput` via:
//
//	ServerPublicIpArgs{...}
type ServerPublicIpInput interface {
	pulumi.Input

	ToServerPublicIpOutput() ServerPublicIpOutput
	ToServerPublicIpOutputWithContext(context.Context) ServerPublicIpOutput
}

type ServerPublicIpArgs struct {
	// The address of the IP
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The ID of the IP
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (ServerPublicIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerPublicIp)(nil)).Elem()
}

func (i ServerPublicIpArgs) ToServerPublicIpOutput() ServerPublicIpOutput {
	return i.ToServerPublicIpOutputWithContext(context.Background())
}

func (i ServerPublicIpArgs) ToServerPublicIpOutputWithContext(ctx context.Context) ServerPublicIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerPublicIpOutput)
}

// ServerPublicIpArrayInput is an input type that accepts ServerPublicIpArray and ServerPublicIpArrayOutput values.
// You can construct a concrete instance of `ServerPublicIpArrayInput` via:
//
//	ServerPublicIpArray{ ServerPublicIpArgs{...} }
type ServerPublicIpArrayInput interface {
	pulumi.Input

	ToServerPublicIpArrayOutput() ServerPublicIpArrayOutput
	ToServerPublicIpArrayOutputWithContext(context.Context) ServerPublicIpArrayOutput
}

type ServerPublicIpArray []ServerPublicIpInput

func (ServerPublicIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerPublicIp)(nil)).Elem()
}

func (i ServerPublicIpArray) ToServerPublicIpArrayOutput() ServerPublicIpArrayOutput {
	return i.ToServerPublicIpArrayOutputWithContext(context.Background())
}

func (i ServerPublicIpArray) ToServerPublicIpArrayOutputWithContext(ctx context.Context) ServerPublicIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerPublicIpArrayOutput)
}

type ServerPublicIpOutput struct{ *pulumi.OutputState }

func (ServerPublicIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerPublicIp)(nil)).Elem()
}

func (o ServerPublicIpOutput) ToServerPublicIpOutput() ServerPublicIpOutput {
	return o
}

func (o ServerPublicIpOutput) ToServerPublicIpOutputWithContext(ctx context.Context) ServerPublicIpOutput {
	return o
}

// The address of the IP
func (o ServerPublicIpOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerPublicIp) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The ID of the IP
func (o ServerPublicIpOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerPublicIp) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type ServerPublicIpArrayOutput struct{ *pulumi.OutputState }

func (ServerPublicIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerPublicIp)(nil)).Elem()
}

func (o ServerPublicIpArrayOutput) ToServerPublicIpArrayOutput() ServerPublicIpArrayOutput {
	return o
}

func (o ServerPublicIpArrayOutput) ToServerPublicIpArrayOutputWithContext(ctx context.Context) ServerPublicIpArrayOutput {
	return o
}

func (o ServerPublicIpArrayOutput) Index(i pulumi.IntInput) ServerPublicIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerPublicIp {
		return vs[0].([]ServerPublicIp)[vs[1].(int)]
	}).(ServerPublicIpOutput)
}

type ServerRootVolume struct {
	// Set the volume where the boot the server
	Boot *bool `pulumi:"boot"`
	// Forces deletion of the root volume on instance termination.
	DeleteOnTermination *bool `pulumi:"deleteOnTermination"`
	// The name of the server.
	Name *string `pulumi:"name"`
	// Choose IOPS of your sbs volume, has to be used with `sbsVolume` for root volume type.
	//
	// > **Important:** Updates to `root_volume.size_in_gb` will be ignored after the creation of the server.
	SbsIops *int `pulumi:"sbsIops"`
	// Size of the root volume in gigabytes.
	// To find the right size use [this endpoint](https://www.scaleway.com/en/developers/api/instance/#path-instances-list-all-instances) and
	// check the `volumes_constraint.{min|max}_size` (in bytes) for your `commercialType`.
	// Depending on `volumeType`, updates to this field may recreate a new resource.
	SizeInGb *int `pulumi:"sizeInGb"`
	// The volume ID of the root volume of the server, allows you to create server with an existing volume. If empty, will be computed to a created volume ID.
	VolumeId *string `pulumi:"volumeId"`
	// Volume type of root volume, can be `bSsd`, `lSsd` or `sbsVolume`, default value depends on server type
	VolumeType *string `pulumi:"volumeType"`
}

// ServerRootVolumeInput is an input type that accepts ServerRootVolumeArgs and ServerRootVolumeOutput values.
// You can construct a concrete instance of `ServerRootVolumeInput` via:
//
//	ServerRootVolumeArgs{...}
type ServerRootVolumeInput interface {
	pulumi.Input

	ToServerRootVolumeOutput() ServerRootVolumeOutput
	ToServerRootVolumeOutputWithContext(context.Context) ServerRootVolumeOutput
}

type ServerRootVolumeArgs struct {
	// Set the volume where the boot the server
	Boot pulumi.BoolPtrInput `pulumi:"boot"`
	// Forces deletion of the root volume on instance termination.
	DeleteOnTermination pulumi.BoolPtrInput `pulumi:"deleteOnTermination"`
	// The name of the server.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Choose IOPS of your sbs volume, has to be used with `sbsVolume` for root volume type.
	//
	// > **Important:** Updates to `root_volume.size_in_gb` will be ignored after the creation of the server.
	SbsIops pulumi.IntPtrInput `pulumi:"sbsIops"`
	// Size of the root volume in gigabytes.
	// To find the right size use [this endpoint](https://www.scaleway.com/en/developers/api/instance/#path-instances-list-all-instances) and
	// check the `volumes_constraint.{min|max}_size` (in bytes) for your `commercialType`.
	// Depending on `volumeType`, updates to this field may recreate a new resource.
	SizeInGb pulumi.IntPtrInput `pulumi:"sizeInGb"`
	// The volume ID of the root volume of the server, allows you to create server with an existing volume. If empty, will be computed to a created volume ID.
	VolumeId pulumi.StringPtrInput `pulumi:"volumeId"`
	// Volume type of root volume, can be `bSsd`, `lSsd` or `sbsVolume`, default value depends on server type
	VolumeType pulumi.StringPtrInput `pulumi:"volumeType"`
}

func (ServerRootVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerRootVolume)(nil)).Elem()
}

func (i ServerRootVolumeArgs) ToServerRootVolumeOutput() ServerRootVolumeOutput {
	return i.ToServerRootVolumeOutputWithContext(context.Background())
}

func (i ServerRootVolumeArgs) ToServerRootVolumeOutputWithContext(ctx context.Context) ServerRootVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerRootVolumeOutput)
}

func (i ServerRootVolumeArgs) ToServerRootVolumePtrOutput() ServerRootVolumePtrOutput {
	return i.ToServerRootVolumePtrOutputWithContext(context.Background())
}

func (i ServerRootVolumeArgs) ToServerRootVolumePtrOutputWithContext(ctx context.Context) ServerRootVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerRootVolumeOutput).ToServerRootVolumePtrOutputWithContext(ctx)
}

// ServerRootVolumePtrInput is an input type that accepts ServerRootVolumeArgs, ServerRootVolumePtr and ServerRootVolumePtrOutput values.
// You can construct a concrete instance of `ServerRootVolumePtrInput` via:
//
//	        ServerRootVolumeArgs{...}
//
//	or:
//
//	        nil
type ServerRootVolumePtrInput interface {
	pulumi.Input

	ToServerRootVolumePtrOutput() ServerRootVolumePtrOutput
	ToServerRootVolumePtrOutputWithContext(context.Context) ServerRootVolumePtrOutput
}

type serverRootVolumePtrType ServerRootVolumeArgs

func ServerRootVolumePtr(v *ServerRootVolumeArgs) ServerRootVolumePtrInput {
	return (*serverRootVolumePtrType)(v)
}

func (*serverRootVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerRootVolume)(nil)).Elem()
}

func (i *serverRootVolumePtrType) ToServerRootVolumePtrOutput() ServerRootVolumePtrOutput {
	return i.ToServerRootVolumePtrOutputWithContext(context.Background())
}

func (i *serverRootVolumePtrType) ToServerRootVolumePtrOutputWithContext(ctx context.Context) ServerRootVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerRootVolumePtrOutput)
}

type ServerRootVolumeOutput struct{ *pulumi.OutputState }

func (ServerRootVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerRootVolume)(nil)).Elem()
}

func (o ServerRootVolumeOutput) ToServerRootVolumeOutput() ServerRootVolumeOutput {
	return o
}

func (o ServerRootVolumeOutput) ToServerRootVolumeOutputWithContext(ctx context.Context) ServerRootVolumeOutput {
	return o
}

func (o ServerRootVolumeOutput) ToServerRootVolumePtrOutput() ServerRootVolumePtrOutput {
	return o.ToServerRootVolumePtrOutputWithContext(context.Background())
}

func (o ServerRootVolumeOutput) ToServerRootVolumePtrOutputWithContext(ctx context.Context) ServerRootVolumePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerRootVolume) *ServerRootVolume {
		return &v
	}).(ServerRootVolumePtrOutput)
}

// Set the volume where the boot the server
func (o ServerRootVolumeOutput) Boot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServerRootVolume) *bool { return v.Boot }).(pulumi.BoolPtrOutput)
}

// Forces deletion of the root volume on instance termination.
func (o ServerRootVolumeOutput) DeleteOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServerRootVolume) *bool { return v.DeleteOnTermination }).(pulumi.BoolPtrOutput)
}

// The name of the server.
func (o ServerRootVolumeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerRootVolume) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Choose IOPS of your sbs volume, has to be used with `sbsVolume` for root volume type.
//
// > **Important:** Updates to `root_volume.size_in_gb` will be ignored after the creation of the server.
func (o ServerRootVolumeOutput) SbsIops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerRootVolume) *int { return v.SbsIops }).(pulumi.IntPtrOutput)
}

// Size of the root volume in gigabytes.
// To find the right size use [this endpoint](https://www.scaleway.com/en/developers/api/instance/#path-instances-list-all-instances) and
// check the `volumes_constraint.{min|max}_size` (in bytes) for your `commercialType`.
// Depending on `volumeType`, updates to this field may recreate a new resource.
func (o ServerRootVolumeOutput) SizeInGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerRootVolume) *int { return v.SizeInGb }).(pulumi.IntPtrOutput)
}

// The volume ID of the root volume of the server, allows you to create server with an existing volume. If empty, will be computed to a created volume ID.
func (o ServerRootVolumeOutput) VolumeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerRootVolume) *string { return v.VolumeId }).(pulumi.StringPtrOutput)
}

// Volume type of root volume, can be `bSsd`, `lSsd` or `sbsVolume`, default value depends on server type
func (o ServerRootVolumeOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerRootVolume) *string { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type ServerRootVolumePtrOutput struct{ *pulumi.OutputState }

func (ServerRootVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerRootVolume)(nil)).Elem()
}

func (o ServerRootVolumePtrOutput) ToServerRootVolumePtrOutput() ServerRootVolumePtrOutput {
	return o
}

func (o ServerRootVolumePtrOutput) ToServerRootVolumePtrOutputWithContext(ctx context.Context) ServerRootVolumePtrOutput {
	return o
}

func (o ServerRootVolumePtrOutput) Elem() ServerRootVolumeOutput {
	return o.ApplyT(func(v *ServerRootVolume) ServerRootVolume {
		if v != nil {
			return *v
		}
		var ret ServerRootVolume
		return ret
	}).(ServerRootVolumeOutput)
}

// Set the volume where the boot the server
func (o ServerRootVolumePtrOutput) Boot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerRootVolume) *bool {
		if v == nil {
			return nil
		}
		return v.Boot
	}).(pulumi.BoolPtrOutput)
}

// Forces deletion of the root volume on instance termination.
func (o ServerRootVolumePtrOutput) DeleteOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerRootVolume) *bool {
		if v == nil {
			return nil
		}
		return v.DeleteOnTermination
	}).(pulumi.BoolPtrOutput)
}

// The name of the server.
func (o ServerRootVolumePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerRootVolume) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Choose IOPS of your sbs volume, has to be used with `sbsVolume` for root volume type.
//
// > **Important:** Updates to `root_volume.size_in_gb` will be ignored after the creation of the server.
func (o ServerRootVolumePtrOutput) SbsIops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerRootVolume) *int {
		if v == nil {
			return nil
		}
		return v.SbsIops
	}).(pulumi.IntPtrOutput)
}

// Size of the root volume in gigabytes.
// To find the right size use [this endpoint](https://www.scaleway.com/en/developers/api/instance/#path-instances-list-all-instances) and
// check the `volumes_constraint.{min|max}_size` (in bytes) for your `commercialType`.
// Depending on `volumeType`, updates to this field may recreate a new resource.
func (o ServerRootVolumePtrOutput) SizeInGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerRootVolume) *int {
		if v == nil {
			return nil
		}
		return v.SizeInGb
	}).(pulumi.IntPtrOutput)
}

// The volume ID of the root volume of the server, allows you to create server with an existing volume. If empty, will be computed to a created volume ID.
func (o ServerRootVolumePtrOutput) VolumeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerRootVolume) *string {
		if v == nil {
			return nil
		}
		return v.VolumeId
	}).(pulumi.StringPtrOutput)
}

// Volume type of root volume, can be `bSsd`, `lSsd` or `sbsVolume`, default value depends on server type
func (o ServerRootVolumePtrOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerRootVolume) *string {
		if v == nil {
			return nil
		}
		return v.VolumeType
	}).(pulumi.StringPtrOutput)
}

type SnapshotImport struct {
	// Bucket name containing [qcow2](https://en.wikipedia.org/wiki/Qcow) to import
	Bucket string `pulumi:"bucket"`
	// Key of the object to import
	//
	// > **Note:** The type `unified` could be instantiated on both `lSsd` and `bSsd` volumes.
	Key string `pulumi:"key"`
}

// SnapshotImportInput is an input type that accepts SnapshotImportArgs and SnapshotImportOutput values.
// You can construct a concrete instance of `SnapshotImportInput` via:
//
//	SnapshotImportArgs{...}
type SnapshotImportInput interface {
	pulumi.Input

	ToSnapshotImportOutput() SnapshotImportOutput
	ToSnapshotImportOutputWithContext(context.Context) SnapshotImportOutput
}

type SnapshotImportArgs struct {
	// Bucket name containing [qcow2](https://en.wikipedia.org/wiki/Qcow) to import
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// Key of the object to import
	//
	// > **Note:** The type `unified` could be instantiated on both `lSsd` and `bSsd` volumes.
	Key pulumi.StringInput `pulumi:"key"`
}

func (SnapshotImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotImport)(nil)).Elem()
}

func (i SnapshotImportArgs) ToSnapshotImportOutput() SnapshotImportOutput {
	return i.ToSnapshotImportOutputWithContext(context.Background())
}

func (i SnapshotImportArgs) ToSnapshotImportOutputWithContext(ctx context.Context) SnapshotImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotImportOutput)
}

func (i SnapshotImportArgs) ToSnapshotImportPtrOutput() SnapshotImportPtrOutput {
	return i.ToSnapshotImportPtrOutputWithContext(context.Background())
}

func (i SnapshotImportArgs) ToSnapshotImportPtrOutputWithContext(ctx context.Context) SnapshotImportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotImportOutput).ToSnapshotImportPtrOutputWithContext(ctx)
}

// SnapshotImportPtrInput is an input type that accepts SnapshotImportArgs, SnapshotImportPtr and SnapshotImportPtrOutput values.
// You can construct a concrete instance of `SnapshotImportPtrInput` via:
//
//	        SnapshotImportArgs{...}
//
//	or:
//
//	        nil
type SnapshotImportPtrInput interface {
	pulumi.Input

	ToSnapshotImportPtrOutput() SnapshotImportPtrOutput
	ToSnapshotImportPtrOutputWithContext(context.Context) SnapshotImportPtrOutput
}

type snapshotImportPtrType SnapshotImportArgs

func SnapshotImportPtr(v *SnapshotImportArgs) SnapshotImportPtrInput {
	return (*snapshotImportPtrType)(v)
}

func (*snapshotImportPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotImport)(nil)).Elem()
}

func (i *snapshotImportPtrType) ToSnapshotImportPtrOutput() SnapshotImportPtrOutput {
	return i.ToSnapshotImportPtrOutputWithContext(context.Background())
}

func (i *snapshotImportPtrType) ToSnapshotImportPtrOutputWithContext(ctx context.Context) SnapshotImportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotImportPtrOutput)
}

type SnapshotImportOutput struct{ *pulumi.OutputState }

func (SnapshotImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotImport)(nil)).Elem()
}

func (o SnapshotImportOutput) ToSnapshotImportOutput() SnapshotImportOutput {
	return o
}

func (o SnapshotImportOutput) ToSnapshotImportOutputWithContext(ctx context.Context) SnapshotImportOutput {
	return o
}

func (o SnapshotImportOutput) ToSnapshotImportPtrOutput() SnapshotImportPtrOutput {
	return o.ToSnapshotImportPtrOutputWithContext(context.Background())
}

func (o SnapshotImportOutput) ToSnapshotImportPtrOutputWithContext(ctx context.Context) SnapshotImportPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SnapshotImport) *SnapshotImport {
		return &v
	}).(SnapshotImportPtrOutput)
}

// Bucket name containing [qcow2](https://en.wikipedia.org/wiki/Qcow) to import
func (o SnapshotImportOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v SnapshotImport) string { return v.Bucket }).(pulumi.StringOutput)
}

// Key of the object to import
//
// > **Note:** The type `unified` could be instantiated on both `lSsd` and `bSsd` volumes.
func (o SnapshotImportOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SnapshotImport) string { return v.Key }).(pulumi.StringOutput)
}

type SnapshotImportPtrOutput struct{ *pulumi.OutputState }

func (SnapshotImportPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotImport)(nil)).Elem()
}

func (o SnapshotImportPtrOutput) ToSnapshotImportPtrOutput() SnapshotImportPtrOutput {
	return o
}

func (o SnapshotImportPtrOutput) ToSnapshotImportPtrOutputWithContext(ctx context.Context) SnapshotImportPtrOutput {
	return o
}

func (o SnapshotImportPtrOutput) Elem() SnapshotImportOutput {
	return o.ApplyT(func(v *SnapshotImport) SnapshotImport {
		if v != nil {
			return *v
		}
		var ret SnapshotImport
		return ret
	}).(SnapshotImportOutput)
}

// Bucket name containing [qcow2](https://en.wikipedia.org/wiki/Qcow) to import
func (o SnapshotImportPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotImport) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

// Key of the object to import
//
// > **Note:** The type `unified` could be instantiated on both `lSsd` and `bSsd` volumes.
func (o SnapshotImportPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotImport) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

type GetPrivateNicPrivateIp struct {
	// The private IP address
	Address string `pulumi:"address"`
	// The ID of the IP address resource
	Id string `pulumi:"id"`
}

// GetPrivateNicPrivateIpInput is an input type that accepts GetPrivateNicPrivateIpArgs and GetPrivateNicPrivateIpOutput values.
// You can construct a concrete instance of `GetPrivateNicPrivateIpInput` via:
//
//	GetPrivateNicPrivateIpArgs{...}
type GetPrivateNicPrivateIpInput interface {
	pulumi.Input

	ToGetPrivateNicPrivateIpOutput() GetPrivateNicPrivateIpOutput
	ToGetPrivateNicPrivateIpOutputWithContext(context.Context) GetPrivateNicPrivateIpOutput
}

type GetPrivateNicPrivateIpArgs struct {
	// The private IP address
	Address pulumi.StringInput `pulumi:"address"`
	// The ID of the IP address resource
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetPrivateNicPrivateIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateNicPrivateIp)(nil)).Elem()
}

func (i GetPrivateNicPrivateIpArgs) ToGetPrivateNicPrivateIpOutput() GetPrivateNicPrivateIpOutput {
	return i.ToGetPrivateNicPrivateIpOutputWithContext(context.Background())
}

func (i GetPrivateNicPrivateIpArgs) ToGetPrivateNicPrivateIpOutputWithContext(ctx context.Context) GetPrivateNicPrivateIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateNicPrivateIpOutput)
}

// GetPrivateNicPrivateIpArrayInput is an input type that accepts GetPrivateNicPrivateIpArray and GetPrivateNicPrivateIpArrayOutput values.
// You can construct a concrete instance of `GetPrivateNicPrivateIpArrayInput` via:
//
//	GetPrivateNicPrivateIpArray{ GetPrivateNicPrivateIpArgs{...} }
type GetPrivateNicPrivateIpArrayInput interface {
	pulumi.Input

	ToGetPrivateNicPrivateIpArrayOutput() GetPrivateNicPrivateIpArrayOutput
	ToGetPrivateNicPrivateIpArrayOutputWithContext(context.Context) GetPrivateNicPrivateIpArrayOutput
}

type GetPrivateNicPrivateIpArray []GetPrivateNicPrivateIpInput

func (GetPrivateNicPrivateIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateNicPrivateIp)(nil)).Elem()
}

func (i GetPrivateNicPrivateIpArray) ToGetPrivateNicPrivateIpArrayOutput() GetPrivateNicPrivateIpArrayOutput {
	return i.ToGetPrivateNicPrivateIpArrayOutputWithContext(context.Background())
}

func (i GetPrivateNicPrivateIpArray) ToGetPrivateNicPrivateIpArrayOutputWithContext(ctx context.Context) GetPrivateNicPrivateIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateNicPrivateIpArrayOutput)
}

type GetPrivateNicPrivateIpOutput struct{ *pulumi.OutputState }

func (GetPrivateNicPrivateIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateNicPrivateIp)(nil)).Elem()
}

func (o GetPrivateNicPrivateIpOutput) ToGetPrivateNicPrivateIpOutput() GetPrivateNicPrivateIpOutput {
	return o
}

func (o GetPrivateNicPrivateIpOutput) ToGetPrivateNicPrivateIpOutputWithContext(ctx context.Context) GetPrivateNicPrivateIpOutput {
	return o
}

// The private IP address
func (o GetPrivateNicPrivateIpOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateNicPrivateIp) string { return v.Address }).(pulumi.StringOutput)
}

// The ID of the IP address resource
func (o GetPrivateNicPrivateIpOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateNicPrivateIp) string { return v.Id }).(pulumi.StringOutput)
}

type GetPrivateNicPrivateIpArrayOutput struct{ *pulumi.OutputState }

func (GetPrivateNicPrivateIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateNicPrivateIp)(nil)).Elem()
}

func (o GetPrivateNicPrivateIpArrayOutput) ToGetPrivateNicPrivateIpArrayOutput() GetPrivateNicPrivateIpArrayOutput {
	return o
}

func (o GetPrivateNicPrivateIpArrayOutput) ToGetPrivateNicPrivateIpArrayOutputWithContext(ctx context.Context) GetPrivateNicPrivateIpArrayOutput {
	return o
}

func (o GetPrivateNicPrivateIpArrayOutput) Index(i pulumi.IntInput) GetPrivateNicPrivateIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrivateNicPrivateIp {
		return vs[0].([]GetPrivateNicPrivateIp)[vs[1].(int)]
	}).(GetPrivateNicPrivateIpOutput)
}

type GetSecurityGroupInboundRule struct {
	// The action to take when rule match. Possible values are: `accept` or `drop`.
	Action string `pulumi:"action"`
	// The ip this rule apply to.
	Ip string `pulumi:"ip"`
	// The ip range (e.g `192.168.1.0/24`) this rule apply to.
	IpRange string `pulumi:"ipRange"`
	// The port this rule apply to. If no port is specified, rule will apply to all port.
	Port int `pulumi:"port"`
	// The port range (e.g `22-23`) this rule applies to.
	// If no `port` nor `portRange` are specified, rule will apply to all port.
	// Only one of `port` and `portRange` should be specified.
	PortRange string `pulumi:"portRange"`
	// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
	Protocol string `pulumi:"protocol"`
}

// GetSecurityGroupInboundRuleInput is an input type that accepts GetSecurityGroupInboundRuleArgs and GetSecurityGroupInboundRuleOutput values.
// You can construct a concrete instance of `GetSecurityGroupInboundRuleInput` via:
//
//	GetSecurityGroupInboundRuleArgs{...}
type GetSecurityGroupInboundRuleInput interface {
	pulumi.Input

	ToGetSecurityGroupInboundRuleOutput() GetSecurityGroupInboundRuleOutput
	ToGetSecurityGroupInboundRuleOutputWithContext(context.Context) GetSecurityGroupInboundRuleOutput
}

type GetSecurityGroupInboundRuleArgs struct {
	// The action to take when rule match. Possible values are: `accept` or `drop`.
	Action pulumi.StringInput `pulumi:"action"`
	// The ip this rule apply to.
	Ip pulumi.StringInput `pulumi:"ip"`
	// The ip range (e.g `192.168.1.0/24`) this rule apply to.
	IpRange pulumi.StringInput `pulumi:"ipRange"`
	// The port this rule apply to. If no port is specified, rule will apply to all port.
	Port pulumi.IntInput `pulumi:"port"`
	// The port range (e.g `22-23`) this rule applies to.
	// If no `port` nor `portRange` are specified, rule will apply to all port.
	// Only one of `port` and `portRange` should be specified.
	PortRange pulumi.StringInput `pulumi:"portRange"`
	// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (GetSecurityGroupInboundRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityGroupInboundRule)(nil)).Elem()
}

func (i GetSecurityGroupInboundRuleArgs) ToGetSecurityGroupInboundRuleOutput() GetSecurityGroupInboundRuleOutput {
	return i.ToGetSecurityGroupInboundRuleOutputWithContext(context.Background())
}

func (i GetSecurityGroupInboundRuleArgs) ToGetSecurityGroupInboundRuleOutputWithContext(ctx context.Context) GetSecurityGroupInboundRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityGroupInboundRuleOutput)
}

// GetSecurityGroupInboundRuleArrayInput is an input type that accepts GetSecurityGroupInboundRuleArray and GetSecurityGroupInboundRuleArrayOutput values.
// You can construct a concrete instance of `GetSecurityGroupInboundRuleArrayInput` via:
//
//	GetSecurityGroupInboundRuleArray{ GetSecurityGroupInboundRuleArgs{...} }
type GetSecurityGroupInboundRuleArrayInput interface {
	pulumi.Input

	ToGetSecurityGroupInboundRuleArrayOutput() GetSecurityGroupInboundRuleArrayOutput
	ToGetSecurityGroupInboundRuleArrayOutputWithContext(context.Context) GetSecurityGroupInboundRuleArrayOutput
}

type GetSecurityGroupInboundRuleArray []GetSecurityGroupInboundRuleInput

func (GetSecurityGroupInboundRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityGroupInboundRule)(nil)).Elem()
}

func (i GetSecurityGroupInboundRuleArray) ToGetSecurityGroupInboundRuleArrayOutput() GetSecurityGroupInboundRuleArrayOutput {
	return i.ToGetSecurityGroupInboundRuleArrayOutputWithContext(context.Background())
}

func (i GetSecurityGroupInboundRuleArray) ToGetSecurityGroupInboundRuleArrayOutputWithContext(ctx context.Context) GetSecurityGroupInboundRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityGroupInboundRuleArrayOutput)
}

type GetSecurityGroupInboundRuleOutput struct{ *pulumi.OutputState }

func (GetSecurityGroupInboundRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityGroupInboundRule)(nil)).Elem()
}

func (o GetSecurityGroupInboundRuleOutput) ToGetSecurityGroupInboundRuleOutput() GetSecurityGroupInboundRuleOutput {
	return o
}

func (o GetSecurityGroupInboundRuleOutput) ToGetSecurityGroupInboundRuleOutputWithContext(ctx context.Context) GetSecurityGroupInboundRuleOutput {
	return o
}

// The action to take when rule match. Possible values are: `accept` or `drop`.
func (o GetSecurityGroupInboundRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupInboundRule) string { return v.Action }).(pulumi.StringOutput)
}

// The ip this rule apply to.
func (o GetSecurityGroupInboundRuleOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupInboundRule) string { return v.Ip }).(pulumi.StringOutput)
}

// The ip range (e.g `192.168.1.0/24`) this rule apply to.
func (o GetSecurityGroupInboundRuleOutput) IpRange() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupInboundRule) string { return v.IpRange }).(pulumi.StringOutput)
}

// The port this rule apply to. If no port is specified, rule will apply to all port.
func (o GetSecurityGroupInboundRuleOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetSecurityGroupInboundRule) int { return v.Port }).(pulumi.IntOutput)
}

// The port range (e.g `22-23`) this rule applies to.
// If no `port` nor `portRange` are specified, rule will apply to all port.
// Only one of `port` and `portRange` should be specified.
func (o GetSecurityGroupInboundRuleOutput) PortRange() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupInboundRule) string { return v.PortRange }).(pulumi.StringOutput)
}

// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
func (o GetSecurityGroupInboundRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupInboundRule) string { return v.Protocol }).(pulumi.StringOutput)
}

type GetSecurityGroupInboundRuleArrayOutput struct{ *pulumi.OutputState }

func (GetSecurityGroupInboundRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityGroupInboundRule)(nil)).Elem()
}

func (o GetSecurityGroupInboundRuleArrayOutput) ToGetSecurityGroupInboundRuleArrayOutput() GetSecurityGroupInboundRuleArrayOutput {
	return o
}

func (o GetSecurityGroupInboundRuleArrayOutput) ToGetSecurityGroupInboundRuleArrayOutputWithContext(ctx context.Context) GetSecurityGroupInboundRuleArrayOutput {
	return o
}

func (o GetSecurityGroupInboundRuleArrayOutput) Index(i pulumi.IntInput) GetSecurityGroupInboundRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecurityGroupInboundRule {
		return vs[0].([]GetSecurityGroupInboundRule)[vs[1].(int)]
	}).(GetSecurityGroupInboundRuleOutput)
}

type GetSecurityGroupOutboundRule struct {
	// The action to take when rule match. Possible values are: `accept` or `drop`.
	Action string `pulumi:"action"`
	// The ip this rule apply to.
	Ip string `pulumi:"ip"`
	// The ip range (e.g `192.168.1.0/24`) this rule apply to.
	IpRange string `pulumi:"ipRange"`
	// The port this rule apply to. If no port is specified, rule will apply to all port.
	Port int `pulumi:"port"`
	// The port range (e.g `22-23`) this rule applies to.
	// If no `port` nor `portRange` are specified, rule will apply to all port.
	// Only one of `port` and `portRange` should be specified.
	PortRange string `pulumi:"portRange"`
	// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
	Protocol string `pulumi:"protocol"`
}

// GetSecurityGroupOutboundRuleInput is an input type that accepts GetSecurityGroupOutboundRuleArgs and GetSecurityGroupOutboundRuleOutput values.
// You can construct a concrete instance of `GetSecurityGroupOutboundRuleInput` via:
//
//	GetSecurityGroupOutboundRuleArgs{...}
type GetSecurityGroupOutboundRuleInput interface {
	pulumi.Input

	ToGetSecurityGroupOutboundRuleOutput() GetSecurityGroupOutboundRuleOutput
	ToGetSecurityGroupOutboundRuleOutputWithContext(context.Context) GetSecurityGroupOutboundRuleOutput
}

type GetSecurityGroupOutboundRuleArgs struct {
	// The action to take when rule match. Possible values are: `accept` or `drop`.
	Action pulumi.StringInput `pulumi:"action"`
	// The ip this rule apply to.
	Ip pulumi.StringInput `pulumi:"ip"`
	// The ip range (e.g `192.168.1.0/24`) this rule apply to.
	IpRange pulumi.StringInput `pulumi:"ipRange"`
	// The port this rule apply to. If no port is specified, rule will apply to all port.
	Port pulumi.IntInput `pulumi:"port"`
	// The port range (e.g `22-23`) this rule applies to.
	// If no `port` nor `portRange` are specified, rule will apply to all port.
	// Only one of `port` and `portRange` should be specified.
	PortRange pulumi.StringInput `pulumi:"portRange"`
	// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (GetSecurityGroupOutboundRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityGroupOutboundRule)(nil)).Elem()
}

func (i GetSecurityGroupOutboundRuleArgs) ToGetSecurityGroupOutboundRuleOutput() GetSecurityGroupOutboundRuleOutput {
	return i.ToGetSecurityGroupOutboundRuleOutputWithContext(context.Background())
}

func (i GetSecurityGroupOutboundRuleArgs) ToGetSecurityGroupOutboundRuleOutputWithContext(ctx context.Context) GetSecurityGroupOutboundRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityGroupOutboundRuleOutput)
}

// GetSecurityGroupOutboundRuleArrayInput is an input type that accepts GetSecurityGroupOutboundRuleArray and GetSecurityGroupOutboundRuleArrayOutput values.
// You can construct a concrete instance of `GetSecurityGroupOutboundRuleArrayInput` via:
//
//	GetSecurityGroupOutboundRuleArray{ GetSecurityGroupOutboundRuleArgs{...} }
type GetSecurityGroupOutboundRuleArrayInput interface {
	pulumi.Input

	ToGetSecurityGroupOutboundRuleArrayOutput() GetSecurityGroupOutboundRuleArrayOutput
	ToGetSecurityGroupOutboundRuleArrayOutputWithContext(context.Context) GetSecurityGroupOutboundRuleArrayOutput
}

type GetSecurityGroupOutboundRuleArray []GetSecurityGroupOutboundRuleInput

func (GetSecurityGroupOutboundRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityGroupOutboundRule)(nil)).Elem()
}

func (i GetSecurityGroupOutboundRuleArray) ToGetSecurityGroupOutboundRuleArrayOutput() GetSecurityGroupOutboundRuleArrayOutput {
	return i.ToGetSecurityGroupOutboundRuleArrayOutputWithContext(context.Background())
}

func (i GetSecurityGroupOutboundRuleArray) ToGetSecurityGroupOutboundRuleArrayOutputWithContext(ctx context.Context) GetSecurityGroupOutboundRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityGroupOutboundRuleArrayOutput)
}

type GetSecurityGroupOutboundRuleOutput struct{ *pulumi.OutputState }

func (GetSecurityGroupOutboundRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityGroupOutboundRule)(nil)).Elem()
}

func (o GetSecurityGroupOutboundRuleOutput) ToGetSecurityGroupOutboundRuleOutput() GetSecurityGroupOutboundRuleOutput {
	return o
}

func (o GetSecurityGroupOutboundRuleOutput) ToGetSecurityGroupOutboundRuleOutputWithContext(ctx context.Context) GetSecurityGroupOutboundRuleOutput {
	return o
}

// The action to take when rule match. Possible values are: `accept` or `drop`.
func (o GetSecurityGroupOutboundRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupOutboundRule) string { return v.Action }).(pulumi.StringOutput)
}

// The ip this rule apply to.
func (o GetSecurityGroupOutboundRuleOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupOutboundRule) string { return v.Ip }).(pulumi.StringOutput)
}

// The ip range (e.g `192.168.1.0/24`) this rule apply to.
func (o GetSecurityGroupOutboundRuleOutput) IpRange() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupOutboundRule) string { return v.IpRange }).(pulumi.StringOutput)
}

// The port this rule apply to. If no port is specified, rule will apply to all port.
func (o GetSecurityGroupOutboundRuleOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetSecurityGroupOutboundRule) int { return v.Port }).(pulumi.IntOutput)
}

// The port range (e.g `22-23`) this rule applies to.
// If no `port` nor `portRange` are specified, rule will apply to all port.
// Only one of `port` and `portRange` should be specified.
func (o GetSecurityGroupOutboundRuleOutput) PortRange() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupOutboundRule) string { return v.PortRange }).(pulumi.StringOutput)
}

// The protocol this rule apply to. Possible values are: `TCP`, `UDP`, `ICMP` or `ANY`.
func (o GetSecurityGroupOutboundRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupOutboundRule) string { return v.Protocol }).(pulumi.StringOutput)
}

type GetSecurityGroupOutboundRuleArrayOutput struct{ *pulumi.OutputState }

func (GetSecurityGroupOutboundRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityGroupOutboundRule)(nil)).Elem()
}

func (o GetSecurityGroupOutboundRuleArrayOutput) ToGetSecurityGroupOutboundRuleArrayOutput() GetSecurityGroupOutboundRuleArrayOutput {
	return o
}

func (o GetSecurityGroupOutboundRuleArrayOutput) ToGetSecurityGroupOutboundRuleArrayOutputWithContext(ctx context.Context) GetSecurityGroupOutboundRuleArrayOutput {
	return o
}

func (o GetSecurityGroupOutboundRuleArrayOutput) Index(i pulumi.IntInput) GetSecurityGroupOutboundRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecurityGroupOutboundRule {
		return vs[0].([]GetSecurityGroupOutboundRule)[vs[1].(int)]
	}).(GetSecurityGroupOutboundRuleOutput)
}

type GetServerPrivateIp struct {
	// The address of the IP
	Address string `pulumi:"address"`
	// The ID of the IP
	Id string `pulumi:"id"`
}

// GetServerPrivateIpInput is an input type that accepts GetServerPrivateIpArgs and GetServerPrivateIpOutput values.
// You can construct a concrete instance of `GetServerPrivateIpInput` via:
//
//	GetServerPrivateIpArgs{...}
type GetServerPrivateIpInput interface {
	pulumi.Input

	ToGetServerPrivateIpOutput() GetServerPrivateIpOutput
	ToGetServerPrivateIpOutputWithContext(context.Context) GetServerPrivateIpOutput
}

type GetServerPrivateIpArgs struct {
	// The address of the IP
	Address pulumi.StringInput `pulumi:"address"`
	// The ID of the IP
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetServerPrivateIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerPrivateIp)(nil)).Elem()
}

func (i GetServerPrivateIpArgs) ToGetServerPrivateIpOutput() GetServerPrivateIpOutput {
	return i.ToGetServerPrivateIpOutputWithContext(context.Background())
}

func (i GetServerPrivateIpArgs) ToGetServerPrivateIpOutputWithContext(ctx context.Context) GetServerPrivateIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerPrivateIpOutput)
}

// GetServerPrivateIpArrayInput is an input type that accepts GetServerPrivateIpArray and GetServerPrivateIpArrayOutput values.
// You can construct a concrete instance of `GetServerPrivateIpArrayInput` via:
//
//	GetServerPrivateIpArray{ GetServerPrivateIpArgs{...} }
type GetServerPrivateIpArrayInput interface {
	pulumi.Input

	ToGetServerPrivateIpArrayOutput() GetServerPrivateIpArrayOutput
	ToGetServerPrivateIpArrayOutputWithContext(context.Context) GetServerPrivateIpArrayOutput
}

type GetServerPrivateIpArray []GetServerPrivateIpInput

func (GetServerPrivateIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerPrivateIp)(nil)).Elem()
}

func (i GetServerPrivateIpArray) ToGetServerPrivateIpArrayOutput() GetServerPrivateIpArrayOutput {
	return i.ToGetServerPrivateIpArrayOutputWithContext(context.Background())
}

func (i GetServerPrivateIpArray) ToGetServerPrivateIpArrayOutputWithContext(ctx context.Context) GetServerPrivateIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerPrivateIpArrayOutput)
}

type GetServerPrivateIpOutput struct{ *pulumi.OutputState }

func (GetServerPrivateIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerPrivateIp)(nil)).Elem()
}

func (o GetServerPrivateIpOutput) ToGetServerPrivateIpOutput() GetServerPrivateIpOutput {
	return o
}

func (o GetServerPrivateIpOutput) ToGetServerPrivateIpOutputWithContext(ctx context.Context) GetServerPrivateIpOutput {
	return o
}

// The address of the IP
func (o GetServerPrivateIpOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerPrivateIp) string { return v.Address }).(pulumi.StringOutput)
}

// The ID of the IP
func (o GetServerPrivateIpOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerPrivateIp) string { return v.Id }).(pulumi.StringOutput)
}

type GetServerPrivateIpArrayOutput struct{ *pulumi.OutputState }

func (GetServerPrivateIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerPrivateIp)(nil)).Elem()
}

func (o GetServerPrivateIpArrayOutput) ToGetServerPrivateIpArrayOutput() GetServerPrivateIpArrayOutput {
	return o
}

func (o GetServerPrivateIpArrayOutput) ToGetServerPrivateIpArrayOutputWithContext(ctx context.Context) GetServerPrivateIpArrayOutput {
	return o
}

func (o GetServerPrivateIpArrayOutput) Index(i pulumi.IntInput) GetServerPrivateIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerPrivateIp {
		return vs[0].([]GetServerPrivateIp)[vs[1].(int)]
	}).(GetServerPrivateIpOutput)
}

type GetServerPrivateNetwork struct {
	// MAC address of the NIC
	MacAddress string `pulumi:"macAddress"`
	// The Private Network ID
	PnId string `pulumi:"pnId"`
	// The ID of the NIC
	PnicId string `pulumi:"pnicId"`
	// The private NIC state
	Status string `pulumi:"status"`
	// `zone`) The zone in which the server exists.
	Zone string `pulumi:"zone"`
}

// GetServerPrivateNetworkInput is an input type that accepts GetServerPrivateNetworkArgs and GetServerPrivateNetworkOutput values.
// You can construct a concrete instance of `GetServerPrivateNetworkInput` via:
//
//	GetServerPrivateNetworkArgs{...}
type GetServerPrivateNetworkInput interface {
	pulumi.Input

	ToGetServerPrivateNetworkOutput() GetServerPrivateNetworkOutput
	ToGetServerPrivateNetworkOutputWithContext(context.Context) GetServerPrivateNetworkOutput
}

type GetServerPrivateNetworkArgs struct {
	// MAC address of the NIC
	MacAddress pulumi.StringInput `pulumi:"macAddress"`
	// The Private Network ID
	PnId pulumi.StringInput `pulumi:"pnId"`
	// The ID of the NIC
	PnicId pulumi.StringInput `pulumi:"pnicId"`
	// The private NIC state
	Status pulumi.StringInput `pulumi:"status"`
	// `zone`) The zone in which the server exists.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetServerPrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerPrivateNetwork)(nil)).Elem()
}

func (i GetServerPrivateNetworkArgs) ToGetServerPrivateNetworkOutput() GetServerPrivateNetworkOutput {
	return i.ToGetServerPrivateNetworkOutputWithContext(context.Background())
}

func (i GetServerPrivateNetworkArgs) ToGetServerPrivateNetworkOutputWithContext(ctx context.Context) GetServerPrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerPrivateNetworkOutput)
}

// GetServerPrivateNetworkArrayInput is an input type that accepts GetServerPrivateNetworkArray and GetServerPrivateNetworkArrayOutput values.
// You can construct a concrete instance of `GetServerPrivateNetworkArrayInput` via:
//
//	GetServerPrivateNetworkArray{ GetServerPrivateNetworkArgs{...} }
type GetServerPrivateNetworkArrayInput interface {
	pulumi.Input

	ToGetServerPrivateNetworkArrayOutput() GetServerPrivateNetworkArrayOutput
	ToGetServerPrivateNetworkArrayOutputWithContext(context.Context) GetServerPrivateNetworkArrayOutput
}

type GetServerPrivateNetworkArray []GetServerPrivateNetworkInput

func (GetServerPrivateNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerPrivateNetwork)(nil)).Elem()
}

func (i GetServerPrivateNetworkArray) ToGetServerPrivateNetworkArrayOutput() GetServerPrivateNetworkArrayOutput {
	return i.ToGetServerPrivateNetworkArrayOutputWithContext(context.Background())
}

func (i GetServerPrivateNetworkArray) ToGetServerPrivateNetworkArrayOutputWithContext(ctx context.Context) GetServerPrivateNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerPrivateNetworkArrayOutput)
}

type GetServerPrivateNetworkOutput struct{ *pulumi.OutputState }

func (GetServerPrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerPrivateNetwork)(nil)).Elem()
}

func (o GetServerPrivateNetworkOutput) ToGetServerPrivateNetworkOutput() GetServerPrivateNetworkOutput {
	return o
}

func (o GetServerPrivateNetworkOutput) ToGetServerPrivateNetworkOutputWithContext(ctx context.Context) GetServerPrivateNetworkOutput {
	return o
}

// MAC address of the NIC
func (o GetServerPrivateNetworkOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerPrivateNetwork) string { return v.MacAddress }).(pulumi.StringOutput)
}

// The Private Network ID
func (o GetServerPrivateNetworkOutput) PnId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerPrivateNetwork) string { return v.PnId }).(pulumi.StringOutput)
}

// The ID of the NIC
func (o GetServerPrivateNetworkOutput) PnicId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerPrivateNetwork) string { return v.PnicId }).(pulumi.StringOutput)
}

// The private NIC state
func (o GetServerPrivateNetworkOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerPrivateNetwork) string { return v.Status }).(pulumi.StringOutput)
}

// `zone`) The zone in which the server exists.
func (o GetServerPrivateNetworkOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerPrivateNetwork) string { return v.Zone }).(pulumi.StringOutput)
}

type GetServerPrivateNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetServerPrivateNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerPrivateNetwork)(nil)).Elem()
}

func (o GetServerPrivateNetworkArrayOutput) ToGetServerPrivateNetworkArrayOutput() GetServerPrivateNetworkArrayOutput {
	return o
}

func (o GetServerPrivateNetworkArrayOutput) ToGetServerPrivateNetworkArrayOutputWithContext(ctx context.Context) GetServerPrivateNetworkArrayOutput {
	return o
}

func (o GetServerPrivateNetworkArrayOutput) Index(i pulumi.IntInput) GetServerPrivateNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerPrivateNetwork {
		return vs[0].([]GetServerPrivateNetwork)[vs[1].(int)]
	}).(GetServerPrivateNetworkOutput)
}

type GetServerPublicIp struct {
	// The address of the IP
	Address string `pulumi:"address"`
	// The ID of the IP
	Id string `pulumi:"id"`
}

// GetServerPublicIpInput is an input type that accepts GetServerPublicIpArgs and GetServerPublicIpOutput values.
// You can construct a concrete instance of `GetServerPublicIpInput` via:
//
//	GetServerPublicIpArgs{...}
type GetServerPublicIpInput interface {
	pulumi.Input

	ToGetServerPublicIpOutput() GetServerPublicIpOutput
	ToGetServerPublicIpOutputWithContext(context.Context) GetServerPublicIpOutput
}

type GetServerPublicIpArgs struct {
	// The address of the IP
	Address pulumi.StringInput `pulumi:"address"`
	// The ID of the IP
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetServerPublicIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerPublicIp)(nil)).Elem()
}

func (i GetServerPublicIpArgs) ToGetServerPublicIpOutput() GetServerPublicIpOutput {
	return i.ToGetServerPublicIpOutputWithContext(context.Background())
}

func (i GetServerPublicIpArgs) ToGetServerPublicIpOutputWithContext(ctx context.Context) GetServerPublicIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerPublicIpOutput)
}

// GetServerPublicIpArrayInput is an input type that accepts GetServerPublicIpArray and GetServerPublicIpArrayOutput values.
// You can construct a concrete instance of `GetServerPublicIpArrayInput` via:
//
//	GetServerPublicIpArray{ GetServerPublicIpArgs{...} }
type GetServerPublicIpArrayInput interface {
	pulumi.Input

	ToGetServerPublicIpArrayOutput() GetServerPublicIpArrayOutput
	ToGetServerPublicIpArrayOutputWithContext(context.Context) GetServerPublicIpArrayOutput
}

type GetServerPublicIpArray []GetServerPublicIpInput

func (GetServerPublicIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerPublicIp)(nil)).Elem()
}

func (i GetServerPublicIpArray) ToGetServerPublicIpArrayOutput() GetServerPublicIpArrayOutput {
	return i.ToGetServerPublicIpArrayOutputWithContext(context.Background())
}

func (i GetServerPublicIpArray) ToGetServerPublicIpArrayOutputWithContext(ctx context.Context) GetServerPublicIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerPublicIpArrayOutput)
}

type GetServerPublicIpOutput struct{ *pulumi.OutputState }

func (GetServerPublicIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerPublicIp)(nil)).Elem()
}

func (o GetServerPublicIpOutput) ToGetServerPublicIpOutput() GetServerPublicIpOutput {
	return o
}

func (o GetServerPublicIpOutput) ToGetServerPublicIpOutputWithContext(ctx context.Context) GetServerPublicIpOutput {
	return o
}

// The address of the IP
func (o GetServerPublicIpOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerPublicIp) string { return v.Address }).(pulumi.StringOutput)
}

// The ID of the IP
func (o GetServerPublicIpOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerPublicIp) string { return v.Id }).(pulumi.StringOutput)
}

type GetServerPublicIpArrayOutput struct{ *pulumi.OutputState }

func (GetServerPublicIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerPublicIp)(nil)).Elem()
}

func (o GetServerPublicIpArrayOutput) ToGetServerPublicIpArrayOutput() GetServerPublicIpArrayOutput {
	return o
}

func (o GetServerPublicIpArrayOutput) ToGetServerPublicIpArrayOutputWithContext(ctx context.Context) GetServerPublicIpArrayOutput {
	return o
}

func (o GetServerPublicIpArrayOutput) Index(i pulumi.IntInput) GetServerPublicIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerPublicIp {
		return vs[0].([]GetServerPublicIp)[vs[1].(int)]
	}).(GetServerPublicIpOutput)
}

type GetServerRootVolume struct {
	// Set the volume where the boot the server
	Boot bool `pulumi:"boot"`
	// Forces deletion of the root volume on instance termination.
	DeleteOnTermination bool `pulumi:"deleteOnTermination"`
	// The server name. Only one of `name` and `serverId` should be specified.
	Name string `pulumi:"name"`
	// SBS Volume IOPS, only with volumeType as sbs_volume
	SbsIops int `pulumi:"sbsIops"`
	// Size of the root volume in gigabytes.
	SizeInGb int `pulumi:"sizeInGb"`
	// The volume ID of the root volume of the server.
	VolumeId string `pulumi:"volumeId"`
	// Volume type of the root volume
	VolumeType string `pulumi:"volumeType"`
}

// GetServerRootVolumeInput is an input type that accepts GetServerRootVolumeArgs and GetServerRootVolumeOutput values.
// You can construct a concrete instance of `GetServerRootVolumeInput` via:
//
//	GetServerRootVolumeArgs{...}
type GetServerRootVolumeInput interface {
	pulumi.Input

	ToGetServerRootVolumeOutput() GetServerRootVolumeOutput
	ToGetServerRootVolumeOutputWithContext(context.Context) GetServerRootVolumeOutput
}

type GetServerRootVolumeArgs struct {
	// Set the volume where the boot the server
	Boot pulumi.BoolInput `pulumi:"boot"`
	// Forces deletion of the root volume on instance termination.
	DeleteOnTermination pulumi.BoolInput `pulumi:"deleteOnTermination"`
	// The server name. Only one of `name` and `serverId` should be specified.
	Name pulumi.StringInput `pulumi:"name"`
	// SBS Volume IOPS, only with volumeType as sbs_volume
	SbsIops pulumi.IntInput `pulumi:"sbsIops"`
	// Size of the root volume in gigabytes.
	SizeInGb pulumi.IntInput `pulumi:"sizeInGb"`
	// The volume ID of the root volume of the server.
	VolumeId pulumi.StringInput `pulumi:"volumeId"`
	// Volume type of the root volume
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
}

func (GetServerRootVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerRootVolume)(nil)).Elem()
}

func (i GetServerRootVolumeArgs) ToGetServerRootVolumeOutput() GetServerRootVolumeOutput {
	return i.ToGetServerRootVolumeOutputWithContext(context.Background())
}

func (i GetServerRootVolumeArgs) ToGetServerRootVolumeOutputWithContext(ctx context.Context) GetServerRootVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerRootVolumeOutput)
}

// GetServerRootVolumeArrayInput is an input type that accepts GetServerRootVolumeArray and GetServerRootVolumeArrayOutput values.
// You can construct a concrete instance of `GetServerRootVolumeArrayInput` via:
//
//	GetServerRootVolumeArray{ GetServerRootVolumeArgs{...} }
type GetServerRootVolumeArrayInput interface {
	pulumi.Input

	ToGetServerRootVolumeArrayOutput() GetServerRootVolumeArrayOutput
	ToGetServerRootVolumeArrayOutputWithContext(context.Context) GetServerRootVolumeArrayOutput
}

type GetServerRootVolumeArray []GetServerRootVolumeInput

func (GetServerRootVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerRootVolume)(nil)).Elem()
}

func (i GetServerRootVolumeArray) ToGetServerRootVolumeArrayOutput() GetServerRootVolumeArrayOutput {
	return i.ToGetServerRootVolumeArrayOutputWithContext(context.Background())
}

func (i GetServerRootVolumeArray) ToGetServerRootVolumeArrayOutputWithContext(ctx context.Context) GetServerRootVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerRootVolumeArrayOutput)
}

type GetServerRootVolumeOutput struct{ *pulumi.OutputState }

func (GetServerRootVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerRootVolume)(nil)).Elem()
}

func (o GetServerRootVolumeOutput) ToGetServerRootVolumeOutput() GetServerRootVolumeOutput {
	return o
}

func (o GetServerRootVolumeOutput) ToGetServerRootVolumeOutputWithContext(ctx context.Context) GetServerRootVolumeOutput {
	return o
}

// Set the volume where the boot the server
func (o GetServerRootVolumeOutput) Boot() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServerRootVolume) bool { return v.Boot }).(pulumi.BoolOutput)
}

// Forces deletion of the root volume on instance termination.
func (o GetServerRootVolumeOutput) DeleteOnTermination() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServerRootVolume) bool { return v.DeleteOnTermination }).(pulumi.BoolOutput)
}

// The server name. Only one of `name` and `serverId` should be specified.
func (o GetServerRootVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerRootVolume) string { return v.Name }).(pulumi.StringOutput)
}

// SBS Volume IOPS, only with volumeType as sbs_volume
func (o GetServerRootVolumeOutput) SbsIops() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerRootVolume) int { return v.SbsIops }).(pulumi.IntOutput)
}

// Size of the root volume in gigabytes.
func (o GetServerRootVolumeOutput) SizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerRootVolume) int { return v.SizeInGb }).(pulumi.IntOutput)
}

// The volume ID of the root volume of the server.
func (o GetServerRootVolumeOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerRootVolume) string { return v.VolumeId }).(pulumi.StringOutput)
}

// Volume type of the root volume
func (o GetServerRootVolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerRootVolume) string { return v.VolumeType }).(pulumi.StringOutput)
}

type GetServerRootVolumeArrayOutput struct{ *pulumi.OutputState }

func (GetServerRootVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerRootVolume)(nil)).Elem()
}

func (o GetServerRootVolumeArrayOutput) ToGetServerRootVolumeArrayOutput() GetServerRootVolumeArrayOutput {
	return o
}

func (o GetServerRootVolumeArrayOutput) ToGetServerRootVolumeArrayOutputWithContext(ctx context.Context) GetServerRootVolumeArrayOutput {
	return o
}

func (o GetServerRootVolumeArrayOutput) Index(i pulumi.IntInput) GetServerRootVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerRootVolume {
		return vs[0].([]GetServerRootVolume)[vs[1].(int)]
	}).(GetServerRootVolumeOutput)
}

type GetServersServer struct {
	// The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.
	BootType string `pulumi:"bootType"`
	// Deprecated: bootscript are not supported
	BootscriptId string `pulumi:"bootscriptId"`
	// If true a dynamic IP will be attached to the server.
	EnableDynamicIp bool `pulumi:"enableDynamicIp"`
	// Determines if IPv6 is enabled for the server.
	EnableIpv6 bool `pulumi:"enableIpv6"`
	// The ID of the IP
	Id string `pulumi:"id"`
	// The UUID or the label of the base image used by the server.
	Image string `pulumi:"image"`
	// The default ipv6 address routed to the server. ( Only set when enableIpv6 is set to true )
	Ipv6Address string `pulumi:"ipv6Address"`
	// The ipv6 gateway address. ( Only set when enableIpv6 is set to true )
	Ipv6Gateway string `pulumi:"ipv6Gateway"`
	// The prefix length of the ipv6 subnet routed to the server. ( Only set when enableIpv6 is set to true )
	Ipv6PrefixLength int `pulumi:"ipv6PrefixLength"`
	// The server name used as filter. Servers with a name like it are listed.
	Name string `pulumi:"name"`
	// The organization ID the server is associated with.
	OrganizationId string `pulumi:"organizationId"`
	// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.
	PlacementGroupId              string `pulumi:"placementGroupId"`
	PlacementGroupPolicyRespected bool   `pulumi:"placementGroupPolicyRespected"`
	// The Scaleway internal IP address of the server.
	PrivateIp string `pulumi:"privateIp"`
	// The ID of the project the server is associated with.
	ProjectId string `pulumi:"projectId"`
	// The public IP address of the server.
	//
	// Deprecated: Use publicIps instead
	PublicIp string `pulumi:"publicIp"`
	// The list of public IPs of the server
	PublicIps []GetServersServerPublicIp `pulumi:"publicIps"`
	// The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// The state of the server. Possible values are: `started`, `stopped` or `standby`.
	State string `pulumi:"state"`
	// List of tags used as filter. Servers with these exact tags are listed.
	Tags []string `pulumi:"tags"`
	// The commercial type of the server.
	Type string `pulumi:"type"`
	// `zone`) The zone in which servers exist.
	Zone string `pulumi:"zone"`
}

// GetServersServerInput is an input type that accepts GetServersServerArgs and GetServersServerOutput values.
// You can construct a concrete instance of `GetServersServerInput` via:
//
//	GetServersServerArgs{...}
type GetServersServerInput interface {
	pulumi.Input

	ToGetServersServerOutput() GetServersServerOutput
	ToGetServersServerOutputWithContext(context.Context) GetServersServerOutput
}

type GetServersServerArgs struct {
	// The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.
	BootType pulumi.StringInput `pulumi:"bootType"`
	// Deprecated: bootscript are not supported
	BootscriptId pulumi.StringInput `pulumi:"bootscriptId"`
	// If true a dynamic IP will be attached to the server.
	EnableDynamicIp pulumi.BoolInput `pulumi:"enableDynamicIp"`
	// Determines if IPv6 is enabled for the server.
	EnableIpv6 pulumi.BoolInput `pulumi:"enableIpv6"`
	// The ID of the IP
	Id pulumi.StringInput `pulumi:"id"`
	// The UUID or the label of the base image used by the server.
	Image pulumi.StringInput `pulumi:"image"`
	// The default ipv6 address routed to the server. ( Only set when enableIpv6 is set to true )
	Ipv6Address pulumi.StringInput `pulumi:"ipv6Address"`
	// The ipv6 gateway address. ( Only set when enableIpv6 is set to true )
	Ipv6Gateway pulumi.StringInput `pulumi:"ipv6Gateway"`
	// The prefix length of the ipv6 subnet routed to the server. ( Only set when enableIpv6 is set to true )
	Ipv6PrefixLength pulumi.IntInput `pulumi:"ipv6PrefixLength"`
	// The server name used as filter. Servers with a name like it are listed.
	Name pulumi.StringInput `pulumi:"name"`
	// The organization ID the server is associated with.
	OrganizationId pulumi.StringInput `pulumi:"organizationId"`
	// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.
	PlacementGroupId              pulumi.StringInput `pulumi:"placementGroupId"`
	PlacementGroupPolicyRespected pulumi.BoolInput   `pulumi:"placementGroupPolicyRespected"`
	// The Scaleway internal IP address of the server.
	PrivateIp pulumi.StringInput `pulumi:"privateIp"`
	// The ID of the project the server is associated with.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The public IP address of the server.
	//
	// Deprecated: Use publicIps instead
	PublicIp pulumi.StringInput `pulumi:"publicIp"`
	// The list of public IPs of the server
	PublicIps GetServersServerPublicIpArrayInput `pulumi:"publicIps"`
	// The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.
	SecurityGroupId pulumi.StringInput `pulumi:"securityGroupId"`
	// The state of the server. Possible values are: `started`, `stopped` or `standby`.
	State pulumi.StringInput `pulumi:"state"`
	// List of tags used as filter. Servers with these exact tags are listed.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// The commercial type of the server.
	Type pulumi.StringInput `pulumi:"type"`
	// `zone`) The zone in which servers exist.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetServersServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServersServer)(nil)).Elem()
}

func (i GetServersServerArgs) ToGetServersServerOutput() GetServersServerOutput {
	return i.ToGetServersServerOutputWithContext(context.Background())
}

func (i GetServersServerArgs) ToGetServersServerOutputWithContext(ctx context.Context) GetServersServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServersServerOutput)
}

// GetServersServerArrayInput is an input type that accepts GetServersServerArray and GetServersServerArrayOutput values.
// You can construct a concrete instance of `GetServersServerArrayInput` via:
//
//	GetServersServerArray{ GetServersServerArgs{...} }
type GetServersServerArrayInput interface {
	pulumi.Input

	ToGetServersServerArrayOutput() GetServersServerArrayOutput
	ToGetServersServerArrayOutputWithContext(context.Context) GetServersServerArrayOutput
}

type GetServersServerArray []GetServersServerInput

func (GetServersServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServersServer)(nil)).Elem()
}

func (i GetServersServerArray) ToGetServersServerArrayOutput() GetServersServerArrayOutput {
	return i.ToGetServersServerArrayOutputWithContext(context.Background())
}

func (i GetServersServerArray) ToGetServersServerArrayOutputWithContext(ctx context.Context) GetServersServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServersServerArrayOutput)
}

type GetServersServerOutput struct{ *pulumi.OutputState }

func (GetServersServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServersServer)(nil)).Elem()
}

func (o GetServersServerOutput) ToGetServersServerOutput() GetServersServerOutput {
	return o
}

func (o GetServersServerOutput) ToGetServersServerOutputWithContext(ctx context.Context) GetServersServerOutput {
	return o
}

// The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.
func (o GetServersServerOutput) BootType() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.BootType }).(pulumi.StringOutput)
}

// Deprecated: bootscript are not supported
func (o GetServersServerOutput) BootscriptId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.BootscriptId }).(pulumi.StringOutput)
}

// If true a dynamic IP will be attached to the server.
func (o GetServersServerOutput) EnableDynamicIp() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServersServer) bool { return v.EnableDynamicIp }).(pulumi.BoolOutput)
}

// Determines if IPv6 is enabled for the server.
func (o GetServersServerOutput) EnableIpv6() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServersServer) bool { return v.EnableIpv6 }).(pulumi.BoolOutput)
}

// The ID of the IP
func (o GetServersServerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.Id }).(pulumi.StringOutput)
}

// The UUID or the label of the base image used by the server.
func (o GetServersServerOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.Image }).(pulumi.StringOutput)
}

// The default ipv6 address routed to the server. ( Only set when enableIpv6 is set to true )
func (o GetServersServerOutput) Ipv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.Ipv6Address }).(pulumi.StringOutput)
}

// The ipv6 gateway address. ( Only set when enableIpv6 is set to true )
func (o GetServersServerOutput) Ipv6Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.Ipv6Gateway }).(pulumi.StringOutput)
}

// The prefix length of the ipv6 subnet routed to the server. ( Only set when enableIpv6 is set to true )
func (o GetServersServerOutput) Ipv6PrefixLength() pulumi.IntOutput {
	return o.ApplyT(func(v GetServersServer) int { return v.Ipv6PrefixLength }).(pulumi.IntOutput)
}

// The server name used as filter. Servers with a name like it are listed.
func (o GetServersServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.Name }).(pulumi.StringOutput)
}

// The organization ID the server is associated with.
func (o GetServersServerOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.OrganizationId }).(pulumi.StringOutput)
}

// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.
func (o GetServersServerOutput) PlacementGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.PlacementGroupId }).(pulumi.StringOutput)
}

func (o GetServersServerOutput) PlacementGroupPolicyRespected() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServersServer) bool { return v.PlacementGroupPolicyRespected }).(pulumi.BoolOutput)
}

// The Scaleway internal IP address of the server.
func (o GetServersServerOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.PrivateIp }).(pulumi.StringOutput)
}

// The ID of the project the server is associated with.
func (o GetServersServerOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The public IP address of the server.
//
// Deprecated: Use publicIps instead
func (o GetServersServerOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.PublicIp }).(pulumi.StringOutput)
}

// The list of public IPs of the server
func (o GetServersServerOutput) PublicIps() GetServersServerPublicIpArrayOutput {
	return o.ApplyT(func(v GetServersServer) []GetServersServerPublicIp { return v.PublicIps }).(GetServersServerPublicIpArrayOutput)
}

// The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.
func (o GetServersServerOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// The state of the server. Possible values are: `started`, `stopped` or `standby`.
func (o GetServersServerOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.State }).(pulumi.StringOutput)
}

// List of tags used as filter. Servers with these exact tags are listed.
func (o GetServersServerOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetServersServer) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The commercial type of the server.
func (o GetServersServerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.Type }).(pulumi.StringOutput)
}

// `zone`) The zone in which servers exist.
func (o GetServersServerOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.Zone }).(pulumi.StringOutput)
}

type GetServersServerArrayOutput struct{ *pulumi.OutputState }

func (GetServersServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServersServer)(nil)).Elem()
}

func (o GetServersServerArrayOutput) ToGetServersServerArrayOutput() GetServersServerArrayOutput {
	return o
}

func (o GetServersServerArrayOutput) ToGetServersServerArrayOutputWithContext(ctx context.Context) GetServersServerArrayOutput {
	return o
}

func (o GetServersServerArrayOutput) Index(i pulumi.IntInput) GetServersServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServersServer {
		return vs[0].([]GetServersServer)[vs[1].(int)]
	}).(GetServersServerOutput)
}

type GetServersServerPublicIp struct {
	// The address of the IP
	Address string `pulumi:"address"`
	// The ID of the IP
	Id string `pulumi:"id"`
}

// GetServersServerPublicIpInput is an input type that accepts GetServersServerPublicIpArgs and GetServersServerPublicIpOutput values.
// You can construct a concrete instance of `GetServersServerPublicIpInput` via:
//
//	GetServersServerPublicIpArgs{...}
type GetServersServerPublicIpInput interface {
	pulumi.Input

	ToGetServersServerPublicIpOutput() GetServersServerPublicIpOutput
	ToGetServersServerPublicIpOutputWithContext(context.Context) GetServersServerPublicIpOutput
}

type GetServersServerPublicIpArgs struct {
	// The address of the IP
	Address pulumi.StringInput `pulumi:"address"`
	// The ID of the IP
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetServersServerPublicIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServersServerPublicIp)(nil)).Elem()
}

func (i GetServersServerPublicIpArgs) ToGetServersServerPublicIpOutput() GetServersServerPublicIpOutput {
	return i.ToGetServersServerPublicIpOutputWithContext(context.Background())
}

func (i GetServersServerPublicIpArgs) ToGetServersServerPublicIpOutputWithContext(ctx context.Context) GetServersServerPublicIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServersServerPublicIpOutput)
}

// GetServersServerPublicIpArrayInput is an input type that accepts GetServersServerPublicIpArray and GetServersServerPublicIpArrayOutput values.
// You can construct a concrete instance of `GetServersServerPublicIpArrayInput` via:
//
//	GetServersServerPublicIpArray{ GetServersServerPublicIpArgs{...} }
type GetServersServerPublicIpArrayInput interface {
	pulumi.Input

	ToGetServersServerPublicIpArrayOutput() GetServersServerPublicIpArrayOutput
	ToGetServersServerPublicIpArrayOutputWithContext(context.Context) GetServersServerPublicIpArrayOutput
}

type GetServersServerPublicIpArray []GetServersServerPublicIpInput

func (GetServersServerPublicIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServersServerPublicIp)(nil)).Elem()
}

func (i GetServersServerPublicIpArray) ToGetServersServerPublicIpArrayOutput() GetServersServerPublicIpArrayOutput {
	return i.ToGetServersServerPublicIpArrayOutputWithContext(context.Background())
}

func (i GetServersServerPublicIpArray) ToGetServersServerPublicIpArrayOutputWithContext(ctx context.Context) GetServersServerPublicIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServersServerPublicIpArrayOutput)
}

type GetServersServerPublicIpOutput struct{ *pulumi.OutputState }

func (GetServersServerPublicIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServersServerPublicIp)(nil)).Elem()
}

func (o GetServersServerPublicIpOutput) ToGetServersServerPublicIpOutput() GetServersServerPublicIpOutput {
	return o
}

func (o GetServersServerPublicIpOutput) ToGetServersServerPublicIpOutputWithContext(ctx context.Context) GetServersServerPublicIpOutput {
	return o
}

// The address of the IP
func (o GetServersServerPublicIpOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServerPublicIp) string { return v.Address }).(pulumi.StringOutput)
}

// The ID of the IP
func (o GetServersServerPublicIpOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServerPublicIp) string { return v.Id }).(pulumi.StringOutput)
}

type GetServersServerPublicIpArrayOutput struct{ *pulumi.OutputState }

func (GetServersServerPublicIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServersServerPublicIp)(nil)).Elem()
}

func (o GetServersServerPublicIpArrayOutput) ToGetServersServerPublicIpArrayOutput() GetServersServerPublicIpArrayOutput {
	return o
}

func (o GetServersServerPublicIpArrayOutput) ToGetServersServerPublicIpArrayOutputWithContext(ctx context.Context) GetServersServerPublicIpArrayOutput {
	return o
}

func (o GetServersServerPublicIpArrayOutput) Index(i pulumi.IntInput) GetServersServerPublicIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServersServerPublicIp {
		return vs[0].([]GetServersServerPublicIp)[vs[1].(int)]
	}).(GetServersServerPublicIpOutput)
}

type GetSnapshotImport struct {
	// Bucket containing qcow
	Bucket string `pulumi:"bucket"`
	// Key of the qcow file in the specified bucket
	Key string `pulumi:"key"`
}

// GetSnapshotImportInput is an input type that accepts GetSnapshotImportArgs and GetSnapshotImportOutput values.
// You can construct a concrete instance of `GetSnapshotImportInput` via:
//
//	GetSnapshotImportArgs{...}
type GetSnapshotImportInput interface {
	pulumi.Input

	ToGetSnapshotImportOutput() GetSnapshotImportOutput
	ToGetSnapshotImportOutputWithContext(context.Context) GetSnapshotImportOutput
}

type GetSnapshotImportArgs struct {
	// Bucket containing qcow
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// Key of the qcow file in the specified bucket
	Key pulumi.StringInput `pulumi:"key"`
}

func (GetSnapshotImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnapshotImport)(nil)).Elem()
}

func (i GetSnapshotImportArgs) ToGetSnapshotImportOutput() GetSnapshotImportOutput {
	return i.ToGetSnapshotImportOutputWithContext(context.Background())
}

func (i GetSnapshotImportArgs) ToGetSnapshotImportOutputWithContext(ctx context.Context) GetSnapshotImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnapshotImportOutput)
}

// GetSnapshotImportArrayInput is an input type that accepts GetSnapshotImportArray and GetSnapshotImportArrayOutput values.
// You can construct a concrete instance of `GetSnapshotImportArrayInput` via:
//
//	GetSnapshotImportArray{ GetSnapshotImportArgs{...} }
type GetSnapshotImportArrayInput interface {
	pulumi.Input

	ToGetSnapshotImportArrayOutput() GetSnapshotImportArrayOutput
	ToGetSnapshotImportArrayOutputWithContext(context.Context) GetSnapshotImportArrayOutput
}

type GetSnapshotImportArray []GetSnapshotImportInput

func (GetSnapshotImportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSnapshotImport)(nil)).Elem()
}

func (i GetSnapshotImportArray) ToGetSnapshotImportArrayOutput() GetSnapshotImportArrayOutput {
	return i.ToGetSnapshotImportArrayOutputWithContext(context.Background())
}

func (i GetSnapshotImportArray) ToGetSnapshotImportArrayOutputWithContext(ctx context.Context) GetSnapshotImportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnapshotImportArrayOutput)
}

type GetSnapshotImportOutput struct{ *pulumi.OutputState }

func (GetSnapshotImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnapshotImport)(nil)).Elem()
}

func (o GetSnapshotImportOutput) ToGetSnapshotImportOutput() GetSnapshotImportOutput {
	return o
}

func (o GetSnapshotImportOutput) ToGetSnapshotImportOutputWithContext(ctx context.Context) GetSnapshotImportOutput {
	return o
}

// Bucket containing qcow
func (o GetSnapshotImportOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotImport) string { return v.Bucket }).(pulumi.StringOutput)
}

// Key of the qcow file in the specified bucket
func (o GetSnapshotImportOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotImport) string { return v.Key }).(pulumi.StringOutput)
}

type GetSnapshotImportArrayOutput struct{ *pulumi.OutputState }

func (GetSnapshotImportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSnapshotImport)(nil)).Elem()
}

func (o GetSnapshotImportArrayOutput) ToGetSnapshotImportArrayOutput() GetSnapshotImportArrayOutput {
	return o
}

func (o GetSnapshotImportArrayOutput) ToGetSnapshotImportArrayOutputWithContext(ctx context.Context) GetSnapshotImportArrayOutput {
	return o
}

func (o GetSnapshotImportArrayOutput) Index(i pulumi.IntInput) GetSnapshotImportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSnapshotImport {
		return vs[0].([]GetSnapshotImport)[vs[1].(int)]
	}).(GetSnapshotImportOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageAdditionalVolumeInput)(nil)).Elem(), ImageAdditionalVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageAdditionalVolumeArrayInput)(nil)).Elem(), ImageAdditionalVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateNicPrivateIpInput)(nil)).Elem(), PrivateNicPrivateIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateNicPrivateIpArrayInput)(nil)).Elem(), PrivateNicPrivateIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupInboundRuleInput)(nil)).Elem(), SecurityGroupInboundRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupInboundRuleArrayInput)(nil)).Elem(), SecurityGroupInboundRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupOutboundRuleInput)(nil)).Elem(), SecurityGroupOutboundRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupOutboundRuleArrayInput)(nil)).Elem(), SecurityGroupOutboundRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRulesInboundRuleInput)(nil)).Elem(), SecurityGroupRulesInboundRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRulesInboundRuleArrayInput)(nil)).Elem(), SecurityGroupRulesInboundRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRulesOutboundRuleInput)(nil)).Elem(), SecurityGroupRulesOutboundRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRulesOutboundRuleArrayInput)(nil)).Elem(), SecurityGroupRulesOutboundRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerPrivateIpInput)(nil)).Elem(), ServerPrivateIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerPrivateIpArrayInput)(nil)).Elem(), ServerPrivateIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerPrivateNetworkInput)(nil)).Elem(), ServerPrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerPrivateNetworkArrayInput)(nil)).Elem(), ServerPrivateNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerPublicIpInput)(nil)).Elem(), ServerPublicIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerPublicIpArrayInput)(nil)).Elem(), ServerPublicIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerRootVolumeInput)(nil)).Elem(), ServerRootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerRootVolumePtrInput)(nil)).Elem(), ServerRootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotImportInput)(nil)).Elem(), SnapshotImportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotImportPtrInput)(nil)).Elem(), SnapshotImportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateNicPrivateIpInput)(nil)).Elem(), GetPrivateNicPrivateIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateNicPrivateIpArrayInput)(nil)).Elem(), GetPrivateNicPrivateIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityGroupInboundRuleInput)(nil)).Elem(), GetSecurityGroupInboundRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityGroupInboundRuleArrayInput)(nil)).Elem(), GetSecurityGroupInboundRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityGroupOutboundRuleInput)(nil)).Elem(), GetSecurityGroupOutboundRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityGroupOutboundRuleArrayInput)(nil)).Elem(), GetSecurityGroupOutboundRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerPrivateIpInput)(nil)).Elem(), GetServerPrivateIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerPrivateIpArrayInput)(nil)).Elem(), GetServerPrivateIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerPrivateNetworkInput)(nil)).Elem(), GetServerPrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerPrivateNetworkArrayInput)(nil)).Elem(), GetServerPrivateNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerPublicIpInput)(nil)).Elem(), GetServerPublicIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerPublicIpArrayInput)(nil)).Elem(), GetServerPublicIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerRootVolumeInput)(nil)).Elem(), GetServerRootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerRootVolumeArrayInput)(nil)).Elem(), GetServerRootVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServersServerInput)(nil)).Elem(), GetServersServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServersServerArrayInput)(nil)).Elem(), GetServersServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServersServerPublicIpInput)(nil)).Elem(), GetServersServerPublicIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServersServerPublicIpArrayInput)(nil)).Elem(), GetServersServerPublicIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSnapshotImportInput)(nil)).Elem(), GetSnapshotImportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSnapshotImportArrayInput)(nil)).Elem(), GetSnapshotImportArray{})
	pulumi.RegisterOutputType(ImageAdditionalVolumeOutput{})
	pulumi.RegisterOutputType(ImageAdditionalVolumeArrayOutput{})
	pulumi.RegisterOutputType(PrivateNicPrivateIpOutput{})
	pulumi.RegisterOutputType(PrivateNicPrivateIpArrayOutput{})
	pulumi.RegisterOutputType(SecurityGroupInboundRuleOutput{})
	pulumi.RegisterOutputType(SecurityGroupInboundRuleArrayOutput{})
	pulumi.RegisterOutputType(SecurityGroupOutboundRuleOutput{})
	pulumi.RegisterOutputType(SecurityGroupOutboundRuleArrayOutput{})
	pulumi.RegisterOutputType(SecurityGroupRulesInboundRuleOutput{})
	pulumi.RegisterOutputType(SecurityGroupRulesInboundRuleArrayOutput{})
	pulumi.RegisterOutputType(SecurityGroupRulesOutboundRuleOutput{})
	pulumi.RegisterOutputType(SecurityGroupRulesOutboundRuleArrayOutput{})
	pulumi.RegisterOutputType(ServerPrivateIpOutput{})
	pulumi.RegisterOutputType(ServerPrivateIpArrayOutput{})
	pulumi.RegisterOutputType(ServerPrivateNetworkOutput{})
	pulumi.RegisterOutputType(ServerPrivateNetworkArrayOutput{})
	pulumi.RegisterOutputType(ServerPublicIpOutput{})
	pulumi.RegisterOutputType(ServerPublicIpArrayOutput{})
	pulumi.RegisterOutputType(ServerRootVolumeOutput{})
	pulumi.RegisterOutputType(ServerRootVolumePtrOutput{})
	pulumi.RegisterOutputType(SnapshotImportOutput{})
	pulumi.RegisterOutputType(SnapshotImportPtrOutput{})
	pulumi.RegisterOutputType(GetPrivateNicPrivateIpOutput{})
	pulumi.RegisterOutputType(GetPrivateNicPrivateIpArrayOutput{})
	pulumi.RegisterOutputType(GetSecurityGroupInboundRuleOutput{})
	pulumi.RegisterOutputType(GetSecurityGroupInboundRuleArrayOutput{})
	pulumi.RegisterOutputType(GetSecurityGroupOutboundRuleOutput{})
	pulumi.RegisterOutputType(GetSecurityGroupOutboundRuleArrayOutput{})
	pulumi.RegisterOutputType(GetServerPrivateIpOutput{})
	pulumi.RegisterOutputType(GetServerPrivateIpArrayOutput{})
	pulumi.RegisterOutputType(GetServerPrivateNetworkOutput{})
	pulumi.RegisterOutputType(GetServerPrivateNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetServerPublicIpOutput{})
	pulumi.RegisterOutputType(GetServerPublicIpArrayOutput{})
	pulumi.RegisterOutputType(GetServerRootVolumeOutput{})
	pulumi.RegisterOutputType(GetServerRootVolumeArrayOutput{})
	pulumi.RegisterOutputType(GetServersServerOutput{})
	pulumi.RegisterOutputType(GetServersServerArrayOutput{})
	pulumi.RegisterOutputType(GetServersServerPublicIpOutput{})
	pulumi.RegisterOutputType(GetServersServerPublicIpArrayOutput{})
	pulumi.RegisterOutputType(GetSnapshotImportOutput{})
	pulumi.RegisterOutputType(GetSnapshotImportArrayOutput{})
}
