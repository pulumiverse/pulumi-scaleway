// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package instance

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway compute Instance User Data values.
//
// User data is a key value store API you can use to provide data from and to your server without authentication. It is the mechanism by which a user can pass information contained in a local file to an Instance at launch time.
//
// The typical use case is to pass something like a shell script or a configuration file as user data.
//
// For more information about [userData](https://www.scaleway.com/en/developers/api/instance/#path-user-data-list-user-data) check our documentation guide [here](https://www.scaleway.com/en/docs/compute/instances/how-to/use-boot-modes/#how-to-use-cloud-init).
//
// About cloud-init documentation please check this [link](https://cloudinit.readthedocs.io/en/latest/).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/instance"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			userData := map[string]interface{}{
//				"cloud-init": "#cloud-config\napt-update: true\napt-upgrade: true\n",
//				"foo":        "bar",
//			}
//			if param := cfg.GetObject("userData"); param != nil {
//				userData = param
//			}
//			mainServer, err := instance.NewServer(ctx, "main", &instance.ServerArgs{
//				Image: pulumi.String("ubuntu_focal"),
//				Type:  pulumi.String("DEV1-S"),
//			})
//			if err != nil {
//				return err
//			}
//			// User data with a single value
//			_, err = instance.NewUserData(ctx, "main", &instance.UserDataArgs{
//				ServerId: mainServer.ID(),
//				Key:      pulumi.String("foo"),
//				Value:    pulumi.String("bar"),
//			})
//			if err != nil {
//				return err
//			}
//			// User Data with many keys.
//			var data []*instance.UserData
//			for key0, val0 := range userData {
//				__res, err := instance.NewUserData(ctx, fmt.Sprintf("data-%v", key0), &instance.UserDataArgs{
//					ServerId: mainServer.ID(),
//					Key:      pulumi.String(key0),
//					Value:    pulumi.Any(val0),
//				})
//				if err != nil {
//					return err
//				}
//				data = append(data, __res)
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// User data can be imported using the `{zone}/{key}/{server_id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:instance/userData:UserData main fr-par-1/cloud-init/11111111-1111-1111-1111-111111111111
// ```
type UserData struct {
	pulumi.CustomResourceState

	// Key of the user data.
	Key pulumi.StringOutput `pulumi:"key"`
	// The ID of the server associated with.
	ServerId pulumi.StringOutput `pulumi:"serverId"`
	// Value associated with your key
	Value pulumi.StringOutput `pulumi:"value"`
	// `zone`) The zone in which the server should be created.
	//
	// > **Important:**   Use the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.
	// You can define values using:
	// - string
	// - UTF-8 encoded file content using file
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewUserData registers a new resource with the given unique name, arguments, and options.
func NewUserData(ctx *pulumi.Context,
	name string, args *UserDataArgs, opts ...pulumi.ResourceOption) (*UserData, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/instanceUserData:InstanceUserData"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserData
	err := ctx.RegisterResource("scaleway:instance/userData:UserData", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserData gets an existing UserData resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserData(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserDataState, opts ...pulumi.ResourceOption) (*UserData, error) {
	var resource UserData
	err := ctx.ReadResource("scaleway:instance/userData:UserData", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserData resources.
type userDataState struct {
	// Key of the user data.
	Key *string `pulumi:"key"`
	// The ID of the server associated with.
	ServerId *string `pulumi:"serverId"`
	// Value associated with your key
	Value *string `pulumi:"value"`
	// `zone`) The zone in which the server should be created.
	//
	// > **Important:**   Use the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.
	// You can define values using:
	// - string
	// - UTF-8 encoded file content using file
	Zone *string `pulumi:"zone"`
}

type UserDataState struct {
	// Key of the user data.
	Key pulumi.StringPtrInput
	// The ID of the server associated with.
	ServerId pulumi.StringPtrInput
	// Value associated with your key
	Value pulumi.StringPtrInput
	// `zone`) The zone in which the server should be created.
	//
	// > **Important:**   Use the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.
	// You can define values using:
	// - string
	// - UTF-8 encoded file content using file
	Zone pulumi.StringPtrInput
}

func (UserDataState) ElementType() reflect.Type {
	return reflect.TypeOf((*userDataState)(nil)).Elem()
}

type userDataArgs struct {
	// Key of the user data.
	Key string `pulumi:"key"`
	// The ID of the server associated with.
	ServerId string `pulumi:"serverId"`
	// Value associated with your key
	Value string `pulumi:"value"`
	// `zone`) The zone in which the server should be created.
	//
	// > **Important:**   Use the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.
	// You can define values using:
	// - string
	// - UTF-8 encoded file content using file
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a UserData resource.
type UserDataArgs struct {
	// Key of the user data.
	Key pulumi.StringInput
	// The ID of the server associated with.
	ServerId pulumi.StringInput
	// Value associated with your key
	Value pulumi.StringInput
	// `zone`) The zone in which the server should be created.
	//
	// > **Important:**   Use the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.
	// You can define values using:
	// - string
	// - UTF-8 encoded file content using file
	Zone pulumi.StringPtrInput
}

func (UserDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userDataArgs)(nil)).Elem()
}

type UserDataInput interface {
	pulumi.Input

	ToUserDataOutput() UserDataOutput
	ToUserDataOutputWithContext(ctx context.Context) UserDataOutput
}

func (*UserData) ElementType() reflect.Type {
	return reflect.TypeOf((**UserData)(nil)).Elem()
}

func (i *UserData) ToUserDataOutput() UserDataOutput {
	return i.ToUserDataOutputWithContext(context.Background())
}

func (i *UserData) ToUserDataOutputWithContext(ctx context.Context) UserDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDataOutput)
}

// UserDataArrayInput is an input type that accepts UserDataArray and UserDataArrayOutput values.
// You can construct a concrete instance of `UserDataArrayInput` via:
//
//	UserDataArray{ UserDataArgs{...} }
type UserDataArrayInput interface {
	pulumi.Input

	ToUserDataArrayOutput() UserDataArrayOutput
	ToUserDataArrayOutputWithContext(context.Context) UserDataArrayOutput
}

type UserDataArray []UserDataInput

func (UserDataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserData)(nil)).Elem()
}

func (i UserDataArray) ToUserDataArrayOutput() UserDataArrayOutput {
	return i.ToUserDataArrayOutputWithContext(context.Background())
}

func (i UserDataArray) ToUserDataArrayOutputWithContext(ctx context.Context) UserDataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDataArrayOutput)
}

// UserDataMapInput is an input type that accepts UserDataMap and UserDataMapOutput values.
// You can construct a concrete instance of `UserDataMapInput` via:
//
//	UserDataMap{ "key": UserDataArgs{...} }
type UserDataMapInput interface {
	pulumi.Input

	ToUserDataMapOutput() UserDataMapOutput
	ToUserDataMapOutputWithContext(context.Context) UserDataMapOutput
}

type UserDataMap map[string]UserDataInput

func (UserDataMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserData)(nil)).Elem()
}

func (i UserDataMap) ToUserDataMapOutput() UserDataMapOutput {
	return i.ToUserDataMapOutputWithContext(context.Background())
}

func (i UserDataMap) ToUserDataMapOutputWithContext(ctx context.Context) UserDataMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDataMapOutput)
}

type UserDataOutput struct{ *pulumi.OutputState }

func (UserDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserData)(nil)).Elem()
}

func (o UserDataOutput) ToUserDataOutput() UserDataOutput {
	return o
}

func (o UserDataOutput) ToUserDataOutputWithContext(ctx context.Context) UserDataOutput {
	return o
}

// Key of the user data.
func (o UserDataOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *UserData) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// The ID of the server associated with.
func (o UserDataOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserData) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

// Value associated with your key
func (o UserDataOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *UserData) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

// `zone`) The zone in which the server should be created.
//
// > **Important:**   Use the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.
// You can define values using:
// - string
// - UTF-8 encoded file content using file
func (o UserDataOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *UserData) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type UserDataArrayOutput struct{ *pulumi.OutputState }

func (UserDataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserData)(nil)).Elem()
}

func (o UserDataArrayOutput) ToUserDataArrayOutput() UserDataArrayOutput {
	return o
}

func (o UserDataArrayOutput) ToUserDataArrayOutputWithContext(ctx context.Context) UserDataArrayOutput {
	return o
}

func (o UserDataArrayOutput) Index(i pulumi.IntInput) UserDataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserData {
		return vs[0].([]*UserData)[vs[1].(int)]
	}).(UserDataOutput)
}

type UserDataMapOutput struct{ *pulumi.OutputState }

func (UserDataMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserData)(nil)).Elem()
}

func (o UserDataMapOutput) ToUserDataMapOutput() UserDataMapOutput {
	return o
}

func (o UserDataMapOutput) ToUserDataMapOutputWithContext(ctx context.Context) UserDataMapOutput {
	return o
}

func (o UserDataMapOutput) MapIndex(k pulumi.StringInput) UserDataOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserData {
		return vs[0].(map[string]*UserData)[vs[1].(string)]
	}).(UserDataOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserDataInput)(nil)).Elem(), &UserData{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserDataArrayInput)(nil)).Elem(), UserDataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserDataMapInput)(nil)).Elem(), UserDataMap{})
	pulumi.RegisterOutputType(UserDataOutput{})
	pulumi.RegisterOutputType(UserDataArrayOutput{})
	pulumi.RegisterOutputType(UserDataMapOutput{})
}
