// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Compute Snapshots.
// For more information,
// see [the documentation](https://developers.scaleway.com/en/products/instance/api/#snapshots-756fae).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewInstanceSnapshot(ctx, "main", &scaleway.InstanceSnapshotArgs{
//				VolumeId: pulumi.String("11111111-1111-1111-1111-111111111111"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Example with Unified type snapshot
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			mainInstanceVolume, err := scaleway.NewInstanceVolume(ctx, "mainInstanceVolume", &scaleway.InstanceVolumeArgs{
//				Type:     pulumi.String("l_ssd"),
//				SizeInGb: pulumi.Int(10),
//			})
//			if err != nil {
//				return err
//			}
//			mainInstanceServer, err := scaleway.NewInstanceServer(ctx, "mainInstanceServer", &scaleway.InstanceServerArgs{
//				Image: pulumi.String("ubuntu_jammy"),
//				Type:  pulumi.String("DEV1-S"),
//				RootVolume: &scaleway.InstanceServerRootVolumeArgs{
//					SizeInGb:   pulumi.Int(10),
//					VolumeType: pulumi.String("l_ssd"),
//				},
//				AdditionalVolumeIds: pulumi.StringArray{
//					mainInstanceVolume.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewInstanceSnapshot(ctx, "mainInstanceSnapshot", &scaleway.InstanceSnapshotArgs{
//				VolumeId: mainInstanceVolume.ID(),
//				Type:     pulumi.String("unified"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				mainInstanceServer,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Example importing a local qcow2 file
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			bucket, err := scaleway.NewObjectBucket(ctx, "bucket", nil)
//			if err != nil {
//				return err
//			}
//			qcow, err := scaleway.NewObjectItem(ctx, "qcow", &scaleway.ObjectItemArgs{
//				Bucket: bucket.Name,
//				Key:    pulumi.String("server.qcow2"),
//				File:   pulumi.String("myqcow.qcow2"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewInstanceSnapshot(ctx, "snapshot", &scaleway.InstanceSnapshotArgs{
//				Type: pulumi.String("unified"),
//				Import: &scaleway.InstanceSnapshotImportArgs{
//					Bucket: qcow.Bucket,
//					Key:    qcow.Key,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Snapshots can be imported using the `{zone}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/instanceSnapshot:InstanceSnapshot main fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type InstanceSnapshot struct {
	pulumi.CustomResourceState

	// The snapshot creation time.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Import a snapshot from a qcow2 file located in a bucket
	Import InstanceSnapshotImportPtrOutput `pulumi:"import"`
	// The name of the snapshot. If not provided it will be randomly generated.
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization ID the snapshot is associated with.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// `projectId`) The ID of the project the snapshot is
	// associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// (Optional) The size of the snapshot.
	SizeInGb pulumi.IntOutput `pulumi:"sizeInGb"`
	// A list of tags to apply to the snapshot.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The snapshot's volume type.  The possible values are: `bSsd` (Block SSD), `lSsd` (Local SSD) and `unified`.
	// Updates to this field will recreate a new resource.
	Type pulumi.StringOutput `pulumi:"type"`
	// The ID of the volume to take a snapshot from.
	VolumeId pulumi.StringPtrOutput `pulumi:"volumeId"`
	// `zone`) The zone in which
	// the snapshot should be created.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewInstanceSnapshot registers a new resource with the given unique name, arguments, and options.
func NewInstanceSnapshot(ctx *pulumi.Context,
	name string, args *InstanceSnapshotArgs, opts ...pulumi.ResourceOption) (*InstanceSnapshot, error) {
	if args == nil {
		args = &InstanceSnapshotArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InstanceSnapshot
	err := ctx.RegisterResource("scaleway:index/instanceSnapshot:InstanceSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceSnapshot gets an existing InstanceSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceSnapshotState, opts ...pulumi.ResourceOption) (*InstanceSnapshot, error) {
	var resource InstanceSnapshot
	err := ctx.ReadResource("scaleway:index/instanceSnapshot:InstanceSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceSnapshot resources.
type instanceSnapshotState struct {
	// The snapshot creation time.
	CreatedAt *string `pulumi:"createdAt"`
	// Import a snapshot from a qcow2 file located in a bucket
	Import *InstanceSnapshotImport `pulumi:"import"`
	// The name of the snapshot. If not provided it will be randomly generated.
	Name *string `pulumi:"name"`
	// The organization ID the snapshot is associated with.
	OrganizationId *string `pulumi:"organizationId"`
	// `projectId`) The ID of the project the snapshot is
	// associated with.
	ProjectId *string `pulumi:"projectId"`
	// (Optional) The size of the snapshot.
	SizeInGb *int `pulumi:"sizeInGb"`
	// A list of tags to apply to the snapshot.
	Tags []string `pulumi:"tags"`
	// The snapshot's volume type.  The possible values are: `bSsd` (Block SSD), `lSsd` (Local SSD) and `unified`.
	// Updates to this field will recreate a new resource.
	Type *string `pulumi:"type"`
	// The ID of the volume to take a snapshot from.
	VolumeId *string `pulumi:"volumeId"`
	// `zone`) The zone in which
	// the snapshot should be created.
	Zone *string `pulumi:"zone"`
}

type InstanceSnapshotState struct {
	// The snapshot creation time.
	CreatedAt pulumi.StringPtrInput
	// Import a snapshot from a qcow2 file located in a bucket
	Import InstanceSnapshotImportPtrInput
	// The name of the snapshot. If not provided it will be randomly generated.
	Name pulumi.StringPtrInput
	// The organization ID the snapshot is associated with.
	OrganizationId pulumi.StringPtrInput
	// `projectId`) The ID of the project the snapshot is
	// associated with.
	ProjectId pulumi.StringPtrInput
	// (Optional) The size of the snapshot.
	SizeInGb pulumi.IntPtrInput
	// A list of tags to apply to the snapshot.
	Tags pulumi.StringArrayInput
	// The snapshot's volume type.  The possible values are: `bSsd` (Block SSD), `lSsd` (Local SSD) and `unified`.
	// Updates to this field will recreate a new resource.
	Type pulumi.StringPtrInput
	// The ID of the volume to take a snapshot from.
	VolumeId pulumi.StringPtrInput
	// `zone`) The zone in which
	// the snapshot should be created.
	Zone pulumi.StringPtrInput
}

func (InstanceSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceSnapshotState)(nil)).Elem()
}

type instanceSnapshotArgs struct {
	// Import a snapshot from a qcow2 file located in a bucket
	Import *InstanceSnapshotImport `pulumi:"import"`
	// The name of the snapshot. If not provided it will be randomly generated.
	Name *string `pulumi:"name"`
	// `projectId`) The ID of the project the snapshot is
	// associated with.
	ProjectId *string `pulumi:"projectId"`
	// A list of tags to apply to the snapshot.
	Tags []string `pulumi:"tags"`
	// The snapshot's volume type.  The possible values are: `bSsd` (Block SSD), `lSsd` (Local SSD) and `unified`.
	// Updates to this field will recreate a new resource.
	Type *string `pulumi:"type"`
	// The ID of the volume to take a snapshot from.
	VolumeId *string `pulumi:"volumeId"`
	// `zone`) The zone in which
	// the snapshot should be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a InstanceSnapshot resource.
type InstanceSnapshotArgs struct {
	// Import a snapshot from a qcow2 file located in a bucket
	Import InstanceSnapshotImportPtrInput
	// The name of the snapshot. If not provided it will be randomly generated.
	Name pulumi.StringPtrInput
	// `projectId`) The ID of the project the snapshot is
	// associated with.
	ProjectId pulumi.StringPtrInput
	// A list of tags to apply to the snapshot.
	Tags pulumi.StringArrayInput
	// The snapshot's volume type.  The possible values are: `bSsd` (Block SSD), `lSsd` (Local SSD) and `unified`.
	// Updates to this field will recreate a new resource.
	Type pulumi.StringPtrInput
	// The ID of the volume to take a snapshot from.
	VolumeId pulumi.StringPtrInput
	// `zone`) The zone in which
	// the snapshot should be created.
	Zone pulumi.StringPtrInput
}

func (InstanceSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceSnapshotArgs)(nil)).Elem()
}

type InstanceSnapshotInput interface {
	pulumi.Input

	ToInstanceSnapshotOutput() InstanceSnapshotOutput
	ToInstanceSnapshotOutputWithContext(ctx context.Context) InstanceSnapshotOutput
}

func (*InstanceSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceSnapshot)(nil)).Elem()
}

func (i *InstanceSnapshot) ToInstanceSnapshotOutput() InstanceSnapshotOutput {
	return i.ToInstanceSnapshotOutputWithContext(context.Background())
}

func (i *InstanceSnapshot) ToInstanceSnapshotOutputWithContext(ctx context.Context) InstanceSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSnapshotOutput)
}

// InstanceSnapshotArrayInput is an input type that accepts InstanceSnapshotArray and InstanceSnapshotArrayOutput values.
// You can construct a concrete instance of `InstanceSnapshotArrayInput` via:
//
//	InstanceSnapshotArray{ InstanceSnapshotArgs{...} }
type InstanceSnapshotArrayInput interface {
	pulumi.Input

	ToInstanceSnapshotArrayOutput() InstanceSnapshotArrayOutput
	ToInstanceSnapshotArrayOutputWithContext(context.Context) InstanceSnapshotArrayOutput
}

type InstanceSnapshotArray []InstanceSnapshotInput

func (InstanceSnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceSnapshot)(nil)).Elem()
}

func (i InstanceSnapshotArray) ToInstanceSnapshotArrayOutput() InstanceSnapshotArrayOutput {
	return i.ToInstanceSnapshotArrayOutputWithContext(context.Background())
}

func (i InstanceSnapshotArray) ToInstanceSnapshotArrayOutputWithContext(ctx context.Context) InstanceSnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSnapshotArrayOutput)
}

// InstanceSnapshotMapInput is an input type that accepts InstanceSnapshotMap and InstanceSnapshotMapOutput values.
// You can construct a concrete instance of `InstanceSnapshotMapInput` via:
//
//	InstanceSnapshotMap{ "key": InstanceSnapshotArgs{...} }
type InstanceSnapshotMapInput interface {
	pulumi.Input

	ToInstanceSnapshotMapOutput() InstanceSnapshotMapOutput
	ToInstanceSnapshotMapOutputWithContext(context.Context) InstanceSnapshotMapOutput
}

type InstanceSnapshotMap map[string]InstanceSnapshotInput

func (InstanceSnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceSnapshot)(nil)).Elem()
}

func (i InstanceSnapshotMap) ToInstanceSnapshotMapOutput() InstanceSnapshotMapOutput {
	return i.ToInstanceSnapshotMapOutputWithContext(context.Background())
}

func (i InstanceSnapshotMap) ToInstanceSnapshotMapOutputWithContext(ctx context.Context) InstanceSnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSnapshotMapOutput)
}

type InstanceSnapshotOutput struct{ *pulumi.OutputState }

func (InstanceSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceSnapshot)(nil)).Elem()
}

func (o InstanceSnapshotOutput) ToInstanceSnapshotOutput() InstanceSnapshotOutput {
	return o
}

func (o InstanceSnapshotOutput) ToInstanceSnapshotOutputWithContext(ctx context.Context) InstanceSnapshotOutput {
	return o
}

// The snapshot creation time.
func (o InstanceSnapshotOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Import a snapshot from a qcow2 file located in a bucket
func (o InstanceSnapshotOutput) Import() InstanceSnapshotImportPtrOutput {
	return o.ApplyT(func(v *InstanceSnapshot) InstanceSnapshotImportPtrOutput { return v.Import }).(InstanceSnapshotImportPtrOutput)
}

// The name of the snapshot. If not provided it will be randomly generated.
func (o InstanceSnapshotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The organization ID the snapshot is associated with.
func (o InstanceSnapshotOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// `projectId`) The ID of the project the snapshot is
// associated with.
func (o InstanceSnapshotOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// (Optional) The size of the snapshot.
func (o InstanceSnapshotOutput) SizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.IntOutput { return v.SizeInGb }).(pulumi.IntOutput)
}

// A list of tags to apply to the snapshot.
func (o InstanceSnapshotOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The snapshot's volume type.  The possible values are: `bSsd` (Block SSD), `lSsd` (Local SSD) and `unified`.
// Updates to this field will recreate a new resource.
func (o InstanceSnapshotOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The ID of the volume to take a snapshot from.
func (o InstanceSnapshotOutput) VolumeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringPtrOutput { return v.VolumeId }).(pulumi.StringPtrOutput)
}

// `zone`) The zone in which
// the snapshot should be created.
func (o InstanceSnapshotOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type InstanceSnapshotArrayOutput struct{ *pulumi.OutputState }

func (InstanceSnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceSnapshot)(nil)).Elem()
}

func (o InstanceSnapshotArrayOutput) ToInstanceSnapshotArrayOutput() InstanceSnapshotArrayOutput {
	return o
}

func (o InstanceSnapshotArrayOutput) ToInstanceSnapshotArrayOutputWithContext(ctx context.Context) InstanceSnapshotArrayOutput {
	return o
}

func (o InstanceSnapshotArrayOutput) Index(i pulumi.IntInput) InstanceSnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstanceSnapshot {
		return vs[0].([]*InstanceSnapshot)[vs[1].(int)]
	}).(InstanceSnapshotOutput)
}

type InstanceSnapshotMapOutput struct{ *pulumi.OutputState }

func (InstanceSnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceSnapshot)(nil)).Elem()
}

func (o InstanceSnapshotMapOutput) ToInstanceSnapshotMapOutput() InstanceSnapshotMapOutput {
	return o
}

func (o InstanceSnapshotMapOutput) ToInstanceSnapshotMapOutputWithContext(ctx context.Context) InstanceSnapshotMapOutput {
	return o
}

func (o InstanceSnapshotMapOutput) MapIndex(k pulumi.StringInput) InstanceSnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstanceSnapshot {
		return vs[0].(map[string]*InstanceSnapshot)[vs[1].(string)]
	}).(InstanceSnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSnapshotInput)(nil)).Elem(), &InstanceSnapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSnapshotArrayInput)(nil)).Elem(), InstanceSnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSnapshotMapInput)(nil)).Elem(), InstanceSnapshotMap{})
	pulumi.RegisterOutputType(InstanceSnapshotOutput{})
	pulumi.RegisterOutputType(InstanceSnapshotArrayOutput{})
	pulumi.RegisterOutputType(InstanceSnapshotMapOutput{})
}
