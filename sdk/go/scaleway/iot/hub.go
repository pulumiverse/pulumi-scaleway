// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/iot"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iot.NewHub(ctx, "main", &iot.HubArgs{
//				Name:        pulumi.String("test-iot"),
//				ProductPlan: pulumi.String("plan_shared"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IoT Hubs can be imported using the `{region}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:iot/hub:Hub hub01 fr-par/11111111-1111-1111-1111-111111111111
// ```
type Hub struct {
	pulumi.CustomResourceState

	// The current number of connected devices in the Hub.
	ConnectedDeviceCount pulumi.IntOutput `pulumi:"connectedDeviceCount"`
	// The date and time the Hub was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Wether to enable the device auto provisioning or not
	DeviceAutoProvisioning pulumi.BoolPtrOutput `pulumi:"deviceAutoProvisioning"`
	// The number of registered devices in the Hub.
	DeviceCount pulumi.IntOutput `pulumi:"deviceCount"`
	// Whether to enable the hub events or not
	DisableEvents pulumi.BoolPtrOutput `pulumi:"disableEvents"`
	// Wether the IoT Hub instance should be enabled or not.
	//
	// > **Important:** Updates to `enabled` will disconnect eventually connected devices.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The MQTT network endpoint to connect MQTT devices to.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// Topic prefix for the hub events
	EventsTopicPrefix pulumi.StringPtrOutput `pulumi:"eventsTopicPrefix"`
	// Custom user provided certificate authority
	HubCa pulumi.StringPtrOutput `pulumi:"hubCa"`
	// Challenge certificate for the user provided hub CA
	HubCaChallenge pulumi.StringPtrOutput `pulumi:"hubCaChallenge"`
	// The MQTT certificat content
	MqttCa pulumi.StringOutput `pulumi:"mqttCa"`
	// The MQTT ca url
	MqttCaUrl pulumi.StringOutput `pulumi:"mqttCaUrl"`
	// The name of the IoT Hub instance you want to create (e.g. `my-hub`).
	Name pulumi.StringOutput `pulumi:"name"`
	// The organizationId you want to attach the resource to
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// Product plan to create the hub, see documentation for available product plans (e.g. `planShared`)
	//
	// > **Important:** Updates to `productPlan` will recreate the IoT Hub Instance.
	ProductPlan pulumi.StringOutput `pulumi:"productPlan"`
	// `projectId`) The ID of the project the IoT Hub Instance is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// `region`) The region in which the Database Instance should be created.
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// The current status of the Hub.
	Status pulumi.StringOutput `pulumi:"status"`
	// The date and time the Hub resource was updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewHub registers a new resource with the given unique name, arguments, and options.
func NewHub(ctx *pulumi.Context,
	name string, args *HubArgs, opts ...pulumi.ResourceOption) (*Hub, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProductPlan == nil {
		return nil, errors.New("invalid value for required argument 'ProductPlan'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/iotHub:IotHub"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Hub
	err := ctx.RegisterResource("scaleway:iot/hub:Hub", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHub gets an existing Hub resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHub(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HubState, opts ...pulumi.ResourceOption) (*Hub, error) {
	var resource Hub
	err := ctx.ReadResource("scaleway:iot/hub:Hub", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Hub resources.
type hubState struct {
	// The current number of connected devices in the Hub.
	ConnectedDeviceCount *int `pulumi:"connectedDeviceCount"`
	// The date and time the Hub was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Wether to enable the device auto provisioning or not
	DeviceAutoProvisioning *bool `pulumi:"deviceAutoProvisioning"`
	// The number of registered devices in the Hub.
	DeviceCount *int `pulumi:"deviceCount"`
	// Whether to enable the hub events or not
	DisableEvents *bool `pulumi:"disableEvents"`
	// Wether the IoT Hub instance should be enabled or not.
	//
	// > **Important:** Updates to `enabled` will disconnect eventually connected devices.
	Enabled *bool `pulumi:"enabled"`
	// The MQTT network endpoint to connect MQTT devices to.
	Endpoint *string `pulumi:"endpoint"`
	// Topic prefix for the hub events
	EventsTopicPrefix *string `pulumi:"eventsTopicPrefix"`
	// Custom user provided certificate authority
	HubCa *string `pulumi:"hubCa"`
	// Challenge certificate for the user provided hub CA
	HubCaChallenge *string `pulumi:"hubCaChallenge"`
	// The MQTT certificat content
	MqttCa *string `pulumi:"mqttCa"`
	// The MQTT ca url
	MqttCaUrl *string `pulumi:"mqttCaUrl"`
	// The name of the IoT Hub instance you want to create (e.g. `my-hub`).
	Name *string `pulumi:"name"`
	// The organizationId you want to attach the resource to
	OrganizationId *string `pulumi:"organizationId"`
	// Product plan to create the hub, see documentation for available product plans (e.g. `planShared`)
	//
	// > **Important:** Updates to `productPlan` will recreate the IoT Hub Instance.
	ProductPlan *string `pulumi:"productPlan"`
	// `projectId`) The ID of the project the IoT Hub Instance is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region in which the Database Instance should be created.
	Region *string `pulumi:"region"`
	// The current status of the Hub.
	Status *string `pulumi:"status"`
	// The date and time the Hub resource was updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type HubState struct {
	// The current number of connected devices in the Hub.
	ConnectedDeviceCount pulumi.IntPtrInput
	// The date and time the Hub was created.
	CreatedAt pulumi.StringPtrInput
	// Wether to enable the device auto provisioning or not
	DeviceAutoProvisioning pulumi.BoolPtrInput
	// The number of registered devices in the Hub.
	DeviceCount pulumi.IntPtrInput
	// Whether to enable the hub events or not
	DisableEvents pulumi.BoolPtrInput
	// Wether the IoT Hub instance should be enabled or not.
	//
	// > **Important:** Updates to `enabled` will disconnect eventually connected devices.
	Enabled pulumi.BoolPtrInput
	// The MQTT network endpoint to connect MQTT devices to.
	Endpoint pulumi.StringPtrInput
	// Topic prefix for the hub events
	EventsTopicPrefix pulumi.StringPtrInput
	// Custom user provided certificate authority
	HubCa pulumi.StringPtrInput
	// Challenge certificate for the user provided hub CA
	HubCaChallenge pulumi.StringPtrInput
	// The MQTT certificat content
	MqttCa pulumi.StringPtrInput
	// The MQTT ca url
	MqttCaUrl pulumi.StringPtrInput
	// The name of the IoT Hub instance you want to create (e.g. `my-hub`).
	Name pulumi.StringPtrInput
	// The organizationId you want to attach the resource to
	OrganizationId pulumi.StringPtrInput
	// Product plan to create the hub, see documentation for available product plans (e.g. `planShared`)
	//
	// > **Important:** Updates to `productPlan` will recreate the IoT Hub Instance.
	ProductPlan pulumi.StringPtrInput
	// `projectId`) The ID of the project the IoT Hub Instance is associated with.
	ProjectId pulumi.StringPtrInput
	// `region`) The region in which the Database Instance should be created.
	Region pulumi.StringPtrInput
	// The current status of the Hub.
	Status pulumi.StringPtrInput
	// The date and time the Hub resource was updated.
	UpdatedAt pulumi.StringPtrInput
}

func (HubState) ElementType() reflect.Type {
	return reflect.TypeOf((*hubState)(nil)).Elem()
}

type hubArgs struct {
	// Wether to enable the device auto provisioning or not
	DeviceAutoProvisioning *bool `pulumi:"deviceAutoProvisioning"`
	// Whether to enable the hub events or not
	DisableEvents *bool `pulumi:"disableEvents"`
	// Wether the IoT Hub instance should be enabled or not.
	//
	// > **Important:** Updates to `enabled` will disconnect eventually connected devices.
	Enabled *bool `pulumi:"enabled"`
	// Topic prefix for the hub events
	EventsTopicPrefix *string `pulumi:"eventsTopicPrefix"`
	// Custom user provided certificate authority
	HubCa *string `pulumi:"hubCa"`
	// Challenge certificate for the user provided hub CA
	HubCaChallenge *string `pulumi:"hubCaChallenge"`
	// The name of the IoT Hub instance you want to create (e.g. `my-hub`).
	Name *string `pulumi:"name"`
	// Product plan to create the hub, see documentation for available product plans (e.g. `planShared`)
	//
	// > **Important:** Updates to `productPlan` will recreate the IoT Hub Instance.
	ProductPlan string `pulumi:"productPlan"`
	// `projectId`) The ID of the project the IoT Hub Instance is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region in which the Database Instance should be created.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a Hub resource.
type HubArgs struct {
	// Wether to enable the device auto provisioning or not
	DeviceAutoProvisioning pulumi.BoolPtrInput
	// Whether to enable the hub events or not
	DisableEvents pulumi.BoolPtrInput
	// Wether the IoT Hub instance should be enabled or not.
	//
	// > **Important:** Updates to `enabled` will disconnect eventually connected devices.
	Enabled pulumi.BoolPtrInput
	// Topic prefix for the hub events
	EventsTopicPrefix pulumi.StringPtrInput
	// Custom user provided certificate authority
	HubCa pulumi.StringPtrInput
	// Challenge certificate for the user provided hub CA
	HubCaChallenge pulumi.StringPtrInput
	// The name of the IoT Hub instance you want to create (e.g. `my-hub`).
	Name pulumi.StringPtrInput
	// Product plan to create the hub, see documentation for available product plans (e.g. `planShared`)
	//
	// > **Important:** Updates to `productPlan` will recreate the IoT Hub Instance.
	ProductPlan pulumi.StringInput
	// `projectId`) The ID of the project the IoT Hub Instance is associated with.
	ProjectId pulumi.StringPtrInput
	// `region`) The region in which the Database Instance should be created.
	Region pulumi.StringPtrInput
}

func (HubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hubArgs)(nil)).Elem()
}

type HubInput interface {
	pulumi.Input

	ToHubOutput() HubOutput
	ToHubOutputWithContext(ctx context.Context) HubOutput
}

func (*Hub) ElementType() reflect.Type {
	return reflect.TypeOf((**Hub)(nil)).Elem()
}

func (i *Hub) ToHubOutput() HubOutput {
	return i.ToHubOutputWithContext(context.Background())
}

func (i *Hub) ToHubOutputWithContext(ctx context.Context) HubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubOutput)
}

// HubArrayInput is an input type that accepts HubArray and HubArrayOutput values.
// You can construct a concrete instance of `HubArrayInput` via:
//
//	HubArray{ HubArgs{...} }
type HubArrayInput interface {
	pulumi.Input

	ToHubArrayOutput() HubArrayOutput
	ToHubArrayOutputWithContext(context.Context) HubArrayOutput
}

type HubArray []HubInput

func (HubArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hub)(nil)).Elem()
}

func (i HubArray) ToHubArrayOutput() HubArrayOutput {
	return i.ToHubArrayOutputWithContext(context.Background())
}

func (i HubArray) ToHubArrayOutputWithContext(ctx context.Context) HubArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubArrayOutput)
}

// HubMapInput is an input type that accepts HubMap and HubMapOutput values.
// You can construct a concrete instance of `HubMapInput` via:
//
//	HubMap{ "key": HubArgs{...} }
type HubMapInput interface {
	pulumi.Input

	ToHubMapOutput() HubMapOutput
	ToHubMapOutputWithContext(context.Context) HubMapOutput
}

type HubMap map[string]HubInput

func (HubMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hub)(nil)).Elem()
}

func (i HubMap) ToHubMapOutput() HubMapOutput {
	return i.ToHubMapOutputWithContext(context.Background())
}

func (i HubMap) ToHubMapOutputWithContext(ctx context.Context) HubMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubMapOutput)
}

type HubOutput struct{ *pulumi.OutputState }

func (HubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hub)(nil)).Elem()
}

func (o HubOutput) ToHubOutput() HubOutput {
	return o
}

func (o HubOutput) ToHubOutputWithContext(ctx context.Context) HubOutput {
	return o
}

// The current number of connected devices in the Hub.
func (o HubOutput) ConnectedDeviceCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Hub) pulumi.IntOutput { return v.ConnectedDeviceCount }).(pulumi.IntOutput)
}

// The date and time the Hub was created.
func (o HubOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Wether to enable the device auto provisioning or not
func (o HubOutput) DeviceAutoProvisioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Hub) pulumi.BoolPtrOutput { return v.DeviceAutoProvisioning }).(pulumi.BoolPtrOutput)
}

// The number of registered devices in the Hub.
func (o HubOutput) DeviceCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Hub) pulumi.IntOutput { return v.DeviceCount }).(pulumi.IntOutput)
}

// Whether to enable the hub events or not
func (o HubOutput) DisableEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Hub) pulumi.BoolPtrOutput { return v.DisableEvents }).(pulumi.BoolPtrOutput)
}

// Wether the IoT Hub instance should be enabled or not.
//
// > **Important:** Updates to `enabled` will disconnect eventually connected devices.
func (o HubOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Hub) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The MQTT network endpoint to connect MQTT devices to.
func (o HubOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// Topic prefix for the hub events
func (o HubOutput) EventsTopicPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringPtrOutput { return v.EventsTopicPrefix }).(pulumi.StringPtrOutput)
}

// Custom user provided certificate authority
func (o HubOutput) HubCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringPtrOutput { return v.HubCa }).(pulumi.StringPtrOutput)
}

// Challenge certificate for the user provided hub CA
func (o HubOutput) HubCaChallenge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringPtrOutput { return v.HubCaChallenge }).(pulumi.StringPtrOutput)
}

// The MQTT certificat content
func (o HubOutput) MqttCa() pulumi.StringOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringOutput { return v.MqttCa }).(pulumi.StringOutput)
}

// The MQTT ca url
func (o HubOutput) MqttCaUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringOutput { return v.MqttCaUrl }).(pulumi.StringOutput)
}

// The name of the IoT Hub instance you want to create (e.g. `my-hub`).
func (o HubOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The organizationId you want to attach the resource to
func (o HubOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// Product plan to create the hub, see documentation for available product plans (e.g. `planShared`)
//
// > **Important:** Updates to `productPlan` will recreate the IoT Hub Instance.
func (o HubOutput) ProductPlan() pulumi.StringOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringOutput { return v.ProductPlan }).(pulumi.StringOutput)
}

// `projectId`) The ID of the project the IoT Hub Instance is associated with.
func (o HubOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// `region`) The region in which the Database Instance should be created.
func (o HubOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// The current status of the Hub.
func (o HubOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The date and time the Hub resource was updated.
func (o HubOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type HubArrayOutput struct{ *pulumi.OutputState }

func (HubArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hub)(nil)).Elem()
}

func (o HubArrayOutput) ToHubArrayOutput() HubArrayOutput {
	return o
}

func (o HubArrayOutput) ToHubArrayOutputWithContext(ctx context.Context) HubArrayOutput {
	return o
}

func (o HubArrayOutput) Index(i pulumi.IntInput) HubOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Hub {
		return vs[0].([]*Hub)[vs[1].(int)]
	}).(HubOutput)
}

type HubMapOutput struct{ *pulumi.OutputState }

func (HubMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hub)(nil)).Elem()
}

func (o HubMapOutput) ToHubMapOutput() HubMapOutput {
	return o
}

func (o HubMapOutput) ToHubMapOutputWithContext(ctx context.Context) HubMapOutput {
	return o
}

func (o HubMapOutput) MapIndex(k pulumi.StringInput) HubOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Hub {
		return vs[0].(map[string]*Hub)[vs[1].(string)]
	}).(HubOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HubInput)(nil)).Elem(), &Hub{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubArrayInput)(nil)).Elem(), HubArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubMapInput)(nil)).Elem(), HubMap{})
	pulumi.RegisterOutputType(HubOutput{})
	pulumi.RegisterOutputType(HubArrayOutput{})
	pulumi.RegisterOutputType(HubMapOutput{})
}
