// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

var _ = internal.GetEnvOrDefault

type DeviceCertificate struct {
	// X509 PEM encoded certificate of the device
	Crt *string `pulumi:"crt"`
	// The private key of the device, in case it is generated by Scaleway.
	Key *string `pulumi:"key"`
}

// DeviceCertificateInput is an input type that accepts DeviceCertificateArgs and DeviceCertificateOutput values.
// You can construct a concrete instance of `DeviceCertificateInput` via:
//
//	DeviceCertificateArgs{...}
type DeviceCertificateInput interface {
	pulumi.Input

	ToDeviceCertificateOutput() DeviceCertificateOutput
	ToDeviceCertificateOutputWithContext(context.Context) DeviceCertificateOutput
}

type DeviceCertificateArgs struct {
	// X509 PEM encoded certificate of the device
	Crt pulumi.StringPtrInput `pulumi:"crt"`
	// The private key of the device, in case it is generated by Scaleway.
	Key pulumi.StringPtrInput `pulumi:"key"`
}

func (DeviceCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceCertificate)(nil)).Elem()
}

func (i DeviceCertificateArgs) ToDeviceCertificateOutput() DeviceCertificateOutput {
	return i.ToDeviceCertificateOutputWithContext(context.Background())
}

func (i DeviceCertificateArgs) ToDeviceCertificateOutputWithContext(ctx context.Context) DeviceCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceCertificateOutput)
}

func (i DeviceCertificateArgs) ToDeviceCertificatePtrOutput() DeviceCertificatePtrOutput {
	return i.ToDeviceCertificatePtrOutputWithContext(context.Background())
}

func (i DeviceCertificateArgs) ToDeviceCertificatePtrOutputWithContext(ctx context.Context) DeviceCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceCertificateOutput).ToDeviceCertificatePtrOutputWithContext(ctx)
}

// DeviceCertificatePtrInput is an input type that accepts DeviceCertificateArgs, DeviceCertificatePtr and DeviceCertificatePtrOutput values.
// You can construct a concrete instance of `DeviceCertificatePtrInput` via:
//
//	        DeviceCertificateArgs{...}
//
//	or:
//
//	        nil
type DeviceCertificatePtrInput interface {
	pulumi.Input

	ToDeviceCertificatePtrOutput() DeviceCertificatePtrOutput
	ToDeviceCertificatePtrOutputWithContext(context.Context) DeviceCertificatePtrOutput
}

type deviceCertificatePtrType DeviceCertificateArgs

func DeviceCertificatePtr(v *DeviceCertificateArgs) DeviceCertificatePtrInput {
	return (*deviceCertificatePtrType)(v)
}

func (*deviceCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceCertificate)(nil)).Elem()
}

func (i *deviceCertificatePtrType) ToDeviceCertificatePtrOutput() DeviceCertificatePtrOutput {
	return i.ToDeviceCertificatePtrOutputWithContext(context.Background())
}

func (i *deviceCertificatePtrType) ToDeviceCertificatePtrOutputWithContext(ctx context.Context) DeviceCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceCertificatePtrOutput)
}

type DeviceCertificateOutput struct{ *pulumi.OutputState }

func (DeviceCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceCertificate)(nil)).Elem()
}

func (o DeviceCertificateOutput) ToDeviceCertificateOutput() DeviceCertificateOutput {
	return o
}

func (o DeviceCertificateOutput) ToDeviceCertificateOutputWithContext(ctx context.Context) DeviceCertificateOutput {
	return o
}

func (o DeviceCertificateOutput) ToDeviceCertificatePtrOutput() DeviceCertificatePtrOutput {
	return o.ToDeviceCertificatePtrOutputWithContext(context.Background())
}

func (o DeviceCertificateOutput) ToDeviceCertificatePtrOutputWithContext(ctx context.Context) DeviceCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceCertificate) *DeviceCertificate {
		return &v
	}).(DeviceCertificatePtrOutput)
}

// X509 PEM encoded certificate of the device
func (o DeviceCertificateOutput) Crt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceCertificate) *string { return v.Crt }).(pulumi.StringPtrOutput)
}

// The private key of the device, in case it is generated by Scaleway.
func (o DeviceCertificateOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceCertificate) *string { return v.Key }).(pulumi.StringPtrOutput)
}

type DeviceCertificatePtrOutput struct{ *pulumi.OutputState }

func (DeviceCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceCertificate)(nil)).Elem()
}

func (o DeviceCertificatePtrOutput) ToDeviceCertificatePtrOutput() DeviceCertificatePtrOutput {
	return o
}

func (o DeviceCertificatePtrOutput) ToDeviceCertificatePtrOutputWithContext(ctx context.Context) DeviceCertificatePtrOutput {
	return o
}

func (o DeviceCertificatePtrOutput) Elem() DeviceCertificateOutput {
	return o.ApplyT(func(v *DeviceCertificate) DeviceCertificate {
		if v != nil {
			return *v
		}
		var ret DeviceCertificate
		return ret
	}).(DeviceCertificateOutput)
}

// X509 PEM encoded certificate of the device
func (o DeviceCertificatePtrOutput) Crt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceCertificate) *string {
		if v == nil {
			return nil
		}
		return v.Crt
	}).(pulumi.StringPtrOutput)
}

// The private key of the device, in case it is generated by Scaleway.
func (o DeviceCertificatePtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceCertificate) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

type DeviceMessageFilters struct {
	// Rules used to restrict topics the device can publish to.
	Publish *DeviceMessageFiltersPublish `pulumi:"publish"`
	// Rules used to restrict topics the device can subscribe to.
	Subscribe *DeviceMessageFiltersSubscribe `pulumi:"subscribe"`
}

// DeviceMessageFiltersInput is an input type that accepts DeviceMessageFiltersArgs and DeviceMessageFiltersOutput values.
// You can construct a concrete instance of `DeviceMessageFiltersInput` via:
//
//	DeviceMessageFiltersArgs{...}
type DeviceMessageFiltersInput interface {
	pulumi.Input

	ToDeviceMessageFiltersOutput() DeviceMessageFiltersOutput
	ToDeviceMessageFiltersOutputWithContext(context.Context) DeviceMessageFiltersOutput
}

type DeviceMessageFiltersArgs struct {
	// Rules used to restrict topics the device can publish to.
	Publish DeviceMessageFiltersPublishPtrInput `pulumi:"publish"`
	// Rules used to restrict topics the device can subscribe to.
	Subscribe DeviceMessageFiltersSubscribePtrInput `pulumi:"subscribe"`
}

func (DeviceMessageFiltersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceMessageFilters)(nil)).Elem()
}

func (i DeviceMessageFiltersArgs) ToDeviceMessageFiltersOutput() DeviceMessageFiltersOutput {
	return i.ToDeviceMessageFiltersOutputWithContext(context.Background())
}

func (i DeviceMessageFiltersArgs) ToDeviceMessageFiltersOutputWithContext(ctx context.Context) DeviceMessageFiltersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceMessageFiltersOutput)
}

func (i DeviceMessageFiltersArgs) ToDeviceMessageFiltersPtrOutput() DeviceMessageFiltersPtrOutput {
	return i.ToDeviceMessageFiltersPtrOutputWithContext(context.Background())
}

func (i DeviceMessageFiltersArgs) ToDeviceMessageFiltersPtrOutputWithContext(ctx context.Context) DeviceMessageFiltersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceMessageFiltersOutput).ToDeviceMessageFiltersPtrOutputWithContext(ctx)
}

// DeviceMessageFiltersPtrInput is an input type that accepts DeviceMessageFiltersArgs, DeviceMessageFiltersPtr and DeviceMessageFiltersPtrOutput values.
// You can construct a concrete instance of `DeviceMessageFiltersPtrInput` via:
//
//	        DeviceMessageFiltersArgs{...}
//
//	or:
//
//	        nil
type DeviceMessageFiltersPtrInput interface {
	pulumi.Input

	ToDeviceMessageFiltersPtrOutput() DeviceMessageFiltersPtrOutput
	ToDeviceMessageFiltersPtrOutputWithContext(context.Context) DeviceMessageFiltersPtrOutput
}

type deviceMessageFiltersPtrType DeviceMessageFiltersArgs

func DeviceMessageFiltersPtr(v *DeviceMessageFiltersArgs) DeviceMessageFiltersPtrInput {
	return (*deviceMessageFiltersPtrType)(v)
}

func (*deviceMessageFiltersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceMessageFilters)(nil)).Elem()
}

func (i *deviceMessageFiltersPtrType) ToDeviceMessageFiltersPtrOutput() DeviceMessageFiltersPtrOutput {
	return i.ToDeviceMessageFiltersPtrOutputWithContext(context.Background())
}

func (i *deviceMessageFiltersPtrType) ToDeviceMessageFiltersPtrOutputWithContext(ctx context.Context) DeviceMessageFiltersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceMessageFiltersPtrOutput)
}

type DeviceMessageFiltersOutput struct{ *pulumi.OutputState }

func (DeviceMessageFiltersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceMessageFilters)(nil)).Elem()
}

func (o DeviceMessageFiltersOutput) ToDeviceMessageFiltersOutput() DeviceMessageFiltersOutput {
	return o
}

func (o DeviceMessageFiltersOutput) ToDeviceMessageFiltersOutputWithContext(ctx context.Context) DeviceMessageFiltersOutput {
	return o
}

func (o DeviceMessageFiltersOutput) ToDeviceMessageFiltersPtrOutput() DeviceMessageFiltersPtrOutput {
	return o.ToDeviceMessageFiltersPtrOutputWithContext(context.Background())
}

func (o DeviceMessageFiltersOutput) ToDeviceMessageFiltersPtrOutputWithContext(ctx context.Context) DeviceMessageFiltersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceMessageFilters) *DeviceMessageFilters {
		return &v
	}).(DeviceMessageFiltersPtrOutput)
}

// Rules used to restrict topics the device can publish to.
func (o DeviceMessageFiltersOutput) Publish() DeviceMessageFiltersPublishPtrOutput {
	return o.ApplyT(func(v DeviceMessageFilters) *DeviceMessageFiltersPublish { return v.Publish }).(DeviceMessageFiltersPublishPtrOutput)
}

// Rules used to restrict topics the device can subscribe to.
func (o DeviceMessageFiltersOutput) Subscribe() DeviceMessageFiltersSubscribePtrOutput {
	return o.ApplyT(func(v DeviceMessageFilters) *DeviceMessageFiltersSubscribe { return v.Subscribe }).(DeviceMessageFiltersSubscribePtrOutput)
}

type DeviceMessageFiltersPtrOutput struct{ *pulumi.OutputState }

func (DeviceMessageFiltersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceMessageFilters)(nil)).Elem()
}

func (o DeviceMessageFiltersPtrOutput) ToDeviceMessageFiltersPtrOutput() DeviceMessageFiltersPtrOutput {
	return o
}

func (o DeviceMessageFiltersPtrOutput) ToDeviceMessageFiltersPtrOutputWithContext(ctx context.Context) DeviceMessageFiltersPtrOutput {
	return o
}

func (o DeviceMessageFiltersPtrOutput) Elem() DeviceMessageFiltersOutput {
	return o.ApplyT(func(v *DeviceMessageFilters) DeviceMessageFilters {
		if v != nil {
			return *v
		}
		var ret DeviceMessageFilters
		return ret
	}).(DeviceMessageFiltersOutput)
}

// Rules used to restrict topics the device can publish to.
func (o DeviceMessageFiltersPtrOutput) Publish() DeviceMessageFiltersPublishPtrOutput {
	return o.ApplyT(func(v *DeviceMessageFilters) *DeviceMessageFiltersPublish {
		if v == nil {
			return nil
		}
		return v.Publish
	}).(DeviceMessageFiltersPublishPtrOutput)
}

// Rules used to restrict topics the device can subscribe to.
func (o DeviceMessageFiltersPtrOutput) Subscribe() DeviceMessageFiltersSubscribePtrOutput {
	return o.ApplyT(func(v *DeviceMessageFilters) *DeviceMessageFiltersSubscribe {
		if v == nil {
			return nil
		}
		return v.Subscribe
	}).(DeviceMessageFiltersSubscribePtrOutput)
}

type DeviceMessageFiltersPublish struct {
	// Filtering policy (eg `accept` or `reject`)
	Policy *string `pulumi:"policy"`
	// List of topics to match (eg `foo/bar/+/baz/#`)
	Topics []string `pulumi:"topics"`
}

// DeviceMessageFiltersPublishInput is an input type that accepts DeviceMessageFiltersPublishArgs and DeviceMessageFiltersPublishOutput values.
// You can construct a concrete instance of `DeviceMessageFiltersPublishInput` via:
//
//	DeviceMessageFiltersPublishArgs{...}
type DeviceMessageFiltersPublishInput interface {
	pulumi.Input

	ToDeviceMessageFiltersPublishOutput() DeviceMessageFiltersPublishOutput
	ToDeviceMessageFiltersPublishOutputWithContext(context.Context) DeviceMessageFiltersPublishOutput
}

type DeviceMessageFiltersPublishArgs struct {
	// Filtering policy (eg `accept` or `reject`)
	Policy pulumi.StringPtrInput `pulumi:"policy"`
	// List of topics to match (eg `foo/bar/+/baz/#`)
	Topics pulumi.StringArrayInput `pulumi:"topics"`
}

func (DeviceMessageFiltersPublishArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceMessageFiltersPublish)(nil)).Elem()
}

func (i DeviceMessageFiltersPublishArgs) ToDeviceMessageFiltersPublishOutput() DeviceMessageFiltersPublishOutput {
	return i.ToDeviceMessageFiltersPublishOutputWithContext(context.Background())
}

func (i DeviceMessageFiltersPublishArgs) ToDeviceMessageFiltersPublishOutputWithContext(ctx context.Context) DeviceMessageFiltersPublishOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceMessageFiltersPublishOutput)
}

func (i DeviceMessageFiltersPublishArgs) ToDeviceMessageFiltersPublishPtrOutput() DeviceMessageFiltersPublishPtrOutput {
	return i.ToDeviceMessageFiltersPublishPtrOutputWithContext(context.Background())
}

func (i DeviceMessageFiltersPublishArgs) ToDeviceMessageFiltersPublishPtrOutputWithContext(ctx context.Context) DeviceMessageFiltersPublishPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceMessageFiltersPublishOutput).ToDeviceMessageFiltersPublishPtrOutputWithContext(ctx)
}

// DeviceMessageFiltersPublishPtrInput is an input type that accepts DeviceMessageFiltersPublishArgs, DeviceMessageFiltersPublishPtr and DeviceMessageFiltersPublishPtrOutput values.
// You can construct a concrete instance of `DeviceMessageFiltersPublishPtrInput` via:
//
//	        DeviceMessageFiltersPublishArgs{...}
//
//	or:
//
//	        nil
type DeviceMessageFiltersPublishPtrInput interface {
	pulumi.Input

	ToDeviceMessageFiltersPublishPtrOutput() DeviceMessageFiltersPublishPtrOutput
	ToDeviceMessageFiltersPublishPtrOutputWithContext(context.Context) DeviceMessageFiltersPublishPtrOutput
}

type deviceMessageFiltersPublishPtrType DeviceMessageFiltersPublishArgs

func DeviceMessageFiltersPublishPtr(v *DeviceMessageFiltersPublishArgs) DeviceMessageFiltersPublishPtrInput {
	return (*deviceMessageFiltersPublishPtrType)(v)
}

func (*deviceMessageFiltersPublishPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceMessageFiltersPublish)(nil)).Elem()
}

func (i *deviceMessageFiltersPublishPtrType) ToDeviceMessageFiltersPublishPtrOutput() DeviceMessageFiltersPublishPtrOutput {
	return i.ToDeviceMessageFiltersPublishPtrOutputWithContext(context.Background())
}

func (i *deviceMessageFiltersPublishPtrType) ToDeviceMessageFiltersPublishPtrOutputWithContext(ctx context.Context) DeviceMessageFiltersPublishPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceMessageFiltersPublishPtrOutput)
}

type DeviceMessageFiltersPublishOutput struct{ *pulumi.OutputState }

func (DeviceMessageFiltersPublishOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceMessageFiltersPublish)(nil)).Elem()
}

func (o DeviceMessageFiltersPublishOutput) ToDeviceMessageFiltersPublishOutput() DeviceMessageFiltersPublishOutput {
	return o
}

func (o DeviceMessageFiltersPublishOutput) ToDeviceMessageFiltersPublishOutputWithContext(ctx context.Context) DeviceMessageFiltersPublishOutput {
	return o
}

func (o DeviceMessageFiltersPublishOutput) ToDeviceMessageFiltersPublishPtrOutput() DeviceMessageFiltersPublishPtrOutput {
	return o.ToDeviceMessageFiltersPublishPtrOutputWithContext(context.Background())
}

func (o DeviceMessageFiltersPublishOutput) ToDeviceMessageFiltersPublishPtrOutputWithContext(ctx context.Context) DeviceMessageFiltersPublishPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceMessageFiltersPublish) *DeviceMessageFiltersPublish {
		return &v
	}).(DeviceMessageFiltersPublishPtrOutput)
}

// Filtering policy (eg `accept` or `reject`)
func (o DeviceMessageFiltersPublishOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceMessageFiltersPublish) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

// List of topics to match (eg `foo/bar/+/baz/#`)
func (o DeviceMessageFiltersPublishOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceMessageFiltersPublish) []string { return v.Topics }).(pulumi.StringArrayOutput)
}

type DeviceMessageFiltersPublishPtrOutput struct{ *pulumi.OutputState }

func (DeviceMessageFiltersPublishPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceMessageFiltersPublish)(nil)).Elem()
}

func (o DeviceMessageFiltersPublishPtrOutput) ToDeviceMessageFiltersPublishPtrOutput() DeviceMessageFiltersPublishPtrOutput {
	return o
}

func (o DeviceMessageFiltersPublishPtrOutput) ToDeviceMessageFiltersPublishPtrOutputWithContext(ctx context.Context) DeviceMessageFiltersPublishPtrOutput {
	return o
}

func (o DeviceMessageFiltersPublishPtrOutput) Elem() DeviceMessageFiltersPublishOutput {
	return o.ApplyT(func(v *DeviceMessageFiltersPublish) DeviceMessageFiltersPublish {
		if v != nil {
			return *v
		}
		var ret DeviceMessageFiltersPublish
		return ret
	}).(DeviceMessageFiltersPublishOutput)
}

// Filtering policy (eg `accept` or `reject`)
func (o DeviceMessageFiltersPublishPtrOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceMessageFiltersPublish) *string {
		if v == nil {
			return nil
		}
		return v.Policy
	}).(pulumi.StringPtrOutput)
}

// List of topics to match (eg `foo/bar/+/baz/#`)
func (o DeviceMessageFiltersPublishPtrOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceMessageFiltersPublish) []string {
		if v == nil {
			return nil
		}
		return v.Topics
	}).(pulumi.StringArrayOutput)
}

type DeviceMessageFiltersSubscribe struct {
	// Same as publish rules.
	Policy *string `pulumi:"policy"`
	// Same as publish rules.
	//
	// - `certificate.crt` - (Optional) The certificate of the device, either generated by Scaleway or provided.
	//
	// > **Important:** Updates to `certificate.crt` will disconnect connected devices and the previous certificate will be deleted and won't be recoverable.
	Topics []string `pulumi:"topics"`
}

// DeviceMessageFiltersSubscribeInput is an input type that accepts DeviceMessageFiltersSubscribeArgs and DeviceMessageFiltersSubscribeOutput values.
// You can construct a concrete instance of `DeviceMessageFiltersSubscribeInput` via:
//
//	DeviceMessageFiltersSubscribeArgs{...}
type DeviceMessageFiltersSubscribeInput interface {
	pulumi.Input

	ToDeviceMessageFiltersSubscribeOutput() DeviceMessageFiltersSubscribeOutput
	ToDeviceMessageFiltersSubscribeOutputWithContext(context.Context) DeviceMessageFiltersSubscribeOutput
}

type DeviceMessageFiltersSubscribeArgs struct {
	// Same as publish rules.
	Policy pulumi.StringPtrInput `pulumi:"policy"`
	// Same as publish rules.
	//
	// - `certificate.crt` - (Optional) The certificate of the device, either generated by Scaleway or provided.
	//
	// > **Important:** Updates to `certificate.crt` will disconnect connected devices and the previous certificate will be deleted and won't be recoverable.
	Topics pulumi.StringArrayInput `pulumi:"topics"`
}

func (DeviceMessageFiltersSubscribeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceMessageFiltersSubscribe)(nil)).Elem()
}

func (i DeviceMessageFiltersSubscribeArgs) ToDeviceMessageFiltersSubscribeOutput() DeviceMessageFiltersSubscribeOutput {
	return i.ToDeviceMessageFiltersSubscribeOutputWithContext(context.Background())
}

func (i DeviceMessageFiltersSubscribeArgs) ToDeviceMessageFiltersSubscribeOutputWithContext(ctx context.Context) DeviceMessageFiltersSubscribeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceMessageFiltersSubscribeOutput)
}

func (i DeviceMessageFiltersSubscribeArgs) ToDeviceMessageFiltersSubscribePtrOutput() DeviceMessageFiltersSubscribePtrOutput {
	return i.ToDeviceMessageFiltersSubscribePtrOutputWithContext(context.Background())
}

func (i DeviceMessageFiltersSubscribeArgs) ToDeviceMessageFiltersSubscribePtrOutputWithContext(ctx context.Context) DeviceMessageFiltersSubscribePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceMessageFiltersSubscribeOutput).ToDeviceMessageFiltersSubscribePtrOutputWithContext(ctx)
}

// DeviceMessageFiltersSubscribePtrInput is an input type that accepts DeviceMessageFiltersSubscribeArgs, DeviceMessageFiltersSubscribePtr and DeviceMessageFiltersSubscribePtrOutput values.
// You can construct a concrete instance of `DeviceMessageFiltersSubscribePtrInput` via:
//
//	        DeviceMessageFiltersSubscribeArgs{...}
//
//	or:
//
//	        nil
type DeviceMessageFiltersSubscribePtrInput interface {
	pulumi.Input

	ToDeviceMessageFiltersSubscribePtrOutput() DeviceMessageFiltersSubscribePtrOutput
	ToDeviceMessageFiltersSubscribePtrOutputWithContext(context.Context) DeviceMessageFiltersSubscribePtrOutput
}

type deviceMessageFiltersSubscribePtrType DeviceMessageFiltersSubscribeArgs

func DeviceMessageFiltersSubscribePtr(v *DeviceMessageFiltersSubscribeArgs) DeviceMessageFiltersSubscribePtrInput {
	return (*deviceMessageFiltersSubscribePtrType)(v)
}

func (*deviceMessageFiltersSubscribePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceMessageFiltersSubscribe)(nil)).Elem()
}

func (i *deviceMessageFiltersSubscribePtrType) ToDeviceMessageFiltersSubscribePtrOutput() DeviceMessageFiltersSubscribePtrOutput {
	return i.ToDeviceMessageFiltersSubscribePtrOutputWithContext(context.Background())
}

func (i *deviceMessageFiltersSubscribePtrType) ToDeviceMessageFiltersSubscribePtrOutputWithContext(ctx context.Context) DeviceMessageFiltersSubscribePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceMessageFiltersSubscribePtrOutput)
}

type DeviceMessageFiltersSubscribeOutput struct{ *pulumi.OutputState }

func (DeviceMessageFiltersSubscribeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceMessageFiltersSubscribe)(nil)).Elem()
}

func (o DeviceMessageFiltersSubscribeOutput) ToDeviceMessageFiltersSubscribeOutput() DeviceMessageFiltersSubscribeOutput {
	return o
}

func (o DeviceMessageFiltersSubscribeOutput) ToDeviceMessageFiltersSubscribeOutputWithContext(ctx context.Context) DeviceMessageFiltersSubscribeOutput {
	return o
}

func (o DeviceMessageFiltersSubscribeOutput) ToDeviceMessageFiltersSubscribePtrOutput() DeviceMessageFiltersSubscribePtrOutput {
	return o.ToDeviceMessageFiltersSubscribePtrOutputWithContext(context.Background())
}

func (o DeviceMessageFiltersSubscribeOutput) ToDeviceMessageFiltersSubscribePtrOutputWithContext(ctx context.Context) DeviceMessageFiltersSubscribePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceMessageFiltersSubscribe) *DeviceMessageFiltersSubscribe {
		return &v
	}).(DeviceMessageFiltersSubscribePtrOutput)
}

// Same as publish rules.
func (o DeviceMessageFiltersSubscribeOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceMessageFiltersSubscribe) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

// Same as publish rules.
//
// - `certificate.crt` - (Optional) The certificate of the device, either generated by Scaleway or provided.
//
// > **Important:** Updates to `certificate.crt` will disconnect connected devices and the previous certificate will be deleted and won't be recoverable.
func (o DeviceMessageFiltersSubscribeOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceMessageFiltersSubscribe) []string { return v.Topics }).(pulumi.StringArrayOutput)
}

type DeviceMessageFiltersSubscribePtrOutput struct{ *pulumi.OutputState }

func (DeviceMessageFiltersSubscribePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceMessageFiltersSubscribe)(nil)).Elem()
}

func (o DeviceMessageFiltersSubscribePtrOutput) ToDeviceMessageFiltersSubscribePtrOutput() DeviceMessageFiltersSubscribePtrOutput {
	return o
}

func (o DeviceMessageFiltersSubscribePtrOutput) ToDeviceMessageFiltersSubscribePtrOutputWithContext(ctx context.Context) DeviceMessageFiltersSubscribePtrOutput {
	return o
}

func (o DeviceMessageFiltersSubscribePtrOutput) Elem() DeviceMessageFiltersSubscribeOutput {
	return o.ApplyT(func(v *DeviceMessageFiltersSubscribe) DeviceMessageFiltersSubscribe {
		if v != nil {
			return *v
		}
		var ret DeviceMessageFiltersSubscribe
		return ret
	}).(DeviceMessageFiltersSubscribeOutput)
}

// Same as publish rules.
func (o DeviceMessageFiltersSubscribePtrOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceMessageFiltersSubscribe) *string {
		if v == nil {
			return nil
		}
		return v.Policy
	}).(pulumi.StringPtrOutput)
}

// Same as publish rules.
//
// - `certificate.crt` - (Optional) The certificate of the device, either generated by Scaleway or provided.
//
// > **Important:** Updates to `certificate.crt` will disconnect connected devices and the previous certificate will be deleted and won't be recoverable.
func (o DeviceMessageFiltersSubscribePtrOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceMessageFiltersSubscribe) []string {
		if v == nil {
			return nil
		}
		return v.Topics
	}).(pulumi.StringArrayOutput)
}

type RouteDatabase struct {
	// The database name (e.g. `measurements`).
	Dbname string `pulumi:"dbname"`
	// The database hostname. Can be an IP or a FQDN.
	Host string `pulumi:"host"`
	// The database password.
	Password string `pulumi:"password"`
	// The database port (e.g. `5432`)
	Port int `pulumi:"port"`
	// The SQL query that will be executed when receiving a message ($TOPIC and $PAYLOAD variables are available, see documentation, e.g. `INSERT INTO mytable(date, topic, value) VALUES (NOW(), $TOPIC, $PAYLOAD)`).
	Query string `pulumi:"query"`
	// The database username.
	Username string `pulumi:"username"`
}

// RouteDatabaseInput is an input type that accepts RouteDatabaseArgs and RouteDatabaseOutput values.
// You can construct a concrete instance of `RouteDatabaseInput` via:
//
//	RouteDatabaseArgs{...}
type RouteDatabaseInput interface {
	pulumi.Input

	ToRouteDatabaseOutput() RouteDatabaseOutput
	ToRouteDatabaseOutputWithContext(context.Context) RouteDatabaseOutput
}

type RouteDatabaseArgs struct {
	// The database name (e.g. `measurements`).
	Dbname pulumi.StringInput `pulumi:"dbname"`
	// The database hostname. Can be an IP or a FQDN.
	Host pulumi.StringInput `pulumi:"host"`
	// The database password.
	Password pulumi.StringInput `pulumi:"password"`
	// The database port (e.g. `5432`)
	Port pulumi.IntInput `pulumi:"port"`
	// The SQL query that will be executed when receiving a message ($TOPIC and $PAYLOAD variables are available, see documentation, e.g. `INSERT INTO mytable(date, topic, value) VALUES (NOW(), $TOPIC, $PAYLOAD)`).
	Query pulumi.StringInput `pulumi:"query"`
	// The database username.
	Username pulumi.StringInput `pulumi:"username"`
}

func (RouteDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteDatabase)(nil)).Elem()
}

func (i RouteDatabaseArgs) ToRouteDatabaseOutput() RouteDatabaseOutput {
	return i.ToRouteDatabaseOutputWithContext(context.Background())
}

func (i RouteDatabaseArgs) ToRouteDatabaseOutputWithContext(ctx context.Context) RouteDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteDatabaseOutput)
}

func (i RouteDatabaseArgs) ToRouteDatabasePtrOutput() RouteDatabasePtrOutput {
	return i.ToRouteDatabasePtrOutputWithContext(context.Background())
}

func (i RouteDatabaseArgs) ToRouteDatabasePtrOutputWithContext(ctx context.Context) RouteDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteDatabaseOutput).ToRouteDatabasePtrOutputWithContext(ctx)
}

// RouteDatabasePtrInput is an input type that accepts RouteDatabaseArgs, RouteDatabasePtr and RouteDatabasePtrOutput values.
// You can construct a concrete instance of `RouteDatabasePtrInput` via:
//
//	        RouteDatabaseArgs{...}
//
//	or:
//
//	        nil
type RouteDatabasePtrInput interface {
	pulumi.Input

	ToRouteDatabasePtrOutput() RouteDatabasePtrOutput
	ToRouteDatabasePtrOutputWithContext(context.Context) RouteDatabasePtrOutput
}

type routeDatabasePtrType RouteDatabaseArgs

func RouteDatabasePtr(v *RouteDatabaseArgs) RouteDatabasePtrInput {
	return (*routeDatabasePtrType)(v)
}

func (*routeDatabasePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteDatabase)(nil)).Elem()
}

func (i *routeDatabasePtrType) ToRouteDatabasePtrOutput() RouteDatabasePtrOutput {
	return i.ToRouteDatabasePtrOutputWithContext(context.Background())
}

func (i *routeDatabasePtrType) ToRouteDatabasePtrOutputWithContext(ctx context.Context) RouteDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteDatabasePtrOutput)
}

type RouteDatabaseOutput struct{ *pulumi.OutputState }

func (RouteDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteDatabase)(nil)).Elem()
}

func (o RouteDatabaseOutput) ToRouteDatabaseOutput() RouteDatabaseOutput {
	return o
}

func (o RouteDatabaseOutput) ToRouteDatabaseOutputWithContext(ctx context.Context) RouteDatabaseOutput {
	return o
}

func (o RouteDatabaseOutput) ToRouteDatabasePtrOutput() RouteDatabasePtrOutput {
	return o.ToRouteDatabasePtrOutputWithContext(context.Background())
}

func (o RouteDatabaseOutput) ToRouteDatabasePtrOutputWithContext(ctx context.Context) RouteDatabasePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RouteDatabase) *RouteDatabase {
		return &v
	}).(RouteDatabasePtrOutput)
}

// The database name (e.g. `measurements`).
func (o RouteDatabaseOutput) Dbname() pulumi.StringOutput {
	return o.ApplyT(func(v RouteDatabase) string { return v.Dbname }).(pulumi.StringOutput)
}

// The database hostname. Can be an IP or a FQDN.
func (o RouteDatabaseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v RouteDatabase) string { return v.Host }).(pulumi.StringOutput)
}

// The database password.
func (o RouteDatabaseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v RouteDatabase) string { return v.Password }).(pulumi.StringOutput)
}

// The database port (e.g. `5432`)
func (o RouteDatabaseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v RouteDatabase) int { return v.Port }).(pulumi.IntOutput)
}

// The SQL query that will be executed when receiving a message ($TOPIC and $PAYLOAD variables are available, see documentation, e.g. `INSERT INTO mytable(date, topic, value) VALUES (NOW(), $TOPIC, $PAYLOAD)`).
func (o RouteDatabaseOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v RouteDatabase) string { return v.Query }).(pulumi.StringOutput)
}

// The database username.
func (o RouteDatabaseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v RouteDatabase) string { return v.Username }).(pulumi.StringOutput)
}

type RouteDatabasePtrOutput struct{ *pulumi.OutputState }

func (RouteDatabasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteDatabase)(nil)).Elem()
}

func (o RouteDatabasePtrOutput) ToRouteDatabasePtrOutput() RouteDatabasePtrOutput {
	return o
}

func (o RouteDatabasePtrOutput) ToRouteDatabasePtrOutputWithContext(ctx context.Context) RouteDatabasePtrOutput {
	return o
}

func (o RouteDatabasePtrOutput) Elem() RouteDatabaseOutput {
	return o.ApplyT(func(v *RouteDatabase) RouteDatabase {
		if v != nil {
			return *v
		}
		var ret RouteDatabase
		return ret
	}).(RouteDatabaseOutput)
}

// The database name (e.g. `measurements`).
func (o RouteDatabasePtrOutput) Dbname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteDatabase) *string {
		if v == nil {
			return nil
		}
		return &v.Dbname
	}).(pulumi.StringPtrOutput)
}

// The database hostname. Can be an IP or a FQDN.
func (o RouteDatabasePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteDatabase) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The database password.
func (o RouteDatabasePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteDatabase) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// The database port (e.g. `5432`)
func (o RouteDatabasePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RouteDatabase) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The SQL query that will be executed when receiving a message ($TOPIC and $PAYLOAD variables are available, see documentation, e.g. `INSERT INTO mytable(date, topic, value) VALUES (NOW(), $TOPIC, $PAYLOAD)`).
func (o RouteDatabasePtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteDatabase) *string {
		if v == nil {
			return nil
		}
		return &v.Query
	}).(pulumi.StringPtrOutput)
}

// The database username.
func (o RouteDatabasePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteDatabase) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type RouteRest struct {
	// a map of the extra headers to send with the HTTP call (e.g. `X-Header = Value`).
	Headers map[string]string `pulumi:"headers"`
	// The URI of the Rest endpoint (e.g. `https://internal.mycompany.com/ingest/mqttdata`).
	Uri string `pulumi:"uri"`
	// The HTTP Verb used to call Rest URI (e.g. `post`).
	Verb string `pulumi:"verb"`
}

// RouteRestInput is an input type that accepts RouteRestArgs and RouteRestOutput values.
// You can construct a concrete instance of `RouteRestInput` via:
//
//	RouteRestArgs{...}
type RouteRestInput interface {
	pulumi.Input

	ToRouteRestOutput() RouteRestOutput
	ToRouteRestOutputWithContext(context.Context) RouteRestOutput
}

type RouteRestArgs struct {
	// a map of the extra headers to send with the HTTP call (e.g. `X-Header = Value`).
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// The URI of the Rest endpoint (e.g. `https://internal.mycompany.com/ingest/mqttdata`).
	Uri pulumi.StringInput `pulumi:"uri"`
	// The HTTP Verb used to call Rest URI (e.g. `post`).
	Verb pulumi.StringInput `pulumi:"verb"`
}

func (RouteRestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteRest)(nil)).Elem()
}

func (i RouteRestArgs) ToRouteRestOutput() RouteRestOutput {
	return i.ToRouteRestOutputWithContext(context.Background())
}

func (i RouteRestArgs) ToRouteRestOutputWithContext(ctx context.Context) RouteRestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteRestOutput)
}

func (i RouteRestArgs) ToRouteRestPtrOutput() RouteRestPtrOutput {
	return i.ToRouteRestPtrOutputWithContext(context.Background())
}

func (i RouteRestArgs) ToRouteRestPtrOutputWithContext(ctx context.Context) RouteRestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteRestOutput).ToRouteRestPtrOutputWithContext(ctx)
}

// RouteRestPtrInput is an input type that accepts RouteRestArgs, RouteRestPtr and RouteRestPtrOutput values.
// You can construct a concrete instance of `RouteRestPtrInput` via:
//
//	        RouteRestArgs{...}
//
//	or:
//
//	        nil
type RouteRestPtrInput interface {
	pulumi.Input

	ToRouteRestPtrOutput() RouteRestPtrOutput
	ToRouteRestPtrOutputWithContext(context.Context) RouteRestPtrOutput
}

type routeRestPtrType RouteRestArgs

func RouteRestPtr(v *RouteRestArgs) RouteRestPtrInput {
	return (*routeRestPtrType)(v)
}

func (*routeRestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteRest)(nil)).Elem()
}

func (i *routeRestPtrType) ToRouteRestPtrOutput() RouteRestPtrOutput {
	return i.ToRouteRestPtrOutputWithContext(context.Background())
}

func (i *routeRestPtrType) ToRouteRestPtrOutputWithContext(ctx context.Context) RouteRestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteRestPtrOutput)
}

type RouteRestOutput struct{ *pulumi.OutputState }

func (RouteRestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteRest)(nil)).Elem()
}

func (o RouteRestOutput) ToRouteRestOutput() RouteRestOutput {
	return o
}

func (o RouteRestOutput) ToRouteRestOutputWithContext(ctx context.Context) RouteRestOutput {
	return o
}

func (o RouteRestOutput) ToRouteRestPtrOutput() RouteRestPtrOutput {
	return o.ToRouteRestPtrOutputWithContext(context.Background())
}

func (o RouteRestOutput) ToRouteRestPtrOutputWithContext(ctx context.Context) RouteRestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RouteRest) *RouteRest {
		return &v
	}).(RouteRestPtrOutput)
}

// a map of the extra headers to send with the HTTP call (e.g. `X-Header = Value`).
func (o RouteRestOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v RouteRest) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// The URI of the Rest endpoint (e.g. `https://internal.mycompany.com/ingest/mqttdata`).
func (o RouteRestOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v RouteRest) string { return v.Uri }).(pulumi.StringOutput)
}

// The HTTP Verb used to call Rest URI (e.g. `post`).
func (o RouteRestOutput) Verb() pulumi.StringOutput {
	return o.ApplyT(func(v RouteRest) string { return v.Verb }).(pulumi.StringOutput)
}

type RouteRestPtrOutput struct{ *pulumi.OutputState }

func (RouteRestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteRest)(nil)).Elem()
}

func (o RouteRestPtrOutput) ToRouteRestPtrOutput() RouteRestPtrOutput {
	return o
}

func (o RouteRestPtrOutput) ToRouteRestPtrOutputWithContext(ctx context.Context) RouteRestPtrOutput {
	return o
}

func (o RouteRestPtrOutput) Elem() RouteRestOutput {
	return o.ApplyT(func(v *RouteRest) RouteRest {
		if v != nil {
			return *v
		}
		var ret RouteRest
		return ret
	}).(RouteRestOutput)
}

// a map of the extra headers to send with the HTTP call (e.g. `X-Header = Value`).
func (o RouteRestPtrOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RouteRest) map[string]string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringMapOutput)
}

// The URI of the Rest endpoint (e.g. `https://internal.mycompany.com/ingest/mqttdata`).
func (o RouteRestPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteRest) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

// The HTTP Verb used to call Rest URI (e.g. `post`).
func (o RouteRestPtrOutput) Verb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteRest) *string {
		if v == nil {
			return nil
		}
		return &v.Verb
	}).(pulumi.StringPtrOutput)
}

type RouteS3 struct {
	// The name of the S3 route's destination bucket (e.g. `my-object-storage`).
	BucketName string `pulumi:"bucketName"`
	// The region of the S3 route's destination bucket (e.g. `fr-par`).
	BucketRegion string `pulumi:"bucketRegion"`
	// The string to prefix object names with (e.g. `mykeyprefix-`).
	ObjectPrefix *string `pulumi:"objectPrefix"`
	// How the S3 route's objects will be created (e.g. `perTopic`). See [documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for behaviour details.
	Strategy string `pulumi:"strategy"`
}

// RouteS3Input is an input type that accepts RouteS3Args and RouteS3Output values.
// You can construct a concrete instance of `RouteS3Input` via:
//
//	RouteS3Args{...}
type RouteS3Input interface {
	pulumi.Input

	ToRouteS3Output() RouteS3Output
	ToRouteS3OutputWithContext(context.Context) RouteS3Output
}

type RouteS3Args struct {
	// The name of the S3 route's destination bucket (e.g. `my-object-storage`).
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// The region of the S3 route's destination bucket (e.g. `fr-par`).
	BucketRegion pulumi.StringInput `pulumi:"bucketRegion"`
	// The string to prefix object names with (e.g. `mykeyprefix-`).
	ObjectPrefix pulumi.StringPtrInput `pulumi:"objectPrefix"`
	// How the S3 route's objects will be created (e.g. `perTopic`). See [documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for behaviour details.
	Strategy pulumi.StringInput `pulumi:"strategy"`
}

func (RouteS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteS3)(nil)).Elem()
}

func (i RouteS3Args) ToRouteS3Output() RouteS3Output {
	return i.ToRouteS3OutputWithContext(context.Background())
}

func (i RouteS3Args) ToRouteS3OutputWithContext(ctx context.Context) RouteS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(RouteS3Output)
}

func (i RouteS3Args) ToRouteS3PtrOutput() RouteS3PtrOutput {
	return i.ToRouteS3PtrOutputWithContext(context.Background())
}

func (i RouteS3Args) ToRouteS3PtrOutputWithContext(ctx context.Context) RouteS3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteS3Output).ToRouteS3PtrOutputWithContext(ctx)
}

// RouteS3PtrInput is an input type that accepts RouteS3Args, RouteS3Ptr and RouteS3PtrOutput values.
// You can construct a concrete instance of `RouteS3PtrInput` via:
//
//	        RouteS3Args{...}
//
//	or:
//
//	        nil
type RouteS3PtrInput interface {
	pulumi.Input

	ToRouteS3PtrOutput() RouteS3PtrOutput
	ToRouteS3PtrOutputWithContext(context.Context) RouteS3PtrOutput
}

type routeS3PtrType RouteS3Args

func RouteS3Ptr(v *RouteS3Args) RouteS3PtrInput {
	return (*routeS3PtrType)(v)
}

func (*routeS3PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteS3)(nil)).Elem()
}

func (i *routeS3PtrType) ToRouteS3PtrOutput() RouteS3PtrOutput {
	return i.ToRouteS3PtrOutputWithContext(context.Background())
}

func (i *routeS3PtrType) ToRouteS3PtrOutputWithContext(ctx context.Context) RouteS3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteS3PtrOutput)
}

type RouteS3Output struct{ *pulumi.OutputState }

func (RouteS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteS3)(nil)).Elem()
}

func (o RouteS3Output) ToRouteS3Output() RouteS3Output {
	return o
}

func (o RouteS3Output) ToRouteS3OutputWithContext(ctx context.Context) RouteS3Output {
	return o
}

func (o RouteS3Output) ToRouteS3PtrOutput() RouteS3PtrOutput {
	return o.ToRouteS3PtrOutputWithContext(context.Background())
}

func (o RouteS3Output) ToRouteS3PtrOutputWithContext(ctx context.Context) RouteS3PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RouteS3) *RouteS3 {
		return &v
	}).(RouteS3PtrOutput)
}

// The name of the S3 route's destination bucket (e.g. `my-object-storage`).
func (o RouteS3Output) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v RouteS3) string { return v.BucketName }).(pulumi.StringOutput)
}

// The region of the S3 route's destination bucket (e.g. `fr-par`).
func (o RouteS3Output) BucketRegion() pulumi.StringOutput {
	return o.ApplyT(func(v RouteS3) string { return v.BucketRegion }).(pulumi.StringOutput)
}

// The string to prefix object names with (e.g. `mykeyprefix-`).
func (o RouteS3Output) ObjectPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteS3) *string { return v.ObjectPrefix }).(pulumi.StringPtrOutput)
}

// How the S3 route's objects will be created (e.g. `perTopic`). See [documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for behaviour details.
func (o RouteS3Output) Strategy() pulumi.StringOutput {
	return o.ApplyT(func(v RouteS3) string { return v.Strategy }).(pulumi.StringOutput)
}

type RouteS3PtrOutput struct{ *pulumi.OutputState }

func (RouteS3PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteS3)(nil)).Elem()
}

func (o RouteS3PtrOutput) ToRouteS3PtrOutput() RouteS3PtrOutput {
	return o
}

func (o RouteS3PtrOutput) ToRouteS3PtrOutputWithContext(ctx context.Context) RouteS3PtrOutput {
	return o
}

func (o RouteS3PtrOutput) Elem() RouteS3Output {
	return o.ApplyT(func(v *RouteS3) RouteS3 {
		if v != nil {
			return *v
		}
		var ret RouteS3
		return ret
	}).(RouteS3Output)
}

// The name of the S3 route's destination bucket (e.g. `my-object-storage`).
func (o RouteS3PtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteS3) *string {
		if v == nil {
			return nil
		}
		return &v.BucketName
	}).(pulumi.StringPtrOutput)
}

// The region of the S3 route's destination bucket (e.g. `fr-par`).
func (o RouteS3PtrOutput) BucketRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteS3) *string {
		if v == nil {
			return nil
		}
		return &v.BucketRegion
	}).(pulumi.StringPtrOutput)
}

// The string to prefix object names with (e.g. `mykeyprefix-`).
func (o RouteS3PtrOutput) ObjectPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteS3) *string {
		if v == nil {
			return nil
		}
		return v.ObjectPrefix
	}).(pulumi.StringPtrOutput)
}

// How the S3 route's objects will be created (e.g. `perTopic`). See [documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for behaviour details.
func (o RouteS3PtrOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteS3) *string {
		if v == nil {
			return nil
		}
		return &v.Strategy
	}).(pulumi.StringPtrOutput)
}

type GetDeviceCertificate struct {
	// X509 PEM encoded certificate of the device
	Crt string `pulumi:"crt"`
	// X509 PEM encoded key of the device
	Key string `pulumi:"key"`
}

// GetDeviceCertificateInput is an input type that accepts GetDeviceCertificateArgs and GetDeviceCertificateOutput values.
// You can construct a concrete instance of `GetDeviceCertificateInput` via:
//
//	GetDeviceCertificateArgs{...}
type GetDeviceCertificateInput interface {
	pulumi.Input

	ToGetDeviceCertificateOutput() GetDeviceCertificateOutput
	ToGetDeviceCertificateOutputWithContext(context.Context) GetDeviceCertificateOutput
}

type GetDeviceCertificateArgs struct {
	// X509 PEM encoded certificate of the device
	Crt pulumi.StringInput `pulumi:"crt"`
	// X509 PEM encoded key of the device
	Key pulumi.StringInput `pulumi:"key"`
}

func (GetDeviceCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceCertificate)(nil)).Elem()
}

func (i GetDeviceCertificateArgs) ToGetDeviceCertificateOutput() GetDeviceCertificateOutput {
	return i.ToGetDeviceCertificateOutputWithContext(context.Background())
}

func (i GetDeviceCertificateArgs) ToGetDeviceCertificateOutputWithContext(ctx context.Context) GetDeviceCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceCertificateOutput)
}

// GetDeviceCertificateArrayInput is an input type that accepts GetDeviceCertificateArray and GetDeviceCertificateArrayOutput values.
// You can construct a concrete instance of `GetDeviceCertificateArrayInput` via:
//
//	GetDeviceCertificateArray{ GetDeviceCertificateArgs{...} }
type GetDeviceCertificateArrayInput interface {
	pulumi.Input

	ToGetDeviceCertificateArrayOutput() GetDeviceCertificateArrayOutput
	ToGetDeviceCertificateArrayOutputWithContext(context.Context) GetDeviceCertificateArrayOutput
}

type GetDeviceCertificateArray []GetDeviceCertificateInput

func (GetDeviceCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceCertificate)(nil)).Elem()
}

func (i GetDeviceCertificateArray) ToGetDeviceCertificateArrayOutput() GetDeviceCertificateArrayOutput {
	return i.ToGetDeviceCertificateArrayOutputWithContext(context.Background())
}

func (i GetDeviceCertificateArray) ToGetDeviceCertificateArrayOutputWithContext(ctx context.Context) GetDeviceCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceCertificateArrayOutput)
}

type GetDeviceCertificateOutput struct{ *pulumi.OutputState }

func (GetDeviceCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceCertificate)(nil)).Elem()
}

func (o GetDeviceCertificateOutput) ToGetDeviceCertificateOutput() GetDeviceCertificateOutput {
	return o
}

func (o GetDeviceCertificateOutput) ToGetDeviceCertificateOutputWithContext(ctx context.Context) GetDeviceCertificateOutput {
	return o
}

// X509 PEM encoded certificate of the device
func (o GetDeviceCertificateOutput) Crt() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceCertificate) string { return v.Crt }).(pulumi.StringOutput)
}

// X509 PEM encoded key of the device
func (o GetDeviceCertificateOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceCertificate) string { return v.Key }).(pulumi.StringOutput)
}

type GetDeviceCertificateArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceCertificate)(nil)).Elem()
}

func (o GetDeviceCertificateArrayOutput) ToGetDeviceCertificateArrayOutput() GetDeviceCertificateArrayOutput {
	return o
}

func (o GetDeviceCertificateArrayOutput) ToGetDeviceCertificateArrayOutputWithContext(ctx context.Context) GetDeviceCertificateArrayOutput {
	return o
}

func (o GetDeviceCertificateArrayOutput) Index(i pulumi.IntInput) GetDeviceCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceCertificate {
		return vs[0].([]GetDeviceCertificate)[vs[1].(int)]
	}).(GetDeviceCertificateOutput)
}

type GetDeviceMessageFilter struct {
	// Rule to restrict topics the device can publish to
	Publishes []GetDeviceMessageFilterPublish `pulumi:"publishes"`
	// Rule to restrict topics the device can subscribe to
	Subscribes []GetDeviceMessageFilterSubscribe `pulumi:"subscribes"`
}

// GetDeviceMessageFilterInput is an input type that accepts GetDeviceMessageFilterArgs and GetDeviceMessageFilterOutput values.
// You can construct a concrete instance of `GetDeviceMessageFilterInput` via:
//
//	GetDeviceMessageFilterArgs{...}
type GetDeviceMessageFilterInput interface {
	pulumi.Input

	ToGetDeviceMessageFilterOutput() GetDeviceMessageFilterOutput
	ToGetDeviceMessageFilterOutputWithContext(context.Context) GetDeviceMessageFilterOutput
}

type GetDeviceMessageFilterArgs struct {
	// Rule to restrict topics the device can publish to
	Publishes GetDeviceMessageFilterPublishArrayInput `pulumi:"publishes"`
	// Rule to restrict topics the device can subscribe to
	Subscribes GetDeviceMessageFilterSubscribeArrayInput `pulumi:"subscribes"`
}

func (GetDeviceMessageFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceMessageFilter)(nil)).Elem()
}

func (i GetDeviceMessageFilterArgs) ToGetDeviceMessageFilterOutput() GetDeviceMessageFilterOutput {
	return i.ToGetDeviceMessageFilterOutputWithContext(context.Background())
}

func (i GetDeviceMessageFilterArgs) ToGetDeviceMessageFilterOutputWithContext(ctx context.Context) GetDeviceMessageFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceMessageFilterOutput)
}

// GetDeviceMessageFilterArrayInput is an input type that accepts GetDeviceMessageFilterArray and GetDeviceMessageFilterArrayOutput values.
// You can construct a concrete instance of `GetDeviceMessageFilterArrayInput` via:
//
//	GetDeviceMessageFilterArray{ GetDeviceMessageFilterArgs{...} }
type GetDeviceMessageFilterArrayInput interface {
	pulumi.Input

	ToGetDeviceMessageFilterArrayOutput() GetDeviceMessageFilterArrayOutput
	ToGetDeviceMessageFilterArrayOutputWithContext(context.Context) GetDeviceMessageFilterArrayOutput
}

type GetDeviceMessageFilterArray []GetDeviceMessageFilterInput

func (GetDeviceMessageFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceMessageFilter)(nil)).Elem()
}

func (i GetDeviceMessageFilterArray) ToGetDeviceMessageFilterArrayOutput() GetDeviceMessageFilterArrayOutput {
	return i.ToGetDeviceMessageFilterArrayOutputWithContext(context.Background())
}

func (i GetDeviceMessageFilterArray) ToGetDeviceMessageFilterArrayOutputWithContext(ctx context.Context) GetDeviceMessageFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceMessageFilterArrayOutput)
}

type GetDeviceMessageFilterOutput struct{ *pulumi.OutputState }

func (GetDeviceMessageFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceMessageFilter)(nil)).Elem()
}

func (o GetDeviceMessageFilterOutput) ToGetDeviceMessageFilterOutput() GetDeviceMessageFilterOutput {
	return o
}

func (o GetDeviceMessageFilterOutput) ToGetDeviceMessageFilterOutputWithContext(ctx context.Context) GetDeviceMessageFilterOutput {
	return o
}

// Rule to restrict topics the device can publish to
func (o GetDeviceMessageFilterOutput) Publishes() GetDeviceMessageFilterPublishArrayOutput {
	return o.ApplyT(func(v GetDeviceMessageFilter) []GetDeviceMessageFilterPublish { return v.Publishes }).(GetDeviceMessageFilterPublishArrayOutput)
}

// Rule to restrict topics the device can subscribe to
func (o GetDeviceMessageFilterOutput) Subscribes() GetDeviceMessageFilterSubscribeArrayOutput {
	return o.ApplyT(func(v GetDeviceMessageFilter) []GetDeviceMessageFilterSubscribe { return v.Subscribes }).(GetDeviceMessageFilterSubscribeArrayOutput)
}

type GetDeviceMessageFilterArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceMessageFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceMessageFilter)(nil)).Elem()
}

func (o GetDeviceMessageFilterArrayOutput) ToGetDeviceMessageFilterArrayOutput() GetDeviceMessageFilterArrayOutput {
	return o
}

func (o GetDeviceMessageFilterArrayOutput) ToGetDeviceMessageFilterArrayOutputWithContext(ctx context.Context) GetDeviceMessageFilterArrayOutput {
	return o
}

func (o GetDeviceMessageFilterArrayOutput) Index(i pulumi.IntInput) GetDeviceMessageFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceMessageFilter {
		return vs[0].([]GetDeviceMessageFilter)[vs[1].(int)]
	}).(GetDeviceMessageFilterOutput)
}

type GetDeviceMessageFilterPublish struct {
	// Publish message filter policy
	Policy string `pulumi:"policy"`
	// List of topics in the set
	Topics []string `pulumi:"topics"`
}

// GetDeviceMessageFilterPublishInput is an input type that accepts GetDeviceMessageFilterPublishArgs and GetDeviceMessageFilterPublishOutput values.
// You can construct a concrete instance of `GetDeviceMessageFilterPublishInput` via:
//
//	GetDeviceMessageFilterPublishArgs{...}
type GetDeviceMessageFilterPublishInput interface {
	pulumi.Input

	ToGetDeviceMessageFilterPublishOutput() GetDeviceMessageFilterPublishOutput
	ToGetDeviceMessageFilterPublishOutputWithContext(context.Context) GetDeviceMessageFilterPublishOutput
}

type GetDeviceMessageFilterPublishArgs struct {
	// Publish message filter policy
	Policy pulumi.StringInput `pulumi:"policy"`
	// List of topics in the set
	Topics pulumi.StringArrayInput `pulumi:"topics"`
}

func (GetDeviceMessageFilterPublishArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceMessageFilterPublish)(nil)).Elem()
}

func (i GetDeviceMessageFilterPublishArgs) ToGetDeviceMessageFilterPublishOutput() GetDeviceMessageFilterPublishOutput {
	return i.ToGetDeviceMessageFilterPublishOutputWithContext(context.Background())
}

func (i GetDeviceMessageFilterPublishArgs) ToGetDeviceMessageFilterPublishOutputWithContext(ctx context.Context) GetDeviceMessageFilterPublishOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceMessageFilterPublishOutput)
}

// GetDeviceMessageFilterPublishArrayInput is an input type that accepts GetDeviceMessageFilterPublishArray and GetDeviceMessageFilterPublishArrayOutput values.
// You can construct a concrete instance of `GetDeviceMessageFilterPublishArrayInput` via:
//
//	GetDeviceMessageFilterPublishArray{ GetDeviceMessageFilterPublishArgs{...} }
type GetDeviceMessageFilterPublishArrayInput interface {
	pulumi.Input

	ToGetDeviceMessageFilterPublishArrayOutput() GetDeviceMessageFilterPublishArrayOutput
	ToGetDeviceMessageFilterPublishArrayOutputWithContext(context.Context) GetDeviceMessageFilterPublishArrayOutput
}

type GetDeviceMessageFilterPublishArray []GetDeviceMessageFilterPublishInput

func (GetDeviceMessageFilterPublishArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceMessageFilterPublish)(nil)).Elem()
}

func (i GetDeviceMessageFilterPublishArray) ToGetDeviceMessageFilterPublishArrayOutput() GetDeviceMessageFilterPublishArrayOutput {
	return i.ToGetDeviceMessageFilterPublishArrayOutputWithContext(context.Background())
}

func (i GetDeviceMessageFilterPublishArray) ToGetDeviceMessageFilterPublishArrayOutputWithContext(ctx context.Context) GetDeviceMessageFilterPublishArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceMessageFilterPublishArrayOutput)
}

type GetDeviceMessageFilterPublishOutput struct{ *pulumi.OutputState }

func (GetDeviceMessageFilterPublishOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceMessageFilterPublish)(nil)).Elem()
}

func (o GetDeviceMessageFilterPublishOutput) ToGetDeviceMessageFilterPublishOutput() GetDeviceMessageFilterPublishOutput {
	return o
}

func (o GetDeviceMessageFilterPublishOutput) ToGetDeviceMessageFilterPublishOutputWithContext(ctx context.Context) GetDeviceMessageFilterPublishOutput {
	return o
}

// Publish message filter policy
func (o GetDeviceMessageFilterPublishOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceMessageFilterPublish) string { return v.Policy }).(pulumi.StringOutput)
}

// List of topics in the set
func (o GetDeviceMessageFilterPublishOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDeviceMessageFilterPublish) []string { return v.Topics }).(pulumi.StringArrayOutput)
}

type GetDeviceMessageFilterPublishArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceMessageFilterPublishArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceMessageFilterPublish)(nil)).Elem()
}

func (o GetDeviceMessageFilterPublishArrayOutput) ToGetDeviceMessageFilterPublishArrayOutput() GetDeviceMessageFilterPublishArrayOutput {
	return o
}

func (o GetDeviceMessageFilterPublishArrayOutput) ToGetDeviceMessageFilterPublishArrayOutputWithContext(ctx context.Context) GetDeviceMessageFilterPublishArrayOutput {
	return o
}

func (o GetDeviceMessageFilterPublishArrayOutput) Index(i pulumi.IntInput) GetDeviceMessageFilterPublishOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceMessageFilterPublish {
		return vs[0].([]GetDeviceMessageFilterPublish)[vs[1].(int)]
	}).(GetDeviceMessageFilterPublishOutput)
}

type GetDeviceMessageFilterSubscribe struct {
	// Subscribe message filter policy
	Policy string `pulumi:"policy"`
	// List of topics in the set
	Topics []string `pulumi:"topics"`
}

// GetDeviceMessageFilterSubscribeInput is an input type that accepts GetDeviceMessageFilterSubscribeArgs and GetDeviceMessageFilterSubscribeOutput values.
// You can construct a concrete instance of `GetDeviceMessageFilterSubscribeInput` via:
//
//	GetDeviceMessageFilterSubscribeArgs{...}
type GetDeviceMessageFilterSubscribeInput interface {
	pulumi.Input

	ToGetDeviceMessageFilterSubscribeOutput() GetDeviceMessageFilterSubscribeOutput
	ToGetDeviceMessageFilterSubscribeOutputWithContext(context.Context) GetDeviceMessageFilterSubscribeOutput
}

type GetDeviceMessageFilterSubscribeArgs struct {
	// Subscribe message filter policy
	Policy pulumi.StringInput `pulumi:"policy"`
	// List of topics in the set
	Topics pulumi.StringArrayInput `pulumi:"topics"`
}

func (GetDeviceMessageFilterSubscribeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceMessageFilterSubscribe)(nil)).Elem()
}

func (i GetDeviceMessageFilterSubscribeArgs) ToGetDeviceMessageFilterSubscribeOutput() GetDeviceMessageFilterSubscribeOutput {
	return i.ToGetDeviceMessageFilterSubscribeOutputWithContext(context.Background())
}

func (i GetDeviceMessageFilterSubscribeArgs) ToGetDeviceMessageFilterSubscribeOutputWithContext(ctx context.Context) GetDeviceMessageFilterSubscribeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceMessageFilterSubscribeOutput)
}

// GetDeviceMessageFilterSubscribeArrayInput is an input type that accepts GetDeviceMessageFilterSubscribeArray and GetDeviceMessageFilterSubscribeArrayOutput values.
// You can construct a concrete instance of `GetDeviceMessageFilterSubscribeArrayInput` via:
//
//	GetDeviceMessageFilterSubscribeArray{ GetDeviceMessageFilterSubscribeArgs{...} }
type GetDeviceMessageFilterSubscribeArrayInput interface {
	pulumi.Input

	ToGetDeviceMessageFilterSubscribeArrayOutput() GetDeviceMessageFilterSubscribeArrayOutput
	ToGetDeviceMessageFilterSubscribeArrayOutputWithContext(context.Context) GetDeviceMessageFilterSubscribeArrayOutput
}

type GetDeviceMessageFilterSubscribeArray []GetDeviceMessageFilterSubscribeInput

func (GetDeviceMessageFilterSubscribeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceMessageFilterSubscribe)(nil)).Elem()
}

func (i GetDeviceMessageFilterSubscribeArray) ToGetDeviceMessageFilterSubscribeArrayOutput() GetDeviceMessageFilterSubscribeArrayOutput {
	return i.ToGetDeviceMessageFilterSubscribeArrayOutputWithContext(context.Background())
}

func (i GetDeviceMessageFilterSubscribeArray) ToGetDeviceMessageFilterSubscribeArrayOutputWithContext(ctx context.Context) GetDeviceMessageFilterSubscribeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceMessageFilterSubscribeArrayOutput)
}

type GetDeviceMessageFilterSubscribeOutput struct{ *pulumi.OutputState }

func (GetDeviceMessageFilterSubscribeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceMessageFilterSubscribe)(nil)).Elem()
}

func (o GetDeviceMessageFilterSubscribeOutput) ToGetDeviceMessageFilterSubscribeOutput() GetDeviceMessageFilterSubscribeOutput {
	return o
}

func (o GetDeviceMessageFilterSubscribeOutput) ToGetDeviceMessageFilterSubscribeOutputWithContext(ctx context.Context) GetDeviceMessageFilterSubscribeOutput {
	return o
}

// Subscribe message filter policy
func (o GetDeviceMessageFilterSubscribeOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceMessageFilterSubscribe) string { return v.Policy }).(pulumi.StringOutput)
}

// List of topics in the set
func (o GetDeviceMessageFilterSubscribeOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDeviceMessageFilterSubscribe) []string { return v.Topics }).(pulumi.StringArrayOutput)
}

type GetDeviceMessageFilterSubscribeArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceMessageFilterSubscribeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceMessageFilterSubscribe)(nil)).Elem()
}

func (o GetDeviceMessageFilterSubscribeArrayOutput) ToGetDeviceMessageFilterSubscribeArrayOutput() GetDeviceMessageFilterSubscribeArrayOutput {
	return o
}

func (o GetDeviceMessageFilterSubscribeArrayOutput) ToGetDeviceMessageFilterSubscribeArrayOutputWithContext(ctx context.Context) GetDeviceMessageFilterSubscribeArrayOutput {
	return o
}

func (o GetDeviceMessageFilterSubscribeArrayOutput) Index(i pulumi.IntInput) GetDeviceMessageFilterSubscribeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceMessageFilterSubscribe {
		return vs[0].([]GetDeviceMessageFilterSubscribe)[vs[1].(int)]
	}).(GetDeviceMessageFilterSubscribeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceCertificateInput)(nil)).Elem(), DeviceCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceCertificatePtrInput)(nil)).Elem(), DeviceCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceMessageFiltersInput)(nil)).Elem(), DeviceMessageFiltersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceMessageFiltersPtrInput)(nil)).Elem(), DeviceMessageFiltersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceMessageFiltersPublishInput)(nil)).Elem(), DeviceMessageFiltersPublishArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceMessageFiltersPublishPtrInput)(nil)).Elem(), DeviceMessageFiltersPublishArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceMessageFiltersSubscribeInput)(nil)).Elem(), DeviceMessageFiltersSubscribeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceMessageFiltersSubscribePtrInput)(nil)).Elem(), DeviceMessageFiltersSubscribeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteDatabaseInput)(nil)).Elem(), RouteDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteDatabasePtrInput)(nil)).Elem(), RouteDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteRestInput)(nil)).Elem(), RouteRestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteRestPtrInput)(nil)).Elem(), RouteRestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteS3Input)(nil)).Elem(), RouteS3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteS3PtrInput)(nil)).Elem(), RouteS3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceCertificateInput)(nil)).Elem(), GetDeviceCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceCertificateArrayInput)(nil)).Elem(), GetDeviceCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceMessageFilterInput)(nil)).Elem(), GetDeviceMessageFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceMessageFilterArrayInput)(nil)).Elem(), GetDeviceMessageFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceMessageFilterPublishInput)(nil)).Elem(), GetDeviceMessageFilterPublishArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceMessageFilterPublishArrayInput)(nil)).Elem(), GetDeviceMessageFilterPublishArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceMessageFilterSubscribeInput)(nil)).Elem(), GetDeviceMessageFilterSubscribeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceMessageFilterSubscribeArrayInput)(nil)).Elem(), GetDeviceMessageFilterSubscribeArray{})
	pulumi.RegisterOutputType(DeviceCertificateOutput{})
	pulumi.RegisterOutputType(DeviceCertificatePtrOutput{})
	pulumi.RegisterOutputType(DeviceMessageFiltersOutput{})
	pulumi.RegisterOutputType(DeviceMessageFiltersPtrOutput{})
	pulumi.RegisterOutputType(DeviceMessageFiltersPublishOutput{})
	pulumi.RegisterOutputType(DeviceMessageFiltersPublishPtrOutput{})
	pulumi.RegisterOutputType(DeviceMessageFiltersSubscribeOutput{})
	pulumi.RegisterOutputType(DeviceMessageFiltersSubscribePtrOutput{})
	pulumi.RegisterOutputType(RouteDatabaseOutput{})
	pulumi.RegisterOutputType(RouteDatabasePtrOutput{})
	pulumi.RegisterOutputType(RouteRestOutput{})
	pulumi.RegisterOutputType(RouteRestPtrOutput{})
	pulumi.RegisterOutputType(RouteS3Output{})
	pulumi.RegisterOutputType(RouteS3PtrOutput{})
	pulumi.RegisterOutputType(GetDeviceCertificateOutput{})
	pulumi.RegisterOutputType(GetDeviceCertificateArrayOutput{})
	pulumi.RegisterOutputType(GetDeviceMessageFilterOutput{})
	pulumi.RegisterOutputType(GetDeviceMessageFilterArrayOutput{})
	pulumi.RegisterOutputType(GetDeviceMessageFilterPublishOutput{})
	pulumi.RegisterOutputType(GetDeviceMessageFilterPublishArrayOutput{})
	pulumi.RegisterOutputType(GetDeviceMessageFilterSubscribeOutput{})
	pulumi.RegisterOutputType(GetDeviceMessageFilterSubscribeArrayOutput{})
}
