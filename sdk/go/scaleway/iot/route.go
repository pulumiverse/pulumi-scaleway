// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// ## Example Usage
//
// ### Database Route
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/databases"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/iot"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			mainHub, err := iot.NewHub(ctx, "main", &iot.HubArgs{
//				Name:        pulumi.String("main"),
//				ProductPlan: pulumi.String("plan_shared"),
//			})
//			if err != nil {
//				return err
//			}
//			iot, err := databases.NewInstance(ctx, "iot", &databases.InstanceArgs{
//				Name:     pulumi.String("iot"),
//				NodeType: pulumi.String("db-dev-s"),
//				Engine:   pulumi.String("PostgreSQL-12"),
//				UserName: pulumi.String("root"),
//				Password: pulumi.String("T3stP4ssw0rdD0N0tUs3!"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iot.NewRoute(ctx, "main", &iot.RouteArgs{
//				Name:  pulumi.String("default"),
//				HubId: mainHub.ID(),
//				Topic: pulumi.String("#"),
//				Database: &iot.RouteDatabaseArgs{
//					Query: pulumi.String(`INSERT INTO measurements(
//		push_time,
//		report_time,
//		station_id,
//		temperature,
//		humidity
//
// ) VALUES (
//
//	NOW(),
//	TIMESTAMP 'epoch' + (($PAYLOAD::jsonb->'last_reported')::integer * INTERVAL '1 second'),
//	($PAYLOAD::jsonb->'station_id')::uuid,
//	($PAYLOAD::jsonb->'temperature')::decimal,
//	($PAYLOAD::jsonb->'humidity'):decimal:
//
// );
// `),
//
//					Host:     iot.EndpointIp,
//					Port:     iot.EndpointPort,
//					Dbname:   pulumi.String("rdb"),
//					Username: iot.UserName,
//					Password: iot.Password,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### S3 Route
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/iot"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/object"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			mainHub, err := iot.NewHub(ctx, "main", &iot.HubArgs{
//				Name:        pulumi.String("main"),
//				ProductPlan: pulumi.String("plan_shared"),
//			})
//			if err != nil {
//				return err
//			}
//			mainBucket, err := object.NewBucket(ctx, "main", &object.BucketArgs{
//				Region: pulumi.String("fr-par"),
//				Name:   pulumi.String("my_awesome-bucket"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iot.NewRoute(ctx, "main", &iot.RouteArgs{
//				Name:  pulumi.String("main"),
//				HubId: mainHub.ID(),
//				Topic: pulumi.String("#"),
//				S3: &iot.RouteS3Args{
//					BucketRegion: mainBucket.Region,
//					BucketName:   mainBucket.Name,
//					ObjectPrefix: pulumi.String("foo"),
//					Strategy:     pulumi.String("per_topic"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Rest Route
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/iot"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			mainHub, err := iot.NewHub(ctx, "main", &iot.HubArgs{
//				Name:        pulumi.String("main"),
//				ProductPlan: pulumi.String("plan_shared"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iot.NewRoute(ctx, "main", &iot.RouteArgs{
//				Name:  pulumi.String("main"),
//				HubId: mainHub.ID(),
//				Topic: pulumi.String("#"),
//				Rest: &iot.RouteRestArgs{
//					Verb: pulumi.String("get"),
//					Uri:  pulumi.String("http://scaleway.com"),
//					Headers: pulumi.StringMap{
//						"X-awesome-header": pulumi.String("my-awesome-value"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IoT Routes can be imported using the `{region}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:iot/route:Route route01 fr-par/11111111-1111-1111-1111-111111111111
// ```
type Route struct {
	pulumi.CustomResourceState

	// The date and time the Route was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Configuration block for the database routes. See  [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
	Database RouteDatabasePtrOutput `pulumi:"database"`
	// The hub ID to which the Route will be attached to.
	HubId pulumi.StringOutput `pulumi:"hubId"`
	// The name of the IoT Route you want to create (e.g. `my-route`).
	Name pulumi.StringOutput `pulumi:"name"`
	// (Defaults to provider `region`) The region in which the Route is attached to.
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// Configuration block for the rest routes. See [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
	Rest RouteRestPtrOutput `pulumi:"rest"`
	// Configuration block for the S3 routes. See [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
	S3 RouteS3PtrOutput `pulumi:"s3"`
	// The topic the Route subscribes to, wildcards allowed (e.g. `thelab/+/temperature/#`).
	Topic pulumi.StringOutput `pulumi:"topic"`
}

// NewRoute registers a new resource with the given unique name, arguments, and options.
func NewRoute(ctx *pulumi.Context,
	name string, args *RouteArgs, opts ...pulumi.ResourceOption) (*Route, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HubId == nil {
		return nil, errors.New("invalid value for required argument 'HubId'")
	}
	if args.Topic == nil {
		return nil, errors.New("invalid value for required argument 'Topic'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/iotRoute:IotRoute"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Route
	err := ctx.RegisterResource("scaleway:iot/route:Route", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoute gets an existing Route resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteState, opts ...pulumi.ResourceOption) (*Route, error) {
	var resource Route
	err := ctx.ReadResource("scaleway:iot/route:Route", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Route resources.
type routeState struct {
	// The date and time the Route was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Configuration block for the database routes. See  [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
	Database *RouteDatabase `pulumi:"database"`
	// The hub ID to which the Route will be attached to.
	HubId *string `pulumi:"hubId"`
	// The name of the IoT Route you want to create (e.g. `my-route`).
	Name *string `pulumi:"name"`
	// (Defaults to provider `region`) The region in which the Route is attached to.
	Region *string `pulumi:"region"`
	// Configuration block for the rest routes. See [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
	Rest *RouteRest `pulumi:"rest"`
	// Configuration block for the S3 routes. See [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
	S3 *RouteS3 `pulumi:"s3"`
	// The topic the Route subscribes to, wildcards allowed (e.g. `thelab/+/temperature/#`).
	Topic *string `pulumi:"topic"`
}

type RouteState struct {
	// The date and time the Route was created.
	CreatedAt pulumi.StringPtrInput
	// Configuration block for the database routes. See  [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
	Database RouteDatabasePtrInput
	// The hub ID to which the Route will be attached to.
	HubId pulumi.StringPtrInput
	// The name of the IoT Route you want to create (e.g. `my-route`).
	Name pulumi.StringPtrInput
	// (Defaults to provider `region`) The region in which the Route is attached to.
	Region pulumi.StringPtrInput
	// Configuration block for the rest routes. See [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
	Rest RouteRestPtrInput
	// Configuration block for the S3 routes. See [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
	S3 RouteS3PtrInput
	// The topic the Route subscribes to, wildcards allowed (e.g. `thelab/+/temperature/#`).
	Topic pulumi.StringPtrInput
}

func (RouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeState)(nil)).Elem()
}

type routeArgs struct {
	// Configuration block for the database routes. See  [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
	Database *RouteDatabase `pulumi:"database"`
	// The hub ID to which the Route will be attached to.
	HubId string `pulumi:"hubId"`
	// The name of the IoT Route you want to create (e.g. `my-route`).
	Name *string `pulumi:"name"`
	// (Defaults to provider `region`) The region in which the Route is attached to.
	Region *string `pulumi:"region"`
	// Configuration block for the rest routes. See [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
	Rest *RouteRest `pulumi:"rest"`
	// Configuration block for the S3 routes. See [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
	S3 *RouteS3 `pulumi:"s3"`
	// The topic the Route subscribes to, wildcards allowed (e.g. `thelab/+/temperature/#`).
	Topic string `pulumi:"topic"`
}

// The set of arguments for constructing a Route resource.
type RouteArgs struct {
	// Configuration block for the database routes. See  [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
	Database RouteDatabasePtrInput
	// The hub ID to which the Route will be attached to.
	HubId pulumi.StringInput
	// The name of the IoT Route you want to create (e.g. `my-route`).
	Name pulumi.StringPtrInput
	// (Defaults to provider `region`) The region in which the Route is attached to.
	Region pulumi.StringPtrInput
	// Configuration block for the rest routes. See [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
	Rest RouteRestPtrInput
	// Configuration block for the S3 routes. See [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
	S3 RouteS3PtrInput
	// The topic the Route subscribes to, wildcards allowed (e.g. `thelab/+/temperature/#`).
	Topic pulumi.StringInput
}

func (RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeArgs)(nil)).Elem()
}

type RouteInput interface {
	pulumi.Input

	ToRouteOutput() RouteOutput
	ToRouteOutputWithContext(ctx context.Context) RouteOutput
}

func (*Route) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (i *Route) ToRouteOutput() RouteOutput {
	return i.ToRouteOutputWithContext(context.Background())
}

func (i *Route) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteOutput)
}

// RouteArrayInput is an input type that accepts RouteArray and RouteArrayOutput values.
// You can construct a concrete instance of `RouteArrayInput` via:
//
//	RouteArray{ RouteArgs{...} }
type RouteArrayInput interface {
	pulumi.Input

	ToRouteArrayOutput() RouteArrayOutput
	ToRouteArrayOutputWithContext(context.Context) RouteArrayOutput
}

type RouteArray []RouteInput

func (RouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Route)(nil)).Elem()
}

func (i RouteArray) ToRouteArrayOutput() RouteArrayOutput {
	return i.ToRouteArrayOutputWithContext(context.Background())
}

func (i RouteArray) ToRouteArrayOutputWithContext(ctx context.Context) RouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteArrayOutput)
}

// RouteMapInput is an input type that accepts RouteMap and RouteMapOutput values.
// You can construct a concrete instance of `RouteMapInput` via:
//
//	RouteMap{ "key": RouteArgs{...} }
type RouteMapInput interface {
	pulumi.Input

	ToRouteMapOutput() RouteMapOutput
	ToRouteMapOutputWithContext(context.Context) RouteMapOutput
}

type RouteMap map[string]RouteInput

func (RouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Route)(nil)).Elem()
}

func (i RouteMap) ToRouteMapOutput() RouteMapOutput {
	return i.ToRouteMapOutputWithContext(context.Background())
}

func (i RouteMap) ToRouteMapOutputWithContext(ctx context.Context) RouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteMapOutput)
}

type RouteOutput struct{ *pulumi.OutputState }

func (RouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (o RouteOutput) ToRouteOutput() RouteOutput {
	return o
}

func (o RouteOutput) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return o
}

// The date and time the Route was created.
func (o RouteOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Configuration block for the database routes. See  [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
func (o RouteOutput) Database() RouteDatabasePtrOutput {
	return o.ApplyT(func(v *Route) RouteDatabasePtrOutput { return v.Database }).(RouteDatabasePtrOutput)
}

// The hub ID to which the Route will be attached to.
func (o RouteOutput) HubId() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.HubId }).(pulumi.StringOutput)
}

// The name of the IoT Route you want to create (e.g. `my-route`).
func (o RouteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// (Defaults to provider `region`) The region in which the Route is attached to.
func (o RouteOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// Configuration block for the rest routes. See [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
func (o RouteOutput) Rest() RouteRestPtrOutput {
	return o.ApplyT(func(v *Route) RouteRestPtrOutput { return v.Rest }).(RouteRestPtrOutput)
}

// Configuration block for the S3 routes. See [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
func (o RouteOutput) S3() RouteS3PtrOutput {
	return o.ApplyT(func(v *Route) RouteS3PtrOutput { return v.S3 }).(RouteS3PtrOutput)
}

// The topic the Route subscribes to, wildcards allowed (e.g. `thelab/+/temperature/#`).
func (o RouteOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.Topic }).(pulumi.StringOutput)
}

type RouteArrayOutput struct{ *pulumi.OutputState }

func (RouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Route)(nil)).Elem()
}

func (o RouteArrayOutput) ToRouteArrayOutput() RouteArrayOutput {
	return o
}

func (o RouteArrayOutput) ToRouteArrayOutputWithContext(ctx context.Context) RouteArrayOutput {
	return o
}

func (o RouteArrayOutput) Index(i pulumi.IntInput) RouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Route {
		return vs[0].([]*Route)[vs[1].(int)]
	}).(RouteOutput)
}

type RouteMapOutput struct{ *pulumi.OutputState }

func (RouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Route)(nil)).Elem()
}

func (o RouteMapOutput) ToRouteMapOutput() RouteMapOutput {
	return o
}

func (o RouteMapOutput) ToRouteMapOutputWithContext(ctx context.Context) RouteMapOutput {
	return o
}

func (o RouteMapOutput) MapIndex(k pulumi.StringInput) RouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Route {
		return vs[0].(map[string]*Route)[vs[1].(string)]
	}).(RouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteInput)(nil)).Elem(), &Route{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteArrayInput)(nil)).Elem(), RouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteMapInput)(nil)).Elem(), RouteMap{})
	pulumi.RegisterOutputType(RouteOutput{})
	pulumi.RegisterOutputType(RouteArrayOutput{})
	pulumi.RegisterOutputType(RouteMapOutput{})
}
