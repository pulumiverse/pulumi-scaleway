// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ipam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Gets information about IP addresses managed by Scaleway's IP Address Management (IPAM) service. IPAM is used for the DHCP bundled with VPC Private Networks.
//
// For more information about IPAM, see the main [documentation](https://www.scaleway.com/en/docs/vpc/concepts/#ipam).
//
// ## Examples
//
// ### IPAM IP ID
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/ipam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Get info by ipam ip id
//			_, err := ipam.LookupIp(ctx, &ipam.LookupIpArgs{
//				IpamIpId: pulumi.StringRef("11111111-1111-1111-1111-111111111111"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Instance Private Network IP
//
// Get an Instance's IP on a Private Network.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/instance"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/ipam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Connect your instance to a private network using a private nic.
//			nic, err := instance.NewPrivateNic(ctx, "nic", &instance.PrivateNicArgs{
//				ServerId:         pulumi.Any(server.Id),
//				PrivateNetworkId: pulumi.Any(pn.Id),
//			})
//			if err != nil {
//				return err
//			}
//			// Find server private IPv4 using private-nic mac address
//			_ = ipam.LookupIpOutput(ctx, ipam.GetIpOutputArgs{
//				MacAddress: nic.MacAddress,
//				Type:       pulumi.String("ipv4"),
//			}, nil)
//			// Find server private IPv4 using private-nic id
//			_ = ipam.LookupIpOutput(ctx, ipam.GetIpOutputArgs{
//				Resource: &ipam.GetIpResourceArgs{
//					Id:   nic.ID(),
//					Type: pulumi.String("instance_private_nic"),
//				},
//				Type: pulumi.String("ipv4"),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
//
// ### RDB instance
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/databases"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/ipam"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/network"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Find the private IPv4 using resource name
//			pn, err := network.NewPrivateNetwork(ctx, "pn", nil)
//			if err != nil {
//				return err
//			}
//			main, err := databases.NewInstance(ctx, "main", &databases.InstanceArgs{
//				Name:          pulumi.String("test-rdb"),
//				NodeType:      pulumi.String("DB-DEV-S"),
//				Engine:        pulumi.String("PostgreSQL-15"),
//				IsHaCluster:   pulumi.Bool(true),
//				DisableBackup: pulumi.Bool(true),
//				UserName:      pulumi.String("my_initial_user"),
//				Password:      pulumi.String("thiZ_is_v&ry_s3cret"),
//				PrivateNetwork: &databases.InstancePrivateNetworkArgs{
//					PnId: pn.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = ipam.LookupIpOutput(ctx, ipam.GetIpOutputArgs{
//				Resource: &ipam.GetIpResourceArgs{
//					Name: main.Name,
//					Type: pulumi.String("rdb_instance"),
//				},
//				Type: pulumi.String("ipv4"),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func LookupIp(ctx *pulumi.Context, args *LookupIpArgs, opts ...pulumi.InvokeOption) (*LookupIpResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIpResult
	err := ctx.Invoke("scaleway:ipam/getIp:getIp", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIp.
type LookupIpArgs struct {
	// Defines whether to filter only for IPs which are attached to a resource. Cannot be used with `ipamIpId`.
	Attached *bool `pulumi:"attached"`
	// The IPAM IP ID. Cannot be used with any other arguments.
	IpamIpId *string `pulumi:"ipamIpId"`
	// The MAC address linked to the IP. Cannot be used with `ipamIpId`.
	MacAddress *string `pulumi:"macAddress"`
	// The ID of the Private Network the IP belongs to. Cannot be used with `ipamIpId`.
	PrivateNetworkId *string `pulumi:"privateNetworkId"`
	// `projectId`) The ID of the Project the IP is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region in which the IP exists.
	Region *string `pulumi:"region"`
	// Filter by resource ID, type or name. Cannot be used with `ipamIpId`.
	// If specified, `type` is required, and at least one of `id` or `name` must be set.
	Resource *GetIpResource `pulumi:"resource"`
	// The tags associated with the IP. Cannot be used with `ipamIpId`.
	// As datasource only returns one IP, the search with given tags must return only one result.
	Tags []string `pulumi:"tags"`
	// The type of IP to search for (`ipv4` or `ipv6`). Cannot be used with `ipamIpId`.
	Type *string `pulumi:"type"`
	// Only IPs that are zonal, and in this zone, will be returned.
	Zonal *string `pulumi:"zonal"`
}

// A collection of values returned by getIp.
type LookupIpResult struct {
	// The IP address.
	Address string `pulumi:"address"`
	// the IP address in CIDR notation.
	AddressCidr string `pulumi:"addressCidr"`
	Attached    *bool  `pulumi:"attached"`
	// The provider-assigned unique ID for this managed resource.
	Id               string         `pulumi:"id"`
	IpamIpId         *string        `pulumi:"ipamIpId"`
	MacAddress       *string        `pulumi:"macAddress"`
	OrganizationId   string         `pulumi:"organizationId"`
	PrivateNetworkId *string        `pulumi:"privateNetworkId"`
	ProjectId        string         `pulumi:"projectId"`
	Region           string         `pulumi:"region"`
	Resource         *GetIpResource `pulumi:"resource"`
	Tags             []string       `pulumi:"tags"`
	Type             *string        `pulumi:"type"`
	Zonal            string         `pulumi:"zonal"`
}

func LookupIpOutput(ctx *pulumi.Context, args LookupIpOutputArgs, opts ...pulumi.InvokeOption) LookupIpResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupIpResultOutput, error) {
			args := v.(LookupIpArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("scaleway:ipam/getIp:getIp", args, LookupIpResultOutput{}, options).(LookupIpResultOutput), nil
		}).(LookupIpResultOutput)
}

// A collection of arguments for invoking getIp.
type LookupIpOutputArgs struct {
	// Defines whether to filter only for IPs which are attached to a resource. Cannot be used with `ipamIpId`.
	Attached pulumi.BoolPtrInput `pulumi:"attached"`
	// The IPAM IP ID. Cannot be used with any other arguments.
	IpamIpId pulumi.StringPtrInput `pulumi:"ipamIpId"`
	// The MAC address linked to the IP. Cannot be used with `ipamIpId`.
	MacAddress pulumi.StringPtrInput `pulumi:"macAddress"`
	// The ID of the Private Network the IP belongs to. Cannot be used with `ipamIpId`.
	PrivateNetworkId pulumi.StringPtrInput `pulumi:"privateNetworkId"`
	// `projectId`) The ID of the Project the IP is associated with.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// `region`) The region in which the IP exists.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Filter by resource ID, type or name. Cannot be used with `ipamIpId`.
	// If specified, `type` is required, and at least one of `id` or `name` must be set.
	Resource GetIpResourcePtrInput `pulumi:"resource"`
	// The tags associated with the IP. Cannot be used with `ipamIpId`.
	// As datasource only returns one IP, the search with given tags must return only one result.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// The type of IP to search for (`ipv4` or `ipv6`). Cannot be used with `ipamIpId`.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Only IPs that are zonal, and in this zone, will be returned.
	Zonal pulumi.StringPtrInput `pulumi:"zonal"`
}

func (LookupIpOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIpArgs)(nil)).Elem()
}

// A collection of values returned by getIp.
type LookupIpResultOutput struct{ *pulumi.OutputState }

func (LookupIpResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIpResult)(nil)).Elem()
}

func (o LookupIpResultOutput) ToLookupIpResultOutput() LookupIpResultOutput {
	return o
}

func (o LookupIpResultOutput) ToLookupIpResultOutputWithContext(ctx context.Context) LookupIpResultOutput {
	return o
}

// The IP address.
func (o LookupIpResultOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpResult) string { return v.Address }).(pulumi.StringOutput)
}

// the IP address in CIDR notation.
func (o LookupIpResultOutput) AddressCidr() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpResult) string { return v.AddressCidr }).(pulumi.StringOutput)
}

func (o LookupIpResultOutput) Attached() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupIpResult) *bool { return v.Attached }).(pulumi.BoolPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupIpResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupIpResultOutput) IpamIpId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIpResult) *string { return v.IpamIpId }).(pulumi.StringPtrOutput)
}

func (o LookupIpResultOutput) MacAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIpResult) *string { return v.MacAddress }).(pulumi.StringPtrOutput)
}

func (o LookupIpResultOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpResult) string { return v.OrganizationId }).(pulumi.StringOutput)
}

func (o LookupIpResultOutput) PrivateNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIpResult) *string { return v.PrivateNetworkId }).(pulumi.StringPtrOutput)
}

func (o LookupIpResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o LookupIpResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o LookupIpResultOutput) Resource() GetIpResourcePtrOutput {
	return o.ApplyT(func(v LookupIpResult) *GetIpResource { return v.Resource }).(GetIpResourcePtrOutput)
}

func (o LookupIpResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupIpResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o LookupIpResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIpResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o LookupIpResultOutput) Zonal() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpResult) string { return v.Zonal }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIpResultOutput{})
}
