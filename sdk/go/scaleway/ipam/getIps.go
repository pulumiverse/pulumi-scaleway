// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ipam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Gets information about multiple IP addresses managed by Scaleway's IP Address Management (IPAM) service.
//
// For more information about IPAM, see the main [documentation](https://www.scaleway.com/en/docs/vpc/concepts/#ipam).
//
// ## Examples
//
// ### By tag
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/ipam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ipam.GetIps(ctx, &ipam.GetIpsArgs{
//				Tags: []string{
//					"tag",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### By type and resource
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/ipam"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/network"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/redis"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			vpc01, err := network.NewVpc(ctx, "vpc01", &network.VpcArgs{
//				Name: pulumi.String("my vpc"),
//			})
//			if err != nil {
//				return err
//			}
//			pn01, err := network.NewPrivateNetwork(ctx, "pn01", &network.PrivateNetworkArgs{
//				VpcId: vpc01.ID(),
//				Ipv4Subnet: &network.PrivateNetworkIpv4SubnetArgs{
//					Subnet: pulumi.String("172.16.32.0/22"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			redis01, err := redis.NewCluster(ctx, "redis01", &redis.ClusterArgs{
//				Name:        pulumi.String("my_redis_cluster"),
//				Version:     pulumi.String("7.0.5"),
//				NodeType:    pulumi.String("RED1-XS"),
//				UserName:    pulumi.String("my_initial_user"),
//				Password:    pulumi.String("thiZ_is_v&ry_s3cret"),
//				ClusterSize: pulumi.Int(3),
//				PrivateNetworks: redis.ClusterPrivateNetworkArray{
//					&redis.ClusterPrivateNetworkArgs{
//						Id: pn01.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = ipam.GetIpsOutput(ctx, ipam.GetIpsOutputArgs{
//				Type: pulumi.String("ipv4"),
//				Resource: &ipam.GetIpsResourceArgs{
//					Id:   redis01.ID(),
//					Type: pulumi.String("redis_cluster"),
//				},
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetIps(ctx *pulumi.Context, args *GetIpsArgs, opts ...pulumi.InvokeOption) (*GetIpsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetIpsResult
	err := ctx.Invoke("scaleway:ipam/getIps:getIps", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIps.
type GetIpsArgs struct {
	// Defines whether to filter only for IPs which are attached to a resource.
	Attached *bool `pulumi:"attached"`
	// The linked MAC address to filter for.
	MacAddress *string `pulumi:"macAddress"`
	// The ID of the Private Network to filter for.
	PrivateNetworkId *string `pulumi:"privateNetworkId"`
	// The ID of the Project to filter for.
	ProjectId *string `pulumi:"projectId"`
	// The region to filter for.
	Region *string `pulumi:"region"`
	// Filter for a resource attached to the IP, using resource ID, type or name.
	Resource *GetIpsResource `pulumi:"resource"`
	// The IP tags to filter for.
	Tags []string `pulumi:"tags"`
	// The type of IP to filter for (`ipv4` or `ipv6`).
	Type *string `pulumi:"type"`
	// Only IPs that are zonal, and in this zone, will be returned.
	Zonal *string `pulumi:"zonal"`
}

// A collection of values returned by getIps.
type GetIpsResult struct {
	Attached *bool `pulumi:"attached"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// List of found IPs.
	Ips []GetIpsIp `pulumi:"ips"`
	// The associated MAC address.
	MacAddress       *string `pulumi:"macAddress"`
	OrganizationId   string  `pulumi:"organizationId"`
	PrivateNetworkId *string `pulumi:"privateNetworkId"`
	// The ID of the Project the resource is associated with.
	ProjectId string `pulumi:"projectId"`
	// The region of the IP.
	Region string `pulumi:"region"`
	// The list of public IPs attached to the resource.
	Resource *GetIpsResource `pulumi:"resource"`
	// The tags associated with the IP.
	Tags []string `pulumi:"tags"`
	// The type of resource.
	Type  *string `pulumi:"type"`
	Zonal string  `pulumi:"zonal"`
}

func GetIpsOutput(ctx *pulumi.Context, args GetIpsOutputArgs, opts ...pulumi.InvokeOption) GetIpsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetIpsResultOutput, error) {
			args := v.(GetIpsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("scaleway:ipam/getIps:getIps", args, GetIpsResultOutput{}, options).(GetIpsResultOutput), nil
		}).(GetIpsResultOutput)
}

// A collection of arguments for invoking getIps.
type GetIpsOutputArgs struct {
	// Defines whether to filter only for IPs which are attached to a resource.
	Attached pulumi.BoolPtrInput `pulumi:"attached"`
	// The linked MAC address to filter for.
	MacAddress pulumi.StringPtrInput `pulumi:"macAddress"`
	// The ID of the Private Network to filter for.
	PrivateNetworkId pulumi.StringPtrInput `pulumi:"privateNetworkId"`
	// The ID of the Project to filter for.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// The region to filter for.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Filter for a resource attached to the IP, using resource ID, type or name.
	Resource GetIpsResourcePtrInput `pulumi:"resource"`
	// The IP tags to filter for.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// The type of IP to filter for (`ipv4` or `ipv6`).
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Only IPs that are zonal, and in this zone, will be returned.
	Zonal pulumi.StringPtrInput `pulumi:"zonal"`
}

func (GetIpsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpsArgs)(nil)).Elem()
}

// A collection of values returned by getIps.
type GetIpsResultOutput struct{ *pulumi.OutputState }

func (GetIpsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpsResult)(nil)).Elem()
}

func (o GetIpsResultOutput) ToGetIpsResultOutput() GetIpsResultOutput {
	return o
}

func (o GetIpsResultOutput) ToGetIpsResultOutputWithContext(ctx context.Context) GetIpsResultOutput {
	return o
}

func (o GetIpsResultOutput) Attached() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetIpsResult) *bool { return v.Attached }).(pulumi.BoolPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetIpsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsResult) string { return v.Id }).(pulumi.StringOutput)
}

// List of found IPs.
func (o GetIpsResultOutput) Ips() GetIpsIpArrayOutput {
	return o.ApplyT(func(v GetIpsResult) []GetIpsIp { return v.Ips }).(GetIpsIpArrayOutput)
}

// The associated MAC address.
func (o GetIpsResultOutput) MacAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIpsResult) *string { return v.MacAddress }).(pulumi.StringPtrOutput)
}

func (o GetIpsResultOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsResult) string { return v.OrganizationId }).(pulumi.StringOutput)
}

func (o GetIpsResultOutput) PrivateNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIpsResult) *string { return v.PrivateNetworkId }).(pulumi.StringPtrOutput)
}

// The ID of the Project the resource is associated with.
func (o GetIpsResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The region of the IP.
func (o GetIpsResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsResult) string { return v.Region }).(pulumi.StringOutput)
}

// The list of public IPs attached to the resource.
func (o GetIpsResultOutput) Resource() GetIpsResourcePtrOutput {
	return o.ApplyT(func(v GetIpsResult) *GetIpsResource { return v.Resource }).(GetIpsResourcePtrOutput)
}

// The tags associated with the IP.
func (o GetIpsResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIpsResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The type of resource.
func (o GetIpsResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIpsResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o GetIpsResultOutput) Zonal() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsResult) string { return v.Zonal }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetIpsResultOutput{})
}
