// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ipam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

var _ = internal.GetEnvOrDefault

type IpCustomResource struct {
	// The MAC address of the resource the IP is attached to.
	MacAddress string `pulumi:"macAddress"`
	// The name of the resource the IP is attached to.
	Name *string `pulumi:"name"`
}

// IpCustomResourceInput is an input type that accepts IpCustomResourceArgs and IpCustomResourceOutput values.
// You can construct a concrete instance of `IpCustomResourceInput` via:
//
//	IpCustomResourceArgs{...}
type IpCustomResourceInput interface {
	pulumi.Input

	ToIpCustomResourceOutput() IpCustomResourceOutput
	ToIpCustomResourceOutputWithContext(context.Context) IpCustomResourceOutput
}

type IpCustomResourceArgs struct {
	// The MAC address of the resource the IP is attached to.
	MacAddress pulumi.StringInput `pulumi:"macAddress"`
	// The name of the resource the IP is attached to.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (IpCustomResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpCustomResource)(nil)).Elem()
}

func (i IpCustomResourceArgs) ToIpCustomResourceOutput() IpCustomResourceOutput {
	return i.ToIpCustomResourceOutputWithContext(context.Background())
}

func (i IpCustomResourceArgs) ToIpCustomResourceOutputWithContext(ctx context.Context) IpCustomResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpCustomResourceOutput)
}

// IpCustomResourceArrayInput is an input type that accepts IpCustomResourceArray and IpCustomResourceArrayOutput values.
// You can construct a concrete instance of `IpCustomResourceArrayInput` via:
//
//	IpCustomResourceArray{ IpCustomResourceArgs{...} }
type IpCustomResourceArrayInput interface {
	pulumi.Input

	ToIpCustomResourceArrayOutput() IpCustomResourceArrayOutput
	ToIpCustomResourceArrayOutputWithContext(context.Context) IpCustomResourceArrayOutput
}

type IpCustomResourceArray []IpCustomResourceInput

func (IpCustomResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpCustomResource)(nil)).Elem()
}

func (i IpCustomResourceArray) ToIpCustomResourceArrayOutput() IpCustomResourceArrayOutput {
	return i.ToIpCustomResourceArrayOutputWithContext(context.Background())
}

func (i IpCustomResourceArray) ToIpCustomResourceArrayOutputWithContext(ctx context.Context) IpCustomResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpCustomResourceArrayOutput)
}

type IpCustomResourceOutput struct{ *pulumi.OutputState }

func (IpCustomResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpCustomResource)(nil)).Elem()
}

func (o IpCustomResourceOutput) ToIpCustomResourceOutput() IpCustomResourceOutput {
	return o
}

func (o IpCustomResourceOutput) ToIpCustomResourceOutputWithContext(ctx context.Context) IpCustomResourceOutput {
	return o
}

// The MAC address of the resource the IP is attached to.
func (o IpCustomResourceOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v IpCustomResource) string { return v.MacAddress }).(pulumi.StringOutput)
}

// The name of the resource the IP is attached to.
func (o IpCustomResourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpCustomResource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type IpCustomResourceArrayOutput struct{ *pulumi.OutputState }

func (IpCustomResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpCustomResource)(nil)).Elem()
}

func (o IpCustomResourceArrayOutput) ToIpCustomResourceArrayOutput() IpCustomResourceArrayOutput {
	return o
}

func (o IpCustomResourceArrayOutput) ToIpCustomResourceArrayOutputWithContext(ctx context.Context) IpCustomResourceArrayOutput {
	return o
}

func (o IpCustomResourceArrayOutput) Index(i pulumi.IntInput) IpCustomResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpCustomResource {
		return vs[0].([]IpCustomResource)[vs[1].(int)]
	}).(IpCustomResourceOutput)
}

type IpResource struct {
	// The ID of the resource that the IP is attached to.
	Id *string `pulumi:"id"`
	// The MAC address of the resource the IP is attached to.
	MacAddress *string `pulumi:"macAddress"`
	// The name of the resource the IP is attached to.
	Name *string `pulumi:"name"`
	// The type of resource the IP is attached to.
	Type *string `pulumi:"type"`
}

// IpResourceInput is an input type that accepts IpResourceArgs and IpResourceOutput values.
// You can construct a concrete instance of `IpResourceInput` via:
//
//	IpResourceArgs{...}
type IpResourceInput interface {
	pulumi.Input

	ToIpResourceOutput() IpResourceOutput
	ToIpResourceOutputWithContext(context.Context) IpResourceOutput
}

type IpResourceArgs struct {
	// The ID of the resource that the IP is attached to.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The MAC address of the resource the IP is attached to.
	MacAddress pulumi.StringPtrInput `pulumi:"macAddress"`
	// The name of the resource the IP is attached to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The type of resource the IP is attached to.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (IpResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpResource)(nil)).Elem()
}

func (i IpResourceArgs) ToIpResourceOutput() IpResourceOutput {
	return i.ToIpResourceOutputWithContext(context.Background())
}

func (i IpResourceArgs) ToIpResourceOutputWithContext(ctx context.Context) IpResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpResourceOutput)
}

// IpResourceArrayInput is an input type that accepts IpResourceArray and IpResourceArrayOutput values.
// You can construct a concrete instance of `IpResourceArrayInput` via:
//
//	IpResourceArray{ IpResourceArgs{...} }
type IpResourceArrayInput interface {
	pulumi.Input

	ToIpResourceArrayOutput() IpResourceArrayOutput
	ToIpResourceArrayOutputWithContext(context.Context) IpResourceArrayOutput
}

type IpResourceArray []IpResourceInput

func (IpResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpResource)(nil)).Elem()
}

func (i IpResourceArray) ToIpResourceArrayOutput() IpResourceArrayOutput {
	return i.ToIpResourceArrayOutputWithContext(context.Background())
}

func (i IpResourceArray) ToIpResourceArrayOutputWithContext(ctx context.Context) IpResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpResourceArrayOutput)
}

type IpResourceOutput struct{ *pulumi.OutputState }

func (IpResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpResource)(nil)).Elem()
}

func (o IpResourceOutput) ToIpResourceOutput() IpResourceOutput {
	return o
}

func (o IpResourceOutput) ToIpResourceOutputWithContext(ctx context.Context) IpResourceOutput {
	return o
}

// The ID of the resource that the IP is attached to.
func (o IpResourceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpResource) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The MAC address of the resource the IP is attached to.
func (o IpResourceOutput) MacAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpResource) *string { return v.MacAddress }).(pulumi.StringPtrOutput)
}

// The name of the resource the IP is attached to.
func (o IpResourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpResource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of resource the IP is attached to.
func (o IpResourceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpResource) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type IpResourceArrayOutput struct{ *pulumi.OutputState }

func (IpResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpResource)(nil)).Elem()
}

func (o IpResourceArrayOutput) ToIpResourceArrayOutput() IpResourceArrayOutput {
	return o
}

func (o IpResourceArrayOutput) ToIpResourceArrayOutputWithContext(ctx context.Context) IpResourceArrayOutput {
	return o
}

func (o IpResourceArrayOutput) Index(i pulumi.IntInput) IpResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpResource {
		return vs[0].([]IpResource)[vs[1].(int)]
	}).(IpResourceOutput)
}

type IpReverse struct {
	// The IP corresponding to the hostname
	Address *string `pulumi:"address"`
	// The reverse domain name.
	Hostname *string `pulumi:"hostname"`
}

// IpReverseInput is an input type that accepts IpReverseArgs and IpReverseOutput values.
// You can construct a concrete instance of `IpReverseInput` via:
//
//	IpReverseArgs{...}
type IpReverseInput interface {
	pulumi.Input

	ToIpReverseOutput() IpReverseOutput
	ToIpReverseOutputWithContext(context.Context) IpReverseOutput
}

type IpReverseArgs struct {
	// The IP corresponding to the hostname
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The reverse domain name.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
}

func (IpReverseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpReverse)(nil)).Elem()
}

func (i IpReverseArgs) ToIpReverseOutput() IpReverseOutput {
	return i.ToIpReverseOutputWithContext(context.Background())
}

func (i IpReverseArgs) ToIpReverseOutputWithContext(ctx context.Context) IpReverseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpReverseOutput)
}

// IpReverseArrayInput is an input type that accepts IpReverseArray and IpReverseArrayOutput values.
// You can construct a concrete instance of `IpReverseArrayInput` via:
//
//	IpReverseArray{ IpReverseArgs{...} }
type IpReverseArrayInput interface {
	pulumi.Input

	ToIpReverseArrayOutput() IpReverseArrayOutput
	ToIpReverseArrayOutputWithContext(context.Context) IpReverseArrayOutput
}

type IpReverseArray []IpReverseInput

func (IpReverseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpReverse)(nil)).Elem()
}

func (i IpReverseArray) ToIpReverseArrayOutput() IpReverseArrayOutput {
	return i.ToIpReverseArrayOutputWithContext(context.Background())
}

func (i IpReverseArray) ToIpReverseArrayOutputWithContext(ctx context.Context) IpReverseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpReverseArrayOutput)
}

type IpReverseOutput struct{ *pulumi.OutputState }

func (IpReverseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpReverse)(nil)).Elem()
}

func (o IpReverseOutput) ToIpReverseOutput() IpReverseOutput {
	return o
}

func (o IpReverseOutput) ToIpReverseOutputWithContext(ctx context.Context) IpReverseOutput {
	return o
}

// The IP corresponding to the hostname
func (o IpReverseOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpReverse) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The reverse domain name.
func (o IpReverseOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpReverse) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

type IpReverseArrayOutput struct{ *pulumi.OutputState }

func (IpReverseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpReverse)(nil)).Elem()
}

func (o IpReverseArrayOutput) ToIpReverseArrayOutput() IpReverseArrayOutput {
	return o
}

func (o IpReverseArrayOutput) ToIpReverseArrayOutputWithContext(ctx context.Context) IpReverseArrayOutput {
	return o
}

func (o IpReverseArrayOutput) Index(i pulumi.IntInput) IpReverseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpReverse {
		return vs[0].([]IpReverse)[vs[1].(int)]
	}).(IpReverseOutput)
}

type IpSource struct {
	// The Private Network of the IP (if the IP is a private IP).
	PrivateNetworkId *string `pulumi:"privateNetworkId"`
	// The Private Network subnet of the IP (if the IP is a private IP).
	SubnetId *string `pulumi:"subnetId"`
	// The zone of the IP (if the IP is public and zoned, rather than private and/or regional)
	Zonal *string `pulumi:"zonal"`
}

// IpSourceInput is an input type that accepts IpSourceArgs and IpSourceOutput values.
// You can construct a concrete instance of `IpSourceInput` via:
//
//	IpSourceArgs{...}
type IpSourceInput interface {
	pulumi.Input

	ToIpSourceOutput() IpSourceOutput
	ToIpSourceOutputWithContext(context.Context) IpSourceOutput
}

type IpSourceArgs struct {
	// The Private Network of the IP (if the IP is a private IP).
	PrivateNetworkId pulumi.StringPtrInput `pulumi:"privateNetworkId"`
	// The Private Network subnet of the IP (if the IP is a private IP).
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The zone of the IP (if the IP is public and zoned, rather than private and/or regional)
	Zonal pulumi.StringPtrInput `pulumi:"zonal"`
}

func (IpSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpSource)(nil)).Elem()
}

func (i IpSourceArgs) ToIpSourceOutput() IpSourceOutput {
	return i.ToIpSourceOutputWithContext(context.Background())
}

func (i IpSourceArgs) ToIpSourceOutputWithContext(ctx context.Context) IpSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpSourceOutput)
}

// IpSourceArrayInput is an input type that accepts IpSourceArray and IpSourceArrayOutput values.
// You can construct a concrete instance of `IpSourceArrayInput` via:
//
//	IpSourceArray{ IpSourceArgs{...} }
type IpSourceArrayInput interface {
	pulumi.Input

	ToIpSourceArrayOutput() IpSourceArrayOutput
	ToIpSourceArrayOutputWithContext(context.Context) IpSourceArrayOutput
}

type IpSourceArray []IpSourceInput

func (IpSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpSource)(nil)).Elem()
}

func (i IpSourceArray) ToIpSourceArrayOutput() IpSourceArrayOutput {
	return i.ToIpSourceArrayOutputWithContext(context.Background())
}

func (i IpSourceArray) ToIpSourceArrayOutputWithContext(ctx context.Context) IpSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpSourceArrayOutput)
}

type IpSourceOutput struct{ *pulumi.OutputState }

func (IpSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpSource)(nil)).Elem()
}

func (o IpSourceOutput) ToIpSourceOutput() IpSourceOutput {
	return o
}

func (o IpSourceOutput) ToIpSourceOutputWithContext(ctx context.Context) IpSourceOutput {
	return o
}

// The Private Network of the IP (if the IP is a private IP).
func (o IpSourceOutput) PrivateNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpSource) *string { return v.PrivateNetworkId }).(pulumi.StringPtrOutput)
}

// The Private Network subnet of the IP (if the IP is a private IP).
func (o IpSourceOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpSource) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The zone of the IP (if the IP is public and zoned, rather than private and/or regional)
func (o IpSourceOutput) Zonal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpSource) *string { return v.Zonal }).(pulumi.StringPtrOutput)
}

type IpSourceArrayOutput struct{ *pulumi.OutputState }

func (IpSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpSource)(nil)).Elem()
}

func (o IpSourceArrayOutput) ToIpSourceArrayOutput() IpSourceArrayOutput {
	return o
}

func (o IpSourceArrayOutput) ToIpSourceArrayOutputWithContext(ctx context.Context) IpSourceArrayOutput {
	return o
}

func (o IpSourceArrayOutput) Index(i pulumi.IntInput) IpSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpSource {
		return vs[0].([]IpSource)[vs[1].(int)]
	}).(IpSourceOutput)
}

type GetIpResource struct {
	// The ID of the resource that the IP is attached to.
	Id *string `pulumi:"id"`
	// The name of the resource the IP is attached to.
	Name *string `pulumi:"name"`
	// The type of the resource the IP is attached to. [Documentation](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/ipam/v1#pkg-constants) with type list.
	Type string `pulumi:"type"`
}

// GetIpResourceInput is an input type that accepts GetIpResourceArgs and GetIpResourceOutput values.
// You can construct a concrete instance of `GetIpResourceInput` via:
//
//	GetIpResourceArgs{...}
type GetIpResourceInput interface {
	pulumi.Input

	ToGetIpResourceOutput() GetIpResourceOutput
	ToGetIpResourceOutputWithContext(context.Context) GetIpResourceOutput
}

type GetIpResourceArgs struct {
	// The ID of the resource that the IP is attached to.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the resource the IP is attached to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The type of the resource the IP is attached to. [Documentation](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/ipam/v1#pkg-constants) with type list.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetIpResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpResource)(nil)).Elem()
}

func (i GetIpResourceArgs) ToGetIpResourceOutput() GetIpResourceOutput {
	return i.ToGetIpResourceOutputWithContext(context.Background())
}

func (i GetIpResourceArgs) ToGetIpResourceOutputWithContext(ctx context.Context) GetIpResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIpResourceOutput)
}

func (i GetIpResourceArgs) ToGetIpResourcePtrOutput() GetIpResourcePtrOutput {
	return i.ToGetIpResourcePtrOutputWithContext(context.Background())
}

func (i GetIpResourceArgs) ToGetIpResourcePtrOutputWithContext(ctx context.Context) GetIpResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIpResourceOutput).ToGetIpResourcePtrOutputWithContext(ctx)
}

// GetIpResourcePtrInput is an input type that accepts GetIpResourceArgs, GetIpResourcePtr and GetIpResourcePtrOutput values.
// You can construct a concrete instance of `GetIpResourcePtrInput` via:
//
//	        GetIpResourceArgs{...}
//
//	or:
//
//	        nil
type GetIpResourcePtrInput interface {
	pulumi.Input

	ToGetIpResourcePtrOutput() GetIpResourcePtrOutput
	ToGetIpResourcePtrOutputWithContext(context.Context) GetIpResourcePtrOutput
}

type getIpResourcePtrType GetIpResourceArgs

func GetIpResourcePtr(v *GetIpResourceArgs) GetIpResourcePtrInput {
	return (*getIpResourcePtrType)(v)
}

func (*getIpResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetIpResource)(nil)).Elem()
}

func (i *getIpResourcePtrType) ToGetIpResourcePtrOutput() GetIpResourcePtrOutput {
	return i.ToGetIpResourcePtrOutputWithContext(context.Background())
}

func (i *getIpResourcePtrType) ToGetIpResourcePtrOutputWithContext(ctx context.Context) GetIpResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIpResourcePtrOutput)
}

type GetIpResourceOutput struct{ *pulumi.OutputState }

func (GetIpResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpResource)(nil)).Elem()
}

func (o GetIpResourceOutput) ToGetIpResourceOutput() GetIpResourceOutput {
	return o
}

func (o GetIpResourceOutput) ToGetIpResourceOutputWithContext(ctx context.Context) GetIpResourceOutput {
	return o
}

func (o GetIpResourceOutput) ToGetIpResourcePtrOutput() GetIpResourcePtrOutput {
	return o.ToGetIpResourcePtrOutputWithContext(context.Background())
}

func (o GetIpResourceOutput) ToGetIpResourcePtrOutputWithContext(ctx context.Context) GetIpResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetIpResource) *GetIpResource {
		return &v
	}).(GetIpResourcePtrOutput)
}

// The ID of the resource that the IP is attached to.
func (o GetIpResourceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIpResource) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the resource the IP is attached to.
func (o GetIpResourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIpResource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of the resource the IP is attached to. [Documentation](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/ipam/v1#pkg-constants) with type list.
func (o GetIpResourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpResource) string { return v.Type }).(pulumi.StringOutput)
}

type GetIpResourcePtrOutput struct{ *pulumi.OutputState }

func (GetIpResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetIpResource)(nil)).Elem()
}

func (o GetIpResourcePtrOutput) ToGetIpResourcePtrOutput() GetIpResourcePtrOutput {
	return o
}

func (o GetIpResourcePtrOutput) ToGetIpResourcePtrOutputWithContext(ctx context.Context) GetIpResourcePtrOutput {
	return o
}

func (o GetIpResourcePtrOutput) Elem() GetIpResourceOutput {
	return o.ApplyT(func(v *GetIpResource) GetIpResource {
		if v != nil {
			return *v
		}
		var ret GetIpResource
		return ret
	}).(GetIpResourceOutput)
}

// The ID of the resource that the IP is attached to.
func (o GetIpResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetIpResource) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The name of the resource the IP is attached to.
func (o GetIpResourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetIpResource) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The type of the resource the IP is attached to. [Documentation](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/ipam/v1#pkg-constants) with type list.
func (o GetIpResourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetIpResource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type GetIpsIp struct {
	// The Scaleway internal IP address of the resource.
	Address string `pulumi:"address"`
	// The date and time of the creation of the IP.
	CreatedAt string `pulumi:"createdAt"`
	// The ID of the resource.
	Id string `pulumi:"id"`
	// The ID of the Project to filter for.
	ProjectId string `pulumi:"projectId"`
	// The region to filter for.
	Region string `pulumi:"region"`
	// Filter for a resource attached to the IP, using resource ID, type or name.
	Resources []GetIpsIpResource `pulumi:"resources"`
	// The IP tags to filter for.
	Tags []string `pulumi:"tags"`
	// The date and time of the last update of the IP.
	UpdatedAt string `pulumi:"updatedAt"`
	// The zone of the IP.
	Zone string `pulumi:"zone"`
}

// GetIpsIpInput is an input type that accepts GetIpsIpArgs and GetIpsIpOutput values.
// You can construct a concrete instance of `GetIpsIpInput` via:
//
//	GetIpsIpArgs{...}
type GetIpsIpInput interface {
	pulumi.Input

	ToGetIpsIpOutput() GetIpsIpOutput
	ToGetIpsIpOutputWithContext(context.Context) GetIpsIpOutput
}

type GetIpsIpArgs struct {
	// The Scaleway internal IP address of the resource.
	Address pulumi.StringInput `pulumi:"address"`
	// The date and time of the creation of the IP.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The ID of the resource.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of the Project to filter for.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The region to filter for.
	Region pulumi.StringInput `pulumi:"region"`
	// Filter for a resource attached to the IP, using resource ID, type or name.
	Resources GetIpsIpResourceArrayInput `pulumi:"resources"`
	// The IP tags to filter for.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// The date and time of the last update of the IP.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The zone of the IP.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetIpsIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpsIp)(nil)).Elem()
}

func (i GetIpsIpArgs) ToGetIpsIpOutput() GetIpsIpOutput {
	return i.ToGetIpsIpOutputWithContext(context.Background())
}

func (i GetIpsIpArgs) ToGetIpsIpOutputWithContext(ctx context.Context) GetIpsIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIpsIpOutput)
}

// GetIpsIpArrayInput is an input type that accepts GetIpsIpArray and GetIpsIpArrayOutput values.
// You can construct a concrete instance of `GetIpsIpArrayInput` via:
//
//	GetIpsIpArray{ GetIpsIpArgs{...} }
type GetIpsIpArrayInput interface {
	pulumi.Input

	ToGetIpsIpArrayOutput() GetIpsIpArrayOutput
	ToGetIpsIpArrayOutputWithContext(context.Context) GetIpsIpArrayOutput
}

type GetIpsIpArray []GetIpsIpInput

func (GetIpsIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIpsIp)(nil)).Elem()
}

func (i GetIpsIpArray) ToGetIpsIpArrayOutput() GetIpsIpArrayOutput {
	return i.ToGetIpsIpArrayOutputWithContext(context.Background())
}

func (i GetIpsIpArray) ToGetIpsIpArrayOutputWithContext(ctx context.Context) GetIpsIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIpsIpArrayOutput)
}

type GetIpsIpOutput struct{ *pulumi.OutputState }

func (GetIpsIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpsIp)(nil)).Elem()
}

func (o GetIpsIpOutput) ToGetIpsIpOutput() GetIpsIpOutput {
	return o
}

func (o GetIpsIpOutput) ToGetIpsIpOutputWithContext(ctx context.Context) GetIpsIpOutput {
	return o
}

// The Scaleway internal IP address of the resource.
func (o GetIpsIpOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIp) string { return v.Address }).(pulumi.StringOutput)
}

// The date and time of the creation of the IP.
func (o GetIpsIpOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIp) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of the resource.
func (o GetIpsIpOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIp) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the Project to filter for.
func (o GetIpsIpOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIp) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The region to filter for.
func (o GetIpsIpOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIp) string { return v.Region }).(pulumi.StringOutput)
}

// Filter for a resource attached to the IP, using resource ID, type or name.
func (o GetIpsIpOutput) Resources() GetIpsIpResourceArrayOutput {
	return o.ApplyT(func(v GetIpsIp) []GetIpsIpResource { return v.Resources }).(GetIpsIpResourceArrayOutput)
}

// The IP tags to filter for.
func (o GetIpsIpOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIpsIp) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The date and time of the last update of the IP.
func (o GetIpsIpOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIp) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The zone of the IP.
func (o GetIpsIpOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIp) string { return v.Zone }).(pulumi.StringOutput)
}

type GetIpsIpArrayOutput struct{ *pulumi.OutputState }

func (GetIpsIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIpsIp)(nil)).Elem()
}

func (o GetIpsIpArrayOutput) ToGetIpsIpArrayOutput() GetIpsIpArrayOutput {
	return o
}

func (o GetIpsIpArrayOutput) ToGetIpsIpArrayOutputWithContext(ctx context.Context) GetIpsIpArrayOutput {
	return o
}

func (o GetIpsIpArrayOutput) Index(i pulumi.IntInput) GetIpsIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIpsIp {
		return vs[0].([]GetIpsIp)[vs[1].(int)]
	}).(GetIpsIpOutput)
}

type GetIpsIpResource struct {
	// The ID of the attached resource.
	Id string `pulumi:"id"`
	// The linked MAC address to filter for.
	MacAddress string `pulumi:"macAddress"`
	// The name of the attached resource.
	Name string `pulumi:"name"`
	// The type of the attached resource. [Documentation](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/ipam/v1#pkg-constants) with type list.
	Type string `pulumi:"type"`
}

// GetIpsIpResourceInput is an input type that accepts GetIpsIpResourceArgs and GetIpsIpResourceOutput values.
// You can construct a concrete instance of `GetIpsIpResourceInput` via:
//
//	GetIpsIpResourceArgs{...}
type GetIpsIpResourceInput interface {
	pulumi.Input

	ToGetIpsIpResourceOutput() GetIpsIpResourceOutput
	ToGetIpsIpResourceOutputWithContext(context.Context) GetIpsIpResourceOutput
}

type GetIpsIpResourceArgs struct {
	// The ID of the attached resource.
	Id pulumi.StringInput `pulumi:"id"`
	// The linked MAC address to filter for.
	MacAddress pulumi.StringInput `pulumi:"macAddress"`
	// The name of the attached resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The type of the attached resource. [Documentation](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/ipam/v1#pkg-constants) with type list.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetIpsIpResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpsIpResource)(nil)).Elem()
}

func (i GetIpsIpResourceArgs) ToGetIpsIpResourceOutput() GetIpsIpResourceOutput {
	return i.ToGetIpsIpResourceOutputWithContext(context.Background())
}

func (i GetIpsIpResourceArgs) ToGetIpsIpResourceOutputWithContext(ctx context.Context) GetIpsIpResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIpsIpResourceOutput)
}

// GetIpsIpResourceArrayInput is an input type that accepts GetIpsIpResourceArray and GetIpsIpResourceArrayOutput values.
// You can construct a concrete instance of `GetIpsIpResourceArrayInput` via:
//
//	GetIpsIpResourceArray{ GetIpsIpResourceArgs{...} }
type GetIpsIpResourceArrayInput interface {
	pulumi.Input

	ToGetIpsIpResourceArrayOutput() GetIpsIpResourceArrayOutput
	ToGetIpsIpResourceArrayOutputWithContext(context.Context) GetIpsIpResourceArrayOutput
}

type GetIpsIpResourceArray []GetIpsIpResourceInput

func (GetIpsIpResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIpsIpResource)(nil)).Elem()
}

func (i GetIpsIpResourceArray) ToGetIpsIpResourceArrayOutput() GetIpsIpResourceArrayOutput {
	return i.ToGetIpsIpResourceArrayOutputWithContext(context.Background())
}

func (i GetIpsIpResourceArray) ToGetIpsIpResourceArrayOutputWithContext(ctx context.Context) GetIpsIpResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIpsIpResourceArrayOutput)
}

type GetIpsIpResourceOutput struct{ *pulumi.OutputState }

func (GetIpsIpResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpsIpResource)(nil)).Elem()
}

func (o GetIpsIpResourceOutput) ToGetIpsIpResourceOutput() GetIpsIpResourceOutput {
	return o
}

func (o GetIpsIpResourceOutput) ToGetIpsIpResourceOutputWithContext(ctx context.Context) GetIpsIpResourceOutput {
	return o
}

// The ID of the attached resource.
func (o GetIpsIpResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIpResource) string { return v.Id }).(pulumi.StringOutput)
}

// The linked MAC address to filter for.
func (o GetIpsIpResourceOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIpResource) string { return v.MacAddress }).(pulumi.StringOutput)
}

// The name of the attached resource.
func (o GetIpsIpResourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIpResource) string { return v.Name }).(pulumi.StringOutput)
}

// The type of the attached resource. [Documentation](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/ipam/v1#pkg-constants) with type list.
func (o GetIpsIpResourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIpResource) string { return v.Type }).(pulumi.StringOutput)
}

type GetIpsIpResourceArrayOutput struct{ *pulumi.OutputState }

func (GetIpsIpResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIpsIpResource)(nil)).Elem()
}

func (o GetIpsIpResourceArrayOutput) ToGetIpsIpResourceArrayOutput() GetIpsIpResourceArrayOutput {
	return o
}

func (o GetIpsIpResourceArrayOutput) ToGetIpsIpResourceArrayOutputWithContext(ctx context.Context) GetIpsIpResourceArrayOutput {
	return o
}

func (o GetIpsIpResourceArrayOutput) Index(i pulumi.IntInput) GetIpsIpResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIpsIpResource {
		return vs[0].([]GetIpsIpResource)[vs[1].(int)]
	}).(GetIpsIpResourceOutput)
}

type GetIpsResource struct {
	// The ID of the attached resource.
	Id *string `pulumi:"id"`
	// The name of the attached resource.
	Name *string `pulumi:"name"`
	// The type of the attached resource. [Documentation](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/ipam/v1#pkg-constants) with type list.
	Type string `pulumi:"type"`
}

// GetIpsResourceInput is an input type that accepts GetIpsResourceArgs and GetIpsResourceOutput values.
// You can construct a concrete instance of `GetIpsResourceInput` via:
//
//	GetIpsResourceArgs{...}
type GetIpsResourceInput interface {
	pulumi.Input

	ToGetIpsResourceOutput() GetIpsResourceOutput
	ToGetIpsResourceOutputWithContext(context.Context) GetIpsResourceOutput
}

type GetIpsResourceArgs struct {
	// The ID of the attached resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the attached resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The type of the attached resource. [Documentation](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/ipam/v1#pkg-constants) with type list.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetIpsResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpsResource)(nil)).Elem()
}

func (i GetIpsResourceArgs) ToGetIpsResourceOutput() GetIpsResourceOutput {
	return i.ToGetIpsResourceOutputWithContext(context.Background())
}

func (i GetIpsResourceArgs) ToGetIpsResourceOutputWithContext(ctx context.Context) GetIpsResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIpsResourceOutput)
}

func (i GetIpsResourceArgs) ToGetIpsResourcePtrOutput() GetIpsResourcePtrOutput {
	return i.ToGetIpsResourcePtrOutputWithContext(context.Background())
}

func (i GetIpsResourceArgs) ToGetIpsResourcePtrOutputWithContext(ctx context.Context) GetIpsResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIpsResourceOutput).ToGetIpsResourcePtrOutputWithContext(ctx)
}

// GetIpsResourcePtrInput is an input type that accepts GetIpsResourceArgs, GetIpsResourcePtr and GetIpsResourcePtrOutput values.
// You can construct a concrete instance of `GetIpsResourcePtrInput` via:
//
//	        GetIpsResourceArgs{...}
//
//	or:
//
//	        nil
type GetIpsResourcePtrInput interface {
	pulumi.Input

	ToGetIpsResourcePtrOutput() GetIpsResourcePtrOutput
	ToGetIpsResourcePtrOutputWithContext(context.Context) GetIpsResourcePtrOutput
}

type getIpsResourcePtrType GetIpsResourceArgs

func GetIpsResourcePtr(v *GetIpsResourceArgs) GetIpsResourcePtrInput {
	return (*getIpsResourcePtrType)(v)
}

func (*getIpsResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetIpsResource)(nil)).Elem()
}

func (i *getIpsResourcePtrType) ToGetIpsResourcePtrOutput() GetIpsResourcePtrOutput {
	return i.ToGetIpsResourcePtrOutputWithContext(context.Background())
}

func (i *getIpsResourcePtrType) ToGetIpsResourcePtrOutputWithContext(ctx context.Context) GetIpsResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIpsResourcePtrOutput)
}

type GetIpsResourceOutput struct{ *pulumi.OutputState }

func (GetIpsResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpsResource)(nil)).Elem()
}

func (o GetIpsResourceOutput) ToGetIpsResourceOutput() GetIpsResourceOutput {
	return o
}

func (o GetIpsResourceOutput) ToGetIpsResourceOutputWithContext(ctx context.Context) GetIpsResourceOutput {
	return o
}

func (o GetIpsResourceOutput) ToGetIpsResourcePtrOutput() GetIpsResourcePtrOutput {
	return o.ToGetIpsResourcePtrOutputWithContext(context.Background())
}

func (o GetIpsResourceOutput) ToGetIpsResourcePtrOutputWithContext(ctx context.Context) GetIpsResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetIpsResource) *GetIpsResource {
		return &v
	}).(GetIpsResourcePtrOutput)
}

// The ID of the attached resource.
func (o GetIpsResourceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIpsResource) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the attached resource.
func (o GetIpsResourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIpsResource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of the attached resource. [Documentation](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/ipam/v1#pkg-constants) with type list.
func (o GetIpsResourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsResource) string { return v.Type }).(pulumi.StringOutput)
}

type GetIpsResourcePtrOutput struct{ *pulumi.OutputState }

func (GetIpsResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetIpsResource)(nil)).Elem()
}

func (o GetIpsResourcePtrOutput) ToGetIpsResourcePtrOutput() GetIpsResourcePtrOutput {
	return o
}

func (o GetIpsResourcePtrOutput) ToGetIpsResourcePtrOutputWithContext(ctx context.Context) GetIpsResourcePtrOutput {
	return o
}

func (o GetIpsResourcePtrOutput) Elem() GetIpsResourceOutput {
	return o.ApplyT(func(v *GetIpsResource) GetIpsResource {
		if v != nil {
			return *v
		}
		var ret GetIpsResource
		return ret
	}).(GetIpsResourceOutput)
}

// The ID of the attached resource.
func (o GetIpsResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetIpsResource) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The name of the attached resource.
func (o GetIpsResourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetIpsResource) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The type of the attached resource. [Documentation](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/ipam/v1#pkg-constants) with type list.
func (o GetIpsResourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetIpsResource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpCustomResourceInput)(nil)).Elem(), IpCustomResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpCustomResourceArrayInput)(nil)).Elem(), IpCustomResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpResourceInput)(nil)).Elem(), IpResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpResourceArrayInput)(nil)).Elem(), IpResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpReverseInput)(nil)).Elem(), IpReverseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpReverseArrayInput)(nil)).Elem(), IpReverseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpSourceInput)(nil)).Elem(), IpSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpSourceArrayInput)(nil)).Elem(), IpSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIpResourceInput)(nil)).Elem(), GetIpResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIpResourcePtrInput)(nil)).Elem(), GetIpResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIpsIpInput)(nil)).Elem(), GetIpsIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIpsIpArrayInput)(nil)).Elem(), GetIpsIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIpsIpResourceInput)(nil)).Elem(), GetIpsIpResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIpsIpResourceArrayInput)(nil)).Elem(), GetIpsIpResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIpsResourceInput)(nil)).Elem(), GetIpsResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIpsResourcePtrInput)(nil)).Elem(), GetIpsResourceArgs{})
	pulumi.RegisterOutputType(IpCustomResourceOutput{})
	pulumi.RegisterOutputType(IpCustomResourceArrayOutput{})
	pulumi.RegisterOutputType(IpResourceOutput{})
	pulumi.RegisterOutputType(IpResourceArrayOutput{})
	pulumi.RegisterOutputType(IpReverseOutput{})
	pulumi.RegisterOutputType(IpReverseArrayOutput{})
	pulumi.RegisterOutputType(IpSourceOutput{})
	pulumi.RegisterOutputType(IpSourceArrayOutput{})
	pulumi.RegisterOutputType(GetIpResourceOutput{})
	pulumi.RegisterOutputType(GetIpResourcePtrOutput{})
	pulumi.RegisterOutputType(GetIpsIpOutput{})
	pulumi.RegisterOutputType(GetIpsIpArrayOutput{})
	pulumi.RegisterOutputType(GetIpsIpResourceOutput{})
	pulumi.RegisterOutputType(GetIpsIpResourceArrayOutput{})
	pulumi.RegisterOutputType(GetIpsResourceOutput{})
	pulumi.RegisterOutputType(GetIpsResourcePtrOutput{})
}
