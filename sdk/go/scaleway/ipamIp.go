// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Books and manages Scaleway IPAM IPs.
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			vpc01, err := scaleway.NewVpc(ctx, "vpc01", nil)
//			if err != nil {
//				return err
//			}
//			pn01, err := scaleway.NewVpcPrivateNetwork(ctx, "pn01", &scaleway.VpcPrivateNetworkArgs{
//				VpcId: vpc01.ID(),
//				Ipv4Subnet: &scaleway.VpcPrivateNetworkIpv4SubnetArgs{
//					Subnet: pulumi.String("172.16.32.0/22"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewIpamIp(ctx, "ip01", &scaleway.IpamIpArgs{
//				Sources: scaleway.IpamIpSourceArray{
//					&scaleway.IpamIpSourceArgs{
//						PrivateNetworkId: pn01.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Request a specific IPv4
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			vpc01, err := scaleway.NewVpc(ctx, "vpc01", nil)
//			if err != nil {
//				return err
//			}
//			pn01, err := scaleway.NewVpcPrivateNetwork(ctx, "pn01", &scaleway.VpcPrivateNetworkArgs{
//				VpcId: vpc01.ID(),
//				Ipv4Subnet: &scaleway.VpcPrivateNetworkIpv4SubnetArgs{
//					Subnet: pulumi.String("172.16.32.0/22"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewIpamIp(ctx, "ip01", &scaleway.IpamIpArgs{
//				Address: pulumi.String("172.16.32.7"),
//				Sources: scaleway.IpamIpSourceArray{
//					&scaleway.IpamIpSourceArgs{
//						PrivateNetworkId: pn01.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Request an IPv6
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			vpc01, err := scaleway.NewVpc(ctx, "vpc01", nil)
//			if err != nil {
//				return err
//			}
//			pn01, err := scaleway.NewVpcPrivateNetwork(ctx, "pn01", &scaleway.VpcPrivateNetworkArgs{
//				VpcId: vpc01.ID(),
//				Ipv6Subnets: scaleway.VpcPrivateNetworkIpv6SubnetArray{
//					&scaleway.VpcPrivateNetworkIpv6SubnetArgs{
//						Subnet: pulumi.String("fd46:78ab:30b8:177c::/64"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewIpamIp(ctx, "ip01", &scaleway.IpamIpArgs{
//				IsIpv6: pulumi.Bool(true),
//				Sources: scaleway.IpamIpSourceArray{
//					&scaleway.IpamIpSourceArgs{
//						PrivateNetworkId: pn01.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IPAM IPs can be imported using the `{region}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/ipamIp:IpamIp ip_demo fr-par/11111111-1111-1111-1111-111111111111
// ```
type IpamIp struct {
	pulumi.CustomResourceState

	// Request a specific IP in the requested source pool.
	Address pulumi.StringOutput `pulumi:"address"`
	// Date and time of IP's creation (RFC 3339 format).
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Defines whether to request an IPv6 instead of an IPv4.
	IsIpv6 pulumi.BoolPtrOutput `pulumi:"isIpv6"`
	// `projectId`) The ID of the project the IP is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// `region`) The region of the IP.
	Region pulumi.StringOutput `pulumi:"region"`
	// The IP resource.
	Resources IpamIpResourceArrayOutput `pulumi:"resources"`
	// The reverses DNS for this IP.
	Reverses IpamIpReverseArrayOutput `pulumi:"reverses"`
	// The source in which to book the IP.
	Sources IpamIpSourceArrayOutput `pulumi:"sources"`
	// The tags associated with the IP.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Date and time of IP's last update (RFC 3339 format).
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The zone of the IP.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewIpamIp registers a new resource with the given unique name, arguments, and options.
func NewIpamIp(ctx *pulumi.Context,
	name string, args *IpamIpArgs, opts ...pulumi.ResourceOption) (*IpamIp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Sources == nil {
		return nil, errors.New("invalid value for required argument 'Sources'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpamIp
	err := ctx.RegisterResource("scaleway:index/ipamIp:IpamIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpamIp gets an existing IpamIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpamIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpamIpState, opts ...pulumi.ResourceOption) (*IpamIp, error) {
	var resource IpamIp
	err := ctx.ReadResource("scaleway:index/ipamIp:IpamIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpamIp resources.
type ipamIpState struct {
	// Request a specific IP in the requested source pool.
	Address *string `pulumi:"address"`
	// Date and time of IP's creation (RFC 3339 format).
	CreatedAt *string `pulumi:"createdAt"`
	// Defines whether to request an IPv6 instead of an IPv4.
	IsIpv6 *bool `pulumi:"isIpv6"`
	// `projectId`) The ID of the project the IP is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region of the IP.
	Region *string `pulumi:"region"`
	// The IP resource.
	Resources []IpamIpResource `pulumi:"resources"`
	// The reverses DNS for this IP.
	Reverses []IpamIpReverse `pulumi:"reverses"`
	// The source in which to book the IP.
	Sources []IpamIpSource `pulumi:"sources"`
	// The tags associated with the IP.
	Tags []string `pulumi:"tags"`
	// Date and time of IP's last update (RFC 3339 format).
	UpdatedAt *string `pulumi:"updatedAt"`
	// The zone of the IP.
	Zone *string `pulumi:"zone"`
}

type IpamIpState struct {
	// Request a specific IP in the requested source pool.
	Address pulumi.StringPtrInput
	// Date and time of IP's creation (RFC 3339 format).
	CreatedAt pulumi.StringPtrInput
	// Defines whether to request an IPv6 instead of an IPv4.
	IsIpv6 pulumi.BoolPtrInput
	// `projectId`) The ID of the project the IP is associated with.
	ProjectId pulumi.StringPtrInput
	// `region`) The region of the IP.
	Region pulumi.StringPtrInput
	// The IP resource.
	Resources IpamIpResourceArrayInput
	// The reverses DNS for this IP.
	Reverses IpamIpReverseArrayInput
	// The source in which to book the IP.
	Sources IpamIpSourceArrayInput
	// The tags associated with the IP.
	Tags pulumi.StringArrayInput
	// Date and time of IP's last update (RFC 3339 format).
	UpdatedAt pulumi.StringPtrInput
	// The zone of the IP.
	Zone pulumi.StringPtrInput
}

func (IpamIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipamIpState)(nil)).Elem()
}

type ipamIpArgs struct {
	// Request a specific IP in the requested source pool.
	Address *string `pulumi:"address"`
	// Defines whether to request an IPv6 instead of an IPv4.
	IsIpv6 *bool `pulumi:"isIpv6"`
	// `projectId`) The ID of the project the IP is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region of the IP.
	Region *string `pulumi:"region"`
	// The source in which to book the IP.
	Sources []IpamIpSource `pulumi:"sources"`
	// The tags associated with the IP.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a IpamIp resource.
type IpamIpArgs struct {
	// Request a specific IP in the requested source pool.
	Address pulumi.StringPtrInput
	// Defines whether to request an IPv6 instead of an IPv4.
	IsIpv6 pulumi.BoolPtrInput
	// `projectId`) The ID of the project the IP is associated with.
	ProjectId pulumi.StringPtrInput
	// `region`) The region of the IP.
	Region pulumi.StringPtrInput
	// The source in which to book the IP.
	Sources IpamIpSourceArrayInput
	// The tags associated with the IP.
	Tags pulumi.StringArrayInput
}

func (IpamIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipamIpArgs)(nil)).Elem()
}

type IpamIpInput interface {
	pulumi.Input

	ToIpamIpOutput() IpamIpOutput
	ToIpamIpOutputWithContext(ctx context.Context) IpamIpOutput
}

func (*IpamIp) ElementType() reflect.Type {
	return reflect.TypeOf((**IpamIp)(nil)).Elem()
}

func (i *IpamIp) ToIpamIpOutput() IpamIpOutput {
	return i.ToIpamIpOutputWithContext(context.Background())
}

func (i *IpamIp) ToIpamIpOutputWithContext(ctx context.Context) IpamIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpamIpOutput)
}

// IpamIpArrayInput is an input type that accepts IpamIpArray and IpamIpArrayOutput values.
// You can construct a concrete instance of `IpamIpArrayInput` via:
//
//	IpamIpArray{ IpamIpArgs{...} }
type IpamIpArrayInput interface {
	pulumi.Input

	ToIpamIpArrayOutput() IpamIpArrayOutput
	ToIpamIpArrayOutputWithContext(context.Context) IpamIpArrayOutput
}

type IpamIpArray []IpamIpInput

func (IpamIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpamIp)(nil)).Elem()
}

func (i IpamIpArray) ToIpamIpArrayOutput() IpamIpArrayOutput {
	return i.ToIpamIpArrayOutputWithContext(context.Background())
}

func (i IpamIpArray) ToIpamIpArrayOutputWithContext(ctx context.Context) IpamIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpamIpArrayOutput)
}

// IpamIpMapInput is an input type that accepts IpamIpMap and IpamIpMapOutput values.
// You can construct a concrete instance of `IpamIpMapInput` via:
//
//	IpamIpMap{ "key": IpamIpArgs{...} }
type IpamIpMapInput interface {
	pulumi.Input

	ToIpamIpMapOutput() IpamIpMapOutput
	ToIpamIpMapOutputWithContext(context.Context) IpamIpMapOutput
}

type IpamIpMap map[string]IpamIpInput

func (IpamIpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpamIp)(nil)).Elem()
}

func (i IpamIpMap) ToIpamIpMapOutput() IpamIpMapOutput {
	return i.ToIpamIpMapOutputWithContext(context.Background())
}

func (i IpamIpMap) ToIpamIpMapOutputWithContext(ctx context.Context) IpamIpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpamIpMapOutput)
}

type IpamIpOutput struct{ *pulumi.OutputState }

func (IpamIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpamIp)(nil)).Elem()
}

func (o IpamIpOutput) ToIpamIpOutput() IpamIpOutput {
	return o
}

func (o IpamIpOutput) ToIpamIpOutputWithContext(ctx context.Context) IpamIpOutput {
	return o
}

// Request a specific IP in the requested source pool.
func (o IpamIpOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamIp) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// Date and time of IP's creation (RFC 3339 format).
func (o IpamIpOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamIp) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Defines whether to request an IPv6 instead of an IPv4.
func (o IpamIpOutput) IsIpv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IpamIp) pulumi.BoolPtrOutput { return v.IsIpv6 }).(pulumi.BoolPtrOutput)
}

// `projectId`) The ID of the project the IP is associated with.
func (o IpamIpOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamIp) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// `region`) The region of the IP.
func (o IpamIpOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamIp) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The IP resource.
func (o IpamIpOutput) Resources() IpamIpResourceArrayOutput {
	return o.ApplyT(func(v *IpamIp) IpamIpResourceArrayOutput { return v.Resources }).(IpamIpResourceArrayOutput)
}

// The reverses DNS for this IP.
func (o IpamIpOutput) Reverses() IpamIpReverseArrayOutput {
	return o.ApplyT(func(v *IpamIp) IpamIpReverseArrayOutput { return v.Reverses }).(IpamIpReverseArrayOutput)
}

// The source in which to book the IP.
func (o IpamIpOutput) Sources() IpamIpSourceArrayOutput {
	return o.ApplyT(func(v *IpamIp) IpamIpSourceArrayOutput { return v.Sources }).(IpamIpSourceArrayOutput)
}

// The tags associated with the IP.
func (o IpamIpOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IpamIp) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Date and time of IP's last update (RFC 3339 format).
func (o IpamIpOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamIp) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The zone of the IP.
func (o IpamIpOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamIp) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type IpamIpArrayOutput struct{ *pulumi.OutputState }

func (IpamIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpamIp)(nil)).Elem()
}

func (o IpamIpArrayOutput) ToIpamIpArrayOutput() IpamIpArrayOutput {
	return o
}

func (o IpamIpArrayOutput) ToIpamIpArrayOutputWithContext(ctx context.Context) IpamIpArrayOutput {
	return o
}

func (o IpamIpArrayOutput) Index(i pulumi.IntInput) IpamIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpamIp {
		return vs[0].([]*IpamIp)[vs[1].(int)]
	}).(IpamIpOutput)
}

type IpamIpMapOutput struct{ *pulumi.OutputState }

func (IpamIpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpamIp)(nil)).Elem()
}

func (o IpamIpMapOutput) ToIpamIpMapOutput() IpamIpMapOutput {
	return o
}

func (o IpamIpMapOutput) ToIpamIpMapOutputWithContext(ctx context.Context) IpamIpMapOutput {
	return o
}

func (o IpamIpMapOutput) MapIndex(k pulumi.StringInput) IpamIpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpamIp {
		return vs[0].(map[string]*IpamIp)[vs[1].(string)]
	}).(IpamIpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpamIpInput)(nil)).Elem(), &IpamIp{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpamIpArrayInput)(nil)).Elem(), IpamIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpamIpMapInput)(nil)).Elem(), IpamIpMap{})
	pulumi.RegisterOutputType(IpamIpOutput{})
	pulumi.RegisterOutputType(IpamIpArrayOutput{})
	pulumi.RegisterOutputType(IpamIpMapOutput{})
}
