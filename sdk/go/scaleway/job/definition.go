// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package job

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages a Scaleway Serverless Job Definition. For more information, see the [Go API documentation](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/jobs/v1alpha1).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/job"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := job.NewDefinition(ctx, "main", &job.DefinitionArgs{
//				Name:        pulumi.String("testjob"),
//				CpuLimit:    pulumi.Int(140),
//				MemoryLimit: pulumi.Int(256),
//				ImageUri:    pulumi.String("docker.io/alpine:latest"),
//				Command:     pulumi.String("ls"),
//				Timeout:     pulumi.String("10m"),
//				Env: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Cron: &job.DefinitionCronArgs{
//					Schedule: pulumi.String("5 4 1 * *"),
//					Timezone: pulumi.String("Europe/Paris"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With Secret Reference
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/job"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := job.NewDefinition(ctx, "main", &job.DefinitionArgs{
//				Name:        pulumi.String("testjob"),
//				CpuLimit:    pulumi.Int(140),
//				MemoryLimit: pulumi.Int(256),
//				ImageUri:    pulumi.String("docker.io/alpine:latest"),
//				Command:     pulumi.String("ls"),
//				Timeout:     pulumi.String("10m"),
//				Cron: &job.DefinitionCronArgs{
//					Schedule: pulumi.String("5 4 1 * *"),
//					Timezone: pulumi.String("Europe/Paris"),
//				},
//				SecretReferences: job.DefinitionSecretReferenceArray{
//					&job.DefinitionSecretReferenceArgs{
//						SecretId: pulumi.String("11111111-1111-1111-1111-111111111111"),
//						File:     pulumi.String("/home/dev/secret_file"),
//					},
//					&job.DefinitionSecretReferenceArgs{
//						SecretId:      pulumi.Any(jobSecret.Id),
//						SecretVersion: pulumi.String("1"),
//						Environment:   pulumi.String("FOO"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Serverless Jobs can be imported using the `{region}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:job/definition:Definition job fr-par/11111111-1111-1111-1111-111111111111
// ```
type Definition struct {
	pulumi.CustomResourceState

	// The command that will be run in the container if specified.
	Command pulumi.StringPtrOutput `pulumi:"command"`
	// The amount of vCPU computing resources to allocate to each container running the job.
	CpuLimit pulumi.IntOutput `pulumi:"cpuLimit"`
	// The cron configuration
	Cron DefinitionCronPtrOutput `pulumi:"cron"`
	// The description of the job
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The environment variables of the container.
	Env pulumi.StringMapOutput `pulumi:"env"`
	// The uri of the container image that will be used for the job run.
	ImageUri pulumi.StringPtrOutput `pulumi:"imageUri"`
	// The memory computing resources in MB to allocate to each container running the job.
	MemoryLimit pulumi.IntOutput `pulumi:"memoryLimit"`
	// The name of the job.
	Name pulumi.StringOutput `pulumi:"name"`
	// `projectId`) The ID of the project the Job is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// `region`) The region of the Job.
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// A reference to a secret stored in Secret Manager.
	SecretReferences DefinitionSecretReferenceArrayOutput `pulumi:"secretReferences"`
	// The job run timeout, in Go Time format (ex: `2h30m25s`)
	Timeout pulumi.StringOutput `pulumi:"timeout"`
}

// NewDefinition registers a new resource with the given unique name, arguments, and options.
func NewDefinition(ctx *pulumi.Context,
	name string, args *DefinitionArgs, opts ...pulumi.ResourceOption) (*Definition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CpuLimit == nil {
		return nil, errors.New("invalid value for required argument 'CpuLimit'")
	}
	if args.MemoryLimit == nil {
		return nil, errors.New("invalid value for required argument 'MemoryLimit'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/jobDefinition:JobDefinition"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Definition
	err := ctx.RegisterResource("scaleway:job/definition:Definition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDefinition gets an existing Definition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DefinitionState, opts ...pulumi.ResourceOption) (*Definition, error) {
	var resource Definition
	err := ctx.ReadResource("scaleway:job/definition:Definition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Definition resources.
type definitionState struct {
	// The command that will be run in the container if specified.
	Command *string `pulumi:"command"`
	// The amount of vCPU computing resources to allocate to each container running the job.
	CpuLimit *int `pulumi:"cpuLimit"`
	// The cron configuration
	Cron *DefinitionCron `pulumi:"cron"`
	// The description of the job
	Description *string `pulumi:"description"`
	// The environment variables of the container.
	Env map[string]string `pulumi:"env"`
	// The uri of the container image that will be used for the job run.
	ImageUri *string `pulumi:"imageUri"`
	// The memory computing resources in MB to allocate to each container running the job.
	MemoryLimit *int `pulumi:"memoryLimit"`
	// The name of the job.
	Name *string `pulumi:"name"`
	// `projectId`) The ID of the project the Job is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region of the Job.
	Region *string `pulumi:"region"`
	// A reference to a secret stored in Secret Manager.
	SecretReferences []DefinitionSecretReference `pulumi:"secretReferences"`
	// The job run timeout, in Go Time format (ex: `2h30m25s`)
	Timeout *string `pulumi:"timeout"`
}

type DefinitionState struct {
	// The command that will be run in the container if specified.
	Command pulumi.StringPtrInput
	// The amount of vCPU computing resources to allocate to each container running the job.
	CpuLimit pulumi.IntPtrInput
	// The cron configuration
	Cron DefinitionCronPtrInput
	// The description of the job
	Description pulumi.StringPtrInput
	// The environment variables of the container.
	Env pulumi.StringMapInput
	// The uri of the container image that will be used for the job run.
	ImageUri pulumi.StringPtrInput
	// The memory computing resources in MB to allocate to each container running the job.
	MemoryLimit pulumi.IntPtrInput
	// The name of the job.
	Name pulumi.StringPtrInput
	// `projectId`) The ID of the project the Job is associated with.
	ProjectId pulumi.StringPtrInput
	// `region`) The region of the Job.
	Region pulumi.StringPtrInput
	// A reference to a secret stored in Secret Manager.
	SecretReferences DefinitionSecretReferenceArrayInput
	// The job run timeout, in Go Time format (ex: `2h30m25s`)
	Timeout pulumi.StringPtrInput
}

func (DefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*definitionState)(nil)).Elem()
}

type definitionArgs struct {
	// The command that will be run in the container if specified.
	Command *string `pulumi:"command"`
	// The amount of vCPU computing resources to allocate to each container running the job.
	CpuLimit int `pulumi:"cpuLimit"`
	// The cron configuration
	Cron *DefinitionCron `pulumi:"cron"`
	// The description of the job
	Description *string `pulumi:"description"`
	// The environment variables of the container.
	Env map[string]string `pulumi:"env"`
	// The uri of the container image that will be used for the job run.
	ImageUri *string `pulumi:"imageUri"`
	// The memory computing resources in MB to allocate to each container running the job.
	MemoryLimit int `pulumi:"memoryLimit"`
	// The name of the job.
	Name *string `pulumi:"name"`
	// `projectId`) The ID of the project the Job is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region of the Job.
	Region *string `pulumi:"region"`
	// A reference to a secret stored in Secret Manager.
	SecretReferences []DefinitionSecretReference `pulumi:"secretReferences"`
	// The job run timeout, in Go Time format (ex: `2h30m25s`)
	Timeout *string `pulumi:"timeout"`
}

// The set of arguments for constructing a Definition resource.
type DefinitionArgs struct {
	// The command that will be run in the container if specified.
	Command pulumi.StringPtrInput
	// The amount of vCPU computing resources to allocate to each container running the job.
	CpuLimit pulumi.IntInput
	// The cron configuration
	Cron DefinitionCronPtrInput
	// The description of the job
	Description pulumi.StringPtrInput
	// The environment variables of the container.
	Env pulumi.StringMapInput
	// The uri of the container image that will be used for the job run.
	ImageUri pulumi.StringPtrInput
	// The memory computing resources in MB to allocate to each container running the job.
	MemoryLimit pulumi.IntInput
	// The name of the job.
	Name pulumi.StringPtrInput
	// `projectId`) The ID of the project the Job is associated with.
	ProjectId pulumi.StringPtrInput
	// `region`) The region of the Job.
	Region pulumi.StringPtrInput
	// A reference to a secret stored in Secret Manager.
	SecretReferences DefinitionSecretReferenceArrayInput
	// The job run timeout, in Go Time format (ex: `2h30m25s`)
	Timeout pulumi.StringPtrInput
}

func (DefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*definitionArgs)(nil)).Elem()
}

type DefinitionInput interface {
	pulumi.Input

	ToDefinitionOutput() DefinitionOutput
	ToDefinitionOutputWithContext(ctx context.Context) DefinitionOutput
}

func (*Definition) ElementType() reflect.Type {
	return reflect.TypeOf((**Definition)(nil)).Elem()
}

func (i *Definition) ToDefinitionOutput() DefinitionOutput {
	return i.ToDefinitionOutputWithContext(context.Background())
}

func (i *Definition) ToDefinitionOutputWithContext(ctx context.Context) DefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefinitionOutput)
}

// DefinitionArrayInput is an input type that accepts DefinitionArray and DefinitionArrayOutput values.
// You can construct a concrete instance of `DefinitionArrayInput` via:
//
//	DefinitionArray{ DefinitionArgs{...} }
type DefinitionArrayInput interface {
	pulumi.Input

	ToDefinitionArrayOutput() DefinitionArrayOutput
	ToDefinitionArrayOutputWithContext(context.Context) DefinitionArrayOutput
}

type DefinitionArray []DefinitionInput

func (DefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Definition)(nil)).Elem()
}

func (i DefinitionArray) ToDefinitionArrayOutput() DefinitionArrayOutput {
	return i.ToDefinitionArrayOutputWithContext(context.Background())
}

func (i DefinitionArray) ToDefinitionArrayOutputWithContext(ctx context.Context) DefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefinitionArrayOutput)
}

// DefinitionMapInput is an input type that accepts DefinitionMap and DefinitionMapOutput values.
// You can construct a concrete instance of `DefinitionMapInput` via:
//
//	DefinitionMap{ "key": DefinitionArgs{...} }
type DefinitionMapInput interface {
	pulumi.Input

	ToDefinitionMapOutput() DefinitionMapOutput
	ToDefinitionMapOutputWithContext(context.Context) DefinitionMapOutput
}

type DefinitionMap map[string]DefinitionInput

func (DefinitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Definition)(nil)).Elem()
}

func (i DefinitionMap) ToDefinitionMapOutput() DefinitionMapOutput {
	return i.ToDefinitionMapOutputWithContext(context.Background())
}

func (i DefinitionMap) ToDefinitionMapOutputWithContext(ctx context.Context) DefinitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefinitionMapOutput)
}

type DefinitionOutput struct{ *pulumi.OutputState }

func (DefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Definition)(nil)).Elem()
}

func (o DefinitionOutput) ToDefinitionOutput() DefinitionOutput {
	return o
}

func (o DefinitionOutput) ToDefinitionOutputWithContext(ctx context.Context) DefinitionOutput {
	return o
}

// The command that will be run in the container if specified.
func (o DefinitionOutput) Command() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Definition) pulumi.StringPtrOutput { return v.Command }).(pulumi.StringPtrOutput)
}

// The amount of vCPU computing resources to allocate to each container running the job.
func (o DefinitionOutput) CpuLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *Definition) pulumi.IntOutput { return v.CpuLimit }).(pulumi.IntOutput)
}

// The cron configuration
func (o DefinitionOutput) Cron() DefinitionCronPtrOutput {
	return o.ApplyT(func(v *Definition) DefinitionCronPtrOutput { return v.Cron }).(DefinitionCronPtrOutput)
}

// The description of the job
func (o DefinitionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Definition) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The environment variables of the container.
func (o DefinitionOutput) Env() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Definition) pulumi.StringMapOutput { return v.Env }).(pulumi.StringMapOutput)
}

// The uri of the container image that will be used for the job run.
func (o DefinitionOutput) ImageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Definition) pulumi.StringPtrOutput { return v.ImageUri }).(pulumi.StringPtrOutput)
}

// The memory computing resources in MB to allocate to each container running the job.
func (o DefinitionOutput) MemoryLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *Definition) pulumi.IntOutput { return v.MemoryLimit }).(pulumi.IntOutput)
}

// The name of the job.
func (o DefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Definition) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// `projectId`) The ID of the project the Job is associated with.
func (o DefinitionOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Definition) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// `region`) The region of the Job.
func (o DefinitionOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Definition) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// A reference to a secret stored in Secret Manager.
func (o DefinitionOutput) SecretReferences() DefinitionSecretReferenceArrayOutput {
	return o.ApplyT(func(v *Definition) DefinitionSecretReferenceArrayOutput { return v.SecretReferences }).(DefinitionSecretReferenceArrayOutput)
}

// The job run timeout, in Go Time format (ex: `2h30m25s`)
func (o DefinitionOutput) Timeout() pulumi.StringOutput {
	return o.ApplyT(func(v *Definition) pulumi.StringOutput { return v.Timeout }).(pulumi.StringOutput)
}

type DefinitionArrayOutput struct{ *pulumi.OutputState }

func (DefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Definition)(nil)).Elem()
}

func (o DefinitionArrayOutput) ToDefinitionArrayOutput() DefinitionArrayOutput {
	return o
}

func (o DefinitionArrayOutput) ToDefinitionArrayOutputWithContext(ctx context.Context) DefinitionArrayOutput {
	return o
}

func (o DefinitionArrayOutput) Index(i pulumi.IntInput) DefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Definition {
		return vs[0].([]*Definition)[vs[1].(int)]
	}).(DefinitionOutput)
}

type DefinitionMapOutput struct{ *pulumi.OutputState }

func (DefinitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Definition)(nil)).Elem()
}

func (o DefinitionMapOutput) ToDefinitionMapOutput() DefinitionMapOutput {
	return o
}

func (o DefinitionMapOutput) ToDefinitionMapOutputWithContext(ctx context.Context) DefinitionMapOutput {
	return o
}

func (o DefinitionMapOutput) MapIndex(k pulumi.StringInput) DefinitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Definition {
		return vs[0].(map[string]*Definition)[vs[1].(string)]
	}).(DefinitionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DefinitionInput)(nil)).Elem(), &Definition{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefinitionArrayInput)(nil)).Elem(), DefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefinitionMapInput)(nil)).Elem(), DefinitionMap{})
	pulumi.RegisterOutputType(DefinitionOutput{})
	pulumi.RegisterOutputType(DefinitionArrayOutput{})
	pulumi.RegisterOutputType(DefinitionMapOutput{})
}
