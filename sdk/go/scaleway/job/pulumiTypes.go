// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package job

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

var _ = internal.GetEnvOrDefault

type DefinitionCron struct {
	// Cron format string.
	Schedule string `pulumi:"schedule"`
	// The timezone, must be a canonical TZ identifier as found in this [list](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
	Timezone string `pulumi:"timezone"`
}

// DefinitionCronInput is an input type that accepts DefinitionCronArgs and DefinitionCronOutput values.
// You can construct a concrete instance of `DefinitionCronInput` via:
//
//	DefinitionCronArgs{...}
type DefinitionCronInput interface {
	pulumi.Input

	ToDefinitionCronOutput() DefinitionCronOutput
	ToDefinitionCronOutputWithContext(context.Context) DefinitionCronOutput
}

type DefinitionCronArgs struct {
	// Cron format string.
	Schedule pulumi.StringInput `pulumi:"schedule"`
	// The timezone, must be a canonical TZ identifier as found in this [list](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
	Timezone pulumi.StringInput `pulumi:"timezone"`
}

func (DefinitionCronArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefinitionCron)(nil)).Elem()
}

func (i DefinitionCronArgs) ToDefinitionCronOutput() DefinitionCronOutput {
	return i.ToDefinitionCronOutputWithContext(context.Background())
}

func (i DefinitionCronArgs) ToDefinitionCronOutputWithContext(ctx context.Context) DefinitionCronOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefinitionCronOutput)
}

func (i DefinitionCronArgs) ToDefinitionCronPtrOutput() DefinitionCronPtrOutput {
	return i.ToDefinitionCronPtrOutputWithContext(context.Background())
}

func (i DefinitionCronArgs) ToDefinitionCronPtrOutputWithContext(ctx context.Context) DefinitionCronPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefinitionCronOutput).ToDefinitionCronPtrOutputWithContext(ctx)
}

// DefinitionCronPtrInput is an input type that accepts DefinitionCronArgs, DefinitionCronPtr and DefinitionCronPtrOutput values.
// You can construct a concrete instance of `DefinitionCronPtrInput` via:
//
//	        DefinitionCronArgs{...}
//
//	or:
//
//	        nil
type DefinitionCronPtrInput interface {
	pulumi.Input

	ToDefinitionCronPtrOutput() DefinitionCronPtrOutput
	ToDefinitionCronPtrOutputWithContext(context.Context) DefinitionCronPtrOutput
}

type definitionCronPtrType DefinitionCronArgs

func DefinitionCronPtr(v *DefinitionCronArgs) DefinitionCronPtrInput {
	return (*definitionCronPtrType)(v)
}

func (*definitionCronPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DefinitionCron)(nil)).Elem()
}

func (i *definitionCronPtrType) ToDefinitionCronPtrOutput() DefinitionCronPtrOutput {
	return i.ToDefinitionCronPtrOutputWithContext(context.Background())
}

func (i *definitionCronPtrType) ToDefinitionCronPtrOutputWithContext(ctx context.Context) DefinitionCronPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefinitionCronPtrOutput)
}

type DefinitionCronOutput struct{ *pulumi.OutputState }

func (DefinitionCronOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefinitionCron)(nil)).Elem()
}

func (o DefinitionCronOutput) ToDefinitionCronOutput() DefinitionCronOutput {
	return o
}

func (o DefinitionCronOutput) ToDefinitionCronOutputWithContext(ctx context.Context) DefinitionCronOutput {
	return o
}

func (o DefinitionCronOutput) ToDefinitionCronPtrOutput() DefinitionCronPtrOutput {
	return o.ToDefinitionCronPtrOutputWithContext(context.Background())
}

func (o DefinitionCronOutput) ToDefinitionCronPtrOutputWithContext(ctx context.Context) DefinitionCronPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DefinitionCron) *DefinitionCron {
		return &v
	}).(DefinitionCronPtrOutput)
}

// Cron format string.
func (o DefinitionCronOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v DefinitionCron) string { return v.Schedule }).(pulumi.StringOutput)
}

// The timezone, must be a canonical TZ identifier as found in this [list](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
func (o DefinitionCronOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v DefinitionCron) string { return v.Timezone }).(pulumi.StringOutput)
}

type DefinitionCronPtrOutput struct{ *pulumi.OutputState }

func (DefinitionCronPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefinitionCron)(nil)).Elem()
}

func (o DefinitionCronPtrOutput) ToDefinitionCronPtrOutput() DefinitionCronPtrOutput {
	return o
}

func (o DefinitionCronPtrOutput) ToDefinitionCronPtrOutputWithContext(ctx context.Context) DefinitionCronPtrOutput {
	return o
}

func (o DefinitionCronPtrOutput) Elem() DefinitionCronOutput {
	return o.ApplyT(func(v *DefinitionCron) DefinitionCron {
		if v != nil {
			return *v
		}
		var ret DefinitionCron
		return ret
	}).(DefinitionCronOutput)
}

// Cron format string.
func (o DefinitionCronPtrOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefinitionCron) *string {
		if v == nil {
			return nil
		}
		return &v.Schedule
	}).(pulumi.StringPtrOutput)
}

// The timezone, must be a canonical TZ identifier as found in this [list](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
func (o DefinitionCronPtrOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefinitionCron) *string {
		if v == nil {
			return nil
		}
		return &v.Timezone
	}).(pulumi.StringPtrOutput)
}

type DefinitionSecretReference struct {
	// An environment variable containing the secret value. Must be specified if `file` is not specified.
	Environment *string `pulumi:"environment"`
	// The absolute file path where the secret will be mounted. Must be specified if `environment` is not specified.
	File *string `pulumi:"file"`
	// The secret unique identifier, it could be formatted as region/UUID or UUID. In case the region is passed, it must be the same as the job definition. You could reference the same secret multiple times in the same job definition.
	SecretId string `pulumi:"secretId"`
	// The secret reference UUID that is automatically generated by the provider.
	SecretReferenceId *string `pulumi:"secretReferenceId"`
	// The secret version.
	SecretVersion *string `pulumi:"secretVersion"`
}

// DefinitionSecretReferenceInput is an input type that accepts DefinitionSecretReferenceArgs and DefinitionSecretReferenceOutput values.
// You can construct a concrete instance of `DefinitionSecretReferenceInput` via:
//
//	DefinitionSecretReferenceArgs{...}
type DefinitionSecretReferenceInput interface {
	pulumi.Input

	ToDefinitionSecretReferenceOutput() DefinitionSecretReferenceOutput
	ToDefinitionSecretReferenceOutputWithContext(context.Context) DefinitionSecretReferenceOutput
}

type DefinitionSecretReferenceArgs struct {
	// An environment variable containing the secret value. Must be specified if `file` is not specified.
	Environment pulumi.StringPtrInput `pulumi:"environment"`
	// The absolute file path where the secret will be mounted. Must be specified if `environment` is not specified.
	File pulumi.StringPtrInput `pulumi:"file"`
	// The secret unique identifier, it could be formatted as region/UUID or UUID. In case the region is passed, it must be the same as the job definition. You could reference the same secret multiple times in the same job definition.
	SecretId pulumi.StringInput `pulumi:"secretId"`
	// The secret reference UUID that is automatically generated by the provider.
	SecretReferenceId pulumi.StringPtrInput `pulumi:"secretReferenceId"`
	// The secret version.
	SecretVersion pulumi.StringPtrInput `pulumi:"secretVersion"`
}

func (DefinitionSecretReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefinitionSecretReference)(nil)).Elem()
}

func (i DefinitionSecretReferenceArgs) ToDefinitionSecretReferenceOutput() DefinitionSecretReferenceOutput {
	return i.ToDefinitionSecretReferenceOutputWithContext(context.Background())
}

func (i DefinitionSecretReferenceArgs) ToDefinitionSecretReferenceOutputWithContext(ctx context.Context) DefinitionSecretReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefinitionSecretReferenceOutput)
}

// DefinitionSecretReferenceArrayInput is an input type that accepts DefinitionSecretReferenceArray and DefinitionSecretReferenceArrayOutput values.
// You can construct a concrete instance of `DefinitionSecretReferenceArrayInput` via:
//
//	DefinitionSecretReferenceArray{ DefinitionSecretReferenceArgs{...} }
type DefinitionSecretReferenceArrayInput interface {
	pulumi.Input

	ToDefinitionSecretReferenceArrayOutput() DefinitionSecretReferenceArrayOutput
	ToDefinitionSecretReferenceArrayOutputWithContext(context.Context) DefinitionSecretReferenceArrayOutput
}

type DefinitionSecretReferenceArray []DefinitionSecretReferenceInput

func (DefinitionSecretReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DefinitionSecretReference)(nil)).Elem()
}

func (i DefinitionSecretReferenceArray) ToDefinitionSecretReferenceArrayOutput() DefinitionSecretReferenceArrayOutput {
	return i.ToDefinitionSecretReferenceArrayOutputWithContext(context.Background())
}

func (i DefinitionSecretReferenceArray) ToDefinitionSecretReferenceArrayOutputWithContext(ctx context.Context) DefinitionSecretReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefinitionSecretReferenceArrayOutput)
}

type DefinitionSecretReferenceOutput struct{ *pulumi.OutputState }

func (DefinitionSecretReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefinitionSecretReference)(nil)).Elem()
}

func (o DefinitionSecretReferenceOutput) ToDefinitionSecretReferenceOutput() DefinitionSecretReferenceOutput {
	return o
}

func (o DefinitionSecretReferenceOutput) ToDefinitionSecretReferenceOutputWithContext(ctx context.Context) DefinitionSecretReferenceOutput {
	return o
}

// An environment variable containing the secret value. Must be specified if `file` is not specified.
func (o DefinitionSecretReferenceOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefinitionSecretReference) *string { return v.Environment }).(pulumi.StringPtrOutput)
}

// The absolute file path where the secret will be mounted. Must be specified if `environment` is not specified.
func (o DefinitionSecretReferenceOutput) File() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefinitionSecretReference) *string { return v.File }).(pulumi.StringPtrOutput)
}

// The secret unique identifier, it could be formatted as region/UUID or UUID. In case the region is passed, it must be the same as the job definition. You could reference the same secret multiple times in the same job definition.
func (o DefinitionSecretReferenceOutput) SecretId() pulumi.StringOutput {
	return o.ApplyT(func(v DefinitionSecretReference) string { return v.SecretId }).(pulumi.StringOutput)
}

// The secret reference UUID that is automatically generated by the provider.
func (o DefinitionSecretReferenceOutput) SecretReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefinitionSecretReference) *string { return v.SecretReferenceId }).(pulumi.StringPtrOutput)
}

// The secret version.
func (o DefinitionSecretReferenceOutput) SecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefinitionSecretReference) *string { return v.SecretVersion }).(pulumi.StringPtrOutput)
}

type DefinitionSecretReferenceArrayOutput struct{ *pulumi.OutputState }

func (DefinitionSecretReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DefinitionSecretReference)(nil)).Elem()
}

func (o DefinitionSecretReferenceArrayOutput) ToDefinitionSecretReferenceArrayOutput() DefinitionSecretReferenceArrayOutput {
	return o
}

func (o DefinitionSecretReferenceArrayOutput) ToDefinitionSecretReferenceArrayOutputWithContext(ctx context.Context) DefinitionSecretReferenceArrayOutput {
	return o
}

func (o DefinitionSecretReferenceArrayOutput) Index(i pulumi.IntInput) DefinitionSecretReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DefinitionSecretReference {
		return vs[0].([]DefinitionSecretReference)[vs[1].(int)]
	}).(DefinitionSecretReferenceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DefinitionCronInput)(nil)).Elem(), DefinitionCronArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefinitionCronPtrInput)(nil)).Elem(), DefinitionCronArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefinitionSecretReferenceInput)(nil)).Elem(), DefinitionSecretReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefinitionSecretReferenceArrayInput)(nil)).Elem(), DefinitionSecretReferenceArray{})
	pulumi.RegisterOutputType(DefinitionCronOutput{})
	pulumi.RegisterOutputType(DefinitionCronPtrOutput{})
	pulumi.RegisterOutputType(DefinitionSecretReferenceOutput{})
	pulumi.RegisterOutputType(DefinitionSecretReferenceArrayOutput{})
}
