// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Provides a Scaleway Key Manager Key resource.\
// This resource allows you to create and manage cryptographic keys in Scaleway Key Manager (KMS).
//
// ## Example Usage
//
// ### Symmetric Encryption Key
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewKeyManagerKey(ctx, "symmetric", &scaleway.KeyManagerKeyArgs{
//				Name:        pulumi.String("my-kms-key"),
//				Region:      pulumi.String("fr-par"),
//				ProjectId:   pulumi.String("your-project-id"),
//				Usage:       pulumi.String("symmetric_encryption"),
//				Algorithm:   pulumi.String("aes_256_gcm"),
//				Description: pulumi.String("Key for encrypting secrets"),
//				Tags: pulumi.StringArray{
//					pulumi.String("env:prod"),
//					pulumi.String("kms"),
//				},
//				Unprotected: pulumi.Bool(true),
//				RotationPolicy: &scaleway.KeyManagerKeyRotationPolicyArgs{
//					RotationPeriod: pulumi.String("720h"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Asymmetric Encryption Key with RSA-4096
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewKeyManagerKey(ctx, "rsa_4096", &scaleway.KeyManagerKeyArgs{
//				Name:        pulumi.String("rsa-4096-key"),
//				Region:      pulumi.String("fr-par"),
//				Usage:       pulumi.String("asymmetric_encryption"),
//				Algorithm:   pulumi.String("rsa_oaep_4096_sha256"),
//				Description: pulumi.String("Key for encrypting large files with RSA-4096"),
//				Unprotected: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Asymmetric Signing Key
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewKeyManagerKey(ctx, "signing", &scaleway.KeyManagerKeyArgs{
//				Name:        pulumi.String("signing-key"),
//				Region:      pulumi.String("fr-par"),
//				Usage:       pulumi.String("asymmetric_signing"),
//				Algorithm:   pulumi.String("rsa_pss_2048_sha256"),
//				Description: pulumi.String("Key for signing documents"),
//				Unprotected: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Notes
//
// - **Protection**: By default, keys are protected and cannot be deleted. To allow deletion, set `unprotected = true` when creating the key.
// - **Rotation Policy**: The `rotationPolicy` block allows you to set automatic rotation for your key.
// - **Origin**: The `origin` argument is optional and defaults to `scalewayKms`. Use `external` if you want to import an external key (see Scaleway documentation for details).
// - **Project and Region**: If not specified, `projectId` and `region` will default to the provider configuration.
// - **Algorithm Validation**: The provider validates that the specified `algorithm` is compatible with the `usage` type at plan time, providing early feedback on configuration errors.
//
// ## Import
//
// You can import a key using its ID and region:
//
// ```sh
// $ pulumi import scaleway:index/keyManagerKey:KeyManagerKey main fr-par/11111111-2222-3333-4444-555555555555
// ```
type KeyManagerKey struct {
	pulumi.CustomResourceState

	// – The cryptographic algorithm to use. Valid values depend on the `usage`:
	// - For `symmetricEncryption`:
	Algorithm pulumi.StringOutput `pulumi:"algorithm"`
	// The date and time when the key was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// – A description for the key.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether the key is locked.
	Locked pulumi.BoolOutput `pulumi:"locked"`
	// The name of the key.
	Name pulumi.StringOutput `pulumi:"name"`
	// – The origin of the key. Valid values are:
	Origin pulumi.StringPtrOutput `pulumi:"origin"`
	// – The ID of the project the key belongs to.
	//
	// **Key Usage and Algorithm (both required):**
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Whether the key is protected from deletion.
	Protected pulumi.BoolOutput `pulumi:"protected"`
	// The region in which to create the key (e.g., `fr-par`).
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// The date and time when the key was last rotated.
	RotatedAt pulumi.StringOutput `pulumi:"rotatedAt"`
	// The number of times the key has been rotated.
	RotationCount pulumi.IntOutput `pulumi:"rotationCount"`
	// – Rotation policy for the key:
	RotationPolicy KeyManagerKeyRotationPolicyPtrOutput `pulumi:"rotationPolicy"`
	// The state of the key (e.g., `enabled`).
	State pulumi.StringOutput `pulumi:"state"`
	// – A list of tags to assign to the key.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// – If `true`, the key can be deleted. Defaults to `false` (protected).
	Unprotected pulumi.BoolPtrOutput `pulumi:"unprotected"`
	// The date and time when the key was last updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// – The usage type of the key. Valid values:
	Usage pulumi.StringOutput `pulumi:"usage"`
}

// NewKeyManagerKey registers a new resource with the given unique name, arguments, and options.
func NewKeyManagerKey(ctx *pulumi.Context,
	name string, args *KeyManagerKeyArgs, opts ...pulumi.ResourceOption) (*KeyManagerKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Algorithm == nil {
		return nil, errors.New("invalid value for required argument 'Algorithm'")
	}
	if args.Usage == nil {
		return nil, errors.New("invalid value for required argument 'Usage'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KeyManagerKey
	err := ctx.RegisterResource("scaleway:index/keyManagerKey:KeyManagerKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyManagerKey gets an existing KeyManagerKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyManagerKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyManagerKeyState, opts ...pulumi.ResourceOption) (*KeyManagerKey, error) {
	var resource KeyManagerKey
	err := ctx.ReadResource("scaleway:index/keyManagerKey:KeyManagerKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyManagerKey resources.
type keyManagerKeyState struct {
	// – The cryptographic algorithm to use. Valid values depend on the `usage`:
	// - For `symmetricEncryption`:
	Algorithm *string `pulumi:"algorithm"`
	// The date and time when the key was created.
	CreatedAt *string `pulumi:"createdAt"`
	// – A description for the key.
	Description *string `pulumi:"description"`
	// Whether the key is locked.
	Locked *bool `pulumi:"locked"`
	// The name of the key.
	Name *string `pulumi:"name"`
	// – The origin of the key. Valid values are:
	Origin *string `pulumi:"origin"`
	// – The ID of the project the key belongs to.
	//
	// **Key Usage and Algorithm (both required):**
	ProjectId *string `pulumi:"projectId"`
	// Whether the key is protected from deletion.
	Protected *bool `pulumi:"protected"`
	// The region in which to create the key (e.g., `fr-par`).
	Region *string `pulumi:"region"`
	// The date and time when the key was last rotated.
	RotatedAt *string `pulumi:"rotatedAt"`
	// The number of times the key has been rotated.
	RotationCount *int `pulumi:"rotationCount"`
	// – Rotation policy for the key:
	RotationPolicy *KeyManagerKeyRotationPolicy `pulumi:"rotationPolicy"`
	// The state of the key (e.g., `enabled`).
	State *string `pulumi:"state"`
	// – A list of tags to assign to the key.
	Tags []string `pulumi:"tags"`
	// – If `true`, the key can be deleted. Defaults to `false` (protected).
	Unprotected *bool `pulumi:"unprotected"`
	// The date and time when the key was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
	// – The usage type of the key. Valid values:
	Usage *string `pulumi:"usage"`
}

type KeyManagerKeyState struct {
	// – The cryptographic algorithm to use. Valid values depend on the `usage`:
	// - For `symmetricEncryption`:
	Algorithm pulumi.StringPtrInput
	// The date and time when the key was created.
	CreatedAt pulumi.StringPtrInput
	// – A description for the key.
	Description pulumi.StringPtrInput
	// Whether the key is locked.
	Locked pulumi.BoolPtrInput
	// The name of the key.
	Name pulumi.StringPtrInput
	// – The origin of the key. Valid values are:
	Origin pulumi.StringPtrInput
	// – The ID of the project the key belongs to.
	//
	// **Key Usage and Algorithm (both required):**
	ProjectId pulumi.StringPtrInput
	// Whether the key is protected from deletion.
	Protected pulumi.BoolPtrInput
	// The region in which to create the key (e.g., `fr-par`).
	Region pulumi.StringPtrInput
	// The date and time when the key was last rotated.
	RotatedAt pulumi.StringPtrInput
	// The number of times the key has been rotated.
	RotationCount pulumi.IntPtrInput
	// – Rotation policy for the key:
	RotationPolicy KeyManagerKeyRotationPolicyPtrInput
	// The state of the key (e.g., `enabled`).
	State pulumi.StringPtrInput
	// – A list of tags to assign to the key.
	Tags pulumi.StringArrayInput
	// – If `true`, the key can be deleted. Defaults to `false` (protected).
	Unprotected pulumi.BoolPtrInput
	// The date and time when the key was last updated.
	UpdatedAt pulumi.StringPtrInput
	// – The usage type of the key. Valid values:
	Usage pulumi.StringPtrInput
}

func (KeyManagerKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyManagerKeyState)(nil)).Elem()
}

type keyManagerKeyArgs struct {
	// – The cryptographic algorithm to use. Valid values depend on the `usage`:
	// - For `symmetricEncryption`:
	Algorithm string `pulumi:"algorithm"`
	// – A description for the key.
	Description *string `pulumi:"description"`
	// The name of the key.
	Name *string `pulumi:"name"`
	// – The origin of the key. Valid values are:
	Origin *string `pulumi:"origin"`
	// – The ID of the project the key belongs to.
	//
	// **Key Usage and Algorithm (both required):**
	ProjectId *string `pulumi:"projectId"`
	// The region in which to create the key (e.g., `fr-par`).
	Region *string `pulumi:"region"`
	// – Rotation policy for the key:
	RotationPolicy *KeyManagerKeyRotationPolicy `pulumi:"rotationPolicy"`
	// – A list of tags to assign to the key.
	Tags []string `pulumi:"tags"`
	// – If `true`, the key can be deleted. Defaults to `false` (protected).
	Unprotected *bool `pulumi:"unprotected"`
	// – The usage type of the key. Valid values:
	Usage string `pulumi:"usage"`
}

// The set of arguments for constructing a KeyManagerKey resource.
type KeyManagerKeyArgs struct {
	// – The cryptographic algorithm to use. Valid values depend on the `usage`:
	// - For `symmetricEncryption`:
	Algorithm pulumi.StringInput
	// – A description for the key.
	Description pulumi.StringPtrInput
	// The name of the key.
	Name pulumi.StringPtrInput
	// – The origin of the key. Valid values are:
	Origin pulumi.StringPtrInput
	// – The ID of the project the key belongs to.
	//
	// **Key Usage and Algorithm (both required):**
	ProjectId pulumi.StringPtrInput
	// The region in which to create the key (e.g., `fr-par`).
	Region pulumi.StringPtrInput
	// – Rotation policy for the key:
	RotationPolicy KeyManagerKeyRotationPolicyPtrInput
	// – A list of tags to assign to the key.
	Tags pulumi.StringArrayInput
	// – If `true`, the key can be deleted. Defaults to `false` (protected).
	Unprotected pulumi.BoolPtrInput
	// – The usage type of the key. Valid values:
	Usage pulumi.StringInput
}

func (KeyManagerKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyManagerKeyArgs)(nil)).Elem()
}

type KeyManagerKeyInput interface {
	pulumi.Input

	ToKeyManagerKeyOutput() KeyManagerKeyOutput
	ToKeyManagerKeyOutputWithContext(ctx context.Context) KeyManagerKeyOutput
}

func (*KeyManagerKey) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyManagerKey)(nil)).Elem()
}

func (i *KeyManagerKey) ToKeyManagerKeyOutput() KeyManagerKeyOutput {
	return i.ToKeyManagerKeyOutputWithContext(context.Background())
}

func (i *KeyManagerKey) ToKeyManagerKeyOutputWithContext(ctx context.Context) KeyManagerKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyManagerKeyOutput)
}

// KeyManagerKeyArrayInput is an input type that accepts KeyManagerKeyArray and KeyManagerKeyArrayOutput values.
// You can construct a concrete instance of `KeyManagerKeyArrayInput` via:
//
//	KeyManagerKeyArray{ KeyManagerKeyArgs{...} }
type KeyManagerKeyArrayInput interface {
	pulumi.Input

	ToKeyManagerKeyArrayOutput() KeyManagerKeyArrayOutput
	ToKeyManagerKeyArrayOutputWithContext(context.Context) KeyManagerKeyArrayOutput
}

type KeyManagerKeyArray []KeyManagerKeyInput

func (KeyManagerKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyManagerKey)(nil)).Elem()
}

func (i KeyManagerKeyArray) ToKeyManagerKeyArrayOutput() KeyManagerKeyArrayOutput {
	return i.ToKeyManagerKeyArrayOutputWithContext(context.Background())
}

func (i KeyManagerKeyArray) ToKeyManagerKeyArrayOutputWithContext(ctx context.Context) KeyManagerKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyManagerKeyArrayOutput)
}

// KeyManagerKeyMapInput is an input type that accepts KeyManagerKeyMap and KeyManagerKeyMapOutput values.
// You can construct a concrete instance of `KeyManagerKeyMapInput` via:
//
//	KeyManagerKeyMap{ "key": KeyManagerKeyArgs{...} }
type KeyManagerKeyMapInput interface {
	pulumi.Input

	ToKeyManagerKeyMapOutput() KeyManagerKeyMapOutput
	ToKeyManagerKeyMapOutputWithContext(context.Context) KeyManagerKeyMapOutput
}

type KeyManagerKeyMap map[string]KeyManagerKeyInput

func (KeyManagerKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyManagerKey)(nil)).Elem()
}

func (i KeyManagerKeyMap) ToKeyManagerKeyMapOutput() KeyManagerKeyMapOutput {
	return i.ToKeyManagerKeyMapOutputWithContext(context.Background())
}

func (i KeyManagerKeyMap) ToKeyManagerKeyMapOutputWithContext(ctx context.Context) KeyManagerKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyManagerKeyMapOutput)
}

type KeyManagerKeyOutput struct{ *pulumi.OutputState }

func (KeyManagerKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyManagerKey)(nil)).Elem()
}

func (o KeyManagerKeyOutput) ToKeyManagerKeyOutput() KeyManagerKeyOutput {
	return o
}

func (o KeyManagerKeyOutput) ToKeyManagerKeyOutputWithContext(ctx context.Context) KeyManagerKeyOutput {
	return o
}

// – The cryptographic algorithm to use. Valid values depend on the `usage`:
// - For `symmetricEncryption`:
func (o KeyManagerKeyOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyManagerKey) pulumi.StringOutput { return v.Algorithm }).(pulumi.StringOutput)
}

// The date and time when the key was created.
func (o KeyManagerKeyOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyManagerKey) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// – A description for the key.
func (o KeyManagerKeyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyManagerKey) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the key is locked.
func (o KeyManagerKeyOutput) Locked() pulumi.BoolOutput {
	return o.ApplyT(func(v *KeyManagerKey) pulumi.BoolOutput { return v.Locked }).(pulumi.BoolOutput)
}

// The name of the key.
func (o KeyManagerKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyManagerKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// – The origin of the key. Valid values are:
func (o KeyManagerKeyOutput) Origin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyManagerKey) pulumi.StringPtrOutput { return v.Origin }).(pulumi.StringPtrOutput)
}

// – The ID of the project the key belongs to.
//
// **Key Usage and Algorithm (both required):**
func (o KeyManagerKeyOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyManagerKey) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Whether the key is protected from deletion.
func (o KeyManagerKeyOutput) Protected() pulumi.BoolOutput {
	return o.ApplyT(func(v *KeyManagerKey) pulumi.BoolOutput { return v.Protected }).(pulumi.BoolOutput)
}

// The region in which to create the key (e.g., `fr-par`).
func (o KeyManagerKeyOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyManagerKey) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// The date and time when the key was last rotated.
func (o KeyManagerKeyOutput) RotatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyManagerKey) pulumi.StringOutput { return v.RotatedAt }).(pulumi.StringOutput)
}

// The number of times the key has been rotated.
func (o KeyManagerKeyOutput) RotationCount() pulumi.IntOutput {
	return o.ApplyT(func(v *KeyManagerKey) pulumi.IntOutput { return v.RotationCount }).(pulumi.IntOutput)
}

// – Rotation policy for the key:
func (o KeyManagerKeyOutput) RotationPolicy() KeyManagerKeyRotationPolicyPtrOutput {
	return o.ApplyT(func(v *KeyManagerKey) KeyManagerKeyRotationPolicyPtrOutput { return v.RotationPolicy }).(KeyManagerKeyRotationPolicyPtrOutput)
}

// The state of the key (e.g., `enabled`).
func (o KeyManagerKeyOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyManagerKey) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// – A list of tags to assign to the key.
func (o KeyManagerKeyOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KeyManagerKey) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// – If `true`, the key can be deleted. Defaults to `false` (protected).
func (o KeyManagerKeyOutput) Unprotected() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyManagerKey) pulumi.BoolPtrOutput { return v.Unprotected }).(pulumi.BoolPtrOutput)
}

// The date and time when the key was last updated.
func (o KeyManagerKeyOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyManagerKey) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// – The usage type of the key. Valid values:
func (o KeyManagerKeyOutput) Usage() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyManagerKey) pulumi.StringOutput { return v.Usage }).(pulumi.StringOutput)
}

type KeyManagerKeyArrayOutput struct{ *pulumi.OutputState }

func (KeyManagerKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyManagerKey)(nil)).Elem()
}

func (o KeyManagerKeyArrayOutput) ToKeyManagerKeyArrayOutput() KeyManagerKeyArrayOutput {
	return o
}

func (o KeyManagerKeyArrayOutput) ToKeyManagerKeyArrayOutputWithContext(ctx context.Context) KeyManagerKeyArrayOutput {
	return o
}

func (o KeyManagerKeyArrayOutput) Index(i pulumi.IntInput) KeyManagerKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KeyManagerKey {
		return vs[0].([]*KeyManagerKey)[vs[1].(int)]
	}).(KeyManagerKeyOutput)
}

type KeyManagerKeyMapOutput struct{ *pulumi.OutputState }

func (KeyManagerKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyManagerKey)(nil)).Elem()
}

func (o KeyManagerKeyMapOutput) ToKeyManagerKeyMapOutput() KeyManagerKeyMapOutput {
	return o
}

func (o KeyManagerKeyMapOutput) ToKeyManagerKeyMapOutputWithContext(ctx context.Context) KeyManagerKeyMapOutput {
	return o
}

func (o KeyManagerKeyMapOutput) MapIndex(k pulumi.StringInput) KeyManagerKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KeyManagerKey {
		return vs[0].(map[string]*KeyManagerKey)[vs[1].(string)]
	}).(KeyManagerKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyManagerKeyInput)(nil)).Elem(), &KeyManagerKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyManagerKeyArrayInput)(nil)).Elem(), KeyManagerKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyManagerKeyMapInput)(nil)).Elem(), KeyManagerKeyMap{})
	pulumi.RegisterOutputType(KeyManagerKeyOutput{})
	pulumi.RegisterOutputType(KeyManagerKeyArrayOutput{})
	pulumi.RegisterOutputType(KeyManagerKeyMapOutput{})
}
