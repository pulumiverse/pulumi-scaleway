// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kubernetes

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Gets information about a Kubernetes Cluster's Pool.
func LookupPool(ctx *pulumi.Context, args *LookupPoolArgs, opts ...pulumi.InvokeOption) (*LookupPoolResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPoolResult
	err := ctx.Invoke("scaleway:kubernetes/getPool:getPool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPool.
type LookupPoolArgs struct {
	// The cluster ID. Required when `name` is set.
	ClusterId *string `pulumi:"clusterId"`
	// The pool name. Only one of `name` and `poolId` should be specified. `clusterId` should be specified with `name`.
	Name *string `pulumi:"name"`
	// The pool's ID. Only one of `name` and `poolId` should be specified.
	PoolId *string `pulumi:"poolId"`
	// `region`) The region in which the pool exists.
	Region *string `pulumi:"region"`
	// The size of the pool.
	Size *int `pulumi:"size"`
}

// A collection of values returned by getPool.
type LookupPoolResult struct {
	// True if the autohealing feature is enabled for this pool.
	Autohealing bool `pulumi:"autohealing"`
	// True if the autoscaling feature is enabled for this pool.
	Autoscaling bool    `pulumi:"autoscaling"`
	ClusterId   *string `pulumi:"clusterId"`
	// The container runtime of the pool.
	ContainerRuntime string `pulumi:"containerRuntime"`
	// The creation date of the pool.
	CreatedAt   string `pulumi:"createdAt"`
	CurrentSize int    `pulumi:"currentSize"`
	// The provider-assigned unique ID for this managed resource.
	Id          string            `pulumi:"id"`
	KubeletArgs map[string]string `pulumi:"kubeletArgs"`
	// The maximum size of the pool, used by the autoscaling feature.
	MaxSize int `pulumi:"maxSize"`
	// The minimum size of the pool, used by the autoscaling feature.
	MinSize int `pulumi:"minSize"`
	// The name of the node.
	Name *string `pulumi:"name"`
	// The commercial type of the pool instances.
	NodeType string `pulumi:"nodeType"`
	// (List of) The nodes in the default pool.
	Nodes []GetPoolNode `pulumi:"nodes"`
	// [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool are attached to.
	PlacementGroupId   string  `pulumi:"placementGroupId"`
	PoolId             *string `pulumi:"poolId"`
	PublicIpDisabled   bool    `pulumi:"publicIpDisabled"`
	Region             *string `pulumi:"region"`
	RootVolumeSizeInGb int     `pulumi:"rootVolumeSizeInGb"`
	RootVolumeType     string  `pulumi:"rootVolumeType"`
	// The size of the pool.
	Size *int `pulumi:"size"`
	// The status of the node.
	Status string `pulumi:"status"`
	// The tags associated with the pool.
	Tags []string `pulumi:"tags"`
	// The last update date of the pool.
	UpdatedAt       string                 `pulumi:"updatedAt"`
	UpgradePolicies []GetPoolUpgradePolicy `pulumi:"upgradePolicies"`
	// The version of the pool.
	Version          string `pulumi:"version"`
	WaitForPoolReady bool   `pulumi:"waitForPoolReady"`
	Zone             string `pulumi:"zone"`
}

func LookupPoolOutput(ctx *pulumi.Context, args LookupPoolOutputArgs, opts ...pulumi.InvokeOption) LookupPoolResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPoolResultOutput, error) {
			args := v.(LookupPoolArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("scaleway:kubernetes/getPool:getPool", args, LookupPoolResultOutput{}, options).(LookupPoolResultOutput), nil
		}).(LookupPoolResultOutput)
}

// A collection of arguments for invoking getPool.
type LookupPoolOutputArgs struct {
	// The cluster ID. Required when `name` is set.
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
	// The pool name. Only one of `name` and `poolId` should be specified. `clusterId` should be specified with `name`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The pool's ID. Only one of `name` and `poolId` should be specified.
	PoolId pulumi.StringPtrInput `pulumi:"poolId"`
	// `region`) The region in which the pool exists.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The size of the pool.
	Size pulumi.IntPtrInput `pulumi:"size"`
}

func (LookupPoolOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPoolArgs)(nil)).Elem()
}

// A collection of values returned by getPool.
type LookupPoolResultOutput struct{ *pulumi.OutputState }

func (LookupPoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPoolResult)(nil)).Elem()
}

func (o LookupPoolResultOutput) ToLookupPoolResultOutput() LookupPoolResultOutput {
	return o
}

func (o LookupPoolResultOutput) ToLookupPoolResultOutputWithContext(ctx context.Context) LookupPoolResultOutput {
	return o
}

// True if the autohealing feature is enabled for this pool.
func (o LookupPoolResultOutput) Autohealing() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPoolResult) bool { return v.Autohealing }).(pulumi.BoolOutput)
}

// True if the autoscaling feature is enabled for this pool.
func (o LookupPoolResultOutput) Autoscaling() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPoolResult) bool { return v.Autoscaling }).(pulumi.BoolOutput)
}

func (o LookupPoolResultOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPoolResult) *string { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// The container runtime of the pool.
func (o LookupPoolResultOutput) ContainerRuntime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPoolResult) string { return v.ContainerRuntime }).(pulumi.StringOutput)
}

// The creation date of the pool.
func (o LookupPoolResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPoolResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o LookupPoolResultOutput) CurrentSize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPoolResult) int { return v.CurrentSize }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupPoolResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPoolResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupPoolResultOutput) KubeletArgs() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupPoolResult) map[string]string { return v.KubeletArgs }).(pulumi.StringMapOutput)
}

// The maximum size of the pool, used by the autoscaling feature.
func (o LookupPoolResultOutput) MaxSize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPoolResult) int { return v.MaxSize }).(pulumi.IntOutput)
}

// The minimum size of the pool, used by the autoscaling feature.
func (o LookupPoolResultOutput) MinSize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPoolResult) int { return v.MinSize }).(pulumi.IntOutput)
}

// The name of the node.
func (o LookupPoolResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPoolResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The commercial type of the pool instances.
func (o LookupPoolResultOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPoolResult) string { return v.NodeType }).(pulumi.StringOutput)
}

// (List of) The nodes in the default pool.
func (o LookupPoolResultOutput) Nodes() GetPoolNodeArrayOutput {
	return o.ApplyT(func(v LookupPoolResult) []GetPoolNode { return v.Nodes }).(GetPoolNodeArrayOutput)
}

// [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool are attached to.
func (o LookupPoolResultOutput) PlacementGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPoolResult) string { return v.PlacementGroupId }).(pulumi.StringOutput)
}

func (o LookupPoolResultOutput) PoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPoolResult) *string { return v.PoolId }).(pulumi.StringPtrOutput)
}

func (o LookupPoolResultOutput) PublicIpDisabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPoolResult) bool { return v.PublicIpDisabled }).(pulumi.BoolOutput)
}

func (o LookupPoolResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPoolResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func (o LookupPoolResultOutput) RootVolumeSizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPoolResult) int { return v.RootVolumeSizeInGb }).(pulumi.IntOutput)
}

func (o LookupPoolResultOutput) RootVolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPoolResult) string { return v.RootVolumeType }).(pulumi.StringOutput)
}

// The size of the pool.
func (o LookupPoolResultOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupPoolResult) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// The status of the node.
func (o LookupPoolResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPoolResult) string { return v.Status }).(pulumi.StringOutput)
}

// The tags associated with the pool.
func (o LookupPoolResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPoolResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The last update date of the pool.
func (o LookupPoolResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPoolResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func (o LookupPoolResultOutput) UpgradePolicies() GetPoolUpgradePolicyArrayOutput {
	return o.ApplyT(func(v LookupPoolResult) []GetPoolUpgradePolicy { return v.UpgradePolicies }).(GetPoolUpgradePolicyArrayOutput)
}

// The version of the pool.
func (o LookupPoolResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPoolResult) string { return v.Version }).(pulumi.StringOutput)
}

func (o LookupPoolResultOutput) WaitForPoolReady() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPoolResult) bool { return v.WaitForPoolReady }).(pulumi.BoolOutput)
}

func (o LookupPoolResultOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPoolResult) string { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPoolResultOutput{})
}
