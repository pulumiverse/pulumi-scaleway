// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// ## Import
//
// Kubernetes pools can be imported using the `{region}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/kubernetesNodePool:KubernetesNodePool mypool fr-par/11111111-1111-1111-1111-111111111111
// ```
//
// Deprecated: scaleway.index/kubernetesnodepool.KubernetesNodePool has been deprecated in favor of scaleway.kubernetes/pool.Pool
type KubernetesNodePool struct {
	pulumi.CustomResourceState

	// Enables the autohealing feature for this pool.
	Autohealing pulumi.BoolPtrOutput `pulumi:"autohealing"`
	// Enables the autoscaling feature for this pool.
	//
	// > **Important:** When enabled, an update of the `size` will not be taken into account.
	Autoscaling pulumi.BoolPtrOutput `pulumi:"autoscaling"`
	// The ID of the Kubernetes cluster on which this pool will be created.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The container runtime of the pool.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	ContainerRuntime pulumi.StringPtrOutput `pulumi:"containerRuntime"`
	// The creation date of the pool.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The actual size of the pool
	CurrentSize pulumi.IntOutput `pulumi:"currentSize"`
	// The Kubelet arguments to be used by this pool
	KubeletArgs pulumi.StringMapOutput `pulumi:"kubeletArgs"`
	// The maximum size of the pool, used by the autoscaling feature.
	MaxSize pulumi.IntOutput `pulumi:"maxSize"`
	// The minimum size of the pool, used by the autoscaling feature.
	MinSize pulumi.IntPtrOutput `pulumi:"minSize"`
	// The name for the pool.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The commercial type of the pool instances. Instances with insufficient memory are not eligible (DEV1-S, PLAY2-PICO, STARDUST). `external` is a special node type used to provision from other Cloud providers.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	NodeType pulumi.StringOutput `pulumi:"nodeType"`
	// (List of) The nodes in the default pool.
	Nodes KubernetesNodePoolNodeArrayOutput `pulumi:"nodes"`
	// The [placement group](https://www.scaleway.com/en/developers/api/instance/#path-placement-groups-create-a-placement-group) the nodes of the pool will be attached to.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	PlacementGroupId pulumi.StringPtrOutput `pulumi:"placementGroupId"`
	// Defines if the public IP should be removed from Nodes. To use this feature, your Cluster must have an attached Private Network set up with a Public Gateway.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	PublicIpDisabled pulumi.BoolPtrOutput `pulumi:"publicIpDisabled"`
	// `region`) The region in which the pool should be created.
	Region pulumi.StringOutput `pulumi:"region"`
	// The size of the system volume of the nodes in gigabyte
	RootVolumeSizeInGb pulumi.IntOutput `pulumi:"rootVolumeSizeInGb"`
	// System volume type of the nodes composing the pool
	RootVolumeType pulumi.StringOutput `pulumi:"rootVolumeType"`
	// The size of the pool.
	//
	// > **Important:** This field will only be used at creation if autoscaling is enabled.
	Size pulumi.IntOutput `pulumi:"size"`
	// The status of the node.
	Status pulumi.StringOutput `pulumi:"status"`
	// The tags associated with the pool.
	//
	// > Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (e.g.: `"taint=taintName=taintValue:Effect"`)
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The last update date of the pool.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The Pool upgrade policy
	UpgradePolicy KubernetesNodePoolUpgradePolicyOutput `pulumi:"upgradePolicy"`
	// The version of the pool.
	Version pulumi.StringOutput `pulumi:"version"`
	// Whether to wait for the pool to be ready.
	WaitForPoolReady pulumi.BoolPtrOutput `pulumi:"waitForPoolReady"`
	// `zone`) The zone in which the pool should be created.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewKubernetesNodePool registers a new resource with the given unique name, arguments, and options.
func NewKubernetesNodePool(ctx *pulumi.Context,
	name string, args *KubernetesNodePoolArgs, opts ...pulumi.ResourceOption) (*KubernetesNodePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.NodeType == nil {
		return nil, errors.New("invalid value for required argument 'NodeType'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KubernetesNodePool
	err := ctx.RegisterResource("scaleway:index/kubernetesNodePool:KubernetesNodePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKubernetesNodePool gets an existing KubernetesNodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKubernetesNodePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KubernetesNodePoolState, opts ...pulumi.ResourceOption) (*KubernetesNodePool, error) {
	var resource KubernetesNodePool
	err := ctx.ReadResource("scaleway:index/kubernetesNodePool:KubernetesNodePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KubernetesNodePool resources.
type kubernetesNodePoolState struct {
	// Enables the autohealing feature for this pool.
	Autohealing *bool `pulumi:"autohealing"`
	// Enables the autoscaling feature for this pool.
	//
	// > **Important:** When enabled, an update of the `size` will not be taken into account.
	Autoscaling *bool `pulumi:"autoscaling"`
	// The ID of the Kubernetes cluster on which this pool will be created.
	ClusterId *string `pulumi:"clusterId"`
	// The container runtime of the pool.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	ContainerRuntime *string `pulumi:"containerRuntime"`
	// The creation date of the pool.
	CreatedAt *string `pulumi:"createdAt"`
	// The actual size of the pool
	CurrentSize *int `pulumi:"currentSize"`
	// The Kubelet arguments to be used by this pool
	KubeletArgs map[string]string `pulumi:"kubeletArgs"`
	// The maximum size of the pool, used by the autoscaling feature.
	MaxSize *int `pulumi:"maxSize"`
	// The minimum size of the pool, used by the autoscaling feature.
	MinSize *int `pulumi:"minSize"`
	// The name for the pool.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	Name *string `pulumi:"name"`
	// The commercial type of the pool instances. Instances with insufficient memory are not eligible (DEV1-S, PLAY2-PICO, STARDUST). `external` is a special node type used to provision from other Cloud providers.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	NodeType *string `pulumi:"nodeType"`
	// (List of) The nodes in the default pool.
	Nodes []KubernetesNodePoolNode `pulumi:"nodes"`
	// The [placement group](https://www.scaleway.com/en/developers/api/instance/#path-placement-groups-create-a-placement-group) the nodes of the pool will be attached to.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	PlacementGroupId *string `pulumi:"placementGroupId"`
	// Defines if the public IP should be removed from Nodes. To use this feature, your Cluster must have an attached Private Network set up with a Public Gateway.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	PublicIpDisabled *bool `pulumi:"publicIpDisabled"`
	// `region`) The region in which the pool should be created.
	Region *string `pulumi:"region"`
	// The size of the system volume of the nodes in gigabyte
	RootVolumeSizeInGb *int `pulumi:"rootVolumeSizeInGb"`
	// System volume type of the nodes composing the pool
	RootVolumeType *string `pulumi:"rootVolumeType"`
	// The size of the pool.
	//
	// > **Important:** This field will only be used at creation if autoscaling is enabled.
	Size *int `pulumi:"size"`
	// The status of the node.
	Status *string `pulumi:"status"`
	// The tags associated with the pool.
	//
	// > Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (e.g.: `"taint=taintName=taintValue:Effect"`)
	Tags []string `pulumi:"tags"`
	// The last update date of the pool.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The Pool upgrade policy
	UpgradePolicy *KubernetesNodePoolUpgradePolicy `pulumi:"upgradePolicy"`
	// The version of the pool.
	Version *string `pulumi:"version"`
	// Whether to wait for the pool to be ready.
	WaitForPoolReady *bool `pulumi:"waitForPoolReady"`
	// `zone`) The zone in which the pool should be created.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	Zone *string `pulumi:"zone"`
}

type KubernetesNodePoolState struct {
	// Enables the autohealing feature for this pool.
	Autohealing pulumi.BoolPtrInput
	// Enables the autoscaling feature for this pool.
	//
	// > **Important:** When enabled, an update of the `size` will not be taken into account.
	Autoscaling pulumi.BoolPtrInput
	// The ID of the Kubernetes cluster on which this pool will be created.
	ClusterId pulumi.StringPtrInput
	// The container runtime of the pool.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	ContainerRuntime pulumi.StringPtrInput
	// The creation date of the pool.
	CreatedAt pulumi.StringPtrInput
	// The actual size of the pool
	CurrentSize pulumi.IntPtrInput
	// The Kubelet arguments to be used by this pool
	KubeletArgs pulumi.StringMapInput
	// The maximum size of the pool, used by the autoscaling feature.
	MaxSize pulumi.IntPtrInput
	// The minimum size of the pool, used by the autoscaling feature.
	MinSize pulumi.IntPtrInput
	// The name for the pool.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	Name pulumi.StringPtrInput
	// The commercial type of the pool instances. Instances with insufficient memory are not eligible (DEV1-S, PLAY2-PICO, STARDUST). `external` is a special node type used to provision from other Cloud providers.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	NodeType pulumi.StringPtrInput
	// (List of) The nodes in the default pool.
	Nodes KubernetesNodePoolNodeArrayInput
	// The [placement group](https://www.scaleway.com/en/developers/api/instance/#path-placement-groups-create-a-placement-group) the nodes of the pool will be attached to.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	PlacementGroupId pulumi.StringPtrInput
	// Defines if the public IP should be removed from Nodes. To use this feature, your Cluster must have an attached Private Network set up with a Public Gateway.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	PublicIpDisabled pulumi.BoolPtrInput
	// `region`) The region in which the pool should be created.
	Region pulumi.StringPtrInput
	// The size of the system volume of the nodes in gigabyte
	RootVolumeSizeInGb pulumi.IntPtrInput
	// System volume type of the nodes composing the pool
	RootVolumeType pulumi.StringPtrInput
	// The size of the pool.
	//
	// > **Important:** This field will only be used at creation if autoscaling is enabled.
	Size pulumi.IntPtrInput
	// The status of the node.
	Status pulumi.StringPtrInput
	// The tags associated with the pool.
	//
	// > Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (e.g.: `"taint=taintName=taintValue:Effect"`)
	Tags pulumi.StringArrayInput
	// The last update date of the pool.
	UpdatedAt pulumi.StringPtrInput
	// The Pool upgrade policy
	UpgradePolicy KubernetesNodePoolUpgradePolicyPtrInput
	// The version of the pool.
	Version pulumi.StringPtrInput
	// Whether to wait for the pool to be ready.
	WaitForPoolReady pulumi.BoolPtrInput
	// `zone`) The zone in which the pool should be created.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	Zone pulumi.StringPtrInput
}

func (KubernetesNodePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesNodePoolState)(nil)).Elem()
}

type kubernetesNodePoolArgs struct {
	// Enables the autohealing feature for this pool.
	Autohealing *bool `pulumi:"autohealing"`
	// Enables the autoscaling feature for this pool.
	//
	// > **Important:** When enabled, an update of the `size` will not be taken into account.
	Autoscaling *bool `pulumi:"autoscaling"`
	// The ID of the Kubernetes cluster on which this pool will be created.
	ClusterId string `pulumi:"clusterId"`
	// The container runtime of the pool.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	ContainerRuntime *string `pulumi:"containerRuntime"`
	// The Kubelet arguments to be used by this pool
	KubeletArgs map[string]string `pulumi:"kubeletArgs"`
	// The maximum size of the pool, used by the autoscaling feature.
	MaxSize *int `pulumi:"maxSize"`
	// The minimum size of the pool, used by the autoscaling feature.
	MinSize *int `pulumi:"minSize"`
	// The name for the pool.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	Name *string `pulumi:"name"`
	// The commercial type of the pool instances. Instances with insufficient memory are not eligible (DEV1-S, PLAY2-PICO, STARDUST). `external` is a special node type used to provision from other Cloud providers.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	NodeType string `pulumi:"nodeType"`
	// The [placement group](https://www.scaleway.com/en/developers/api/instance/#path-placement-groups-create-a-placement-group) the nodes of the pool will be attached to.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	PlacementGroupId *string `pulumi:"placementGroupId"`
	// Defines if the public IP should be removed from Nodes. To use this feature, your Cluster must have an attached Private Network set up with a Public Gateway.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	PublicIpDisabled *bool `pulumi:"publicIpDisabled"`
	// `region`) The region in which the pool should be created.
	Region *string `pulumi:"region"`
	// The size of the system volume of the nodes in gigabyte
	RootVolumeSizeInGb *int `pulumi:"rootVolumeSizeInGb"`
	// System volume type of the nodes composing the pool
	RootVolumeType *string `pulumi:"rootVolumeType"`
	// The size of the pool.
	//
	// > **Important:** This field will only be used at creation if autoscaling is enabled.
	Size int `pulumi:"size"`
	// The tags associated with the pool.
	//
	// > Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (e.g.: `"taint=taintName=taintValue:Effect"`)
	Tags []string `pulumi:"tags"`
	// The Pool upgrade policy
	UpgradePolicy *KubernetesNodePoolUpgradePolicy `pulumi:"upgradePolicy"`
	// Whether to wait for the pool to be ready.
	WaitForPoolReady *bool `pulumi:"waitForPoolReady"`
	// `zone`) The zone in which the pool should be created.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a KubernetesNodePool resource.
type KubernetesNodePoolArgs struct {
	// Enables the autohealing feature for this pool.
	Autohealing pulumi.BoolPtrInput
	// Enables the autoscaling feature for this pool.
	//
	// > **Important:** When enabled, an update of the `size` will not be taken into account.
	Autoscaling pulumi.BoolPtrInput
	// The ID of the Kubernetes cluster on which this pool will be created.
	ClusterId pulumi.StringInput
	// The container runtime of the pool.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	ContainerRuntime pulumi.StringPtrInput
	// The Kubelet arguments to be used by this pool
	KubeletArgs pulumi.StringMapInput
	// The maximum size of the pool, used by the autoscaling feature.
	MaxSize pulumi.IntPtrInput
	// The minimum size of the pool, used by the autoscaling feature.
	MinSize pulumi.IntPtrInput
	// The name for the pool.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	Name pulumi.StringPtrInput
	// The commercial type of the pool instances. Instances with insufficient memory are not eligible (DEV1-S, PLAY2-PICO, STARDUST). `external` is a special node type used to provision from other Cloud providers.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	NodeType pulumi.StringInput
	// The [placement group](https://www.scaleway.com/en/developers/api/instance/#path-placement-groups-create-a-placement-group) the nodes of the pool will be attached to.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	PlacementGroupId pulumi.StringPtrInput
	// Defines if the public IP should be removed from Nodes. To use this feature, your Cluster must have an attached Private Network set up with a Public Gateway.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	PublicIpDisabled pulumi.BoolPtrInput
	// `region`) The region in which the pool should be created.
	Region pulumi.StringPtrInput
	// The size of the system volume of the nodes in gigabyte
	RootVolumeSizeInGb pulumi.IntPtrInput
	// System volume type of the nodes composing the pool
	RootVolumeType pulumi.StringPtrInput
	// The size of the pool.
	//
	// > **Important:** This field will only be used at creation if autoscaling is enabled.
	Size pulumi.IntInput
	// The tags associated with the pool.
	//
	// > Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (e.g.: `"taint=taintName=taintValue:Effect"`)
	Tags pulumi.StringArrayInput
	// The Pool upgrade policy
	UpgradePolicy KubernetesNodePoolUpgradePolicyPtrInput
	// Whether to wait for the pool to be ready.
	WaitForPoolReady pulumi.BoolPtrInput
	// `zone`) The zone in which the pool should be created.
	//
	// > **Important:** Updates to this field will recreate a new resource.
	Zone pulumi.StringPtrInput
}

func (KubernetesNodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesNodePoolArgs)(nil)).Elem()
}

type KubernetesNodePoolInput interface {
	pulumi.Input

	ToKubernetesNodePoolOutput() KubernetesNodePoolOutput
	ToKubernetesNodePoolOutputWithContext(ctx context.Context) KubernetesNodePoolOutput
}

func (*KubernetesNodePool) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesNodePool)(nil)).Elem()
}

func (i *KubernetesNodePool) ToKubernetesNodePoolOutput() KubernetesNodePoolOutput {
	return i.ToKubernetesNodePoolOutputWithContext(context.Background())
}

func (i *KubernetesNodePool) ToKubernetesNodePoolOutputWithContext(ctx context.Context) KubernetesNodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesNodePoolOutput)
}

// KubernetesNodePoolArrayInput is an input type that accepts KubernetesNodePoolArray and KubernetesNodePoolArrayOutput values.
// You can construct a concrete instance of `KubernetesNodePoolArrayInput` via:
//
//	KubernetesNodePoolArray{ KubernetesNodePoolArgs{...} }
type KubernetesNodePoolArrayInput interface {
	pulumi.Input

	ToKubernetesNodePoolArrayOutput() KubernetesNodePoolArrayOutput
	ToKubernetesNodePoolArrayOutputWithContext(context.Context) KubernetesNodePoolArrayOutput
}

type KubernetesNodePoolArray []KubernetesNodePoolInput

func (KubernetesNodePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KubernetesNodePool)(nil)).Elem()
}

func (i KubernetesNodePoolArray) ToKubernetesNodePoolArrayOutput() KubernetesNodePoolArrayOutput {
	return i.ToKubernetesNodePoolArrayOutputWithContext(context.Background())
}

func (i KubernetesNodePoolArray) ToKubernetesNodePoolArrayOutputWithContext(ctx context.Context) KubernetesNodePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesNodePoolArrayOutput)
}

// KubernetesNodePoolMapInput is an input type that accepts KubernetesNodePoolMap and KubernetesNodePoolMapOutput values.
// You can construct a concrete instance of `KubernetesNodePoolMapInput` via:
//
//	KubernetesNodePoolMap{ "key": KubernetesNodePoolArgs{...} }
type KubernetesNodePoolMapInput interface {
	pulumi.Input

	ToKubernetesNodePoolMapOutput() KubernetesNodePoolMapOutput
	ToKubernetesNodePoolMapOutputWithContext(context.Context) KubernetesNodePoolMapOutput
}

type KubernetesNodePoolMap map[string]KubernetesNodePoolInput

func (KubernetesNodePoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KubernetesNodePool)(nil)).Elem()
}

func (i KubernetesNodePoolMap) ToKubernetesNodePoolMapOutput() KubernetesNodePoolMapOutput {
	return i.ToKubernetesNodePoolMapOutputWithContext(context.Background())
}

func (i KubernetesNodePoolMap) ToKubernetesNodePoolMapOutputWithContext(ctx context.Context) KubernetesNodePoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesNodePoolMapOutput)
}

type KubernetesNodePoolOutput struct{ *pulumi.OutputState }

func (KubernetesNodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesNodePool)(nil)).Elem()
}

func (o KubernetesNodePoolOutput) ToKubernetesNodePoolOutput() KubernetesNodePoolOutput {
	return o
}

func (o KubernetesNodePoolOutput) ToKubernetesNodePoolOutputWithContext(ctx context.Context) KubernetesNodePoolOutput {
	return o
}

// Enables the autohealing feature for this pool.
func (o KubernetesNodePoolOutput) Autohealing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.BoolPtrOutput { return v.Autohealing }).(pulumi.BoolPtrOutput)
}

// Enables the autoscaling feature for this pool.
//
// > **Important:** When enabled, an update of the `size` will not be taken into account.
func (o KubernetesNodePoolOutput) Autoscaling() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.BoolPtrOutput { return v.Autoscaling }).(pulumi.BoolPtrOutput)
}

// The ID of the Kubernetes cluster on which this pool will be created.
func (o KubernetesNodePoolOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The container runtime of the pool.
//
// > **Important:** Updates to this field will recreate a new resource.
func (o KubernetesNodePoolOutput) ContainerRuntime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringPtrOutput { return v.ContainerRuntime }).(pulumi.StringPtrOutput)
}

// The creation date of the pool.
func (o KubernetesNodePoolOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The actual size of the pool
func (o KubernetesNodePoolOutput) CurrentSize() pulumi.IntOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.IntOutput { return v.CurrentSize }).(pulumi.IntOutput)
}

// The Kubelet arguments to be used by this pool
func (o KubernetesNodePoolOutput) KubeletArgs() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringMapOutput { return v.KubeletArgs }).(pulumi.StringMapOutput)
}

// The maximum size of the pool, used by the autoscaling feature.
func (o KubernetesNodePoolOutput) MaxSize() pulumi.IntOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.IntOutput { return v.MaxSize }).(pulumi.IntOutput)
}

// The minimum size of the pool, used by the autoscaling feature.
func (o KubernetesNodePoolOutput) MinSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.IntPtrOutput { return v.MinSize }).(pulumi.IntPtrOutput)
}

// The name for the pool.
//
// > **Important:** Updates to this field will recreate a new resource.
func (o KubernetesNodePoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The commercial type of the pool instances. Instances with insufficient memory are not eligible (DEV1-S, PLAY2-PICO, STARDUST). `external` is a special node type used to provision from other Cloud providers.
//
// > **Important:** Updates to this field will recreate a new resource.
func (o KubernetesNodePoolOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringOutput { return v.NodeType }).(pulumi.StringOutput)
}

// (List of) The nodes in the default pool.
func (o KubernetesNodePoolOutput) Nodes() KubernetesNodePoolNodeArrayOutput {
	return o.ApplyT(func(v *KubernetesNodePool) KubernetesNodePoolNodeArrayOutput { return v.Nodes }).(KubernetesNodePoolNodeArrayOutput)
}

// The [placement group](https://www.scaleway.com/en/developers/api/instance/#path-placement-groups-create-a-placement-group) the nodes of the pool will be attached to.
//
// > **Important:** Updates to this field will recreate a new resource.
func (o KubernetesNodePoolOutput) PlacementGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringPtrOutput { return v.PlacementGroupId }).(pulumi.StringPtrOutput)
}

// Defines if the public IP should be removed from Nodes. To use this feature, your Cluster must have an attached Private Network set up with a Public Gateway.
//
// > **Important:** Updates to this field will recreate a new resource.
func (o KubernetesNodePoolOutput) PublicIpDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.BoolPtrOutput { return v.PublicIpDisabled }).(pulumi.BoolPtrOutput)
}

// `region`) The region in which the pool should be created.
func (o KubernetesNodePoolOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The size of the system volume of the nodes in gigabyte
func (o KubernetesNodePoolOutput) RootVolumeSizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.IntOutput { return v.RootVolumeSizeInGb }).(pulumi.IntOutput)
}

// System volume type of the nodes composing the pool
func (o KubernetesNodePoolOutput) RootVolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringOutput { return v.RootVolumeType }).(pulumi.StringOutput)
}

// The size of the pool.
//
// > **Important:** This field will only be used at creation if autoscaling is enabled.
func (o KubernetesNodePoolOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// The status of the node.
func (o KubernetesNodePoolOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The tags associated with the pool.
//
// > Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (e.g.: `"taint=taintName=taintValue:Effect"`)
func (o KubernetesNodePoolOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The last update date of the pool.
func (o KubernetesNodePoolOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The Pool upgrade policy
func (o KubernetesNodePoolOutput) UpgradePolicy() KubernetesNodePoolUpgradePolicyOutput {
	return o.ApplyT(func(v *KubernetesNodePool) KubernetesNodePoolUpgradePolicyOutput { return v.UpgradePolicy }).(KubernetesNodePoolUpgradePolicyOutput)
}

// The version of the pool.
func (o KubernetesNodePoolOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// Whether to wait for the pool to be ready.
func (o KubernetesNodePoolOutput) WaitForPoolReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.BoolPtrOutput { return v.WaitForPoolReady }).(pulumi.BoolPtrOutput)
}

// `zone`) The zone in which the pool should be created.
//
// > **Important:** Updates to this field will recreate a new resource.
func (o KubernetesNodePoolOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodePool) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type KubernetesNodePoolArrayOutput struct{ *pulumi.OutputState }

func (KubernetesNodePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KubernetesNodePool)(nil)).Elem()
}

func (o KubernetesNodePoolArrayOutput) ToKubernetesNodePoolArrayOutput() KubernetesNodePoolArrayOutput {
	return o
}

func (o KubernetesNodePoolArrayOutput) ToKubernetesNodePoolArrayOutputWithContext(ctx context.Context) KubernetesNodePoolArrayOutput {
	return o
}

func (o KubernetesNodePoolArrayOutput) Index(i pulumi.IntInput) KubernetesNodePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KubernetesNodePool {
		return vs[0].([]*KubernetesNodePool)[vs[1].(int)]
	}).(KubernetesNodePoolOutput)
}

type KubernetesNodePoolMapOutput struct{ *pulumi.OutputState }

func (KubernetesNodePoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KubernetesNodePool)(nil)).Elem()
}

func (o KubernetesNodePoolMapOutput) ToKubernetesNodePoolMapOutput() KubernetesNodePoolMapOutput {
	return o
}

func (o KubernetesNodePoolMapOutput) ToKubernetesNodePoolMapOutputWithContext(ctx context.Context) KubernetesNodePoolMapOutput {
	return o
}

func (o KubernetesNodePoolMapOutput) MapIndex(k pulumi.StringInput) KubernetesNodePoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KubernetesNodePool {
		return vs[0].(map[string]*KubernetesNodePool)[vs[1].(string)]
	}).(KubernetesNodePoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesNodePoolInput)(nil)).Elem(), &KubernetesNodePool{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesNodePoolArrayInput)(nil)).Elem(), KubernetesNodePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesNodePoolMapInput)(nil)).Elem(), KubernetesNodePoolMap{})
	pulumi.RegisterOutputType(KubernetesNodePoolOutput{})
	pulumi.RegisterOutputType(KubernetesNodePoolArrayOutput{})
	pulumi.RegisterOutputType(KubernetesNodePoolMapOutput{})
}
