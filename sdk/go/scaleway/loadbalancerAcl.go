// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Load-Balancer ACLs. For more information, see [the documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-acls).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewLoadbalancerAcl(ctx, "acl01", &scaleway.LoadbalancerAclArgs{
//				FrontendId:  pulumi.Any(scaleway_lb_frontend.Frt01.Id),
//				Description: pulumi.String("Exclude well-known IPs"),
//				Index:       pulumi.Int(0),
//				Action: &scaleway.LoadbalancerAclActionArgs{
//					Type: pulumi.String("allow"),
//				},
//				Match: &scaleway.LoadbalancerAclMatchArgs{
//					IpSubnets: pulumi.StringArray{
//						pulumi.String("192.168.0.1"),
//						pulumi.String("192.168.0.2"),
//						pulumi.String("192.168.10.0/24"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Load-Balancer ACL can be imported using the `{zone}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/loadbalancerAcl:LoadbalancerAcl acl01 fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type LoadbalancerAcl struct {
	pulumi.CustomResourceState

	// Action to undertake when an ACL filter matches.
	Action LoadbalancerAclActionOutput `pulumi:"action"`
	// Date and time of ACL's creation (RFC 3339 format)
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The ACL description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The load-balancer Frontend ID to attach the ACL to.
	FrontendId pulumi.StringOutput `pulumi:"frontendId"`
	// The Priority of this ACL (ACLs are applied in ascending order, 0 is the first ACL executed).
	Index pulumi.IntOutput `pulumi:"index"`
	// The ACL match rule. At least `ipSubnet` or `httpFilter` and `httpFilterValue` are required.
	Match LoadbalancerAclMatchPtrOutput `pulumi:"match"`
	// The ACL name. If not provided it will be randomly generated.
	Name pulumi.StringOutput `pulumi:"name"`
	// Date and time of ACL's update (RFC 3339 format)
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewLoadbalancerAcl registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancerAcl(ctx *pulumi.Context,
	name string, args *LoadbalancerAclArgs, opts ...pulumi.ResourceOption) (*LoadbalancerAcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.FrontendId == nil {
		return nil, errors.New("invalid value for required argument 'FrontendId'")
	}
	if args.Index == nil {
		return nil, errors.New("invalid value for required argument 'Index'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadbalancerAcl
	err := ctx.RegisterResource("scaleway:index/loadbalancerAcl:LoadbalancerAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancerAcl gets an existing LoadbalancerAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancerAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerAclState, opts ...pulumi.ResourceOption) (*LoadbalancerAcl, error) {
	var resource LoadbalancerAcl
	err := ctx.ReadResource("scaleway:index/loadbalancerAcl:LoadbalancerAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadbalancerAcl resources.
type loadbalancerAclState struct {
	// Action to undertake when an ACL filter matches.
	Action *LoadbalancerAclAction `pulumi:"action"`
	// Date and time of ACL's creation (RFC 3339 format)
	CreatedAt *string `pulumi:"createdAt"`
	// The ACL description.
	Description *string `pulumi:"description"`
	// The load-balancer Frontend ID to attach the ACL to.
	FrontendId *string `pulumi:"frontendId"`
	// The Priority of this ACL (ACLs are applied in ascending order, 0 is the first ACL executed).
	Index *int `pulumi:"index"`
	// The ACL match rule. At least `ipSubnet` or `httpFilter` and `httpFilterValue` are required.
	Match *LoadbalancerAclMatch `pulumi:"match"`
	// The ACL name. If not provided it will be randomly generated.
	Name *string `pulumi:"name"`
	// Date and time of ACL's update (RFC 3339 format)
	UpdatedAt *string `pulumi:"updatedAt"`
}

type LoadbalancerAclState struct {
	// Action to undertake when an ACL filter matches.
	Action LoadbalancerAclActionPtrInput
	// Date and time of ACL's creation (RFC 3339 format)
	CreatedAt pulumi.StringPtrInput
	// The ACL description.
	Description pulumi.StringPtrInput
	// The load-balancer Frontend ID to attach the ACL to.
	FrontendId pulumi.StringPtrInput
	// The Priority of this ACL (ACLs are applied in ascending order, 0 is the first ACL executed).
	Index pulumi.IntPtrInput
	// The ACL match rule. At least `ipSubnet` or `httpFilter` and `httpFilterValue` are required.
	Match LoadbalancerAclMatchPtrInput
	// The ACL name. If not provided it will be randomly generated.
	Name pulumi.StringPtrInput
	// Date and time of ACL's update (RFC 3339 format)
	UpdatedAt pulumi.StringPtrInput
}

func (LoadbalancerAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerAclState)(nil)).Elem()
}

type loadbalancerAclArgs struct {
	// Action to undertake when an ACL filter matches.
	Action LoadbalancerAclAction `pulumi:"action"`
	// The ACL description.
	Description *string `pulumi:"description"`
	// The load-balancer Frontend ID to attach the ACL to.
	FrontendId string `pulumi:"frontendId"`
	// The Priority of this ACL (ACLs are applied in ascending order, 0 is the first ACL executed).
	Index int `pulumi:"index"`
	// The ACL match rule. At least `ipSubnet` or `httpFilter` and `httpFilterValue` are required.
	Match *LoadbalancerAclMatch `pulumi:"match"`
	// The ACL name. If not provided it will be randomly generated.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a LoadbalancerAcl resource.
type LoadbalancerAclArgs struct {
	// Action to undertake when an ACL filter matches.
	Action LoadbalancerAclActionInput
	// The ACL description.
	Description pulumi.StringPtrInput
	// The load-balancer Frontend ID to attach the ACL to.
	FrontendId pulumi.StringInput
	// The Priority of this ACL (ACLs are applied in ascending order, 0 is the first ACL executed).
	Index pulumi.IntInput
	// The ACL match rule. At least `ipSubnet` or `httpFilter` and `httpFilterValue` are required.
	Match LoadbalancerAclMatchPtrInput
	// The ACL name. If not provided it will be randomly generated.
	Name pulumi.StringPtrInput
}

func (LoadbalancerAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerAclArgs)(nil)).Elem()
}

type LoadbalancerAclInput interface {
	pulumi.Input

	ToLoadbalancerAclOutput() LoadbalancerAclOutput
	ToLoadbalancerAclOutputWithContext(ctx context.Context) LoadbalancerAclOutput
}

func (*LoadbalancerAcl) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerAcl)(nil)).Elem()
}

func (i *LoadbalancerAcl) ToLoadbalancerAclOutput() LoadbalancerAclOutput {
	return i.ToLoadbalancerAclOutputWithContext(context.Background())
}

func (i *LoadbalancerAcl) ToLoadbalancerAclOutputWithContext(ctx context.Context) LoadbalancerAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerAclOutput)
}

// LoadbalancerAclArrayInput is an input type that accepts LoadbalancerAclArray and LoadbalancerAclArrayOutput values.
// You can construct a concrete instance of `LoadbalancerAclArrayInput` via:
//
//	LoadbalancerAclArray{ LoadbalancerAclArgs{...} }
type LoadbalancerAclArrayInput interface {
	pulumi.Input

	ToLoadbalancerAclArrayOutput() LoadbalancerAclArrayOutput
	ToLoadbalancerAclArrayOutputWithContext(context.Context) LoadbalancerAclArrayOutput
}

type LoadbalancerAclArray []LoadbalancerAclInput

func (LoadbalancerAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerAcl)(nil)).Elem()
}

func (i LoadbalancerAclArray) ToLoadbalancerAclArrayOutput() LoadbalancerAclArrayOutput {
	return i.ToLoadbalancerAclArrayOutputWithContext(context.Background())
}

func (i LoadbalancerAclArray) ToLoadbalancerAclArrayOutputWithContext(ctx context.Context) LoadbalancerAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerAclArrayOutput)
}

// LoadbalancerAclMapInput is an input type that accepts LoadbalancerAclMap and LoadbalancerAclMapOutput values.
// You can construct a concrete instance of `LoadbalancerAclMapInput` via:
//
//	LoadbalancerAclMap{ "key": LoadbalancerAclArgs{...} }
type LoadbalancerAclMapInput interface {
	pulumi.Input

	ToLoadbalancerAclMapOutput() LoadbalancerAclMapOutput
	ToLoadbalancerAclMapOutputWithContext(context.Context) LoadbalancerAclMapOutput
}

type LoadbalancerAclMap map[string]LoadbalancerAclInput

func (LoadbalancerAclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerAcl)(nil)).Elem()
}

func (i LoadbalancerAclMap) ToLoadbalancerAclMapOutput() LoadbalancerAclMapOutput {
	return i.ToLoadbalancerAclMapOutputWithContext(context.Background())
}

func (i LoadbalancerAclMap) ToLoadbalancerAclMapOutputWithContext(ctx context.Context) LoadbalancerAclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerAclMapOutput)
}

type LoadbalancerAclOutput struct{ *pulumi.OutputState }

func (LoadbalancerAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerAcl)(nil)).Elem()
}

func (o LoadbalancerAclOutput) ToLoadbalancerAclOutput() LoadbalancerAclOutput {
	return o
}

func (o LoadbalancerAclOutput) ToLoadbalancerAclOutputWithContext(ctx context.Context) LoadbalancerAclOutput {
	return o
}

// Action to undertake when an ACL filter matches.
func (o LoadbalancerAclOutput) Action() LoadbalancerAclActionOutput {
	return o.ApplyT(func(v *LoadbalancerAcl) LoadbalancerAclActionOutput { return v.Action }).(LoadbalancerAclActionOutput)
}

// Date and time of ACL's creation (RFC 3339 format)
func (o LoadbalancerAclOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerAcl) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ACL description.
func (o LoadbalancerAclOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerAcl) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The load-balancer Frontend ID to attach the ACL to.
func (o LoadbalancerAclOutput) FrontendId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerAcl) pulumi.StringOutput { return v.FrontendId }).(pulumi.StringOutput)
}

// The Priority of this ACL (ACLs are applied in ascending order, 0 is the first ACL executed).
func (o LoadbalancerAclOutput) Index() pulumi.IntOutput {
	return o.ApplyT(func(v *LoadbalancerAcl) pulumi.IntOutput { return v.Index }).(pulumi.IntOutput)
}

// The ACL match rule. At least `ipSubnet` or `httpFilter` and `httpFilterValue` are required.
func (o LoadbalancerAclOutput) Match() LoadbalancerAclMatchPtrOutput {
	return o.ApplyT(func(v *LoadbalancerAcl) LoadbalancerAclMatchPtrOutput { return v.Match }).(LoadbalancerAclMatchPtrOutput)
}

// The ACL name. If not provided it will be randomly generated.
func (o LoadbalancerAclOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerAcl) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Date and time of ACL's update (RFC 3339 format)
func (o LoadbalancerAclOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerAcl) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type LoadbalancerAclArrayOutput struct{ *pulumi.OutputState }

func (LoadbalancerAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerAcl)(nil)).Elem()
}

func (o LoadbalancerAclArrayOutput) ToLoadbalancerAclArrayOutput() LoadbalancerAclArrayOutput {
	return o
}

func (o LoadbalancerAclArrayOutput) ToLoadbalancerAclArrayOutputWithContext(ctx context.Context) LoadbalancerAclArrayOutput {
	return o
}

func (o LoadbalancerAclArrayOutput) Index(i pulumi.IntInput) LoadbalancerAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadbalancerAcl {
		return vs[0].([]*LoadbalancerAcl)[vs[1].(int)]
	}).(LoadbalancerAclOutput)
}

type LoadbalancerAclMapOutput struct{ *pulumi.OutputState }

func (LoadbalancerAclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerAcl)(nil)).Elem()
}

func (o LoadbalancerAclMapOutput) ToLoadbalancerAclMapOutput() LoadbalancerAclMapOutput {
	return o
}

func (o LoadbalancerAclMapOutput) ToLoadbalancerAclMapOutputWithContext(ctx context.Context) LoadbalancerAclMapOutput {
	return o
}

func (o LoadbalancerAclMapOutput) MapIndex(k pulumi.StringInput) LoadbalancerAclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadbalancerAcl {
		return vs[0].(map[string]*LoadbalancerAcl)[vs[1].(string)]
	}).(LoadbalancerAclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerAclInput)(nil)).Elem(), &LoadbalancerAcl{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerAclArrayInput)(nil)).Elem(), LoadbalancerAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerAclMapInput)(nil)).Elem(), LoadbalancerAclMap{})
	pulumi.RegisterOutputType(LoadbalancerAclOutput{})
	pulumi.RegisterOutputType(LoadbalancerAclArrayOutput{})
	pulumi.RegisterOutputType(LoadbalancerAclMapOutput{})
}
