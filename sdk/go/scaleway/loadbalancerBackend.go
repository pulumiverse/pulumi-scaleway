// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Load-Balancer Backends.
// For more information, see [the documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-backends).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewLoadbalancerBackend(ctx, "backend01", &scaleway.LoadbalancerBackendArgs{
//				LbId:            pulumi.Any(scaleway_lb.Lb01.Id),
//				ForwardProtocol: pulumi.String("http"),
//				ForwardPort:     pulumi.Int(80),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With HTTP Health Check
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewLoadbalancerBackend(ctx, "backend01", &scaleway.LoadbalancerBackendArgs{
//				LbId:            pulumi.Any(scaleway_lb.Lb01.Id),
//				ForwardProtocol: pulumi.String("http"),
//				ForwardPort:     pulumi.Int(80),
//				HealthCheckHttp: &scaleway.LoadbalancerBackendHealthCheckHttpArgs{
//					Uri: pulumi.String("www.test.com/health"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Load-Balancer backend can be imported using the `{zone}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/loadbalancerBackend:LoadbalancerBackend backend01 fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type LoadbalancerBackend struct {
	pulumi.CustomResourceState

	// Scaleway S3 bucket website to be served in case all backend servers are down **NOTE** : Only the host part of the
	// Scaleway S3 bucket website is expected. E.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL
	// is 'https://failover-website.s3-website.fr-par.scw.cloud/'.
	FailoverHost pulumi.StringPtrOutput `pulumi:"failoverHost"`
	// User sessions will be forwarded to this port of backend servers
	ForwardPort pulumi.IntOutput `pulumi:"forwardPort"`
	// Load balancing algorithm
	ForwardPortAlgorithm pulumi.StringPtrOutput `pulumi:"forwardPortAlgorithm"`
	// Backend protocol
	ForwardProtocol pulumi.StringOutput `pulumi:"forwardProtocol"`
	// Interval between two HC requests
	HealthCheckDelay pulumi.StringPtrOutput                       `pulumi:"healthCheckDelay"`
	HealthCheckHttp  LoadbalancerBackendHealthCheckHttpPtrOutput  `pulumi:"healthCheckHttp"`
	HealthCheckHttps LoadbalancerBackendHealthCheckHttpsPtrOutput `pulumi:"healthCheckHttps"`
	// Number of allowed failed HC requests before the backend server is marked down
	HealthCheckMaxRetries pulumi.IntPtrOutput `pulumi:"healthCheckMaxRetries"`
	// Port the HC requests will be send to. Default to `forward_port`
	HealthCheckPort pulumi.IntOutput `pulumi:"healthCheckPort"`
	// Defines whether proxy protocol should be activated for the health check
	HealthCheckSendProxy pulumi.BoolPtrOutput                    `pulumi:"healthCheckSendProxy"`
	HealthCheckTcp       LoadbalancerBackendHealthCheckTcpOutput `pulumi:"healthCheckTcp"`
	// Timeout before we consider a HC request failed
	HealthCheckTimeout pulumi.StringPtrOutput `pulumi:"healthCheckTimeout"`
	// Time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN)
	HealthCheckTransientDelay pulumi.StringPtrOutput `pulumi:"healthCheckTransientDelay"`
	// Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection
	IgnoreSslServerVerify pulumi.BoolPtrOutput `pulumi:"ignoreSslServerVerify"`
	// The load-balancer ID
	LbId pulumi.StringOutput `pulumi:"lbId"`
	// Maximum number of connections allowed per backend server
	MaxConnections pulumi.IntPtrOutput `pulumi:"maxConnections"`
	// Number of retries when a backend server connection failed
	MaxRetries pulumi.IntPtrOutput `pulumi:"maxRetries"`
	// The name of the backend
	Name pulumi.StringOutput `pulumi:"name"`
	// Modify what occurs when a backend server is marked down
	OnMarkedDownAction pulumi.StringPtrOutput `pulumi:"onMarkedDownAction"`
	// Type of PROXY protocol to enable
	ProxyProtocol pulumi.StringPtrOutput `pulumi:"proxyProtocol"`
	// Whether to use another backend server on each attempt
	RedispatchAttemptCount pulumi.IntPtrOutput `pulumi:"redispatchAttemptCount"`
	// Enables PROXY protocol version 2
	//
	// Deprecated: Please use proxyProtocol instead
	SendProxyV2 pulumi.BoolOutput `pulumi:"sendProxyV2"`
	// Backend server IP addresses list (IPv4 or IPv6)
	ServerIps pulumi.StringArrayOutput `pulumi:"serverIps"`
	// Enables SSL between load balancer and backend servers
	SslBridging pulumi.BoolPtrOutput `pulumi:"sslBridging"`
	// The type of sticky sessions
	StickySessions pulumi.StringPtrOutput `pulumi:"stickySessions"`
	// Cookie name for sticky sessions
	StickySessionsCookieName pulumi.StringPtrOutput `pulumi:"stickySessionsCookieName"`
	// Maximum initial server connection establishment time
	TimeoutConnect pulumi.StringPtrOutput `pulumi:"timeoutConnect"`
	// Maximum time (in seconds) for a request to be left pending in queue when `max_connections` is reached
	TimeoutQueue pulumi.StringPtrOutput `pulumi:"timeoutQueue"`
	// Maximum server connection inactivity time
	TimeoutServer pulumi.StringPtrOutput `pulumi:"timeoutServer"`
	// Maximum tunnel inactivity time
	TimeoutTunnel pulumi.StringPtrOutput `pulumi:"timeoutTunnel"`
}

// NewLoadbalancerBackend registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancerBackend(ctx *pulumi.Context,
	name string, args *LoadbalancerBackendArgs, opts ...pulumi.ResourceOption) (*LoadbalancerBackend, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ForwardPort == nil {
		return nil, errors.New("invalid value for required argument 'ForwardPort'")
	}
	if args.ForwardProtocol == nil {
		return nil, errors.New("invalid value for required argument 'ForwardProtocol'")
	}
	if args.LbId == nil {
		return nil, errors.New("invalid value for required argument 'LbId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadbalancerBackend
	err := ctx.RegisterResource("scaleway:index/loadbalancerBackend:LoadbalancerBackend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancerBackend gets an existing LoadbalancerBackend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancerBackend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerBackendState, opts ...pulumi.ResourceOption) (*LoadbalancerBackend, error) {
	var resource LoadbalancerBackend
	err := ctx.ReadResource("scaleway:index/loadbalancerBackend:LoadbalancerBackend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadbalancerBackend resources.
type loadbalancerBackendState struct {
	// Scaleway S3 bucket website to be served in case all backend servers are down **NOTE** : Only the host part of the
	// Scaleway S3 bucket website is expected. E.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL
	// is 'https://failover-website.s3-website.fr-par.scw.cloud/'.
	FailoverHost *string `pulumi:"failoverHost"`
	// User sessions will be forwarded to this port of backend servers
	ForwardPort *int `pulumi:"forwardPort"`
	// Load balancing algorithm
	ForwardPortAlgorithm *string `pulumi:"forwardPortAlgorithm"`
	// Backend protocol
	ForwardProtocol *string `pulumi:"forwardProtocol"`
	// Interval between two HC requests
	HealthCheckDelay *string                              `pulumi:"healthCheckDelay"`
	HealthCheckHttp  *LoadbalancerBackendHealthCheckHttp  `pulumi:"healthCheckHttp"`
	HealthCheckHttps *LoadbalancerBackendHealthCheckHttps `pulumi:"healthCheckHttps"`
	// Number of allowed failed HC requests before the backend server is marked down
	HealthCheckMaxRetries *int `pulumi:"healthCheckMaxRetries"`
	// Port the HC requests will be send to. Default to `forward_port`
	HealthCheckPort *int `pulumi:"healthCheckPort"`
	// Defines whether proxy protocol should be activated for the health check
	HealthCheckSendProxy *bool                              `pulumi:"healthCheckSendProxy"`
	HealthCheckTcp       *LoadbalancerBackendHealthCheckTcp `pulumi:"healthCheckTcp"`
	// Timeout before we consider a HC request failed
	HealthCheckTimeout *string `pulumi:"healthCheckTimeout"`
	// Time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN)
	HealthCheckTransientDelay *string `pulumi:"healthCheckTransientDelay"`
	// Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection
	IgnoreSslServerVerify *bool `pulumi:"ignoreSslServerVerify"`
	// The load-balancer ID
	LbId *string `pulumi:"lbId"`
	// Maximum number of connections allowed per backend server
	MaxConnections *int `pulumi:"maxConnections"`
	// Number of retries when a backend server connection failed
	MaxRetries *int `pulumi:"maxRetries"`
	// The name of the backend
	Name *string `pulumi:"name"`
	// Modify what occurs when a backend server is marked down
	OnMarkedDownAction *string `pulumi:"onMarkedDownAction"`
	// Type of PROXY protocol to enable
	ProxyProtocol *string `pulumi:"proxyProtocol"`
	// Whether to use another backend server on each attempt
	RedispatchAttemptCount *int `pulumi:"redispatchAttemptCount"`
	// Enables PROXY protocol version 2
	//
	// Deprecated: Please use proxyProtocol instead
	SendProxyV2 *bool `pulumi:"sendProxyV2"`
	// Backend server IP addresses list (IPv4 or IPv6)
	ServerIps []string `pulumi:"serverIps"`
	// Enables SSL between load balancer and backend servers
	SslBridging *bool `pulumi:"sslBridging"`
	// The type of sticky sessions
	StickySessions *string `pulumi:"stickySessions"`
	// Cookie name for sticky sessions
	StickySessionsCookieName *string `pulumi:"stickySessionsCookieName"`
	// Maximum initial server connection establishment time
	TimeoutConnect *string `pulumi:"timeoutConnect"`
	// Maximum time (in seconds) for a request to be left pending in queue when `max_connections` is reached
	TimeoutQueue *string `pulumi:"timeoutQueue"`
	// Maximum server connection inactivity time
	TimeoutServer *string `pulumi:"timeoutServer"`
	// Maximum tunnel inactivity time
	TimeoutTunnel *string `pulumi:"timeoutTunnel"`
}

type LoadbalancerBackendState struct {
	// Scaleway S3 bucket website to be served in case all backend servers are down **NOTE** : Only the host part of the
	// Scaleway S3 bucket website is expected. E.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL
	// is 'https://failover-website.s3-website.fr-par.scw.cloud/'.
	FailoverHost pulumi.StringPtrInput
	// User sessions will be forwarded to this port of backend servers
	ForwardPort pulumi.IntPtrInput
	// Load balancing algorithm
	ForwardPortAlgorithm pulumi.StringPtrInput
	// Backend protocol
	ForwardProtocol pulumi.StringPtrInput
	// Interval between two HC requests
	HealthCheckDelay pulumi.StringPtrInput
	HealthCheckHttp  LoadbalancerBackendHealthCheckHttpPtrInput
	HealthCheckHttps LoadbalancerBackendHealthCheckHttpsPtrInput
	// Number of allowed failed HC requests before the backend server is marked down
	HealthCheckMaxRetries pulumi.IntPtrInput
	// Port the HC requests will be send to. Default to `forward_port`
	HealthCheckPort pulumi.IntPtrInput
	// Defines whether proxy protocol should be activated for the health check
	HealthCheckSendProxy pulumi.BoolPtrInput
	HealthCheckTcp       LoadbalancerBackendHealthCheckTcpPtrInput
	// Timeout before we consider a HC request failed
	HealthCheckTimeout pulumi.StringPtrInput
	// Time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN)
	HealthCheckTransientDelay pulumi.StringPtrInput
	// Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection
	IgnoreSslServerVerify pulumi.BoolPtrInput
	// The load-balancer ID
	LbId pulumi.StringPtrInput
	// Maximum number of connections allowed per backend server
	MaxConnections pulumi.IntPtrInput
	// Number of retries when a backend server connection failed
	MaxRetries pulumi.IntPtrInput
	// The name of the backend
	Name pulumi.StringPtrInput
	// Modify what occurs when a backend server is marked down
	OnMarkedDownAction pulumi.StringPtrInput
	// Type of PROXY protocol to enable
	ProxyProtocol pulumi.StringPtrInput
	// Whether to use another backend server on each attempt
	RedispatchAttemptCount pulumi.IntPtrInput
	// Enables PROXY protocol version 2
	//
	// Deprecated: Please use proxyProtocol instead
	SendProxyV2 pulumi.BoolPtrInput
	// Backend server IP addresses list (IPv4 or IPv6)
	ServerIps pulumi.StringArrayInput
	// Enables SSL between load balancer and backend servers
	SslBridging pulumi.BoolPtrInput
	// The type of sticky sessions
	StickySessions pulumi.StringPtrInput
	// Cookie name for sticky sessions
	StickySessionsCookieName pulumi.StringPtrInput
	// Maximum initial server connection establishment time
	TimeoutConnect pulumi.StringPtrInput
	// Maximum time (in seconds) for a request to be left pending in queue when `max_connections` is reached
	TimeoutQueue pulumi.StringPtrInput
	// Maximum server connection inactivity time
	TimeoutServer pulumi.StringPtrInput
	// Maximum tunnel inactivity time
	TimeoutTunnel pulumi.StringPtrInput
}

func (LoadbalancerBackendState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerBackendState)(nil)).Elem()
}

type loadbalancerBackendArgs struct {
	// Scaleway S3 bucket website to be served in case all backend servers are down **NOTE** : Only the host part of the
	// Scaleway S3 bucket website is expected. E.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL
	// is 'https://failover-website.s3-website.fr-par.scw.cloud/'.
	FailoverHost *string `pulumi:"failoverHost"`
	// User sessions will be forwarded to this port of backend servers
	ForwardPort int `pulumi:"forwardPort"`
	// Load balancing algorithm
	ForwardPortAlgorithm *string `pulumi:"forwardPortAlgorithm"`
	// Backend protocol
	ForwardProtocol string `pulumi:"forwardProtocol"`
	// Interval between two HC requests
	HealthCheckDelay *string                              `pulumi:"healthCheckDelay"`
	HealthCheckHttp  *LoadbalancerBackendHealthCheckHttp  `pulumi:"healthCheckHttp"`
	HealthCheckHttps *LoadbalancerBackendHealthCheckHttps `pulumi:"healthCheckHttps"`
	// Number of allowed failed HC requests before the backend server is marked down
	HealthCheckMaxRetries *int `pulumi:"healthCheckMaxRetries"`
	// Port the HC requests will be send to. Default to `forward_port`
	HealthCheckPort *int `pulumi:"healthCheckPort"`
	// Defines whether proxy protocol should be activated for the health check
	HealthCheckSendProxy *bool                              `pulumi:"healthCheckSendProxy"`
	HealthCheckTcp       *LoadbalancerBackendHealthCheckTcp `pulumi:"healthCheckTcp"`
	// Timeout before we consider a HC request failed
	HealthCheckTimeout *string `pulumi:"healthCheckTimeout"`
	// Time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN)
	HealthCheckTransientDelay *string `pulumi:"healthCheckTransientDelay"`
	// Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection
	IgnoreSslServerVerify *bool `pulumi:"ignoreSslServerVerify"`
	// The load-balancer ID
	LbId string `pulumi:"lbId"`
	// Maximum number of connections allowed per backend server
	MaxConnections *int `pulumi:"maxConnections"`
	// Number of retries when a backend server connection failed
	MaxRetries *int `pulumi:"maxRetries"`
	// The name of the backend
	Name *string `pulumi:"name"`
	// Modify what occurs when a backend server is marked down
	OnMarkedDownAction *string `pulumi:"onMarkedDownAction"`
	// Type of PROXY protocol to enable
	ProxyProtocol *string `pulumi:"proxyProtocol"`
	// Whether to use another backend server on each attempt
	RedispatchAttemptCount *int `pulumi:"redispatchAttemptCount"`
	// Enables PROXY protocol version 2
	//
	// Deprecated: Please use proxyProtocol instead
	SendProxyV2 *bool `pulumi:"sendProxyV2"`
	// Backend server IP addresses list (IPv4 or IPv6)
	ServerIps []string `pulumi:"serverIps"`
	// Enables SSL between load balancer and backend servers
	SslBridging *bool `pulumi:"sslBridging"`
	// The type of sticky sessions
	StickySessions *string `pulumi:"stickySessions"`
	// Cookie name for sticky sessions
	StickySessionsCookieName *string `pulumi:"stickySessionsCookieName"`
	// Maximum initial server connection establishment time
	TimeoutConnect *string `pulumi:"timeoutConnect"`
	// Maximum time (in seconds) for a request to be left pending in queue when `max_connections` is reached
	TimeoutQueue *string `pulumi:"timeoutQueue"`
	// Maximum server connection inactivity time
	TimeoutServer *string `pulumi:"timeoutServer"`
	// Maximum tunnel inactivity time
	TimeoutTunnel *string `pulumi:"timeoutTunnel"`
}

// The set of arguments for constructing a LoadbalancerBackend resource.
type LoadbalancerBackendArgs struct {
	// Scaleway S3 bucket website to be served in case all backend servers are down **NOTE** : Only the host part of the
	// Scaleway S3 bucket website is expected. E.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL
	// is 'https://failover-website.s3-website.fr-par.scw.cloud/'.
	FailoverHost pulumi.StringPtrInput
	// User sessions will be forwarded to this port of backend servers
	ForwardPort pulumi.IntInput
	// Load balancing algorithm
	ForwardPortAlgorithm pulumi.StringPtrInput
	// Backend protocol
	ForwardProtocol pulumi.StringInput
	// Interval between two HC requests
	HealthCheckDelay pulumi.StringPtrInput
	HealthCheckHttp  LoadbalancerBackendHealthCheckHttpPtrInput
	HealthCheckHttps LoadbalancerBackendHealthCheckHttpsPtrInput
	// Number of allowed failed HC requests before the backend server is marked down
	HealthCheckMaxRetries pulumi.IntPtrInput
	// Port the HC requests will be send to. Default to `forward_port`
	HealthCheckPort pulumi.IntPtrInput
	// Defines whether proxy protocol should be activated for the health check
	HealthCheckSendProxy pulumi.BoolPtrInput
	HealthCheckTcp       LoadbalancerBackendHealthCheckTcpPtrInput
	// Timeout before we consider a HC request failed
	HealthCheckTimeout pulumi.StringPtrInput
	// Time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN)
	HealthCheckTransientDelay pulumi.StringPtrInput
	// Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection
	IgnoreSslServerVerify pulumi.BoolPtrInput
	// The load-balancer ID
	LbId pulumi.StringInput
	// Maximum number of connections allowed per backend server
	MaxConnections pulumi.IntPtrInput
	// Number of retries when a backend server connection failed
	MaxRetries pulumi.IntPtrInput
	// The name of the backend
	Name pulumi.StringPtrInput
	// Modify what occurs when a backend server is marked down
	OnMarkedDownAction pulumi.StringPtrInput
	// Type of PROXY protocol to enable
	ProxyProtocol pulumi.StringPtrInput
	// Whether to use another backend server on each attempt
	RedispatchAttemptCount pulumi.IntPtrInput
	// Enables PROXY protocol version 2
	//
	// Deprecated: Please use proxyProtocol instead
	SendProxyV2 pulumi.BoolPtrInput
	// Backend server IP addresses list (IPv4 or IPv6)
	ServerIps pulumi.StringArrayInput
	// Enables SSL between load balancer and backend servers
	SslBridging pulumi.BoolPtrInput
	// The type of sticky sessions
	StickySessions pulumi.StringPtrInput
	// Cookie name for sticky sessions
	StickySessionsCookieName pulumi.StringPtrInput
	// Maximum initial server connection establishment time
	TimeoutConnect pulumi.StringPtrInput
	// Maximum time (in seconds) for a request to be left pending in queue when `max_connections` is reached
	TimeoutQueue pulumi.StringPtrInput
	// Maximum server connection inactivity time
	TimeoutServer pulumi.StringPtrInput
	// Maximum tunnel inactivity time
	TimeoutTunnel pulumi.StringPtrInput
}

func (LoadbalancerBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerBackendArgs)(nil)).Elem()
}

type LoadbalancerBackendInput interface {
	pulumi.Input

	ToLoadbalancerBackendOutput() LoadbalancerBackendOutput
	ToLoadbalancerBackendOutputWithContext(ctx context.Context) LoadbalancerBackendOutput
}

func (*LoadbalancerBackend) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerBackend)(nil)).Elem()
}

func (i *LoadbalancerBackend) ToLoadbalancerBackendOutput() LoadbalancerBackendOutput {
	return i.ToLoadbalancerBackendOutputWithContext(context.Background())
}

func (i *LoadbalancerBackend) ToLoadbalancerBackendOutputWithContext(ctx context.Context) LoadbalancerBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerBackendOutput)
}

// LoadbalancerBackendArrayInput is an input type that accepts LoadbalancerBackendArray and LoadbalancerBackendArrayOutput values.
// You can construct a concrete instance of `LoadbalancerBackendArrayInput` via:
//
//	LoadbalancerBackendArray{ LoadbalancerBackendArgs{...} }
type LoadbalancerBackendArrayInput interface {
	pulumi.Input

	ToLoadbalancerBackendArrayOutput() LoadbalancerBackendArrayOutput
	ToLoadbalancerBackendArrayOutputWithContext(context.Context) LoadbalancerBackendArrayOutput
}

type LoadbalancerBackendArray []LoadbalancerBackendInput

func (LoadbalancerBackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerBackend)(nil)).Elem()
}

func (i LoadbalancerBackendArray) ToLoadbalancerBackendArrayOutput() LoadbalancerBackendArrayOutput {
	return i.ToLoadbalancerBackendArrayOutputWithContext(context.Background())
}

func (i LoadbalancerBackendArray) ToLoadbalancerBackendArrayOutputWithContext(ctx context.Context) LoadbalancerBackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerBackendArrayOutput)
}

// LoadbalancerBackendMapInput is an input type that accepts LoadbalancerBackendMap and LoadbalancerBackendMapOutput values.
// You can construct a concrete instance of `LoadbalancerBackendMapInput` via:
//
//	LoadbalancerBackendMap{ "key": LoadbalancerBackendArgs{...} }
type LoadbalancerBackendMapInput interface {
	pulumi.Input

	ToLoadbalancerBackendMapOutput() LoadbalancerBackendMapOutput
	ToLoadbalancerBackendMapOutputWithContext(context.Context) LoadbalancerBackendMapOutput
}

type LoadbalancerBackendMap map[string]LoadbalancerBackendInput

func (LoadbalancerBackendMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerBackend)(nil)).Elem()
}

func (i LoadbalancerBackendMap) ToLoadbalancerBackendMapOutput() LoadbalancerBackendMapOutput {
	return i.ToLoadbalancerBackendMapOutputWithContext(context.Background())
}

func (i LoadbalancerBackendMap) ToLoadbalancerBackendMapOutputWithContext(ctx context.Context) LoadbalancerBackendMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerBackendMapOutput)
}

type LoadbalancerBackendOutput struct{ *pulumi.OutputState }

func (LoadbalancerBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerBackend)(nil)).Elem()
}

func (o LoadbalancerBackendOutput) ToLoadbalancerBackendOutput() LoadbalancerBackendOutput {
	return o
}

func (o LoadbalancerBackendOutput) ToLoadbalancerBackendOutputWithContext(ctx context.Context) LoadbalancerBackendOutput {
	return o
}

// Scaleway S3 bucket website to be served in case all backend servers are down **NOTE** : Only the host part of the
// Scaleway S3 bucket website is expected. E.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL
// is 'https://failover-website.s3-website.fr-par.scw.cloud/'.
func (o LoadbalancerBackendOutput) FailoverHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.StringPtrOutput { return v.FailoverHost }).(pulumi.StringPtrOutput)
}

// User sessions will be forwarded to this port of backend servers
func (o LoadbalancerBackendOutput) ForwardPort() pulumi.IntOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.IntOutput { return v.ForwardPort }).(pulumi.IntOutput)
}

// Load balancing algorithm
func (o LoadbalancerBackendOutput) ForwardPortAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.StringPtrOutput { return v.ForwardPortAlgorithm }).(pulumi.StringPtrOutput)
}

// Backend protocol
func (o LoadbalancerBackendOutput) ForwardProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.StringOutput { return v.ForwardProtocol }).(pulumi.StringOutput)
}

// Interval between two HC requests
func (o LoadbalancerBackendOutput) HealthCheckDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.StringPtrOutput { return v.HealthCheckDelay }).(pulumi.StringPtrOutput)
}

func (o LoadbalancerBackendOutput) HealthCheckHttp() LoadbalancerBackendHealthCheckHttpPtrOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) LoadbalancerBackendHealthCheckHttpPtrOutput { return v.HealthCheckHttp }).(LoadbalancerBackendHealthCheckHttpPtrOutput)
}

func (o LoadbalancerBackendOutput) HealthCheckHttps() LoadbalancerBackendHealthCheckHttpsPtrOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) LoadbalancerBackendHealthCheckHttpsPtrOutput { return v.HealthCheckHttps }).(LoadbalancerBackendHealthCheckHttpsPtrOutput)
}

// Number of allowed failed HC requests before the backend server is marked down
func (o LoadbalancerBackendOutput) HealthCheckMaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.IntPtrOutput { return v.HealthCheckMaxRetries }).(pulumi.IntPtrOutput)
}

// Port the HC requests will be send to. Default to `forward_port`
func (o LoadbalancerBackendOutput) HealthCheckPort() pulumi.IntOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.IntOutput { return v.HealthCheckPort }).(pulumi.IntOutput)
}

// Defines whether proxy protocol should be activated for the health check
func (o LoadbalancerBackendOutput) HealthCheckSendProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.BoolPtrOutput { return v.HealthCheckSendProxy }).(pulumi.BoolPtrOutput)
}

func (o LoadbalancerBackendOutput) HealthCheckTcp() LoadbalancerBackendHealthCheckTcpOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) LoadbalancerBackendHealthCheckTcpOutput { return v.HealthCheckTcp }).(LoadbalancerBackendHealthCheckTcpOutput)
}

// Timeout before we consider a HC request failed
func (o LoadbalancerBackendOutput) HealthCheckTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.StringPtrOutput { return v.HealthCheckTimeout }).(pulumi.StringPtrOutput)
}

// Time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN)
func (o LoadbalancerBackendOutput) HealthCheckTransientDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.StringPtrOutput { return v.HealthCheckTransientDelay }).(pulumi.StringPtrOutput)
}

// Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection
func (o LoadbalancerBackendOutput) IgnoreSslServerVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.BoolPtrOutput { return v.IgnoreSslServerVerify }).(pulumi.BoolPtrOutput)
}

// The load-balancer ID
func (o LoadbalancerBackendOutput) LbId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.StringOutput { return v.LbId }).(pulumi.StringOutput)
}

// Maximum number of connections allowed per backend server
func (o LoadbalancerBackendOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.IntPtrOutput { return v.MaxConnections }).(pulumi.IntPtrOutput)
}

// Number of retries when a backend server connection failed
func (o LoadbalancerBackendOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.IntPtrOutput { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// The name of the backend
func (o LoadbalancerBackendOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Modify what occurs when a backend server is marked down
func (o LoadbalancerBackendOutput) OnMarkedDownAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.StringPtrOutput { return v.OnMarkedDownAction }).(pulumi.StringPtrOutput)
}

// Type of PROXY protocol to enable
func (o LoadbalancerBackendOutput) ProxyProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.StringPtrOutput { return v.ProxyProtocol }).(pulumi.StringPtrOutput)
}

// Whether to use another backend server on each attempt
func (o LoadbalancerBackendOutput) RedispatchAttemptCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.IntPtrOutput { return v.RedispatchAttemptCount }).(pulumi.IntPtrOutput)
}

// Enables PROXY protocol version 2
//
// Deprecated: Please use proxyProtocol instead
func (o LoadbalancerBackendOutput) SendProxyV2() pulumi.BoolOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.BoolOutput { return v.SendProxyV2 }).(pulumi.BoolOutput)
}

// Backend server IP addresses list (IPv4 or IPv6)
func (o LoadbalancerBackendOutput) ServerIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.StringArrayOutput { return v.ServerIps }).(pulumi.StringArrayOutput)
}

// Enables SSL between load balancer and backend servers
func (o LoadbalancerBackendOutput) SslBridging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.BoolPtrOutput { return v.SslBridging }).(pulumi.BoolPtrOutput)
}

// The type of sticky sessions
func (o LoadbalancerBackendOutput) StickySessions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.StringPtrOutput { return v.StickySessions }).(pulumi.StringPtrOutput)
}

// Cookie name for sticky sessions
func (o LoadbalancerBackendOutput) StickySessionsCookieName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.StringPtrOutput { return v.StickySessionsCookieName }).(pulumi.StringPtrOutput)
}

// Maximum initial server connection establishment time
func (o LoadbalancerBackendOutput) TimeoutConnect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.StringPtrOutput { return v.TimeoutConnect }).(pulumi.StringPtrOutput)
}

// Maximum time (in seconds) for a request to be left pending in queue when `max_connections` is reached
func (o LoadbalancerBackendOutput) TimeoutQueue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.StringPtrOutput { return v.TimeoutQueue }).(pulumi.StringPtrOutput)
}

// Maximum server connection inactivity time
func (o LoadbalancerBackendOutput) TimeoutServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.StringPtrOutput { return v.TimeoutServer }).(pulumi.StringPtrOutput)
}

// Maximum tunnel inactivity time
func (o LoadbalancerBackendOutput) TimeoutTunnel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerBackend) pulumi.StringPtrOutput { return v.TimeoutTunnel }).(pulumi.StringPtrOutput)
}

type LoadbalancerBackendArrayOutput struct{ *pulumi.OutputState }

func (LoadbalancerBackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerBackend)(nil)).Elem()
}

func (o LoadbalancerBackendArrayOutput) ToLoadbalancerBackendArrayOutput() LoadbalancerBackendArrayOutput {
	return o
}

func (o LoadbalancerBackendArrayOutput) ToLoadbalancerBackendArrayOutputWithContext(ctx context.Context) LoadbalancerBackendArrayOutput {
	return o
}

func (o LoadbalancerBackendArrayOutput) Index(i pulumi.IntInput) LoadbalancerBackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadbalancerBackend {
		return vs[0].([]*LoadbalancerBackend)[vs[1].(int)]
	}).(LoadbalancerBackendOutput)
}

type LoadbalancerBackendMapOutput struct{ *pulumi.OutputState }

func (LoadbalancerBackendMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerBackend)(nil)).Elem()
}

func (o LoadbalancerBackendMapOutput) ToLoadbalancerBackendMapOutput() LoadbalancerBackendMapOutput {
	return o
}

func (o LoadbalancerBackendMapOutput) ToLoadbalancerBackendMapOutputWithContext(ctx context.Context) LoadbalancerBackendMapOutput {
	return o
}

func (o LoadbalancerBackendMapOutput) MapIndex(k pulumi.StringInput) LoadbalancerBackendOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadbalancerBackend {
		return vs[0].(map[string]*LoadbalancerBackend)[vs[1].(string)]
	}).(LoadbalancerBackendOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerBackendInput)(nil)).Elem(), &LoadbalancerBackend{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerBackendArrayInput)(nil)).Elem(), LoadbalancerBackendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerBackendMapInput)(nil)).Elem(), LoadbalancerBackendMap{})
	pulumi.RegisterOutputType(LoadbalancerBackendOutput{})
	pulumi.RegisterOutputType(LoadbalancerBackendArrayOutput{})
	pulumi.RegisterOutputType(LoadbalancerBackendMapOutput{})
}
