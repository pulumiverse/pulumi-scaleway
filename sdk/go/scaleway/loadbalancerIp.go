// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Load Balancer IP addresses.
//
// For more information, see the [main documentation](https://www.scaleway.com/en/docs/load-balancer/how-to/create-manage-flex-ips/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-ip-addresses-list-ip-addresses).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewLoadbalancerIp(ctx, "ip", &scaleway.LoadbalancerIpArgs{
//				Reverse: pulumi.String("my-reverse.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With IPv6
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewLoadbalancerIp(ctx, "ipv6", &scaleway.LoadbalancerIpArgs{
//				IsIpv6: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IPs can be imported using `{zone}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/loadbalancerIp:LoadbalancerIp ip01 fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type LoadbalancerIp struct {
	pulumi.CustomResourceState

	// The IP address
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// If true, creates a flexible IP with an IPv6 address.
	IsIpv6 pulumi.BoolPtrOutput `pulumi:"isIpv6"`
	// The associated Load Balancer ID if any
	LbId pulumi.StringOutput `pulumi:"lbId"`
	// The organizationId you want to attach the resource to
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// `projectId`) The ID of the Project the IP is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The region of the resource
	Region pulumi.StringOutput `pulumi:"region"`
	// The reverse domain associated with this IP.
	Reverse pulumi.StringOutput `pulumi:"reverse"`
	// The tags associated with this IP.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// `zone`) The zone in which the IP should be reserved.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewLoadbalancerIp registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancerIp(ctx *pulumi.Context,
	name string, args *LoadbalancerIpArgs, opts ...pulumi.ResourceOption) (*LoadbalancerIp, error) {
	if args == nil {
		args = &LoadbalancerIpArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadbalancerIp
	err := ctx.RegisterResource("scaleway:index/loadbalancerIp:LoadbalancerIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancerIp gets an existing LoadbalancerIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancerIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerIpState, opts ...pulumi.ResourceOption) (*LoadbalancerIp, error) {
	var resource LoadbalancerIp
	err := ctx.ReadResource("scaleway:index/loadbalancerIp:LoadbalancerIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadbalancerIp resources.
type loadbalancerIpState struct {
	// The IP address
	IpAddress *string `pulumi:"ipAddress"`
	// If true, creates a flexible IP with an IPv6 address.
	IsIpv6 *bool `pulumi:"isIpv6"`
	// The associated Load Balancer ID if any
	LbId *string `pulumi:"lbId"`
	// The organizationId you want to attach the resource to
	OrganizationId *string `pulumi:"organizationId"`
	// `projectId`) The ID of the Project the IP is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The region of the resource
	Region *string `pulumi:"region"`
	// The reverse domain associated with this IP.
	Reverse *string `pulumi:"reverse"`
	// The tags associated with this IP.
	Tags []string `pulumi:"tags"`
	// `zone`) The zone in which the IP should be reserved.
	Zone *string `pulumi:"zone"`
}

type LoadbalancerIpState struct {
	// The IP address
	IpAddress pulumi.StringPtrInput
	// If true, creates a flexible IP with an IPv6 address.
	IsIpv6 pulumi.BoolPtrInput
	// The associated Load Balancer ID if any
	LbId pulumi.StringPtrInput
	// The organizationId you want to attach the resource to
	OrganizationId pulumi.StringPtrInput
	// `projectId`) The ID of the Project the IP is associated with.
	ProjectId pulumi.StringPtrInput
	// The region of the resource
	Region pulumi.StringPtrInput
	// The reverse domain associated with this IP.
	Reverse pulumi.StringPtrInput
	// The tags associated with this IP.
	Tags pulumi.StringArrayInput
	// `zone`) The zone in which the IP should be reserved.
	Zone pulumi.StringPtrInput
}

func (LoadbalancerIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerIpState)(nil)).Elem()
}

type loadbalancerIpArgs struct {
	// If true, creates a flexible IP with an IPv6 address.
	IsIpv6 *bool `pulumi:"isIpv6"`
	// `projectId`) The ID of the Project the IP is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The reverse domain associated with this IP.
	Reverse *string `pulumi:"reverse"`
	// The tags associated with this IP.
	Tags []string `pulumi:"tags"`
	// `zone`) The zone in which the IP should be reserved.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a LoadbalancerIp resource.
type LoadbalancerIpArgs struct {
	// If true, creates a flexible IP with an IPv6 address.
	IsIpv6 pulumi.BoolPtrInput
	// `projectId`) The ID of the Project the IP is associated with.
	ProjectId pulumi.StringPtrInput
	// The reverse domain associated with this IP.
	Reverse pulumi.StringPtrInput
	// The tags associated with this IP.
	Tags pulumi.StringArrayInput
	// `zone`) The zone in which the IP should be reserved.
	Zone pulumi.StringPtrInput
}

func (LoadbalancerIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerIpArgs)(nil)).Elem()
}

type LoadbalancerIpInput interface {
	pulumi.Input

	ToLoadbalancerIpOutput() LoadbalancerIpOutput
	ToLoadbalancerIpOutputWithContext(ctx context.Context) LoadbalancerIpOutput
}

func (*LoadbalancerIp) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerIp)(nil)).Elem()
}

func (i *LoadbalancerIp) ToLoadbalancerIpOutput() LoadbalancerIpOutput {
	return i.ToLoadbalancerIpOutputWithContext(context.Background())
}

func (i *LoadbalancerIp) ToLoadbalancerIpOutputWithContext(ctx context.Context) LoadbalancerIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerIpOutput)
}

// LoadbalancerIpArrayInput is an input type that accepts LoadbalancerIpArray and LoadbalancerIpArrayOutput values.
// You can construct a concrete instance of `LoadbalancerIpArrayInput` via:
//
//	LoadbalancerIpArray{ LoadbalancerIpArgs{...} }
type LoadbalancerIpArrayInput interface {
	pulumi.Input

	ToLoadbalancerIpArrayOutput() LoadbalancerIpArrayOutput
	ToLoadbalancerIpArrayOutputWithContext(context.Context) LoadbalancerIpArrayOutput
}

type LoadbalancerIpArray []LoadbalancerIpInput

func (LoadbalancerIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerIp)(nil)).Elem()
}

func (i LoadbalancerIpArray) ToLoadbalancerIpArrayOutput() LoadbalancerIpArrayOutput {
	return i.ToLoadbalancerIpArrayOutputWithContext(context.Background())
}

func (i LoadbalancerIpArray) ToLoadbalancerIpArrayOutputWithContext(ctx context.Context) LoadbalancerIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerIpArrayOutput)
}

// LoadbalancerIpMapInput is an input type that accepts LoadbalancerIpMap and LoadbalancerIpMapOutput values.
// You can construct a concrete instance of `LoadbalancerIpMapInput` via:
//
//	LoadbalancerIpMap{ "key": LoadbalancerIpArgs{...} }
type LoadbalancerIpMapInput interface {
	pulumi.Input

	ToLoadbalancerIpMapOutput() LoadbalancerIpMapOutput
	ToLoadbalancerIpMapOutputWithContext(context.Context) LoadbalancerIpMapOutput
}

type LoadbalancerIpMap map[string]LoadbalancerIpInput

func (LoadbalancerIpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerIp)(nil)).Elem()
}

func (i LoadbalancerIpMap) ToLoadbalancerIpMapOutput() LoadbalancerIpMapOutput {
	return i.ToLoadbalancerIpMapOutputWithContext(context.Background())
}

func (i LoadbalancerIpMap) ToLoadbalancerIpMapOutputWithContext(ctx context.Context) LoadbalancerIpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerIpMapOutput)
}

type LoadbalancerIpOutput struct{ *pulumi.OutputState }

func (LoadbalancerIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerIp)(nil)).Elem()
}

func (o LoadbalancerIpOutput) ToLoadbalancerIpOutput() LoadbalancerIpOutput {
	return o
}

func (o LoadbalancerIpOutput) ToLoadbalancerIpOutputWithContext(ctx context.Context) LoadbalancerIpOutput {
	return o
}

// The IP address
func (o LoadbalancerIpOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerIp) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// If true, creates a flexible IP with an IPv6 address.
func (o LoadbalancerIpOutput) IsIpv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoadbalancerIp) pulumi.BoolPtrOutput { return v.IsIpv6 }).(pulumi.BoolPtrOutput)
}

// The associated Load Balancer ID if any
func (o LoadbalancerIpOutput) LbId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerIp) pulumi.StringOutput { return v.LbId }).(pulumi.StringOutput)
}

// The organizationId you want to attach the resource to
func (o LoadbalancerIpOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerIp) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// `projectId`) The ID of the Project the IP is associated with.
func (o LoadbalancerIpOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerIp) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The region of the resource
func (o LoadbalancerIpOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerIp) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The reverse domain associated with this IP.
func (o LoadbalancerIpOutput) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerIp) pulumi.StringOutput { return v.Reverse }).(pulumi.StringOutput)
}

// The tags associated with this IP.
func (o LoadbalancerIpOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadbalancerIp) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// `zone`) The zone in which the IP should be reserved.
func (o LoadbalancerIpOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerIp) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type LoadbalancerIpArrayOutput struct{ *pulumi.OutputState }

func (LoadbalancerIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerIp)(nil)).Elem()
}

func (o LoadbalancerIpArrayOutput) ToLoadbalancerIpArrayOutput() LoadbalancerIpArrayOutput {
	return o
}

func (o LoadbalancerIpArrayOutput) ToLoadbalancerIpArrayOutputWithContext(ctx context.Context) LoadbalancerIpArrayOutput {
	return o
}

func (o LoadbalancerIpArrayOutput) Index(i pulumi.IntInput) LoadbalancerIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadbalancerIp {
		return vs[0].([]*LoadbalancerIp)[vs[1].(int)]
	}).(LoadbalancerIpOutput)
}

type LoadbalancerIpMapOutput struct{ *pulumi.OutputState }

func (LoadbalancerIpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerIp)(nil)).Elem()
}

func (o LoadbalancerIpMapOutput) ToLoadbalancerIpMapOutput() LoadbalancerIpMapOutput {
	return o
}

func (o LoadbalancerIpMapOutput) ToLoadbalancerIpMapOutputWithContext(ctx context.Context) LoadbalancerIpMapOutput {
	return o
}

func (o LoadbalancerIpMapOutput) MapIndex(k pulumi.StringInput) LoadbalancerIpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadbalancerIp {
		return vs[0].(map[string]*LoadbalancerIp)[vs[1].(string)]
	}).(LoadbalancerIpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerIpInput)(nil)).Elem(), &LoadbalancerIp{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerIpArrayInput)(nil)).Elem(), LoadbalancerIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerIpMapInput)(nil)).Elem(), LoadbalancerIpMap{})
	pulumi.RegisterOutputType(LoadbalancerIpOutput{})
	pulumi.RegisterOutputType(LoadbalancerIpArrayOutput{})
	pulumi.RegisterOutputType(LoadbalancerIpMapOutput{})
}
