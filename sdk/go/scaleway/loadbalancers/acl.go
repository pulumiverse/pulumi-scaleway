// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package loadbalancers

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Load Balancer ACLs.
//
// For more information, see the [main documentation](https://www.scaleway.com/en/docs/load-balancer/reference-content/acls/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-acls-get-an-acl).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/loadbalancers"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := loadbalancers.NewAcl(ctx, "acl01", &loadbalancers.AclArgs{
//				FrontendId:  pulumi.Any(frt01.Id),
//				Name:        pulumi.String("acl01"),
//				Description: pulumi.String("Exclude well-known IPs"),
//				Index:       pulumi.Int(0),
//				Action: &loadbalancers.AclActionArgs{
//					Type: pulumi.String("allow"),
//				},
//				Match: &loadbalancers.AclMatchArgs{
//					IpSubnets: pulumi.StringArray{
//						pulumi.String("192.168.0.1"),
//						pulumi.String("192.168.0.2"),
//						pulumi.String("192.168.10.0/24"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Load Balancer ACLs can be imported using `{zone}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:loadbalancers/acl:Acl acl01 fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type Acl struct {
	pulumi.CustomResourceState

	// Action to undertake when an ACL filter matches.
	Action AclActionOutput `pulumi:"action"`
	// IsDate and time of ACL's creation (RFC 3339 format)
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The ACL description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the Load Balancer frontend to attach the ACL to.
	FrontendId pulumi.StringOutput `pulumi:"frontendId"`
	// The priority of this ACL (ACLs are applied in ascending order, 0 is the first ACL executed).
	Index pulumi.IntOutput `pulumi:"index"`
	// The ACL match rule. At least `ipSubnet` or `ipsEdgeServices` or `httpFilter` and `httpFilterValue` are required.
	Match AclMatchPtrOutput `pulumi:"match"`
	// The ACL name. If not provided it will be randomly generated.
	Name pulumi.StringOutput `pulumi:"name"`
	// IsDate and time of ACL's update (RFC 3339 format)
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewAcl registers a new resource with the given unique name, arguments, and options.
func NewAcl(ctx *pulumi.Context,
	name string, args *AclArgs, opts ...pulumi.ResourceOption) (*Acl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.FrontendId == nil {
		return nil, errors.New("invalid value for required argument 'FrontendId'")
	}
	if args.Index == nil {
		return nil, errors.New("invalid value for required argument 'Index'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/loadbalancerAcl:LoadbalancerAcl"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Acl
	err := ctx.RegisterResource("scaleway:loadbalancers/acl:Acl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAcl gets an existing Acl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AclState, opts ...pulumi.ResourceOption) (*Acl, error) {
	var resource Acl
	err := ctx.ReadResource("scaleway:loadbalancers/acl:Acl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Acl resources.
type aclState struct {
	// Action to undertake when an ACL filter matches.
	Action *AclAction `pulumi:"action"`
	// IsDate and time of ACL's creation (RFC 3339 format)
	CreatedAt *string `pulumi:"createdAt"`
	// The ACL description.
	Description *string `pulumi:"description"`
	// The ID of the Load Balancer frontend to attach the ACL to.
	FrontendId *string `pulumi:"frontendId"`
	// The priority of this ACL (ACLs are applied in ascending order, 0 is the first ACL executed).
	Index *int `pulumi:"index"`
	// The ACL match rule. At least `ipSubnet` or `ipsEdgeServices` or `httpFilter` and `httpFilterValue` are required.
	Match *AclMatch `pulumi:"match"`
	// The ACL name. If not provided it will be randomly generated.
	Name *string `pulumi:"name"`
	// IsDate and time of ACL's update (RFC 3339 format)
	UpdatedAt *string `pulumi:"updatedAt"`
}

type AclState struct {
	// Action to undertake when an ACL filter matches.
	Action AclActionPtrInput
	// IsDate and time of ACL's creation (RFC 3339 format)
	CreatedAt pulumi.StringPtrInput
	// The ACL description.
	Description pulumi.StringPtrInput
	// The ID of the Load Balancer frontend to attach the ACL to.
	FrontendId pulumi.StringPtrInput
	// The priority of this ACL (ACLs are applied in ascending order, 0 is the first ACL executed).
	Index pulumi.IntPtrInput
	// The ACL match rule. At least `ipSubnet` or `ipsEdgeServices` or `httpFilter` and `httpFilterValue` are required.
	Match AclMatchPtrInput
	// The ACL name. If not provided it will be randomly generated.
	Name pulumi.StringPtrInput
	// IsDate and time of ACL's update (RFC 3339 format)
	UpdatedAt pulumi.StringPtrInput
}

func (AclState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclState)(nil)).Elem()
}

type aclArgs struct {
	// Action to undertake when an ACL filter matches.
	Action AclAction `pulumi:"action"`
	// The ACL description.
	Description *string `pulumi:"description"`
	// The ID of the Load Balancer frontend to attach the ACL to.
	FrontendId string `pulumi:"frontendId"`
	// The priority of this ACL (ACLs are applied in ascending order, 0 is the first ACL executed).
	Index int `pulumi:"index"`
	// The ACL match rule. At least `ipSubnet` or `ipsEdgeServices` or `httpFilter` and `httpFilterValue` are required.
	Match *AclMatch `pulumi:"match"`
	// The ACL name. If not provided it will be randomly generated.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Acl resource.
type AclArgs struct {
	// Action to undertake when an ACL filter matches.
	Action AclActionInput
	// The ACL description.
	Description pulumi.StringPtrInput
	// The ID of the Load Balancer frontend to attach the ACL to.
	FrontendId pulumi.StringInput
	// The priority of this ACL (ACLs are applied in ascending order, 0 is the first ACL executed).
	Index pulumi.IntInput
	// The ACL match rule. At least `ipSubnet` or `ipsEdgeServices` or `httpFilter` and `httpFilterValue` are required.
	Match AclMatchPtrInput
	// The ACL name. If not provided it will be randomly generated.
	Name pulumi.StringPtrInput
}

func (AclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclArgs)(nil)).Elem()
}

type AclInput interface {
	pulumi.Input

	ToAclOutput() AclOutput
	ToAclOutputWithContext(ctx context.Context) AclOutput
}

func (*Acl) ElementType() reflect.Type {
	return reflect.TypeOf((**Acl)(nil)).Elem()
}

func (i *Acl) ToAclOutput() AclOutput {
	return i.ToAclOutputWithContext(context.Background())
}

func (i *Acl) ToAclOutputWithContext(ctx context.Context) AclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclOutput)
}

// AclArrayInput is an input type that accepts AclArray and AclArrayOutput values.
// You can construct a concrete instance of `AclArrayInput` via:
//
//	AclArray{ AclArgs{...} }
type AclArrayInput interface {
	pulumi.Input

	ToAclArrayOutput() AclArrayOutput
	ToAclArrayOutputWithContext(context.Context) AclArrayOutput
}

type AclArray []AclInput

func (AclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Acl)(nil)).Elem()
}

func (i AclArray) ToAclArrayOutput() AclArrayOutput {
	return i.ToAclArrayOutputWithContext(context.Background())
}

func (i AclArray) ToAclArrayOutputWithContext(ctx context.Context) AclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclArrayOutput)
}

// AclMapInput is an input type that accepts AclMap and AclMapOutput values.
// You can construct a concrete instance of `AclMapInput` via:
//
//	AclMap{ "key": AclArgs{...} }
type AclMapInput interface {
	pulumi.Input

	ToAclMapOutput() AclMapOutput
	ToAclMapOutputWithContext(context.Context) AclMapOutput
}

type AclMap map[string]AclInput

func (AclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Acl)(nil)).Elem()
}

func (i AclMap) ToAclMapOutput() AclMapOutput {
	return i.ToAclMapOutputWithContext(context.Background())
}

func (i AclMap) ToAclMapOutputWithContext(ctx context.Context) AclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclMapOutput)
}

type AclOutput struct{ *pulumi.OutputState }

func (AclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Acl)(nil)).Elem()
}

func (o AclOutput) ToAclOutput() AclOutput {
	return o
}

func (o AclOutput) ToAclOutputWithContext(ctx context.Context) AclOutput {
	return o
}

// Action to undertake when an ACL filter matches.
func (o AclOutput) Action() AclActionOutput {
	return o.ApplyT(func(v *Acl) AclActionOutput { return v.Action }).(AclActionOutput)
}

// IsDate and time of ACL's creation (RFC 3339 format)
func (o AclOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ACL description.
func (o AclOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of the Load Balancer frontend to attach the ACL to.
func (o AclOutput) FrontendId() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.FrontendId }).(pulumi.StringOutput)
}

// The priority of this ACL (ACLs are applied in ascending order, 0 is the first ACL executed).
func (o AclOutput) Index() pulumi.IntOutput {
	return o.ApplyT(func(v *Acl) pulumi.IntOutput { return v.Index }).(pulumi.IntOutput)
}

// The ACL match rule. At least `ipSubnet` or `ipsEdgeServices` or `httpFilter` and `httpFilterValue` are required.
func (o AclOutput) Match() AclMatchPtrOutput {
	return o.ApplyT(func(v *Acl) AclMatchPtrOutput { return v.Match }).(AclMatchPtrOutput)
}

// The ACL name. If not provided it will be randomly generated.
func (o AclOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// IsDate and time of ACL's update (RFC 3339 format)
func (o AclOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type AclArrayOutput struct{ *pulumi.OutputState }

func (AclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Acl)(nil)).Elem()
}

func (o AclArrayOutput) ToAclArrayOutput() AclArrayOutput {
	return o
}

func (o AclArrayOutput) ToAclArrayOutputWithContext(ctx context.Context) AclArrayOutput {
	return o
}

func (o AclArrayOutput) Index(i pulumi.IntInput) AclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Acl {
		return vs[0].([]*Acl)[vs[1].(int)]
	}).(AclOutput)
}

type AclMapOutput struct{ *pulumi.OutputState }

func (AclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Acl)(nil)).Elem()
}

func (o AclMapOutput) ToAclMapOutput() AclMapOutput {
	return o
}

func (o AclMapOutput) ToAclMapOutputWithContext(ctx context.Context) AclMapOutput {
	return o
}

func (o AclMapOutput) MapIndex(k pulumi.StringInput) AclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Acl {
		return vs[0].(map[string]*Acl)[vs[1].(string)]
	}).(AclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclInput)(nil)).Elem(), &Acl{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclArrayInput)(nil)).Elem(), AclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclMapInput)(nil)).Elem(), AclMap{})
	pulumi.RegisterOutputType(AclOutput{})
	pulumi.RegisterOutputType(AclArrayOutput{})
	pulumi.RegisterOutputType(AclMapOutput{})
}
