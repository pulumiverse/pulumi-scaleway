// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package loadbalancers

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Load Balancer frontends.
//
// For more information, see the [main documentation](https://www.scaleway.com/en/docs/load-balancer/reference-content/configuring-frontends/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-frontends).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/loadbalancers"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := loadbalancers.NewFrontend(ctx, "frontend01", &loadbalancers.FrontendArgs{
//				LbId:        pulumi.Any(lb01.Id),
//				BackendId:   pulumi.Any(backend01.Id),
//				Name:        pulumi.String("frontend01"),
//				InboundPort: pulumi.Int(80),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## With ACLs
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/loadbalancers"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := loadbalancers.NewFrontend(ctx, "frontend01", &loadbalancers.FrontendArgs{
//				LbId:        pulumi.Any(lb01.Id),
//				BackendId:   pulumi.Any(backend01.Id),
//				Name:        pulumi.String("frontend01"),
//				InboundPort: pulumi.Int(80),
//				Acls: loadbalancers.FrontendAclArray{
//					&loadbalancers.FrontendAclArgs{
//						Name: pulumi.String("blacklist wellknwon IPs"),
//						Action: &loadbalancers.FrontendAclActionArgs{
//							Type: pulumi.String("allow"),
//						},
//						Match: &loadbalancers.FrontendAclMatchArgs{
//							IpSubnets: pulumi.StringArray{
//								pulumi.String("192.168.0.1"),
//								pulumi.String("192.168.0.2"),
//								pulumi.String("192.168.10.0/24"),
//							},
//						},
//					},
//					&loadbalancers.FrontendAclArgs{
//						Action: &loadbalancers.FrontendAclActionArgs{
//							Type: pulumi.String("deny"),
//						},
//						Match: &loadbalancers.FrontendAclMatchArgs{
//							IpSubnets: pulumi.StringArray{
//								pulumi.String("51.51.51.51"),
//							},
//							HttpFilter: pulumi.String("regex"),
//							HttpFilterValues: pulumi.StringArray{
//								pulumi.String("^foo*bar$"),
//							},
//						},
//					},
//					&loadbalancers.FrontendAclArgs{
//						Action: &loadbalancers.FrontendAclActionArgs{
//							Type: pulumi.String("allow"),
//						},
//						Match: &loadbalancers.FrontendAclMatchArgs{
//							HttpFilter: pulumi.String("path_begin"),
//							HttpFilterValues: pulumi.StringArray{
//								pulumi.String("foo"),
//								pulumi.String("bar"),
//							},
//						},
//					},
//					&loadbalancers.FrontendAclArgs{
//						Action: &loadbalancers.FrontendAclActionArgs{
//							Type: pulumi.String("allow"),
//						},
//						Match: &loadbalancers.FrontendAclMatchArgs{
//							HttpFilter: pulumi.String("path_begin"),
//							HttpFilterValues: pulumi.StringArray{
//								pulumi.String("hi"),
//							},
//							Invert: pulumi.Bool(true),
//						},
//					},
//					&loadbalancers.FrontendAclArgs{
//						Action: &loadbalancers.FrontendAclActionArgs{
//							Type: pulumi.String("allow"),
//						},
//						Match: &loadbalancers.FrontendAclMatchArgs{
//							HttpFilter:       pulumi.String("http_header_match"),
//							HttpFilterValues: pulumi.StringArray("foo"),
//							HttpFilterOption: pulumi.String("bar"),
//						},
//					},
//					&loadbalancers.FrontendAclArgs{
//						Action: &loadbalancers.FrontendAclActionArgs{
//							Type: pulumi.String("redirect"),
//							Redirects: loadbalancers.FrontendAclActionRedirectArray{
//								&loadbalancers.FrontendAclActionRedirectArgs{
//									Type:   pulumi.String("location"),
//									Target: pulumi.String("https://example.com"),
//									Code:   pulumi.Int(307),
//								},
//							},
//						},
//						Match: &loadbalancers.FrontendAclMatchArgs{
//							IpSubnets: pulumi.StringArray{
//								pulumi.String("10.0.0.10"),
//							},
//							HttpFilter: pulumi.String("path_begin"),
//							HttpFilterValues: pulumi.StringArray{
//								pulumi.String("foo"),
//								pulumi.String("bar"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Load Balancer frontends can be imported using `{zone}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:loadbalancers/frontend:Frontend frontend01 fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type Frontend struct {
	pulumi.CustomResourceState

	// A list of ACL rules to apply to the Load Balancer frontend.  Defined below.
	Acls FrontendAclArrayOutput `pulumi:"acls"`
	// The ID of the Load Balancer backend this frontend is attached to.
	//
	// > **Important:** Updates to `lbId` or `backendId` will recreate the frontend.
	BackendId pulumi.StringOutput `pulumi:"backendId"`
	// (Deprecated, use `certificateIds` instead) First certificate ID used by the frontend.
	//
	// Deprecated: Please use certificate_ids
	CertificateId pulumi.StringOutput `pulumi:"certificateId"`
	// List of certificate IDs that should be used by the frontend.
	//
	// > **Important:** Certificates are not allowed on port 80.
	CertificateIds pulumi.StringArrayOutput `pulumi:"certificateIds"`
	// The rate limit for new connections established on this frontend. Use 0 value to disable, else value is connections per second.
	ConnectionRateLimit pulumi.IntPtrOutput `pulumi:"connectionRateLimit"`
	// Activates HTTP/3 protocol.
	EnableHttp3 pulumi.BoolPtrOutput `pulumi:"enableHttp3"`
	// A boolean to specify whether to use lb_acl.
	// If `externalAcls` is set to `true`, `acl` can not be set directly in the Load Balancer frontend.
	ExternalAcls pulumi.BoolPtrOutput `pulumi:"externalAcls"`
	// TCP port to listen to on the front side.
	InboundPort pulumi.IntOutput `pulumi:"inboundPort"`
	// The ID of the Load Balancer this frontend is attached to.
	LbId pulumi.StringOutput `pulumi:"lbId"`
	// The ACL name. If not provided it will be randomly generated.
	Name pulumi.StringOutput `pulumi:"name"`
	// Maximum inactivity time on the client side. (e.g. `1s`)
	TimeoutClient pulumi.StringPtrOutput `pulumi:"timeoutClient"`
}

// NewFrontend registers a new resource with the given unique name, arguments, and options.
func NewFrontend(ctx *pulumi.Context,
	name string, args *FrontendArgs, opts ...pulumi.ResourceOption) (*Frontend, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackendId == nil {
		return nil, errors.New("invalid value for required argument 'BackendId'")
	}
	if args.InboundPort == nil {
		return nil, errors.New("invalid value for required argument 'InboundPort'")
	}
	if args.LbId == nil {
		return nil, errors.New("invalid value for required argument 'LbId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/loadbalancerFrontend:LoadbalancerFrontend"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Frontend
	err := ctx.RegisterResource("scaleway:loadbalancers/frontend:Frontend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFrontend gets an existing Frontend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFrontend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FrontendState, opts ...pulumi.ResourceOption) (*Frontend, error) {
	var resource Frontend
	err := ctx.ReadResource("scaleway:loadbalancers/frontend:Frontend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Frontend resources.
type frontendState struct {
	// A list of ACL rules to apply to the Load Balancer frontend.  Defined below.
	Acls []FrontendAcl `pulumi:"acls"`
	// The ID of the Load Balancer backend this frontend is attached to.
	//
	// > **Important:** Updates to `lbId` or `backendId` will recreate the frontend.
	BackendId *string `pulumi:"backendId"`
	// (Deprecated, use `certificateIds` instead) First certificate ID used by the frontend.
	//
	// Deprecated: Please use certificate_ids
	CertificateId *string `pulumi:"certificateId"`
	// List of certificate IDs that should be used by the frontend.
	//
	// > **Important:** Certificates are not allowed on port 80.
	CertificateIds []string `pulumi:"certificateIds"`
	// The rate limit for new connections established on this frontend. Use 0 value to disable, else value is connections per second.
	ConnectionRateLimit *int `pulumi:"connectionRateLimit"`
	// Activates HTTP/3 protocol.
	EnableHttp3 *bool `pulumi:"enableHttp3"`
	// A boolean to specify whether to use lb_acl.
	// If `externalAcls` is set to `true`, `acl` can not be set directly in the Load Balancer frontend.
	ExternalAcls *bool `pulumi:"externalAcls"`
	// TCP port to listen to on the front side.
	InboundPort *int `pulumi:"inboundPort"`
	// The ID of the Load Balancer this frontend is attached to.
	LbId *string `pulumi:"lbId"`
	// The ACL name. If not provided it will be randomly generated.
	Name *string `pulumi:"name"`
	// Maximum inactivity time on the client side. (e.g. `1s`)
	TimeoutClient *string `pulumi:"timeoutClient"`
}

type FrontendState struct {
	// A list of ACL rules to apply to the Load Balancer frontend.  Defined below.
	Acls FrontendAclArrayInput
	// The ID of the Load Balancer backend this frontend is attached to.
	//
	// > **Important:** Updates to `lbId` or `backendId` will recreate the frontend.
	BackendId pulumi.StringPtrInput
	// (Deprecated, use `certificateIds` instead) First certificate ID used by the frontend.
	//
	// Deprecated: Please use certificate_ids
	CertificateId pulumi.StringPtrInput
	// List of certificate IDs that should be used by the frontend.
	//
	// > **Important:** Certificates are not allowed on port 80.
	CertificateIds pulumi.StringArrayInput
	// The rate limit for new connections established on this frontend. Use 0 value to disable, else value is connections per second.
	ConnectionRateLimit pulumi.IntPtrInput
	// Activates HTTP/3 protocol.
	EnableHttp3 pulumi.BoolPtrInput
	// A boolean to specify whether to use lb_acl.
	// If `externalAcls` is set to `true`, `acl` can not be set directly in the Load Balancer frontend.
	ExternalAcls pulumi.BoolPtrInput
	// TCP port to listen to on the front side.
	InboundPort pulumi.IntPtrInput
	// The ID of the Load Balancer this frontend is attached to.
	LbId pulumi.StringPtrInput
	// The ACL name. If not provided it will be randomly generated.
	Name pulumi.StringPtrInput
	// Maximum inactivity time on the client side. (e.g. `1s`)
	TimeoutClient pulumi.StringPtrInput
}

func (FrontendState) ElementType() reflect.Type {
	return reflect.TypeOf((*frontendState)(nil)).Elem()
}

type frontendArgs struct {
	// A list of ACL rules to apply to the Load Balancer frontend.  Defined below.
	Acls []FrontendAcl `pulumi:"acls"`
	// The ID of the Load Balancer backend this frontend is attached to.
	//
	// > **Important:** Updates to `lbId` or `backendId` will recreate the frontend.
	BackendId string `pulumi:"backendId"`
	// List of certificate IDs that should be used by the frontend.
	//
	// > **Important:** Certificates are not allowed on port 80.
	CertificateIds []string `pulumi:"certificateIds"`
	// The rate limit for new connections established on this frontend. Use 0 value to disable, else value is connections per second.
	ConnectionRateLimit *int `pulumi:"connectionRateLimit"`
	// Activates HTTP/3 protocol.
	EnableHttp3 *bool `pulumi:"enableHttp3"`
	// A boolean to specify whether to use lb_acl.
	// If `externalAcls` is set to `true`, `acl` can not be set directly in the Load Balancer frontend.
	ExternalAcls *bool `pulumi:"externalAcls"`
	// TCP port to listen to on the front side.
	InboundPort int `pulumi:"inboundPort"`
	// The ID of the Load Balancer this frontend is attached to.
	LbId string `pulumi:"lbId"`
	// The ACL name. If not provided it will be randomly generated.
	Name *string `pulumi:"name"`
	// Maximum inactivity time on the client side. (e.g. `1s`)
	TimeoutClient *string `pulumi:"timeoutClient"`
}

// The set of arguments for constructing a Frontend resource.
type FrontendArgs struct {
	// A list of ACL rules to apply to the Load Balancer frontend.  Defined below.
	Acls FrontendAclArrayInput
	// The ID of the Load Balancer backend this frontend is attached to.
	//
	// > **Important:** Updates to `lbId` or `backendId` will recreate the frontend.
	BackendId pulumi.StringInput
	// List of certificate IDs that should be used by the frontend.
	//
	// > **Important:** Certificates are not allowed on port 80.
	CertificateIds pulumi.StringArrayInput
	// The rate limit for new connections established on this frontend. Use 0 value to disable, else value is connections per second.
	ConnectionRateLimit pulumi.IntPtrInput
	// Activates HTTP/3 protocol.
	EnableHttp3 pulumi.BoolPtrInput
	// A boolean to specify whether to use lb_acl.
	// If `externalAcls` is set to `true`, `acl` can not be set directly in the Load Balancer frontend.
	ExternalAcls pulumi.BoolPtrInput
	// TCP port to listen to on the front side.
	InboundPort pulumi.IntInput
	// The ID of the Load Balancer this frontend is attached to.
	LbId pulumi.StringInput
	// The ACL name. If not provided it will be randomly generated.
	Name pulumi.StringPtrInput
	// Maximum inactivity time on the client side. (e.g. `1s`)
	TimeoutClient pulumi.StringPtrInput
}

func (FrontendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*frontendArgs)(nil)).Elem()
}

type FrontendInput interface {
	pulumi.Input

	ToFrontendOutput() FrontendOutput
	ToFrontendOutputWithContext(ctx context.Context) FrontendOutput
}

func (*Frontend) ElementType() reflect.Type {
	return reflect.TypeOf((**Frontend)(nil)).Elem()
}

func (i *Frontend) ToFrontendOutput() FrontendOutput {
	return i.ToFrontendOutputWithContext(context.Background())
}

func (i *Frontend) ToFrontendOutputWithContext(ctx context.Context) FrontendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendOutput)
}

// FrontendArrayInput is an input type that accepts FrontendArray and FrontendArrayOutput values.
// You can construct a concrete instance of `FrontendArrayInput` via:
//
//	FrontendArray{ FrontendArgs{...} }
type FrontendArrayInput interface {
	pulumi.Input

	ToFrontendArrayOutput() FrontendArrayOutput
	ToFrontendArrayOutputWithContext(context.Context) FrontendArrayOutput
}

type FrontendArray []FrontendInput

func (FrontendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Frontend)(nil)).Elem()
}

func (i FrontendArray) ToFrontendArrayOutput() FrontendArrayOutput {
	return i.ToFrontendArrayOutputWithContext(context.Background())
}

func (i FrontendArray) ToFrontendArrayOutputWithContext(ctx context.Context) FrontendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendArrayOutput)
}

// FrontendMapInput is an input type that accepts FrontendMap and FrontendMapOutput values.
// You can construct a concrete instance of `FrontendMapInput` via:
//
//	FrontendMap{ "key": FrontendArgs{...} }
type FrontendMapInput interface {
	pulumi.Input

	ToFrontendMapOutput() FrontendMapOutput
	ToFrontendMapOutputWithContext(context.Context) FrontendMapOutput
}

type FrontendMap map[string]FrontendInput

func (FrontendMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Frontend)(nil)).Elem()
}

func (i FrontendMap) ToFrontendMapOutput() FrontendMapOutput {
	return i.ToFrontendMapOutputWithContext(context.Background())
}

func (i FrontendMap) ToFrontendMapOutputWithContext(ctx context.Context) FrontendMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendMapOutput)
}

type FrontendOutput struct{ *pulumi.OutputState }

func (FrontendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Frontend)(nil)).Elem()
}

func (o FrontendOutput) ToFrontendOutput() FrontendOutput {
	return o
}

func (o FrontendOutput) ToFrontendOutputWithContext(ctx context.Context) FrontendOutput {
	return o
}

// A list of ACL rules to apply to the Load Balancer frontend.  Defined below.
func (o FrontendOutput) Acls() FrontendAclArrayOutput {
	return o.ApplyT(func(v *Frontend) FrontendAclArrayOutput { return v.Acls }).(FrontendAclArrayOutput)
}

// The ID of the Load Balancer backend this frontend is attached to.
//
// > **Important:** Updates to `lbId` or `backendId` will recreate the frontend.
func (o FrontendOutput) BackendId() pulumi.StringOutput {
	return o.ApplyT(func(v *Frontend) pulumi.StringOutput { return v.BackendId }).(pulumi.StringOutput)
}

// (Deprecated, use `certificateIds` instead) First certificate ID used by the frontend.
//
// Deprecated: Please use certificate_ids
func (o FrontendOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *Frontend) pulumi.StringOutput { return v.CertificateId }).(pulumi.StringOutput)
}

// List of certificate IDs that should be used by the frontend.
//
// > **Important:** Certificates are not allowed on port 80.
func (o FrontendOutput) CertificateIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Frontend) pulumi.StringArrayOutput { return v.CertificateIds }).(pulumi.StringArrayOutput)
}

// The rate limit for new connections established on this frontend. Use 0 value to disable, else value is connections per second.
func (o FrontendOutput) ConnectionRateLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Frontend) pulumi.IntPtrOutput { return v.ConnectionRateLimit }).(pulumi.IntPtrOutput)
}

// Activates HTTP/3 protocol.
func (o FrontendOutput) EnableHttp3() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Frontend) pulumi.BoolPtrOutput { return v.EnableHttp3 }).(pulumi.BoolPtrOutput)
}

// A boolean to specify whether to use lb_acl.
// If `externalAcls` is set to `true`, `acl` can not be set directly in the Load Balancer frontend.
func (o FrontendOutput) ExternalAcls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Frontend) pulumi.BoolPtrOutput { return v.ExternalAcls }).(pulumi.BoolPtrOutput)
}

// TCP port to listen to on the front side.
func (o FrontendOutput) InboundPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Frontend) pulumi.IntOutput { return v.InboundPort }).(pulumi.IntOutput)
}

// The ID of the Load Balancer this frontend is attached to.
func (o FrontendOutput) LbId() pulumi.StringOutput {
	return o.ApplyT(func(v *Frontend) pulumi.StringOutput { return v.LbId }).(pulumi.StringOutput)
}

// The ACL name. If not provided it will be randomly generated.
func (o FrontendOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Frontend) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Maximum inactivity time on the client side. (e.g. `1s`)
func (o FrontendOutput) TimeoutClient() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Frontend) pulumi.StringPtrOutput { return v.TimeoutClient }).(pulumi.StringPtrOutput)
}

type FrontendArrayOutput struct{ *pulumi.OutputState }

func (FrontendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Frontend)(nil)).Elem()
}

func (o FrontendArrayOutput) ToFrontendArrayOutput() FrontendArrayOutput {
	return o
}

func (o FrontendArrayOutput) ToFrontendArrayOutputWithContext(ctx context.Context) FrontendArrayOutput {
	return o
}

func (o FrontendArrayOutput) Index(i pulumi.IntInput) FrontendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Frontend {
		return vs[0].([]*Frontend)[vs[1].(int)]
	}).(FrontendOutput)
}

type FrontendMapOutput struct{ *pulumi.OutputState }

func (FrontendMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Frontend)(nil)).Elem()
}

func (o FrontendMapOutput) ToFrontendMapOutput() FrontendMapOutput {
	return o
}

func (o FrontendMapOutput) ToFrontendMapOutputWithContext(ctx context.Context) FrontendMapOutput {
	return o
}

func (o FrontendMapOutput) MapIndex(k pulumi.StringInput) FrontendOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Frontend {
		return vs[0].(map[string]*Frontend)[vs[1].(string)]
	}).(FrontendOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FrontendInput)(nil)).Elem(), &Frontend{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontendArrayInput)(nil)).Elem(), FrontendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontendMapInput)(nil)).Elem(), FrontendMap{})
	pulumi.RegisterOutputType(FrontendOutput{})
	pulumi.RegisterOutputType(FrontendArrayOutput{})
	pulumi.RegisterOutputType(FrontendMapOutput{})
}
