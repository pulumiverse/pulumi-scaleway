// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package loadbalancers

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Get information about Scaleway Load Balancer routes.
//
// For more information, see the [main documentation](https://www.scaleway.com/en/docs/load-balancer/how-to/create-manage-routes/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-route).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/loadbalancers"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			ip01, err := loadbalancers.NewIp(ctx, "ip01", nil)
//			if err != nil {
//				return err
//			}
//			lb01, err := loadbalancers.NewLoadBalancer(ctx, "lb01", &loadbalancers.LoadBalancerArgs{
//				IpId: ip01.ID(),
//				Name: pulumi.String("test-lb"),
//				Type: pulumi.String("lb-s"),
//			})
//			if err != nil {
//				return err
//			}
//			bkd01, err := loadbalancers.NewBackend(ctx, "bkd01", &loadbalancers.BackendArgs{
//				LbId:            lb01.ID(),
//				ForwardProtocol: pulumi.String("tcp"),
//				ForwardPort:     pulumi.Int(80),
//				ProxyProtocol:   pulumi.String("none"),
//			})
//			if err != nil {
//				return err
//			}
//			frt01, err := loadbalancers.NewFrontend(ctx, "frt01", &loadbalancers.FrontendArgs{
//				LbId:        lb01.ID(),
//				BackendId:   bkd01.ID(),
//				InboundPort: pulumi.Int(80),
//			})
//			if err != nil {
//				return err
//			}
//			rt01, err := loadbalancers.NewRoute(ctx, "rt01", &loadbalancers.RouteArgs{
//				FrontendId: frt01.ID(),
//				BackendId:  bkd01.ID(),
//				MatchSni:   pulumi.String("sni.scaleway.com"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = loadbalancers.LookupRouteOutput(ctx, loadbalancers.GetRouteOutputArgs{
//				RouteId: rt01.ID(),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func LookupRoute(ctx *pulumi.Context, args *LookupRouteArgs, opts ...pulumi.InvokeOption) (*LookupRouteResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRouteResult
	err := ctx.Invoke("scaleway:loadbalancers/getRoute:getRoute", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRoute.
type LookupRouteArgs struct {
	// The route ID.
	RouteId string `pulumi:"routeId"`
}

// A collection of values returned by getRoute.
type LookupRouteResult struct {
	BackendId  string `pulumi:"backendId"`
	CreatedAt  string `pulumi:"createdAt"`
	FrontendId string `pulumi:"frontendId"`
	// The provider-assigned unique ID for this managed resource.
	Id              string `pulumi:"id"`
	MatchHostHeader string `pulumi:"matchHostHeader"`
	MatchSni        string `pulumi:"matchSni"`
	RouteId         string `pulumi:"routeId"`
	UpdatedAt       string `pulumi:"updatedAt"`
}

func LookupRouteOutput(ctx *pulumi.Context, args LookupRouteOutputArgs, opts ...pulumi.InvokeOption) LookupRouteResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRouteResultOutput, error) {
			args := v.(LookupRouteArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("scaleway:loadbalancers/getRoute:getRoute", args, LookupRouteResultOutput{}, options).(LookupRouteResultOutput), nil
		}).(LookupRouteResultOutput)
}

// A collection of arguments for invoking getRoute.
type LookupRouteOutputArgs struct {
	// The route ID.
	RouteId pulumi.StringInput `pulumi:"routeId"`
}

func (LookupRouteOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRouteArgs)(nil)).Elem()
}

// A collection of values returned by getRoute.
type LookupRouteResultOutput struct{ *pulumi.OutputState }

func (LookupRouteResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRouteResult)(nil)).Elem()
}

func (o LookupRouteResultOutput) ToLookupRouteResultOutput() LookupRouteResultOutput {
	return o
}

func (o LookupRouteResultOutput) ToLookupRouteResultOutputWithContext(ctx context.Context) LookupRouteResultOutput {
	return o
}

func (o LookupRouteResultOutput) BackendId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteResult) string { return v.BackendId }).(pulumi.StringOutput)
}

func (o LookupRouteResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o LookupRouteResultOutput) FrontendId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteResult) string { return v.FrontendId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRouteResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRouteResultOutput) MatchHostHeader() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteResult) string { return v.MatchHostHeader }).(pulumi.StringOutput)
}

func (o LookupRouteResultOutput) MatchSni() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteResult) string { return v.MatchSni }).(pulumi.StringOutput)
}

func (o LookupRouteResultOutput) RouteId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteResult) string { return v.RouteId }).(pulumi.StringOutput)
}

func (o LookupRouteResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRouteResultOutput{})
}
