// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package loadbalancers

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Load Balancers.
//
// For more information, see the [main documentation](https://www.scaleway.com/en/docs/load-balancer/concepts/#load-balancers) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-load-balancer-list-load-balancers).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/loadbalancers"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := loadbalancers.NewIp(ctx, "main", &loadbalancers.IpArgs{
//				Zone: pulumi.String("fr-par-1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = loadbalancers.NewLoadBalancer(ctx, "base", &loadbalancers.LoadBalancerArgs{
//				IpIds: pulumi.StringArray{
//					main.ID(),
//				},
//				Zone: main.Zone,
//				Type: pulumi.String("LB-S"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Private LB
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/loadbalancers"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := loadbalancers.NewLoadBalancer(ctx, "base", &loadbalancers.LoadBalancerArgs{
//				Name:             pulumi.String("private-lb"),
//				Type:             pulumi.String("LB-S"),
//				AssignFlexibleIp: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With IPv6
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/loadbalancers"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			v4, err := loadbalancers.NewIp(ctx, "v4", nil)
//			if err != nil {
//				return err
//			}
//			v6, err := loadbalancers.NewIp(ctx, "v6", &loadbalancers.IpArgs{
//				IsIpv6: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = loadbalancers.NewLoadBalancer(ctx, "main", &loadbalancers.LoadBalancerArgs{
//				IpIds: pulumi.StringArray{
//					v4.ID(),
//					v6.ID(),
//				},
//				Name: pulumi.String("ipv6-lb"),
//				Type: pulumi.String("LB-S"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With IPAM IDs
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/ipam"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/loadbalancers"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/network"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			vpc01, err := network.NewVpc(ctx, "vpc01", &network.VpcArgs{
//				Name: pulumi.String("my vpc"),
//			})
//			if err != nil {
//				return err
//			}
//			pn01, err := network.NewPrivateNetwork(ctx, "pn01", &network.PrivateNetworkArgs{
//				VpcId: vpc01.ID(),
//				Ipv4Subnet: &network.PrivateNetworkIpv4SubnetArgs{
//					Subnet: pulumi.String("172.16.32.0/22"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ip01, err := ipam.NewIp(ctx, "ip01", &ipam.IpArgs{
//				Address: pulumi.String("172.16.32.7"),
//				Sources: ipam.IpSourceArray{
//					&ipam.IpSourceArgs{
//						PrivateNetworkId: pn01.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			v4, err := loadbalancers.NewIp(ctx, "v4", nil)
//			if err != nil {
//				return err
//			}
//			_, err = loadbalancers.NewLoadBalancer(ctx, "lb01", &loadbalancers.LoadBalancerArgs{
//				IpIds: pulumi.StringArray{
//					v4.ID(),
//				},
//				Name: pulumi.String("my-lb"),
//				Type: pulumi.String("LB-S"),
//				PrivateNetworks: loadbalancers.LoadBalancerPrivateNetworkArray{
//					&loadbalancers.LoadBalancerPrivateNetworkArgs{
//						PrivateNetworkId: pn01.ID(),
//						IpamIds:          ip01.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Migration
//
// In order to migrate to other Load Balancer types, you can check upwards or downwards migration via our CLI `scw lb lb-types list`.
// This change will not recreate your Load Balancer.
//
// Please check our [documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-load-balancer-migrate-a-load-balancer) for further details.
//
// ## Import
//
// Load Balancers can be imported using `{zone}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:loadbalancers/loadBalancer:LoadBalancer main fr-par-1/11111111-1111-1111-1111-111111111111
// ```
//
// Be aware that you will also need to import the `scaleway_lb_ip` resource.
type LoadBalancer struct {
	pulumi.CustomResourceState

	// Defines whether to automatically assign a flexible public IPv4 to the Load Balancer.
	AssignFlexibleIp pulumi.BoolPtrOutput `pulumi:"assignFlexibleIp"`
	// Defines whether to automatically assign a flexible public IPv6 to the Load Balancer.
	AssignFlexibleIpv6 pulumi.BoolPtrOutput `pulumi:"assignFlexibleIpv6"`
	// The description of the Load Balancer.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Load Balancer public IPv4 address.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// Please use `ipIds`. The ID of the associated Load Balancer IP. See below.
	//
	// > **Important:** Updates to `ipId` will recreate the Load Balancer.
	//
	// Deprecated: Please use ip_ids
	IpId pulumi.StringOutput `pulumi:"ipId"`
	// The List of IP IDs to attach to the Load Balancer.
	//
	// > **Important:** Make sure to use a `loadbalancers.Ip` resource to create the IPs.
	IpIds pulumi.StringArrayOutput `pulumi:"ipIds"`
	// The Load Balancer public IPv6 address.
	Ipv6Address pulumi.StringOutput `pulumi:"ipv6Address"`
	// The name of the Load Balancer.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Organization ID the Load Balancer is associated with.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The list of private IPv4 and IPv6 addresses associated with the resource.
	PrivateIps LoadBalancerPrivateIpArrayOutput `pulumi:"privateIps"`
	// List of private network to connect with your load balancer.
	PrivateNetworks LoadBalancerPrivateNetworkArrayOutput `pulumi:"privateNetworks"`
	// `projectId`) The ID of the Project the Load Balancer is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The region of the resource
	Region pulumi.StringOutput `pulumi:"region"`
	// The `releaseIp` allow the release of the IP address associated with the Load Balancer.
	//
	// Deprecated: The resource ip will be destroyed by it's own resource. Please set this to `false`
	ReleaseIp pulumi.BoolPtrOutput `pulumi:"releaseIp"`
	// Enforces minimal SSL version (in SSL/TLS offloading context). Please check [possible values](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-load-balancer-create-a-load-balancer).
	SslCompatibilityLevel pulumi.StringPtrOutput `pulumi:"sslCompatibilityLevel"`
	// The tags associated with the Load Balancer.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The type of the Load Balancer. Please check the migration section to upgrade the type.
	Type pulumi.StringOutput `pulumi:"type"`
	// `zone`) The zone of the Load Balancer.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewLoadBalancer registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancer(ctx *pulumi.Context,
	name string, args *LoadBalancerArgs, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/loadbalancer:Loadbalancer"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadBalancer
	err := ctx.RegisterResource("scaleway:loadbalancers/loadBalancer:LoadBalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancer gets an existing LoadBalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerState, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	var resource LoadBalancer
	err := ctx.ReadResource("scaleway:loadbalancers/loadBalancer:LoadBalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancer resources.
type loadBalancerState struct {
	// Defines whether to automatically assign a flexible public IPv4 to the Load Balancer.
	AssignFlexibleIp *bool `pulumi:"assignFlexibleIp"`
	// Defines whether to automatically assign a flexible public IPv6 to the Load Balancer.
	AssignFlexibleIpv6 *bool `pulumi:"assignFlexibleIpv6"`
	// The description of the Load Balancer.
	Description *string `pulumi:"description"`
	// The Load Balancer public IPv4 address.
	IpAddress *string `pulumi:"ipAddress"`
	// Please use `ipIds`. The ID of the associated Load Balancer IP. See below.
	//
	// > **Important:** Updates to `ipId` will recreate the Load Balancer.
	//
	// Deprecated: Please use ip_ids
	IpId *string `pulumi:"ipId"`
	// The List of IP IDs to attach to the Load Balancer.
	//
	// > **Important:** Make sure to use a `loadbalancers.Ip` resource to create the IPs.
	IpIds []string `pulumi:"ipIds"`
	// The Load Balancer public IPv6 address.
	Ipv6Address *string `pulumi:"ipv6Address"`
	// The name of the Load Balancer.
	Name *string `pulumi:"name"`
	// The ID of the Organization ID the Load Balancer is associated with.
	OrganizationId *string `pulumi:"organizationId"`
	// The list of private IPv4 and IPv6 addresses associated with the resource.
	PrivateIps []LoadBalancerPrivateIp `pulumi:"privateIps"`
	// List of private network to connect with your load balancer.
	PrivateNetworks []LoadBalancerPrivateNetwork `pulumi:"privateNetworks"`
	// `projectId`) The ID of the Project the Load Balancer is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The region of the resource
	Region *string `pulumi:"region"`
	// The `releaseIp` allow the release of the IP address associated with the Load Balancer.
	//
	// Deprecated: The resource ip will be destroyed by it's own resource. Please set this to `false`
	ReleaseIp *bool `pulumi:"releaseIp"`
	// Enforces minimal SSL version (in SSL/TLS offloading context). Please check [possible values](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-load-balancer-create-a-load-balancer).
	SslCompatibilityLevel *string `pulumi:"sslCompatibilityLevel"`
	// The tags associated with the Load Balancer.
	Tags []string `pulumi:"tags"`
	// The type of the Load Balancer. Please check the migration section to upgrade the type.
	Type *string `pulumi:"type"`
	// `zone`) The zone of the Load Balancer.
	Zone *string `pulumi:"zone"`
}

type LoadBalancerState struct {
	// Defines whether to automatically assign a flexible public IPv4 to the Load Balancer.
	AssignFlexibleIp pulumi.BoolPtrInput
	// Defines whether to automatically assign a flexible public IPv6 to the Load Balancer.
	AssignFlexibleIpv6 pulumi.BoolPtrInput
	// The description of the Load Balancer.
	Description pulumi.StringPtrInput
	// The Load Balancer public IPv4 address.
	IpAddress pulumi.StringPtrInput
	// Please use `ipIds`. The ID of the associated Load Balancer IP. See below.
	//
	// > **Important:** Updates to `ipId` will recreate the Load Balancer.
	//
	// Deprecated: Please use ip_ids
	IpId pulumi.StringPtrInput
	// The List of IP IDs to attach to the Load Balancer.
	//
	// > **Important:** Make sure to use a `loadbalancers.Ip` resource to create the IPs.
	IpIds pulumi.StringArrayInput
	// The Load Balancer public IPv6 address.
	Ipv6Address pulumi.StringPtrInput
	// The name of the Load Balancer.
	Name pulumi.StringPtrInput
	// The ID of the Organization ID the Load Balancer is associated with.
	OrganizationId pulumi.StringPtrInput
	// The list of private IPv4 and IPv6 addresses associated with the resource.
	PrivateIps LoadBalancerPrivateIpArrayInput
	// List of private network to connect with your load balancer.
	PrivateNetworks LoadBalancerPrivateNetworkArrayInput
	// `projectId`) The ID of the Project the Load Balancer is associated with.
	ProjectId pulumi.StringPtrInput
	// The region of the resource
	Region pulumi.StringPtrInput
	// The `releaseIp` allow the release of the IP address associated with the Load Balancer.
	//
	// Deprecated: The resource ip will be destroyed by it's own resource. Please set this to `false`
	ReleaseIp pulumi.BoolPtrInput
	// Enforces minimal SSL version (in SSL/TLS offloading context). Please check [possible values](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-load-balancer-create-a-load-balancer).
	SslCompatibilityLevel pulumi.StringPtrInput
	// The tags associated with the Load Balancer.
	Tags pulumi.StringArrayInput
	// The type of the Load Balancer. Please check the migration section to upgrade the type.
	Type pulumi.StringPtrInput
	// `zone`) The zone of the Load Balancer.
	Zone pulumi.StringPtrInput
}

func (LoadBalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerState)(nil)).Elem()
}

type loadBalancerArgs struct {
	// Defines whether to automatically assign a flexible public IPv4 to the Load Balancer.
	AssignFlexibleIp *bool `pulumi:"assignFlexibleIp"`
	// Defines whether to automatically assign a flexible public IPv6 to the Load Balancer.
	AssignFlexibleIpv6 *bool `pulumi:"assignFlexibleIpv6"`
	// The description of the Load Balancer.
	Description *string `pulumi:"description"`
	// Please use `ipIds`. The ID of the associated Load Balancer IP. See below.
	//
	// > **Important:** Updates to `ipId` will recreate the Load Balancer.
	//
	// Deprecated: Please use ip_ids
	IpId *string `pulumi:"ipId"`
	// The List of IP IDs to attach to the Load Balancer.
	//
	// > **Important:** Make sure to use a `loadbalancers.Ip` resource to create the IPs.
	IpIds []string `pulumi:"ipIds"`
	// The name of the Load Balancer.
	Name *string `pulumi:"name"`
	// List of private network to connect with your load balancer.
	PrivateNetworks []LoadBalancerPrivateNetwork `pulumi:"privateNetworks"`
	// `projectId`) The ID of the Project the Load Balancer is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The `releaseIp` allow the release of the IP address associated with the Load Balancer.
	//
	// Deprecated: The resource ip will be destroyed by it's own resource. Please set this to `false`
	ReleaseIp *bool `pulumi:"releaseIp"`
	// Enforces minimal SSL version (in SSL/TLS offloading context). Please check [possible values](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-load-balancer-create-a-load-balancer).
	SslCompatibilityLevel *string `pulumi:"sslCompatibilityLevel"`
	// The tags associated with the Load Balancer.
	Tags []string `pulumi:"tags"`
	// The type of the Load Balancer. Please check the migration section to upgrade the type.
	Type string `pulumi:"type"`
	// `zone`) The zone of the Load Balancer.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a LoadBalancer resource.
type LoadBalancerArgs struct {
	// Defines whether to automatically assign a flexible public IPv4 to the Load Balancer.
	AssignFlexibleIp pulumi.BoolPtrInput
	// Defines whether to automatically assign a flexible public IPv6 to the Load Balancer.
	AssignFlexibleIpv6 pulumi.BoolPtrInput
	// The description of the Load Balancer.
	Description pulumi.StringPtrInput
	// Please use `ipIds`. The ID of the associated Load Balancer IP. See below.
	//
	// > **Important:** Updates to `ipId` will recreate the Load Balancer.
	//
	// Deprecated: Please use ip_ids
	IpId pulumi.StringPtrInput
	// The List of IP IDs to attach to the Load Balancer.
	//
	// > **Important:** Make sure to use a `loadbalancers.Ip` resource to create the IPs.
	IpIds pulumi.StringArrayInput
	// The name of the Load Balancer.
	Name pulumi.StringPtrInput
	// List of private network to connect with your load balancer.
	PrivateNetworks LoadBalancerPrivateNetworkArrayInput
	// `projectId`) The ID of the Project the Load Balancer is associated with.
	ProjectId pulumi.StringPtrInput
	// The `releaseIp` allow the release of the IP address associated with the Load Balancer.
	//
	// Deprecated: The resource ip will be destroyed by it's own resource. Please set this to `false`
	ReleaseIp pulumi.BoolPtrInput
	// Enforces minimal SSL version (in SSL/TLS offloading context). Please check [possible values](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-load-balancer-create-a-load-balancer).
	SslCompatibilityLevel pulumi.StringPtrInput
	// The tags associated with the Load Balancer.
	Tags pulumi.StringArrayInput
	// The type of the Load Balancer. Please check the migration section to upgrade the type.
	Type pulumi.StringInput
	// `zone`) The zone of the Load Balancer.
	Zone pulumi.StringPtrInput
}

func (LoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerArgs)(nil)).Elem()
}

type LoadBalancerInput interface {
	pulumi.Input

	ToLoadBalancerOutput() LoadBalancerOutput
	ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput
}

func (*LoadBalancer) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancer)(nil)).Elem()
}

func (i *LoadBalancer) ToLoadBalancerOutput() LoadBalancerOutput {
	return i.ToLoadBalancerOutputWithContext(context.Background())
}

func (i *LoadBalancer) ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerOutput)
}

// LoadBalancerArrayInput is an input type that accepts LoadBalancerArray and LoadBalancerArrayOutput values.
// You can construct a concrete instance of `LoadBalancerArrayInput` via:
//
//	LoadBalancerArray{ LoadBalancerArgs{...} }
type LoadBalancerArrayInput interface {
	pulumi.Input

	ToLoadBalancerArrayOutput() LoadBalancerArrayOutput
	ToLoadBalancerArrayOutputWithContext(context.Context) LoadBalancerArrayOutput
}

type LoadBalancerArray []LoadBalancerInput

func (LoadBalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancer)(nil)).Elem()
}

func (i LoadBalancerArray) ToLoadBalancerArrayOutput() LoadBalancerArrayOutput {
	return i.ToLoadBalancerArrayOutputWithContext(context.Background())
}

func (i LoadBalancerArray) ToLoadBalancerArrayOutputWithContext(ctx context.Context) LoadBalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerArrayOutput)
}

// LoadBalancerMapInput is an input type that accepts LoadBalancerMap and LoadBalancerMapOutput values.
// You can construct a concrete instance of `LoadBalancerMapInput` via:
//
//	LoadBalancerMap{ "key": LoadBalancerArgs{...} }
type LoadBalancerMapInput interface {
	pulumi.Input

	ToLoadBalancerMapOutput() LoadBalancerMapOutput
	ToLoadBalancerMapOutputWithContext(context.Context) LoadBalancerMapOutput
}

type LoadBalancerMap map[string]LoadBalancerInput

func (LoadBalancerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancer)(nil)).Elem()
}

func (i LoadBalancerMap) ToLoadBalancerMapOutput() LoadBalancerMapOutput {
	return i.ToLoadBalancerMapOutputWithContext(context.Background())
}

func (i LoadBalancerMap) ToLoadBalancerMapOutputWithContext(ctx context.Context) LoadBalancerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerMapOutput)
}

type LoadBalancerOutput struct{ *pulumi.OutputState }

func (LoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerOutput) ToLoadBalancerOutput() LoadBalancerOutput {
	return o
}

func (o LoadBalancerOutput) ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput {
	return o
}

// Defines whether to automatically assign a flexible public IPv4 to the Load Balancer.
func (o LoadBalancerOutput) AssignFlexibleIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.BoolPtrOutput { return v.AssignFlexibleIp }).(pulumi.BoolPtrOutput)
}

// Defines whether to automatically assign a flexible public IPv6 to the Load Balancer.
func (o LoadBalancerOutput) AssignFlexibleIpv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.BoolPtrOutput { return v.AssignFlexibleIpv6 }).(pulumi.BoolPtrOutput)
}

// The description of the Load Balancer.
func (o LoadBalancerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The Load Balancer public IPv4 address.
func (o LoadBalancerOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// Please use `ipIds`. The ID of the associated Load Balancer IP. See below.
//
// > **Important:** Updates to `ipId` will recreate the Load Balancer.
//
// Deprecated: Please use ip_ids
func (o LoadBalancerOutput) IpId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.IpId }).(pulumi.StringOutput)
}

// The List of IP IDs to attach to the Load Balancer.
//
// > **Important:** Make sure to use a `loadbalancers.Ip` resource to create the IPs.
func (o LoadBalancerOutput) IpIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringArrayOutput { return v.IpIds }).(pulumi.StringArrayOutput)
}

// The Load Balancer public IPv6 address.
func (o LoadBalancerOutput) Ipv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.Ipv6Address }).(pulumi.StringOutput)
}

// The name of the Load Balancer.
func (o LoadBalancerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Organization ID the Load Balancer is associated with.
func (o LoadBalancerOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The list of private IPv4 and IPv6 addresses associated with the resource.
func (o LoadBalancerOutput) PrivateIps() LoadBalancerPrivateIpArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerPrivateIpArrayOutput { return v.PrivateIps }).(LoadBalancerPrivateIpArrayOutput)
}

// List of private network to connect with your load balancer.
func (o LoadBalancerOutput) PrivateNetworks() LoadBalancerPrivateNetworkArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerPrivateNetworkArrayOutput { return v.PrivateNetworks }).(LoadBalancerPrivateNetworkArrayOutput)
}

// `projectId`) The ID of the Project the Load Balancer is associated with.
func (o LoadBalancerOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The region of the resource
func (o LoadBalancerOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The `releaseIp` allow the release of the IP address associated with the Load Balancer.
//
// Deprecated: The resource ip will be destroyed by it's own resource. Please set this to `false`
func (o LoadBalancerOutput) ReleaseIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.BoolPtrOutput { return v.ReleaseIp }).(pulumi.BoolPtrOutput)
}

// Enforces minimal SSL version (in SSL/TLS offloading context). Please check [possible values](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-load-balancer-create-a-load-balancer).
func (o LoadBalancerOutput) SslCompatibilityLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringPtrOutput { return v.SslCompatibilityLevel }).(pulumi.StringPtrOutput)
}

// The tags associated with the Load Balancer.
func (o LoadBalancerOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The type of the Load Balancer. Please check the migration section to upgrade the type.
func (o LoadBalancerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// `zone`) The zone of the Load Balancer.
func (o LoadBalancerOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type LoadBalancerArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerArrayOutput) ToLoadBalancerArrayOutput() LoadBalancerArrayOutput {
	return o
}

func (o LoadBalancerArrayOutput) ToLoadBalancerArrayOutputWithContext(ctx context.Context) LoadBalancerArrayOutput {
	return o
}

func (o LoadBalancerArrayOutput) Index(i pulumi.IntInput) LoadBalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadBalancer {
		return vs[0].([]*LoadBalancer)[vs[1].(int)]
	}).(LoadBalancerOutput)
}

type LoadBalancerMapOutput struct{ *pulumi.OutputState }

func (LoadBalancerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerMapOutput) ToLoadBalancerMapOutput() LoadBalancerMapOutput {
	return o
}

func (o LoadBalancerMapOutput) ToLoadBalancerMapOutputWithContext(ctx context.Context) LoadBalancerMapOutput {
	return o
}

func (o LoadBalancerMapOutput) MapIndex(k pulumi.StringInput) LoadBalancerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadBalancer {
		return vs[0].(map[string]*LoadBalancer)[vs[1].(string)]
	}).(LoadBalancerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerInput)(nil)).Elem(), &LoadBalancer{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerArrayInput)(nil)).Elem(), LoadBalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerMapInput)(nil)).Elem(), LoadBalancerMap{})
	pulumi.RegisterOutputType(LoadBalancerOutput{})
	pulumi.RegisterOutputType(LoadBalancerArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerMapOutput{})
}
