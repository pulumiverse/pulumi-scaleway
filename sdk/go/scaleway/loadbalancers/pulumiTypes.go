// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package loadbalancers

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

var _ = internal.GetEnvOrDefault

type AclAction struct {
	// Redirect parameters when using an ACL with `redirect` action.
	Redirects []AclActionRedirect `pulumi:"redirects"`
	// The action type. Possible values are: `allow` or `deny` or `redirect`.
	Type string `pulumi:"type"`
}

// AclActionInput is an input type that accepts AclActionArgs and AclActionOutput values.
// You can construct a concrete instance of `AclActionInput` via:
//
//	AclActionArgs{...}
type AclActionInput interface {
	pulumi.Input

	ToAclActionOutput() AclActionOutput
	ToAclActionOutputWithContext(context.Context) AclActionOutput
}

type AclActionArgs struct {
	// Redirect parameters when using an ACL with `redirect` action.
	Redirects AclActionRedirectArrayInput `pulumi:"redirects"`
	// The action type. Possible values are: `allow` or `deny` or `redirect`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AclActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclAction)(nil)).Elem()
}

func (i AclActionArgs) ToAclActionOutput() AclActionOutput {
	return i.ToAclActionOutputWithContext(context.Background())
}

func (i AclActionArgs) ToAclActionOutputWithContext(ctx context.Context) AclActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclActionOutput)
}

func (i AclActionArgs) ToAclActionPtrOutput() AclActionPtrOutput {
	return i.ToAclActionPtrOutputWithContext(context.Background())
}

func (i AclActionArgs) ToAclActionPtrOutputWithContext(ctx context.Context) AclActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclActionOutput).ToAclActionPtrOutputWithContext(ctx)
}

// AclActionPtrInput is an input type that accepts AclActionArgs, AclActionPtr and AclActionPtrOutput values.
// You can construct a concrete instance of `AclActionPtrInput` via:
//
//	        AclActionArgs{...}
//
//	or:
//
//	        nil
type AclActionPtrInput interface {
	pulumi.Input

	ToAclActionPtrOutput() AclActionPtrOutput
	ToAclActionPtrOutputWithContext(context.Context) AclActionPtrOutput
}

type aclActionPtrType AclActionArgs

func AclActionPtr(v *AclActionArgs) AclActionPtrInput {
	return (*aclActionPtrType)(v)
}

func (*aclActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AclAction)(nil)).Elem()
}

func (i *aclActionPtrType) ToAclActionPtrOutput() AclActionPtrOutput {
	return i.ToAclActionPtrOutputWithContext(context.Background())
}

func (i *aclActionPtrType) ToAclActionPtrOutputWithContext(ctx context.Context) AclActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclActionPtrOutput)
}

type AclActionOutput struct{ *pulumi.OutputState }

func (AclActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclAction)(nil)).Elem()
}

func (o AclActionOutput) ToAclActionOutput() AclActionOutput {
	return o
}

func (o AclActionOutput) ToAclActionOutputWithContext(ctx context.Context) AclActionOutput {
	return o
}

func (o AclActionOutput) ToAclActionPtrOutput() AclActionPtrOutput {
	return o.ToAclActionPtrOutputWithContext(context.Background())
}

func (o AclActionOutput) ToAclActionPtrOutputWithContext(ctx context.Context) AclActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AclAction) *AclAction {
		return &v
	}).(AclActionPtrOutput)
}

// Redirect parameters when using an ACL with `redirect` action.
func (o AclActionOutput) Redirects() AclActionRedirectArrayOutput {
	return o.ApplyT(func(v AclAction) []AclActionRedirect { return v.Redirects }).(AclActionRedirectArrayOutput)
}

// The action type. Possible values are: `allow` or `deny` or `redirect`.
func (o AclActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AclAction) string { return v.Type }).(pulumi.StringOutput)
}

type AclActionPtrOutput struct{ *pulumi.OutputState }

func (AclActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AclAction)(nil)).Elem()
}

func (o AclActionPtrOutput) ToAclActionPtrOutput() AclActionPtrOutput {
	return o
}

func (o AclActionPtrOutput) ToAclActionPtrOutputWithContext(ctx context.Context) AclActionPtrOutput {
	return o
}

func (o AclActionPtrOutput) Elem() AclActionOutput {
	return o.ApplyT(func(v *AclAction) AclAction {
		if v != nil {
			return *v
		}
		var ret AclAction
		return ret
	}).(AclActionOutput)
}

// Redirect parameters when using an ACL with `redirect` action.
func (o AclActionPtrOutput) Redirects() AclActionRedirectArrayOutput {
	return o.ApplyT(func(v *AclAction) []AclActionRedirect {
		if v == nil {
			return nil
		}
		return v.Redirects
	}).(AclActionRedirectArrayOutput)
}

// The action type. Possible values are: `allow` or `deny` or `redirect`.
func (o AclActionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclAction) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type AclActionRedirect struct {
	// The HTTP redirect code to use. Valid values are `301`, `302`, `303`, `307` and `308`.
	Code *int `pulumi:"code"`
	// An URL can be used in case of a location redirect (e.g. `https://scaleway.com` will redirect to this same URL). A scheme name (e.g. `https`, `http`, `ftp`, `git`) will replace the request's original scheme.
	Target *string `pulumi:"target"`
	// The redirect type. Possible values are: `location` or `scheme`.
	Type *string `pulumi:"type"`
}

// AclActionRedirectInput is an input type that accepts AclActionRedirectArgs and AclActionRedirectOutput values.
// You can construct a concrete instance of `AclActionRedirectInput` via:
//
//	AclActionRedirectArgs{...}
type AclActionRedirectInput interface {
	pulumi.Input

	ToAclActionRedirectOutput() AclActionRedirectOutput
	ToAclActionRedirectOutputWithContext(context.Context) AclActionRedirectOutput
}

type AclActionRedirectArgs struct {
	// The HTTP redirect code to use. Valid values are `301`, `302`, `303`, `307` and `308`.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// An URL can be used in case of a location redirect (e.g. `https://scaleway.com` will redirect to this same URL). A scheme name (e.g. `https`, `http`, `ftp`, `git`) will replace the request's original scheme.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// The redirect type. Possible values are: `location` or `scheme`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (AclActionRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclActionRedirect)(nil)).Elem()
}

func (i AclActionRedirectArgs) ToAclActionRedirectOutput() AclActionRedirectOutput {
	return i.ToAclActionRedirectOutputWithContext(context.Background())
}

func (i AclActionRedirectArgs) ToAclActionRedirectOutputWithContext(ctx context.Context) AclActionRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclActionRedirectOutput)
}

// AclActionRedirectArrayInput is an input type that accepts AclActionRedirectArray and AclActionRedirectArrayOutput values.
// You can construct a concrete instance of `AclActionRedirectArrayInput` via:
//
//	AclActionRedirectArray{ AclActionRedirectArgs{...} }
type AclActionRedirectArrayInput interface {
	pulumi.Input

	ToAclActionRedirectArrayOutput() AclActionRedirectArrayOutput
	ToAclActionRedirectArrayOutputWithContext(context.Context) AclActionRedirectArrayOutput
}

type AclActionRedirectArray []AclActionRedirectInput

func (AclActionRedirectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclActionRedirect)(nil)).Elem()
}

func (i AclActionRedirectArray) ToAclActionRedirectArrayOutput() AclActionRedirectArrayOutput {
	return i.ToAclActionRedirectArrayOutputWithContext(context.Background())
}

func (i AclActionRedirectArray) ToAclActionRedirectArrayOutputWithContext(ctx context.Context) AclActionRedirectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclActionRedirectArrayOutput)
}

type AclActionRedirectOutput struct{ *pulumi.OutputState }

func (AclActionRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclActionRedirect)(nil)).Elem()
}

func (o AclActionRedirectOutput) ToAclActionRedirectOutput() AclActionRedirectOutput {
	return o
}

func (o AclActionRedirectOutput) ToAclActionRedirectOutputWithContext(ctx context.Context) AclActionRedirectOutput {
	return o
}

// The HTTP redirect code to use. Valid values are `301`, `302`, `303`, `307` and `308`.
func (o AclActionRedirectOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AclActionRedirect) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// An URL can be used in case of a location redirect (e.g. `https://scaleway.com` will redirect to this same URL). A scheme name (e.g. `https`, `http`, `ftp`, `git`) will replace the request's original scheme.
func (o AclActionRedirectOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclActionRedirect) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// The redirect type. Possible values are: `location` or `scheme`.
func (o AclActionRedirectOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclActionRedirect) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type AclActionRedirectArrayOutput struct{ *pulumi.OutputState }

func (AclActionRedirectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclActionRedirect)(nil)).Elem()
}

func (o AclActionRedirectArrayOutput) ToAclActionRedirectArrayOutput() AclActionRedirectArrayOutput {
	return o
}

func (o AclActionRedirectArrayOutput) ToAclActionRedirectArrayOutputWithContext(ctx context.Context) AclActionRedirectArrayOutput {
	return o
}

func (o AclActionRedirectArrayOutput) Index(i pulumi.IntInput) AclActionRedirectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AclActionRedirect {
		return vs[0].([]AclActionRedirect)[vs[1].(int)]
	}).(AclActionRedirectOutput)
}

type AclMatch struct {
	// The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
	// It extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).
	// Possible values are: `aclHttpFilterNone`, `pathBegin`, `pathEnd`, `httpHeaderMatch` or `regex`.
	HttpFilter *string `pulumi:"httpFilter"`
	// If you have `httpFilter` at `httpHeaderMatch`, you can use this field to filter on the HTTP header's value.
	HttpFilterOption *string `pulumi:"httpFilterOption"`
	// A list of possible values to match for the given HTTP filter.
	// Keep in mind that in the case of `httpHeaderMatch` the HTTP header field name is case insensitive.
	HttpFilterValues []string `pulumi:"httpFilterValues"`
	// If set to `true`, the condition will be of type "unless".
	Invert *bool `pulumi:"invert"`
	// A list of IPs, or CIDR v4/v6 addresses of the session client, to match. Only one of `ipSubnet` and `ipsEdgeServices` should be specified.
	IpSubnets []string `pulumi:"ipSubnets"`
	// Defines whether Edge Services IPs should be matched. Only one of `ipSubnet` and `ipsEdgeServices` should be specified.
	IpsEdgeServices *bool `pulumi:"ipsEdgeServices"`
}

// AclMatchInput is an input type that accepts AclMatchArgs and AclMatchOutput values.
// You can construct a concrete instance of `AclMatchInput` via:
//
//	AclMatchArgs{...}
type AclMatchInput interface {
	pulumi.Input

	ToAclMatchOutput() AclMatchOutput
	ToAclMatchOutputWithContext(context.Context) AclMatchOutput
}

type AclMatchArgs struct {
	// The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
	// It extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).
	// Possible values are: `aclHttpFilterNone`, `pathBegin`, `pathEnd`, `httpHeaderMatch` or `regex`.
	HttpFilter pulumi.StringPtrInput `pulumi:"httpFilter"`
	// If you have `httpFilter` at `httpHeaderMatch`, you can use this field to filter on the HTTP header's value.
	HttpFilterOption pulumi.StringPtrInput `pulumi:"httpFilterOption"`
	// A list of possible values to match for the given HTTP filter.
	// Keep in mind that in the case of `httpHeaderMatch` the HTTP header field name is case insensitive.
	HttpFilterValues pulumi.StringArrayInput `pulumi:"httpFilterValues"`
	// If set to `true`, the condition will be of type "unless".
	Invert pulumi.BoolPtrInput `pulumi:"invert"`
	// A list of IPs, or CIDR v4/v6 addresses of the session client, to match. Only one of `ipSubnet` and `ipsEdgeServices` should be specified.
	IpSubnets pulumi.StringArrayInput `pulumi:"ipSubnets"`
	// Defines whether Edge Services IPs should be matched. Only one of `ipSubnet` and `ipsEdgeServices` should be specified.
	IpsEdgeServices pulumi.BoolPtrInput `pulumi:"ipsEdgeServices"`
}

func (AclMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclMatch)(nil)).Elem()
}

func (i AclMatchArgs) ToAclMatchOutput() AclMatchOutput {
	return i.ToAclMatchOutputWithContext(context.Background())
}

func (i AclMatchArgs) ToAclMatchOutputWithContext(ctx context.Context) AclMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclMatchOutput)
}

func (i AclMatchArgs) ToAclMatchPtrOutput() AclMatchPtrOutput {
	return i.ToAclMatchPtrOutputWithContext(context.Background())
}

func (i AclMatchArgs) ToAclMatchPtrOutputWithContext(ctx context.Context) AclMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclMatchOutput).ToAclMatchPtrOutputWithContext(ctx)
}

// AclMatchPtrInput is an input type that accepts AclMatchArgs, AclMatchPtr and AclMatchPtrOutput values.
// You can construct a concrete instance of `AclMatchPtrInput` via:
//
//	        AclMatchArgs{...}
//
//	or:
//
//	        nil
type AclMatchPtrInput interface {
	pulumi.Input

	ToAclMatchPtrOutput() AclMatchPtrOutput
	ToAclMatchPtrOutputWithContext(context.Context) AclMatchPtrOutput
}

type aclMatchPtrType AclMatchArgs

func AclMatchPtr(v *AclMatchArgs) AclMatchPtrInput {
	return (*aclMatchPtrType)(v)
}

func (*aclMatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AclMatch)(nil)).Elem()
}

func (i *aclMatchPtrType) ToAclMatchPtrOutput() AclMatchPtrOutput {
	return i.ToAclMatchPtrOutputWithContext(context.Background())
}

func (i *aclMatchPtrType) ToAclMatchPtrOutputWithContext(ctx context.Context) AclMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclMatchPtrOutput)
}

type AclMatchOutput struct{ *pulumi.OutputState }

func (AclMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclMatch)(nil)).Elem()
}

func (o AclMatchOutput) ToAclMatchOutput() AclMatchOutput {
	return o
}

func (o AclMatchOutput) ToAclMatchOutputWithContext(ctx context.Context) AclMatchOutput {
	return o
}

func (o AclMatchOutput) ToAclMatchPtrOutput() AclMatchPtrOutput {
	return o.ToAclMatchPtrOutputWithContext(context.Background())
}

func (o AclMatchOutput) ToAclMatchPtrOutputWithContext(ctx context.Context) AclMatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AclMatch) *AclMatch {
		return &v
	}).(AclMatchPtrOutput)
}

// The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
// It extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).
// Possible values are: `aclHttpFilterNone`, `pathBegin`, `pathEnd`, `httpHeaderMatch` or `regex`.
func (o AclMatchOutput) HttpFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclMatch) *string { return v.HttpFilter }).(pulumi.StringPtrOutput)
}

// If you have `httpFilter` at `httpHeaderMatch`, you can use this field to filter on the HTTP header's value.
func (o AclMatchOutput) HttpFilterOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclMatch) *string { return v.HttpFilterOption }).(pulumi.StringPtrOutput)
}

// A list of possible values to match for the given HTTP filter.
// Keep in mind that in the case of `httpHeaderMatch` the HTTP header field name is case insensitive.
func (o AclMatchOutput) HttpFilterValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AclMatch) []string { return v.HttpFilterValues }).(pulumi.StringArrayOutput)
}

// If set to `true`, the condition will be of type "unless".
func (o AclMatchOutput) Invert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AclMatch) *bool { return v.Invert }).(pulumi.BoolPtrOutput)
}

// A list of IPs, or CIDR v4/v6 addresses of the session client, to match. Only one of `ipSubnet` and `ipsEdgeServices` should be specified.
func (o AclMatchOutput) IpSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AclMatch) []string { return v.IpSubnets }).(pulumi.StringArrayOutput)
}

// Defines whether Edge Services IPs should be matched. Only one of `ipSubnet` and `ipsEdgeServices` should be specified.
func (o AclMatchOutput) IpsEdgeServices() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AclMatch) *bool { return v.IpsEdgeServices }).(pulumi.BoolPtrOutput)
}

type AclMatchPtrOutput struct{ *pulumi.OutputState }

func (AclMatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AclMatch)(nil)).Elem()
}

func (o AclMatchPtrOutput) ToAclMatchPtrOutput() AclMatchPtrOutput {
	return o
}

func (o AclMatchPtrOutput) ToAclMatchPtrOutputWithContext(ctx context.Context) AclMatchPtrOutput {
	return o
}

func (o AclMatchPtrOutput) Elem() AclMatchOutput {
	return o.ApplyT(func(v *AclMatch) AclMatch {
		if v != nil {
			return *v
		}
		var ret AclMatch
		return ret
	}).(AclMatchOutput)
}

// The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
// It extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).
// Possible values are: `aclHttpFilterNone`, `pathBegin`, `pathEnd`, `httpHeaderMatch` or `regex`.
func (o AclMatchPtrOutput) HttpFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclMatch) *string {
		if v == nil {
			return nil
		}
		return v.HttpFilter
	}).(pulumi.StringPtrOutput)
}

// If you have `httpFilter` at `httpHeaderMatch`, you can use this field to filter on the HTTP header's value.
func (o AclMatchPtrOutput) HttpFilterOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclMatch) *string {
		if v == nil {
			return nil
		}
		return v.HttpFilterOption
	}).(pulumi.StringPtrOutput)
}

// A list of possible values to match for the given HTTP filter.
// Keep in mind that in the case of `httpHeaderMatch` the HTTP header field name is case insensitive.
func (o AclMatchPtrOutput) HttpFilterValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AclMatch) []string {
		if v == nil {
			return nil
		}
		return v.HttpFilterValues
	}).(pulumi.StringArrayOutput)
}

// If set to `true`, the condition will be of type "unless".
func (o AclMatchPtrOutput) Invert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AclMatch) *bool {
		if v == nil {
			return nil
		}
		return v.Invert
	}).(pulumi.BoolPtrOutput)
}

// A list of IPs, or CIDR v4/v6 addresses of the session client, to match. Only one of `ipSubnet` and `ipsEdgeServices` should be specified.
func (o AclMatchPtrOutput) IpSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AclMatch) []string {
		if v == nil {
			return nil
		}
		return v.IpSubnets
	}).(pulumi.StringArrayOutput)
}

// Defines whether Edge Services IPs should be matched. Only one of `ipSubnet` and `ipsEdgeServices` should be specified.
func (o AclMatchPtrOutput) IpsEdgeServices() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AclMatch) *bool {
		if v == nil {
			return nil
		}
		return v.IpsEdgeServices
	}).(pulumi.BoolPtrOutput)
}

type BackendHealthCheckHttp struct {
	// The expected HTTP status code
	Code *int `pulumi:"code"`
	// The HTTP host header to use for HC requests
	HostHeader *string `pulumi:"hostHeader"`
	// The HTTP method to use for HC requests
	Method *string `pulumi:"method"`
	// The HTTP endpoint URL to call for HC requests
	Uri string `pulumi:"uri"`
}

// BackendHealthCheckHttpInput is an input type that accepts BackendHealthCheckHttpArgs and BackendHealthCheckHttpOutput values.
// You can construct a concrete instance of `BackendHealthCheckHttpInput` via:
//
//	BackendHealthCheckHttpArgs{...}
type BackendHealthCheckHttpInput interface {
	pulumi.Input

	ToBackendHealthCheckHttpOutput() BackendHealthCheckHttpOutput
	ToBackendHealthCheckHttpOutputWithContext(context.Context) BackendHealthCheckHttpOutput
}

type BackendHealthCheckHttpArgs struct {
	// The expected HTTP status code
	Code pulumi.IntPtrInput `pulumi:"code"`
	// The HTTP host header to use for HC requests
	HostHeader pulumi.StringPtrInput `pulumi:"hostHeader"`
	// The HTTP method to use for HC requests
	Method pulumi.StringPtrInput `pulumi:"method"`
	// The HTTP endpoint URL to call for HC requests
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (BackendHealthCheckHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendHealthCheckHttp)(nil)).Elem()
}

func (i BackendHealthCheckHttpArgs) ToBackendHealthCheckHttpOutput() BackendHealthCheckHttpOutput {
	return i.ToBackendHealthCheckHttpOutputWithContext(context.Background())
}

func (i BackendHealthCheckHttpArgs) ToBackendHealthCheckHttpOutputWithContext(ctx context.Context) BackendHealthCheckHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendHealthCheckHttpOutput)
}

func (i BackendHealthCheckHttpArgs) ToBackendHealthCheckHttpPtrOutput() BackendHealthCheckHttpPtrOutput {
	return i.ToBackendHealthCheckHttpPtrOutputWithContext(context.Background())
}

func (i BackendHealthCheckHttpArgs) ToBackendHealthCheckHttpPtrOutputWithContext(ctx context.Context) BackendHealthCheckHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendHealthCheckHttpOutput).ToBackendHealthCheckHttpPtrOutputWithContext(ctx)
}

// BackendHealthCheckHttpPtrInput is an input type that accepts BackendHealthCheckHttpArgs, BackendHealthCheckHttpPtr and BackendHealthCheckHttpPtrOutput values.
// You can construct a concrete instance of `BackendHealthCheckHttpPtrInput` via:
//
//	        BackendHealthCheckHttpArgs{...}
//
//	or:
//
//	        nil
type BackendHealthCheckHttpPtrInput interface {
	pulumi.Input

	ToBackendHealthCheckHttpPtrOutput() BackendHealthCheckHttpPtrOutput
	ToBackendHealthCheckHttpPtrOutputWithContext(context.Context) BackendHealthCheckHttpPtrOutput
}

type backendHealthCheckHttpPtrType BackendHealthCheckHttpArgs

func BackendHealthCheckHttpPtr(v *BackendHealthCheckHttpArgs) BackendHealthCheckHttpPtrInput {
	return (*backendHealthCheckHttpPtrType)(v)
}

func (*backendHealthCheckHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendHealthCheckHttp)(nil)).Elem()
}

func (i *backendHealthCheckHttpPtrType) ToBackendHealthCheckHttpPtrOutput() BackendHealthCheckHttpPtrOutput {
	return i.ToBackendHealthCheckHttpPtrOutputWithContext(context.Background())
}

func (i *backendHealthCheckHttpPtrType) ToBackendHealthCheckHttpPtrOutputWithContext(ctx context.Context) BackendHealthCheckHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendHealthCheckHttpPtrOutput)
}

type BackendHealthCheckHttpOutput struct{ *pulumi.OutputState }

func (BackendHealthCheckHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendHealthCheckHttp)(nil)).Elem()
}

func (o BackendHealthCheckHttpOutput) ToBackendHealthCheckHttpOutput() BackendHealthCheckHttpOutput {
	return o
}

func (o BackendHealthCheckHttpOutput) ToBackendHealthCheckHttpOutputWithContext(ctx context.Context) BackendHealthCheckHttpOutput {
	return o
}

func (o BackendHealthCheckHttpOutput) ToBackendHealthCheckHttpPtrOutput() BackendHealthCheckHttpPtrOutput {
	return o.ToBackendHealthCheckHttpPtrOutputWithContext(context.Background())
}

func (o BackendHealthCheckHttpOutput) ToBackendHealthCheckHttpPtrOutputWithContext(ctx context.Context) BackendHealthCheckHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackendHealthCheckHttp) *BackendHealthCheckHttp {
		return &v
	}).(BackendHealthCheckHttpPtrOutput)
}

// The expected HTTP status code
func (o BackendHealthCheckHttpOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendHealthCheckHttp) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// The HTTP host header to use for HC requests
func (o BackendHealthCheckHttpOutput) HostHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendHealthCheckHttp) *string { return v.HostHeader }).(pulumi.StringPtrOutput)
}

// The HTTP method to use for HC requests
func (o BackendHealthCheckHttpOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendHealthCheckHttp) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// The HTTP endpoint URL to call for HC requests
func (o BackendHealthCheckHttpOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v BackendHealthCheckHttp) string { return v.Uri }).(pulumi.StringOutput)
}

type BackendHealthCheckHttpPtrOutput struct{ *pulumi.OutputState }

func (BackendHealthCheckHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendHealthCheckHttp)(nil)).Elem()
}

func (o BackendHealthCheckHttpPtrOutput) ToBackendHealthCheckHttpPtrOutput() BackendHealthCheckHttpPtrOutput {
	return o
}

func (o BackendHealthCheckHttpPtrOutput) ToBackendHealthCheckHttpPtrOutputWithContext(ctx context.Context) BackendHealthCheckHttpPtrOutput {
	return o
}

func (o BackendHealthCheckHttpPtrOutput) Elem() BackendHealthCheckHttpOutput {
	return o.ApplyT(func(v *BackendHealthCheckHttp) BackendHealthCheckHttp {
		if v != nil {
			return *v
		}
		var ret BackendHealthCheckHttp
		return ret
	}).(BackendHealthCheckHttpOutput)
}

// The expected HTTP status code
func (o BackendHealthCheckHttpPtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendHealthCheckHttp) *int {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.IntPtrOutput)
}

// The HTTP host header to use for HC requests
func (o BackendHealthCheckHttpPtrOutput) HostHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendHealthCheckHttp) *string {
		if v == nil {
			return nil
		}
		return v.HostHeader
	}).(pulumi.StringPtrOutput)
}

// The HTTP method to use for HC requests
func (o BackendHealthCheckHttpPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendHealthCheckHttp) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// The HTTP endpoint URL to call for HC requests
func (o BackendHealthCheckHttpPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendHealthCheckHttp) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type BackendHealthCheckHttps struct {
	// The expected HTTP status code
	Code *int `pulumi:"code"`
	// The HTTP host header to use for HC requests
	HostHeader *string `pulumi:"hostHeader"`
	// The HTTP method to use for HC requests
	Method *string `pulumi:"method"`
	// The SNI to use for HC requests over SSL
	Sni *string `pulumi:"sni"`
	// The HTTPS endpoint URL to call for HC requests
	Uri string `pulumi:"uri"`
}

// BackendHealthCheckHttpsInput is an input type that accepts BackendHealthCheckHttpsArgs and BackendHealthCheckHttpsOutput values.
// You can construct a concrete instance of `BackendHealthCheckHttpsInput` via:
//
//	BackendHealthCheckHttpsArgs{...}
type BackendHealthCheckHttpsInput interface {
	pulumi.Input

	ToBackendHealthCheckHttpsOutput() BackendHealthCheckHttpsOutput
	ToBackendHealthCheckHttpsOutputWithContext(context.Context) BackendHealthCheckHttpsOutput
}

type BackendHealthCheckHttpsArgs struct {
	// The expected HTTP status code
	Code pulumi.IntPtrInput `pulumi:"code"`
	// The HTTP host header to use for HC requests
	HostHeader pulumi.StringPtrInput `pulumi:"hostHeader"`
	// The HTTP method to use for HC requests
	Method pulumi.StringPtrInput `pulumi:"method"`
	// The SNI to use for HC requests over SSL
	Sni pulumi.StringPtrInput `pulumi:"sni"`
	// The HTTPS endpoint URL to call for HC requests
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (BackendHealthCheckHttpsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendHealthCheckHttps)(nil)).Elem()
}

func (i BackendHealthCheckHttpsArgs) ToBackendHealthCheckHttpsOutput() BackendHealthCheckHttpsOutput {
	return i.ToBackendHealthCheckHttpsOutputWithContext(context.Background())
}

func (i BackendHealthCheckHttpsArgs) ToBackendHealthCheckHttpsOutputWithContext(ctx context.Context) BackendHealthCheckHttpsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendHealthCheckHttpsOutput)
}

func (i BackendHealthCheckHttpsArgs) ToBackendHealthCheckHttpsPtrOutput() BackendHealthCheckHttpsPtrOutput {
	return i.ToBackendHealthCheckHttpsPtrOutputWithContext(context.Background())
}

func (i BackendHealthCheckHttpsArgs) ToBackendHealthCheckHttpsPtrOutputWithContext(ctx context.Context) BackendHealthCheckHttpsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendHealthCheckHttpsOutput).ToBackendHealthCheckHttpsPtrOutputWithContext(ctx)
}

// BackendHealthCheckHttpsPtrInput is an input type that accepts BackendHealthCheckHttpsArgs, BackendHealthCheckHttpsPtr and BackendHealthCheckHttpsPtrOutput values.
// You can construct a concrete instance of `BackendHealthCheckHttpsPtrInput` via:
//
//	        BackendHealthCheckHttpsArgs{...}
//
//	or:
//
//	        nil
type BackendHealthCheckHttpsPtrInput interface {
	pulumi.Input

	ToBackendHealthCheckHttpsPtrOutput() BackendHealthCheckHttpsPtrOutput
	ToBackendHealthCheckHttpsPtrOutputWithContext(context.Context) BackendHealthCheckHttpsPtrOutput
}

type backendHealthCheckHttpsPtrType BackendHealthCheckHttpsArgs

func BackendHealthCheckHttpsPtr(v *BackendHealthCheckHttpsArgs) BackendHealthCheckHttpsPtrInput {
	return (*backendHealthCheckHttpsPtrType)(v)
}

func (*backendHealthCheckHttpsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendHealthCheckHttps)(nil)).Elem()
}

func (i *backendHealthCheckHttpsPtrType) ToBackendHealthCheckHttpsPtrOutput() BackendHealthCheckHttpsPtrOutput {
	return i.ToBackendHealthCheckHttpsPtrOutputWithContext(context.Background())
}

func (i *backendHealthCheckHttpsPtrType) ToBackendHealthCheckHttpsPtrOutputWithContext(ctx context.Context) BackendHealthCheckHttpsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendHealthCheckHttpsPtrOutput)
}

type BackendHealthCheckHttpsOutput struct{ *pulumi.OutputState }

func (BackendHealthCheckHttpsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendHealthCheckHttps)(nil)).Elem()
}

func (o BackendHealthCheckHttpsOutput) ToBackendHealthCheckHttpsOutput() BackendHealthCheckHttpsOutput {
	return o
}

func (o BackendHealthCheckHttpsOutput) ToBackendHealthCheckHttpsOutputWithContext(ctx context.Context) BackendHealthCheckHttpsOutput {
	return o
}

func (o BackendHealthCheckHttpsOutput) ToBackendHealthCheckHttpsPtrOutput() BackendHealthCheckHttpsPtrOutput {
	return o.ToBackendHealthCheckHttpsPtrOutputWithContext(context.Background())
}

func (o BackendHealthCheckHttpsOutput) ToBackendHealthCheckHttpsPtrOutputWithContext(ctx context.Context) BackendHealthCheckHttpsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackendHealthCheckHttps) *BackendHealthCheckHttps {
		return &v
	}).(BackendHealthCheckHttpsPtrOutput)
}

// The expected HTTP status code
func (o BackendHealthCheckHttpsOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendHealthCheckHttps) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// The HTTP host header to use for HC requests
func (o BackendHealthCheckHttpsOutput) HostHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendHealthCheckHttps) *string { return v.HostHeader }).(pulumi.StringPtrOutput)
}

// The HTTP method to use for HC requests
func (o BackendHealthCheckHttpsOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendHealthCheckHttps) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// The SNI to use for HC requests over SSL
func (o BackendHealthCheckHttpsOutput) Sni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendHealthCheckHttps) *string { return v.Sni }).(pulumi.StringPtrOutput)
}

// The HTTPS endpoint URL to call for HC requests
func (o BackendHealthCheckHttpsOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v BackendHealthCheckHttps) string { return v.Uri }).(pulumi.StringOutput)
}

type BackendHealthCheckHttpsPtrOutput struct{ *pulumi.OutputState }

func (BackendHealthCheckHttpsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendHealthCheckHttps)(nil)).Elem()
}

func (o BackendHealthCheckHttpsPtrOutput) ToBackendHealthCheckHttpsPtrOutput() BackendHealthCheckHttpsPtrOutput {
	return o
}

func (o BackendHealthCheckHttpsPtrOutput) ToBackendHealthCheckHttpsPtrOutputWithContext(ctx context.Context) BackendHealthCheckHttpsPtrOutput {
	return o
}

func (o BackendHealthCheckHttpsPtrOutput) Elem() BackendHealthCheckHttpsOutput {
	return o.ApplyT(func(v *BackendHealthCheckHttps) BackendHealthCheckHttps {
		if v != nil {
			return *v
		}
		var ret BackendHealthCheckHttps
		return ret
	}).(BackendHealthCheckHttpsOutput)
}

// The expected HTTP status code
func (o BackendHealthCheckHttpsPtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendHealthCheckHttps) *int {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.IntPtrOutput)
}

// The HTTP host header to use for HC requests
func (o BackendHealthCheckHttpsPtrOutput) HostHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendHealthCheckHttps) *string {
		if v == nil {
			return nil
		}
		return v.HostHeader
	}).(pulumi.StringPtrOutput)
}

// The HTTP method to use for HC requests
func (o BackendHealthCheckHttpsPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendHealthCheckHttps) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// The SNI to use for HC requests over SSL
func (o BackendHealthCheckHttpsPtrOutput) Sni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendHealthCheckHttps) *string {
		if v == nil {
			return nil
		}
		return v.Sni
	}).(pulumi.StringPtrOutput)
}

// The HTTPS endpoint URL to call for HC requests
func (o BackendHealthCheckHttpsPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendHealthCheckHttps) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type BackendHealthCheckTcp struct {
}

// BackendHealthCheckTcpInput is an input type that accepts BackendHealthCheckTcpArgs and BackendHealthCheckTcpOutput values.
// You can construct a concrete instance of `BackendHealthCheckTcpInput` via:
//
//	BackendHealthCheckTcpArgs{...}
type BackendHealthCheckTcpInput interface {
	pulumi.Input

	ToBackendHealthCheckTcpOutput() BackendHealthCheckTcpOutput
	ToBackendHealthCheckTcpOutputWithContext(context.Context) BackendHealthCheckTcpOutput
}

type BackendHealthCheckTcpArgs struct {
}

func (BackendHealthCheckTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendHealthCheckTcp)(nil)).Elem()
}

func (i BackendHealthCheckTcpArgs) ToBackendHealthCheckTcpOutput() BackendHealthCheckTcpOutput {
	return i.ToBackendHealthCheckTcpOutputWithContext(context.Background())
}

func (i BackendHealthCheckTcpArgs) ToBackendHealthCheckTcpOutputWithContext(ctx context.Context) BackendHealthCheckTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendHealthCheckTcpOutput)
}

func (i BackendHealthCheckTcpArgs) ToBackendHealthCheckTcpPtrOutput() BackendHealthCheckTcpPtrOutput {
	return i.ToBackendHealthCheckTcpPtrOutputWithContext(context.Background())
}

func (i BackendHealthCheckTcpArgs) ToBackendHealthCheckTcpPtrOutputWithContext(ctx context.Context) BackendHealthCheckTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendHealthCheckTcpOutput).ToBackendHealthCheckTcpPtrOutputWithContext(ctx)
}

// BackendHealthCheckTcpPtrInput is an input type that accepts BackendHealthCheckTcpArgs, BackendHealthCheckTcpPtr and BackendHealthCheckTcpPtrOutput values.
// You can construct a concrete instance of `BackendHealthCheckTcpPtrInput` via:
//
//	        BackendHealthCheckTcpArgs{...}
//
//	or:
//
//	        nil
type BackendHealthCheckTcpPtrInput interface {
	pulumi.Input

	ToBackendHealthCheckTcpPtrOutput() BackendHealthCheckTcpPtrOutput
	ToBackendHealthCheckTcpPtrOutputWithContext(context.Context) BackendHealthCheckTcpPtrOutput
}

type backendHealthCheckTcpPtrType BackendHealthCheckTcpArgs

func BackendHealthCheckTcpPtr(v *BackendHealthCheckTcpArgs) BackendHealthCheckTcpPtrInput {
	return (*backendHealthCheckTcpPtrType)(v)
}

func (*backendHealthCheckTcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendHealthCheckTcp)(nil)).Elem()
}

func (i *backendHealthCheckTcpPtrType) ToBackendHealthCheckTcpPtrOutput() BackendHealthCheckTcpPtrOutput {
	return i.ToBackendHealthCheckTcpPtrOutputWithContext(context.Background())
}

func (i *backendHealthCheckTcpPtrType) ToBackendHealthCheckTcpPtrOutputWithContext(ctx context.Context) BackendHealthCheckTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendHealthCheckTcpPtrOutput)
}

type BackendHealthCheckTcpOutput struct{ *pulumi.OutputState }

func (BackendHealthCheckTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendHealthCheckTcp)(nil)).Elem()
}

func (o BackendHealthCheckTcpOutput) ToBackendHealthCheckTcpOutput() BackendHealthCheckTcpOutput {
	return o
}

func (o BackendHealthCheckTcpOutput) ToBackendHealthCheckTcpOutputWithContext(ctx context.Context) BackendHealthCheckTcpOutput {
	return o
}

func (o BackendHealthCheckTcpOutput) ToBackendHealthCheckTcpPtrOutput() BackendHealthCheckTcpPtrOutput {
	return o.ToBackendHealthCheckTcpPtrOutputWithContext(context.Background())
}

func (o BackendHealthCheckTcpOutput) ToBackendHealthCheckTcpPtrOutputWithContext(ctx context.Context) BackendHealthCheckTcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackendHealthCheckTcp) *BackendHealthCheckTcp {
		return &v
	}).(BackendHealthCheckTcpPtrOutput)
}

type BackendHealthCheckTcpPtrOutput struct{ *pulumi.OutputState }

func (BackendHealthCheckTcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendHealthCheckTcp)(nil)).Elem()
}

func (o BackendHealthCheckTcpPtrOutput) ToBackendHealthCheckTcpPtrOutput() BackendHealthCheckTcpPtrOutput {
	return o
}

func (o BackendHealthCheckTcpPtrOutput) ToBackendHealthCheckTcpPtrOutputWithContext(ctx context.Context) BackendHealthCheckTcpPtrOutput {
	return o
}

func (o BackendHealthCheckTcpPtrOutput) Elem() BackendHealthCheckTcpOutput {
	return o.ApplyT(func(v *BackendHealthCheckTcp) BackendHealthCheckTcp {
		if v != nil {
			return *v
		}
		var ret BackendHealthCheckTcp
		return ret
	}).(BackendHealthCheckTcpOutput)
}

type CertificateCustomCertificate struct {
	// The full PEM-formatted certificate chain
	CertificateChain string `pulumi:"certificateChain"`
}

// CertificateCustomCertificateInput is an input type that accepts CertificateCustomCertificateArgs and CertificateCustomCertificateOutput values.
// You can construct a concrete instance of `CertificateCustomCertificateInput` via:
//
//	CertificateCustomCertificateArgs{...}
type CertificateCustomCertificateInput interface {
	pulumi.Input

	ToCertificateCustomCertificateOutput() CertificateCustomCertificateOutput
	ToCertificateCustomCertificateOutputWithContext(context.Context) CertificateCustomCertificateOutput
}

type CertificateCustomCertificateArgs struct {
	// The full PEM-formatted certificate chain
	CertificateChain pulumi.StringInput `pulumi:"certificateChain"`
}

func (CertificateCustomCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateCustomCertificate)(nil)).Elem()
}

func (i CertificateCustomCertificateArgs) ToCertificateCustomCertificateOutput() CertificateCustomCertificateOutput {
	return i.ToCertificateCustomCertificateOutputWithContext(context.Background())
}

func (i CertificateCustomCertificateArgs) ToCertificateCustomCertificateOutputWithContext(ctx context.Context) CertificateCustomCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCustomCertificateOutput)
}

func (i CertificateCustomCertificateArgs) ToCertificateCustomCertificatePtrOutput() CertificateCustomCertificatePtrOutput {
	return i.ToCertificateCustomCertificatePtrOutputWithContext(context.Background())
}

func (i CertificateCustomCertificateArgs) ToCertificateCustomCertificatePtrOutputWithContext(ctx context.Context) CertificateCustomCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCustomCertificateOutput).ToCertificateCustomCertificatePtrOutputWithContext(ctx)
}

// CertificateCustomCertificatePtrInput is an input type that accepts CertificateCustomCertificateArgs, CertificateCustomCertificatePtr and CertificateCustomCertificatePtrOutput values.
// You can construct a concrete instance of `CertificateCustomCertificatePtrInput` via:
//
//	        CertificateCustomCertificateArgs{...}
//
//	or:
//
//	        nil
type CertificateCustomCertificatePtrInput interface {
	pulumi.Input

	ToCertificateCustomCertificatePtrOutput() CertificateCustomCertificatePtrOutput
	ToCertificateCustomCertificatePtrOutputWithContext(context.Context) CertificateCustomCertificatePtrOutput
}

type certificateCustomCertificatePtrType CertificateCustomCertificateArgs

func CertificateCustomCertificatePtr(v *CertificateCustomCertificateArgs) CertificateCustomCertificatePtrInput {
	return (*certificateCustomCertificatePtrType)(v)
}

func (*certificateCustomCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateCustomCertificate)(nil)).Elem()
}

func (i *certificateCustomCertificatePtrType) ToCertificateCustomCertificatePtrOutput() CertificateCustomCertificatePtrOutput {
	return i.ToCertificateCustomCertificatePtrOutputWithContext(context.Background())
}

func (i *certificateCustomCertificatePtrType) ToCertificateCustomCertificatePtrOutputWithContext(ctx context.Context) CertificateCustomCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCustomCertificatePtrOutput)
}

type CertificateCustomCertificateOutput struct{ *pulumi.OutputState }

func (CertificateCustomCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateCustomCertificate)(nil)).Elem()
}

func (o CertificateCustomCertificateOutput) ToCertificateCustomCertificateOutput() CertificateCustomCertificateOutput {
	return o
}

func (o CertificateCustomCertificateOutput) ToCertificateCustomCertificateOutputWithContext(ctx context.Context) CertificateCustomCertificateOutput {
	return o
}

func (o CertificateCustomCertificateOutput) ToCertificateCustomCertificatePtrOutput() CertificateCustomCertificatePtrOutput {
	return o.ToCertificateCustomCertificatePtrOutputWithContext(context.Background())
}

func (o CertificateCustomCertificateOutput) ToCertificateCustomCertificatePtrOutputWithContext(ctx context.Context) CertificateCustomCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateCustomCertificate) *CertificateCustomCertificate {
		return &v
	}).(CertificateCustomCertificatePtrOutput)
}

// The full PEM-formatted certificate chain
func (o CertificateCustomCertificateOutput) CertificateChain() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateCustomCertificate) string { return v.CertificateChain }).(pulumi.StringOutput)
}

type CertificateCustomCertificatePtrOutput struct{ *pulumi.OutputState }

func (CertificateCustomCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateCustomCertificate)(nil)).Elem()
}

func (o CertificateCustomCertificatePtrOutput) ToCertificateCustomCertificatePtrOutput() CertificateCustomCertificatePtrOutput {
	return o
}

func (o CertificateCustomCertificatePtrOutput) ToCertificateCustomCertificatePtrOutputWithContext(ctx context.Context) CertificateCustomCertificatePtrOutput {
	return o
}

func (o CertificateCustomCertificatePtrOutput) Elem() CertificateCustomCertificateOutput {
	return o.ApplyT(func(v *CertificateCustomCertificate) CertificateCustomCertificate {
		if v != nil {
			return *v
		}
		var ret CertificateCustomCertificate
		return ret
	}).(CertificateCustomCertificateOutput)
}

// The full PEM-formatted certificate chain
func (o CertificateCustomCertificatePtrOutput) CertificateChain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateCustomCertificate) *string {
		if v == nil {
			return nil
		}
		return &v.CertificateChain
	}).(pulumi.StringPtrOutput)
}

type CertificateLetsencrypt struct {
	// Main domain of the certificate
	CommonName string `pulumi:"commonName"`
	// The alternative domain names of the certificate
	SubjectAlternativeNames []string `pulumi:"subjectAlternativeNames"`
}

// CertificateLetsencryptInput is an input type that accepts CertificateLetsencryptArgs and CertificateLetsencryptOutput values.
// You can construct a concrete instance of `CertificateLetsencryptInput` via:
//
//	CertificateLetsencryptArgs{...}
type CertificateLetsencryptInput interface {
	pulumi.Input

	ToCertificateLetsencryptOutput() CertificateLetsencryptOutput
	ToCertificateLetsencryptOutputWithContext(context.Context) CertificateLetsencryptOutput
}

type CertificateLetsencryptArgs struct {
	// Main domain of the certificate
	CommonName pulumi.StringInput `pulumi:"commonName"`
	// The alternative domain names of the certificate
	SubjectAlternativeNames pulumi.StringArrayInput `pulumi:"subjectAlternativeNames"`
}

func (CertificateLetsencryptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateLetsencrypt)(nil)).Elem()
}

func (i CertificateLetsencryptArgs) ToCertificateLetsencryptOutput() CertificateLetsencryptOutput {
	return i.ToCertificateLetsencryptOutputWithContext(context.Background())
}

func (i CertificateLetsencryptArgs) ToCertificateLetsencryptOutputWithContext(ctx context.Context) CertificateLetsencryptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateLetsencryptOutput)
}

func (i CertificateLetsencryptArgs) ToCertificateLetsencryptPtrOutput() CertificateLetsencryptPtrOutput {
	return i.ToCertificateLetsencryptPtrOutputWithContext(context.Background())
}

func (i CertificateLetsencryptArgs) ToCertificateLetsencryptPtrOutputWithContext(ctx context.Context) CertificateLetsencryptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateLetsencryptOutput).ToCertificateLetsencryptPtrOutputWithContext(ctx)
}

// CertificateLetsencryptPtrInput is an input type that accepts CertificateLetsencryptArgs, CertificateLetsencryptPtr and CertificateLetsencryptPtrOutput values.
// You can construct a concrete instance of `CertificateLetsencryptPtrInput` via:
//
//	        CertificateLetsencryptArgs{...}
//
//	or:
//
//	        nil
type CertificateLetsencryptPtrInput interface {
	pulumi.Input

	ToCertificateLetsencryptPtrOutput() CertificateLetsencryptPtrOutput
	ToCertificateLetsencryptPtrOutputWithContext(context.Context) CertificateLetsencryptPtrOutput
}

type certificateLetsencryptPtrType CertificateLetsencryptArgs

func CertificateLetsencryptPtr(v *CertificateLetsencryptArgs) CertificateLetsencryptPtrInput {
	return (*certificateLetsencryptPtrType)(v)
}

func (*certificateLetsencryptPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateLetsencrypt)(nil)).Elem()
}

func (i *certificateLetsencryptPtrType) ToCertificateLetsencryptPtrOutput() CertificateLetsencryptPtrOutput {
	return i.ToCertificateLetsencryptPtrOutputWithContext(context.Background())
}

func (i *certificateLetsencryptPtrType) ToCertificateLetsencryptPtrOutputWithContext(ctx context.Context) CertificateLetsencryptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateLetsencryptPtrOutput)
}

type CertificateLetsencryptOutput struct{ *pulumi.OutputState }

func (CertificateLetsencryptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateLetsencrypt)(nil)).Elem()
}

func (o CertificateLetsencryptOutput) ToCertificateLetsencryptOutput() CertificateLetsencryptOutput {
	return o
}

func (o CertificateLetsencryptOutput) ToCertificateLetsencryptOutputWithContext(ctx context.Context) CertificateLetsencryptOutput {
	return o
}

func (o CertificateLetsencryptOutput) ToCertificateLetsencryptPtrOutput() CertificateLetsencryptPtrOutput {
	return o.ToCertificateLetsencryptPtrOutputWithContext(context.Background())
}

func (o CertificateLetsencryptOutput) ToCertificateLetsencryptPtrOutputWithContext(ctx context.Context) CertificateLetsencryptPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateLetsencrypt) *CertificateLetsencrypt {
		return &v
	}).(CertificateLetsencryptPtrOutput)
}

// Main domain of the certificate
func (o CertificateLetsencryptOutput) CommonName() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateLetsencrypt) string { return v.CommonName }).(pulumi.StringOutput)
}

// The alternative domain names of the certificate
func (o CertificateLetsencryptOutput) SubjectAlternativeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateLetsencrypt) []string { return v.SubjectAlternativeNames }).(pulumi.StringArrayOutput)
}

type CertificateLetsencryptPtrOutput struct{ *pulumi.OutputState }

func (CertificateLetsencryptPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateLetsencrypt)(nil)).Elem()
}

func (o CertificateLetsencryptPtrOutput) ToCertificateLetsencryptPtrOutput() CertificateLetsencryptPtrOutput {
	return o
}

func (o CertificateLetsencryptPtrOutput) ToCertificateLetsencryptPtrOutputWithContext(ctx context.Context) CertificateLetsencryptPtrOutput {
	return o
}

func (o CertificateLetsencryptPtrOutput) Elem() CertificateLetsencryptOutput {
	return o.ApplyT(func(v *CertificateLetsencrypt) CertificateLetsencrypt {
		if v != nil {
			return *v
		}
		var ret CertificateLetsencrypt
		return ret
	}).(CertificateLetsencryptOutput)
}

// Main domain of the certificate
func (o CertificateLetsencryptPtrOutput) CommonName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateLetsencrypt) *string {
		if v == nil {
			return nil
		}
		return &v.CommonName
	}).(pulumi.StringPtrOutput)
}

// The alternative domain names of the certificate
func (o CertificateLetsencryptPtrOutput) SubjectAlternativeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateLetsencrypt) []string {
		if v == nil {
			return nil
		}
		return v.SubjectAlternativeNames
	}).(pulumi.StringArrayOutput)
}

type FrontendAcl struct {
	// Action to undertake when an ACL filter matches.
	Action FrontendAclAction `pulumi:"action"`
	// The date and time the frontend was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Description of the ACL
	Description *string `pulumi:"description"`
	// The ACL match rule. At least `ipSubnet` or `ipsEdgeServices` or `httpFilter` and `httpFilterValue` are required.
	Match FrontendAclMatch `pulumi:"match"`
	// The ACL name. If not provided it will be randomly generated.
	Name *string `pulumi:"name"`
	// The date and time the frontend resource was updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

// FrontendAclInput is an input type that accepts FrontendAclArgs and FrontendAclOutput values.
// You can construct a concrete instance of `FrontendAclInput` via:
//
//	FrontendAclArgs{...}
type FrontendAclInput interface {
	pulumi.Input

	ToFrontendAclOutput() FrontendAclOutput
	ToFrontendAclOutputWithContext(context.Context) FrontendAclOutput
}

type FrontendAclArgs struct {
	// Action to undertake when an ACL filter matches.
	Action FrontendAclActionInput `pulumi:"action"`
	// The date and time the frontend was created.
	CreatedAt pulumi.StringPtrInput `pulumi:"createdAt"`
	// Description of the ACL
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The ACL match rule. At least `ipSubnet` or `ipsEdgeServices` or `httpFilter` and `httpFilterValue` are required.
	Match FrontendAclMatchInput `pulumi:"match"`
	// The ACL name. If not provided it will be randomly generated.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The date and time the frontend resource was updated.
	UpdatedAt pulumi.StringPtrInput `pulumi:"updatedAt"`
}

func (FrontendAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendAcl)(nil)).Elem()
}

func (i FrontendAclArgs) ToFrontendAclOutput() FrontendAclOutput {
	return i.ToFrontendAclOutputWithContext(context.Background())
}

func (i FrontendAclArgs) ToFrontendAclOutputWithContext(ctx context.Context) FrontendAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendAclOutput)
}

// FrontendAclArrayInput is an input type that accepts FrontendAclArray and FrontendAclArrayOutput values.
// You can construct a concrete instance of `FrontendAclArrayInput` via:
//
//	FrontendAclArray{ FrontendAclArgs{...} }
type FrontendAclArrayInput interface {
	pulumi.Input

	ToFrontendAclArrayOutput() FrontendAclArrayOutput
	ToFrontendAclArrayOutputWithContext(context.Context) FrontendAclArrayOutput
}

type FrontendAclArray []FrontendAclInput

func (FrontendAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontendAcl)(nil)).Elem()
}

func (i FrontendAclArray) ToFrontendAclArrayOutput() FrontendAclArrayOutput {
	return i.ToFrontendAclArrayOutputWithContext(context.Background())
}

func (i FrontendAclArray) ToFrontendAclArrayOutputWithContext(ctx context.Context) FrontendAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendAclArrayOutput)
}

type FrontendAclOutput struct{ *pulumi.OutputState }

func (FrontendAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendAcl)(nil)).Elem()
}

func (o FrontendAclOutput) ToFrontendAclOutput() FrontendAclOutput {
	return o
}

func (o FrontendAclOutput) ToFrontendAclOutputWithContext(ctx context.Context) FrontendAclOutput {
	return o
}

// Action to undertake when an ACL filter matches.
func (o FrontendAclOutput) Action() FrontendAclActionOutput {
	return o.ApplyT(func(v FrontendAcl) FrontendAclAction { return v.Action }).(FrontendAclActionOutput)
}

// The date and time the frontend was created.
func (o FrontendAclOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendAcl) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// Description of the ACL
func (o FrontendAclOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendAcl) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The ACL match rule. At least `ipSubnet` or `ipsEdgeServices` or `httpFilter` and `httpFilterValue` are required.
func (o FrontendAclOutput) Match() FrontendAclMatchOutput {
	return o.ApplyT(func(v FrontendAcl) FrontendAclMatch { return v.Match }).(FrontendAclMatchOutput)
}

// The ACL name. If not provided it will be randomly generated.
func (o FrontendAclOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendAcl) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The date and time the frontend resource was updated.
func (o FrontendAclOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendAcl) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

type FrontendAclArrayOutput struct{ *pulumi.OutputState }

func (FrontendAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontendAcl)(nil)).Elem()
}

func (o FrontendAclArrayOutput) ToFrontendAclArrayOutput() FrontendAclArrayOutput {
	return o
}

func (o FrontendAclArrayOutput) ToFrontendAclArrayOutputWithContext(ctx context.Context) FrontendAclArrayOutput {
	return o
}

func (o FrontendAclArrayOutput) Index(i pulumi.IntInput) FrontendAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FrontendAcl {
		return vs[0].([]FrontendAcl)[vs[1].(int)]
	}).(FrontendAclOutput)
}

type FrontendAclAction struct {
	// Redirect parameters when using an ACL with `redirect` action.
	Redirects []FrontendAclActionRedirect `pulumi:"redirects"`
	// The action type. Possible values are: `allow` or `deny` or `redirect`.
	Type string `pulumi:"type"`
}

// FrontendAclActionInput is an input type that accepts FrontendAclActionArgs and FrontendAclActionOutput values.
// You can construct a concrete instance of `FrontendAclActionInput` via:
//
//	FrontendAclActionArgs{...}
type FrontendAclActionInput interface {
	pulumi.Input

	ToFrontendAclActionOutput() FrontendAclActionOutput
	ToFrontendAclActionOutputWithContext(context.Context) FrontendAclActionOutput
}

type FrontendAclActionArgs struct {
	// Redirect parameters when using an ACL with `redirect` action.
	Redirects FrontendAclActionRedirectArrayInput `pulumi:"redirects"`
	// The action type. Possible values are: `allow` or `deny` or `redirect`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FrontendAclActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendAclAction)(nil)).Elem()
}

func (i FrontendAclActionArgs) ToFrontendAclActionOutput() FrontendAclActionOutput {
	return i.ToFrontendAclActionOutputWithContext(context.Background())
}

func (i FrontendAclActionArgs) ToFrontendAclActionOutputWithContext(ctx context.Context) FrontendAclActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendAclActionOutput)
}

type FrontendAclActionOutput struct{ *pulumi.OutputState }

func (FrontendAclActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendAclAction)(nil)).Elem()
}

func (o FrontendAclActionOutput) ToFrontendAclActionOutput() FrontendAclActionOutput {
	return o
}

func (o FrontendAclActionOutput) ToFrontendAclActionOutputWithContext(ctx context.Context) FrontendAclActionOutput {
	return o
}

// Redirect parameters when using an ACL with `redirect` action.
func (o FrontendAclActionOutput) Redirects() FrontendAclActionRedirectArrayOutput {
	return o.ApplyT(func(v FrontendAclAction) []FrontendAclActionRedirect { return v.Redirects }).(FrontendAclActionRedirectArrayOutput)
}

// The action type. Possible values are: `allow` or `deny` or `redirect`.
func (o FrontendAclActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FrontendAclAction) string { return v.Type }).(pulumi.StringOutput)
}

type FrontendAclActionRedirect struct {
	// The HTTP redirect code to use. Valid values are `301`, `302`, `303`, `307` and `308`.
	Code *int `pulumi:"code"`
	// A URL can be used in case of a location redirect (e.g. `https://scaleway.com` will redirect to this same URL). A scheme name (e.g. `https`, `http`, `ftp`, `git`) will replace the request's original scheme.
	Target *string `pulumi:"target"`
	// The redirect type. Possible values are: `location` or `scheme`.
	Type *string `pulumi:"type"`
}

// FrontendAclActionRedirectInput is an input type that accepts FrontendAclActionRedirectArgs and FrontendAclActionRedirectOutput values.
// You can construct a concrete instance of `FrontendAclActionRedirectInput` via:
//
//	FrontendAclActionRedirectArgs{...}
type FrontendAclActionRedirectInput interface {
	pulumi.Input

	ToFrontendAclActionRedirectOutput() FrontendAclActionRedirectOutput
	ToFrontendAclActionRedirectOutputWithContext(context.Context) FrontendAclActionRedirectOutput
}

type FrontendAclActionRedirectArgs struct {
	// The HTTP redirect code to use. Valid values are `301`, `302`, `303`, `307` and `308`.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// A URL can be used in case of a location redirect (e.g. `https://scaleway.com` will redirect to this same URL). A scheme name (e.g. `https`, `http`, `ftp`, `git`) will replace the request's original scheme.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// The redirect type. Possible values are: `location` or `scheme`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (FrontendAclActionRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendAclActionRedirect)(nil)).Elem()
}

func (i FrontendAclActionRedirectArgs) ToFrontendAclActionRedirectOutput() FrontendAclActionRedirectOutput {
	return i.ToFrontendAclActionRedirectOutputWithContext(context.Background())
}

func (i FrontendAclActionRedirectArgs) ToFrontendAclActionRedirectOutputWithContext(ctx context.Context) FrontendAclActionRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendAclActionRedirectOutput)
}

// FrontendAclActionRedirectArrayInput is an input type that accepts FrontendAclActionRedirectArray and FrontendAclActionRedirectArrayOutput values.
// You can construct a concrete instance of `FrontendAclActionRedirectArrayInput` via:
//
//	FrontendAclActionRedirectArray{ FrontendAclActionRedirectArgs{...} }
type FrontendAclActionRedirectArrayInput interface {
	pulumi.Input

	ToFrontendAclActionRedirectArrayOutput() FrontendAclActionRedirectArrayOutput
	ToFrontendAclActionRedirectArrayOutputWithContext(context.Context) FrontendAclActionRedirectArrayOutput
}

type FrontendAclActionRedirectArray []FrontendAclActionRedirectInput

func (FrontendAclActionRedirectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontendAclActionRedirect)(nil)).Elem()
}

func (i FrontendAclActionRedirectArray) ToFrontendAclActionRedirectArrayOutput() FrontendAclActionRedirectArrayOutput {
	return i.ToFrontendAclActionRedirectArrayOutputWithContext(context.Background())
}

func (i FrontendAclActionRedirectArray) ToFrontendAclActionRedirectArrayOutputWithContext(ctx context.Context) FrontendAclActionRedirectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendAclActionRedirectArrayOutput)
}

type FrontendAclActionRedirectOutput struct{ *pulumi.OutputState }

func (FrontendAclActionRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendAclActionRedirect)(nil)).Elem()
}

func (o FrontendAclActionRedirectOutput) ToFrontendAclActionRedirectOutput() FrontendAclActionRedirectOutput {
	return o
}

func (o FrontendAclActionRedirectOutput) ToFrontendAclActionRedirectOutputWithContext(ctx context.Context) FrontendAclActionRedirectOutput {
	return o
}

// The HTTP redirect code to use. Valid values are `301`, `302`, `303`, `307` and `308`.
func (o FrontendAclActionRedirectOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FrontendAclActionRedirect) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// A URL can be used in case of a location redirect (e.g. `https://scaleway.com` will redirect to this same URL). A scheme name (e.g. `https`, `http`, `ftp`, `git`) will replace the request's original scheme.
func (o FrontendAclActionRedirectOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendAclActionRedirect) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// The redirect type. Possible values are: `location` or `scheme`.
func (o FrontendAclActionRedirectOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendAclActionRedirect) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type FrontendAclActionRedirectArrayOutput struct{ *pulumi.OutputState }

func (FrontendAclActionRedirectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontendAclActionRedirect)(nil)).Elem()
}

func (o FrontendAclActionRedirectArrayOutput) ToFrontendAclActionRedirectArrayOutput() FrontendAclActionRedirectArrayOutput {
	return o
}

func (o FrontendAclActionRedirectArrayOutput) ToFrontendAclActionRedirectArrayOutputWithContext(ctx context.Context) FrontendAclActionRedirectArrayOutput {
	return o
}

func (o FrontendAclActionRedirectArrayOutput) Index(i pulumi.IntInput) FrontendAclActionRedirectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FrontendAclActionRedirect {
		return vs[0].([]FrontendAclActionRedirect)[vs[1].(int)]
	}).(FrontendAclActionRedirectOutput)
}

type FrontendAclMatch struct {
	// The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
	// It extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).
	// Possible values are: `aclHttpFilterNone`, `pathBegin`, `pathEnd`, `httpHeaderMatch` or `regex`.
	HttpFilter *string `pulumi:"httpFilter"`
	// If you have `httpFilter` at `httpHeaderMatch`, you can use this field to filter on the HTTP header's value.
	HttpFilterOption *string `pulumi:"httpFilterOption"`
	// A list of possible values to match for the given HTTP filter.
	// Keep in mind that in the case of `httpHeaderMatch` the HTTP header field name is case insensitive.
	HttpFilterValues []string `pulumi:"httpFilterValues"`
	// If set to `true`, the condition will be of type "unless".
	Invert *bool `pulumi:"invert"`
	// A list of IPs, or CIDR v4/v6 addresses of the session client, to match. Only one of `ipSubnet` and `ipsEdgeServices` should be specified.
	IpSubnets []string `pulumi:"ipSubnets"`
	// Defines whether Edge Services IPs should be matched. Only one of `ipSubnet` and `ipsEdgeServices` should be specified.
	IpsEdgeServices *bool `pulumi:"ipsEdgeServices"`
}

// FrontendAclMatchInput is an input type that accepts FrontendAclMatchArgs and FrontendAclMatchOutput values.
// You can construct a concrete instance of `FrontendAclMatchInput` via:
//
//	FrontendAclMatchArgs{...}
type FrontendAclMatchInput interface {
	pulumi.Input

	ToFrontendAclMatchOutput() FrontendAclMatchOutput
	ToFrontendAclMatchOutputWithContext(context.Context) FrontendAclMatchOutput
}

type FrontendAclMatchArgs struct {
	// The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
	// It extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).
	// Possible values are: `aclHttpFilterNone`, `pathBegin`, `pathEnd`, `httpHeaderMatch` or `regex`.
	HttpFilter pulumi.StringPtrInput `pulumi:"httpFilter"`
	// If you have `httpFilter` at `httpHeaderMatch`, you can use this field to filter on the HTTP header's value.
	HttpFilterOption pulumi.StringPtrInput `pulumi:"httpFilterOption"`
	// A list of possible values to match for the given HTTP filter.
	// Keep in mind that in the case of `httpHeaderMatch` the HTTP header field name is case insensitive.
	HttpFilterValues pulumi.StringArrayInput `pulumi:"httpFilterValues"`
	// If set to `true`, the condition will be of type "unless".
	Invert pulumi.BoolPtrInput `pulumi:"invert"`
	// A list of IPs, or CIDR v4/v6 addresses of the session client, to match. Only one of `ipSubnet` and `ipsEdgeServices` should be specified.
	IpSubnets pulumi.StringArrayInput `pulumi:"ipSubnets"`
	// Defines whether Edge Services IPs should be matched. Only one of `ipSubnet` and `ipsEdgeServices` should be specified.
	IpsEdgeServices pulumi.BoolPtrInput `pulumi:"ipsEdgeServices"`
}

func (FrontendAclMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendAclMatch)(nil)).Elem()
}

func (i FrontendAclMatchArgs) ToFrontendAclMatchOutput() FrontendAclMatchOutput {
	return i.ToFrontendAclMatchOutputWithContext(context.Background())
}

func (i FrontendAclMatchArgs) ToFrontendAclMatchOutputWithContext(ctx context.Context) FrontendAclMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendAclMatchOutput)
}

type FrontendAclMatchOutput struct{ *pulumi.OutputState }

func (FrontendAclMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendAclMatch)(nil)).Elem()
}

func (o FrontendAclMatchOutput) ToFrontendAclMatchOutput() FrontendAclMatchOutput {
	return o
}

func (o FrontendAclMatchOutput) ToFrontendAclMatchOutputWithContext(ctx context.Context) FrontendAclMatchOutput {
	return o
}

// The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
// It extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).
// Possible values are: `aclHttpFilterNone`, `pathBegin`, `pathEnd`, `httpHeaderMatch` or `regex`.
func (o FrontendAclMatchOutput) HttpFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendAclMatch) *string { return v.HttpFilter }).(pulumi.StringPtrOutput)
}

// If you have `httpFilter` at `httpHeaderMatch`, you can use this field to filter on the HTTP header's value.
func (o FrontendAclMatchOutput) HttpFilterOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendAclMatch) *string { return v.HttpFilterOption }).(pulumi.StringPtrOutput)
}

// A list of possible values to match for the given HTTP filter.
// Keep in mind that in the case of `httpHeaderMatch` the HTTP header field name is case insensitive.
func (o FrontendAclMatchOutput) HttpFilterValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FrontendAclMatch) []string { return v.HttpFilterValues }).(pulumi.StringArrayOutput)
}

// If set to `true`, the condition will be of type "unless".
func (o FrontendAclMatchOutput) Invert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FrontendAclMatch) *bool { return v.Invert }).(pulumi.BoolPtrOutput)
}

// A list of IPs, or CIDR v4/v6 addresses of the session client, to match. Only one of `ipSubnet` and `ipsEdgeServices` should be specified.
func (o FrontendAclMatchOutput) IpSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FrontendAclMatch) []string { return v.IpSubnets }).(pulumi.StringArrayOutput)
}

// Defines whether Edge Services IPs should be matched. Only one of `ipSubnet` and `ipsEdgeServices` should be specified.
func (o FrontendAclMatchOutput) IpsEdgeServices() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FrontendAclMatch) *bool { return v.IpsEdgeServices }).(pulumi.BoolPtrOutput)
}

type LoadBalancerPrivateIp struct {
	// The private IP address.
	Address *string `pulumi:"address"`
	// The ID of the IP address resource.
	Id *string `pulumi:"id"`
}

// LoadBalancerPrivateIpInput is an input type that accepts LoadBalancerPrivateIpArgs and LoadBalancerPrivateIpOutput values.
// You can construct a concrete instance of `LoadBalancerPrivateIpInput` via:
//
//	LoadBalancerPrivateIpArgs{...}
type LoadBalancerPrivateIpInput interface {
	pulumi.Input

	ToLoadBalancerPrivateIpOutput() LoadBalancerPrivateIpOutput
	ToLoadBalancerPrivateIpOutputWithContext(context.Context) LoadBalancerPrivateIpOutput
}

type LoadBalancerPrivateIpArgs struct {
	// The private IP address.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The ID of the IP address resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (LoadBalancerPrivateIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerPrivateIp)(nil)).Elem()
}

func (i LoadBalancerPrivateIpArgs) ToLoadBalancerPrivateIpOutput() LoadBalancerPrivateIpOutput {
	return i.ToLoadBalancerPrivateIpOutputWithContext(context.Background())
}

func (i LoadBalancerPrivateIpArgs) ToLoadBalancerPrivateIpOutputWithContext(ctx context.Context) LoadBalancerPrivateIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPrivateIpOutput)
}

// LoadBalancerPrivateIpArrayInput is an input type that accepts LoadBalancerPrivateIpArray and LoadBalancerPrivateIpArrayOutput values.
// You can construct a concrete instance of `LoadBalancerPrivateIpArrayInput` via:
//
//	LoadBalancerPrivateIpArray{ LoadBalancerPrivateIpArgs{...} }
type LoadBalancerPrivateIpArrayInput interface {
	pulumi.Input

	ToLoadBalancerPrivateIpArrayOutput() LoadBalancerPrivateIpArrayOutput
	ToLoadBalancerPrivateIpArrayOutputWithContext(context.Context) LoadBalancerPrivateIpArrayOutput
}

type LoadBalancerPrivateIpArray []LoadBalancerPrivateIpInput

func (LoadBalancerPrivateIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerPrivateIp)(nil)).Elem()
}

func (i LoadBalancerPrivateIpArray) ToLoadBalancerPrivateIpArrayOutput() LoadBalancerPrivateIpArrayOutput {
	return i.ToLoadBalancerPrivateIpArrayOutputWithContext(context.Background())
}

func (i LoadBalancerPrivateIpArray) ToLoadBalancerPrivateIpArrayOutputWithContext(ctx context.Context) LoadBalancerPrivateIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPrivateIpArrayOutput)
}

type LoadBalancerPrivateIpOutput struct{ *pulumi.OutputState }

func (LoadBalancerPrivateIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerPrivateIp)(nil)).Elem()
}

func (o LoadBalancerPrivateIpOutput) ToLoadBalancerPrivateIpOutput() LoadBalancerPrivateIpOutput {
	return o
}

func (o LoadBalancerPrivateIpOutput) ToLoadBalancerPrivateIpOutputWithContext(ctx context.Context) LoadBalancerPrivateIpOutput {
	return o
}

// The private IP address.
func (o LoadBalancerPrivateIpOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerPrivateIp) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The ID of the IP address resource.
func (o LoadBalancerPrivateIpOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerPrivateIp) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type LoadBalancerPrivateIpArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerPrivateIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerPrivateIp)(nil)).Elem()
}

func (o LoadBalancerPrivateIpArrayOutput) ToLoadBalancerPrivateIpArrayOutput() LoadBalancerPrivateIpArrayOutput {
	return o
}

func (o LoadBalancerPrivateIpArrayOutput) ToLoadBalancerPrivateIpArrayOutputWithContext(ctx context.Context) LoadBalancerPrivateIpArrayOutput {
	return o
}

func (o LoadBalancerPrivateIpArrayOutput) Index(i pulumi.IntInput) LoadBalancerPrivateIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerPrivateIp {
		return vs[0].([]LoadBalancerPrivateIp)[vs[1].(int)]
	}).(LoadBalancerPrivateIpOutput)
}

type LoadBalancerPrivateNetwork struct {
	// Set to true if you want to let DHCP assign IP addresses
	//
	// Deprecated: dhcp_config field is deprecated, please use `privateNetworkId` or `ipamIds` instead
	DhcpConfig *bool `pulumi:"dhcpConfig"`
	// IPAM ID of a pre-reserved IP address to assign to the Load Balancer on this Private Network.
	IpamIds *string `pulumi:"ipamIds"`
	// The ID of the Private Network to attach to.
	// - > **Important:** Updates to `privateNetwork` will recreate the attachment.
	PrivateNetworkId string `pulumi:"privateNetworkId"`
	// Define an IP address in the subnet of your private network that will be assigned to your load balancer instance
	//
	// Deprecated: static_config field is deprecated, please use `privateNetworkId` or `ipamIds` instead
	StaticConfigs []string `pulumi:"staticConfigs"`
	// The status of the private network connection.
	Status *string `pulumi:"status"`
	// `zone`) The zone of the Load Balancer.
	Zone *string `pulumi:"zone"`
}

// LoadBalancerPrivateNetworkInput is an input type that accepts LoadBalancerPrivateNetworkArgs and LoadBalancerPrivateNetworkOutput values.
// You can construct a concrete instance of `LoadBalancerPrivateNetworkInput` via:
//
//	LoadBalancerPrivateNetworkArgs{...}
type LoadBalancerPrivateNetworkInput interface {
	pulumi.Input

	ToLoadBalancerPrivateNetworkOutput() LoadBalancerPrivateNetworkOutput
	ToLoadBalancerPrivateNetworkOutputWithContext(context.Context) LoadBalancerPrivateNetworkOutput
}

type LoadBalancerPrivateNetworkArgs struct {
	// Set to true if you want to let DHCP assign IP addresses
	//
	// Deprecated: dhcp_config field is deprecated, please use `privateNetworkId` or `ipamIds` instead
	DhcpConfig pulumi.BoolPtrInput `pulumi:"dhcpConfig"`
	// IPAM ID of a pre-reserved IP address to assign to the Load Balancer on this Private Network.
	IpamIds pulumi.StringPtrInput `pulumi:"ipamIds"`
	// The ID of the Private Network to attach to.
	// - > **Important:** Updates to `privateNetwork` will recreate the attachment.
	PrivateNetworkId pulumi.StringInput `pulumi:"privateNetworkId"`
	// Define an IP address in the subnet of your private network that will be assigned to your load balancer instance
	//
	// Deprecated: static_config field is deprecated, please use `privateNetworkId` or `ipamIds` instead
	StaticConfigs pulumi.StringArrayInput `pulumi:"staticConfigs"`
	// The status of the private network connection.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// `zone`) The zone of the Load Balancer.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (LoadBalancerPrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerPrivateNetwork)(nil)).Elem()
}

func (i LoadBalancerPrivateNetworkArgs) ToLoadBalancerPrivateNetworkOutput() LoadBalancerPrivateNetworkOutput {
	return i.ToLoadBalancerPrivateNetworkOutputWithContext(context.Background())
}

func (i LoadBalancerPrivateNetworkArgs) ToLoadBalancerPrivateNetworkOutputWithContext(ctx context.Context) LoadBalancerPrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPrivateNetworkOutput)
}

// LoadBalancerPrivateNetworkArrayInput is an input type that accepts LoadBalancerPrivateNetworkArray and LoadBalancerPrivateNetworkArrayOutput values.
// You can construct a concrete instance of `LoadBalancerPrivateNetworkArrayInput` via:
//
//	LoadBalancerPrivateNetworkArray{ LoadBalancerPrivateNetworkArgs{...} }
type LoadBalancerPrivateNetworkArrayInput interface {
	pulumi.Input

	ToLoadBalancerPrivateNetworkArrayOutput() LoadBalancerPrivateNetworkArrayOutput
	ToLoadBalancerPrivateNetworkArrayOutputWithContext(context.Context) LoadBalancerPrivateNetworkArrayOutput
}

type LoadBalancerPrivateNetworkArray []LoadBalancerPrivateNetworkInput

func (LoadBalancerPrivateNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerPrivateNetwork)(nil)).Elem()
}

func (i LoadBalancerPrivateNetworkArray) ToLoadBalancerPrivateNetworkArrayOutput() LoadBalancerPrivateNetworkArrayOutput {
	return i.ToLoadBalancerPrivateNetworkArrayOutputWithContext(context.Background())
}

func (i LoadBalancerPrivateNetworkArray) ToLoadBalancerPrivateNetworkArrayOutputWithContext(ctx context.Context) LoadBalancerPrivateNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPrivateNetworkArrayOutput)
}

type LoadBalancerPrivateNetworkOutput struct{ *pulumi.OutputState }

func (LoadBalancerPrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerPrivateNetwork)(nil)).Elem()
}

func (o LoadBalancerPrivateNetworkOutput) ToLoadBalancerPrivateNetworkOutput() LoadBalancerPrivateNetworkOutput {
	return o
}

func (o LoadBalancerPrivateNetworkOutput) ToLoadBalancerPrivateNetworkOutputWithContext(ctx context.Context) LoadBalancerPrivateNetworkOutput {
	return o
}

// Set to true if you want to let DHCP assign IP addresses
//
// Deprecated: dhcp_config field is deprecated, please use `privateNetworkId` or `ipamIds` instead
func (o LoadBalancerPrivateNetworkOutput) DhcpConfig() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LoadBalancerPrivateNetwork) *bool { return v.DhcpConfig }).(pulumi.BoolPtrOutput)
}

// IPAM ID of a pre-reserved IP address to assign to the Load Balancer on this Private Network.
func (o LoadBalancerPrivateNetworkOutput) IpamIds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerPrivateNetwork) *string { return v.IpamIds }).(pulumi.StringPtrOutput)
}

// The ID of the Private Network to attach to.
// - > **Important:** Updates to `privateNetwork` will recreate the attachment.
func (o LoadBalancerPrivateNetworkOutput) PrivateNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerPrivateNetwork) string { return v.PrivateNetworkId }).(pulumi.StringOutput)
}

// Define an IP address in the subnet of your private network that will be assigned to your load balancer instance
//
// Deprecated: static_config field is deprecated, please use `privateNetworkId` or `ipamIds` instead
func (o LoadBalancerPrivateNetworkOutput) StaticConfigs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoadBalancerPrivateNetwork) []string { return v.StaticConfigs }).(pulumi.StringArrayOutput)
}

// The status of the private network connection.
func (o LoadBalancerPrivateNetworkOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerPrivateNetwork) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// `zone`) The zone of the Load Balancer.
func (o LoadBalancerPrivateNetworkOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerPrivateNetwork) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type LoadBalancerPrivateNetworkArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerPrivateNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerPrivateNetwork)(nil)).Elem()
}

func (o LoadBalancerPrivateNetworkArrayOutput) ToLoadBalancerPrivateNetworkArrayOutput() LoadBalancerPrivateNetworkArrayOutput {
	return o
}

func (o LoadBalancerPrivateNetworkArrayOutput) ToLoadBalancerPrivateNetworkArrayOutputWithContext(ctx context.Context) LoadBalancerPrivateNetworkArrayOutput {
	return o
}

func (o LoadBalancerPrivateNetworkArrayOutput) Index(i pulumi.IntInput) LoadBalancerPrivateNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerPrivateNetwork {
		return vs[0].([]LoadBalancerPrivateNetwork)[vs[1].(int)]
	}).(LoadBalancerPrivateNetworkOutput)
}

type GetAclsAcl struct {
	// The action to be undertaken when an ACL filter matches.
	Actions []GetAclsAclAction `pulumi:"actions"`
	// The date on which the ACL was created (RFC 3339 format).
	CreatedAt string `pulumi:"createdAt"`
	// The description of the ACL resource.
	Description string `pulumi:"description"`
	// The frontend ID this ACL is attached to. ACLs with a matching frontend ID are listed.
	// > **Important:** LB frontend IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
	FrontendId string `pulumi:"frontendId"`
	// The associated ACL ID.
	// > **Important:** LB ACLs' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
	Id string `pulumi:"id"`
	// The priority of this ACL in the ordered list.
	Index int `pulumi:"index"`
	// The ACL match rule.
	Matches []GetAclsAclMatch `pulumi:"matches"`
	// The ACL name to filter for. ACLs with a matching name are listed.
	Name string `pulumi:"name"`
	// The date on which the ACL was last updated (RFC 3339 format).
	UpdateAt string `pulumi:"updateAt"`
}

// GetAclsAclInput is an input type that accepts GetAclsAclArgs and GetAclsAclOutput values.
// You can construct a concrete instance of `GetAclsAclInput` via:
//
//	GetAclsAclArgs{...}
type GetAclsAclInput interface {
	pulumi.Input

	ToGetAclsAclOutput() GetAclsAclOutput
	ToGetAclsAclOutputWithContext(context.Context) GetAclsAclOutput
}

type GetAclsAclArgs struct {
	// The action to be undertaken when an ACL filter matches.
	Actions GetAclsAclActionArrayInput `pulumi:"actions"`
	// The date on which the ACL was created (RFC 3339 format).
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of the ACL resource.
	Description pulumi.StringInput `pulumi:"description"`
	// The frontend ID this ACL is attached to. ACLs with a matching frontend ID are listed.
	// > **Important:** LB frontend IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
	FrontendId pulumi.StringInput `pulumi:"frontendId"`
	// The associated ACL ID.
	// > **Important:** LB ACLs' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
	Id pulumi.StringInput `pulumi:"id"`
	// The priority of this ACL in the ordered list.
	Index pulumi.IntInput `pulumi:"index"`
	// The ACL match rule.
	Matches GetAclsAclMatchArrayInput `pulumi:"matches"`
	// The ACL name to filter for. ACLs with a matching name are listed.
	Name pulumi.StringInput `pulumi:"name"`
	// The date on which the ACL was last updated (RFC 3339 format).
	UpdateAt pulumi.StringInput `pulumi:"updateAt"`
}

func (GetAclsAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclsAcl)(nil)).Elem()
}

func (i GetAclsAclArgs) ToGetAclsAclOutput() GetAclsAclOutput {
	return i.ToGetAclsAclOutputWithContext(context.Background())
}

func (i GetAclsAclArgs) ToGetAclsAclOutputWithContext(ctx context.Context) GetAclsAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclsAclOutput)
}

// GetAclsAclArrayInput is an input type that accepts GetAclsAclArray and GetAclsAclArrayOutput values.
// You can construct a concrete instance of `GetAclsAclArrayInput` via:
//
//	GetAclsAclArray{ GetAclsAclArgs{...} }
type GetAclsAclArrayInput interface {
	pulumi.Input

	ToGetAclsAclArrayOutput() GetAclsAclArrayOutput
	ToGetAclsAclArrayOutputWithContext(context.Context) GetAclsAclArrayOutput
}

type GetAclsAclArray []GetAclsAclInput

func (GetAclsAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclsAcl)(nil)).Elem()
}

func (i GetAclsAclArray) ToGetAclsAclArrayOutput() GetAclsAclArrayOutput {
	return i.ToGetAclsAclArrayOutputWithContext(context.Background())
}

func (i GetAclsAclArray) ToGetAclsAclArrayOutputWithContext(ctx context.Context) GetAclsAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclsAclArrayOutput)
}

type GetAclsAclOutput struct{ *pulumi.OutputState }

func (GetAclsAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclsAcl)(nil)).Elem()
}

func (o GetAclsAclOutput) ToGetAclsAclOutput() GetAclsAclOutput {
	return o
}

func (o GetAclsAclOutput) ToGetAclsAclOutputWithContext(ctx context.Context) GetAclsAclOutput {
	return o
}

// The action to be undertaken when an ACL filter matches.
func (o GetAclsAclOutput) Actions() GetAclsAclActionArrayOutput {
	return o.ApplyT(func(v GetAclsAcl) []GetAclsAclAction { return v.Actions }).(GetAclsAclActionArrayOutput)
}

// The date on which the ACL was created (RFC 3339 format).
func (o GetAclsAclOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclsAcl) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the ACL resource.
func (o GetAclsAclOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclsAcl) string { return v.Description }).(pulumi.StringOutput)
}

// The frontend ID this ACL is attached to. ACLs with a matching frontend ID are listed.
// > **Important:** LB frontend IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
func (o GetAclsAclOutput) FrontendId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclsAcl) string { return v.FrontendId }).(pulumi.StringOutput)
}

// The associated ACL ID.
// > **Important:** LB ACLs' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
func (o GetAclsAclOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclsAcl) string { return v.Id }).(pulumi.StringOutput)
}

// The priority of this ACL in the ordered list.
func (o GetAclsAclOutput) Index() pulumi.IntOutput {
	return o.ApplyT(func(v GetAclsAcl) int { return v.Index }).(pulumi.IntOutput)
}

// The ACL match rule.
func (o GetAclsAclOutput) Matches() GetAclsAclMatchArrayOutput {
	return o.ApplyT(func(v GetAclsAcl) []GetAclsAclMatch { return v.Matches }).(GetAclsAclMatchArrayOutput)
}

// The ACL name to filter for. ACLs with a matching name are listed.
func (o GetAclsAclOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclsAcl) string { return v.Name }).(pulumi.StringOutput)
}

// The date on which the ACL was last updated (RFC 3339 format).
func (o GetAclsAclOutput) UpdateAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclsAcl) string { return v.UpdateAt }).(pulumi.StringOutput)
}

type GetAclsAclArrayOutput struct{ *pulumi.OutputState }

func (GetAclsAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclsAcl)(nil)).Elem()
}

func (o GetAclsAclArrayOutput) ToGetAclsAclArrayOutput() GetAclsAclArrayOutput {
	return o
}

func (o GetAclsAclArrayOutput) ToGetAclsAclArrayOutputWithContext(ctx context.Context) GetAclsAclArrayOutput {
	return o
}

func (o GetAclsAclArrayOutput) Index(i pulumi.IntInput) GetAclsAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAclsAcl {
		return vs[0].([]GetAclsAcl)[vs[1].(int)]
	}).(GetAclsAclOutput)
}

type GetAclsAclAction struct {
	// Redirect parameters when using an ACL with `redirect` action.
	Redirects []GetAclsAclActionRedirect `pulumi:"redirects"`
	// The redirect type.
	Type string `pulumi:"type"`
}

// GetAclsAclActionInput is an input type that accepts GetAclsAclActionArgs and GetAclsAclActionOutput values.
// You can construct a concrete instance of `GetAclsAclActionInput` via:
//
//	GetAclsAclActionArgs{...}
type GetAclsAclActionInput interface {
	pulumi.Input

	ToGetAclsAclActionOutput() GetAclsAclActionOutput
	ToGetAclsAclActionOutputWithContext(context.Context) GetAclsAclActionOutput
}

type GetAclsAclActionArgs struct {
	// Redirect parameters when using an ACL with `redirect` action.
	Redirects GetAclsAclActionRedirectArrayInput `pulumi:"redirects"`
	// The redirect type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetAclsAclActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclsAclAction)(nil)).Elem()
}

func (i GetAclsAclActionArgs) ToGetAclsAclActionOutput() GetAclsAclActionOutput {
	return i.ToGetAclsAclActionOutputWithContext(context.Background())
}

func (i GetAclsAclActionArgs) ToGetAclsAclActionOutputWithContext(ctx context.Context) GetAclsAclActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclsAclActionOutput)
}

// GetAclsAclActionArrayInput is an input type that accepts GetAclsAclActionArray and GetAclsAclActionArrayOutput values.
// You can construct a concrete instance of `GetAclsAclActionArrayInput` via:
//
//	GetAclsAclActionArray{ GetAclsAclActionArgs{...} }
type GetAclsAclActionArrayInput interface {
	pulumi.Input

	ToGetAclsAclActionArrayOutput() GetAclsAclActionArrayOutput
	ToGetAclsAclActionArrayOutputWithContext(context.Context) GetAclsAclActionArrayOutput
}

type GetAclsAclActionArray []GetAclsAclActionInput

func (GetAclsAclActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclsAclAction)(nil)).Elem()
}

func (i GetAclsAclActionArray) ToGetAclsAclActionArrayOutput() GetAclsAclActionArrayOutput {
	return i.ToGetAclsAclActionArrayOutputWithContext(context.Background())
}

func (i GetAclsAclActionArray) ToGetAclsAclActionArrayOutputWithContext(ctx context.Context) GetAclsAclActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclsAclActionArrayOutput)
}

type GetAclsAclActionOutput struct{ *pulumi.OutputState }

func (GetAclsAclActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclsAclAction)(nil)).Elem()
}

func (o GetAclsAclActionOutput) ToGetAclsAclActionOutput() GetAclsAclActionOutput {
	return o
}

func (o GetAclsAclActionOutput) ToGetAclsAclActionOutputWithContext(ctx context.Context) GetAclsAclActionOutput {
	return o
}

// Redirect parameters when using an ACL with `redirect` action.
func (o GetAclsAclActionOutput) Redirects() GetAclsAclActionRedirectArrayOutput {
	return o.ApplyT(func(v GetAclsAclAction) []GetAclsAclActionRedirect { return v.Redirects }).(GetAclsAclActionRedirectArrayOutput)
}

// The redirect type.
func (o GetAclsAclActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclsAclAction) string { return v.Type }).(pulumi.StringOutput)
}

type GetAclsAclActionArrayOutput struct{ *pulumi.OutputState }

func (GetAclsAclActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclsAclAction)(nil)).Elem()
}

func (o GetAclsAclActionArrayOutput) ToGetAclsAclActionArrayOutput() GetAclsAclActionArrayOutput {
	return o
}

func (o GetAclsAclActionArrayOutput) ToGetAclsAclActionArrayOutputWithContext(ctx context.Context) GetAclsAclActionArrayOutput {
	return o
}

func (o GetAclsAclActionArrayOutput) Index(i pulumi.IntInput) GetAclsAclActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAclsAclAction {
		return vs[0].([]GetAclsAclAction)[vs[1].(int)]
	}).(GetAclsAclActionOutput)
}

type GetAclsAclActionRedirect struct {
	// The HTTP redirect code to use.
	Code int `pulumi:"code"`
	// The URL used in case of a location redirect, or the scheme name that replaces the request's original scheme.
	Target string `pulumi:"target"`
	// The redirect type.
	Type string `pulumi:"type"`
}

// GetAclsAclActionRedirectInput is an input type that accepts GetAclsAclActionRedirectArgs and GetAclsAclActionRedirectOutput values.
// You can construct a concrete instance of `GetAclsAclActionRedirectInput` via:
//
//	GetAclsAclActionRedirectArgs{...}
type GetAclsAclActionRedirectInput interface {
	pulumi.Input

	ToGetAclsAclActionRedirectOutput() GetAclsAclActionRedirectOutput
	ToGetAclsAclActionRedirectOutputWithContext(context.Context) GetAclsAclActionRedirectOutput
}

type GetAclsAclActionRedirectArgs struct {
	// The HTTP redirect code to use.
	Code pulumi.IntInput `pulumi:"code"`
	// The URL used in case of a location redirect, or the scheme name that replaces the request's original scheme.
	Target pulumi.StringInput `pulumi:"target"`
	// The redirect type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetAclsAclActionRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclsAclActionRedirect)(nil)).Elem()
}

func (i GetAclsAclActionRedirectArgs) ToGetAclsAclActionRedirectOutput() GetAclsAclActionRedirectOutput {
	return i.ToGetAclsAclActionRedirectOutputWithContext(context.Background())
}

func (i GetAclsAclActionRedirectArgs) ToGetAclsAclActionRedirectOutputWithContext(ctx context.Context) GetAclsAclActionRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclsAclActionRedirectOutput)
}

// GetAclsAclActionRedirectArrayInput is an input type that accepts GetAclsAclActionRedirectArray and GetAclsAclActionRedirectArrayOutput values.
// You can construct a concrete instance of `GetAclsAclActionRedirectArrayInput` via:
//
//	GetAclsAclActionRedirectArray{ GetAclsAclActionRedirectArgs{...} }
type GetAclsAclActionRedirectArrayInput interface {
	pulumi.Input

	ToGetAclsAclActionRedirectArrayOutput() GetAclsAclActionRedirectArrayOutput
	ToGetAclsAclActionRedirectArrayOutputWithContext(context.Context) GetAclsAclActionRedirectArrayOutput
}

type GetAclsAclActionRedirectArray []GetAclsAclActionRedirectInput

func (GetAclsAclActionRedirectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclsAclActionRedirect)(nil)).Elem()
}

func (i GetAclsAclActionRedirectArray) ToGetAclsAclActionRedirectArrayOutput() GetAclsAclActionRedirectArrayOutput {
	return i.ToGetAclsAclActionRedirectArrayOutputWithContext(context.Background())
}

func (i GetAclsAclActionRedirectArray) ToGetAclsAclActionRedirectArrayOutputWithContext(ctx context.Context) GetAclsAclActionRedirectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclsAclActionRedirectArrayOutput)
}

type GetAclsAclActionRedirectOutput struct{ *pulumi.OutputState }

func (GetAclsAclActionRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclsAclActionRedirect)(nil)).Elem()
}

func (o GetAclsAclActionRedirectOutput) ToGetAclsAclActionRedirectOutput() GetAclsAclActionRedirectOutput {
	return o
}

func (o GetAclsAclActionRedirectOutput) ToGetAclsAclActionRedirectOutputWithContext(ctx context.Context) GetAclsAclActionRedirectOutput {
	return o
}

// The HTTP redirect code to use.
func (o GetAclsAclActionRedirectOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v GetAclsAclActionRedirect) int { return v.Code }).(pulumi.IntOutput)
}

// The URL used in case of a location redirect, or the scheme name that replaces the request's original scheme.
func (o GetAclsAclActionRedirectOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclsAclActionRedirect) string { return v.Target }).(pulumi.StringOutput)
}

// The redirect type.
func (o GetAclsAclActionRedirectOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclsAclActionRedirect) string { return v.Type }).(pulumi.StringOutput)
}

type GetAclsAclActionRedirectArrayOutput struct{ *pulumi.OutputState }

func (GetAclsAclActionRedirectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclsAclActionRedirect)(nil)).Elem()
}

func (o GetAclsAclActionRedirectArrayOutput) ToGetAclsAclActionRedirectArrayOutput() GetAclsAclActionRedirectArrayOutput {
	return o
}

func (o GetAclsAclActionRedirectArrayOutput) ToGetAclsAclActionRedirectArrayOutputWithContext(ctx context.Context) GetAclsAclActionRedirectArrayOutput {
	return o
}

func (o GetAclsAclActionRedirectArrayOutput) Index(i pulumi.IntInput) GetAclsAclActionRedirectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAclsAclActionRedirect {
		return vs[0].([]GetAclsAclActionRedirect)[vs[1].(int)]
	}).(GetAclsAclActionRedirectOutput)
}

type GetAclsAclMatch struct {
	// The HTTP filter to match.
	HttpFilter string `pulumi:"httpFilter"`
	// A list of possible values for the HTTP filter based on the HTTP header.
	HttpFilterOption string `pulumi:"httpFilterOption"`
	// The possible values to match for a given HTTP filter.
	HttpFilterValues []string `pulumi:"httpFilterValues"`
	// The condition will be of type "unless" if invert is set to `true`
	Invert bool `pulumi:"invert"`
	// A list of IPs, or CIDR v4/v6 addresses of the session client, to match.
	IpSubnets []string `pulumi:"ipSubnets"`
	// Defines whether Edge Services IPs should be matched.
	IpsEdgeServices bool `pulumi:"ipsEdgeServices"`
}

// GetAclsAclMatchInput is an input type that accepts GetAclsAclMatchArgs and GetAclsAclMatchOutput values.
// You can construct a concrete instance of `GetAclsAclMatchInput` via:
//
//	GetAclsAclMatchArgs{...}
type GetAclsAclMatchInput interface {
	pulumi.Input

	ToGetAclsAclMatchOutput() GetAclsAclMatchOutput
	ToGetAclsAclMatchOutputWithContext(context.Context) GetAclsAclMatchOutput
}

type GetAclsAclMatchArgs struct {
	// The HTTP filter to match.
	HttpFilter pulumi.StringInput `pulumi:"httpFilter"`
	// A list of possible values for the HTTP filter based on the HTTP header.
	HttpFilterOption pulumi.StringInput `pulumi:"httpFilterOption"`
	// The possible values to match for a given HTTP filter.
	HttpFilterValues pulumi.StringArrayInput `pulumi:"httpFilterValues"`
	// The condition will be of type "unless" if invert is set to `true`
	Invert pulumi.BoolInput `pulumi:"invert"`
	// A list of IPs, or CIDR v4/v6 addresses of the session client, to match.
	IpSubnets pulumi.StringArrayInput `pulumi:"ipSubnets"`
	// Defines whether Edge Services IPs should be matched.
	IpsEdgeServices pulumi.BoolInput `pulumi:"ipsEdgeServices"`
}

func (GetAclsAclMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclsAclMatch)(nil)).Elem()
}

func (i GetAclsAclMatchArgs) ToGetAclsAclMatchOutput() GetAclsAclMatchOutput {
	return i.ToGetAclsAclMatchOutputWithContext(context.Background())
}

func (i GetAclsAclMatchArgs) ToGetAclsAclMatchOutputWithContext(ctx context.Context) GetAclsAclMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclsAclMatchOutput)
}

// GetAclsAclMatchArrayInput is an input type that accepts GetAclsAclMatchArray and GetAclsAclMatchArrayOutput values.
// You can construct a concrete instance of `GetAclsAclMatchArrayInput` via:
//
//	GetAclsAclMatchArray{ GetAclsAclMatchArgs{...} }
type GetAclsAclMatchArrayInput interface {
	pulumi.Input

	ToGetAclsAclMatchArrayOutput() GetAclsAclMatchArrayOutput
	ToGetAclsAclMatchArrayOutputWithContext(context.Context) GetAclsAclMatchArrayOutput
}

type GetAclsAclMatchArray []GetAclsAclMatchInput

func (GetAclsAclMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclsAclMatch)(nil)).Elem()
}

func (i GetAclsAclMatchArray) ToGetAclsAclMatchArrayOutput() GetAclsAclMatchArrayOutput {
	return i.ToGetAclsAclMatchArrayOutputWithContext(context.Background())
}

func (i GetAclsAclMatchArray) ToGetAclsAclMatchArrayOutputWithContext(ctx context.Context) GetAclsAclMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclsAclMatchArrayOutput)
}

type GetAclsAclMatchOutput struct{ *pulumi.OutputState }

func (GetAclsAclMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclsAclMatch)(nil)).Elem()
}

func (o GetAclsAclMatchOutput) ToGetAclsAclMatchOutput() GetAclsAclMatchOutput {
	return o
}

func (o GetAclsAclMatchOutput) ToGetAclsAclMatchOutputWithContext(ctx context.Context) GetAclsAclMatchOutput {
	return o
}

// The HTTP filter to match.
func (o GetAclsAclMatchOutput) HttpFilter() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclsAclMatch) string { return v.HttpFilter }).(pulumi.StringOutput)
}

// A list of possible values for the HTTP filter based on the HTTP header.
func (o GetAclsAclMatchOutput) HttpFilterOption() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclsAclMatch) string { return v.HttpFilterOption }).(pulumi.StringOutput)
}

// The possible values to match for a given HTTP filter.
func (o GetAclsAclMatchOutput) HttpFilterValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAclsAclMatch) []string { return v.HttpFilterValues }).(pulumi.StringArrayOutput)
}

// The condition will be of type "unless" if invert is set to `true`
func (o GetAclsAclMatchOutput) Invert() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAclsAclMatch) bool { return v.Invert }).(pulumi.BoolOutput)
}

// A list of IPs, or CIDR v4/v6 addresses of the session client, to match.
func (o GetAclsAclMatchOutput) IpSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAclsAclMatch) []string { return v.IpSubnets }).(pulumi.StringArrayOutput)
}

// Defines whether Edge Services IPs should be matched.
func (o GetAclsAclMatchOutput) IpsEdgeServices() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAclsAclMatch) bool { return v.IpsEdgeServices }).(pulumi.BoolOutput)
}

type GetAclsAclMatchArrayOutput struct{ *pulumi.OutputState }

func (GetAclsAclMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclsAclMatch)(nil)).Elem()
}

func (o GetAclsAclMatchArrayOutput) ToGetAclsAclMatchArrayOutput() GetAclsAclMatchArrayOutput {
	return o
}

func (o GetAclsAclMatchArrayOutput) ToGetAclsAclMatchArrayOutputWithContext(ctx context.Context) GetAclsAclMatchArrayOutput {
	return o
}

func (o GetAclsAclMatchArrayOutput) Index(i pulumi.IntInput) GetAclsAclMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAclsAclMatch {
		return vs[0].([]GetAclsAclMatch)[vs[1].(int)]
	}).(GetAclsAclMatchOutput)
}

type GetBackendHealthCheckHttp struct {
	// The expected HTTP status code
	Code int `pulumi:"code"`
	// The HTTP host header to use for HC requests
	HostHeader string `pulumi:"hostHeader"`
	// The HTTP method to use for HC requests
	Method string `pulumi:"method"`
	// The SNI to use for HC requests over SSL
	Sni string `pulumi:"sni"`
	// The HTTPS endpoint URL to call for HC requests
	Uri string `pulumi:"uri"`
}

// GetBackendHealthCheckHttpInput is an input type that accepts GetBackendHealthCheckHttpArgs and GetBackendHealthCheckHttpOutput values.
// You can construct a concrete instance of `GetBackendHealthCheckHttpInput` via:
//
//	GetBackendHealthCheckHttpArgs{...}
type GetBackendHealthCheckHttpInput interface {
	pulumi.Input

	ToGetBackendHealthCheckHttpOutput() GetBackendHealthCheckHttpOutput
	ToGetBackendHealthCheckHttpOutputWithContext(context.Context) GetBackendHealthCheckHttpOutput
}

type GetBackendHealthCheckHttpArgs struct {
	// The expected HTTP status code
	Code pulumi.IntInput `pulumi:"code"`
	// The HTTP host header to use for HC requests
	HostHeader pulumi.StringInput `pulumi:"hostHeader"`
	// The HTTP method to use for HC requests
	Method pulumi.StringInput `pulumi:"method"`
	// The SNI to use for HC requests over SSL
	Sni pulumi.StringInput `pulumi:"sni"`
	// The HTTPS endpoint URL to call for HC requests
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (GetBackendHealthCheckHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendHealthCheckHttp)(nil)).Elem()
}

func (i GetBackendHealthCheckHttpArgs) ToGetBackendHealthCheckHttpOutput() GetBackendHealthCheckHttpOutput {
	return i.ToGetBackendHealthCheckHttpOutputWithContext(context.Background())
}

func (i GetBackendHealthCheckHttpArgs) ToGetBackendHealthCheckHttpOutputWithContext(ctx context.Context) GetBackendHealthCheckHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendHealthCheckHttpOutput)
}

// GetBackendHealthCheckHttpArrayInput is an input type that accepts GetBackendHealthCheckHttpArray and GetBackendHealthCheckHttpArrayOutput values.
// You can construct a concrete instance of `GetBackendHealthCheckHttpArrayInput` via:
//
//	GetBackendHealthCheckHttpArray{ GetBackendHealthCheckHttpArgs{...} }
type GetBackendHealthCheckHttpArrayInput interface {
	pulumi.Input

	ToGetBackendHealthCheckHttpArrayOutput() GetBackendHealthCheckHttpArrayOutput
	ToGetBackendHealthCheckHttpArrayOutputWithContext(context.Context) GetBackendHealthCheckHttpArrayOutput
}

type GetBackendHealthCheckHttpArray []GetBackendHealthCheckHttpInput

func (GetBackendHealthCheckHttpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendHealthCheckHttp)(nil)).Elem()
}

func (i GetBackendHealthCheckHttpArray) ToGetBackendHealthCheckHttpArrayOutput() GetBackendHealthCheckHttpArrayOutput {
	return i.ToGetBackendHealthCheckHttpArrayOutputWithContext(context.Background())
}

func (i GetBackendHealthCheckHttpArray) ToGetBackendHealthCheckHttpArrayOutputWithContext(ctx context.Context) GetBackendHealthCheckHttpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendHealthCheckHttpArrayOutput)
}

type GetBackendHealthCheckHttpOutput struct{ *pulumi.OutputState }

func (GetBackendHealthCheckHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendHealthCheckHttp)(nil)).Elem()
}

func (o GetBackendHealthCheckHttpOutput) ToGetBackendHealthCheckHttpOutput() GetBackendHealthCheckHttpOutput {
	return o
}

func (o GetBackendHealthCheckHttpOutput) ToGetBackendHealthCheckHttpOutputWithContext(ctx context.Context) GetBackendHealthCheckHttpOutput {
	return o
}

// The expected HTTP status code
func (o GetBackendHealthCheckHttpOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendHealthCheckHttp) int { return v.Code }).(pulumi.IntOutput)
}

// The HTTP host header to use for HC requests
func (o GetBackendHealthCheckHttpOutput) HostHeader() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendHealthCheckHttp) string { return v.HostHeader }).(pulumi.StringOutput)
}

// The HTTP method to use for HC requests
func (o GetBackendHealthCheckHttpOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendHealthCheckHttp) string { return v.Method }).(pulumi.StringOutput)
}

// The SNI to use for HC requests over SSL
func (o GetBackendHealthCheckHttpOutput) Sni() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendHealthCheckHttp) string { return v.Sni }).(pulumi.StringOutput)
}

// The HTTPS endpoint URL to call for HC requests
func (o GetBackendHealthCheckHttpOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendHealthCheckHttp) string { return v.Uri }).(pulumi.StringOutput)
}

type GetBackendHealthCheckHttpArrayOutput struct{ *pulumi.OutputState }

func (GetBackendHealthCheckHttpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendHealthCheckHttp)(nil)).Elem()
}

func (o GetBackendHealthCheckHttpArrayOutput) ToGetBackendHealthCheckHttpArrayOutput() GetBackendHealthCheckHttpArrayOutput {
	return o
}

func (o GetBackendHealthCheckHttpArrayOutput) ToGetBackendHealthCheckHttpArrayOutputWithContext(ctx context.Context) GetBackendHealthCheckHttpArrayOutput {
	return o
}

func (o GetBackendHealthCheckHttpArrayOutput) Index(i pulumi.IntInput) GetBackendHealthCheckHttpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackendHealthCheckHttp {
		return vs[0].([]GetBackendHealthCheckHttp)[vs[1].(int)]
	}).(GetBackendHealthCheckHttpOutput)
}

type GetBackendHealthCheckTcp struct {
}

// GetBackendHealthCheckTcpInput is an input type that accepts GetBackendHealthCheckTcpArgs and GetBackendHealthCheckTcpOutput values.
// You can construct a concrete instance of `GetBackendHealthCheckTcpInput` via:
//
//	GetBackendHealthCheckTcpArgs{...}
type GetBackendHealthCheckTcpInput interface {
	pulumi.Input

	ToGetBackendHealthCheckTcpOutput() GetBackendHealthCheckTcpOutput
	ToGetBackendHealthCheckTcpOutputWithContext(context.Context) GetBackendHealthCheckTcpOutput
}

type GetBackendHealthCheckTcpArgs struct {
}

func (GetBackendHealthCheckTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendHealthCheckTcp)(nil)).Elem()
}

func (i GetBackendHealthCheckTcpArgs) ToGetBackendHealthCheckTcpOutput() GetBackendHealthCheckTcpOutput {
	return i.ToGetBackendHealthCheckTcpOutputWithContext(context.Background())
}

func (i GetBackendHealthCheckTcpArgs) ToGetBackendHealthCheckTcpOutputWithContext(ctx context.Context) GetBackendHealthCheckTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendHealthCheckTcpOutput)
}

// GetBackendHealthCheckTcpArrayInput is an input type that accepts GetBackendHealthCheckTcpArray and GetBackendHealthCheckTcpArrayOutput values.
// You can construct a concrete instance of `GetBackendHealthCheckTcpArrayInput` via:
//
//	GetBackendHealthCheckTcpArray{ GetBackendHealthCheckTcpArgs{...} }
type GetBackendHealthCheckTcpArrayInput interface {
	pulumi.Input

	ToGetBackendHealthCheckTcpArrayOutput() GetBackendHealthCheckTcpArrayOutput
	ToGetBackendHealthCheckTcpArrayOutputWithContext(context.Context) GetBackendHealthCheckTcpArrayOutput
}

type GetBackendHealthCheckTcpArray []GetBackendHealthCheckTcpInput

func (GetBackendHealthCheckTcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendHealthCheckTcp)(nil)).Elem()
}

func (i GetBackendHealthCheckTcpArray) ToGetBackendHealthCheckTcpArrayOutput() GetBackendHealthCheckTcpArrayOutput {
	return i.ToGetBackendHealthCheckTcpArrayOutputWithContext(context.Background())
}

func (i GetBackendHealthCheckTcpArray) ToGetBackendHealthCheckTcpArrayOutputWithContext(ctx context.Context) GetBackendHealthCheckTcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendHealthCheckTcpArrayOutput)
}

type GetBackendHealthCheckTcpOutput struct{ *pulumi.OutputState }

func (GetBackendHealthCheckTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendHealthCheckTcp)(nil)).Elem()
}

func (o GetBackendHealthCheckTcpOutput) ToGetBackendHealthCheckTcpOutput() GetBackendHealthCheckTcpOutput {
	return o
}

func (o GetBackendHealthCheckTcpOutput) ToGetBackendHealthCheckTcpOutputWithContext(ctx context.Context) GetBackendHealthCheckTcpOutput {
	return o
}

type GetBackendHealthCheckTcpArrayOutput struct{ *pulumi.OutputState }

func (GetBackendHealthCheckTcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendHealthCheckTcp)(nil)).Elem()
}

func (o GetBackendHealthCheckTcpArrayOutput) ToGetBackendHealthCheckTcpArrayOutput() GetBackendHealthCheckTcpArrayOutput {
	return o
}

func (o GetBackendHealthCheckTcpArrayOutput) ToGetBackendHealthCheckTcpArrayOutputWithContext(ctx context.Context) GetBackendHealthCheckTcpArrayOutput {
	return o
}

func (o GetBackendHealthCheckTcpArrayOutput) Index(i pulumi.IntInput) GetBackendHealthCheckTcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackendHealthCheckTcp {
		return vs[0].([]GetBackendHealthCheckTcp)[vs[1].(int)]
	}).(GetBackendHealthCheckTcpOutput)
}

type GetBackendsBackend struct {
	// The date on which the backend was created (RFC 3339 format).
	CreatedAt string `pulumi:"createdAt"`
	// Scaleway S3 bucket website to be served if all backend servers are down.
	FailoverHost string `pulumi:"failoverHost"`
	// User sessions will be forwarded to this backend server port.
	ForwardPort int `pulumi:"forwardPort"`
	// Load balancing algorithm.
	ForwardPortAlgorithm string `pulumi:"forwardPortAlgorithm"`
	// Backend protocol.
	ForwardProtocol string `pulumi:"forwardProtocol"`
	// Interval between two health check requests.
	HealthCheckDelay string `pulumi:"healthCheckDelay"`
	// This block enables HTTP health checks.
	HealthCheckHttp []GetBackendsBackendHealthCheckHttp `pulumi:"healthCheckHttp"`
	// This block enables HTTPS health checks.
	HealthCheckHttps []GetBackendsBackendHealthCheckHttp `pulumi:"healthCheckHttps"`
	// Number of allowed failed health check requests before the backend server is marked as down.
	HealthCheckMaxRetries int `pulumi:"healthCheckMaxRetries"`
	// Port the health check requests will be sent to.
	HealthCheckPort int `pulumi:"healthCheckPort"`
	// This block enables TCP health checks.
	HealthCheckTcps []GetBackendsBackendHealthCheckTcp `pulumi:"healthCheckTcps"`
	// Timeout before a health check request is considered failed.
	HealthCheckTimeout string `pulumi:"healthCheckTimeout"`
	// The associated backend ID.
	Id string `pulumi:"id"`
	// Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection.
	IgnoreSslServerVerify bool `pulumi:"ignoreSslServerVerify"`
	// The Load Balancer ID this backend is attached to. Backends with a matching ID are listed.
	LbId string `pulumi:"lbId"`
	// The backend name to filter for. Backends with a matching name are listed.
	Name string `pulumi:"name"`
	// Modify what occurs when a backend server is marked down.
	OnMarkedDownAction string `pulumi:"onMarkedDownAction"`
	// The type of PROXY protocol.
	ProxyProtocol string `pulumi:"proxyProtocol"`
	// List of backend server IP addresses.
	ServerIps []string `pulumi:"serverIps"`
	// Enables SSL between Load Balancer and backend servers.
	SslBridging bool `pulumi:"sslBridging"`
	// Enables cookie-based session persistence.
	StickySessions string `pulumi:"stickySessions"`
	// Cookie name for sticky sessions.
	StickySessionsCookieName string `pulumi:"stickySessionsCookieName"`
	// Maximum initial server connection establishment time.
	TimeoutConnect string `pulumi:"timeoutConnect"`
	// Maximum server connection inactivity time.
	TimeoutServer string `pulumi:"timeoutServer"`
	// Maximum tunnel inactivity time.
	TimeoutTunnel string `pulumi:"timeoutTunnel"`
	// The date on which the backend was last updated (RFC 3339 format).
	UpdateAt string `pulumi:"updateAt"`
}

// GetBackendsBackendInput is an input type that accepts GetBackendsBackendArgs and GetBackendsBackendOutput values.
// You can construct a concrete instance of `GetBackendsBackendInput` via:
//
//	GetBackendsBackendArgs{...}
type GetBackendsBackendInput interface {
	pulumi.Input

	ToGetBackendsBackendOutput() GetBackendsBackendOutput
	ToGetBackendsBackendOutputWithContext(context.Context) GetBackendsBackendOutput
}

type GetBackendsBackendArgs struct {
	// The date on which the backend was created (RFC 3339 format).
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Scaleway S3 bucket website to be served if all backend servers are down.
	FailoverHost pulumi.StringInput `pulumi:"failoverHost"`
	// User sessions will be forwarded to this backend server port.
	ForwardPort pulumi.IntInput `pulumi:"forwardPort"`
	// Load balancing algorithm.
	ForwardPortAlgorithm pulumi.StringInput `pulumi:"forwardPortAlgorithm"`
	// Backend protocol.
	ForwardProtocol pulumi.StringInput `pulumi:"forwardProtocol"`
	// Interval between two health check requests.
	HealthCheckDelay pulumi.StringInput `pulumi:"healthCheckDelay"`
	// This block enables HTTP health checks.
	HealthCheckHttp GetBackendsBackendHealthCheckHttpArrayInput `pulumi:"healthCheckHttp"`
	// This block enables HTTPS health checks.
	HealthCheckHttps GetBackendsBackendHealthCheckHttpArrayInput `pulumi:"healthCheckHttps"`
	// Number of allowed failed health check requests before the backend server is marked as down.
	HealthCheckMaxRetries pulumi.IntInput `pulumi:"healthCheckMaxRetries"`
	// Port the health check requests will be sent to.
	HealthCheckPort pulumi.IntInput `pulumi:"healthCheckPort"`
	// This block enables TCP health checks.
	HealthCheckTcps GetBackendsBackendHealthCheckTcpArrayInput `pulumi:"healthCheckTcps"`
	// Timeout before a health check request is considered failed.
	HealthCheckTimeout pulumi.StringInput `pulumi:"healthCheckTimeout"`
	// The associated backend ID.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection.
	IgnoreSslServerVerify pulumi.BoolInput `pulumi:"ignoreSslServerVerify"`
	// The Load Balancer ID this backend is attached to. Backends with a matching ID are listed.
	LbId pulumi.StringInput `pulumi:"lbId"`
	// The backend name to filter for. Backends with a matching name are listed.
	Name pulumi.StringInput `pulumi:"name"`
	// Modify what occurs when a backend server is marked down.
	OnMarkedDownAction pulumi.StringInput `pulumi:"onMarkedDownAction"`
	// The type of PROXY protocol.
	ProxyProtocol pulumi.StringInput `pulumi:"proxyProtocol"`
	// List of backend server IP addresses.
	ServerIps pulumi.StringArrayInput `pulumi:"serverIps"`
	// Enables SSL between Load Balancer and backend servers.
	SslBridging pulumi.BoolInput `pulumi:"sslBridging"`
	// Enables cookie-based session persistence.
	StickySessions pulumi.StringInput `pulumi:"stickySessions"`
	// Cookie name for sticky sessions.
	StickySessionsCookieName pulumi.StringInput `pulumi:"stickySessionsCookieName"`
	// Maximum initial server connection establishment time.
	TimeoutConnect pulumi.StringInput `pulumi:"timeoutConnect"`
	// Maximum server connection inactivity time.
	TimeoutServer pulumi.StringInput `pulumi:"timeoutServer"`
	// Maximum tunnel inactivity time.
	TimeoutTunnel pulumi.StringInput `pulumi:"timeoutTunnel"`
	// The date on which the backend was last updated (RFC 3339 format).
	UpdateAt pulumi.StringInput `pulumi:"updateAt"`
}

func (GetBackendsBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendsBackend)(nil)).Elem()
}

func (i GetBackendsBackendArgs) ToGetBackendsBackendOutput() GetBackendsBackendOutput {
	return i.ToGetBackendsBackendOutputWithContext(context.Background())
}

func (i GetBackendsBackendArgs) ToGetBackendsBackendOutputWithContext(ctx context.Context) GetBackendsBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendsBackendOutput)
}

// GetBackendsBackendArrayInput is an input type that accepts GetBackendsBackendArray and GetBackendsBackendArrayOutput values.
// You can construct a concrete instance of `GetBackendsBackendArrayInput` via:
//
//	GetBackendsBackendArray{ GetBackendsBackendArgs{...} }
type GetBackendsBackendArrayInput interface {
	pulumi.Input

	ToGetBackendsBackendArrayOutput() GetBackendsBackendArrayOutput
	ToGetBackendsBackendArrayOutputWithContext(context.Context) GetBackendsBackendArrayOutput
}

type GetBackendsBackendArray []GetBackendsBackendInput

func (GetBackendsBackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendsBackend)(nil)).Elem()
}

func (i GetBackendsBackendArray) ToGetBackendsBackendArrayOutput() GetBackendsBackendArrayOutput {
	return i.ToGetBackendsBackendArrayOutputWithContext(context.Background())
}

func (i GetBackendsBackendArray) ToGetBackendsBackendArrayOutputWithContext(ctx context.Context) GetBackendsBackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendsBackendArrayOutput)
}

type GetBackendsBackendOutput struct{ *pulumi.OutputState }

func (GetBackendsBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendsBackend)(nil)).Elem()
}

func (o GetBackendsBackendOutput) ToGetBackendsBackendOutput() GetBackendsBackendOutput {
	return o
}

func (o GetBackendsBackendOutput) ToGetBackendsBackendOutputWithContext(ctx context.Context) GetBackendsBackendOutput {
	return o
}

// The date on which the backend was created (RFC 3339 format).
func (o GetBackendsBackendOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Scaleway S3 bucket website to be served if all backend servers are down.
func (o GetBackendsBackendOutput) FailoverHost() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.FailoverHost }).(pulumi.StringOutput)
}

// User sessions will be forwarded to this backend server port.
func (o GetBackendsBackendOutput) ForwardPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendsBackend) int { return v.ForwardPort }).(pulumi.IntOutput)
}

// Load balancing algorithm.
func (o GetBackendsBackendOutput) ForwardPortAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.ForwardPortAlgorithm }).(pulumi.StringOutput)
}

// Backend protocol.
func (o GetBackendsBackendOutput) ForwardProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.ForwardProtocol }).(pulumi.StringOutput)
}

// Interval between two health check requests.
func (o GetBackendsBackendOutput) HealthCheckDelay() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.HealthCheckDelay }).(pulumi.StringOutput)
}

// This block enables HTTP health checks.
func (o GetBackendsBackendOutput) HealthCheckHttp() GetBackendsBackendHealthCheckHttpArrayOutput {
	return o.ApplyT(func(v GetBackendsBackend) []GetBackendsBackendHealthCheckHttp { return v.HealthCheckHttp }).(GetBackendsBackendHealthCheckHttpArrayOutput)
}

// This block enables HTTPS health checks.
func (o GetBackendsBackendOutput) HealthCheckHttps() GetBackendsBackendHealthCheckHttpArrayOutput {
	return o.ApplyT(func(v GetBackendsBackend) []GetBackendsBackendHealthCheckHttp { return v.HealthCheckHttps }).(GetBackendsBackendHealthCheckHttpArrayOutput)
}

// Number of allowed failed health check requests before the backend server is marked as down.
func (o GetBackendsBackendOutput) HealthCheckMaxRetries() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendsBackend) int { return v.HealthCheckMaxRetries }).(pulumi.IntOutput)
}

// Port the health check requests will be sent to.
func (o GetBackendsBackendOutput) HealthCheckPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendsBackend) int { return v.HealthCheckPort }).(pulumi.IntOutput)
}

// This block enables TCP health checks.
func (o GetBackendsBackendOutput) HealthCheckTcps() GetBackendsBackendHealthCheckTcpArrayOutput {
	return o.ApplyT(func(v GetBackendsBackend) []GetBackendsBackendHealthCheckTcp { return v.HealthCheckTcps }).(GetBackendsBackendHealthCheckTcpArrayOutput)
}

// Timeout before a health check request is considered failed.
func (o GetBackendsBackendOutput) HealthCheckTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.HealthCheckTimeout }).(pulumi.StringOutput)
}

// The associated backend ID.
func (o GetBackendsBackendOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection.
func (o GetBackendsBackendOutput) IgnoreSslServerVerify() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBackendsBackend) bool { return v.IgnoreSslServerVerify }).(pulumi.BoolOutput)
}

// The Load Balancer ID this backend is attached to. Backends with a matching ID are listed.
func (o GetBackendsBackendOutput) LbId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.LbId }).(pulumi.StringOutput)
}

// The backend name to filter for. Backends with a matching name are listed.
func (o GetBackendsBackendOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.Name }).(pulumi.StringOutput)
}

// Modify what occurs when a backend server is marked down.
func (o GetBackendsBackendOutput) OnMarkedDownAction() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.OnMarkedDownAction }).(pulumi.StringOutput)
}

// The type of PROXY protocol.
func (o GetBackendsBackendOutput) ProxyProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.ProxyProtocol }).(pulumi.StringOutput)
}

// List of backend server IP addresses.
func (o GetBackendsBackendOutput) ServerIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBackendsBackend) []string { return v.ServerIps }).(pulumi.StringArrayOutput)
}

// Enables SSL between Load Balancer and backend servers.
func (o GetBackendsBackendOutput) SslBridging() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBackendsBackend) bool { return v.SslBridging }).(pulumi.BoolOutput)
}

// Enables cookie-based session persistence.
func (o GetBackendsBackendOutput) StickySessions() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.StickySessions }).(pulumi.StringOutput)
}

// Cookie name for sticky sessions.
func (o GetBackendsBackendOutput) StickySessionsCookieName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.StickySessionsCookieName }).(pulumi.StringOutput)
}

// Maximum initial server connection establishment time.
func (o GetBackendsBackendOutput) TimeoutConnect() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.TimeoutConnect }).(pulumi.StringOutput)
}

// Maximum server connection inactivity time.
func (o GetBackendsBackendOutput) TimeoutServer() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.TimeoutServer }).(pulumi.StringOutput)
}

// Maximum tunnel inactivity time.
func (o GetBackendsBackendOutput) TimeoutTunnel() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.TimeoutTunnel }).(pulumi.StringOutput)
}

// The date on which the backend was last updated (RFC 3339 format).
func (o GetBackendsBackendOutput) UpdateAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.UpdateAt }).(pulumi.StringOutput)
}

type GetBackendsBackendArrayOutput struct{ *pulumi.OutputState }

func (GetBackendsBackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendsBackend)(nil)).Elem()
}

func (o GetBackendsBackendArrayOutput) ToGetBackendsBackendArrayOutput() GetBackendsBackendArrayOutput {
	return o
}

func (o GetBackendsBackendArrayOutput) ToGetBackendsBackendArrayOutputWithContext(ctx context.Context) GetBackendsBackendArrayOutput {
	return o
}

func (o GetBackendsBackendArrayOutput) Index(i pulumi.IntInput) GetBackendsBackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackendsBackend {
		return vs[0].([]GetBackendsBackend)[vs[1].(int)]
	}).(GetBackendsBackendOutput)
}

type GetBackendsBackendHealthCheckHttp struct {
	// The expected HTTP status code.
	Code int `pulumi:"code"`
	// The HTTP host header to use for health check requests.
	HostHeader string `pulumi:"hostHeader"`
	// The HTTP method to use for health check requests.
	Method string `pulumi:"method"`
	// The SNI to use for HC requests over SSL.
	Sni string `pulumi:"sni"`
	// The path of health check requests.
	Uri string `pulumi:"uri"`
}

// GetBackendsBackendHealthCheckHttpInput is an input type that accepts GetBackendsBackendHealthCheckHttpArgs and GetBackendsBackendHealthCheckHttpOutput values.
// You can construct a concrete instance of `GetBackendsBackendHealthCheckHttpInput` via:
//
//	GetBackendsBackendHealthCheckHttpArgs{...}
type GetBackendsBackendHealthCheckHttpInput interface {
	pulumi.Input

	ToGetBackendsBackendHealthCheckHttpOutput() GetBackendsBackendHealthCheckHttpOutput
	ToGetBackendsBackendHealthCheckHttpOutputWithContext(context.Context) GetBackendsBackendHealthCheckHttpOutput
}

type GetBackendsBackendHealthCheckHttpArgs struct {
	// The expected HTTP status code.
	Code pulumi.IntInput `pulumi:"code"`
	// The HTTP host header to use for health check requests.
	HostHeader pulumi.StringInput `pulumi:"hostHeader"`
	// The HTTP method to use for health check requests.
	Method pulumi.StringInput `pulumi:"method"`
	// The SNI to use for HC requests over SSL.
	Sni pulumi.StringInput `pulumi:"sni"`
	// The path of health check requests.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (GetBackendsBackendHealthCheckHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendsBackendHealthCheckHttp)(nil)).Elem()
}

func (i GetBackendsBackendHealthCheckHttpArgs) ToGetBackendsBackendHealthCheckHttpOutput() GetBackendsBackendHealthCheckHttpOutput {
	return i.ToGetBackendsBackendHealthCheckHttpOutputWithContext(context.Background())
}

func (i GetBackendsBackendHealthCheckHttpArgs) ToGetBackendsBackendHealthCheckHttpOutputWithContext(ctx context.Context) GetBackendsBackendHealthCheckHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendsBackendHealthCheckHttpOutput)
}

// GetBackendsBackendHealthCheckHttpArrayInput is an input type that accepts GetBackendsBackendHealthCheckHttpArray and GetBackendsBackendHealthCheckHttpArrayOutput values.
// You can construct a concrete instance of `GetBackendsBackendHealthCheckHttpArrayInput` via:
//
//	GetBackendsBackendHealthCheckHttpArray{ GetBackendsBackendHealthCheckHttpArgs{...} }
type GetBackendsBackendHealthCheckHttpArrayInput interface {
	pulumi.Input

	ToGetBackendsBackendHealthCheckHttpArrayOutput() GetBackendsBackendHealthCheckHttpArrayOutput
	ToGetBackendsBackendHealthCheckHttpArrayOutputWithContext(context.Context) GetBackendsBackendHealthCheckHttpArrayOutput
}

type GetBackendsBackendHealthCheckHttpArray []GetBackendsBackendHealthCheckHttpInput

func (GetBackendsBackendHealthCheckHttpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendsBackendHealthCheckHttp)(nil)).Elem()
}

func (i GetBackendsBackendHealthCheckHttpArray) ToGetBackendsBackendHealthCheckHttpArrayOutput() GetBackendsBackendHealthCheckHttpArrayOutput {
	return i.ToGetBackendsBackendHealthCheckHttpArrayOutputWithContext(context.Background())
}

func (i GetBackendsBackendHealthCheckHttpArray) ToGetBackendsBackendHealthCheckHttpArrayOutputWithContext(ctx context.Context) GetBackendsBackendHealthCheckHttpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendsBackendHealthCheckHttpArrayOutput)
}

type GetBackendsBackendHealthCheckHttpOutput struct{ *pulumi.OutputState }

func (GetBackendsBackendHealthCheckHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendsBackendHealthCheckHttp)(nil)).Elem()
}

func (o GetBackendsBackendHealthCheckHttpOutput) ToGetBackendsBackendHealthCheckHttpOutput() GetBackendsBackendHealthCheckHttpOutput {
	return o
}

func (o GetBackendsBackendHealthCheckHttpOutput) ToGetBackendsBackendHealthCheckHttpOutputWithContext(ctx context.Context) GetBackendsBackendHealthCheckHttpOutput {
	return o
}

// The expected HTTP status code.
func (o GetBackendsBackendHealthCheckHttpOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendsBackendHealthCheckHttp) int { return v.Code }).(pulumi.IntOutput)
}

// The HTTP host header to use for health check requests.
func (o GetBackendsBackendHealthCheckHttpOutput) HostHeader() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackendHealthCheckHttp) string { return v.HostHeader }).(pulumi.StringOutput)
}

// The HTTP method to use for health check requests.
func (o GetBackendsBackendHealthCheckHttpOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackendHealthCheckHttp) string { return v.Method }).(pulumi.StringOutput)
}

// The SNI to use for HC requests over SSL.
func (o GetBackendsBackendHealthCheckHttpOutput) Sni() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackendHealthCheckHttp) string { return v.Sni }).(pulumi.StringOutput)
}

// The path of health check requests.
func (o GetBackendsBackendHealthCheckHttpOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackendHealthCheckHttp) string { return v.Uri }).(pulumi.StringOutput)
}

type GetBackendsBackendHealthCheckHttpArrayOutput struct{ *pulumi.OutputState }

func (GetBackendsBackendHealthCheckHttpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendsBackendHealthCheckHttp)(nil)).Elem()
}

func (o GetBackendsBackendHealthCheckHttpArrayOutput) ToGetBackendsBackendHealthCheckHttpArrayOutput() GetBackendsBackendHealthCheckHttpArrayOutput {
	return o
}

func (o GetBackendsBackendHealthCheckHttpArrayOutput) ToGetBackendsBackendHealthCheckHttpArrayOutputWithContext(ctx context.Context) GetBackendsBackendHealthCheckHttpArrayOutput {
	return o
}

func (o GetBackendsBackendHealthCheckHttpArrayOutput) Index(i pulumi.IntInput) GetBackendsBackendHealthCheckHttpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackendsBackendHealthCheckHttp {
		return vs[0].([]GetBackendsBackendHealthCheckHttp)[vs[1].(int)]
	}).(GetBackendsBackendHealthCheckHttpOutput)
}

type GetBackendsBackendHealthCheckTcp struct {
}

// GetBackendsBackendHealthCheckTcpInput is an input type that accepts GetBackendsBackendHealthCheckTcpArgs and GetBackendsBackendHealthCheckTcpOutput values.
// You can construct a concrete instance of `GetBackendsBackendHealthCheckTcpInput` via:
//
//	GetBackendsBackendHealthCheckTcpArgs{...}
type GetBackendsBackendHealthCheckTcpInput interface {
	pulumi.Input

	ToGetBackendsBackendHealthCheckTcpOutput() GetBackendsBackendHealthCheckTcpOutput
	ToGetBackendsBackendHealthCheckTcpOutputWithContext(context.Context) GetBackendsBackendHealthCheckTcpOutput
}

type GetBackendsBackendHealthCheckTcpArgs struct {
}

func (GetBackendsBackendHealthCheckTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendsBackendHealthCheckTcp)(nil)).Elem()
}

func (i GetBackendsBackendHealthCheckTcpArgs) ToGetBackendsBackendHealthCheckTcpOutput() GetBackendsBackendHealthCheckTcpOutput {
	return i.ToGetBackendsBackendHealthCheckTcpOutputWithContext(context.Background())
}

func (i GetBackendsBackendHealthCheckTcpArgs) ToGetBackendsBackendHealthCheckTcpOutputWithContext(ctx context.Context) GetBackendsBackendHealthCheckTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendsBackendHealthCheckTcpOutput)
}

// GetBackendsBackendHealthCheckTcpArrayInput is an input type that accepts GetBackendsBackendHealthCheckTcpArray and GetBackendsBackendHealthCheckTcpArrayOutput values.
// You can construct a concrete instance of `GetBackendsBackendHealthCheckTcpArrayInput` via:
//
//	GetBackendsBackendHealthCheckTcpArray{ GetBackendsBackendHealthCheckTcpArgs{...} }
type GetBackendsBackendHealthCheckTcpArrayInput interface {
	pulumi.Input

	ToGetBackendsBackendHealthCheckTcpArrayOutput() GetBackendsBackendHealthCheckTcpArrayOutput
	ToGetBackendsBackendHealthCheckTcpArrayOutputWithContext(context.Context) GetBackendsBackendHealthCheckTcpArrayOutput
}

type GetBackendsBackendHealthCheckTcpArray []GetBackendsBackendHealthCheckTcpInput

func (GetBackendsBackendHealthCheckTcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendsBackendHealthCheckTcp)(nil)).Elem()
}

func (i GetBackendsBackendHealthCheckTcpArray) ToGetBackendsBackendHealthCheckTcpArrayOutput() GetBackendsBackendHealthCheckTcpArrayOutput {
	return i.ToGetBackendsBackendHealthCheckTcpArrayOutputWithContext(context.Background())
}

func (i GetBackendsBackendHealthCheckTcpArray) ToGetBackendsBackendHealthCheckTcpArrayOutputWithContext(ctx context.Context) GetBackendsBackendHealthCheckTcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendsBackendHealthCheckTcpArrayOutput)
}

type GetBackendsBackendHealthCheckTcpOutput struct{ *pulumi.OutputState }

func (GetBackendsBackendHealthCheckTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendsBackendHealthCheckTcp)(nil)).Elem()
}

func (o GetBackendsBackendHealthCheckTcpOutput) ToGetBackendsBackendHealthCheckTcpOutput() GetBackendsBackendHealthCheckTcpOutput {
	return o
}

func (o GetBackendsBackendHealthCheckTcpOutput) ToGetBackendsBackendHealthCheckTcpOutputWithContext(ctx context.Context) GetBackendsBackendHealthCheckTcpOutput {
	return o
}

type GetBackendsBackendHealthCheckTcpArrayOutput struct{ *pulumi.OutputState }

func (GetBackendsBackendHealthCheckTcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendsBackendHealthCheckTcp)(nil)).Elem()
}

func (o GetBackendsBackendHealthCheckTcpArrayOutput) ToGetBackendsBackendHealthCheckTcpArrayOutput() GetBackendsBackendHealthCheckTcpArrayOutput {
	return o
}

func (o GetBackendsBackendHealthCheckTcpArrayOutput) ToGetBackendsBackendHealthCheckTcpArrayOutputWithContext(ctx context.Context) GetBackendsBackendHealthCheckTcpArrayOutput {
	return o
}

func (o GetBackendsBackendHealthCheckTcpArrayOutput) Index(i pulumi.IntInput) GetBackendsBackendHealthCheckTcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackendsBackendHealthCheckTcp {
		return vs[0].([]GetBackendsBackendHealthCheckTcp)[vs[1].(int)]
	}).(GetBackendsBackendHealthCheckTcpOutput)
}

type GetCertificateCustomCertificate struct {
	// The full PEM-formatted certificate chain
	CertificateChain string `pulumi:"certificateChain"`
}

// GetCertificateCustomCertificateInput is an input type that accepts GetCertificateCustomCertificateArgs and GetCertificateCustomCertificateOutput values.
// You can construct a concrete instance of `GetCertificateCustomCertificateInput` via:
//
//	GetCertificateCustomCertificateArgs{...}
type GetCertificateCustomCertificateInput interface {
	pulumi.Input

	ToGetCertificateCustomCertificateOutput() GetCertificateCustomCertificateOutput
	ToGetCertificateCustomCertificateOutputWithContext(context.Context) GetCertificateCustomCertificateOutput
}

type GetCertificateCustomCertificateArgs struct {
	// The full PEM-formatted certificate chain
	CertificateChain pulumi.StringInput `pulumi:"certificateChain"`
}

func (GetCertificateCustomCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateCustomCertificate)(nil)).Elem()
}

func (i GetCertificateCustomCertificateArgs) ToGetCertificateCustomCertificateOutput() GetCertificateCustomCertificateOutput {
	return i.ToGetCertificateCustomCertificateOutputWithContext(context.Background())
}

func (i GetCertificateCustomCertificateArgs) ToGetCertificateCustomCertificateOutputWithContext(ctx context.Context) GetCertificateCustomCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateCustomCertificateOutput)
}

// GetCertificateCustomCertificateArrayInput is an input type that accepts GetCertificateCustomCertificateArray and GetCertificateCustomCertificateArrayOutput values.
// You can construct a concrete instance of `GetCertificateCustomCertificateArrayInput` via:
//
//	GetCertificateCustomCertificateArray{ GetCertificateCustomCertificateArgs{...} }
type GetCertificateCustomCertificateArrayInput interface {
	pulumi.Input

	ToGetCertificateCustomCertificateArrayOutput() GetCertificateCustomCertificateArrayOutput
	ToGetCertificateCustomCertificateArrayOutputWithContext(context.Context) GetCertificateCustomCertificateArrayOutput
}

type GetCertificateCustomCertificateArray []GetCertificateCustomCertificateInput

func (GetCertificateCustomCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateCustomCertificate)(nil)).Elem()
}

func (i GetCertificateCustomCertificateArray) ToGetCertificateCustomCertificateArrayOutput() GetCertificateCustomCertificateArrayOutput {
	return i.ToGetCertificateCustomCertificateArrayOutputWithContext(context.Background())
}

func (i GetCertificateCustomCertificateArray) ToGetCertificateCustomCertificateArrayOutputWithContext(ctx context.Context) GetCertificateCustomCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateCustomCertificateArrayOutput)
}

type GetCertificateCustomCertificateOutput struct{ *pulumi.OutputState }

func (GetCertificateCustomCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateCustomCertificate)(nil)).Elem()
}

func (o GetCertificateCustomCertificateOutput) ToGetCertificateCustomCertificateOutput() GetCertificateCustomCertificateOutput {
	return o
}

func (o GetCertificateCustomCertificateOutput) ToGetCertificateCustomCertificateOutputWithContext(ctx context.Context) GetCertificateCustomCertificateOutput {
	return o
}

// The full PEM-formatted certificate chain
func (o GetCertificateCustomCertificateOutput) CertificateChain() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateCustomCertificate) string { return v.CertificateChain }).(pulumi.StringOutput)
}

type GetCertificateCustomCertificateArrayOutput struct{ *pulumi.OutputState }

func (GetCertificateCustomCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateCustomCertificate)(nil)).Elem()
}

func (o GetCertificateCustomCertificateArrayOutput) ToGetCertificateCustomCertificateArrayOutput() GetCertificateCustomCertificateArrayOutput {
	return o
}

func (o GetCertificateCustomCertificateArrayOutput) ToGetCertificateCustomCertificateArrayOutputWithContext(ctx context.Context) GetCertificateCustomCertificateArrayOutput {
	return o
}

func (o GetCertificateCustomCertificateArrayOutput) Index(i pulumi.IntInput) GetCertificateCustomCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCertificateCustomCertificate {
		return vs[0].([]GetCertificateCustomCertificate)[vs[1].(int)]
	}).(GetCertificateCustomCertificateOutput)
}

type GetCertificateLetsencrypt struct {
	// The main domain name of the certificate
	CommonName string `pulumi:"commonName"`
	// The alternative domain names of the certificate
	SubjectAlternativeNames []string `pulumi:"subjectAlternativeNames"`
}

// GetCertificateLetsencryptInput is an input type that accepts GetCertificateLetsencryptArgs and GetCertificateLetsencryptOutput values.
// You can construct a concrete instance of `GetCertificateLetsencryptInput` via:
//
//	GetCertificateLetsencryptArgs{...}
type GetCertificateLetsencryptInput interface {
	pulumi.Input

	ToGetCertificateLetsencryptOutput() GetCertificateLetsencryptOutput
	ToGetCertificateLetsencryptOutputWithContext(context.Context) GetCertificateLetsencryptOutput
}

type GetCertificateLetsencryptArgs struct {
	// The main domain name of the certificate
	CommonName pulumi.StringInput `pulumi:"commonName"`
	// The alternative domain names of the certificate
	SubjectAlternativeNames pulumi.StringArrayInput `pulumi:"subjectAlternativeNames"`
}

func (GetCertificateLetsencryptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateLetsencrypt)(nil)).Elem()
}

func (i GetCertificateLetsencryptArgs) ToGetCertificateLetsencryptOutput() GetCertificateLetsencryptOutput {
	return i.ToGetCertificateLetsencryptOutputWithContext(context.Background())
}

func (i GetCertificateLetsencryptArgs) ToGetCertificateLetsencryptOutputWithContext(ctx context.Context) GetCertificateLetsencryptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateLetsencryptOutput)
}

// GetCertificateLetsencryptArrayInput is an input type that accepts GetCertificateLetsencryptArray and GetCertificateLetsencryptArrayOutput values.
// You can construct a concrete instance of `GetCertificateLetsencryptArrayInput` via:
//
//	GetCertificateLetsencryptArray{ GetCertificateLetsencryptArgs{...} }
type GetCertificateLetsencryptArrayInput interface {
	pulumi.Input

	ToGetCertificateLetsencryptArrayOutput() GetCertificateLetsencryptArrayOutput
	ToGetCertificateLetsencryptArrayOutputWithContext(context.Context) GetCertificateLetsencryptArrayOutput
}

type GetCertificateLetsencryptArray []GetCertificateLetsencryptInput

func (GetCertificateLetsencryptArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateLetsencrypt)(nil)).Elem()
}

func (i GetCertificateLetsencryptArray) ToGetCertificateLetsencryptArrayOutput() GetCertificateLetsencryptArrayOutput {
	return i.ToGetCertificateLetsencryptArrayOutputWithContext(context.Background())
}

func (i GetCertificateLetsencryptArray) ToGetCertificateLetsencryptArrayOutputWithContext(ctx context.Context) GetCertificateLetsencryptArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateLetsencryptArrayOutput)
}

type GetCertificateLetsencryptOutput struct{ *pulumi.OutputState }

func (GetCertificateLetsencryptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateLetsencrypt)(nil)).Elem()
}

func (o GetCertificateLetsencryptOutput) ToGetCertificateLetsencryptOutput() GetCertificateLetsencryptOutput {
	return o
}

func (o GetCertificateLetsencryptOutput) ToGetCertificateLetsencryptOutputWithContext(ctx context.Context) GetCertificateLetsencryptOutput {
	return o
}

// The main domain name of the certificate
func (o GetCertificateLetsencryptOutput) CommonName() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateLetsencrypt) string { return v.CommonName }).(pulumi.StringOutput)
}

// The alternative domain names of the certificate
func (o GetCertificateLetsencryptOutput) SubjectAlternativeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCertificateLetsencrypt) []string { return v.SubjectAlternativeNames }).(pulumi.StringArrayOutput)
}

type GetCertificateLetsencryptArrayOutput struct{ *pulumi.OutputState }

func (GetCertificateLetsencryptArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateLetsencrypt)(nil)).Elem()
}

func (o GetCertificateLetsencryptArrayOutput) ToGetCertificateLetsencryptArrayOutput() GetCertificateLetsencryptArrayOutput {
	return o
}

func (o GetCertificateLetsencryptArrayOutput) ToGetCertificateLetsencryptArrayOutputWithContext(ctx context.Context) GetCertificateLetsencryptArrayOutput {
	return o
}

func (o GetCertificateLetsencryptArrayOutput) Index(i pulumi.IntInput) GetCertificateLetsencryptOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCertificateLetsencrypt {
		return vs[0].([]GetCertificateLetsencrypt)[vs[1].(int)]
	}).(GetCertificateLetsencryptOutput)
}

type GetFrontendAcl struct {
	// Action to undertake when an ACL filter matches
	Actions []GetFrontendAclAction `pulumi:"actions"`
	// IsDate and time of ACL's creation (RFC 3339 format)
	CreatedAt string `pulumi:"createdAt"`
	// Description of the ACL
	Description string `pulumi:"description"`
	// The ACL match rule
	Matches []GetFrontendAclMatch `pulumi:"matches"`
	// The name of the frontend.
	// - When using the `name` you should specify the `lb-id`
	Name string `pulumi:"name"`
	// IsDate and time of ACL's update (RFC 3339 format)
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetFrontendAclInput is an input type that accepts GetFrontendAclArgs and GetFrontendAclOutput values.
// You can construct a concrete instance of `GetFrontendAclInput` via:
//
//	GetFrontendAclArgs{...}
type GetFrontendAclInput interface {
	pulumi.Input

	ToGetFrontendAclOutput() GetFrontendAclOutput
	ToGetFrontendAclOutputWithContext(context.Context) GetFrontendAclOutput
}

type GetFrontendAclArgs struct {
	// Action to undertake when an ACL filter matches
	Actions GetFrontendAclActionArrayInput `pulumi:"actions"`
	// IsDate and time of ACL's creation (RFC 3339 format)
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Description of the ACL
	Description pulumi.StringInput `pulumi:"description"`
	// The ACL match rule
	Matches GetFrontendAclMatchArrayInput `pulumi:"matches"`
	// The name of the frontend.
	// - When using the `name` you should specify the `lb-id`
	Name pulumi.StringInput `pulumi:"name"`
	// IsDate and time of ACL's update (RFC 3339 format)
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetFrontendAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrontendAcl)(nil)).Elem()
}

func (i GetFrontendAclArgs) ToGetFrontendAclOutput() GetFrontendAclOutput {
	return i.ToGetFrontendAclOutputWithContext(context.Background())
}

func (i GetFrontendAclArgs) ToGetFrontendAclOutputWithContext(ctx context.Context) GetFrontendAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrontendAclOutput)
}

// GetFrontendAclArrayInput is an input type that accepts GetFrontendAclArray and GetFrontendAclArrayOutput values.
// You can construct a concrete instance of `GetFrontendAclArrayInput` via:
//
//	GetFrontendAclArray{ GetFrontendAclArgs{...} }
type GetFrontendAclArrayInput interface {
	pulumi.Input

	ToGetFrontendAclArrayOutput() GetFrontendAclArrayOutput
	ToGetFrontendAclArrayOutputWithContext(context.Context) GetFrontendAclArrayOutput
}

type GetFrontendAclArray []GetFrontendAclInput

func (GetFrontendAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrontendAcl)(nil)).Elem()
}

func (i GetFrontendAclArray) ToGetFrontendAclArrayOutput() GetFrontendAclArrayOutput {
	return i.ToGetFrontendAclArrayOutputWithContext(context.Background())
}

func (i GetFrontendAclArray) ToGetFrontendAclArrayOutputWithContext(ctx context.Context) GetFrontendAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrontendAclArrayOutput)
}

type GetFrontendAclOutput struct{ *pulumi.OutputState }

func (GetFrontendAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrontendAcl)(nil)).Elem()
}

func (o GetFrontendAclOutput) ToGetFrontendAclOutput() GetFrontendAclOutput {
	return o
}

func (o GetFrontendAclOutput) ToGetFrontendAclOutputWithContext(ctx context.Context) GetFrontendAclOutput {
	return o
}

// Action to undertake when an ACL filter matches
func (o GetFrontendAclOutput) Actions() GetFrontendAclActionArrayOutput {
	return o.ApplyT(func(v GetFrontendAcl) []GetFrontendAclAction { return v.Actions }).(GetFrontendAclActionArrayOutput)
}

// IsDate and time of ACL's creation (RFC 3339 format)
func (o GetFrontendAclOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendAcl) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Description of the ACL
func (o GetFrontendAclOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendAcl) string { return v.Description }).(pulumi.StringOutput)
}

// The ACL match rule
func (o GetFrontendAclOutput) Matches() GetFrontendAclMatchArrayOutput {
	return o.ApplyT(func(v GetFrontendAcl) []GetFrontendAclMatch { return v.Matches }).(GetFrontendAclMatchArrayOutput)
}

// The name of the frontend.
// - When using the `name` you should specify the `lb-id`
func (o GetFrontendAclOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendAcl) string { return v.Name }).(pulumi.StringOutput)
}

// IsDate and time of ACL's update (RFC 3339 format)
func (o GetFrontendAclOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendAcl) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetFrontendAclArrayOutput struct{ *pulumi.OutputState }

func (GetFrontendAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrontendAcl)(nil)).Elem()
}

func (o GetFrontendAclArrayOutput) ToGetFrontendAclArrayOutput() GetFrontendAclArrayOutput {
	return o
}

func (o GetFrontendAclArrayOutput) ToGetFrontendAclArrayOutputWithContext(ctx context.Context) GetFrontendAclArrayOutput {
	return o
}

func (o GetFrontendAclArrayOutput) Index(i pulumi.IntInput) GetFrontendAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFrontendAcl {
		return vs[0].([]GetFrontendAcl)[vs[1].(int)]
	}).(GetFrontendAclOutput)
}

type GetFrontendAclAction struct {
	// Redirect parameters when using an ACL with `redirect` action
	Redirects []GetFrontendAclActionRedirect `pulumi:"redirects"`
	// The action type
	Type string `pulumi:"type"`
}

// GetFrontendAclActionInput is an input type that accepts GetFrontendAclActionArgs and GetFrontendAclActionOutput values.
// You can construct a concrete instance of `GetFrontendAclActionInput` via:
//
//	GetFrontendAclActionArgs{...}
type GetFrontendAclActionInput interface {
	pulumi.Input

	ToGetFrontendAclActionOutput() GetFrontendAclActionOutput
	ToGetFrontendAclActionOutputWithContext(context.Context) GetFrontendAclActionOutput
}

type GetFrontendAclActionArgs struct {
	// Redirect parameters when using an ACL with `redirect` action
	Redirects GetFrontendAclActionRedirectArrayInput `pulumi:"redirects"`
	// The action type
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetFrontendAclActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrontendAclAction)(nil)).Elem()
}

func (i GetFrontendAclActionArgs) ToGetFrontendAclActionOutput() GetFrontendAclActionOutput {
	return i.ToGetFrontendAclActionOutputWithContext(context.Background())
}

func (i GetFrontendAclActionArgs) ToGetFrontendAclActionOutputWithContext(ctx context.Context) GetFrontendAclActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrontendAclActionOutput)
}

// GetFrontendAclActionArrayInput is an input type that accepts GetFrontendAclActionArray and GetFrontendAclActionArrayOutput values.
// You can construct a concrete instance of `GetFrontendAclActionArrayInput` via:
//
//	GetFrontendAclActionArray{ GetFrontendAclActionArgs{...} }
type GetFrontendAclActionArrayInput interface {
	pulumi.Input

	ToGetFrontendAclActionArrayOutput() GetFrontendAclActionArrayOutput
	ToGetFrontendAclActionArrayOutputWithContext(context.Context) GetFrontendAclActionArrayOutput
}

type GetFrontendAclActionArray []GetFrontendAclActionInput

func (GetFrontendAclActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrontendAclAction)(nil)).Elem()
}

func (i GetFrontendAclActionArray) ToGetFrontendAclActionArrayOutput() GetFrontendAclActionArrayOutput {
	return i.ToGetFrontendAclActionArrayOutputWithContext(context.Background())
}

func (i GetFrontendAclActionArray) ToGetFrontendAclActionArrayOutputWithContext(ctx context.Context) GetFrontendAclActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrontendAclActionArrayOutput)
}

type GetFrontendAclActionOutput struct{ *pulumi.OutputState }

func (GetFrontendAclActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrontendAclAction)(nil)).Elem()
}

func (o GetFrontendAclActionOutput) ToGetFrontendAclActionOutput() GetFrontendAclActionOutput {
	return o
}

func (o GetFrontendAclActionOutput) ToGetFrontendAclActionOutputWithContext(ctx context.Context) GetFrontendAclActionOutput {
	return o
}

// Redirect parameters when using an ACL with `redirect` action
func (o GetFrontendAclActionOutput) Redirects() GetFrontendAclActionRedirectArrayOutput {
	return o.ApplyT(func(v GetFrontendAclAction) []GetFrontendAclActionRedirect { return v.Redirects }).(GetFrontendAclActionRedirectArrayOutput)
}

// The action type
func (o GetFrontendAclActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendAclAction) string { return v.Type }).(pulumi.StringOutput)
}

type GetFrontendAclActionArrayOutput struct{ *pulumi.OutputState }

func (GetFrontendAclActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrontendAclAction)(nil)).Elem()
}

func (o GetFrontendAclActionArrayOutput) ToGetFrontendAclActionArrayOutput() GetFrontendAclActionArrayOutput {
	return o
}

func (o GetFrontendAclActionArrayOutput) ToGetFrontendAclActionArrayOutputWithContext(ctx context.Context) GetFrontendAclActionArrayOutput {
	return o
}

func (o GetFrontendAclActionArrayOutput) Index(i pulumi.IntInput) GetFrontendAclActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFrontendAclAction {
		return vs[0].([]GetFrontendAclAction)[vs[1].(int)]
	}).(GetFrontendAclActionOutput)
}

type GetFrontendAclActionRedirect struct {
	// The HTTP redirect code to use
	Code int `pulumi:"code"`
	// An URL can be used in case of a location redirect
	Target string `pulumi:"target"`
	// The redirect type
	Type string `pulumi:"type"`
}

// GetFrontendAclActionRedirectInput is an input type that accepts GetFrontendAclActionRedirectArgs and GetFrontendAclActionRedirectOutput values.
// You can construct a concrete instance of `GetFrontendAclActionRedirectInput` via:
//
//	GetFrontendAclActionRedirectArgs{...}
type GetFrontendAclActionRedirectInput interface {
	pulumi.Input

	ToGetFrontendAclActionRedirectOutput() GetFrontendAclActionRedirectOutput
	ToGetFrontendAclActionRedirectOutputWithContext(context.Context) GetFrontendAclActionRedirectOutput
}

type GetFrontendAclActionRedirectArgs struct {
	// The HTTP redirect code to use
	Code pulumi.IntInput `pulumi:"code"`
	// An URL can be used in case of a location redirect
	Target pulumi.StringInput `pulumi:"target"`
	// The redirect type
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetFrontendAclActionRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrontendAclActionRedirect)(nil)).Elem()
}

func (i GetFrontendAclActionRedirectArgs) ToGetFrontendAclActionRedirectOutput() GetFrontendAclActionRedirectOutput {
	return i.ToGetFrontendAclActionRedirectOutputWithContext(context.Background())
}

func (i GetFrontendAclActionRedirectArgs) ToGetFrontendAclActionRedirectOutputWithContext(ctx context.Context) GetFrontendAclActionRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrontendAclActionRedirectOutput)
}

// GetFrontendAclActionRedirectArrayInput is an input type that accepts GetFrontendAclActionRedirectArray and GetFrontendAclActionRedirectArrayOutput values.
// You can construct a concrete instance of `GetFrontendAclActionRedirectArrayInput` via:
//
//	GetFrontendAclActionRedirectArray{ GetFrontendAclActionRedirectArgs{...} }
type GetFrontendAclActionRedirectArrayInput interface {
	pulumi.Input

	ToGetFrontendAclActionRedirectArrayOutput() GetFrontendAclActionRedirectArrayOutput
	ToGetFrontendAclActionRedirectArrayOutputWithContext(context.Context) GetFrontendAclActionRedirectArrayOutput
}

type GetFrontendAclActionRedirectArray []GetFrontendAclActionRedirectInput

func (GetFrontendAclActionRedirectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrontendAclActionRedirect)(nil)).Elem()
}

func (i GetFrontendAclActionRedirectArray) ToGetFrontendAclActionRedirectArrayOutput() GetFrontendAclActionRedirectArrayOutput {
	return i.ToGetFrontendAclActionRedirectArrayOutputWithContext(context.Background())
}

func (i GetFrontendAclActionRedirectArray) ToGetFrontendAclActionRedirectArrayOutputWithContext(ctx context.Context) GetFrontendAclActionRedirectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrontendAclActionRedirectArrayOutput)
}

type GetFrontendAclActionRedirectOutput struct{ *pulumi.OutputState }

func (GetFrontendAclActionRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrontendAclActionRedirect)(nil)).Elem()
}

func (o GetFrontendAclActionRedirectOutput) ToGetFrontendAclActionRedirectOutput() GetFrontendAclActionRedirectOutput {
	return o
}

func (o GetFrontendAclActionRedirectOutput) ToGetFrontendAclActionRedirectOutputWithContext(ctx context.Context) GetFrontendAclActionRedirectOutput {
	return o
}

// The HTTP redirect code to use
func (o GetFrontendAclActionRedirectOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v GetFrontendAclActionRedirect) int { return v.Code }).(pulumi.IntOutput)
}

// An URL can be used in case of a location redirect
func (o GetFrontendAclActionRedirectOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendAclActionRedirect) string { return v.Target }).(pulumi.StringOutput)
}

// The redirect type
func (o GetFrontendAclActionRedirectOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendAclActionRedirect) string { return v.Type }).(pulumi.StringOutput)
}

type GetFrontendAclActionRedirectArrayOutput struct{ *pulumi.OutputState }

func (GetFrontendAclActionRedirectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrontendAclActionRedirect)(nil)).Elem()
}

func (o GetFrontendAclActionRedirectArrayOutput) ToGetFrontendAclActionRedirectArrayOutput() GetFrontendAclActionRedirectArrayOutput {
	return o
}

func (o GetFrontendAclActionRedirectArrayOutput) ToGetFrontendAclActionRedirectArrayOutputWithContext(ctx context.Context) GetFrontendAclActionRedirectArrayOutput {
	return o
}

func (o GetFrontendAclActionRedirectArrayOutput) Index(i pulumi.IntInput) GetFrontendAclActionRedirectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFrontendAclActionRedirect {
		return vs[0].([]GetFrontendAclActionRedirect)[vs[1].(int)]
	}).(GetFrontendAclActionRedirectOutput)
}

type GetFrontendAclMatch struct {
	// The HTTP filter to match
	HttpFilter string `pulumi:"httpFilter"`
	// You can use this field with httpHeaderMatch acl type to set the header name to filter
	HttpFilterOption string `pulumi:"httpFilterOption"`
	// A list of possible values to match for the given HTTP filter
	HttpFilterValues []string `pulumi:"httpFilterValues"`
	// If set to true, the condition will be of type "unless"
	Invert bool `pulumi:"invert"`
	// A list of IPs or CIDR v4/v6 addresses of the client of the session to match
	IpSubnets []string `pulumi:"ipSubnets"`
	// Defines whether Edge Services IPs should be matched
	IpsEdgeServices bool `pulumi:"ipsEdgeServices"`
}

// GetFrontendAclMatchInput is an input type that accepts GetFrontendAclMatchArgs and GetFrontendAclMatchOutput values.
// You can construct a concrete instance of `GetFrontendAclMatchInput` via:
//
//	GetFrontendAclMatchArgs{...}
type GetFrontendAclMatchInput interface {
	pulumi.Input

	ToGetFrontendAclMatchOutput() GetFrontendAclMatchOutput
	ToGetFrontendAclMatchOutputWithContext(context.Context) GetFrontendAclMatchOutput
}

type GetFrontendAclMatchArgs struct {
	// The HTTP filter to match
	HttpFilter pulumi.StringInput `pulumi:"httpFilter"`
	// You can use this field with httpHeaderMatch acl type to set the header name to filter
	HttpFilterOption pulumi.StringInput `pulumi:"httpFilterOption"`
	// A list of possible values to match for the given HTTP filter
	HttpFilterValues pulumi.StringArrayInput `pulumi:"httpFilterValues"`
	// If set to true, the condition will be of type "unless"
	Invert pulumi.BoolInput `pulumi:"invert"`
	// A list of IPs or CIDR v4/v6 addresses of the client of the session to match
	IpSubnets pulumi.StringArrayInput `pulumi:"ipSubnets"`
	// Defines whether Edge Services IPs should be matched
	IpsEdgeServices pulumi.BoolInput `pulumi:"ipsEdgeServices"`
}

func (GetFrontendAclMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrontendAclMatch)(nil)).Elem()
}

func (i GetFrontendAclMatchArgs) ToGetFrontendAclMatchOutput() GetFrontendAclMatchOutput {
	return i.ToGetFrontendAclMatchOutputWithContext(context.Background())
}

func (i GetFrontendAclMatchArgs) ToGetFrontendAclMatchOutputWithContext(ctx context.Context) GetFrontendAclMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrontendAclMatchOutput)
}

// GetFrontendAclMatchArrayInput is an input type that accepts GetFrontendAclMatchArray and GetFrontendAclMatchArrayOutput values.
// You can construct a concrete instance of `GetFrontendAclMatchArrayInput` via:
//
//	GetFrontendAclMatchArray{ GetFrontendAclMatchArgs{...} }
type GetFrontendAclMatchArrayInput interface {
	pulumi.Input

	ToGetFrontendAclMatchArrayOutput() GetFrontendAclMatchArrayOutput
	ToGetFrontendAclMatchArrayOutputWithContext(context.Context) GetFrontendAclMatchArrayOutput
}

type GetFrontendAclMatchArray []GetFrontendAclMatchInput

func (GetFrontendAclMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrontendAclMatch)(nil)).Elem()
}

func (i GetFrontendAclMatchArray) ToGetFrontendAclMatchArrayOutput() GetFrontendAclMatchArrayOutput {
	return i.ToGetFrontendAclMatchArrayOutputWithContext(context.Background())
}

func (i GetFrontendAclMatchArray) ToGetFrontendAclMatchArrayOutputWithContext(ctx context.Context) GetFrontendAclMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrontendAclMatchArrayOutput)
}

type GetFrontendAclMatchOutput struct{ *pulumi.OutputState }

func (GetFrontendAclMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrontendAclMatch)(nil)).Elem()
}

func (o GetFrontendAclMatchOutput) ToGetFrontendAclMatchOutput() GetFrontendAclMatchOutput {
	return o
}

func (o GetFrontendAclMatchOutput) ToGetFrontendAclMatchOutputWithContext(ctx context.Context) GetFrontendAclMatchOutput {
	return o
}

// The HTTP filter to match
func (o GetFrontendAclMatchOutput) HttpFilter() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendAclMatch) string { return v.HttpFilter }).(pulumi.StringOutput)
}

// You can use this field with httpHeaderMatch acl type to set the header name to filter
func (o GetFrontendAclMatchOutput) HttpFilterOption() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendAclMatch) string { return v.HttpFilterOption }).(pulumi.StringOutput)
}

// A list of possible values to match for the given HTTP filter
func (o GetFrontendAclMatchOutput) HttpFilterValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFrontendAclMatch) []string { return v.HttpFilterValues }).(pulumi.StringArrayOutput)
}

// If set to true, the condition will be of type "unless"
func (o GetFrontendAclMatchOutput) Invert() pulumi.BoolOutput {
	return o.ApplyT(func(v GetFrontendAclMatch) bool { return v.Invert }).(pulumi.BoolOutput)
}

// A list of IPs or CIDR v4/v6 addresses of the client of the session to match
func (o GetFrontendAclMatchOutput) IpSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFrontendAclMatch) []string { return v.IpSubnets }).(pulumi.StringArrayOutput)
}

// Defines whether Edge Services IPs should be matched
func (o GetFrontendAclMatchOutput) IpsEdgeServices() pulumi.BoolOutput {
	return o.ApplyT(func(v GetFrontendAclMatch) bool { return v.IpsEdgeServices }).(pulumi.BoolOutput)
}

type GetFrontendAclMatchArrayOutput struct{ *pulumi.OutputState }

func (GetFrontendAclMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrontendAclMatch)(nil)).Elem()
}

func (o GetFrontendAclMatchArrayOutput) ToGetFrontendAclMatchArrayOutput() GetFrontendAclMatchArrayOutput {
	return o
}

func (o GetFrontendAclMatchArrayOutput) ToGetFrontendAclMatchArrayOutputWithContext(ctx context.Context) GetFrontendAclMatchArrayOutput {
	return o
}

func (o GetFrontendAclMatchArrayOutput) Index(i pulumi.IntInput) GetFrontendAclMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFrontendAclMatch {
		return vs[0].([]GetFrontendAclMatch)[vs[1].(int)]
	}).(GetFrontendAclMatchOutput)
}

type GetFrontendsFrontend struct {
	// The Load Balancer backend ID this frontend is attached to.
	// > **Important:** Load Balancer backend IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
	BackendId string `pulumi:"backendId"`
	// List of certificate IDs that are used by the frontend.
	CertificateIds []string `pulumi:"certificateIds"`
	// The rate limit for new connections established on this frontend. Use 0 value to disable, else value is connections per second.
	ConnectionRateLimit int `pulumi:"connectionRateLimit"`
	// The date on which the frontend was created (RFC 3339 format).
	CreatedAt string `pulumi:"createdAt"`
	// Defines whether to enable access logs on the frontend.
	EnableAccessLogs bool `pulumi:"enableAccessLogs"`
	// Whether HTTP/3 protocol is activated.
	EnableHttp3 bool `pulumi:"enableHttp3"`
	// The ID of the associated frontend.
	// > **Important:** LB frontend IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
	Id string `pulumi:"id"`
	// TCP port the frontend listens to.
	InboundPort int `pulumi:"inboundPort"`
	// The Load Balancer ID this frontend is attached to. Frontends with a matching ID are listed.
	LbId string `pulumi:"lbId"`
	// The frontend name to filter for. Frontends with a matching name are listed.
	Name string `pulumi:"name"`
	// Maximum inactivity time on the client side.
	TimeoutClient string `pulumi:"timeoutClient"`
	// The date on which the frontend was last updated (RFC 3339 format).
	UpdateAt string `pulumi:"updateAt"`
}

// GetFrontendsFrontendInput is an input type that accepts GetFrontendsFrontendArgs and GetFrontendsFrontendOutput values.
// You can construct a concrete instance of `GetFrontendsFrontendInput` via:
//
//	GetFrontendsFrontendArgs{...}
type GetFrontendsFrontendInput interface {
	pulumi.Input

	ToGetFrontendsFrontendOutput() GetFrontendsFrontendOutput
	ToGetFrontendsFrontendOutputWithContext(context.Context) GetFrontendsFrontendOutput
}

type GetFrontendsFrontendArgs struct {
	// The Load Balancer backend ID this frontend is attached to.
	// > **Important:** Load Balancer backend IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
	BackendId pulumi.StringInput `pulumi:"backendId"`
	// List of certificate IDs that are used by the frontend.
	CertificateIds pulumi.StringArrayInput `pulumi:"certificateIds"`
	// The rate limit for new connections established on this frontend. Use 0 value to disable, else value is connections per second.
	ConnectionRateLimit pulumi.IntInput `pulumi:"connectionRateLimit"`
	// The date on which the frontend was created (RFC 3339 format).
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Defines whether to enable access logs on the frontend.
	EnableAccessLogs pulumi.BoolInput `pulumi:"enableAccessLogs"`
	// Whether HTTP/3 protocol is activated.
	EnableHttp3 pulumi.BoolInput `pulumi:"enableHttp3"`
	// The ID of the associated frontend.
	// > **Important:** LB frontend IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
	Id pulumi.StringInput `pulumi:"id"`
	// TCP port the frontend listens to.
	InboundPort pulumi.IntInput `pulumi:"inboundPort"`
	// The Load Balancer ID this frontend is attached to. Frontends with a matching ID are listed.
	LbId pulumi.StringInput `pulumi:"lbId"`
	// The frontend name to filter for. Frontends with a matching name are listed.
	Name pulumi.StringInput `pulumi:"name"`
	// Maximum inactivity time on the client side.
	TimeoutClient pulumi.StringInput `pulumi:"timeoutClient"`
	// The date on which the frontend was last updated (RFC 3339 format).
	UpdateAt pulumi.StringInput `pulumi:"updateAt"`
}

func (GetFrontendsFrontendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrontendsFrontend)(nil)).Elem()
}

func (i GetFrontendsFrontendArgs) ToGetFrontendsFrontendOutput() GetFrontendsFrontendOutput {
	return i.ToGetFrontendsFrontendOutputWithContext(context.Background())
}

func (i GetFrontendsFrontendArgs) ToGetFrontendsFrontendOutputWithContext(ctx context.Context) GetFrontendsFrontendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrontendsFrontendOutput)
}

// GetFrontendsFrontendArrayInput is an input type that accepts GetFrontendsFrontendArray and GetFrontendsFrontendArrayOutput values.
// You can construct a concrete instance of `GetFrontendsFrontendArrayInput` via:
//
//	GetFrontendsFrontendArray{ GetFrontendsFrontendArgs{...} }
type GetFrontendsFrontendArrayInput interface {
	pulumi.Input

	ToGetFrontendsFrontendArrayOutput() GetFrontendsFrontendArrayOutput
	ToGetFrontendsFrontendArrayOutputWithContext(context.Context) GetFrontendsFrontendArrayOutput
}

type GetFrontendsFrontendArray []GetFrontendsFrontendInput

func (GetFrontendsFrontendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrontendsFrontend)(nil)).Elem()
}

func (i GetFrontendsFrontendArray) ToGetFrontendsFrontendArrayOutput() GetFrontendsFrontendArrayOutput {
	return i.ToGetFrontendsFrontendArrayOutputWithContext(context.Background())
}

func (i GetFrontendsFrontendArray) ToGetFrontendsFrontendArrayOutputWithContext(ctx context.Context) GetFrontendsFrontendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrontendsFrontendArrayOutput)
}

type GetFrontendsFrontendOutput struct{ *pulumi.OutputState }

func (GetFrontendsFrontendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrontendsFrontend)(nil)).Elem()
}

func (o GetFrontendsFrontendOutput) ToGetFrontendsFrontendOutput() GetFrontendsFrontendOutput {
	return o
}

func (o GetFrontendsFrontendOutput) ToGetFrontendsFrontendOutputWithContext(ctx context.Context) GetFrontendsFrontendOutput {
	return o
}

// The Load Balancer backend ID this frontend is attached to.
// > **Important:** Load Balancer backend IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
func (o GetFrontendsFrontendOutput) BackendId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendsFrontend) string { return v.BackendId }).(pulumi.StringOutput)
}

// List of certificate IDs that are used by the frontend.
func (o GetFrontendsFrontendOutput) CertificateIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFrontendsFrontend) []string { return v.CertificateIds }).(pulumi.StringArrayOutput)
}

// The rate limit for new connections established on this frontend. Use 0 value to disable, else value is connections per second.
func (o GetFrontendsFrontendOutput) ConnectionRateLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetFrontendsFrontend) int { return v.ConnectionRateLimit }).(pulumi.IntOutput)
}

// The date on which the frontend was created (RFC 3339 format).
func (o GetFrontendsFrontendOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendsFrontend) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Defines whether to enable access logs on the frontend.
func (o GetFrontendsFrontendOutput) EnableAccessLogs() pulumi.BoolOutput {
	return o.ApplyT(func(v GetFrontendsFrontend) bool { return v.EnableAccessLogs }).(pulumi.BoolOutput)
}

// Whether HTTP/3 protocol is activated.
func (o GetFrontendsFrontendOutput) EnableHttp3() pulumi.BoolOutput {
	return o.ApplyT(func(v GetFrontendsFrontend) bool { return v.EnableHttp3 }).(pulumi.BoolOutput)
}

// The ID of the associated frontend.
// > **Important:** LB frontend IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
func (o GetFrontendsFrontendOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendsFrontend) string { return v.Id }).(pulumi.StringOutput)
}

// TCP port the frontend listens to.
func (o GetFrontendsFrontendOutput) InboundPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetFrontendsFrontend) int { return v.InboundPort }).(pulumi.IntOutput)
}

// The Load Balancer ID this frontend is attached to. Frontends with a matching ID are listed.
func (o GetFrontendsFrontendOutput) LbId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendsFrontend) string { return v.LbId }).(pulumi.StringOutput)
}

// The frontend name to filter for. Frontends with a matching name are listed.
func (o GetFrontendsFrontendOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendsFrontend) string { return v.Name }).(pulumi.StringOutput)
}

// Maximum inactivity time on the client side.
func (o GetFrontendsFrontendOutput) TimeoutClient() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendsFrontend) string { return v.TimeoutClient }).(pulumi.StringOutput)
}

// The date on which the frontend was last updated (RFC 3339 format).
func (o GetFrontendsFrontendOutput) UpdateAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendsFrontend) string { return v.UpdateAt }).(pulumi.StringOutput)
}

type GetFrontendsFrontendArrayOutput struct{ *pulumi.OutputState }

func (GetFrontendsFrontendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrontendsFrontend)(nil)).Elem()
}

func (o GetFrontendsFrontendArrayOutput) ToGetFrontendsFrontendArrayOutput() GetFrontendsFrontendArrayOutput {
	return o
}

func (o GetFrontendsFrontendArrayOutput) ToGetFrontendsFrontendArrayOutputWithContext(ctx context.Context) GetFrontendsFrontendArrayOutput {
	return o
}

func (o GetFrontendsFrontendArrayOutput) Index(i pulumi.IntInput) GetFrontendsFrontendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFrontendsFrontend {
		return vs[0].([]GetFrontendsFrontend)[vs[1].(int)]
	}).(GetFrontendsFrontendOutput)
}

type GetIpsIp struct {
	// The ID of the associated IP.
	Id string `pulumi:"id"`
	// The IP address
	IpAddress string `pulumi:"ipAddress"`
	// The ID of the associated Load BalancerD, if any
	LbId string `pulumi:"lbId"`
	// The ID of the Organization the Load Balancer is associated with.
	OrganizationId string `pulumi:"organizationId"`
	// The ID of the Project the Load Balancer is associated with.
	ProjectId string `pulumi:"projectId"`
	// The reverse domain associated with this IP.
	Reverse string `pulumi:"reverse"`
	// List of tags used as filter. IPs with these exact tags are listed.
	Tags []string `pulumi:"tags"`
	// `zone`) The zone in which the IPs exist.
	Zone *string `pulumi:"zone"`
}

// GetIpsIpInput is an input type that accepts GetIpsIpArgs and GetIpsIpOutput values.
// You can construct a concrete instance of `GetIpsIpInput` via:
//
//	GetIpsIpArgs{...}
type GetIpsIpInput interface {
	pulumi.Input

	ToGetIpsIpOutput() GetIpsIpOutput
	ToGetIpsIpOutputWithContext(context.Context) GetIpsIpOutput
}

type GetIpsIpArgs struct {
	// The ID of the associated IP.
	Id pulumi.StringInput `pulumi:"id"`
	// The IP address
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The ID of the associated Load BalancerD, if any
	LbId pulumi.StringInput `pulumi:"lbId"`
	// The ID of the Organization the Load Balancer is associated with.
	OrganizationId pulumi.StringInput `pulumi:"organizationId"`
	// The ID of the Project the Load Balancer is associated with.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The reverse domain associated with this IP.
	Reverse pulumi.StringInput `pulumi:"reverse"`
	// List of tags used as filter. IPs with these exact tags are listed.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// `zone`) The zone in which the IPs exist.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (GetIpsIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpsIp)(nil)).Elem()
}

func (i GetIpsIpArgs) ToGetIpsIpOutput() GetIpsIpOutput {
	return i.ToGetIpsIpOutputWithContext(context.Background())
}

func (i GetIpsIpArgs) ToGetIpsIpOutputWithContext(ctx context.Context) GetIpsIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIpsIpOutput)
}

// GetIpsIpArrayInput is an input type that accepts GetIpsIpArray and GetIpsIpArrayOutput values.
// You can construct a concrete instance of `GetIpsIpArrayInput` via:
//
//	GetIpsIpArray{ GetIpsIpArgs{...} }
type GetIpsIpArrayInput interface {
	pulumi.Input

	ToGetIpsIpArrayOutput() GetIpsIpArrayOutput
	ToGetIpsIpArrayOutputWithContext(context.Context) GetIpsIpArrayOutput
}

type GetIpsIpArray []GetIpsIpInput

func (GetIpsIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIpsIp)(nil)).Elem()
}

func (i GetIpsIpArray) ToGetIpsIpArrayOutput() GetIpsIpArrayOutput {
	return i.ToGetIpsIpArrayOutputWithContext(context.Background())
}

func (i GetIpsIpArray) ToGetIpsIpArrayOutputWithContext(ctx context.Context) GetIpsIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIpsIpArrayOutput)
}

type GetIpsIpOutput struct{ *pulumi.OutputState }

func (GetIpsIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpsIp)(nil)).Elem()
}

func (o GetIpsIpOutput) ToGetIpsIpOutput() GetIpsIpOutput {
	return o
}

func (o GetIpsIpOutput) ToGetIpsIpOutputWithContext(ctx context.Context) GetIpsIpOutput {
	return o
}

// The ID of the associated IP.
func (o GetIpsIpOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIp) string { return v.Id }).(pulumi.StringOutput)
}

// The IP address
func (o GetIpsIpOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIp) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The ID of the associated Load BalancerD, if any
func (o GetIpsIpOutput) LbId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIp) string { return v.LbId }).(pulumi.StringOutput)
}

// The ID of the Organization the Load Balancer is associated with.
func (o GetIpsIpOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIp) string { return v.OrganizationId }).(pulumi.StringOutput)
}

// The ID of the Project the Load Balancer is associated with.
func (o GetIpsIpOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIp) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The reverse domain associated with this IP.
func (o GetIpsIpOutput) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsIp) string { return v.Reverse }).(pulumi.StringOutput)
}

// List of tags used as filter. IPs with these exact tags are listed.
func (o GetIpsIpOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIpsIp) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// `zone`) The zone in which the IPs exist.
func (o GetIpsIpOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIpsIp) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type GetIpsIpArrayOutput struct{ *pulumi.OutputState }

func (GetIpsIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIpsIp)(nil)).Elem()
}

func (o GetIpsIpArrayOutput) ToGetIpsIpArrayOutput() GetIpsIpArrayOutput {
	return o
}

func (o GetIpsIpArrayOutput) ToGetIpsIpArrayOutputWithContext(ctx context.Context) GetIpsIpArrayOutput {
	return o
}

func (o GetIpsIpArrayOutput) Index(i pulumi.IntInput) GetIpsIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIpsIp {
		return vs[0].([]GetIpsIp)[vs[1].(int)]
	}).(GetIpsIpOutput)
}

type GetLoadBalancerPrivateIp struct {
	// The private IP address
	Address string `pulumi:"address"`
	// The ID of the Load Balancer.
	Id string `pulumi:"id"`
}

// GetLoadBalancerPrivateIpInput is an input type that accepts GetLoadBalancerPrivateIpArgs and GetLoadBalancerPrivateIpOutput values.
// You can construct a concrete instance of `GetLoadBalancerPrivateIpInput` via:
//
//	GetLoadBalancerPrivateIpArgs{...}
type GetLoadBalancerPrivateIpInput interface {
	pulumi.Input

	ToGetLoadBalancerPrivateIpOutput() GetLoadBalancerPrivateIpOutput
	ToGetLoadBalancerPrivateIpOutputWithContext(context.Context) GetLoadBalancerPrivateIpOutput
}

type GetLoadBalancerPrivateIpArgs struct {
	// The private IP address
	Address pulumi.StringInput `pulumi:"address"`
	// The ID of the Load Balancer.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetLoadBalancerPrivateIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerPrivateIp)(nil)).Elem()
}

func (i GetLoadBalancerPrivateIpArgs) ToGetLoadBalancerPrivateIpOutput() GetLoadBalancerPrivateIpOutput {
	return i.ToGetLoadBalancerPrivateIpOutputWithContext(context.Background())
}

func (i GetLoadBalancerPrivateIpArgs) ToGetLoadBalancerPrivateIpOutputWithContext(ctx context.Context) GetLoadBalancerPrivateIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerPrivateIpOutput)
}

// GetLoadBalancerPrivateIpArrayInput is an input type that accepts GetLoadBalancerPrivateIpArray and GetLoadBalancerPrivateIpArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancerPrivateIpArrayInput` via:
//
//	GetLoadBalancerPrivateIpArray{ GetLoadBalancerPrivateIpArgs{...} }
type GetLoadBalancerPrivateIpArrayInput interface {
	pulumi.Input

	ToGetLoadBalancerPrivateIpArrayOutput() GetLoadBalancerPrivateIpArrayOutput
	ToGetLoadBalancerPrivateIpArrayOutputWithContext(context.Context) GetLoadBalancerPrivateIpArrayOutput
}

type GetLoadBalancerPrivateIpArray []GetLoadBalancerPrivateIpInput

func (GetLoadBalancerPrivateIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancerPrivateIp)(nil)).Elem()
}

func (i GetLoadBalancerPrivateIpArray) ToGetLoadBalancerPrivateIpArrayOutput() GetLoadBalancerPrivateIpArrayOutput {
	return i.ToGetLoadBalancerPrivateIpArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancerPrivateIpArray) ToGetLoadBalancerPrivateIpArrayOutputWithContext(ctx context.Context) GetLoadBalancerPrivateIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerPrivateIpArrayOutput)
}

type GetLoadBalancerPrivateIpOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerPrivateIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerPrivateIp)(nil)).Elem()
}

func (o GetLoadBalancerPrivateIpOutput) ToGetLoadBalancerPrivateIpOutput() GetLoadBalancerPrivateIpOutput {
	return o
}

func (o GetLoadBalancerPrivateIpOutput) ToGetLoadBalancerPrivateIpOutputWithContext(ctx context.Context) GetLoadBalancerPrivateIpOutput {
	return o
}

// The private IP address
func (o GetLoadBalancerPrivateIpOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerPrivateIp) string { return v.Address }).(pulumi.StringOutput)
}

// The ID of the Load Balancer.
func (o GetLoadBalancerPrivateIpOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerPrivateIp) string { return v.Id }).(pulumi.StringOutput)
}

type GetLoadBalancerPrivateIpArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerPrivateIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancerPrivateIp)(nil)).Elem()
}

func (o GetLoadBalancerPrivateIpArrayOutput) ToGetLoadBalancerPrivateIpArrayOutput() GetLoadBalancerPrivateIpArrayOutput {
	return o
}

func (o GetLoadBalancerPrivateIpArrayOutput) ToGetLoadBalancerPrivateIpArrayOutputWithContext(ctx context.Context) GetLoadBalancerPrivateIpArrayOutput {
	return o
}

func (o GetLoadBalancerPrivateIpArrayOutput) Index(i pulumi.IntInput) GetLoadBalancerPrivateIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancerPrivateIp {
		return vs[0].([]GetLoadBalancerPrivateIp)[vs[1].(int)]
	}).(GetLoadBalancerPrivateIpOutput)
}

type GetLoadBalancerPrivateNetwork struct {
	// Set to true if you want to let DHCP assign IP addresses
	DhcpConfig bool `pulumi:"dhcpConfig"`
	// IPAM ID of a pre-reserved IP address to assign to the Load Balancer on this Private Network
	IpamIds []string `pulumi:"ipamIds"`
	// The Private Network ID
	PrivateNetworkId string `pulumi:"privateNetworkId"`
	// Define an IP address in the subnet of your private network that will be assigned to your load balancer instance
	StaticConfigs []string `pulumi:"staticConfigs"`
	// The status of private network connection
	Status string `pulumi:"status"`
	// (Defaults to provider `zone`) The zone in which the Load Balancer exists.
	Zone string `pulumi:"zone"`
}

// GetLoadBalancerPrivateNetworkInput is an input type that accepts GetLoadBalancerPrivateNetworkArgs and GetLoadBalancerPrivateNetworkOutput values.
// You can construct a concrete instance of `GetLoadBalancerPrivateNetworkInput` via:
//
//	GetLoadBalancerPrivateNetworkArgs{...}
type GetLoadBalancerPrivateNetworkInput interface {
	pulumi.Input

	ToGetLoadBalancerPrivateNetworkOutput() GetLoadBalancerPrivateNetworkOutput
	ToGetLoadBalancerPrivateNetworkOutputWithContext(context.Context) GetLoadBalancerPrivateNetworkOutput
}

type GetLoadBalancerPrivateNetworkArgs struct {
	// Set to true if you want to let DHCP assign IP addresses
	DhcpConfig pulumi.BoolInput `pulumi:"dhcpConfig"`
	// IPAM ID of a pre-reserved IP address to assign to the Load Balancer on this Private Network
	IpamIds pulumi.StringArrayInput `pulumi:"ipamIds"`
	// The Private Network ID
	PrivateNetworkId pulumi.StringInput `pulumi:"privateNetworkId"`
	// Define an IP address in the subnet of your private network that will be assigned to your load balancer instance
	StaticConfigs pulumi.StringArrayInput `pulumi:"staticConfigs"`
	// The status of private network connection
	Status pulumi.StringInput `pulumi:"status"`
	// (Defaults to provider `zone`) The zone in which the Load Balancer exists.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetLoadBalancerPrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerPrivateNetwork)(nil)).Elem()
}

func (i GetLoadBalancerPrivateNetworkArgs) ToGetLoadBalancerPrivateNetworkOutput() GetLoadBalancerPrivateNetworkOutput {
	return i.ToGetLoadBalancerPrivateNetworkOutputWithContext(context.Background())
}

func (i GetLoadBalancerPrivateNetworkArgs) ToGetLoadBalancerPrivateNetworkOutputWithContext(ctx context.Context) GetLoadBalancerPrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerPrivateNetworkOutput)
}

// GetLoadBalancerPrivateNetworkArrayInput is an input type that accepts GetLoadBalancerPrivateNetworkArray and GetLoadBalancerPrivateNetworkArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancerPrivateNetworkArrayInput` via:
//
//	GetLoadBalancerPrivateNetworkArray{ GetLoadBalancerPrivateNetworkArgs{...} }
type GetLoadBalancerPrivateNetworkArrayInput interface {
	pulumi.Input

	ToGetLoadBalancerPrivateNetworkArrayOutput() GetLoadBalancerPrivateNetworkArrayOutput
	ToGetLoadBalancerPrivateNetworkArrayOutputWithContext(context.Context) GetLoadBalancerPrivateNetworkArrayOutput
}

type GetLoadBalancerPrivateNetworkArray []GetLoadBalancerPrivateNetworkInput

func (GetLoadBalancerPrivateNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancerPrivateNetwork)(nil)).Elem()
}

func (i GetLoadBalancerPrivateNetworkArray) ToGetLoadBalancerPrivateNetworkArrayOutput() GetLoadBalancerPrivateNetworkArrayOutput {
	return i.ToGetLoadBalancerPrivateNetworkArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancerPrivateNetworkArray) ToGetLoadBalancerPrivateNetworkArrayOutputWithContext(ctx context.Context) GetLoadBalancerPrivateNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerPrivateNetworkArrayOutput)
}

type GetLoadBalancerPrivateNetworkOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerPrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerPrivateNetwork)(nil)).Elem()
}

func (o GetLoadBalancerPrivateNetworkOutput) ToGetLoadBalancerPrivateNetworkOutput() GetLoadBalancerPrivateNetworkOutput {
	return o
}

func (o GetLoadBalancerPrivateNetworkOutput) ToGetLoadBalancerPrivateNetworkOutputWithContext(ctx context.Context) GetLoadBalancerPrivateNetworkOutput {
	return o
}

// Set to true if you want to let DHCP assign IP addresses
func (o GetLoadBalancerPrivateNetworkOutput) DhcpConfig() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLoadBalancerPrivateNetwork) bool { return v.DhcpConfig }).(pulumi.BoolOutput)
}

// IPAM ID of a pre-reserved IP address to assign to the Load Balancer on this Private Network
func (o GetLoadBalancerPrivateNetworkOutput) IpamIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLoadBalancerPrivateNetwork) []string { return v.IpamIds }).(pulumi.StringArrayOutput)
}

// The Private Network ID
func (o GetLoadBalancerPrivateNetworkOutput) PrivateNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerPrivateNetwork) string { return v.PrivateNetworkId }).(pulumi.StringOutput)
}

// Define an IP address in the subnet of your private network that will be assigned to your load balancer instance
func (o GetLoadBalancerPrivateNetworkOutput) StaticConfigs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLoadBalancerPrivateNetwork) []string { return v.StaticConfigs }).(pulumi.StringArrayOutput)
}

// The status of private network connection
func (o GetLoadBalancerPrivateNetworkOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerPrivateNetwork) string { return v.Status }).(pulumi.StringOutput)
}

// (Defaults to provider `zone`) The zone in which the Load Balancer exists.
func (o GetLoadBalancerPrivateNetworkOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerPrivateNetwork) string { return v.Zone }).(pulumi.StringOutput)
}

type GetLoadBalancerPrivateNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerPrivateNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancerPrivateNetwork)(nil)).Elem()
}

func (o GetLoadBalancerPrivateNetworkArrayOutput) ToGetLoadBalancerPrivateNetworkArrayOutput() GetLoadBalancerPrivateNetworkArrayOutput {
	return o
}

func (o GetLoadBalancerPrivateNetworkArrayOutput) ToGetLoadBalancerPrivateNetworkArrayOutputWithContext(ctx context.Context) GetLoadBalancerPrivateNetworkArrayOutput {
	return o
}

func (o GetLoadBalancerPrivateNetworkArrayOutput) Index(i pulumi.IntInput) GetLoadBalancerPrivateNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancerPrivateNetwork {
		return vs[0].([]GetLoadBalancerPrivateNetwork)[vs[1].(int)]
	}).(GetLoadBalancerPrivateNetworkOutput)
}

type GetLoadBalancersLb struct {
	// Number of backends the Load Balancer has.
	BackendCount int `pulumi:"backendCount"`
	// Date on which the Load Balancer was created.
	CreatedAt string `pulumi:"createdAt"`
	// The description of the Load Balancer.
	Description string `pulumi:"description"`
	// Number of frontends the Load Balancer has.
	FrontendCount int `pulumi:"frontendCount"`
	// The ID of the Load Balancer.
	Id string `pulumi:"id"`
	// List of underlying Instances.
	Instances []GetLoadBalancersLbInstance `pulumi:"instances"`
	// List of IPs attached to the Load Balancer.
	Ips []GetLoadBalancersLbIp `pulumi:"ips"`
	// The Load Balancer name to filter for. Load Balancers with a matching name are listed.
	Name string `pulumi:"name"`
	// The ID of the Organization the Load Balancer is associated with.
	OrganizationId string `pulumi:"organizationId"`
	// Number of Private Networks attached to the Load balancer.
	PrivateNetworkCount int `pulumi:"privateNetworkCount"`
	// The ID of the Project the Load Balancer is associated with.
	ProjectId string `pulumi:"projectId"`
	// Number of routes the Load balancer has.
	RouteCount int `pulumi:"routeCount"`
	// Determines the minimal SSL version which needs to be supported on the client side.
	SslCompatibilityLevel string `pulumi:"sslCompatibilityLevel"`
	// The state of the Load Balancer Instance. Possible values are: `unknown`, `ready`, `pending`, `stopped`, `error`, `locked` and `migrating`.
	Status string `pulumi:"status"`
	// The subscriber information.
	Subscriber string `pulumi:"subscriber"`
	// List of tags to filter for. Load Balancers with these exact tags are listed.
	Tags []string `pulumi:"tags"`
	// The offer type of the Load Balancer.
	Type string `pulumi:"type"`
	// Date on which the Load Balancer was updated.
	UpdatedAt string `pulumi:"updatedAt"`
	// `zone`) The zone in which the Load Balancers exist.
	Zone *string `pulumi:"zone"`
}

// GetLoadBalancersLbInput is an input type that accepts GetLoadBalancersLbArgs and GetLoadBalancersLbOutput values.
// You can construct a concrete instance of `GetLoadBalancersLbInput` via:
//
//	GetLoadBalancersLbArgs{...}
type GetLoadBalancersLbInput interface {
	pulumi.Input

	ToGetLoadBalancersLbOutput() GetLoadBalancersLbOutput
	ToGetLoadBalancersLbOutputWithContext(context.Context) GetLoadBalancersLbOutput
}

type GetLoadBalancersLbArgs struct {
	// Number of backends the Load Balancer has.
	BackendCount pulumi.IntInput `pulumi:"backendCount"`
	// Date on which the Load Balancer was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of the Load Balancer.
	Description pulumi.StringInput `pulumi:"description"`
	// Number of frontends the Load Balancer has.
	FrontendCount pulumi.IntInput `pulumi:"frontendCount"`
	// The ID of the Load Balancer.
	Id pulumi.StringInput `pulumi:"id"`
	// List of underlying Instances.
	Instances GetLoadBalancersLbInstanceArrayInput `pulumi:"instances"`
	// List of IPs attached to the Load Balancer.
	Ips GetLoadBalancersLbIpArrayInput `pulumi:"ips"`
	// The Load Balancer name to filter for. Load Balancers with a matching name are listed.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the Organization the Load Balancer is associated with.
	OrganizationId pulumi.StringInput `pulumi:"organizationId"`
	// Number of Private Networks attached to the Load balancer.
	PrivateNetworkCount pulumi.IntInput `pulumi:"privateNetworkCount"`
	// The ID of the Project the Load Balancer is associated with.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// Number of routes the Load balancer has.
	RouteCount pulumi.IntInput `pulumi:"routeCount"`
	// Determines the minimal SSL version which needs to be supported on the client side.
	SslCompatibilityLevel pulumi.StringInput `pulumi:"sslCompatibilityLevel"`
	// The state of the Load Balancer Instance. Possible values are: `unknown`, `ready`, `pending`, `stopped`, `error`, `locked` and `migrating`.
	Status pulumi.StringInput `pulumi:"status"`
	// The subscriber information.
	Subscriber pulumi.StringInput `pulumi:"subscriber"`
	// List of tags to filter for. Load Balancers with these exact tags are listed.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// The offer type of the Load Balancer.
	Type pulumi.StringInput `pulumi:"type"`
	// Date on which the Load Balancer was updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// `zone`) The zone in which the Load Balancers exist.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (GetLoadBalancersLbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersLb)(nil)).Elem()
}

func (i GetLoadBalancersLbArgs) ToGetLoadBalancersLbOutput() GetLoadBalancersLbOutput {
	return i.ToGetLoadBalancersLbOutputWithContext(context.Background())
}

func (i GetLoadBalancersLbArgs) ToGetLoadBalancersLbOutputWithContext(ctx context.Context) GetLoadBalancersLbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersLbOutput)
}

// GetLoadBalancersLbArrayInput is an input type that accepts GetLoadBalancersLbArray and GetLoadBalancersLbArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancersLbArrayInput` via:
//
//	GetLoadBalancersLbArray{ GetLoadBalancersLbArgs{...} }
type GetLoadBalancersLbArrayInput interface {
	pulumi.Input

	ToGetLoadBalancersLbArrayOutput() GetLoadBalancersLbArrayOutput
	ToGetLoadBalancersLbArrayOutputWithContext(context.Context) GetLoadBalancersLbArrayOutput
}

type GetLoadBalancersLbArray []GetLoadBalancersLbInput

func (GetLoadBalancersLbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersLb)(nil)).Elem()
}

func (i GetLoadBalancersLbArray) ToGetLoadBalancersLbArrayOutput() GetLoadBalancersLbArrayOutput {
	return i.ToGetLoadBalancersLbArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancersLbArray) ToGetLoadBalancersLbArrayOutputWithContext(ctx context.Context) GetLoadBalancersLbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersLbArrayOutput)
}

type GetLoadBalancersLbOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersLbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersLb)(nil)).Elem()
}

func (o GetLoadBalancersLbOutput) ToGetLoadBalancersLbOutput() GetLoadBalancersLbOutput {
	return o
}

func (o GetLoadBalancersLbOutput) ToGetLoadBalancersLbOutputWithContext(ctx context.Context) GetLoadBalancersLbOutput {
	return o
}

// Number of backends the Load Balancer has.
func (o GetLoadBalancersLbOutput) BackendCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) int { return v.BackendCount }).(pulumi.IntOutput)
}

// Date on which the Load Balancer was created.
func (o GetLoadBalancersLbOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the Load Balancer.
func (o GetLoadBalancersLbOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) string { return v.Description }).(pulumi.StringOutput)
}

// Number of frontends the Load Balancer has.
func (o GetLoadBalancersLbOutput) FrontendCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) int { return v.FrontendCount }).(pulumi.IntOutput)
}

// The ID of the Load Balancer.
func (o GetLoadBalancersLbOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) string { return v.Id }).(pulumi.StringOutput)
}

// List of underlying Instances.
func (o GetLoadBalancersLbOutput) Instances() GetLoadBalancersLbInstanceArrayOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) []GetLoadBalancersLbInstance { return v.Instances }).(GetLoadBalancersLbInstanceArrayOutput)
}

// List of IPs attached to the Load Balancer.
func (o GetLoadBalancersLbOutput) Ips() GetLoadBalancersLbIpArrayOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) []GetLoadBalancersLbIp { return v.Ips }).(GetLoadBalancersLbIpArrayOutput)
}

// The Load Balancer name to filter for. Load Balancers with a matching name are listed.
func (o GetLoadBalancersLbOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Organization the Load Balancer is associated with.
func (o GetLoadBalancersLbOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) string { return v.OrganizationId }).(pulumi.StringOutput)
}

// Number of Private Networks attached to the Load balancer.
func (o GetLoadBalancersLbOutput) PrivateNetworkCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) int { return v.PrivateNetworkCount }).(pulumi.IntOutput)
}

// The ID of the Project the Load Balancer is associated with.
func (o GetLoadBalancersLbOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Number of routes the Load balancer has.
func (o GetLoadBalancersLbOutput) RouteCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) int { return v.RouteCount }).(pulumi.IntOutput)
}

// Determines the minimal SSL version which needs to be supported on the client side.
func (o GetLoadBalancersLbOutput) SslCompatibilityLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) string { return v.SslCompatibilityLevel }).(pulumi.StringOutput)
}

// The state of the Load Balancer Instance. Possible values are: `unknown`, `ready`, `pending`, `stopped`, `error`, `locked` and `migrating`.
func (o GetLoadBalancersLbOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) string { return v.Status }).(pulumi.StringOutput)
}

// The subscriber information.
func (o GetLoadBalancersLbOutput) Subscriber() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) string { return v.Subscriber }).(pulumi.StringOutput)
}

// List of tags to filter for. Load Balancers with these exact tags are listed.
func (o GetLoadBalancersLbOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The offer type of the Load Balancer.
func (o GetLoadBalancersLbOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) string { return v.Type }).(pulumi.StringOutput)
}

// Date on which the Load Balancer was updated.
func (o GetLoadBalancersLbOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// `zone`) The zone in which the Load Balancers exist.
func (o GetLoadBalancersLbOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type GetLoadBalancersLbArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersLbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersLb)(nil)).Elem()
}

func (o GetLoadBalancersLbArrayOutput) ToGetLoadBalancersLbArrayOutput() GetLoadBalancersLbArrayOutput {
	return o
}

func (o GetLoadBalancersLbArrayOutput) ToGetLoadBalancersLbArrayOutputWithContext(ctx context.Context) GetLoadBalancersLbArrayOutput {
	return o
}

func (o GetLoadBalancersLbArrayOutput) Index(i pulumi.IntInput) GetLoadBalancersLbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancersLb {
		return vs[0].([]GetLoadBalancersLb)[vs[1].(int)]
	}).(GetLoadBalancersLbOutput)
}

type GetLoadBalancersLbInstance struct {
	// Date on which the Load Balancer was created.
	CreatedAt string `pulumi:"createdAt"`
	// The ID of the Load Balancer.
	Id string `pulumi:"id"`
	// IP address of the instance
	IpAddress string `pulumi:"ipAddress"`
	// The state of the Load Balancer Instance. Possible values are: `unknown`, `ready`, `pending`, `stopped`, `error`, `locked` and `migrating`.
	Status string `pulumi:"status"`
	// Date on which the Load Balancer was updated.
	UpdatedAt string `pulumi:"updatedAt"`
	// `zone`) The zone in which the Load Balancers exist.
	Zone *string `pulumi:"zone"`
}

// GetLoadBalancersLbInstanceInput is an input type that accepts GetLoadBalancersLbInstanceArgs and GetLoadBalancersLbInstanceOutput values.
// You can construct a concrete instance of `GetLoadBalancersLbInstanceInput` via:
//
//	GetLoadBalancersLbInstanceArgs{...}
type GetLoadBalancersLbInstanceInput interface {
	pulumi.Input

	ToGetLoadBalancersLbInstanceOutput() GetLoadBalancersLbInstanceOutput
	ToGetLoadBalancersLbInstanceOutputWithContext(context.Context) GetLoadBalancersLbInstanceOutput
}

type GetLoadBalancersLbInstanceArgs struct {
	// Date on which the Load Balancer was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The ID of the Load Balancer.
	Id pulumi.StringInput `pulumi:"id"`
	// IP address of the instance
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The state of the Load Balancer Instance. Possible values are: `unknown`, `ready`, `pending`, `stopped`, `error`, `locked` and `migrating`.
	Status pulumi.StringInput `pulumi:"status"`
	// Date on which the Load Balancer was updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// `zone`) The zone in which the Load Balancers exist.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (GetLoadBalancersLbInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersLbInstance)(nil)).Elem()
}

func (i GetLoadBalancersLbInstanceArgs) ToGetLoadBalancersLbInstanceOutput() GetLoadBalancersLbInstanceOutput {
	return i.ToGetLoadBalancersLbInstanceOutputWithContext(context.Background())
}

func (i GetLoadBalancersLbInstanceArgs) ToGetLoadBalancersLbInstanceOutputWithContext(ctx context.Context) GetLoadBalancersLbInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersLbInstanceOutput)
}

// GetLoadBalancersLbInstanceArrayInput is an input type that accepts GetLoadBalancersLbInstanceArray and GetLoadBalancersLbInstanceArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancersLbInstanceArrayInput` via:
//
//	GetLoadBalancersLbInstanceArray{ GetLoadBalancersLbInstanceArgs{...} }
type GetLoadBalancersLbInstanceArrayInput interface {
	pulumi.Input

	ToGetLoadBalancersLbInstanceArrayOutput() GetLoadBalancersLbInstanceArrayOutput
	ToGetLoadBalancersLbInstanceArrayOutputWithContext(context.Context) GetLoadBalancersLbInstanceArrayOutput
}

type GetLoadBalancersLbInstanceArray []GetLoadBalancersLbInstanceInput

func (GetLoadBalancersLbInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersLbInstance)(nil)).Elem()
}

func (i GetLoadBalancersLbInstanceArray) ToGetLoadBalancersLbInstanceArrayOutput() GetLoadBalancersLbInstanceArrayOutput {
	return i.ToGetLoadBalancersLbInstanceArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancersLbInstanceArray) ToGetLoadBalancersLbInstanceArrayOutputWithContext(ctx context.Context) GetLoadBalancersLbInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersLbInstanceArrayOutput)
}

type GetLoadBalancersLbInstanceOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersLbInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersLbInstance)(nil)).Elem()
}

func (o GetLoadBalancersLbInstanceOutput) ToGetLoadBalancersLbInstanceOutput() GetLoadBalancersLbInstanceOutput {
	return o
}

func (o GetLoadBalancersLbInstanceOutput) ToGetLoadBalancersLbInstanceOutputWithContext(ctx context.Context) GetLoadBalancersLbInstanceOutput {
	return o
}

// Date on which the Load Balancer was created.
func (o GetLoadBalancersLbInstanceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLbInstance) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of the Load Balancer.
func (o GetLoadBalancersLbInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLbInstance) string { return v.Id }).(pulumi.StringOutput)
}

// IP address of the instance
func (o GetLoadBalancersLbInstanceOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLbInstance) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The state of the Load Balancer Instance. Possible values are: `unknown`, `ready`, `pending`, `stopped`, `error`, `locked` and `migrating`.
func (o GetLoadBalancersLbInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLbInstance) string { return v.Status }).(pulumi.StringOutput)
}

// Date on which the Load Balancer was updated.
func (o GetLoadBalancersLbInstanceOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLbInstance) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// `zone`) The zone in which the Load Balancers exist.
func (o GetLoadBalancersLbInstanceOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLoadBalancersLbInstance) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type GetLoadBalancersLbInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersLbInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersLbInstance)(nil)).Elem()
}

func (o GetLoadBalancersLbInstanceArrayOutput) ToGetLoadBalancersLbInstanceArrayOutput() GetLoadBalancersLbInstanceArrayOutput {
	return o
}

func (o GetLoadBalancersLbInstanceArrayOutput) ToGetLoadBalancersLbInstanceArrayOutputWithContext(ctx context.Context) GetLoadBalancersLbInstanceArrayOutput {
	return o
}

func (o GetLoadBalancersLbInstanceArrayOutput) Index(i pulumi.IntInput) GetLoadBalancersLbInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancersLbInstance {
		return vs[0].([]GetLoadBalancersLbInstance)[vs[1].(int)]
	}).(GetLoadBalancersLbInstanceOutput)
}

type GetLoadBalancersLbIp struct {
	// The ID of the Load Balancer.
	Id string `pulumi:"id"`
	// IP address
	IpAddress string `pulumi:"ipAddress"`
	// UUID of the load balancer attached to the IP
	LbId string `pulumi:"lbId"`
	// The ID of the Organization the Load Balancer is associated with.
	OrganizationId string `pulumi:"organizationId"`
	// The ID of the Project the Load Balancer is associated with.
	ProjectId string `pulumi:"projectId"`
	// Reverse DNS attached to the IP
	Reverse string `pulumi:"reverse"`
	// `zone`) The zone in which the Load Balancers exist.
	Zone *string `pulumi:"zone"`
}

// GetLoadBalancersLbIpInput is an input type that accepts GetLoadBalancersLbIpArgs and GetLoadBalancersLbIpOutput values.
// You can construct a concrete instance of `GetLoadBalancersLbIpInput` via:
//
//	GetLoadBalancersLbIpArgs{...}
type GetLoadBalancersLbIpInput interface {
	pulumi.Input

	ToGetLoadBalancersLbIpOutput() GetLoadBalancersLbIpOutput
	ToGetLoadBalancersLbIpOutputWithContext(context.Context) GetLoadBalancersLbIpOutput
}

type GetLoadBalancersLbIpArgs struct {
	// The ID of the Load Balancer.
	Id pulumi.StringInput `pulumi:"id"`
	// IP address
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// UUID of the load balancer attached to the IP
	LbId pulumi.StringInput `pulumi:"lbId"`
	// The ID of the Organization the Load Balancer is associated with.
	OrganizationId pulumi.StringInput `pulumi:"organizationId"`
	// The ID of the Project the Load Balancer is associated with.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// Reverse DNS attached to the IP
	Reverse pulumi.StringInput `pulumi:"reverse"`
	// `zone`) The zone in which the Load Balancers exist.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (GetLoadBalancersLbIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersLbIp)(nil)).Elem()
}

func (i GetLoadBalancersLbIpArgs) ToGetLoadBalancersLbIpOutput() GetLoadBalancersLbIpOutput {
	return i.ToGetLoadBalancersLbIpOutputWithContext(context.Background())
}

func (i GetLoadBalancersLbIpArgs) ToGetLoadBalancersLbIpOutputWithContext(ctx context.Context) GetLoadBalancersLbIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersLbIpOutput)
}

// GetLoadBalancersLbIpArrayInput is an input type that accepts GetLoadBalancersLbIpArray and GetLoadBalancersLbIpArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancersLbIpArrayInput` via:
//
//	GetLoadBalancersLbIpArray{ GetLoadBalancersLbIpArgs{...} }
type GetLoadBalancersLbIpArrayInput interface {
	pulumi.Input

	ToGetLoadBalancersLbIpArrayOutput() GetLoadBalancersLbIpArrayOutput
	ToGetLoadBalancersLbIpArrayOutputWithContext(context.Context) GetLoadBalancersLbIpArrayOutput
}

type GetLoadBalancersLbIpArray []GetLoadBalancersLbIpInput

func (GetLoadBalancersLbIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersLbIp)(nil)).Elem()
}

func (i GetLoadBalancersLbIpArray) ToGetLoadBalancersLbIpArrayOutput() GetLoadBalancersLbIpArrayOutput {
	return i.ToGetLoadBalancersLbIpArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancersLbIpArray) ToGetLoadBalancersLbIpArrayOutputWithContext(ctx context.Context) GetLoadBalancersLbIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersLbIpArrayOutput)
}

type GetLoadBalancersLbIpOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersLbIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersLbIp)(nil)).Elem()
}

func (o GetLoadBalancersLbIpOutput) ToGetLoadBalancersLbIpOutput() GetLoadBalancersLbIpOutput {
	return o
}

func (o GetLoadBalancersLbIpOutput) ToGetLoadBalancersLbIpOutputWithContext(ctx context.Context) GetLoadBalancersLbIpOutput {
	return o
}

// The ID of the Load Balancer.
func (o GetLoadBalancersLbIpOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLbIp) string { return v.Id }).(pulumi.StringOutput)
}

// IP address
func (o GetLoadBalancersLbIpOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLbIp) string { return v.IpAddress }).(pulumi.StringOutput)
}

// UUID of the load balancer attached to the IP
func (o GetLoadBalancersLbIpOutput) LbId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLbIp) string { return v.LbId }).(pulumi.StringOutput)
}

// The ID of the Organization the Load Balancer is associated with.
func (o GetLoadBalancersLbIpOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLbIp) string { return v.OrganizationId }).(pulumi.StringOutput)
}

// The ID of the Project the Load Balancer is associated with.
func (o GetLoadBalancersLbIpOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLbIp) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Reverse DNS attached to the IP
func (o GetLoadBalancersLbIpOutput) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLbIp) string { return v.Reverse }).(pulumi.StringOutput)
}

// `zone`) The zone in which the Load Balancers exist.
func (o GetLoadBalancersLbIpOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLoadBalancersLbIp) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type GetLoadBalancersLbIpArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersLbIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersLbIp)(nil)).Elem()
}

func (o GetLoadBalancersLbIpArrayOutput) ToGetLoadBalancersLbIpArrayOutput() GetLoadBalancersLbIpArrayOutput {
	return o
}

func (o GetLoadBalancersLbIpArrayOutput) ToGetLoadBalancersLbIpArrayOutputWithContext(ctx context.Context) GetLoadBalancersLbIpArrayOutput {
	return o
}

func (o GetLoadBalancersLbIpArrayOutput) Index(i pulumi.IntInput) GetLoadBalancersLbIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancersLbIp {
		return vs[0].([]GetLoadBalancersLbIp)[vs[1].(int)]
	}).(GetLoadBalancersLbIpOutput)
}

type GetRoutesRoute struct {
	// The backend ID to redirect to
	BackendId string `pulumi:"backendId"`
	// The date on which the route was created (RFC 3339 format).
	CreatedAt string `pulumi:"createdAt"`
	// The frontend ID (the origin of the redirection), to filter for. Routes with a matching frontend ID are listed.
	FrontendId string `pulumi:"frontendId"`
	// The associated route ID.
	Id string `pulumi:"id"`
	// Specifies the host of the server to which the request is being sent.
	MatchHostHeader string `pulumi:"matchHostHeader"`
	// Server Name Indication TLS extension field from an incoming connection made via an SSL/TLS transport layer.
	MatchSni string `pulumi:"matchSni"`
	// If true, all subdomains will match.
	MatchSubdomains bool `pulumi:"matchSubdomains"`
	// The date on which the route was last updated (RFC 3339 format).
	UpdateAt string `pulumi:"updateAt"`
}

// GetRoutesRouteInput is an input type that accepts GetRoutesRouteArgs and GetRoutesRouteOutput values.
// You can construct a concrete instance of `GetRoutesRouteInput` via:
//
//	GetRoutesRouteArgs{...}
type GetRoutesRouteInput interface {
	pulumi.Input

	ToGetRoutesRouteOutput() GetRoutesRouteOutput
	ToGetRoutesRouteOutputWithContext(context.Context) GetRoutesRouteOutput
}

type GetRoutesRouteArgs struct {
	// The backend ID to redirect to
	BackendId pulumi.StringInput `pulumi:"backendId"`
	// The date on which the route was created (RFC 3339 format).
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The frontend ID (the origin of the redirection), to filter for. Routes with a matching frontend ID are listed.
	FrontendId pulumi.StringInput `pulumi:"frontendId"`
	// The associated route ID.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies the host of the server to which the request is being sent.
	MatchHostHeader pulumi.StringInput `pulumi:"matchHostHeader"`
	// Server Name Indication TLS extension field from an incoming connection made via an SSL/TLS transport layer.
	MatchSni pulumi.StringInput `pulumi:"matchSni"`
	// If true, all subdomains will match.
	MatchSubdomains pulumi.BoolInput `pulumi:"matchSubdomains"`
	// The date on which the route was last updated (RFC 3339 format).
	UpdateAt pulumi.StringInput `pulumi:"updateAt"`
}

func (GetRoutesRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoutesRoute)(nil)).Elem()
}

func (i GetRoutesRouteArgs) ToGetRoutesRouteOutput() GetRoutesRouteOutput {
	return i.ToGetRoutesRouteOutputWithContext(context.Background())
}

func (i GetRoutesRouteArgs) ToGetRoutesRouteOutputWithContext(ctx context.Context) GetRoutesRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRoutesRouteOutput)
}

// GetRoutesRouteArrayInput is an input type that accepts GetRoutesRouteArray and GetRoutesRouteArrayOutput values.
// You can construct a concrete instance of `GetRoutesRouteArrayInput` via:
//
//	GetRoutesRouteArray{ GetRoutesRouteArgs{...} }
type GetRoutesRouteArrayInput interface {
	pulumi.Input

	ToGetRoutesRouteArrayOutput() GetRoutesRouteArrayOutput
	ToGetRoutesRouteArrayOutputWithContext(context.Context) GetRoutesRouteArrayOutput
}

type GetRoutesRouteArray []GetRoutesRouteInput

func (GetRoutesRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRoutesRoute)(nil)).Elem()
}

func (i GetRoutesRouteArray) ToGetRoutesRouteArrayOutput() GetRoutesRouteArrayOutput {
	return i.ToGetRoutesRouteArrayOutputWithContext(context.Background())
}

func (i GetRoutesRouteArray) ToGetRoutesRouteArrayOutputWithContext(ctx context.Context) GetRoutesRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRoutesRouteArrayOutput)
}

type GetRoutesRouteOutput struct{ *pulumi.OutputState }

func (GetRoutesRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoutesRoute)(nil)).Elem()
}

func (o GetRoutesRouteOutput) ToGetRoutesRouteOutput() GetRoutesRouteOutput {
	return o
}

func (o GetRoutesRouteOutput) ToGetRoutesRouteOutputWithContext(ctx context.Context) GetRoutesRouteOutput {
	return o
}

// The backend ID to redirect to
func (o GetRoutesRouteOutput) BackendId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutesRoute) string { return v.BackendId }).(pulumi.StringOutput)
}

// The date on which the route was created (RFC 3339 format).
func (o GetRoutesRouteOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutesRoute) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The frontend ID (the origin of the redirection), to filter for. Routes with a matching frontend ID are listed.
func (o GetRoutesRouteOutput) FrontendId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutesRoute) string { return v.FrontendId }).(pulumi.StringOutput)
}

// The associated route ID.
func (o GetRoutesRouteOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutesRoute) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies the host of the server to which the request is being sent.
func (o GetRoutesRouteOutput) MatchHostHeader() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutesRoute) string { return v.MatchHostHeader }).(pulumi.StringOutput)
}

// Server Name Indication TLS extension field from an incoming connection made via an SSL/TLS transport layer.
func (o GetRoutesRouteOutput) MatchSni() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutesRoute) string { return v.MatchSni }).(pulumi.StringOutput)
}

// If true, all subdomains will match.
func (o GetRoutesRouteOutput) MatchSubdomains() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRoutesRoute) bool { return v.MatchSubdomains }).(pulumi.BoolOutput)
}

// The date on which the route was last updated (RFC 3339 format).
func (o GetRoutesRouteOutput) UpdateAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutesRoute) string { return v.UpdateAt }).(pulumi.StringOutput)
}

type GetRoutesRouteArrayOutput struct{ *pulumi.OutputState }

func (GetRoutesRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRoutesRoute)(nil)).Elem()
}

func (o GetRoutesRouteArrayOutput) ToGetRoutesRouteArrayOutput() GetRoutesRouteArrayOutput {
	return o
}

func (o GetRoutesRouteArrayOutput) ToGetRoutesRouteArrayOutputWithContext(ctx context.Context) GetRoutesRouteArrayOutput {
	return o
}

func (o GetRoutesRouteArrayOutput) Index(i pulumi.IntInput) GetRoutesRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRoutesRoute {
		return vs[0].([]GetRoutesRoute)[vs[1].(int)]
	}).(GetRoutesRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclActionInput)(nil)).Elem(), AclActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclActionPtrInput)(nil)).Elem(), AclActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclActionRedirectInput)(nil)).Elem(), AclActionRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclActionRedirectArrayInput)(nil)).Elem(), AclActionRedirectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclMatchInput)(nil)).Elem(), AclMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclMatchPtrInput)(nil)).Elem(), AclMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendHealthCheckHttpInput)(nil)).Elem(), BackendHealthCheckHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendHealthCheckHttpPtrInput)(nil)).Elem(), BackendHealthCheckHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendHealthCheckHttpsInput)(nil)).Elem(), BackendHealthCheckHttpsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendHealthCheckHttpsPtrInput)(nil)).Elem(), BackendHealthCheckHttpsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendHealthCheckTcpInput)(nil)).Elem(), BackendHealthCheckTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendHealthCheckTcpPtrInput)(nil)).Elem(), BackendHealthCheckTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateCustomCertificateInput)(nil)).Elem(), CertificateCustomCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateCustomCertificatePtrInput)(nil)).Elem(), CertificateCustomCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateLetsencryptInput)(nil)).Elem(), CertificateLetsencryptArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateLetsencryptPtrInput)(nil)).Elem(), CertificateLetsencryptArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontendAclInput)(nil)).Elem(), FrontendAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontendAclArrayInput)(nil)).Elem(), FrontendAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontendAclActionInput)(nil)).Elem(), FrontendAclActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontendAclActionRedirectInput)(nil)).Elem(), FrontendAclActionRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontendAclActionRedirectArrayInput)(nil)).Elem(), FrontendAclActionRedirectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontendAclMatchInput)(nil)).Elem(), FrontendAclMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerPrivateIpInput)(nil)).Elem(), LoadBalancerPrivateIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerPrivateIpArrayInput)(nil)).Elem(), LoadBalancerPrivateIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerPrivateNetworkInput)(nil)).Elem(), LoadBalancerPrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerPrivateNetworkArrayInput)(nil)).Elem(), LoadBalancerPrivateNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclsAclInput)(nil)).Elem(), GetAclsAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclsAclArrayInput)(nil)).Elem(), GetAclsAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclsAclActionInput)(nil)).Elem(), GetAclsAclActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclsAclActionArrayInput)(nil)).Elem(), GetAclsAclActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclsAclActionRedirectInput)(nil)).Elem(), GetAclsAclActionRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclsAclActionRedirectArrayInput)(nil)).Elem(), GetAclsAclActionRedirectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclsAclMatchInput)(nil)).Elem(), GetAclsAclMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclsAclMatchArrayInput)(nil)).Elem(), GetAclsAclMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackendHealthCheckHttpInput)(nil)).Elem(), GetBackendHealthCheckHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackendHealthCheckHttpArrayInput)(nil)).Elem(), GetBackendHealthCheckHttpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackendHealthCheckTcpInput)(nil)).Elem(), GetBackendHealthCheckTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackendHealthCheckTcpArrayInput)(nil)).Elem(), GetBackendHealthCheckTcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackendsBackendInput)(nil)).Elem(), GetBackendsBackendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackendsBackendArrayInput)(nil)).Elem(), GetBackendsBackendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackendsBackendHealthCheckHttpInput)(nil)).Elem(), GetBackendsBackendHealthCheckHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackendsBackendHealthCheckHttpArrayInput)(nil)).Elem(), GetBackendsBackendHealthCheckHttpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackendsBackendHealthCheckTcpInput)(nil)).Elem(), GetBackendsBackendHealthCheckTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackendsBackendHealthCheckTcpArrayInput)(nil)).Elem(), GetBackendsBackendHealthCheckTcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateCustomCertificateInput)(nil)).Elem(), GetCertificateCustomCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateCustomCertificateArrayInput)(nil)).Elem(), GetCertificateCustomCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateLetsencryptInput)(nil)).Elem(), GetCertificateLetsencryptArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateLetsencryptArrayInput)(nil)).Elem(), GetCertificateLetsencryptArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrontendAclInput)(nil)).Elem(), GetFrontendAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrontendAclArrayInput)(nil)).Elem(), GetFrontendAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrontendAclActionInput)(nil)).Elem(), GetFrontendAclActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrontendAclActionArrayInput)(nil)).Elem(), GetFrontendAclActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrontendAclActionRedirectInput)(nil)).Elem(), GetFrontendAclActionRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrontendAclActionRedirectArrayInput)(nil)).Elem(), GetFrontendAclActionRedirectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrontendAclMatchInput)(nil)).Elem(), GetFrontendAclMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrontendAclMatchArrayInput)(nil)).Elem(), GetFrontendAclMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrontendsFrontendInput)(nil)).Elem(), GetFrontendsFrontendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrontendsFrontendArrayInput)(nil)).Elem(), GetFrontendsFrontendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIpsIpInput)(nil)).Elem(), GetIpsIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIpsIpArrayInput)(nil)).Elem(), GetIpsIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancerPrivateIpInput)(nil)).Elem(), GetLoadBalancerPrivateIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancerPrivateIpArrayInput)(nil)).Elem(), GetLoadBalancerPrivateIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancerPrivateNetworkInput)(nil)).Elem(), GetLoadBalancerPrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancerPrivateNetworkArrayInput)(nil)).Elem(), GetLoadBalancerPrivateNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersLbInput)(nil)).Elem(), GetLoadBalancersLbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersLbArrayInput)(nil)).Elem(), GetLoadBalancersLbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersLbInstanceInput)(nil)).Elem(), GetLoadBalancersLbInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersLbInstanceArrayInput)(nil)).Elem(), GetLoadBalancersLbInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersLbIpInput)(nil)).Elem(), GetLoadBalancersLbIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersLbIpArrayInput)(nil)).Elem(), GetLoadBalancersLbIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRoutesRouteInput)(nil)).Elem(), GetRoutesRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRoutesRouteArrayInput)(nil)).Elem(), GetRoutesRouteArray{})
	pulumi.RegisterOutputType(AclActionOutput{})
	pulumi.RegisterOutputType(AclActionPtrOutput{})
	pulumi.RegisterOutputType(AclActionRedirectOutput{})
	pulumi.RegisterOutputType(AclActionRedirectArrayOutput{})
	pulumi.RegisterOutputType(AclMatchOutput{})
	pulumi.RegisterOutputType(AclMatchPtrOutput{})
	pulumi.RegisterOutputType(BackendHealthCheckHttpOutput{})
	pulumi.RegisterOutputType(BackendHealthCheckHttpPtrOutput{})
	pulumi.RegisterOutputType(BackendHealthCheckHttpsOutput{})
	pulumi.RegisterOutputType(BackendHealthCheckHttpsPtrOutput{})
	pulumi.RegisterOutputType(BackendHealthCheckTcpOutput{})
	pulumi.RegisterOutputType(BackendHealthCheckTcpPtrOutput{})
	pulumi.RegisterOutputType(CertificateCustomCertificateOutput{})
	pulumi.RegisterOutputType(CertificateCustomCertificatePtrOutput{})
	pulumi.RegisterOutputType(CertificateLetsencryptOutput{})
	pulumi.RegisterOutputType(CertificateLetsencryptPtrOutput{})
	pulumi.RegisterOutputType(FrontendAclOutput{})
	pulumi.RegisterOutputType(FrontendAclArrayOutput{})
	pulumi.RegisterOutputType(FrontendAclActionOutput{})
	pulumi.RegisterOutputType(FrontendAclActionRedirectOutput{})
	pulumi.RegisterOutputType(FrontendAclActionRedirectArrayOutput{})
	pulumi.RegisterOutputType(FrontendAclMatchOutput{})
	pulumi.RegisterOutputType(LoadBalancerPrivateIpOutput{})
	pulumi.RegisterOutputType(LoadBalancerPrivateIpArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerPrivateNetworkOutput{})
	pulumi.RegisterOutputType(LoadBalancerPrivateNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetAclsAclOutput{})
	pulumi.RegisterOutputType(GetAclsAclArrayOutput{})
	pulumi.RegisterOutputType(GetAclsAclActionOutput{})
	pulumi.RegisterOutputType(GetAclsAclActionArrayOutput{})
	pulumi.RegisterOutputType(GetAclsAclActionRedirectOutput{})
	pulumi.RegisterOutputType(GetAclsAclActionRedirectArrayOutput{})
	pulumi.RegisterOutputType(GetAclsAclMatchOutput{})
	pulumi.RegisterOutputType(GetAclsAclMatchArrayOutput{})
	pulumi.RegisterOutputType(GetBackendHealthCheckHttpOutput{})
	pulumi.RegisterOutputType(GetBackendHealthCheckHttpArrayOutput{})
	pulumi.RegisterOutputType(GetBackendHealthCheckTcpOutput{})
	pulumi.RegisterOutputType(GetBackendHealthCheckTcpArrayOutput{})
	pulumi.RegisterOutputType(GetBackendsBackendOutput{})
	pulumi.RegisterOutputType(GetBackendsBackendArrayOutput{})
	pulumi.RegisterOutputType(GetBackendsBackendHealthCheckHttpOutput{})
	pulumi.RegisterOutputType(GetBackendsBackendHealthCheckHttpArrayOutput{})
	pulumi.RegisterOutputType(GetBackendsBackendHealthCheckTcpOutput{})
	pulumi.RegisterOutputType(GetBackendsBackendHealthCheckTcpArrayOutput{})
	pulumi.RegisterOutputType(GetCertificateCustomCertificateOutput{})
	pulumi.RegisterOutputType(GetCertificateCustomCertificateArrayOutput{})
	pulumi.RegisterOutputType(GetCertificateLetsencryptOutput{})
	pulumi.RegisterOutputType(GetCertificateLetsencryptArrayOutput{})
	pulumi.RegisterOutputType(GetFrontendAclOutput{})
	pulumi.RegisterOutputType(GetFrontendAclArrayOutput{})
	pulumi.RegisterOutputType(GetFrontendAclActionOutput{})
	pulumi.RegisterOutputType(GetFrontendAclActionArrayOutput{})
	pulumi.RegisterOutputType(GetFrontendAclActionRedirectOutput{})
	pulumi.RegisterOutputType(GetFrontendAclActionRedirectArrayOutput{})
	pulumi.RegisterOutputType(GetFrontendAclMatchOutput{})
	pulumi.RegisterOutputType(GetFrontendAclMatchArrayOutput{})
	pulumi.RegisterOutputType(GetFrontendsFrontendOutput{})
	pulumi.RegisterOutputType(GetFrontendsFrontendArrayOutput{})
	pulumi.RegisterOutputType(GetIpsIpOutput{})
	pulumi.RegisterOutputType(GetIpsIpArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerPrivateIpOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerPrivateIpArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerPrivateNetworkOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerPrivateNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersLbOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersLbArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersLbInstanceOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersLbInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersLbIpOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersLbIpArrayOutput{})
	pulumi.RegisterOutputType(GetRoutesRouteOutput{})
	pulumi.RegisterOutputType(GetRoutesRouteArrayOutput{})
}
