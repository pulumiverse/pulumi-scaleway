// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mnq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Gets information about SQS for a Project
//
// ## Examples
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/mnq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// For default project
//			_, err := mnq.LookupSqs(ctx, &mnq.LookupSqsArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			// For specific project
//			_, err = mnq.LookupSqs(ctx, &mnq.LookupSqsArgs{
//				ProjectId: pulumi.StringRef(mainScalewayAccountProject.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSqs(ctx *pulumi.Context, args *LookupSqsArgs, opts ...pulumi.InvokeOption) (*LookupSqsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSqsResult
	err := ctx.Invoke("scaleway:mnq/getSqs:getSqs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSqs.
type LookupSqsArgs struct {
	// `projectId`) The ID of the Project in which SQS is enabled.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region in which SQS is enabled.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getSqs.
type LookupSqsResult struct {
	// The endpoint of the SQS service for this Project.
	Endpoint string `pulumi:"endpoint"`
	// The provider-assigned unique ID for this managed resource.
	Id        string  `pulumi:"id"`
	ProjectId *string `pulumi:"projectId"`
	Region    *string `pulumi:"region"`
}

func LookupSqsOutput(ctx *pulumi.Context, args LookupSqsOutputArgs, opts ...pulumi.InvokeOption) LookupSqsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSqsResultOutput, error) {
			args := v.(LookupSqsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("scaleway:mnq/getSqs:getSqs", args, LookupSqsResultOutput{}, options).(LookupSqsResultOutput), nil
		}).(LookupSqsResultOutput)
}

// A collection of arguments for invoking getSqs.
type LookupSqsOutputArgs struct {
	// `projectId`) The ID of the Project in which SQS is enabled.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// `region`). The region in which SQS is enabled.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (LookupSqsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSqsArgs)(nil)).Elem()
}

// A collection of values returned by getSqs.
type LookupSqsResultOutput struct{ *pulumi.OutputState }

func (LookupSqsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSqsResult)(nil)).Elem()
}

func (o LookupSqsResultOutput) ToLookupSqsResultOutput() LookupSqsResultOutput {
	return o
}

func (o LookupSqsResultOutput) ToLookupSqsResultOutputWithContext(ctx context.Context) LookupSqsResultOutput {
	return o
}

// The endpoint of the SQS service for this Project.
func (o LookupSqsResultOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqsResult) string { return v.Endpoint }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSqsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSqsResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSqsResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

func (o LookupSqsResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSqsResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSqsResultOutput{})
}
