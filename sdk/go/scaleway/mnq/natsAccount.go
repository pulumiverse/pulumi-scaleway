// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mnq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Messaging and Queuing NATS accounts.
// For further information, see
// our [main documentation](https://www.scaleway.com/en/docs/messaging/reference-content/nats-overview/)
// To use the Scaleway provider with the official NATS JetStream provider, check out the corresponding guide.
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/mnq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mnq.NewNatsAccount(ctx, "main", &mnq.NatsAccountArgs{
//				Name: pulumi.String("nats-account"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Namespaces can be imported using `{region}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:mnq/natsAccount:NatsAccount main fr-par/11111111111111111111111111111111
// ```
type NatsAccount struct {
	pulumi.CustomResourceState

	// The endpoint of the NATS service for this account.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// The unique name of the NATS account.
	Name pulumi.StringOutput `pulumi:"name"`
	// `projectId`) The ID of the Project the
	// account is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// `region`). The region
	// in which the account should be created.
	Region pulumi.StringPtrOutput `pulumi:"region"`
}

// NewNatsAccount registers a new resource with the given unique name, arguments, and options.
func NewNatsAccount(ctx *pulumi.Context,
	name string, args *NatsAccountArgs, opts ...pulumi.ResourceOption) (*NatsAccount, error) {
	if args == nil {
		args = &NatsAccountArgs{}
	}

	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/mnqNatsAccount:MnqNatsAccount"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NatsAccount
	err := ctx.RegisterResource("scaleway:mnq/natsAccount:NatsAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNatsAccount gets an existing NatsAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNatsAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NatsAccountState, opts ...pulumi.ResourceOption) (*NatsAccount, error) {
	var resource NatsAccount
	err := ctx.ReadResource("scaleway:mnq/natsAccount:NatsAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NatsAccount resources.
type natsAccountState struct {
	// The endpoint of the NATS service for this account.
	Endpoint *string `pulumi:"endpoint"`
	// The unique name of the NATS account.
	Name *string `pulumi:"name"`
	// `projectId`) The ID of the Project the
	// account is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region
	// in which the account should be created.
	Region *string `pulumi:"region"`
}

type NatsAccountState struct {
	// The endpoint of the NATS service for this account.
	Endpoint pulumi.StringPtrInput
	// The unique name of the NATS account.
	Name pulumi.StringPtrInput
	// `projectId`) The ID of the Project the
	// account is associated with.
	ProjectId pulumi.StringPtrInput
	// `region`). The region
	// in which the account should be created.
	Region pulumi.StringPtrInput
}

func (NatsAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*natsAccountState)(nil)).Elem()
}

type natsAccountArgs struct {
	// The unique name of the NATS account.
	Name *string `pulumi:"name"`
	// `projectId`) The ID of the Project the
	// account is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region
	// in which the account should be created.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a NatsAccount resource.
type NatsAccountArgs struct {
	// The unique name of the NATS account.
	Name pulumi.StringPtrInput
	// `projectId`) The ID of the Project the
	// account is associated with.
	ProjectId pulumi.StringPtrInput
	// `region`). The region
	// in which the account should be created.
	Region pulumi.StringPtrInput
}

func (NatsAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*natsAccountArgs)(nil)).Elem()
}

type NatsAccountInput interface {
	pulumi.Input

	ToNatsAccountOutput() NatsAccountOutput
	ToNatsAccountOutputWithContext(ctx context.Context) NatsAccountOutput
}

func (*NatsAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**NatsAccount)(nil)).Elem()
}

func (i *NatsAccount) ToNatsAccountOutput() NatsAccountOutput {
	return i.ToNatsAccountOutputWithContext(context.Background())
}

func (i *NatsAccount) ToNatsAccountOutputWithContext(ctx context.Context) NatsAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatsAccountOutput)
}

// NatsAccountArrayInput is an input type that accepts NatsAccountArray and NatsAccountArrayOutput values.
// You can construct a concrete instance of `NatsAccountArrayInput` via:
//
//	NatsAccountArray{ NatsAccountArgs{...} }
type NatsAccountArrayInput interface {
	pulumi.Input

	ToNatsAccountArrayOutput() NatsAccountArrayOutput
	ToNatsAccountArrayOutputWithContext(context.Context) NatsAccountArrayOutput
}

type NatsAccountArray []NatsAccountInput

func (NatsAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NatsAccount)(nil)).Elem()
}

func (i NatsAccountArray) ToNatsAccountArrayOutput() NatsAccountArrayOutput {
	return i.ToNatsAccountArrayOutputWithContext(context.Background())
}

func (i NatsAccountArray) ToNatsAccountArrayOutputWithContext(ctx context.Context) NatsAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatsAccountArrayOutput)
}

// NatsAccountMapInput is an input type that accepts NatsAccountMap and NatsAccountMapOutput values.
// You can construct a concrete instance of `NatsAccountMapInput` via:
//
//	NatsAccountMap{ "key": NatsAccountArgs{...} }
type NatsAccountMapInput interface {
	pulumi.Input

	ToNatsAccountMapOutput() NatsAccountMapOutput
	ToNatsAccountMapOutputWithContext(context.Context) NatsAccountMapOutput
}

type NatsAccountMap map[string]NatsAccountInput

func (NatsAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NatsAccount)(nil)).Elem()
}

func (i NatsAccountMap) ToNatsAccountMapOutput() NatsAccountMapOutput {
	return i.ToNatsAccountMapOutputWithContext(context.Background())
}

func (i NatsAccountMap) ToNatsAccountMapOutputWithContext(ctx context.Context) NatsAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatsAccountMapOutput)
}

type NatsAccountOutput struct{ *pulumi.OutputState }

func (NatsAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NatsAccount)(nil)).Elem()
}

func (o NatsAccountOutput) ToNatsAccountOutput() NatsAccountOutput {
	return o
}

func (o NatsAccountOutput) ToNatsAccountOutputWithContext(ctx context.Context) NatsAccountOutput {
	return o
}

// The endpoint of the NATS service for this account.
func (o NatsAccountOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *NatsAccount) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// The unique name of the NATS account.
func (o NatsAccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NatsAccount) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// `projectId`) The ID of the Project the
// account is associated with.
func (o NatsAccountOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatsAccount) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// `region`). The region
// in which the account should be created.
func (o NatsAccountOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NatsAccount) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

type NatsAccountArrayOutput struct{ *pulumi.OutputState }

func (NatsAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NatsAccount)(nil)).Elem()
}

func (o NatsAccountArrayOutput) ToNatsAccountArrayOutput() NatsAccountArrayOutput {
	return o
}

func (o NatsAccountArrayOutput) ToNatsAccountArrayOutputWithContext(ctx context.Context) NatsAccountArrayOutput {
	return o
}

func (o NatsAccountArrayOutput) Index(i pulumi.IntInput) NatsAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NatsAccount {
		return vs[0].([]*NatsAccount)[vs[1].(int)]
	}).(NatsAccountOutput)
}

type NatsAccountMapOutput struct{ *pulumi.OutputState }

func (NatsAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NatsAccount)(nil)).Elem()
}

func (o NatsAccountMapOutput) ToNatsAccountMapOutput() NatsAccountMapOutput {
	return o
}

func (o NatsAccountMapOutput) ToNatsAccountMapOutputWithContext(ctx context.Context) NatsAccountMapOutput {
	return o
}

func (o NatsAccountMapOutput) MapIndex(k pulumi.StringInput) NatsAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NatsAccount {
		return vs[0].(map[string]*NatsAccount)[vs[1].(string)]
	}).(NatsAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NatsAccountInput)(nil)).Elem(), &NatsAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatsAccountArrayInput)(nil)).Elem(), NatsAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatsAccountMapInput)(nil)).Elem(), NatsAccountMap{})
	pulumi.RegisterOutputType(NatsAccountOutput{})
	pulumi.RegisterOutputType(NatsAccountArrayOutput{})
	pulumi.RegisterOutputType(NatsAccountMapOutput{})
}
