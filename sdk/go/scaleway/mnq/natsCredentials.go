// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mnq

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Messaging and Queuing NATS credentials.
// For further information, see
// our [main documentation](https://www.scaleway.com/en/docs/messaging/reference-content/nats-overview/).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/mnq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := mnq.NewNatsAccount(ctx, "main", &mnq.NatsAccountArgs{
//				Name: pulumi.String("nats-account"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mnq.NewNatsCredentials(ctx, "main", &mnq.NatsCredentialsArgs{
//				AccountId: main.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Namespaces can be imported using `{region}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:mnq/natsCredentials:NatsCredentials main fr-par/11111111111111111111111111111111
// ```
type NatsCredentials struct {
	pulumi.CustomResourceState

	// The ID of the NATS account the credentials are generated from
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The content of the credentials file.
	File pulumi.StringOutput `pulumi:"file"`
	// The unique name of the NATS credentials.
	Name pulumi.StringOutput `pulumi:"name"`
	// `region`). The region
	// in which the account exists.
	Region pulumi.StringPtrOutput `pulumi:"region"`
}

// NewNatsCredentials registers a new resource with the given unique name, arguments, and options.
func NewNatsCredentials(ctx *pulumi.Context,
	name string, args *NatsCredentialsArgs, opts ...pulumi.ResourceOption) (*NatsCredentials, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/mnqNatsCredentials:MnqNatsCredentials"),
		},
	})
	opts = append(opts, aliases)
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"file",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NatsCredentials
	err := ctx.RegisterResource("scaleway:mnq/natsCredentials:NatsCredentials", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNatsCredentials gets an existing NatsCredentials resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNatsCredentials(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NatsCredentialsState, opts ...pulumi.ResourceOption) (*NatsCredentials, error) {
	var resource NatsCredentials
	err := ctx.ReadResource("scaleway:mnq/natsCredentials:NatsCredentials", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NatsCredentials resources.
type natsCredentialsState struct {
	// The ID of the NATS account the credentials are generated from
	AccountId *string `pulumi:"accountId"`
	// The content of the credentials file.
	File *string `pulumi:"file"`
	// The unique name of the NATS credentials.
	Name *string `pulumi:"name"`
	// `region`). The region
	// in which the account exists.
	Region *string `pulumi:"region"`
}

type NatsCredentialsState struct {
	// The ID of the NATS account the credentials are generated from
	AccountId pulumi.StringPtrInput
	// The content of the credentials file.
	File pulumi.StringPtrInput
	// The unique name of the NATS credentials.
	Name pulumi.StringPtrInput
	// `region`). The region
	// in which the account exists.
	Region pulumi.StringPtrInput
}

func (NatsCredentialsState) ElementType() reflect.Type {
	return reflect.TypeOf((*natsCredentialsState)(nil)).Elem()
}

type natsCredentialsArgs struct {
	// The ID of the NATS account the credentials are generated from
	AccountId string `pulumi:"accountId"`
	// The unique name of the NATS credentials.
	Name *string `pulumi:"name"`
	// `region`). The region
	// in which the account exists.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a NatsCredentials resource.
type NatsCredentialsArgs struct {
	// The ID of the NATS account the credentials are generated from
	AccountId pulumi.StringInput
	// The unique name of the NATS credentials.
	Name pulumi.StringPtrInput
	// `region`). The region
	// in which the account exists.
	Region pulumi.StringPtrInput
}

func (NatsCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*natsCredentialsArgs)(nil)).Elem()
}

type NatsCredentialsInput interface {
	pulumi.Input

	ToNatsCredentialsOutput() NatsCredentialsOutput
	ToNatsCredentialsOutputWithContext(ctx context.Context) NatsCredentialsOutput
}

func (*NatsCredentials) ElementType() reflect.Type {
	return reflect.TypeOf((**NatsCredentials)(nil)).Elem()
}

func (i *NatsCredentials) ToNatsCredentialsOutput() NatsCredentialsOutput {
	return i.ToNatsCredentialsOutputWithContext(context.Background())
}

func (i *NatsCredentials) ToNatsCredentialsOutputWithContext(ctx context.Context) NatsCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatsCredentialsOutput)
}

// NatsCredentialsArrayInput is an input type that accepts NatsCredentialsArray and NatsCredentialsArrayOutput values.
// You can construct a concrete instance of `NatsCredentialsArrayInput` via:
//
//	NatsCredentialsArray{ NatsCredentialsArgs{...} }
type NatsCredentialsArrayInput interface {
	pulumi.Input

	ToNatsCredentialsArrayOutput() NatsCredentialsArrayOutput
	ToNatsCredentialsArrayOutputWithContext(context.Context) NatsCredentialsArrayOutput
}

type NatsCredentialsArray []NatsCredentialsInput

func (NatsCredentialsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NatsCredentials)(nil)).Elem()
}

func (i NatsCredentialsArray) ToNatsCredentialsArrayOutput() NatsCredentialsArrayOutput {
	return i.ToNatsCredentialsArrayOutputWithContext(context.Background())
}

func (i NatsCredentialsArray) ToNatsCredentialsArrayOutputWithContext(ctx context.Context) NatsCredentialsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatsCredentialsArrayOutput)
}

// NatsCredentialsMapInput is an input type that accepts NatsCredentialsMap and NatsCredentialsMapOutput values.
// You can construct a concrete instance of `NatsCredentialsMapInput` via:
//
//	NatsCredentialsMap{ "key": NatsCredentialsArgs{...} }
type NatsCredentialsMapInput interface {
	pulumi.Input

	ToNatsCredentialsMapOutput() NatsCredentialsMapOutput
	ToNatsCredentialsMapOutputWithContext(context.Context) NatsCredentialsMapOutput
}

type NatsCredentialsMap map[string]NatsCredentialsInput

func (NatsCredentialsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NatsCredentials)(nil)).Elem()
}

func (i NatsCredentialsMap) ToNatsCredentialsMapOutput() NatsCredentialsMapOutput {
	return i.ToNatsCredentialsMapOutputWithContext(context.Background())
}

func (i NatsCredentialsMap) ToNatsCredentialsMapOutputWithContext(ctx context.Context) NatsCredentialsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatsCredentialsMapOutput)
}

type NatsCredentialsOutput struct{ *pulumi.OutputState }

func (NatsCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NatsCredentials)(nil)).Elem()
}

func (o NatsCredentialsOutput) ToNatsCredentialsOutput() NatsCredentialsOutput {
	return o
}

func (o NatsCredentialsOutput) ToNatsCredentialsOutputWithContext(ctx context.Context) NatsCredentialsOutput {
	return o
}

// The ID of the NATS account the credentials are generated from
func (o NatsCredentialsOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatsCredentials) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The content of the credentials file.
func (o NatsCredentialsOutput) File() pulumi.StringOutput {
	return o.ApplyT(func(v *NatsCredentials) pulumi.StringOutput { return v.File }).(pulumi.StringOutput)
}

// The unique name of the NATS credentials.
func (o NatsCredentialsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NatsCredentials) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// `region`). The region
// in which the account exists.
func (o NatsCredentialsOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NatsCredentials) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

type NatsCredentialsArrayOutput struct{ *pulumi.OutputState }

func (NatsCredentialsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NatsCredentials)(nil)).Elem()
}

func (o NatsCredentialsArrayOutput) ToNatsCredentialsArrayOutput() NatsCredentialsArrayOutput {
	return o
}

func (o NatsCredentialsArrayOutput) ToNatsCredentialsArrayOutputWithContext(ctx context.Context) NatsCredentialsArrayOutput {
	return o
}

func (o NatsCredentialsArrayOutput) Index(i pulumi.IntInput) NatsCredentialsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NatsCredentials {
		return vs[0].([]*NatsCredentials)[vs[1].(int)]
	}).(NatsCredentialsOutput)
}

type NatsCredentialsMapOutput struct{ *pulumi.OutputState }

func (NatsCredentialsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NatsCredentials)(nil)).Elem()
}

func (o NatsCredentialsMapOutput) ToNatsCredentialsMapOutput() NatsCredentialsMapOutput {
	return o
}

func (o NatsCredentialsMapOutput) ToNatsCredentialsMapOutputWithContext(ctx context.Context) NatsCredentialsMapOutput {
	return o
}

func (o NatsCredentialsMapOutput) MapIndex(k pulumi.StringInput) NatsCredentialsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NatsCredentials {
		return vs[0].(map[string]*NatsCredentials)[vs[1].(string)]
	}).(NatsCredentialsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NatsCredentialsInput)(nil)).Elem(), &NatsCredentials{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatsCredentialsArrayInput)(nil)).Elem(), NatsCredentialsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatsCredentialsMapInput)(nil)).Elem(), NatsCredentialsMap{})
	pulumi.RegisterOutputType(NatsCredentialsOutput{})
	pulumi.RegisterOutputType(NatsCredentialsArrayOutput{})
	pulumi.RegisterOutputType(NatsCredentialsMapOutput{})
}
