// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mnq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Activates Scaleway Messaging and Queuing SNS in a Project.
// For further information, see
// our [main documentation](https://www.scaleway.com/en/docs/messaging/reference-content/sns-overview/).
//
// ## Example Usage
//
// ### Basic
//
// # Activate SNS in the default Project
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/mnq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mnq.NewSns(ctx, "main", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// # Activate SNS in a specific Project
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/account"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/mnq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := account.LookupProject(ctx, &account.LookupProjectArgs{
//				Name: pulumi.StringRef("default"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// For specific Project in default region
//			_, err = mnq.NewSns(ctx, "for_project", &mnq.SnsArgs{
//				ProjectId: pulumi.String(project.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SNS status can be imported using `{region}/{project_id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:mnq/sns:Sns main fr-par/11111111111111111111111111111111
// ```
type Sns struct {
	pulumi.CustomResourceState

	// The endpoint of the SNS service for this Project.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// `projectId`) The ID of the project in which SNS will be enabled.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// `region`). The region
	// in which SNS will be enabled.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewSns registers a new resource with the given unique name, arguments, and options.
func NewSns(ctx *pulumi.Context,
	name string, args *SnsArgs, opts ...pulumi.ResourceOption) (*Sns, error) {
	if args == nil {
		args = &SnsArgs{}
	}

	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/mnqSns:MnqSns"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Sns
	err := ctx.RegisterResource("scaleway:mnq/sns:Sns", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSns gets an existing Sns resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSns(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnsState, opts ...pulumi.ResourceOption) (*Sns, error) {
	var resource Sns
	err := ctx.ReadResource("scaleway:mnq/sns:Sns", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Sns resources.
type snsState struct {
	// The endpoint of the SNS service for this Project.
	Endpoint *string `pulumi:"endpoint"`
	// `projectId`) The ID of the project in which SNS will be enabled.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region
	// in which SNS will be enabled.
	Region *string `pulumi:"region"`
}

type SnsState struct {
	// The endpoint of the SNS service for this Project.
	Endpoint pulumi.StringPtrInput
	// `projectId`) The ID of the project in which SNS will be enabled.
	ProjectId pulumi.StringPtrInput
	// `region`). The region
	// in which SNS will be enabled.
	Region pulumi.StringPtrInput
}

func (SnsState) ElementType() reflect.Type {
	return reflect.TypeOf((*snsState)(nil)).Elem()
}

type snsArgs struct {
	// `projectId`) The ID of the project in which SNS will be enabled.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region
	// in which SNS will be enabled.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a Sns resource.
type SnsArgs struct {
	// `projectId`) The ID of the project in which SNS will be enabled.
	ProjectId pulumi.StringPtrInput
	// `region`). The region
	// in which SNS will be enabled.
	Region pulumi.StringPtrInput
}

func (SnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snsArgs)(nil)).Elem()
}

type SnsInput interface {
	pulumi.Input

	ToSnsOutput() SnsOutput
	ToSnsOutputWithContext(ctx context.Context) SnsOutput
}

func (*Sns) ElementType() reflect.Type {
	return reflect.TypeOf((**Sns)(nil)).Elem()
}

func (i *Sns) ToSnsOutput() SnsOutput {
	return i.ToSnsOutputWithContext(context.Background())
}

func (i *Sns) ToSnsOutputWithContext(ctx context.Context) SnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnsOutput)
}

// SnsArrayInput is an input type that accepts SnsArray and SnsArrayOutput values.
// You can construct a concrete instance of `SnsArrayInput` via:
//
//	SnsArray{ SnsArgs{...} }
type SnsArrayInput interface {
	pulumi.Input

	ToSnsArrayOutput() SnsArrayOutput
	ToSnsArrayOutputWithContext(context.Context) SnsArrayOutput
}

type SnsArray []SnsInput

func (SnsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sns)(nil)).Elem()
}

func (i SnsArray) ToSnsArrayOutput() SnsArrayOutput {
	return i.ToSnsArrayOutputWithContext(context.Background())
}

func (i SnsArray) ToSnsArrayOutputWithContext(ctx context.Context) SnsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnsArrayOutput)
}

// SnsMapInput is an input type that accepts SnsMap and SnsMapOutput values.
// You can construct a concrete instance of `SnsMapInput` via:
//
//	SnsMap{ "key": SnsArgs{...} }
type SnsMapInput interface {
	pulumi.Input

	ToSnsMapOutput() SnsMapOutput
	ToSnsMapOutputWithContext(context.Context) SnsMapOutput
}

type SnsMap map[string]SnsInput

func (SnsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sns)(nil)).Elem()
}

func (i SnsMap) ToSnsMapOutput() SnsMapOutput {
	return i.ToSnsMapOutputWithContext(context.Background())
}

func (i SnsMap) ToSnsMapOutputWithContext(ctx context.Context) SnsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnsMapOutput)
}

type SnsOutput struct{ *pulumi.OutputState }

func (SnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sns)(nil)).Elem()
}

func (o SnsOutput) ToSnsOutput() SnsOutput {
	return o
}

func (o SnsOutput) ToSnsOutputWithContext(ctx context.Context) SnsOutput {
	return o
}

// The endpoint of the SNS service for this Project.
func (o SnsOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Sns) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// `projectId`) The ID of the project in which SNS will be enabled.
func (o SnsOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Sns) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// `region`). The region
// in which SNS will be enabled.
func (o SnsOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Sns) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type SnsArrayOutput struct{ *pulumi.OutputState }

func (SnsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sns)(nil)).Elem()
}

func (o SnsArrayOutput) ToSnsArrayOutput() SnsArrayOutput {
	return o
}

func (o SnsArrayOutput) ToSnsArrayOutputWithContext(ctx context.Context) SnsArrayOutput {
	return o
}

func (o SnsArrayOutput) Index(i pulumi.IntInput) SnsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Sns {
		return vs[0].([]*Sns)[vs[1].(int)]
	}).(SnsOutput)
}

type SnsMapOutput struct{ *pulumi.OutputState }

func (SnsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sns)(nil)).Elem()
}

func (o SnsMapOutput) ToSnsMapOutput() SnsMapOutput {
	return o
}

func (o SnsMapOutput) ToSnsMapOutputWithContext(ctx context.Context) SnsMapOutput {
	return o
}

func (o SnsMapOutput) MapIndex(k pulumi.StringInput) SnsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Sns {
		return vs[0].(map[string]*Sns)[vs[1].(string)]
	}).(SnsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnsInput)(nil)).Elem(), &Sns{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnsArrayInput)(nil)).Elem(), SnsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnsMapInput)(nil)).Elem(), SnsMap{})
	pulumi.RegisterOutputType(SnsOutput{})
	pulumi.RegisterOutputType(SnsArrayOutput{})
	pulumi.RegisterOutputType(SnsMapOutput{})
}
