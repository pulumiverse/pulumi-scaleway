// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mnq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Messaging and Queuing SNS credentials.
// For further information, see
// our [main documentation](https://www.scaleway.com/en/docs/messaging/reference-content/sns-overview/)
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/mnq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := mnq.NewSns(ctx, "main", nil)
//			if err != nil {
//				return err
//			}
//			_, err = mnq.NewSnsCredentials(ctx, "main", &mnq.SnsCredentialsArgs{
//				ProjectId: main.ProjectId,
//				Name:      pulumi.String("sns-credentials"),
//				Permissions: &mnq.SnsCredentialsPermissionsArgs{
//					CanManage:  pulumi.Bool(false),
//					CanReceive: pulumi.Bool(true),
//					CanPublish: pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SNS credentials can be imported using `{region}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:mnq/snsCredentials:SnsCredentials main fr-par/11111111111111111111111111111111
// ```
type SnsCredentials struct {
	pulumi.CustomResourceState

	// The ID of the key.
	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// The unique name of the SNS credentials.
	Name pulumi.StringOutput `pulumi:"name"`
	// . List of permissions associated with these credentials.
	Permissions SnsCredentialsPermissionsOutput `pulumi:"permissions"`
	// `projectId`) The ID of the Project in which SNS is enabled.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// `region`). The region in which SNS is enabled.
	Region pulumi.StringOutput `pulumi:"region"`
	// The secret value of the key.
	SecretKey pulumi.StringOutput `pulumi:"secretKey"`
}

// NewSnsCredentials registers a new resource with the given unique name, arguments, and options.
func NewSnsCredentials(ctx *pulumi.Context,
	name string, args *SnsCredentialsArgs, opts ...pulumi.ResourceOption) (*SnsCredentials, error) {
	if args == nil {
		args = &SnsCredentialsArgs{}
	}

	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/mnqSnsCredentials:MnqSnsCredentials"),
		},
	})
	opts = append(opts, aliases)
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accessKey",
		"secretKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SnsCredentials
	err := ctx.RegisterResource("scaleway:mnq/snsCredentials:SnsCredentials", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnsCredentials gets an existing SnsCredentials resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnsCredentials(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnsCredentialsState, opts ...pulumi.ResourceOption) (*SnsCredentials, error) {
	var resource SnsCredentials
	err := ctx.ReadResource("scaleway:mnq/snsCredentials:SnsCredentials", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnsCredentials resources.
type snsCredentialsState struct {
	// The ID of the key.
	AccessKey *string `pulumi:"accessKey"`
	// The unique name of the SNS credentials.
	Name *string `pulumi:"name"`
	// . List of permissions associated with these credentials.
	Permissions *SnsCredentialsPermissions `pulumi:"permissions"`
	// `projectId`) The ID of the Project in which SNS is enabled.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region in which SNS is enabled.
	Region *string `pulumi:"region"`
	// The secret value of the key.
	SecretKey *string `pulumi:"secretKey"`
}

type SnsCredentialsState struct {
	// The ID of the key.
	AccessKey pulumi.StringPtrInput
	// The unique name of the SNS credentials.
	Name pulumi.StringPtrInput
	// . List of permissions associated with these credentials.
	Permissions SnsCredentialsPermissionsPtrInput
	// `projectId`) The ID of the Project in which SNS is enabled.
	ProjectId pulumi.StringPtrInput
	// `region`). The region in which SNS is enabled.
	Region pulumi.StringPtrInput
	// The secret value of the key.
	SecretKey pulumi.StringPtrInput
}

func (SnsCredentialsState) ElementType() reflect.Type {
	return reflect.TypeOf((*snsCredentialsState)(nil)).Elem()
}

type snsCredentialsArgs struct {
	// The unique name of the SNS credentials.
	Name *string `pulumi:"name"`
	// . List of permissions associated with these credentials.
	Permissions *SnsCredentialsPermissions `pulumi:"permissions"`
	// `projectId`) The ID of the Project in which SNS is enabled.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region in which SNS is enabled.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a SnsCredentials resource.
type SnsCredentialsArgs struct {
	// The unique name of the SNS credentials.
	Name pulumi.StringPtrInput
	// . List of permissions associated with these credentials.
	Permissions SnsCredentialsPermissionsPtrInput
	// `projectId`) The ID of the Project in which SNS is enabled.
	ProjectId pulumi.StringPtrInput
	// `region`). The region in which SNS is enabled.
	Region pulumi.StringPtrInput
}

func (SnsCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snsCredentialsArgs)(nil)).Elem()
}

type SnsCredentialsInput interface {
	pulumi.Input

	ToSnsCredentialsOutput() SnsCredentialsOutput
	ToSnsCredentialsOutputWithContext(ctx context.Context) SnsCredentialsOutput
}

func (*SnsCredentials) ElementType() reflect.Type {
	return reflect.TypeOf((**SnsCredentials)(nil)).Elem()
}

func (i *SnsCredentials) ToSnsCredentialsOutput() SnsCredentialsOutput {
	return i.ToSnsCredentialsOutputWithContext(context.Background())
}

func (i *SnsCredentials) ToSnsCredentialsOutputWithContext(ctx context.Context) SnsCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnsCredentialsOutput)
}

// SnsCredentialsArrayInput is an input type that accepts SnsCredentialsArray and SnsCredentialsArrayOutput values.
// You can construct a concrete instance of `SnsCredentialsArrayInput` via:
//
//	SnsCredentialsArray{ SnsCredentialsArgs{...} }
type SnsCredentialsArrayInput interface {
	pulumi.Input

	ToSnsCredentialsArrayOutput() SnsCredentialsArrayOutput
	ToSnsCredentialsArrayOutputWithContext(context.Context) SnsCredentialsArrayOutput
}

type SnsCredentialsArray []SnsCredentialsInput

func (SnsCredentialsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnsCredentials)(nil)).Elem()
}

func (i SnsCredentialsArray) ToSnsCredentialsArrayOutput() SnsCredentialsArrayOutput {
	return i.ToSnsCredentialsArrayOutputWithContext(context.Background())
}

func (i SnsCredentialsArray) ToSnsCredentialsArrayOutputWithContext(ctx context.Context) SnsCredentialsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnsCredentialsArrayOutput)
}

// SnsCredentialsMapInput is an input type that accepts SnsCredentialsMap and SnsCredentialsMapOutput values.
// You can construct a concrete instance of `SnsCredentialsMapInput` via:
//
//	SnsCredentialsMap{ "key": SnsCredentialsArgs{...} }
type SnsCredentialsMapInput interface {
	pulumi.Input

	ToSnsCredentialsMapOutput() SnsCredentialsMapOutput
	ToSnsCredentialsMapOutputWithContext(context.Context) SnsCredentialsMapOutput
}

type SnsCredentialsMap map[string]SnsCredentialsInput

func (SnsCredentialsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnsCredentials)(nil)).Elem()
}

func (i SnsCredentialsMap) ToSnsCredentialsMapOutput() SnsCredentialsMapOutput {
	return i.ToSnsCredentialsMapOutputWithContext(context.Background())
}

func (i SnsCredentialsMap) ToSnsCredentialsMapOutputWithContext(ctx context.Context) SnsCredentialsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnsCredentialsMapOutput)
}

type SnsCredentialsOutput struct{ *pulumi.OutputState }

func (SnsCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnsCredentials)(nil)).Elem()
}

func (o SnsCredentialsOutput) ToSnsCredentialsOutput() SnsCredentialsOutput {
	return o
}

func (o SnsCredentialsOutput) ToSnsCredentialsOutputWithContext(ctx context.Context) SnsCredentialsOutput {
	return o
}

// The ID of the key.
func (o SnsCredentialsOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SnsCredentials) pulumi.StringOutput { return v.AccessKey }).(pulumi.StringOutput)
}

// The unique name of the SNS credentials.
func (o SnsCredentialsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SnsCredentials) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// . List of permissions associated with these credentials.
func (o SnsCredentialsOutput) Permissions() SnsCredentialsPermissionsOutput {
	return o.ApplyT(func(v *SnsCredentials) SnsCredentialsPermissionsOutput { return v.Permissions }).(SnsCredentialsPermissionsOutput)
}

// `projectId`) The ID of the Project in which SNS is enabled.
func (o SnsCredentialsOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SnsCredentials) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// `region`). The region in which SNS is enabled.
func (o SnsCredentialsOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SnsCredentials) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The secret value of the key.
func (o SnsCredentialsOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SnsCredentials) pulumi.StringOutput { return v.SecretKey }).(pulumi.StringOutput)
}

type SnsCredentialsArrayOutput struct{ *pulumi.OutputState }

func (SnsCredentialsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnsCredentials)(nil)).Elem()
}

func (o SnsCredentialsArrayOutput) ToSnsCredentialsArrayOutput() SnsCredentialsArrayOutput {
	return o
}

func (o SnsCredentialsArrayOutput) ToSnsCredentialsArrayOutputWithContext(ctx context.Context) SnsCredentialsArrayOutput {
	return o
}

func (o SnsCredentialsArrayOutput) Index(i pulumi.IntInput) SnsCredentialsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SnsCredentials {
		return vs[0].([]*SnsCredentials)[vs[1].(int)]
	}).(SnsCredentialsOutput)
}

type SnsCredentialsMapOutput struct{ *pulumi.OutputState }

func (SnsCredentialsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnsCredentials)(nil)).Elem()
}

func (o SnsCredentialsMapOutput) ToSnsCredentialsMapOutput() SnsCredentialsMapOutput {
	return o
}

func (o SnsCredentialsMapOutput) ToSnsCredentialsMapOutputWithContext(ctx context.Context) SnsCredentialsMapOutput {
	return o
}

func (o SnsCredentialsMapOutput) MapIndex(k pulumi.StringInput) SnsCredentialsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SnsCredentials {
		return vs[0].(map[string]*SnsCredentials)[vs[1].(string)]
	}).(SnsCredentialsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnsCredentialsInput)(nil)).Elem(), &SnsCredentials{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnsCredentialsArrayInput)(nil)).Elem(), SnsCredentialsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnsCredentialsMapInput)(nil)).Elem(), SnsCredentialsMap{})
	pulumi.RegisterOutputType(SnsCredentialsOutput{})
	pulumi.RegisterOutputType(SnsCredentialsArrayOutput{})
	pulumi.RegisterOutputType(SnsCredentialsMapOutput{})
}
