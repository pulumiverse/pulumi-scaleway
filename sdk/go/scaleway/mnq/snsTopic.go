// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mnq

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Manage Scaleway Messaging and queuing SNS topics.
// For further information, see
// our [main documentation](https://www.scaleway.com/en/docs/messaging/how-to/create-manage-topics/).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/mnq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := mnq.NewSns(ctx, "main", nil)
//			if err != nil {
//				return err
//			}
//			mainSnsCredentials, err := mnq.NewSnsCredentials(ctx, "main", &mnq.SnsCredentialsArgs{
//				ProjectId: main.ProjectId,
//				Permissions: &mnq.SnsCredentialsPermissionsArgs{
//					CanManage: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mnq.NewSnsTopic(ctx, "topic", &mnq.SnsTopicArgs{
//				ProjectId: main.ProjectId,
//				Name:      pulumi.String("my-topic"),
//				AccessKey: mainSnsCredentials.AccessKey,
//				SecretKey: mainSnsCredentials.SecretKey,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SNS topics can be imported using `{region}/{project-id}/{topic-name}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:mnq/snsTopic:SnsTopic main fr-par/11111111111111111111111111111111/my-topic
// ```
type SnsTopic struct {
	pulumi.CustomResourceState

	// The access key of the SNS credentials.
	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// The ARN of the topic
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Specifies whether to enable content-based deduplication.
	ContentBasedDeduplication pulumi.BoolOutput `pulumi:"contentBasedDeduplication"`
	// Whether the topic is a FIFO topic. If true, the topic name must end with .fifo.
	FifoTopic pulumi.BoolOutput `pulumi:"fifoTopic"`
	// The unique name of the SNS topic. Either `name` or `namePrefix` is required. Conflicts with `namePrefix`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumi.StringOutput `pulumi:"namePrefix"`
	// Owner of the SNS topic, should have format 'project-${project_id}'
	Owner pulumi.StringOutput `pulumi:"owner"`
	// `projectId`) The ID of the Project in which SNS is enabled.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// `region`). The region
	// in which SNS is enabled.
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// The secret key of the SNS credentials.
	SecretKey pulumi.StringOutput `pulumi:"secretKey"`
	// The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
	SnsEndpoint pulumi.StringPtrOutput `pulumi:"snsEndpoint"`
}

// NewSnsTopic registers a new resource with the given unique name, arguments, and options.
func NewSnsTopic(ctx *pulumi.Context,
	name string, args *SnsTopicArgs, opts ...pulumi.ResourceOption) (*SnsTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessKey == nil {
		return nil, errors.New("invalid value for required argument 'AccessKey'")
	}
	if args.SecretKey == nil {
		return nil, errors.New("invalid value for required argument 'SecretKey'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/mnqSnsTopic:MnqSnsTopic"),
		},
	})
	opts = append(opts, aliases)
	if args.AccessKey != nil {
		args.AccessKey = pulumi.ToSecret(args.AccessKey).(pulumi.StringInput)
	}
	if args.SecretKey != nil {
		args.SecretKey = pulumi.ToSecret(args.SecretKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accessKey",
		"secretKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SnsTopic
	err := ctx.RegisterResource("scaleway:mnq/snsTopic:SnsTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnsTopic gets an existing SnsTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnsTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnsTopicState, opts ...pulumi.ResourceOption) (*SnsTopic, error) {
	var resource SnsTopic
	err := ctx.ReadResource("scaleway:mnq/snsTopic:SnsTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnsTopic resources.
type snsTopicState struct {
	// The access key of the SNS credentials.
	AccessKey *string `pulumi:"accessKey"`
	// The ARN of the topic
	Arn *string `pulumi:"arn"`
	// Specifies whether to enable content-based deduplication.
	ContentBasedDeduplication *bool `pulumi:"contentBasedDeduplication"`
	// Whether the topic is a FIFO topic. If true, the topic name must end with .fifo.
	FifoTopic *bool `pulumi:"fifoTopic"`
	// The unique name of the SNS topic. Either `name` or `namePrefix` is required. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// Owner of the SNS topic, should have format 'project-${project_id}'
	Owner *string `pulumi:"owner"`
	// `projectId`) The ID of the Project in which SNS is enabled.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region
	// in which SNS is enabled.
	Region *string `pulumi:"region"`
	// The secret key of the SNS credentials.
	SecretKey *string `pulumi:"secretKey"`
	// The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
	SnsEndpoint *string `pulumi:"snsEndpoint"`
}

type SnsTopicState struct {
	// The access key of the SNS credentials.
	AccessKey pulumi.StringPtrInput
	// The ARN of the topic
	Arn pulumi.StringPtrInput
	// Specifies whether to enable content-based deduplication.
	ContentBasedDeduplication pulumi.BoolPtrInput
	// Whether the topic is a FIFO topic. If true, the topic name must end with .fifo.
	FifoTopic pulumi.BoolPtrInput
	// The unique name of the SNS topic. Either `name` or `namePrefix` is required. Conflicts with `namePrefix`.
	Name pulumi.StringPtrInput
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumi.StringPtrInput
	// Owner of the SNS topic, should have format 'project-${project_id}'
	Owner pulumi.StringPtrInput
	// `projectId`) The ID of the Project in which SNS is enabled.
	ProjectId pulumi.StringPtrInput
	// `region`). The region
	// in which SNS is enabled.
	Region pulumi.StringPtrInput
	// The secret key of the SNS credentials.
	SecretKey pulumi.StringPtrInput
	// The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
	SnsEndpoint pulumi.StringPtrInput
}

func (SnsTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*snsTopicState)(nil)).Elem()
}

type snsTopicArgs struct {
	// The access key of the SNS credentials.
	AccessKey string `pulumi:"accessKey"`
	// Specifies whether to enable content-based deduplication.
	ContentBasedDeduplication *bool `pulumi:"contentBasedDeduplication"`
	// Whether the topic is a FIFO topic. If true, the topic name must end with .fifo.
	FifoTopic *bool `pulumi:"fifoTopic"`
	// The unique name of the SNS topic. Either `name` or `namePrefix` is required. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// `projectId`) The ID of the Project in which SNS is enabled.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region
	// in which SNS is enabled.
	Region *string `pulumi:"region"`
	// The secret key of the SNS credentials.
	SecretKey string `pulumi:"secretKey"`
	// The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
	SnsEndpoint *string `pulumi:"snsEndpoint"`
}

// The set of arguments for constructing a SnsTopic resource.
type SnsTopicArgs struct {
	// The access key of the SNS credentials.
	AccessKey pulumi.StringInput
	// Specifies whether to enable content-based deduplication.
	ContentBasedDeduplication pulumi.BoolPtrInput
	// Whether the topic is a FIFO topic. If true, the topic name must end with .fifo.
	FifoTopic pulumi.BoolPtrInput
	// The unique name of the SNS topic. Either `name` or `namePrefix` is required. Conflicts with `namePrefix`.
	Name pulumi.StringPtrInput
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumi.StringPtrInput
	// `projectId`) The ID of the Project in which SNS is enabled.
	ProjectId pulumi.StringPtrInput
	// `region`). The region
	// in which SNS is enabled.
	Region pulumi.StringPtrInput
	// The secret key of the SNS credentials.
	SecretKey pulumi.StringInput
	// The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
	SnsEndpoint pulumi.StringPtrInput
}

func (SnsTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snsTopicArgs)(nil)).Elem()
}

type SnsTopicInput interface {
	pulumi.Input

	ToSnsTopicOutput() SnsTopicOutput
	ToSnsTopicOutputWithContext(ctx context.Context) SnsTopicOutput
}

func (*SnsTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**SnsTopic)(nil)).Elem()
}

func (i *SnsTopic) ToSnsTopicOutput() SnsTopicOutput {
	return i.ToSnsTopicOutputWithContext(context.Background())
}

func (i *SnsTopic) ToSnsTopicOutputWithContext(ctx context.Context) SnsTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnsTopicOutput)
}

// SnsTopicArrayInput is an input type that accepts SnsTopicArray and SnsTopicArrayOutput values.
// You can construct a concrete instance of `SnsTopicArrayInput` via:
//
//	SnsTopicArray{ SnsTopicArgs{...} }
type SnsTopicArrayInput interface {
	pulumi.Input

	ToSnsTopicArrayOutput() SnsTopicArrayOutput
	ToSnsTopicArrayOutputWithContext(context.Context) SnsTopicArrayOutput
}

type SnsTopicArray []SnsTopicInput

func (SnsTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnsTopic)(nil)).Elem()
}

func (i SnsTopicArray) ToSnsTopicArrayOutput() SnsTopicArrayOutput {
	return i.ToSnsTopicArrayOutputWithContext(context.Background())
}

func (i SnsTopicArray) ToSnsTopicArrayOutputWithContext(ctx context.Context) SnsTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnsTopicArrayOutput)
}

// SnsTopicMapInput is an input type that accepts SnsTopicMap and SnsTopicMapOutput values.
// You can construct a concrete instance of `SnsTopicMapInput` via:
//
//	SnsTopicMap{ "key": SnsTopicArgs{...} }
type SnsTopicMapInput interface {
	pulumi.Input

	ToSnsTopicMapOutput() SnsTopicMapOutput
	ToSnsTopicMapOutputWithContext(context.Context) SnsTopicMapOutput
}

type SnsTopicMap map[string]SnsTopicInput

func (SnsTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnsTopic)(nil)).Elem()
}

func (i SnsTopicMap) ToSnsTopicMapOutput() SnsTopicMapOutput {
	return i.ToSnsTopicMapOutputWithContext(context.Background())
}

func (i SnsTopicMap) ToSnsTopicMapOutputWithContext(ctx context.Context) SnsTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnsTopicMapOutput)
}

type SnsTopicOutput struct{ *pulumi.OutputState }

func (SnsTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnsTopic)(nil)).Elem()
}

func (o SnsTopicOutput) ToSnsTopicOutput() SnsTopicOutput {
	return o
}

func (o SnsTopicOutput) ToSnsTopicOutputWithContext(ctx context.Context) SnsTopicOutput {
	return o
}

// The access key of the SNS credentials.
func (o SnsTopicOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SnsTopic) pulumi.StringOutput { return v.AccessKey }).(pulumi.StringOutput)
}

// The ARN of the topic
func (o SnsTopicOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *SnsTopic) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Specifies whether to enable content-based deduplication.
func (o SnsTopicOutput) ContentBasedDeduplication() pulumi.BoolOutput {
	return o.ApplyT(func(v *SnsTopic) pulumi.BoolOutput { return v.ContentBasedDeduplication }).(pulumi.BoolOutput)
}

// Whether the topic is a FIFO topic. If true, the topic name must end with .fifo.
func (o SnsTopicOutput) FifoTopic() pulumi.BoolOutput {
	return o.ApplyT(func(v *SnsTopic) pulumi.BoolOutput { return v.FifoTopic }).(pulumi.BoolOutput)
}

// The unique name of the SNS topic. Either `name` or `namePrefix` is required. Conflicts with `namePrefix`.
func (o SnsTopicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SnsTopic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
func (o SnsTopicOutput) NamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *SnsTopic) pulumi.StringOutput { return v.NamePrefix }).(pulumi.StringOutput)
}

// Owner of the SNS topic, should have format 'project-${project_id}'
func (o SnsTopicOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *SnsTopic) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// `projectId`) The ID of the Project in which SNS is enabled.
func (o SnsTopicOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SnsTopic) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// `region`). The region
// in which SNS is enabled.
func (o SnsTopicOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnsTopic) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// The secret key of the SNS credentials.
func (o SnsTopicOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SnsTopic) pulumi.StringOutput { return v.SecretKey }).(pulumi.StringOutput)
}

// The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
func (o SnsTopicOutput) SnsEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnsTopic) pulumi.StringPtrOutput { return v.SnsEndpoint }).(pulumi.StringPtrOutput)
}

type SnsTopicArrayOutput struct{ *pulumi.OutputState }

func (SnsTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnsTopic)(nil)).Elem()
}

func (o SnsTopicArrayOutput) ToSnsTopicArrayOutput() SnsTopicArrayOutput {
	return o
}

func (o SnsTopicArrayOutput) ToSnsTopicArrayOutputWithContext(ctx context.Context) SnsTopicArrayOutput {
	return o
}

func (o SnsTopicArrayOutput) Index(i pulumi.IntInput) SnsTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SnsTopic {
		return vs[0].([]*SnsTopic)[vs[1].(int)]
	}).(SnsTopicOutput)
}

type SnsTopicMapOutput struct{ *pulumi.OutputState }

func (SnsTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnsTopic)(nil)).Elem()
}

func (o SnsTopicMapOutput) ToSnsTopicMapOutput() SnsTopicMapOutput {
	return o
}

func (o SnsTopicMapOutput) ToSnsTopicMapOutputWithContext(ctx context.Context) SnsTopicMapOutput {
	return o
}

func (o SnsTopicMapOutput) MapIndex(k pulumi.StringInput) SnsTopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SnsTopic {
		return vs[0].(map[string]*SnsTopic)[vs[1].(string)]
	}).(SnsTopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnsTopicInput)(nil)).Elem(), &SnsTopic{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnsTopicArrayInput)(nil)).Elem(), SnsTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnsTopicMapInput)(nil)).Elem(), SnsTopicMap{})
	pulumi.RegisterOutputType(SnsTopicOutput{})
	pulumi.RegisterOutputType(SnsTopicArrayOutput{})
	pulumi.RegisterOutputType(SnsTopicMapOutput{})
}
