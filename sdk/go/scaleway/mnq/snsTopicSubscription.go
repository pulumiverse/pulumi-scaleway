// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mnq

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Manages Scaleway Messaging and Queuing SNS topic subscriptions.
// For further information, see
// our [main documentation](https://www.scaleway.com/en/docs/messaging/reference-content/sns-overview/).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/mnq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// For default project in default region
//			main, err := mnq.NewSns(ctx, "main", nil)
//			if err != nil {
//				return err
//			}
//			mainSnsCredentials, err := mnq.NewSnsCredentials(ctx, "main", &mnq.SnsCredentialsArgs{
//				ProjectId: main.ProjectId,
//				Permissions: &mnq.SnsCredentialsPermissionsArgs{
//					CanManage:  pulumi.Bool(true),
//					CanPublish: pulumi.Bool(true),
//					CanReceive: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			topic, err := mnq.NewSnsTopic(ctx, "topic", &mnq.SnsTopicArgs{
//				ProjectId: main.ProjectId,
//				Name:      pulumi.String("my-topic"),
//				AccessKey: mainSnsCredentials.AccessKey,
//				SecretKey: mainSnsCredentials.SecretKey,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mnq.NewSnsTopicSubscription(ctx, "main", &mnq.SnsTopicSubscriptionArgs{
//				ProjectId: main.ProjectId,
//				AccessKey: mainSnsCredentials.AccessKey,
//				SecretKey: mainSnsCredentials.SecretKey,
//				TopicId:   topic.ID(),
//				Protocol:  pulumi.String("http"),
//				Endpoint:  pulumi.String("http://example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SNS topic subscriptions can be imported using `{region}/{project-id}/{topic-name}/{subscription-id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:mnq/snsTopicSubscription:SnsTopicSubscription main fr-par/11111111111111111111111111111111/my-topic/11111111111111111111111111111111
// ```
type SnsTopicSubscription struct {
	pulumi.CustomResourceState

	// The access key of the SNS credentials.
	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// The ARN of the topic subscription
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Endpoint of the subscription
	Endpoint pulumi.StringPtrOutput `pulumi:"endpoint"`
	// `projectId`) The ID of the Project in which SNS is enabled.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Protocol of the SNS topic subscription.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Activate JSON redrive policy.
	RedrivePolicy pulumi.BoolOutput `pulumi:"redrivePolicy"`
	// `region`). The region
	// in which SNS is enabled.
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// The secret key of the SNS credentials.
	SecretKey pulumi.StringOutput `pulumi:"secretKey"`
	// The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
	SnsEndpoint pulumi.StringPtrOutput `pulumi:"snsEndpoint"`
	// The ARN of the topic. Either `topicId` or `topicArn` is required.
	TopicArn pulumi.StringPtrOutput `pulumi:"topicArn"`
	// The ID of the topic. Either `topicId` or `topicArn` is required. Conflicts with `topicArn`.
	TopicId pulumi.StringPtrOutput `pulumi:"topicId"`
}

// NewSnsTopicSubscription registers a new resource with the given unique name, arguments, and options.
func NewSnsTopicSubscription(ctx *pulumi.Context,
	name string, args *SnsTopicSubscriptionArgs, opts ...pulumi.ResourceOption) (*SnsTopicSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessKey == nil {
		return nil, errors.New("invalid value for required argument 'AccessKey'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.SecretKey == nil {
		return nil, errors.New("invalid value for required argument 'SecretKey'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/mnqSnsTopicSubscription:MnqSnsTopicSubscription"),
		},
	})
	opts = append(opts, aliases)
	if args.AccessKey != nil {
		args.AccessKey = pulumi.ToSecret(args.AccessKey).(pulumi.StringInput)
	}
	if args.SecretKey != nil {
		args.SecretKey = pulumi.ToSecret(args.SecretKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accessKey",
		"secretKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SnsTopicSubscription
	err := ctx.RegisterResource("scaleway:mnq/snsTopicSubscription:SnsTopicSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnsTopicSubscription gets an existing SnsTopicSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnsTopicSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnsTopicSubscriptionState, opts ...pulumi.ResourceOption) (*SnsTopicSubscription, error) {
	var resource SnsTopicSubscription
	err := ctx.ReadResource("scaleway:mnq/snsTopicSubscription:SnsTopicSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnsTopicSubscription resources.
type snsTopicSubscriptionState struct {
	// The access key of the SNS credentials.
	AccessKey *string `pulumi:"accessKey"`
	// The ARN of the topic subscription
	Arn *string `pulumi:"arn"`
	// Endpoint of the subscription
	Endpoint *string `pulumi:"endpoint"`
	// `projectId`) The ID of the Project in which SNS is enabled.
	ProjectId *string `pulumi:"projectId"`
	// Protocol of the SNS topic subscription.
	Protocol *string `pulumi:"protocol"`
	// Activate JSON redrive policy.
	RedrivePolicy *bool `pulumi:"redrivePolicy"`
	// `region`). The region
	// in which SNS is enabled.
	Region *string `pulumi:"region"`
	// The secret key of the SNS credentials.
	SecretKey *string `pulumi:"secretKey"`
	// The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
	SnsEndpoint *string `pulumi:"snsEndpoint"`
	// The ARN of the topic. Either `topicId` or `topicArn` is required.
	TopicArn *string `pulumi:"topicArn"`
	// The ID of the topic. Either `topicId` or `topicArn` is required. Conflicts with `topicArn`.
	TopicId *string `pulumi:"topicId"`
}

type SnsTopicSubscriptionState struct {
	// The access key of the SNS credentials.
	AccessKey pulumi.StringPtrInput
	// The ARN of the topic subscription
	Arn pulumi.StringPtrInput
	// Endpoint of the subscription
	Endpoint pulumi.StringPtrInput
	// `projectId`) The ID of the Project in which SNS is enabled.
	ProjectId pulumi.StringPtrInput
	// Protocol of the SNS topic subscription.
	Protocol pulumi.StringPtrInput
	// Activate JSON redrive policy.
	RedrivePolicy pulumi.BoolPtrInput
	// `region`). The region
	// in which SNS is enabled.
	Region pulumi.StringPtrInput
	// The secret key of the SNS credentials.
	SecretKey pulumi.StringPtrInput
	// The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
	SnsEndpoint pulumi.StringPtrInput
	// The ARN of the topic. Either `topicId` or `topicArn` is required.
	TopicArn pulumi.StringPtrInput
	// The ID of the topic. Either `topicId` or `topicArn` is required. Conflicts with `topicArn`.
	TopicId pulumi.StringPtrInput
}

func (SnsTopicSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*snsTopicSubscriptionState)(nil)).Elem()
}

type snsTopicSubscriptionArgs struct {
	// The access key of the SNS credentials.
	AccessKey string `pulumi:"accessKey"`
	// Endpoint of the subscription
	Endpoint *string `pulumi:"endpoint"`
	// `projectId`) The ID of the Project in which SNS is enabled.
	ProjectId *string `pulumi:"projectId"`
	// Protocol of the SNS topic subscription.
	Protocol string `pulumi:"protocol"`
	// Activate JSON redrive policy.
	RedrivePolicy *bool `pulumi:"redrivePolicy"`
	// `region`). The region
	// in which SNS is enabled.
	Region *string `pulumi:"region"`
	// The secret key of the SNS credentials.
	SecretKey string `pulumi:"secretKey"`
	// The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
	SnsEndpoint *string `pulumi:"snsEndpoint"`
	// The ARN of the topic. Either `topicId` or `topicArn` is required.
	TopicArn *string `pulumi:"topicArn"`
	// The ID of the topic. Either `topicId` or `topicArn` is required. Conflicts with `topicArn`.
	TopicId *string `pulumi:"topicId"`
}

// The set of arguments for constructing a SnsTopicSubscription resource.
type SnsTopicSubscriptionArgs struct {
	// The access key of the SNS credentials.
	AccessKey pulumi.StringInput
	// Endpoint of the subscription
	Endpoint pulumi.StringPtrInput
	// `projectId`) The ID of the Project in which SNS is enabled.
	ProjectId pulumi.StringPtrInput
	// Protocol of the SNS topic subscription.
	Protocol pulumi.StringInput
	// Activate JSON redrive policy.
	RedrivePolicy pulumi.BoolPtrInput
	// `region`). The region
	// in which SNS is enabled.
	Region pulumi.StringPtrInput
	// The secret key of the SNS credentials.
	SecretKey pulumi.StringInput
	// The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
	SnsEndpoint pulumi.StringPtrInput
	// The ARN of the topic. Either `topicId` or `topicArn` is required.
	TopicArn pulumi.StringPtrInput
	// The ID of the topic. Either `topicId` or `topicArn` is required. Conflicts with `topicArn`.
	TopicId pulumi.StringPtrInput
}

func (SnsTopicSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snsTopicSubscriptionArgs)(nil)).Elem()
}

type SnsTopicSubscriptionInput interface {
	pulumi.Input

	ToSnsTopicSubscriptionOutput() SnsTopicSubscriptionOutput
	ToSnsTopicSubscriptionOutputWithContext(ctx context.Context) SnsTopicSubscriptionOutput
}

func (*SnsTopicSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**SnsTopicSubscription)(nil)).Elem()
}

func (i *SnsTopicSubscription) ToSnsTopicSubscriptionOutput() SnsTopicSubscriptionOutput {
	return i.ToSnsTopicSubscriptionOutputWithContext(context.Background())
}

func (i *SnsTopicSubscription) ToSnsTopicSubscriptionOutputWithContext(ctx context.Context) SnsTopicSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnsTopicSubscriptionOutput)
}

// SnsTopicSubscriptionArrayInput is an input type that accepts SnsTopicSubscriptionArray and SnsTopicSubscriptionArrayOutput values.
// You can construct a concrete instance of `SnsTopicSubscriptionArrayInput` via:
//
//	SnsTopicSubscriptionArray{ SnsTopicSubscriptionArgs{...} }
type SnsTopicSubscriptionArrayInput interface {
	pulumi.Input

	ToSnsTopicSubscriptionArrayOutput() SnsTopicSubscriptionArrayOutput
	ToSnsTopicSubscriptionArrayOutputWithContext(context.Context) SnsTopicSubscriptionArrayOutput
}

type SnsTopicSubscriptionArray []SnsTopicSubscriptionInput

func (SnsTopicSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnsTopicSubscription)(nil)).Elem()
}

func (i SnsTopicSubscriptionArray) ToSnsTopicSubscriptionArrayOutput() SnsTopicSubscriptionArrayOutput {
	return i.ToSnsTopicSubscriptionArrayOutputWithContext(context.Background())
}

func (i SnsTopicSubscriptionArray) ToSnsTopicSubscriptionArrayOutputWithContext(ctx context.Context) SnsTopicSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnsTopicSubscriptionArrayOutput)
}

// SnsTopicSubscriptionMapInput is an input type that accepts SnsTopicSubscriptionMap and SnsTopicSubscriptionMapOutput values.
// You can construct a concrete instance of `SnsTopicSubscriptionMapInput` via:
//
//	SnsTopicSubscriptionMap{ "key": SnsTopicSubscriptionArgs{...} }
type SnsTopicSubscriptionMapInput interface {
	pulumi.Input

	ToSnsTopicSubscriptionMapOutput() SnsTopicSubscriptionMapOutput
	ToSnsTopicSubscriptionMapOutputWithContext(context.Context) SnsTopicSubscriptionMapOutput
}

type SnsTopicSubscriptionMap map[string]SnsTopicSubscriptionInput

func (SnsTopicSubscriptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnsTopicSubscription)(nil)).Elem()
}

func (i SnsTopicSubscriptionMap) ToSnsTopicSubscriptionMapOutput() SnsTopicSubscriptionMapOutput {
	return i.ToSnsTopicSubscriptionMapOutputWithContext(context.Background())
}

func (i SnsTopicSubscriptionMap) ToSnsTopicSubscriptionMapOutputWithContext(ctx context.Context) SnsTopicSubscriptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnsTopicSubscriptionMapOutput)
}

type SnsTopicSubscriptionOutput struct{ *pulumi.OutputState }

func (SnsTopicSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnsTopicSubscription)(nil)).Elem()
}

func (o SnsTopicSubscriptionOutput) ToSnsTopicSubscriptionOutput() SnsTopicSubscriptionOutput {
	return o
}

func (o SnsTopicSubscriptionOutput) ToSnsTopicSubscriptionOutputWithContext(ctx context.Context) SnsTopicSubscriptionOutput {
	return o
}

// The access key of the SNS credentials.
func (o SnsTopicSubscriptionOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SnsTopicSubscription) pulumi.StringOutput { return v.AccessKey }).(pulumi.StringOutput)
}

// The ARN of the topic subscription
func (o SnsTopicSubscriptionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *SnsTopicSubscription) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Endpoint of the subscription
func (o SnsTopicSubscriptionOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnsTopicSubscription) pulumi.StringPtrOutput { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// `projectId`) The ID of the Project in which SNS is enabled.
func (o SnsTopicSubscriptionOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SnsTopicSubscription) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Protocol of the SNS topic subscription.
func (o SnsTopicSubscriptionOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *SnsTopicSubscription) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Activate JSON redrive policy.
func (o SnsTopicSubscriptionOutput) RedrivePolicy() pulumi.BoolOutput {
	return o.ApplyT(func(v *SnsTopicSubscription) pulumi.BoolOutput { return v.RedrivePolicy }).(pulumi.BoolOutput)
}

// `region`). The region
// in which SNS is enabled.
func (o SnsTopicSubscriptionOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnsTopicSubscription) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// The secret key of the SNS credentials.
func (o SnsTopicSubscriptionOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SnsTopicSubscription) pulumi.StringOutput { return v.SecretKey }).(pulumi.StringOutput)
}

// The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
func (o SnsTopicSubscriptionOutput) SnsEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnsTopicSubscription) pulumi.StringPtrOutput { return v.SnsEndpoint }).(pulumi.StringPtrOutput)
}

// The ARN of the topic. Either `topicId` or `topicArn` is required.
func (o SnsTopicSubscriptionOutput) TopicArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnsTopicSubscription) pulumi.StringPtrOutput { return v.TopicArn }).(pulumi.StringPtrOutput)
}

// The ID of the topic. Either `topicId` or `topicArn` is required. Conflicts with `topicArn`.
func (o SnsTopicSubscriptionOutput) TopicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnsTopicSubscription) pulumi.StringPtrOutput { return v.TopicId }).(pulumi.StringPtrOutput)
}

type SnsTopicSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (SnsTopicSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnsTopicSubscription)(nil)).Elem()
}

func (o SnsTopicSubscriptionArrayOutput) ToSnsTopicSubscriptionArrayOutput() SnsTopicSubscriptionArrayOutput {
	return o
}

func (o SnsTopicSubscriptionArrayOutput) ToSnsTopicSubscriptionArrayOutputWithContext(ctx context.Context) SnsTopicSubscriptionArrayOutput {
	return o
}

func (o SnsTopicSubscriptionArrayOutput) Index(i pulumi.IntInput) SnsTopicSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SnsTopicSubscription {
		return vs[0].([]*SnsTopicSubscription)[vs[1].(int)]
	}).(SnsTopicSubscriptionOutput)
}

type SnsTopicSubscriptionMapOutput struct{ *pulumi.OutputState }

func (SnsTopicSubscriptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnsTopicSubscription)(nil)).Elem()
}

func (o SnsTopicSubscriptionMapOutput) ToSnsTopicSubscriptionMapOutput() SnsTopicSubscriptionMapOutput {
	return o
}

func (o SnsTopicSubscriptionMapOutput) ToSnsTopicSubscriptionMapOutputWithContext(ctx context.Context) SnsTopicSubscriptionMapOutput {
	return o
}

func (o SnsTopicSubscriptionMapOutput) MapIndex(k pulumi.StringInput) SnsTopicSubscriptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SnsTopicSubscription {
		return vs[0].(map[string]*SnsTopicSubscription)[vs[1].(string)]
	}).(SnsTopicSubscriptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnsTopicSubscriptionInput)(nil)).Elem(), &SnsTopicSubscription{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnsTopicSubscriptionArrayInput)(nil)).Elem(), SnsTopicSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnsTopicSubscriptionMapInput)(nil)).Elem(), SnsTopicSubscriptionMap{})
	pulumi.RegisterOutputType(SnsTopicSubscriptionOutput{})
	pulumi.RegisterOutputType(SnsTopicSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(SnsTopicSubscriptionMapOutput{})
}
