// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mnq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Activate Scaleway Messaging and Queuing SQS in a Project.
// For further information, see
// our [main documentation](https://www.scaleway.com/en/docs/messaging/reference-content/sqs-overview/).
//
// ## Example Usage
//
// ### Basic
//
// # Activate SQS in the default Project
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/mnq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mnq.NewSqs(ctx, "main", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// # Activate SQS for a specific project
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/account"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/mnq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := account.LookupProject(ctx, &account.LookupProjectArgs{
//				Name: pulumi.StringRef("default"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = mnq.NewSqs(ctx, "for_project", &mnq.SqsArgs{
//				ProjectId: pulumi.String(project.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SQS status can be imported using the `{region}/{project_id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:mnq/sqs:Sqs main fr-par/11111111111111111111111111111111
// ```
type Sqs struct {
	pulumi.CustomResourceState

	// The endpoint of the SQS service for this Project.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// `projectId`) The ID of the Project in which SQS will be enabled.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// `region`). The region
	// in which SQS will be enabled.
	Region pulumi.StringPtrOutput `pulumi:"region"`
}

// NewSqs registers a new resource with the given unique name, arguments, and options.
func NewSqs(ctx *pulumi.Context,
	name string, args *SqsArgs, opts ...pulumi.ResourceOption) (*Sqs, error) {
	if args == nil {
		args = &SqsArgs{}
	}

	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/mnqSqs:MnqSqs"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Sqs
	err := ctx.RegisterResource("scaleway:mnq/sqs:Sqs", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqs gets an existing Sqs resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqs(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqsState, opts ...pulumi.ResourceOption) (*Sqs, error) {
	var resource Sqs
	err := ctx.ReadResource("scaleway:mnq/sqs:Sqs", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Sqs resources.
type sqsState struct {
	// The endpoint of the SQS service for this Project.
	Endpoint *string `pulumi:"endpoint"`
	// `projectId`) The ID of the Project in which SQS will be enabled.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region
	// in which SQS will be enabled.
	Region *string `pulumi:"region"`
}

type SqsState struct {
	// The endpoint of the SQS service for this Project.
	Endpoint pulumi.StringPtrInput
	// `projectId`) The ID of the Project in which SQS will be enabled.
	ProjectId pulumi.StringPtrInput
	// `region`). The region
	// in which SQS will be enabled.
	Region pulumi.StringPtrInput
}

func (SqsState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqsState)(nil)).Elem()
}

type sqsArgs struct {
	// `projectId`) The ID of the Project in which SQS will be enabled.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region
	// in which SQS will be enabled.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a Sqs resource.
type SqsArgs struct {
	// `projectId`) The ID of the Project in which SQS will be enabled.
	ProjectId pulumi.StringPtrInput
	// `region`). The region
	// in which SQS will be enabled.
	Region pulumi.StringPtrInput
}

func (SqsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqsArgs)(nil)).Elem()
}

type SqsInput interface {
	pulumi.Input

	ToSqsOutput() SqsOutput
	ToSqsOutputWithContext(ctx context.Context) SqsOutput
}

func (*Sqs) ElementType() reflect.Type {
	return reflect.TypeOf((**Sqs)(nil)).Elem()
}

func (i *Sqs) ToSqsOutput() SqsOutput {
	return i.ToSqsOutputWithContext(context.Background())
}

func (i *Sqs) ToSqsOutputWithContext(ctx context.Context) SqsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqsOutput)
}

// SqsArrayInput is an input type that accepts SqsArray and SqsArrayOutput values.
// You can construct a concrete instance of `SqsArrayInput` via:
//
//	SqsArray{ SqsArgs{...} }
type SqsArrayInput interface {
	pulumi.Input

	ToSqsArrayOutput() SqsArrayOutput
	ToSqsArrayOutputWithContext(context.Context) SqsArrayOutput
}

type SqsArray []SqsInput

func (SqsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sqs)(nil)).Elem()
}

func (i SqsArray) ToSqsArrayOutput() SqsArrayOutput {
	return i.ToSqsArrayOutputWithContext(context.Background())
}

func (i SqsArray) ToSqsArrayOutputWithContext(ctx context.Context) SqsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqsArrayOutput)
}

// SqsMapInput is an input type that accepts SqsMap and SqsMapOutput values.
// You can construct a concrete instance of `SqsMapInput` via:
//
//	SqsMap{ "key": SqsArgs{...} }
type SqsMapInput interface {
	pulumi.Input

	ToSqsMapOutput() SqsMapOutput
	ToSqsMapOutputWithContext(context.Context) SqsMapOutput
}

type SqsMap map[string]SqsInput

func (SqsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sqs)(nil)).Elem()
}

func (i SqsMap) ToSqsMapOutput() SqsMapOutput {
	return i.ToSqsMapOutputWithContext(context.Background())
}

func (i SqsMap) ToSqsMapOutputWithContext(ctx context.Context) SqsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqsMapOutput)
}

type SqsOutput struct{ *pulumi.OutputState }

func (SqsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sqs)(nil)).Elem()
}

func (o SqsOutput) ToSqsOutput() SqsOutput {
	return o
}

func (o SqsOutput) ToSqsOutputWithContext(ctx context.Context) SqsOutput {
	return o
}

// The endpoint of the SQS service for this Project.
func (o SqsOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Sqs) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// `projectId`) The ID of the Project in which SQS will be enabled.
func (o SqsOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Sqs) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// `region`). The region
// in which SQS will be enabled.
func (o SqsOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sqs) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

type SqsArrayOutput struct{ *pulumi.OutputState }

func (SqsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sqs)(nil)).Elem()
}

func (o SqsArrayOutput) ToSqsArrayOutput() SqsArrayOutput {
	return o
}

func (o SqsArrayOutput) ToSqsArrayOutputWithContext(ctx context.Context) SqsArrayOutput {
	return o
}

func (o SqsArrayOutput) Index(i pulumi.IntInput) SqsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Sqs {
		return vs[0].([]*Sqs)[vs[1].(int)]
	}).(SqsOutput)
}

type SqsMapOutput struct{ *pulumi.OutputState }

func (SqsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sqs)(nil)).Elem()
}

func (o SqsMapOutput) ToSqsMapOutput() SqsMapOutput {
	return o
}

func (o SqsMapOutput) ToSqsMapOutputWithContext(ctx context.Context) SqsMapOutput {
	return o
}

func (o SqsMapOutput) MapIndex(k pulumi.StringInput) SqsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Sqs {
		return vs[0].(map[string]*Sqs)[vs[1].(string)]
	}).(SqsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SqsInput)(nil)).Elem(), &Sqs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqsArrayInput)(nil)).Elem(), SqsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqsMapInput)(nil)).Elem(), SqsMap{})
	pulumi.RegisterOutputType(SqsOutput{})
	pulumi.RegisterOutputType(SqsArrayOutput{})
	pulumi.RegisterOutputType(SqsMapOutput{})
}
