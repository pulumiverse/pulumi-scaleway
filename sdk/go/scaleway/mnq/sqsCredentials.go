// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mnq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Messaging and Queuing SQS credentials.
// For further information, see
// our [main documentation](https://www.scaleway.com/en/docs/messaging/reference-content/sqs-overview/)
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/mnq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := mnq.NewSqs(ctx, "main", nil)
//			if err != nil {
//				return err
//			}
//			_, err = mnq.NewSqsCredentials(ctx, "main", &mnq.SqsCredentialsArgs{
//				ProjectId: main.ProjectId,
//				Name:      pulumi.String("sqs-credentials"),
//				Permissions: &mnq.SqsCredentialsPermissionsArgs{
//					CanManage:  pulumi.Bool(false),
//					CanReceive: pulumi.Bool(true),
//					CanPublish: pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SQS credentials can be imported using `{region}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:mnq/sqsCredentials:SqsCredentials main fr-par/11111111111111111111111111111111
// ```
type SqsCredentials struct {
	pulumi.CustomResourceState

	// The ID of the key.
	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// The unique name of the SQS credentials.
	Name pulumi.StringOutput `pulumi:"name"`
	// . List of permissions associated with these credentials. Only one of the following permissions may be set:
	Permissions SqsCredentialsPermissionsOutput `pulumi:"permissions"`
	// `projectId`) The ID of the Project in which SQS is enabled.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// `region`). The region in which SQS is enabled.
	Region pulumi.StringOutput `pulumi:"region"`
	// The secret value of the key.
	SecretKey pulumi.StringOutput `pulumi:"secretKey"`
}

// NewSqsCredentials registers a new resource with the given unique name, arguments, and options.
func NewSqsCredentials(ctx *pulumi.Context,
	name string, args *SqsCredentialsArgs, opts ...pulumi.ResourceOption) (*SqsCredentials, error) {
	if args == nil {
		args = &SqsCredentialsArgs{}
	}

	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/mnqSqsCredentials:MnqSqsCredentials"),
		},
	})
	opts = append(opts, aliases)
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accessKey",
		"secretKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SqsCredentials
	err := ctx.RegisterResource("scaleway:mnq/sqsCredentials:SqsCredentials", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqsCredentials gets an existing SqsCredentials resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqsCredentials(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqsCredentialsState, opts ...pulumi.ResourceOption) (*SqsCredentials, error) {
	var resource SqsCredentials
	err := ctx.ReadResource("scaleway:mnq/sqsCredentials:SqsCredentials", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqsCredentials resources.
type sqsCredentialsState struct {
	// The ID of the key.
	AccessKey *string `pulumi:"accessKey"`
	// The unique name of the SQS credentials.
	Name *string `pulumi:"name"`
	// . List of permissions associated with these credentials. Only one of the following permissions may be set:
	Permissions *SqsCredentialsPermissions `pulumi:"permissions"`
	// `projectId`) The ID of the Project in which SQS is enabled.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region in which SQS is enabled.
	Region *string `pulumi:"region"`
	// The secret value of the key.
	SecretKey *string `pulumi:"secretKey"`
}

type SqsCredentialsState struct {
	// The ID of the key.
	AccessKey pulumi.StringPtrInput
	// The unique name of the SQS credentials.
	Name pulumi.StringPtrInput
	// . List of permissions associated with these credentials. Only one of the following permissions may be set:
	Permissions SqsCredentialsPermissionsPtrInput
	// `projectId`) The ID of the Project in which SQS is enabled.
	ProjectId pulumi.StringPtrInput
	// `region`). The region in which SQS is enabled.
	Region pulumi.StringPtrInput
	// The secret value of the key.
	SecretKey pulumi.StringPtrInput
}

func (SqsCredentialsState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqsCredentialsState)(nil)).Elem()
}

type sqsCredentialsArgs struct {
	// The unique name of the SQS credentials.
	Name *string `pulumi:"name"`
	// . List of permissions associated with these credentials. Only one of the following permissions may be set:
	Permissions *SqsCredentialsPermissions `pulumi:"permissions"`
	// `projectId`) The ID of the Project in which SQS is enabled.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region in which SQS is enabled.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a SqsCredentials resource.
type SqsCredentialsArgs struct {
	// The unique name of the SQS credentials.
	Name pulumi.StringPtrInput
	// . List of permissions associated with these credentials. Only one of the following permissions may be set:
	Permissions SqsCredentialsPermissionsPtrInput
	// `projectId`) The ID of the Project in which SQS is enabled.
	ProjectId pulumi.StringPtrInput
	// `region`). The region in which SQS is enabled.
	Region pulumi.StringPtrInput
}

func (SqsCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqsCredentialsArgs)(nil)).Elem()
}

type SqsCredentialsInput interface {
	pulumi.Input

	ToSqsCredentialsOutput() SqsCredentialsOutput
	ToSqsCredentialsOutputWithContext(ctx context.Context) SqsCredentialsOutput
}

func (*SqsCredentials) ElementType() reflect.Type {
	return reflect.TypeOf((**SqsCredentials)(nil)).Elem()
}

func (i *SqsCredentials) ToSqsCredentialsOutput() SqsCredentialsOutput {
	return i.ToSqsCredentialsOutputWithContext(context.Background())
}

func (i *SqsCredentials) ToSqsCredentialsOutputWithContext(ctx context.Context) SqsCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqsCredentialsOutput)
}

// SqsCredentialsArrayInput is an input type that accepts SqsCredentialsArray and SqsCredentialsArrayOutput values.
// You can construct a concrete instance of `SqsCredentialsArrayInput` via:
//
//	SqsCredentialsArray{ SqsCredentialsArgs{...} }
type SqsCredentialsArrayInput interface {
	pulumi.Input

	ToSqsCredentialsArrayOutput() SqsCredentialsArrayOutput
	ToSqsCredentialsArrayOutputWithContext(context.Context) SqsCredentialsArrayOutput
}

type SqsCredentialsArray []SqsCredentialsInput

func (SqsCredentialsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqsCredentials)(nil)).Elem()
}

func (i SqsCredentialsArray) ToSqsCredentialsArrayOutput() SqsCredentialsArrayOutput {
	return i.ToSqsCredentialsArrayOutputWithContext(context.Background())
}

func (i SqsCredentialsArray) ToSqsCredentialsArrayOutputWithContext(ctx context.Context) SqsCredentialsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqsCredentialsArrayOutput)
}

// SqsCredentialsMapInput is an input type that accepts SqsCredentialsMap and SqsCredentialsMapOutput values.
// You can construct a concrete instance of `SqsCredentialsMapInput` via:
//
//	SqsCredentialsMap{ "key": SqsCredentialsArgs{...} }
type SqsCredentialsMapInput interface {
	pulumi.Input

	ToSqsCredentialsMapOutput() SqsCredentialsMapOutput
	ToSqsCredentialsMapOutputWithContext(context.Context) SqsCredentialsMapOutput
}

type SqsCredentialsMap map[string]SqsCredentialsInput

func (SqsCredentialsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqsCredentials)(nil)).Elem()
}

func (i SqsCredentialsMap) ToSqsCredentialsMapOutput() SqsCredentialsMapOutput {
	return i.ToSqsCredentialsMapOutputWithContext(context.Background())
}

func (i SqsCredentialsMap) ToSqsCredentialsMapOutputWithContext(ctx context.Context) SqsCredentialsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqsCredentialsMapOutput)
}

type SqsCredentialsOutput struct{ *pulumi.OutputState }

func (SqsCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqsCredentials)(nil)).Elem()
}

func (o SqsCredentialsOutput) ToSqsCredentialsOutput() SqsCredentialsOutput {
	return o
}

func (o SqsCredentialsOutput) ToSqsCredentialsOutputWithContext(ctx context.Context) SqsCredentialsOutput {
	return o
}

// The ID of the key.
func (o SqsCredentialsOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SqsCredentials) pulumi.StringOutput { return v.AccessKey }).(pulumi.StringOutput)
}

// The unique name of the SQS credentials.
func (o SqsCredentialsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SqsCredentials) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// . List of permissions associated with these credentials. Only one of the following permissions may be set:
func (o SqsCredentialsOutput) Permissions() SqsCredentialsPermissionsOutput {
	return o.ApplyT(func(v *SqsCredentials) SqsCredentialsPermissionsOutput { return v.Permissions }).(SqsCredentialsPermissionsOutput)
}

// `projectId`) The ID of the Project in which SQS is enabled.
func (o SqsCredentialsOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SqsCredentials) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// `region`). The region in which SQS is enabled.
func (o SqsCredentialsOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SqsCredentials) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The secret value of the key.
func (o SqsCredentialsOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SqsCredentials) pulumi.StringOutput { return v.SecretKey }).(pulumi.StringOutput)
}

type SqsCredentialsArrayOutput struct{ *pulumi.OutputState }

func (SqsCredentialsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqsCredentials)(nil)).Elem()
}

func (o SqsCredentialsArrayOutput) ToSqsCredentialsArrayOutput() SqsCredentialsArrayOutput {
	return o
}

func (o SqsCredentialsArrayOutput) ToSqsCredentialsArrayOutputWithContext(ctx context.Context) SqsCredentialsArrayOutput {
	return o
}

func (o SqsCredentialsArrayOutput) Index(i pulumi.IntInput) SqsCredentialsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SqsCredentials {
		return vs[0].([]*SqsCredentials)[vs[1].(int)]
	}).(SqsCredentialsOutput)
}

type SqsCredentialsMapOutput struct{ *pulumi.OutputState }

func (SqsCredentialsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqsCredentials)(nil)).Elem()
}

func (o SqsCredentialsMapOutput) ToSqsCredentialsMapOutput() SqsCredentialsMapOutput {
	return o
}

func (o SqsCredentialsMapOutput) ToSqsCredentialsMapOutputWithContext(ctx context.Context) SqsCredentialsMapOutput {
	return o
}

func (o SqsCredentialsMapOutput) MapIndex(k pulumi.StringInput) SqsCredentialsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SqsCredentials {
		return vs[0].(map[string]*SqsCredentials)[vs[1].(string)]
	}).(SqsCredentialsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SqsCredentialsInput)(nil)).Elem(), &SqsCredentials{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqsCredentialsArrayInput)(nil)).Elem(), SqsCredentialsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqsCredentialsMapInput)(nil)).Elem(), SqsCredentialsMap{})
	pulumi.RegisterOutputType(SqsCredentialsOutput{})
	pulumi.RegisterOutputType(SqsCredentialsArrayOutput{})
	pulumi.RegisterOutputType(SqsCredentialsMapOutput{})
}
