// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Messaging and queuing SNS Credentials.
// For further information please check
// our [documentation](https://www.scaleway.com/en/docs/serverless/messaging/reference-content/sns-overview/)
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			mainMnqSns, err := scaleway.NewMnqSns(ctx, "mainMnqSns", nil)
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewMnqSnsCredentials(ctx, "mainMnqSnsCredentials", &scaleway.MnqSnsCredentialsArgs{
//				ProjectId: mainMnqSns.ProjectId,
//				Permissions: &scaleway.MnqSnsCredentialsPermissionsArgs{
//					CanManage:  pulumi.Bool(false),
//					CanReceive: pulumi.Bool(true),
//					CanPublish: pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SNS credentials can be imported using the `{region}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/mnqSnsCredentials:MnqSnsCredentials main fr-par/11111111111111111111111111111111
// ```
type MnqSnsCredentials struct {
	pulumi.CustomResourceState

	// The ID of the key.
	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// The unique name of the sns credentials.
	Name pulumi.StringOutput `pulumi:"name"`
	// . List of permissions associated to these credentials. Only one of permissions may be set.
	Permissions MnqSnsCredentialsPermissionsOutput `pulumi:"permissions"`
	// `projectId`) The ID of the project the sns is enabled for.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// `region`). The region in which sns is enabled.
	Region pulumi.StringOutput `pulumi:"region"`
	// The secret value of the key.
	SecretKey pulumi.StringOutput `pulumi:"secretKey"`
}

// NewMnqSnsCredentials registers a new resource with the given unique name, arguments, and options.
func NewMnqSnsCredentials(ctx *pulumi.Context,
	name string, args *MnqSnsCredentialsArgs, opts ...pulumi.ResourceOption) (*MnqSnsCredentials, error) {
	if args == nil {
		args = &MnqSnsCredentialsArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accessKey",
		"secretKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MnqSnsCredentials
	err := ctx.RegisterResource("scaleway:index/mnqSnsCredentials:MnqSnsCredentials", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMnqSnsCredentials gets an existing MnqSnsCredentials resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMnqSnsCredentials(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MnqSnsCredentialsState, opts ...pulumi.ResourceOption) (*MnqSnsCredentials, error) {
	var resource MnqSnsCredentials
	err := ctx.ReadResource("scaleway:index/mnqSnsCredentials:MnqSnsCredentials", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MnqSnsCredentials resources.
type mnqSnsCredentialsState struct {
	// The ID of the key.
	AccessKey *string `pulumi:"accessKey"`
	// The unique name of the sns credentials.
	Name *string `pulumi:"name"`
	// . List of permissions associated to these credentials. Only one of permissions may be set.
	Permissions *MnqSnsCredentialsPermissions `pulumi:"permissions"`
	// `projectId`) The ID of the project the sns is enabled for.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region in which sns is enabled.
	Region *string `pulumi:"region"`
	// The secret value of the key.
	SecretKey *string `pulumi:"secretKey"`
}

type MnqSnsCredentialsState struct {
	// The ID of the key.
	AccessKey pulumi.StringPtrInput
	// The unique name of the sns credentials.
	Name pulumi.StringPtrInput
	// . List of permissions associated to these credentials. Only one of permissions may be set.
	Permissions MnqSnsCredentialsPermissionsPtrInput
	// `projectId`) The ID of the project the sns is enabled for.
	ProjectId pulumi.StringPtrInput
	// `region`). The region in which sns is enabled.
	Region pulumi.StringPtrInput
	// The secret value of the key.
	SecretKey pulumi.StringPtrInput
}

func (MnqSnsCredentialsState) ElementType() reflect.Type {
	return reflect.TypeOf((*mnqSnsCredentialsState)(nil)).Elem()
}

type mnqSnsCredentialsArgs struct {
	// The unique name of the sns credentials.
	Name *string `pulumi:"name"`
	// . List of permissions associated to these credentials. Only one of permissions may be set.
	Permissions *MnqSnsCredentialsPermissions `pulumi:"permissions"`
	// `projectId`) The ID of the project the sns is enabled for.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region in which sns is enabled.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a MnqSnsCredentials resource.
type MnqSnsCredentialsArgs struct {
	// The unique name of the sns credentials.
	Name pulumi.StringPtrInput
	// . List of permissions associated to these credentials. Only one of permissions may be set.
	Permissions MnqSnsCredentialsPermissionsPtrInput
	// `projectId`) The ID of the project the sns is enabled for.
	ProjectId pulumi.StringPtrInput
	// `region`). The region in which sns is enabled.
	Region pulumi.StringPtrInput
}

func (MnqSnsCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mnqSnsCredentialsArgs)(nil)).Elem()
}

type MnqSnsCredentialsInput interface {
	pulumi.Input

	ToMnqSnsCredentialsOutput() MnqSnsCredentialsOutput
	ToMnqSnsCredentialsOutputWithContext(ctx context.Context) MnqSnsCredentialsOutput
}

func (*MnqSnsCredentials) ElementType() reflect.Type {
	return reflect.TypeOf((**MnqSnsCredentials)(nil)).Elem()
}

func (i *MnqSnsCredentials) ToMnqSnsCredentialsOutput() MnqSnsCredentialsOutput {
	return i.ToMnqSnsCredentialsOutputWithContext(context.Background())
}

func (i *MnqSnsCredentials) ToMnqSnsCredentialsOutputWithContext(ctx context.Context) MnqSnsCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MnqSnsCredentialsOutput)
}

// MnqSnsCredentialsArrayInput is an input type that accepts MnqSnsCredentialsArray and MnqSnsCredentialsArrayOutput values.
// You can construct a concrete instance of `MnqSnsCredentialsArrayInput` via:
//
//	MnqSnsCredentialsArray{ MnqSnsCredentialsArgs{...} }
type MnqSnsCredentialsArrayInput interface {
	pulumi.Input

	ToMnqSnsCredentialsArrayOutput() MnqSnsCredentialsArrayOutput
	ToMnqSnsCredentialsArrayOutputWithContext(context.Context) MnqSnsCredentialsArrayOutput
}

type MnqSnsCredentialsArray []MnqSnsCredentialsInput

func (MnqSnsCredentialsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MnqSnsCredentials)(nil)).Elem()
}

func (i MnqSnsCredentialsArray) ToMnqSnsCredentialsArrayOutput() MnqSnsCredentialsArrayOutput {
	return i.ToMnqSnsCredentialsArrayOutputWithContext(context.Background())
}

func (i MnqSnsCredentialsArray) ToMnqSnsCredentialsArrayOutputWithContext(ctx context.Context) MnqSnsCredentialsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MnqSnsCredentialsArrayOutput)
}

// MnqSnsCredentialsMapInput is an input type that accepts MnqSnsCredentialsMap and MnqSnsCredentialsMapOutput values.
// You can construct a concrete instance of `MnqSnsCredentialsMapInput` via:
//
//	MnqSnsCredentialsMap{ "key": MnqSnsCredentialsArgs{...} }
type MnqSnsCredentialsMapInput interface {
	pulumi.Input

	ToMnqSnsCredentialsMapOutput() MnqSnsCredentialsMapOutput
	ToMnqSnsCredentialsMapOutputWithContext(context.Context) MnqSnsCredentialsMapOutput
}

type MnqSnsCredentialsMap map[string]MnqSnsCredentialsInput

func (MnqSnsCredentialsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MnqSnsCredentials)(nil)).Elem()
}

func (i MnqSnsCredentialsMap) ToMnqSnsCredentialsMapOutput() MnqSnsCredentialsMapOutput {
	return i.ToMnqSnsCredentialsMapOutputWithContext(context.Background())
}

func (i MnqSnsCredentialsMap) ToMnqSnsCredentialsMapOutputWithContext(ctx context.Context) MnqSnsCredentialsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MnqSnsCredentialsMapOutput)
}

type MnqSnsCredentialsOutput struct{ *pulumi.OutputState }

func (MnqSnsCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MnqSnsCredentials)(nil)).Elem()
}

func (o MnqSnsCredentialsOutput) ToMnqSnsCredentialsOutput() MnqSnsCredentialsOutput {
	return o
}

func (o MnqSnsCredentialsOutput) ToMnqSnsCredentialsOutputWithContext(ctx context.Context) MnqSnsCredentialsOutput {
	return o
}

// The ID of the key.
func (o MnqSnsCredentialsOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *MnqSnsCredentials) pulumi.StringOutput { return v.AccessKey }).(pulumi.StringOutput)
}

// The unique name of the sns credentials.
func (o MnqSnsCredentialsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MnqSnsCredentials) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// . List of permissions associated to these credentials. Only one of permissions may be set.
func (o MnqSnsCredentialsOutput) Permissions() MnqSnsCredentialsPermissionsOutput {
	return o.ApplyT(func(v *MnqSnsCredentials) MnqSnsCredentialsPermissionsOutput { return v.Permissions }).(MnqSnsCredentialsPermissionsOutput)
}

// `projectId`) The ID of the project the sns is enabled for.
func (o MnqSnsCredentialsOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *MnqSnsCredentials) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// `region`). The region in which sns is enabled.
func (o MnqSnsCredentialsOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *MnqSnsCredentials) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The secret value of the key.
func (o MnqSnsCredentialsOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v *MnqSnsCredentials) pulumi.StringOutput { return v.SecretKey }).(pulumi.StringOutput)
}

type MnqSnsCredentialsArrayOutput struct{ *pulumi.OutputState }

func (MnqSnsCredentialsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MnqSnsCredentials)(nil)).Elem()
}

func (o MnqSnsCredentialsArrayOutput) ToMnqSnsCredentialsArrayOutput() MnqSnsCredentialsArrayOutput {
	return o
}

func (o MnqSnsCredentialsArrayOutput) ToMnqSnsCredentialsArrayOutputWithContext(ctx context.Context) MnqSnsCredentialsArrayOutput {
	return o
}

func (o MnqSnsCredentialsArrayOutput) Index(i pulumi.IntInput) MnqSnsCredentialsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MnqSnsCredentials {
		return vs[0].([]*MnqSnsCredentials)[vs[1].(int)]
	}).(MnqSnsCredentialsOutput)
}

type MnqSnsCredentialsMapOutput struct{ *pulumi.OutputState }

func (MnqSnsCredentialsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MnqSnsCredentials)(nil)).Elem()
}

func (o MnqSnsCredentialsMapOutput) ToMnqSnsCredentialsMapOutput() MnqSnsCredentialsMapOutput {
	return o
}

func (o MnqSnsCredentialsMapOutput) ToMnqSnsCredentialsMapOutputWithContext(ctx context.Context) MnqSnsCredentialsMapOutput {
	return o
}

func (o MnqSnsCredentialsMapOutput) MapIndex(k pulumi.StringInput) MnqSnsCredentialsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MnqSnsCredentials {
		return vs[0].(map[string]*MnqSnsCredentials)[vs[1].(string)]
	}).(MnqSnsCredentialsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MnqSnsCredentialsInput)(nil)).Elem(), &MnqSnsCredentials{})
	pulumi.RegisterInputType(reflect.TypeOf((*MnqSnsCredentialsArrayInput)(nil)).Elem(), MnqSnsCredentialsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MnqSnsCredentialsMapInput)(nil)).Elem(), MnqSnsCredentialsMap{})
	pulumi.RegisterOutputType(MnqSnsCredentialsOutput{})
	pulumi.RegisterOutputType(MnqSnsCredentialsArrayOutput{})
	pulumi.RegisterOutputType(MnqSnsCredentialsMapOutput{})
}
