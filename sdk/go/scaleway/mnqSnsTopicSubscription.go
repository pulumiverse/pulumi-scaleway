// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Manage Scaleway Messaging and queuing SNS Topic Subscriptions.
// For further information please check
// our [documentation](https://www.scaleway.com/en/docs/serverless/messaging/reference-content/sns-overview/)
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// For default project in default region
//			mainMnqSns, err := scaleway.NewMnqSns(ctx, "mainMnqSns", nil)
//			if err != nil {
//				return err
//			}
//			mainMnqSnsCredentials, err := scaleway.NewMnqSnsCredentials(ctx, "mainMnqSnsCredentials", &scaleway.MnqSnsCredentialsArgs{
//				ProjectId: mainMnqSns.ProjectId,
//				Permissions: &scaleway.MnqSnsCredentialsPermissionsArgs{
//					CanManage:  pulumi.Bool(true),
//					CanPublish: pulumi.Bool(true),
//					CanReceive: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			topic, err := scaleway.NewMnqSnsTopic(ctx, "topic", &scaleway.MnqSnsTopicArgs{
//				ProjectId: mainMnqSns.ProjectId,
//				AccessKey: mainMnqSnsCredentials.AccessKey,
//				SecretKey: mainMnqSnsCredentials.SecretKey,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewMnqSnsTopicSubscription(ctx, "mainMnqSnsTopicSubscription", &scaleway.MnqSnsTopicSubscriptionArgs{
//				ProjectId: mainMnqSns.ProjectId,
//				AccessKey: mainMnqSnsCredentials.AccessKey,
//				SecretKey: mainMnqSnsCredentials.SecretKey,
//				TopicId:   topic.ID(),
//				Protocol:  pulumi.String("http"),
//				Endpoint:  pulumi.String("http://example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SNS topic subscriptions can be imported using the `{region}/{project-id}/{topic-name}/{subscription-id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/mnqSnsTopicSubscription:MnqSnsTopicSubscription main fr-par/11111111111111111111111111111111/my-topic/11111111111111111111111111111111
// ```
type MnqSnsTopicSubscription struct {
	pulumi.CustomResourceState

	// The access key of the SNS credentials.
	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// The ARN of the topic subscription
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Endpoint of the subscription
	Endpoint pulumi.StringPtrOutput `pulumi:"endpoint"`
	// `projectId`) The ID of the project the sns is enabled for.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Protocol of the SNS Topic Subscription.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Activate JSON Redrive Policy.
	RedrivePolicy pulumi.BoolOutput `pulumi:"redrivePolicy"`
	// `region`). The region
	// in which sns is enabled.
	Region pulumi.StringOutput `pulumi:"region"`
	// The secret key of the SNS credentials.
	SecretKey pulumi.StringOutput `pulumi:"secretKey"`
	// The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
	SnsEndpoint pulumi.StringPtrOutput `pulumi:"snsEndpoint"`
	// The ARN of the topic. Either `topicId` or `topicArn` is required.
	TopicArn pulumi.StringPtrOutput `pulumi:"topicArn"`
	// The ID of the topic. Either `topicId` or `topicArn` is required. Conflicts with `topicArn`.
	TopicId pulumi.StringPtrOutput `pulumi:"topicId"`
}

// NewMnqSnsTopicSubscription registers a new resource with the given unique name, arguments, and options.
func NewMnqSnsTopicSubscription(ctx *pulumi.Context,
	name string, args *MnqSnsTopicSubscriptionArgs, opts ...pulumi.ResourceOption) (*MnqSnsTopicSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessKey == nil {
		return nil, errors.New("invalid value for required argument 'AccessKey'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.SecretKey == nil {
		return nil, errors.New("invalid value for required argument 'SecretKey'")
	}
	if args.AccessKey != nil {
		args.AccessKey = pulumi.ToSecret(args.AccessKey).(pulumi.StringInput)
	}
	if args.SecretKey != nil {
		args.SecretKey = pulumi.ToSecret(args.SecretKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accessKey",
		"secretKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MnqSnsTopicSubscription
	err := ctx.RegisterResource("scaleway:index/mnqSnsTopicSubscription:MnqSnsTopicSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMnqSnsTopicSubscription gets an existing MnqSnsTopicSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMnqSnsTopicSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MnqSnsTopicSubscriptionState, opts ...pulumi.ResourceOption) (*MnqSnsTopicSubscription, error) {
	var resource MnqSnsTopicSubscription
	err := ctx.ReadResource("scaleway:index/mnqSnsTopicSubscription:MnqSnsTopicSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MnqSnsTopicSubscription resources.
type mnqSnsTopicSubscriptionState struct {
	// The access key of the SNS credentials.
	AccessKey *string `pulumi:"accessKey"`
	// The ARN of the topic subscription
	Arn *string `pulumi:"arn"`
	// Endpoint of the subscription
	Endpoint *string `pulumi:"endpoint"`
	// `projectId`) The ID of the project the sns is enabled for.
	ProjectId *string `pulumi:"projectId"`
	// Protocol of the SNS Topic Subscription.
	Protocol *string `pulumi:"protocol"`
	// Activate JSON Redrive Policy.
	RedrivePolicy *bool `pulumi:"redrivePolicy"`
	// `region`). The region
	// in which sns is enabled.
	Region *string `pulumi:"region"`
	// The secret key of the SNS credentials.
	SecretKey *string `pulumi:"secretKey"`
	// The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
	SnsEndpoint *string `pulumi:"snsEndpoint"`
	// The ARN of the topic. Either `topicId` or `topicArn` is required.
	TopicArn *string `pulumi:"topicArn"`
	// The ID of the topic. Either `topicId` or `topicArn` is required. Conflicts with `topicArn`.
	TopicId *string `pulumi:"topicId"`
}

type MnqSnsTopicSubscriptionState struct {
	// The access key of the SNS credentials.
	AccessKey pulumi.StringPtrInput
	// The ARN of the topic subscription
	Arn pulumi.StringPtrInput
	// Endpoint of the subscription
	Endpoint pulumi.StringPtrInput
	// `projectId`) The ID of the project the sns is enabled for.
	ProjectId pulumi.StringPtrInput
	// Protocol of the SNS Topic Subscription.
	Protocol pulumi.StringPtrInput
	// Activate JSON Redrive Policy.
	RedrivePolicy pulumi.BoolPtrInput
	// `region`). The region
	// in which sns is enabled.
	Region pulumi.StringPtrInput
	// The secret key of the SNS credentials.
	SecretKey pulumi.StringPtrInput
	// The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
	SnsEndpoint pulumi.StringPtrInput
	// The ARN of the topic. Either `topicId` or `topicArn` is required.
	TopicArn pulumi.StringPtrInput
	// The ID of the topic. Either `topicId` or `topicArn` is required. Conflicts with `topicArn`.
	TopicId pulumi.StringPtrInput
}

func (MnqSnsTopicSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*mnqSnsTopicSubscriptionState)(nil)).Elem()
}

type mnqSnsTopicSubscriptionArgs struct {
	// The access key of the SNS credentials.
	AccessKey string `pulumi:"accessKey"`
	// Endpoint of the subscription
	Endpoint *string `pulumi:"endpoint"`
	// `projectId`) The ID of the project the sns is enabled for.
	ProjectId *string `pulumi:"projectId"`
	// Protocol of the SNS Topic Subscription.
	Protocol string `pulumi:"protocol"`
	// Activate JSON Redrive Policy.
	RedrivePolicy *bool `pulumi:"redrivePolicy"`
	// `region`). The region
	// in which sns is enabled.
	Region *string `pulumi:"region"`
	// The secret key of the SNS credentials.
	SecretKey string `pulumi:"secretKey"`
	// The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
	SnsEndpoint *string `pulumi:"snsEndpoint"`
	// The ARN of the topic. Either `topicId` or `topicArn` is required.
	TopicArn *string `pulumi:"topicArn"`
	// The ID of the topic. Either `topicId` or `topicArn` is required. Conflicts with `topicArn`.
	TopicId *string `pulumi:"topicId"`
}

// The set of arguments for constructing a MnqSnsTopicSubscription resource.
type MnqSnsTopicSubscriptionArgs struct {
	// The access key of the SNS credentials.
	AccessKey pulumi.StringInput
	// Endpoint of the subscription
	Endpoint pulumi.StringPtrInput
	// `projectId`) The ID of the project the sns is enabled for.
	ProjectId pulumi.StringPtrInput
	// Protocol of the SNS Topic Subscription.
	Protocol pulumi.StringInput
	// Activate JSON Redrive Policy.
	RedrivePolicy pulumi.BoolPtrInput
	// `region`). The region
	// in which sns is enabled.
	Region pulumi.StringPtrInput
	// The secret key of the SNS credentials.
	SecretKey pulumi.StringInput
	// The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
	SnsEndpoint pulumi.StringPtrInput
	// The ARN of the topic. Either `topicId` or `topicArn` is required.
	TopicArn pulumi.StringPtrInput
	// The ID of the topic. Either `topicId` or `topicArn` is required. Conflicts with `topicArn`.
	TopicId pulumi.StringPtrInput
}

func (MnqSnsTopicSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mnqSnsTopicSubscriptionArgs)(nil)).Elem()
}

type MnqSnsTopicSubscriptionInput interface {
	pulumi.Input

	ToMnqSnsTopicSubscriptionOutput() MnqSnsTopicSubscriptionOutput
	ToMnqSnsTopicSubscriptionOutputWithContext(ctx context.Context) MnqSnsTopicSubscriptionOutput
}

func (*MnqSnsTopicSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**MnqSnsTopicSubscription)(nil)).Elem()
}

func (i *MnqSnsTopicSubscription) ToMnqSnsTopicSubscriptionOutput() MnqSnsTopicSubscriptionOutput {
	return i.ToMnqSnsTopicSubscriptionOutputWithContext(context.Background())
}

func (i *MnqSnsTopicSubscription) ToMnqSnsTopicSubscriptionOutputWithContext(ctx context.Context) MnqSnsTopicSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MnqSnsTopicSubscriptionOutput)
}

// MnqSnsTopicSubscriptionArrayInput is an input type that accepts MnqSnsTopicSubscriptionArray and MnqSnsTopicSubscriptionArrayOutput values.
// You can construct a concrete instance of `MnqSnsTopicSubscriptionArrayInput` via:
//
//	MnqSnsTopicSubscriptionArray{ MnqSnsTopicSubscriptionArgs{...} }
type MnqSnsTopicSubscriptionArrayInput interface {
	pulumi.Input

	ToMnqSnsTopicSubscriptionArrayOutput() MnqSnsTopicSubscriptionArrayOutput
	ToMnqSnsTopicSubscriptionArrayOutputWithContext(context.Context) MnqSnsTopicSubscriptionArrayOutput
}

type MnqSnsTopicSubscriptionArray []MnqSnsTopicSubscriptionInput

func (MnqSnsTopicSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MnqSnsTopicSubscription)(nil)).Elem()
}

func (i MnqSnsTopicSubscriptionArray) ToMnqSnsTopicSubscriptionArrayOutput() MnqSnsTopicSubscriptionArrayOutput {
	return i.ToMnqSnsTopicSubscriptionArrayOutputWithContext(context.Background())
}

func (i MnqSnsTopicSubscriptionArray) ToMnqSnsTopicSubscriptionArrayOutputWithContext(ctx context.Context) MnqSnsTopicSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MnqSnsTopicSubscriptionArrayOutput)
}

// MnqSnsTopicSubscriptionMapInput is an input type that accepts MnqSnsTopicSubscriptionMap and MnqSnsTopicSubscriptionMapOutput values.
// You can construct a concrete instance of `MnqSnsTopicSubscriptionMapInput` via:
//
//	MnqSnsTopicSubscriptionMap{ "key": MnqSnsTopicSubscriptionArgs{...} }
type MnqSnsTopicSubscriptionMapInput interface {
	pulumi.Input

	ToMnqSnsTopicSubscriptionMapOutput() MnqSnsTopicSubscriptionMapOutput
	ToMnqSnsTopicSubscriptionMapOutputWithContext(context.Context) MnqSnsTopicSubscriptionMapOutput
}

type MnqSnsTopicSubscriptionMap map[string]MnqSnsTopicSubscriptionInput

func (MnqSnsTopicSubscriptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MnqSnsTopicSubscription)(nil)).Elem()
}

func (i MnqSnsTopicSubscriptionMap) ToMnqSnsTopicSubscriptionMapOutput() MnqSnsTopicSubscriptionMapOutput {
	return i.ToMnqSnsTopicSubscriptionMapOutputWithContext(context.Background())
}

func (i MnqSnsTopicSubscriptionMap) ToMnqSnsTopicSubscriptionMapOutputWithContext(ctx context.Context) MnqSnsTopicSubscriptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MnqSnsTopicSubscriptionMapOutput)
}

type MnqSnsTopicSubscriptionOutput struct{ *pulumi.OutputState }

func (MnqSnsTopicSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MnqSnsTopicSubscription)(nil)).Elem()
}

func (o MnqSnsTopicSubscriptionOutput) ToMnqSnsTopicSubscriptionOutput() MnqSnsTopicSubscriptionOutput {
	return o
}

func (o MnqSnsTopicSubscriptionOutput) ToMnqSnsTopicSubscriptionOutputWithContext(ctx context.Context) MnqSnsTopicSubscriptionOutput {
	return o
}

// The access key of the SNS credentials.
func (o MnqSnsTopicSubscriptionOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *MnqSnsTopicSubscription) pulumi.StringOutput { return v.AccessKey }).(pulumi.StringOutput)
}

// The ARN of the topic subscription
func (o MnqSnsTopicSubscriptionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *MnqSnsTopicSubscription) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Endpoint of the subscription
func (o MnqSnsTopicSubscriptionOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MnqSnsTopicSubscription) pulumi.StringPtrOutput { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// `projectId`) The ID of the project the sns is enabled for.
func (o MnqSnsTopicSubscriptionOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *MnqSnsTopicSubscription) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Protocol of the SNS Topic Subscription.
func (o MnqSnsTopicSubscriptionOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *MnqSnsTopicSubscription) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Activate JSON Redrive Policy.
func (o MnqSnsTopicSubscriptionOutput) RedrivePolicy() pulumi.BoolOutput {
	return o.ApplyT(func(v *MnqSnsTopicSubscription) pulumi.BoolOutput { return v.RedrivePolicy }).(pulumi.BoolOutput)
}

// `region`). The region
// in which sns is enabled.
func (o MnqSnsTopicSubscriptionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *MnqSnsTopicSubscription) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The secret key of the SNS credentials.
func (o MnqSnsTopicSubscriptionOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v *MnqSnsTopicSubscription) pulumi.StringOutput { return v.SecretKey }).(pulumi.StringOutput)
}

// The endpoint of the SNS service. Can contain a {region} placeholder. Defaults to `https://sns.mnq.{region}.scaleway.com`.
func (o MnqSnsTopicSubscriptionOutput) SnsEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MnqSnsTopicSubscription) pulumi.StringPtrOutput { return v.SnsEndpoint }).(pulumi.StringPtrOutput)
}

// The ARN of the topic. Either `topicId` or `topicArn` is required.
func (o MnqSnsTopicSubscriptionOutput) TopicArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MnqSnsTopicSubscription) pulumi.StringPtrOutput { return v.TopicArn }).(pulumi.StringPtrOutput)
}

// The ID of the topic. Either `topicId` or `topicArn` is required. Conflicts with `topicArn`.
func (o MnqSnsTopicSubscriptionOutput) TopicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MnqSnsTopicSubscription) pulumi.StringPtrOutput { return v.TopicId }).(pulumi.StringPtrOutput)
}

type MnqSnsTopicSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (MnqSnsTopicSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MnqSnsTopicSubscription)(nil)).Elem()
}

func (o MnqSnsTopicSubscriptionArrayOutput) ToMnqSnsTopicSubscriptionArrayOutput() MnqSnsTopicSubscriptionArrayOutput {
	return o
}

func (o MnqSnsTopicSubscriptionArrayOutput) ToMnqSnsTopicSubscriptionArrayOutputWithContext(ctx context.Context) MnqSnsTopicSubscriptionArrayOutput {
	return o
}

func (o MnqSnsTopicSubscriptionArrayOutput) Index(i pulumi.IntInput) MnqSnsTopicSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MnqSnsTopicSubscription {
		return vs[0].([]*MnqSnsTopicSubscription)[vs[1].(int)]
	}).(MnqSnsTopicSubscriptionOutput)
}

type MnqSnsTopicSubscriptionMapOutput struct{ *pulumi.OutputState }

func (MnqSnsTopicSubscriptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MnqSnsTopicSubscription)(nil)).Elem()
}

func (o MnqSnsTopicSubscriptionMapOutput) ToMnqSnsTopicSubscriptionMapOutput() MnqSnsTopicSubscriptionMapOutput {
	return o
}

func (o MnqSnsTopicSubscriptionMapOutput) ToMnqSnsTopicSubscriptionMapOutputWithContext(ctx context.Context) MnqSnsTopicSubscriptionMapOutput {
	return o
}

func (o MnqSnsTopicSubscriptionMapOutput) MapIndex(k pulumi.StringInput) MnqSnsTopicSubscriptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MnqSnsTopicSubscription {
		return vs[0].(map[string]*MnqSnsTopicSubscription)[vs[1].(string)]
	}).(MnqSnsTopicSubscriptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MnqSnsTopicSubscriptionInput)(nil)).Elem(), &MnqSnsTopicSubscription{})
	pulumi.RegisterInputType(reflect.TypeOf((*MnqSnsTopicSubscriptionArrayInput)(nil)).Elem(), MnqSnsTopicSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MnqSnsTopicSubscriptionMapInput)(nil)).Elem(), MnqSnsTopicSubscriptionMap{})
	pulumi.RegisterOutputType(MnqSnsTopicSubscriptionOutput{})
	pulumi.RegisterOutputType(MnqSnsTopicSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(MnqSnsTopicSubscriptionMapOutput{})
}
