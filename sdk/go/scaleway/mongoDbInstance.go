// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway MongoDB® instance.
// For more information refer to the [product documentation](https://www.scaleway.com/en/docs/managed-mongodb-databases/).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/mongodb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodb.NewInstance(ctx, "main", &mongodb.InstanceArgs{
//				Name:           pulumi.String("test-mongodb-basic1"),
//				Version:        pulumi.String("7.0.12"),
//				NodeType:       pulumi.String("MGDB-PLAY2-NANO"),
//				NodeNumber:     pulumi.Int(1),
//				UserName:       pulumi.String("my_initial_user"),
//				Password:       pulumi.String("thiZ_is_v&ry_s3cret"),
//				VolumeSizeInGb: pulumi.Int(5),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Private Network
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/mongodb"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/network"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := network.NewPrivateNetwork(ctx, "pn01", &network.PrivateNetworkArgs{
//				Name:   pulumi.String("my_private_network"),
//				Region: pulumi.String("fr-par"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mongodb.NewInstance(ctx, "main", &mongodb.InstanceArgs{
//				Name:           pulumi.String("test-mongodb-basic1"),
//				Version:        pulumi.String("7.0.12"),
//				NodeType:       pulumi.String("MGDB-PLAY2-NANO"),
//				NodeNumber:     pulumi.Int(1),
//				UserName:       pulumi.String("my_initial_user"),
//				Password:       pulumi.String("thiZ_is_v&ry_s3cret"),
//				VolumeSizeInGb: pulumi.Int(5),
//				PrivateNetwork: &mongodb.InstancePrivateNetworkArgs{
//					PnId: pulumi.Any(pn02.Id),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Private Network and Public Network
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/mongodb"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/network"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := network.NewPrivateNetwork(ctx, "pn01", &network.PrivateNetworkArgs{
//				Name:   pulumi.String("my_private_network"),
//				Region: pulumi.String("fr-par"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mongodb.NewInstance(ctx, "main", &mongodb.InstanceArgs{
//				Name:           pulumi.String("test-mongodb-basic1"),
//				Version:        pulumi.String("7.0.12"),
//				NodeType:       pulumi.String("MGDB-PLAY2-NANO"),
//				NodeNumber:     pulumi.Int(1),
//				UserName:       pulumi.String("my_initial_user"),
//				Password:       pulumi.String("thiZ_is_v&ry_s3cret"),
//				VolumeSizeInGb: pulumi.Int(5),
//				PrivateNetwork: &mongodb.InstancePrivateNetworkArgs{
//					PnId: pulumi.Any(pn02.Id),
//				},
//				PublicNetwork: &mongodb.InstancePublicNetworkArgs{},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With Snapshot Scheduling
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/mongodb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodb.NewInstance(ctx, "main", &mongodb.InstanceArgs{
//				Name:                           pulumi.String("test-mongodb-with-snapshots"),
//				Version:                        pulumi.String("7.0.12"),
//				NodeType:                       pulumi.String("MGDB-PLAY2-NANO"),
//				NodeNumber:                     pulumi.Int(1),
//				UserName:                       pulumi.String("my_initial_user"),
//				Password:                       pulumi.String("thiZ_is_v&ry_s3cret"),
//				VolumeSizeInGb:                 pulumi.Int(5),
//				SnapshotScheduleFrequencyHours: pulumi.Int(24),
//				SnapshotScheduleRetentionDays:  pulumi.Int(7),
//				IsSnapshotScheduleEnabled:      pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Restore From Snapshot
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/mongodb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodb.NewInstance(ctx, "restored_instance", &mongodb.InstanceArgs{
//				SnapshotId: pulumi.Any(pn.IdscalewayMongodbSnapshot.MainSnapshot.Id),
//				Name:       pulumi.String("restored-mongodb-from-snapshot"),
//				NodeType:   pulumi.String("MGDB-PLAY2-NANO"),
//				NodeNumber: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// MongoDB® instance can be imported using the `id`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/mongoDbInstance:MongoDbInstance main fr-par/11111111-1111-1111-1111-111111111111
// ```
//
// Deprecated: scaleway.index/mongodbinstance.MongoDbInstance has been deprecated in favor of scaleway.mongodb/instance.Instance
type MongoDbInstance struct {
	pulumi.CustomResourceState

	// The date and time of the creation of the MongoDB® instance.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Whether automatic snapshot scheduling is enabled.
	IsSnapshotScheduleEnabled pulumi.BoolOutput `pulumi:"isSnapshotScheduleEnabled"`
	// Name of the MongoDB® instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of nodes in the instance
	NodeNumber pulumi.IntOutput `pulumi:"nodeNumber"`
	// The type of MongoDB® intance to create.
	NodeType pulumi.StringOutput `pulumi:"nodeType"`
	// Password of the user.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The private IPv4 address associated with the instance.
	PrivateIps MongoDbInstancePrivateIpArrayOutput `pulumi:"privateIps"`
	// Private Network endpoints of the Database Instance.
	PrivateNetwork MongoDbInstancePrivateNetworkPtrOutput `pulumi:"privateNetwork"`
	// `projectId`) The ID of the project the MongoDB® instance is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Public network endpoint configuration (no arguments).
	PublicNetwork MongoDbInstancePublicNetworkOutput `pulumi:"publicNetwork"`
	// `region`) The region in which the MongoDB® instance should be created.
	Region pulumi.StringOutput `pulumi:"region"`
	// Map of settings to define for the instance.
	Settings pulumi.StringMapOutput `pulumi:"settings"`
	// Snapshot ID to restore the MongoDB® instance from.
	SnapshotId pulumi.StringPtrOutput `pulumi:"snapshotId"`
	// Snapshot schedule frequency in hours.
	SnapshotScheduleFrequencyHours pulumi.IntOutput `pulumi:"snapshotScheduleFrequencyHours"`
	// Snapshot schedule retention in days.
	SnapshotScheduleRetentionDays pulumi.IntOutput `pulumi:"snapshotScheduleRetentionDays"`
	// List of tags attached to the MongoDB® instance.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The PEM-encoded TLS certificate for the MongoDB® instance, if available.
	TlsCertificate pulumi.StringOutput `pulumi:"tlsCertificate"`
	// The date and time of the last update of the MongoDB® instance.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// Name of the user created when the intance is created.
	UserName pulumi.StringPtrOutput `pulumi:"userName"`
	// MongoDB® version of the instance.
	Version pulumi.StringOutput `pulumi:"version"`
	// Volume size in GB.
	VolumeSizeInGb pulumi.IntOutput `pulumi:"volumeSizeInGb"`
	// Volume type of the instance.
	VolumeType pulumi.StringPtrOutput `pulumi:"volumeType"`
}

// NewMongoDbInstance registers a new resource with the given unique name, arguments, and options.
func NewMongoDbInstance(ctx *pulumi.Context,
	name string, args *MongoDbInstanceArgs, opts ...pulumi.ResourceOption) (*MongoDbInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NodeNumber == nil {
		return nil, errors.New("invalid value for required argument 'NodeNumber'")
	}
	if args.NodeType == nil {
		return nil, errors.New("invalid value for required argument 'NodeType'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MongoDbInstance
	err := ctx.RegisterResource("scaleway:index/mongoDbInstance:MongoDbInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMongoDbInstance gets an existing MongoDbInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMongoDbInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MongoDbInstanceState, opts ...pulumi.ResourceOption) (*MongoDbInstance, error) {
	var resource MongoDbInstance
	err := ctx.ReadResource("scaleway:index/mongoDbInstance:MongoDbInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MongoDbInstance resources.
type mongoDbInstanceState struct {
	// The date and time of the creation of the MongoDB® instance.
	CreatedAt *string `pulumi:"createdAt"`
	// Whether automatic snapshot scheduling is enabled.
	IsSnapshotScheduleEnabled *bool `pulumi:"isSnapshotScheduleEnabled"`
	// Name of the MongoDB® instance.
	Name *string `pulumi:"name"`
	// Number of nodes in the instance
	NodeNumber *int `pulumi:"nodeNumber"`
	// The type of MongoDB® intance to create.
	NodeType *string `pulumi:"nodeType"`
	// Password of the user.
	Password *string `pulumi:"password"`
	// The private IPv4 address associated with the instance.
	PrivateIps []MongoDbInstancePrivateIp `pulumi:"privateIps"`
	// Private Network endpoints of the Database Instance.
	PrivateNetwork *MongoDbInstancePrivateNetwork `pulumi:"privateNetwork"`
	// `projectId`) The ID of the project the MongoDB® instance is associated with.
	ProjectId *string `pulumi:"projectId"`
	// Public network endpoint configuration (no arguments).
	PublicNetwork *MongoDbInstancePublicNetwork `pulumi:"publicNetwork"`
	// `region`) The region in which the MongoDB® instance should be created.
	Region *string `pulumi:"region"`
	// Map of settings to define for the instance.
	Settings map[string]string `pulumi:"settings"`
	// Snapshot ID to restore the MongoDB® instance from.
	SnapshotId *string `pulumi:"snapshotId"`
	// Snapshot schedule frequency in hours.
	SnapshotScheduleFrequencyHours *int `pulumi:"snapshotScheduleFrequencyHours"`
	// Snapshot schedule retention in days.
	SnapshotScheduleRetentionDays *int `pulumi:"snapshotScheduleRetentionDays"`
	// List of tags attached to the MongoDB® instance.
	Tags []string `pulumi:"tags"`
	// The PEM-encoded TLS certificate for the MongoDB® instance, if available.
	TlsCertificate *string `pulumi:"tlsCertificate"`
	// The date and time of the last update of the MongoDB® instance.
	UpdatedAt *string `pulumi:"updatedAt"`
	// Name of the user created when the intance is created.
	UserName *string `pulumi:"userName"`
	// MongoDB® version of the instance.
	Version *string `pulumi:"version"`
	// Volume size in GB.
	VolumeSizeInGb *int `pulumi:"volumeSizeInGb"`
	// Volume type of the instance.
	VolumeType *string `pulumi:"volumeType"`
}

type MongoDbInstanceState struct {
	// The date and time of the creation of the MongoDB® instance.
	CreatedAt pulumi.StringPtrInput
	// Whether automatic snapshot scheduling is enabled.
	IsSnapshotScheduleEnabled pulumi.BoolPtrInput
	// Name of the MongoDB® instance.
	Name pulumi.StringPtrInput
	// Number of nodes in the instance
	NodeNumber pulumi.IntPtrInput
	// The type of MongoDB® intance to create.
	NodeType pulumi.StringPtrInput
	// Password of the user.
	Password pulumi.StringPtrInput
	// The private IPv4 address associated with the instance.
	PrivateIps MongoDbInstancePrivateIpArrayInput
	// Private Network endpoints of the Database Instance.
	PrivateNetwork MongoDbInstancePrivateNetworkPtrInput
	// `projectId`) The ID of the project the MongoDB® instance is associated with.
	ProjectId pulumi.StringPtrInput
	// Public network endpoint configuration (no arguments).
	PublicNetwork MongoDbInstancePublicNetworkPtrInput
	// `region`) The region in which the MongoDB® instance should be created.
	Region pulumi.StringPtrInput
	// Map of settings to define for the instance.
	Settings pulumi.StringMapInput
	// Snapshot ID to restore the MongoDB® instance from.
	SnapshotId pulumi.StringPtrInput
	// Snapshot schedule frequency in hours.
	SnapshotScheduleFrequencyHours pulumi.IntPtrInput
	// Snapshot schedule retention in days.
	SnapshotScheduleRetentionDays pulumi.IntPtrInput
	// List of tags attached to the MongoDB® instance.
	Tags pulumi.StringArrayInput
	// The PEM-encoded TLS certificate for the MongoDB® instance, if available.
	TlsCertificate pulumi.StringPtrInput
	// The date and time of the last update of the MongoDB® instance.
	UpdatedAt pulumi.StringPtrInput
	// Name of the user created when the intance is created.
	UserName pulumi.StringPtrInput
	// MongoDB® version of the instance.
	Version pulumi.StringPtrInput
	// Volume size in GB.
	VolumeSizeInGb pulumi.IntPtrInput
	// Volume type of the instance.
	VolumeType pulumi.StringPtrInput
}

func (MongoDbInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*mongoDbInstanceState)(nil)).Elem()
}

type mongoDbInstanceArgs struct {
	// Whether automatic snapshot scheduling is enabled.
	IsSnapshotScheduleEnabled *bool `pulumi:"isSnapshotScheduleEnabled"`
	// Name of the MongoDB® instance.
	Name *string `pulumi:"name"`
	// Number of nodes in the instance
	NodeNumber int `pulumi:"nodeNumber"`
	// The type of MongoDB® intance to create.
	NodeType string `pulumi:"nodeType"`
	// Password of the user.
	Password *string `pulumi:"password"`
	// The private IPv4 address associated with the instance.
	PrivateIps []MongoDbInstancePrivateIp `pulumi:"privateIps"`
	// Private Network endpoints of the Database Instance.
	PrivateNetwork *MongoDbInstancePrivateNetwork `pulumi:"privateNetwork"`
	// `projectId`) The ID of the project the MongoDB® instance is associated with.
	ProjectId *string `pulumi:"projectId"`
	// Public network endpoint configuration (no arguments).
	PublicNetwork *MongoDbInstancePublicNetwork `pulumi:"publicNetwork"`
	// `region`) The region in which the MongoDB® instance should be created.
	Region *string `pulumi:"region"`
	// Map of settings to define for the instance.
	Settings map[string]string `pulumi:"settings"`
	// Snapshot ID to restore the MongoDB® instance from.
	SnapshotId *string `pulumi:"snapshotId"`
	// Snapshot schedule frequency in hours.
	SnapshotScheduleFrequencyHours *int `pulumi:"snapshotScheduleFrequencyHours"`
	// Snapshot schedule retention in days.
	SnapshotScheduleRetentionDays *int `pulumi:"snapshotScheduleRetentionDays"`
	// List of tags attached to the MongoDB® instance.
	Tags []string `pulumi:"tags"`
	// Name of the user created when the intance is created.
	UserName *string `pulumi:"userName"`
	// MongoDB® version of the instance.
	Version *string `pulumi:"version"`
	// Volume size in GB.
	VolumeSizeInGb *int `pulumi:"volumeSizeInGb"`
	// Volume type of the instance.
	VolumeType *string `pulumi:"volumeType"`
}

// The set of arguments for constructing a MongoDbInstance resource.
type MongoDbInstanceArgs struct {
	// Whether automatic snapshot scheduling is enabled.
	IsSnapshotScheduleEnabled pulumi.BoolPtrInput
	// Name of the MongoDB® instance.
	Name pulumi.StringPtrInput
	// Number of nodes in the instance
	NodeNumber pulumi.IntInput
	// The type of MongoDB® intance to create.
	NodeType pulumi.StringInput
	// Password of the user.
	Password pulumi.StringPtrInput
	// The private IPv4 address associated with the instance.
	PrivateIps MongoDbInstancePrivateIpArrayInput
	// Private Network endpoints of the Database Instance.
	PrivateNetwork MongoDbInstancePrivateNetworkPtrInput
	// `projectId`) The ID of the project the MongoDB® instance is associated with.
	ProjectId pulumi.StringPtrInput
	// Public network endpoint configuration (no arguments).
	PublicNetwork MongoDbInstancePublicNetworkPtrInput
	// `region`) The region in which the MongoDB® instance should be created.
	Region pulumi.StringPtrInput
	// Map of settings to define for the instance.
	Settings pulumi.StringMapInput
	// Snapshot ID to restore the MongoDB® instance from.
	SnapshotId pulumi.StringPtrInput
	// Snapshot schedule frequency in hours.
	SnapshotScheduleFrequencyHours pulumi.IntPtrInput
	// Snapshot schedule retention in days.
	SnapshotScheduleRetentionDays pulumi.IntPtrInput
	// List of tags attached to the MongoDB® instance.
	Tags pulumi.StringArrayInput
	// Name of the user created when the intance is created.
	UserName pulumi.StringPtrInput
	// MongoDB® version of the instance.
	Version pulumi.StringPtrInput
	// Volume size in GB.
	VolumeSizeInGb pulumi.IntPtrInput
	// Volume type of the instance.
	VolumeType pulumi.StringPtrInput
}

func (MongoDbInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mongoDbInstanceArgs)(nil)).Elem()
}

type MongoDbInstanceInput interface {
	pulumi.Input

	ToMongoDbInstanceOutput() MongoDbInstanceOutput
	ToMongoDbInstanceOutputWithContext(ctx context.Context) MongoDbInstanceOutput
}

func (*MongoDbInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbInstance)(nil)).Elem()
}

func (i *MongoDbInstance) ToMongoDbInstanceOutput() MongoDbInstanceOutput {
	return i.ToMongoDbInstanceOutputWithContext(context.Background())
}

func (i *MongoDbInstance) ToMongoDbInstanceOutputWithContext(ctx context.Context) MongoDbInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbInstanceOutput)
}

// MongoDbInstanceArrayInput is an input type that accepts MongoDbInstanceArray and MongoDbInstanceArrayOutput values.
// You can construct a concrete instance of `MongoDbInstanceArrayInput` via:
//
//	MongoDbInstanceArray{ MongoDbInstanceArgs{...} }
type MongoDbInstanceArrayInput interface {
	pulumi.Input

	ToMongoDbInstanceArrayOutput() MongoDbInstanceArrayOutput
	ToMongoDbInstanceArrayOutputWithContext(context.Context) MongoDbInstanceArrayOutput
}

type MongoDbInstanceArray []MongoDbInstanceInput

func (MongoDbInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongoDbInstance)(nil)).Elem()
}

func (i MongoDbInstanceArray) ToMongoDbInstanceArrayOutput() MongoDbInstanceArrayOutput {
	return i.ToMongoDbInstanceArrayOutputWithContext(context.Background())
}

func (i MongoDbInstanceArray) ToMongoDbInstanceArrayOutputWithContext(ctx context.Context) MongoDbInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbInstanceArrayOutput)
}

// MongoDbInstanceMapInput is an input type that accepts MongoDbInstanceMap and MongoDbInstanceMapOutput values.
// You can construct a concrete instance of `MongoDbInstanceMapInput` via:
//
//	MongoDbInstanceMap{ "key": MongoDbInstanceArgs{...} }
type MongoDbInstanceMapInput interface {
	pulumi.Input

	ToMongoDbInstanceMapOutput() MongoDbInstanceMapOutput
	ToMongoDbInstanceMapOutputWithContext(context.Context) MongoDbInstanceMapOutput
}

type MongoDbInstanceMap map[string]MongoDbInstanceInput

func (MongoDbInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongoDbInstance)(nil)).Elem()
}

func (i MongoDbInstanceMap) ToMongoDbInstanceMapOutput() MongoDbInstanceMapOutput {
	return i.ToMongoDbInstanceMapOutputWithContext(context.Background())
}

func (i MongoDbInstanceMap) ToMongoDbInstanceMapOutputWithContext(ctx context.Context) MongoDbInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbInstanceMapOutput)
}

type MongoDbInstanceOutput struct{ *pulumi.OutputState }

func (MongoDbInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbInstance)(nil)).Elem()
}

func (o MongoDbInstanceOutput) ToMongoDbInstanceOutput() MongoDbInstanceOutput {
	return o
}

func (o MongoDbInstanceOutput) ToMongoDbInstanceOutputWithContext(ctx context.Context) MongoDbInstanceOutput {
	return o
}

// The date and time of the creation of the MongoDB® instance.
func (o MongoDbInstanceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbInstance) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Whether automatic snapshot scheduling is enabled.
func (o MongoDbInstanceOutput) IsSnapshotScheduleEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *MongoDbInstance) pulumi.BoolOutput { return v.IsSnapshotScheduleEnabled }).(pulumi.BoolOutput)
}

// Name of the MongoDB® instance.
func (o MongoDbInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Number of nodes in the instance
func (o MongoDbInstanceOutput) NodeNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *MongoDbInstance) pulumi.IntOutput { return v.NodeNumber }).(pulumi.IntOutput)
}

// The type of MongoDB® intance to create.
func (o MongoDbInstanceOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbInstance) pulumi.StringOutput { return v.NodeType }).(pulumi.StringOutput)
}

// Password of the user.
func (o MongoDbInstanceOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbInstance) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The private IPv4 address associated with the instance.
func (o MongoDbInstanceOutput) PrivateIps() MongoDbInstancePrivateIpArrayOutput {
	return o.ApplyT(func(v *MongoDbInstance) MongoDbInstancePrivateIpArrayOutput { return v.PrivateIps }).(MongoDbInstancePrivateIpArrayOutput)
}

// Private Network endpoints of the Database Instance.
func (o MongoDbInstanceOutput) PrivateNetwork() MongoDbInstancePrivateNetworkPtrOutput {
	return o.ApplyT(func(v *MongoDbInstance) MongoDbInstancePrivateNetworkPtrOutput { return v.PrivateNetwork }).(MongoDbInstancePrivateNetworkPtrOutput)
}

// `projectId`) The ID of the project the MongoDB® instance is associated with.
func (o MongoDbInstanceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbInstance) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Public network endpoint configuration (no arguments).
func (o MongoDbInstanceOutput) PublicNetwork() MongoDbInstancePublicNetworkOutput {
	return o.ApplyT(func(v *MongoDbInstance) MongoDbInstancePublicNetworkOutput { return v.PublicNetwork }).(MongoDbInstancePublicNetworkOutput)
}

// `region`) The region in which the MongoDB® instance should be created.
func (o MongoDbInstanceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbInstance) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Map of settings to define for the instance.
func (o MongoDbInstanceOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MongoDbInstance) pulumi.StringMapOutput { return v.Settings }).(pulumi.StringMapOutput)
}

// Snapshot ID to restore the MongoDB® instance from.
func (o MongoDbInstanceOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbInstance) pulumi.StringPtrOutput { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// Snapshot schedule frequency in hours.
func (o MongoDbInstanceOutput) SnapshotScheduleFrequencyHours() pulumi.IntOutput {
	return o.ApplyT(func(v *MongoDbInstance) pulumi.IntOutput { return v.SnapshotScheduleFrequencyHours }).(pulumi.IntOutput)
}

// Snapshot schedule retention in days.
func (o MongoDbInstanceOutput) SnapshotScheduleRetentionDays() pulumi.IntOutput {
	return o.ApplyT(func(v *MongoDbInstance) pulumi.IntOutput { return v.SnapshotScheduleRetentionDays }).(pulumi.IntOutput)
}

// List of tags attached to the MongoDB® instance.
func (o MongoDbInstanceOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MongoDbInstance) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The PEM-encoded TLS certificate for the MongoDB® instance, if available.
func (o MongoDbInstanceOutput) TlsCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbInstance) pulumi.StringOutput { return v.TlsCertificate }).(pulumi.StringOutput)
}

// The date and time of the last update of the MongoDB® instance.
func (o MongoDbInstanceOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbInstance) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Name of the user created when the intance is created.
func (o MongoDbInstanceOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbInstance) pulumi.StringPtrOutput { return v.UserName }).(pulumi.StringPtrOutput)
}

// MongoDB® version of the instance.
func (o MongoDbInstanceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbInstance) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// Volume size in GB.
func (o MongoDbInstanceOutput) VolumeSizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v *MongoDbInstance) pulumi.IntOutput { return v.VolumeSizeInGb }).(pulumi.IntOutput)
}

// Volume type of the instance.
func (o MongoDbInstanceOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbInstance) pulumi.StringPtrOutput { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type MongoDbInstanceArrayOutput struct{ *pulumi.OutputState }

func (MongoDbInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongoDbInstance)(nil)).Elem()
}

func (o MongoDbInstanceArrayOutput) ToMongoDbInstanceArrayOutput() MongoDbInstanceArrayOutput {
	return o
}

func (o MongoDbInstanceArrayOutput) ToMongoDbInstanceArrayOutputWithContext(ctx context.Context) MongoDbInstanceArrayOutput {
	return o
}

func (o MongoDbInstanceArrayOutput) Index(i pulumi.IntInput) MongoDbInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MongoDbInstance {
		return vs[0].([]*MongoDbInstance)[vs[1].(int)]
	}).(MongoDbInstanceOutput)
}

type MongoDbInstanceMapOutput struct{ *pulumi.OutputState }

func (MongoDbInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongoDbInstance)(nil)).Elem()
}

func (o MongoDbInstanceMapOutput) ToMongoDbInstanceMapOutput() MongoDbInstanceMapOutput {
	return o
}

func (o MongoDbInstanceMapOutput) ToMongoDbInstanceMapOutputWithContext(ctx context.Context) MongoDbInstanceMapOutput {
	return o
}

func (o MongoDbInstanceMapOutput) MapIndex(k pulumi.StringInput) MongoDbInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MongoDbInstance {
		return vs[0].(map[string]*MongoDbInstance)[vs[1].(string)]
	}).(MongoDbInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MongoDbInstanceInput)(nil)).Elem(), &MongoDbInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongoDbInstanceArrayInput)(nil)).Elem(), MongoDbInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongoDbInstanceMapInput)(nil)).Elem(), MongoDbInstanceMap{})
	pulumi.RegisterOutputType(MongoDbInstanceOutput{})
	pulumi.RegisterOutputType(MongoDbInstanceArrayOutput{})
	pulumi.RegisterOutputType(MongoDbInstanceMapOutput{})
}
