// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway MongoDB® snapshots.
// For more information refer to the [product documentation](https://www.scaleway.com/en/docs/managed-mongodb-databases/).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/mongodb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodb.NewSnapshot(ctx, "main", &mongodb.SnapshotArgs{
//				InstanceId: pulumi.Any(mainScalewayMongodbInstance.Id),
//				Name:       pulumi.String("name-snapshot"),
//				ExpiresAt:  pulumi.String("2024-12-31T23:59:59Z"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// MongoDB® snapshots can be imported using the `{region}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/mongoDbSnapshot:MongoDbSnapshot main fr-par/11111111-1111-1111-1111-111111111111
// ```
//
// Deprecated: scaleway.index/mongodbsnapshot.MongoDbSnapshot has been deprecated in favor of scaleway.mongodb/snapshot.Snapshot
type MongoDbSnapshot struct {
	pulumi.CustomResourceState

	// The date and time when the MongoDB® snapshot was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The expiration date of the MongoDB® snapshot in ISO 8601 format (e.g. `2024-12-31T23:59:59Z`).
	//
	// > **Important:** Once set, `expiresAt` cannot be removed.
	ExpiresAt pulumi.StringOutput `pulumi:"expiresAt"`
	// The ID of the MongoDB® instance from which the snapshot was created.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The name of the MongoDB® instance from which the snapshot was created.
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// The name of the MongoDB® snapshot.
	Name pulumi.StringOutput `pulumi:"name"`
	// The type of node associated with the MongoDB® snapshot.
	NodeType pulumi.StringOutput `pulumi:"nodeType"`
	// `region`) The region in which the MongoDB® snapshot should be created.
	Region pulumi.StringOutput `pulumi:"region"`
	// The size of the MongoDB® snapshot in bytes.
	Size pulumi.IntOutput `pulumi:"size"`
	// The date and time of the last update of the MongoDB® snapshot.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The type of volume used for the MongoDB® snapshot.
	VolumeType pulumi.StringOutput `pulumi:"volumeType"`
}

// NewMongoDbSnapshot registers a new resource with the given unique name, arguments, and options.
func NewMongoDbSnapshot(ctx *pulumi.Context,
	name string, args *MongoDbSnapshotArgs, opts ...pulumi.ResourceOption) (*MongoDbSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExpiresAt == nil {
		return nil, errors.New("invalid value for required argument 'ExpiresAt'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MongoDbSnapshot
	err := ctx.RegisterResource("scaleway:index/mongoDbSnapshot:MongoDbSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMongoDbSnapshot gets an existing MongoDbSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMongoDbSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MongoDbSnapshotState, opts ...pulumi.ResourceOption) (*MongoDbSnapshot, error) {
	var resource MongoDbSnapshot
	err := ctx.ReadResource("scaleway:index/mongoDbSnapshot:MongoDbSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MongoDbSnapshot resources.
type mongoDbSnapshotState struct {
	// The date and time when the MongoDB® snapshot was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The expiration date of the MongoDB® snapshot in ISO 8601 format (e.g. `2024-12-31T23:59:59Z`).
	//
	// > **Important:** Once set, `expiresAt` cannot be removed.
	ExpiresAt *string `pulumi:"expiresAt"`
	// The ID of the MongoDB® instance from which the snapshot was created.
	InstanceId *string `pulumi:"instanceId"`
	// The name of the MongoDB® instance from which the snapshot was created.
	InstanceName *string `pulumi:"instanceName"`
	// The name of the MongoDB® snapshot.
	Name *string `pulumi:"name"`
	// The type of node associated with the MongoDB® snapshot.
	NodeType *string `pulumi:"nodeType"`
	// `region`) The region in which the MongoDB® snapshot should be created.
	Region *string `pulumi:"region"`
	// The size of the MongoDB® snapshot in bytes.
	Size *int `pulumi:"size"`
	// The date and time of the last update of the MongoDB® snapshot.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The type of volume used for the MongoDB® snapshot.
	VolumeType *string `pulumi:"volumeType"`
}

type MongoDbSnapshotState struct {
	// The date and time when the MongoDB® snapshot was created.
	CreatedAt pulumi.StringPtrInput
	// The expiration date of the MongoDB® snapshot in ISO 8601 format (e.g. `2024-12-31T23:59:59Z`).
	//
	// > **Important:** Once set, `expiresAt` cannot be removed.
	ExpiresAt pulumi.StringPtrInput
	// The ID of the MongoDB® instance from which the snapshot was created.
	InstanceId pulumi.StringPtrInput
	// The name of the MongoDB® instance from which the snapshot was created.
	InstanceName pulumi.StringPtrInput
	// The name of the MongoDB® snapshot.
	Name pulumi.StringPtrInput
	// The type of node associated with the MongoDB® snapshot.
	NodeType pulumi.StringPtrInput
	// `region`) The region in which the MongoDB® snapshot should be created.
	Region pulumi.StringPtrInput
	// The size of the MongoDB® snapshot in bytes.
	Size pulumi.IntPtrInput
	// The date and time of the last update of the MongoDB® snapshot.
	UpdatedAt pulumi.StringPtrInput
	// The type of volume used for the MongoDB® snapshot.
	VolumeType pulumi.StringPtrInput
}

func (MongoDbSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*mongoDbSnapshotState)(nil)).Elem()
}

type mongoDbSnapshotArgs struct {
	// The expiration date of the MongoDB® snapshot in ISO 8601 format (e.g. `2024-12-31T23:59:59Z`).
	//
	// > **Important:** Once set, `expiresAt` cannot be removed.
	ExpiresAt string `pulumi:"expiresAt"`
	// The ID of the MongoDB® instance from which the snapshot was created.
	InstanceId string `pulumi:"instanceId"`
	// The name of the MongoDB® snapshot.
	Name *string `pulumi:"name"`
	// `region`) The region in which the MongoDB® snapshot should be created.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a MongoDbSnapshot resource.
type MongoDbSnapshotArgs struct {
	// The expiration date of the MongoDB® snapshot in ISO 8601 format (e.g. `2024-12-31T23:59:59Z`).
	//
	// > **Important:** Once set, `expiresAt` cannot be removed.
	ExpiresAt pulumi.StringInput
	// The ID of the MongoDB® instance from which the snapshot was created.
	InstanceId pulumi.StringInput
	// The name of the MongoDB® snapshot.
	Name pulumi.StringPtrInput
	// `region`) The region in which the MongoDB® snapshot should be created.
	Region pulumi.StringPtrInput
}

func (MongoDbSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mongoDbSnapshotArgs)(nil)).Elem()
}

type MongoDbSnapshotInput interface {
	pulumi.Input

	ToMongoDbSnapshotOutput() MongoDbSnapshotOutput
	ToMongoDbSnapshotOutputWithContext(ctx context.Context) MongoDbSnapshotOutput
}

func (*MongoDbSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbSnapshot)(nil)).Elem()
}

func (i *MongoDbSnapshot) ToMongoDbSnapshotOutput() MongoDbSnapshotOutput {
	return i.ToMongoDbSnapshotOutputWithContext(context.Background())
}

func (i *MongoDbSnapshot) ToMongoDbSnapshotOutputWithContext(ctx context.Context) MongoDbSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbSnapshotOutput)
}

// MongoDbSnapshotArrayInput is an input type that accepts MongoDbSnapshotArray and MongoDbSnapshotArrayOutput values.
// You can construct a concrete instance of `MongoDbSnapshotArrayInput` via:
//
//	MongoDbSnapshotArray{ MongoDbSnapshotArgs{...} }
type MongoDbSnapshotArrayInput interface {
	pulumi.Input

	ToMongoDbSnapshotArrayOutput() MongoDbSnapshotArrayOutput
	ToMongoDbSnapshotArrayOutputWithContext(context.Context) MongoDbSnapshotArrayOutput
}

type MongoDbSnapshotArray []MongoDbSnapshotInput

func (MongoDbSnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongoDbSnapshot)(nil)).Elem()
}

func (i MongoDbSnapshotArray) ToMongoDbSnapshotArrayOutput() MongoDbSnapshotArrayOutput {
	return i.ToMongoDbSnapshotArrayOutputWithContext(context.Background())
}

func (i MongoDbSnapshotArray) ToMongoDbSnapshotArrayOutputWithContext(ctx context.Context) MongoDbSnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbSnapshotArrayOutput)
}

// MongoDbSnapshotMapInput is an input type that accepts MongoDbSnapshotMap and MongoDbSnapshotMapOutput values.
// You can construct a concrete instance of `MongoDbSnapshotMapInput` via:
//
//	MongoDbSnapshotMap{ "key": MongoDbSnapshotArgs{...} }
type MongoDbSnapshotMapInput interface {
	pulumi.Input

	ToMongoDbSnapshotMapOutput() MongoDbSnapshotMapOutput
	ToMongoDbSnapshotMapOutputWithContext(context.Context) MongoDbSnapshotMapOutput
}

type MongoDbSnapshotMap map[string]MongoDbSnapshotInput

func (MongoDbSnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongoDbSnapshot)(nil)).Elem()
}

func (i MongoDbSnapshotMap) ToMongoDbSnapshotMapOutput() MongoDbSnapshotMapOutput {
	return i.ToMongoDbSnapshotMapOutputWithContext(context.Background())
}

func (i MongoDbSnapshotMap) ToMongoDbSnapshotMapOutputWithContext(ctx context.Context) MongoDbSnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbSnapshotMapOutput)
}

type MongoDbSnapshotOutput struct{ *pulumi.OutputState }

func (MongoDbSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbSnapshot)(nil)).Elem()
}

func (o MongoDbSnapshotOutput) ToMongoDbSnapshotOutput() MongoDbSnapshotOutput {
	return o
}

func (o MongoDbSnapshotOutput) ToMongoDbSnapshotOutputWithContext(ctx context.Context) MongoDbSnapshotOutput {
	return o
}

// The date and time when the MongoDB® snapshot was created.
func (o MongoDbSnapshotOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbSnapshot) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The expiration date of the MongoDB® snapshot in ISO 8601 format (e.g. `2024-12-31T23:59:59Z`).
//
// > **Important:** Once set, `expiresAt` cannot be removed.
func (o MongoDbSnapshotOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbSnapshot) pulumi.StringOutput { return v.ExpiresAt }).(pulumi.StringOutput)
}

// The ID of the MongoDB® instance from which the snapshot was created.
func (o MongoDbSnapshotOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbSnapshot) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of the MongoDB® instance from which the snapshot was created.
func (o MongoDbSnapshotOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbSnapshot) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// The name of the MongoDB® snapshot.
func (o MongoDbSnapshotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbSnapshot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The type of node associated with the MongoDB® snapshot.
func (o MongoDbSnapshotOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbSnapshot) pulumi.StringOutput { return v.NodeType }).(pulumi.StringOutput)
}

// `region`) The region in which the MongoDB® snapshot should be created.
func (o MongoDbSnapshotOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbSnapshot) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The size of the MongoDB® snapshot in bytes.
func (o MongoDbSnapshotOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *MongoDbSnapshot) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// The date and time of the last update of the MongoDB® snapshot.
func (o MongoDbSnapshotOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbSnapshot) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The type of volume used for the MongoDB® snapshot.
func (o MongoDbSnapshotOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbSnapshot) pulumi.StringOutput { return v.VolumeType }).(pulumi.StringOutput)
}

type MongoDbSnapshotArrayOutput struct{ *pulumi.OutputState }

func (MongoDbSnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongoDbSnapshot)(nil)).Elem()
}

func (o MongoDbSnapshotArrayOutput) ToMongoDbSnapshotArrayOutput() MongoDbSnapshotArrayOutput {
	return o
}

func (o MongoDbSnapshotArrayOutput) ToMongoDbSnapshotArrayOutputWithContext(ctx context.Context) MongoDbSnapshotArrayOutput {
	return o
}

func (o MongoDbSnapshotArrayOutput) Index(i pulumi.IntInput) MongoDbSnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MongoDbSnapshot {
		return vs[0].([]*MongoDbSnapshot)[vs[1].(int)]
	}).(MongoDbSnapshotOutput)
}

type MongoDbSnapshotMapOutput struct{ *pulumi.OutputState }

func (MongoDbSnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongoDbSnapshot)(nil)).Elem()
}

func (o MongoDbSnapshotMapOutput) ToMongoDbSnapshotMapOutput() MongoDbSnapshotMapOutput {
	return o
}

func (o MongoDbSnapshotMapOutput) ToMongoDbSnapshotMapOutputWithContext(ctx context.Context) MongoDbSnapshotMapOutput {
	return o
}

func (o MongoDbSnapshotMapOutput) MapIndex(k pulumi.StringInput) MongoDbSnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MongoDbSnapshot {
		return vs[0].(map[string]*MongoDbSnapshot)[vs[1].(string)]
	}).(MongoDbSnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MongoDbSnapshotInput)(nil)).Elem(), &MongoDbSnapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongoDbSnapshotArrayInput)(nil)).Elem(), MongoDbSnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongoDbSnapshotMapInput)(nil)).Elem(), MongoDbSnapshotMap{})
	pulumi.RegisterOutputType(MongoDbSnapshotOutput{})
	pulumi.RegisterOutputType(MongoDbSnapshotArrayOutput{})
	pulumi.RegisterOutputType(MongoDbSnapshotMapOutput{})
}
