// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway MongoDB® snapshots.
// For more information refer to the [product documentation](https://www.scaleway.com/en/docs/managed-mongodb-databases/).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/mongodb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodb.NewSnapshot(ctx, "main", &mongodb.SnapshotArgs{
//				InstanceId: pulumi.Any(mainScalewayMongodbInstance.Id),
//				Name:       pulumi.String("name-snapshot"),
//				ExpiresAt:  pulumi.String("2024-12-31T23:59:59Z"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// MongoDB® snapshots can be imported using the `{region}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:mongodb/snapshot:Snapshot main fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type Snapshot struct {
	pulumi.CustomResourceState

	// The date and time when the MongoDB® snapshot was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The expiration date of the MongoDB® snapshot in ISO 8601 format (e.g. `2024-12-31T23:59:59Z`).
	//
	// > **Important:** Once set, `expiresAt` cannot be removed.
	ExpiresAt pulumi.StringOutput `pulumi:"expiresAt"`
	// The ID of the MongoDB® instance from which the snapshot was created.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The name of the MongoDB® instance from which the snapshot was created.
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// The name of the MongoDB® snapshot.
	Name pulumi.StringOutput `pulumi:"name"`
	// The type of node associated with the MongoDB® snapshot.
	NodeType pulumi.StringOutput `pulumi:"nodeType"`
	// `region`) The region in which the MongoDB® snapshot should be created.
	Region pulumi.StringOutput `pulumi:"region"`
	// The size of the MongoDB® snapshot in bytes.
	Size pulumi.IntOutput `pulumi:"size"`
	// The date and time of the last update of the MongoDB® snapshot.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The type of volume used for the MongoDB® snapshot.
	VolumeType pulumi.StringOutput `pulumi:"volumeType"`
}

// NewSnapshot registers a new resource with the given unique name, arguments, and options.
func NewSnapshot(ctx *pulumi.Context,
	name string, args *SnapshotArgs, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExpiresAt == nil {
		return nil, errors.New("invalid value for required argument 'ExpiresAt'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/mongoDbSnapshot:MongoDbSnapshot"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Snapshot
	err := ctx.RegisterResource("scaleway:mongodb/snapshot:Snapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshot gets an existing Snapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotState, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	var resource Snapshot
	err := ctx.ReadResource("scaleway:mongodb/snapshot:Snapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Snapshot resources.
type snapshotState struct {
	// The date and time when the MongoDB® snapshot was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The expiration date of the MongoDB® snapshot in ISO 8601 format (e.g. `2024-12-31T23:59:59Z`).
	//
	// > **Important:** Once set, `expiresAt` cannot be removed.
	ExpiresAt *string `pulumi:"expiresAt"`
	// The ID of the MongoDB® instance from which the snapshot was created.
	InstanceId *string `pulumi:"instanceId"`
	// The name of the MongoDB® instance from which the snapshot was created.
	InstanceName *string `pulumi:"instanceName"`
	// The name of the MongoDB® snapshot.
	Name *string `pulumi:"name"`
	// The type of node associated with the MongoDB® snapshot.
	NodeType *string `pulumi:"nodeType"`
	// `region`) The region in which the MongoDB® snapshot should be created.
	Region *string `pulumi:"region"`
	// The size of the MongoDB® snapshot in bytes.
	Size *int `pulumi:"size"`
	// The date and time of the last update of the MongoDB® snapshot.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The type of volume used for the MongoDB® snapshot.
	VolumeType *string `pulumi:"volumeType"`
}

type SnapshotState struct {
	// The date and time when the MongoDB® snapshot was created.
	CreatedAt pulumi.StringPtrInput
	// The expiration date of the MongoDB® snapshot in ISO 8601 format (e.g. `2024-12-31T23:59:59Z`).
	//
	// > **Important:** Once set, `expiresAt` cannot be removed.
	ExpiresAt pulumi.StringPtrInput
	// The ID of the MongoDB® instance from which the snapshot was created.
	InstanceId pulumi.StringPtrInput
	// The name of the MongoDB® instance from which the snapshot was created.
	InstanceName pulumi.StringPtrInput
	// The name of the MongoDB® snapshot.
	Name pulumi.StringPtrInput
	// The type of node associated with the MongoDB® snapshot.
	NodeType pulumi.StringPtrInput
	// `region`) The region in which the MongoDB® snapshot should be created.
	Region pulumi.StringPtrInput
	// The size of the MongoDB® snapshot in bytes.
	Size pulumi.IntPtrInput
	// The date and time of the last update of the MongoDB® snapshot.
	UpdatedAt pulumi.StringPtrInput
	// The type of volume used for the MongoDB® snapshot.
	VolumeType pulumi.StringPtrInput
}

func (SnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotState)(nil)).Elem()
}

type snapshotArgs struct {
	// The expiration date of the MongoDB® snapshot in ISO 8601 format (e.g. `2024-12-31T23:59:59Z`).
	//
	// > **Important:** Once set, `expiresAt` cannot be removed.
	ExpiresAt string `pulumi:"expiresAt"`
	// The ID of the MongoDB® instance from which the snapshot was created.
	InstanceId string `pulumi:"instanceId"`
	// The name of the MongoDB® snapshot.
	Name *string `pulumi:"name"`
	// `region`) The region in which the MongoDB® snapshot should be created.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a Snapshot resource.
type SnapshotArgs struct {
	// The expiration date of the MongoDB® snapshot in ISO 8601 format (e.g. `2024-12-31T23:59:59Z`).
	//
	// > **Important:** Once set, `expiresAt` cannot be removed.
	ExpiresAt pulumi.StringInput
	// The ID of the MongoDB® instance from which the snapshot was created.
	InstanceId pulumi.StringInput
	// The name of the MongoDB® snapshot.
	Name pulumi.StringPtrInput
	// `region`) The region in which the MongoDB® snapshot should be created.
	Region pulumi.StringPtrInput
}

func (SnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotArgs)(nil)).Elem()
}

type SnapshotInput interface {
	pulumi.Input

	ToSnapshotOutput() SnapshotOutput
	ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput
}

func (*Snapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshot)(nil)).Elem()
}

func (i *Snapshot) ToSnapshotOutput() SnapshotOutput {
	return i.ToSnapshotOutputWithContext(context.Background())
}

func (i *Snapshot) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotOutput)
}

// SnapshotArrayInput is an input type that accepts SnapshotArray and SnapshotArrayOutput values.
// You can construct a concrete instance of `SnapshotArrayInput` via:
//
//	SnapshotArray{ SnapshotArgs{...} }
type SnapshotArrayInput interface {
	pulumi.Input

	ToSnapshotArrayOutput() SnapshotArrayOutput
	ToSnapshotArrayOutputWithContext(context.Context) SnapshotArrayOutput
}

type SnapshotArray []SnapshotInput

func (SnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snapshot)(nil)).Elem()
}

func (i SnapshotArray) ToSnapshotArrayOutput() SnapshotArrayOutput {
	return i.ToSnapshotArrayOutputWithContext(context.Background())
}

func (i SnapshotArray) ToSnapshotArrayOutputWithContext(ctx context.Context) SnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotArrayOutput)
}

// SnapshotMapInput is an input type that accepts SnapshotMap and SnapshotMapOutput values.
// You can construct a concrete instance of `SnapshotMapInput` via:
//
//	SnapshotMap{ "key": SnapshotArgs{...} }
type SnapshotMapInput interface {
	pulumi.Input

	ToSnapshotMapOutput() SnapshotMapOutput
	ToSnapshotMapOutputWithContext(context.Context) SnapshotMapOutput
}

type SnapshotMap map[string]SnapshotInput

func (SnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snapshot)(nil)).Elem()
}

func (i SnapshotMap) ToSnapshotMapOutput() SnapshotMapOutput {
	return i.ToSnapshotMapOutputWithContext(context.Background())
}

func (i SnapshotMap) ToSnapshotMapOutputWithContext(ctx context.Context) SnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotMapOutput)
}

type SnapshotOutput struct{ *pulumi.OutputState }

func (SnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshot)(nil)).Elem()
}

func (o SnapshotOutput) ToSnapshotOutput() SnapshotOutput {
	return o
}

func (o SnapshotOutput) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return o
}

// The date and time when the MongoDB® snapshot was created.
func (o SnapshotOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The expiration date of the MongoDB® snapshot in ISO 8601 format (e.g. `2024-12-31T23:59:59Z`).
//
// > **Important:** Once set, `expiresAt` cannot be removed.
func (o SnapshotOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.ExpiresAt }).(pulumi.StringOutput)
}

// The ID of the MongoDB® instance from which the snapshot was created.
func (o SnapshotOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of the MongoDB® instance from which the snapshot was created.
func (o SnapshotOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// The name of the MongoDB® snapshot.
func (o SnapshotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The type of node associated with the MongoDB® snapshot.
func (o SnapshotOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.NodeType }).(pulumi.StringOutput)
}

// `region`) The region in which the MongoDB® snapshot should be created.
func (o SnapshotOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The size of the MongoDB® snapshot in bytes.
func (o SnapshotOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// The date and time of the last update of the MongoDB® snapshot.
func (o SnapshotOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The type of volume used for the MongoDB® snapshot.
func (o SnapshotOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.VolumeType }).(pulumi.StringOutput)
}

type SnapshotArrayOutput struct{ *pulumi.OutputState }

func (SnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snapshot)(nil)).Elem()
}

func (o SnapshotArrayOutput) ToSnapshotArrayOutput() SnapshotArrayOutput {
	return o
}

func (o SnapshotArrayOutput) ToSnapshotArrayOutputWithContext(ctx context.Context) SnapshotArrayOutput {
	return o
}

func (o SnapshotArrayOutput) Index(i pulumi.IntInput) SnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Snapshot {
		return vs[0].([]*Snapshot)[vs[1].(int)]
	}).(SnapshotOutput)
}

type SnapshotMapOutput struct{ *pulumi.OutputState }

func (SnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snapshot)(nil)).Elem()
}

func (o SnapshotMapOutput) ToSnapshotMapOutput() SnapshotMapOutput {
	return o
}

func (o SnapshotMapOutput) ToSnapshotMapOutputWithContext(ctx context.Context) SnapshotMapOutput {
	return o
}

func (o SnapshotMapOutput) MapIndex(k pulumi.StringInput) SnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Snapshot {
		return vs[0].(map[string]*Snapshot)[vs[1].(string)]
	}).(SnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotInput)(nil)).Elem(), &Snapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotArrayInput)(nil)).Elem(), SnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotMapInput)(nil)).Elem(), SnapshotMap{})
	pulumi.RegisterOutputType(SnapshotOutput{})
	pulumi.RegisterOutputType(SnapshotArrayOutput{})
	pulumi.RegisterOutputType(SnapshotMapOutput{})
}
