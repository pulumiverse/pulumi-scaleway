// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway VPC ACLs.
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/network"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			vpc01, err := network.NewVpc(ctx, "vpc01", &network.VpcArgs{
//				Name: pulumi.String("tf-vpc-acl"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewAcl(ctx, "acl01", &network.AclArgs{
//				VpcId:  vpc01.ID(),
//				IsIpv6: pulumi.Bool(false),
//				Rules: network.AclRuleArray{
//					&network.AclRuleArgs{
//						Protocol:    pulumi.String("TCP"),
//						SrcPortLow:  pulumi.Int(0),
//						SrcPortHigh: pulumi.Int(0),
//						DstPortLow:  pulumi.Int(80),
//						DstPortHigh: pulumi.Int(80),
//						Source:      pulumi.String("0.0.0.0/0"),
//						Destination: pulumi.String("0.0.0.0/0"),
//						Description: pulumi.String("Allow HTTP traffic from any source"),
//						Action:      pulumi.String("accept"),
//					},
//				},
//				DefaultPolicy: pulumi.String("drop"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ACLs can be imported using `{region}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:network/acl:Acl main fr-par/11111111-1111-1111-1111-111111111111
// ```
type Acl struct {
	pulumi.CustomResourceState

	// The action to take for packets which do not match any rules.
	DefaultPolicy pulumi.StringPtrOutput `pulumi:"defaultPolicy"`
	// Defines whether this set of ACL rules is for IPv6 (false = IPv4). Each Network ACL can have rules for only one IP type.
	IsIpv6 pulumi.BoolPtrOutput `pulumi:"isIpv6"`
	// `region`) The region of the ACL.
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// The list of Network ACL rules.
	Rules AclRuleArrayOutput `pulumi:"rules"`
	// The VPC ID the ACL belongs to.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewAcl registers a new resource with the given unique name, arguments, and options.
func NewAcl(ctx *pulumi.Context,
	name string, args *AclArgs, opts ...pulumi.ResourceOption) (*Acl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Acl
	err := ctx.RegisterResource("scaleway:network/acl:Acl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAcl gets an existing Acl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AclState, opts ...pulumi.ResourceOption) (*Acl, error) {
	var resource Acl
	err := ctx.ReadResource("scaleway:network/acl:Acl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Acl resources.
type aclState struct {
	// The action to take for packets which do not match any rules.
	DefaultPolicy *string `pulumi:"defaultPolicy"`
	// Defines whether this set of ACL rules is for IPv6 (false = IPv4). Each Network ACL can have rules for only one IP type.
	IsIpv6 *bool `pulumi:"isIpv6"`
	// `region`) The region of the ACL.
	Region *string `pulumi:"region"`
	// The list of Network ACL rules.
	Rules []AclRule `pulumi:"rules"`
	// The VPC ID the ACL belongs to.
	VpcId *string `pulumi:"vpcId"`
}

type AclState struct {
	// The action to take for packets which do not match any rules.
	DefaultPolicy pulumi.StringPtrInput
	// Defines whether this set of ACL rules is for IPv6 (false = IPv4). Each Network ACL can have rules for only one IP type.
	IsIpv6 pulumi.BoolPtrInput
	// `region`) The region of the ACL.
	Region pulumi.StringPtrInput
	// The list of Network ACL rules.
	Rules AclRuleArrayInput
	// The VPC ID the ACL belongs to.
	VpcId pulumi.StringPtrInput
}

func (AclState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclState)(nil)).Elem()
}

type aclArgs struct {
	// The action to take for packets which do not match any rules.
	DefaultPolicy *string `pulumi:"defaultPolicy"`
	// Defines whether this set of ACL rules is for IPv6 (false = IPv4). Each Network ACL can have rules for only one IP type.
	IsIpv6 *bool `pulumi:"isIpv6"`
	// `region`) The region of the ACL.
	Region *string `pulumi:"region"`
	// The list of Network ACL rules.
	Rules []AclRule `pulumi:"rules"`
	// The VPC ID the ACL belongs to.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Acl resource.
type AclArgs struct {
	// The action to take for packets which do not match any rules.
	DefaultPolicy pulumi.StringPtrInput
	// Defines whether this set of ACL rules is for IPv6 (false = IPv4). Each Network ACL can have rules for only one IP type.
	IsIpv6 pulumi.BoolPtrInput
	// `region`) The region of the ACL.
	Region pulumi.StringPtrInput
	// The list of Network ACL rules.
	Rules AclRuleArrayInput
	// The VPC ID the ACL belongs to.
	VpcId pulumi.StringInput
}

func (AclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclArgs)(nil)).Elem()
}

type AclInput interface {
	pulumi.Input

	ToAclOutput() AclOutput
	ToAclOutputWithContext(ctx context.Context) AclOutput
}

func (*Acl) ElementType() reflect.Type {
	return reflect.TypeOf((**Acl)(nil)).Elem()
}

func (i *Acl) ToAclOutput() AclOutput {
	return i.ToAclOutputWithContext(context.Background())
}

func (i *Acl) ToAclOutputWithContext(ctx context.Context) AclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclOutput)
}

// AclArrayInput is an input type that accepts AclArray and AclArrayOutput values.
// You can construct a concrete instance of `AclArrayInput` via:
//
//	AclArray{ AclArgs{...} }
type AclArrayInput interface {
	pulumi.Input

	ToAclArrayOutput() AclArrayOutput
	ToAclArrayOutputWithContext(context.Context) AclArrayOutput
}

type AclArray []AclInput

func (AclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Acl)(nil)).Elem()
}

func (i AclArray) ToAclArrayOutput() AclArrayOutput {
	return i.ToAclArrayOutputWithContext(context.Background())
}

func (i AclArray) ToAclArrayOutputWithContext(ctx context.Context) AclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclArrayOutput)
}

// AclMapInput is an input type that accepts AclMap and AclMapOutput values.
// You can construct a concrete instance of `AclMapInput` via:
//
//	AclMap{ "key": AclArgs{...} }
type AclMapInput interface {
	pulumi.Input

	ToAclMapOutput() AclMapOutput
	ToAclMapOutputWithContext(context.Context) AclMapOutput
}

type AclMap map[string]AclInput

func (AclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Acl)(nil)).Elem()
}

func (i AclMap) ToAclMapOutput() AclMapOutput {
	return i.ToAclMapOutputWithContext(context.Background())
}

func (i AclMap) ToAclMapOutputWithContext(ctx context.Context) AclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclMapOutput)
}

type AclOutput struct{ *pulumi.OutputState }

func (AclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Acl)(nil)).Elem()
}

func (o AclOutput) ToAclOutput() AclOutput {
	return o
}

func (o AclOutput) ToAclOutputWithContext(ctx context.Context) AclOutput {
	return o
}

// The action to take for packets which do not match any rules.
func (o AclOutput) DefaultPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringPtrOutput { return v.DefaultPolicy }).(pulumi.StringPtrOutput)
}

// Defines whether this set of ACL rules is for IPv6 (false = IPv4). Each Network ACL can have rules for only one IP type.
func (o AclOutput) IsIpv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Acl) pulumi.BoolPtrOutput { return v.IsIpv6 }).(pulumi.BoolPtrOutput)
}

// `region`) The region of the ACL.
func (o AclOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// The list of Network ACL rules.
func (o AclOutput) Rules() AclRuleArrayOutput {
	return o.ApplyT(func(v *Acl) AclRuleArrayOutput { return v.Rules }).(AclRuleArrayOutput)
}

// The VPC ID the ACL belongs to.
func (o AclOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type AclArrayOutput struct{ *pulumi.OutputState }

func (AclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Acl)(nil)).Elem()
}

func (o AclArrayOutput) ToAclArrayOutput() AclArrayOutput {
	return o
}

func (o AclArrayOutput) ToAclArrayOutputWithContext(ctx context.Context) AclArrayOutput {
	return o
}

func (o AclArrayOutput) Index(i pulumi.IntInput) AclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Acl {
		return vs[0].([]*Acl)[vs[1].(int)]
	}).(AclOutput)
}

type AclMapOutput struct{ *pulumi.OutputState }

func (AclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Acl)(nil)).Elem()
}

func (o AclMapOutput) ToAclMapOutput() AclMapOutput {
	return o
}

func (o AclMapOutput) ToAclMapOutputWithContext(ctx context.Context) AclMapOutput {
	return o
}

func (o AclMapOutput) MapIndex(k pulumi.StringInput) AclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Acl {
		return vs[0].(map[string]*Acl)[vs[1].(string)]
	}).(AclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclInput)(nil)).Elem(), &Acl{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclArrayInput)(nil)).Elem(), AclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclMapInput)(nil)).Elem(), AclMap{})
	pulumi.RegisterOutputType(AclOutput{})
	pulumi.RegisterOutputType(AclArrayOutput{})
	pulumi.RegisterOutputType(AclMapOutput{})
}
