// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Gets information about a Public Gateway PAT rule. For further information, please see the
// [API documentation](https://www.scaleway.com/en/developers/api/public-gateway/#path-pat-rules-list-pat-rules).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/instance"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/network"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sg01, err := instance.NewSecurityGroup(ctx, "sg01", &instance.SecurityGroupArgs{
//				InboundDefaultPolicy:  pulumi.String("drop"),
//				OutboundDefaultPolicy: pulumi.String("accept"),
//				InboundRules: instance.SecurityGroupInboundRuleArray{
//					&instance.SecurityGroupInboundRuleArgs{
//						Action:   pulumi.String("accept"),
//						Port:     pulumi.Int(22),
//						Protocol: pulumi.String("TCP"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			srv01, err := instance.NewServer(ctx, "srv01", &instance.ServerArgs{
//				Name:            pulumi.String("my-server"),
//				Type:            pulumi.String("PLAY2-NANO"),
//				Image:           pulumi.String("ubuntu_jammy"),
//				SecurityGroupId: sg01.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			pn01, err := network.NewPrivateNetwork(ctx, "pn01", &network.PrivateNetworkArgs{
//				Name: pulumi.String("my-pn"),
//			})
//			if err != nil {
//				return err
//			}
//			pnic01, err := instance.NewPrivateNic(ctx, "pnic01", &instance.PrivateNicArgs{
//				ServerId:         srv01.ID(),
//				PrivateNetworkId: pn01.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			dhcp01, err := network.NewPublicGatewayDhcp(ctx, "dhcp01", &network.PublicGatewayDhcpArgs{
//				Subnet: pulumi.String("192.168.0.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			ip01, err := network.NewPublicGatewayIp(ctx, "ip01", nil)
//			if err != nil {
//				return err
//			}
//			pg01, err := network.NewPublicGateway(ctx, "pg01", &network.PublicGatewayArgs{
//				Name: pulumi.String("my-pg"),
//				Type: pulumi.String("VPC-GW-S"),
//				IpId: ip01.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			gn01, err := network.NewGatewayNetwork(ctx, "gn01", &network.GatewayNetworkArgs{
//				GatewayId:        pg01.ID(),
//				PrivateNetworkId: pn01.ID(),
//				DhcpId:           dhcp01.ID(),
//				CleanupDhcp:      pulumi.Bool(true),
//				EnableMasquerade: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			rsv01, err := network.NewPublicGatewayDhcpReservation(ctx, "rsv01", &network.PublicGatewayDhcpReservationArgs{
//				GatewayNetworkId: gn01.ID(),
//				MacAddress:       pnic01.MacAddress,
//				IpAddress:        pulumi.String("192.168.0.7"),
//			})
//			if err != nil {
//				return err
//			}
//			pat01, err := network.NewPublicGatewayPatRule(ctx, "pat01", &network.PublicGatewayPatRuleArgs{
//				GatewayId:   pg01.ID(),
//				PrivateIp:   rsv01.IpAddress,
//				PrivatePort: pulumi.Int(22),
//				PublicPort:  pulumi.Int(2202),
//				Protocol:    pulumi.String("tcp"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = network.LookupPublicGatewayPatRuleOutput(ctx, network.GetPublicGatewayPatRuleOutputArgs{
//				PatRuleId: pat01.ID(),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func LookupPublicGatewayPatRule(ctx *pulumi.Context, args *LookupPublicGatewayPatRuleArgs, opts ...pulumi.InvokeOption) (*LookupPublicGatewayPatRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPublicGatewayPatRuleResult
	err := ctx.Invoke("scaleway:network/getPublicGatewayPatRule:getPublicGatewayPatRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPublicGatewayPatRule.
type LookupPublicGatewayPatRuleArgs struct {
	// The ID of the PAT rule to retrieve
	PatRuleId string `pulumi:"patRuleId"`
	// `zone`) The zone in which
	// the rule exists.
	Zone *string `pulumi:"zone"`
}

// A collection of values returned by getPublicGatewayPatRule.
type LookupPublicGatewayPatRuleResult struct {
	CreatedAt string `pulumi:"createdAt"`
	// The ID of the Public Gateway.
	GatewayId string `pulumi:"gatewayId"`
	// The provider-assigned unique ID for this managed resource.
	Id             string `pulumi:"id"`
	OrganizationId string `pulumi:"organizationId"`
	PatRuleId      string `pulumi:"patRuleId"`
	// The private IP address to forward data to.
	PrivateIp string `pulumi:"privateIp"`
	// The private port to translate to.
	PrivatePort int `pulumi:"privatePort"`
	// The protocol the rule should apply to. Possible values are `both`, `tcp` and `udp`.
	Protocol string `pulumi:"protocol"`
	// The public port to listen on.
	PublicPort int     `pulumi:"publicPort"`
	UpdatedAt  string  `pulumi:"updatedAt"`
	Zone       *string `pulumi:"zone"`
}

func LookupPublicGatewayPatRuleOutput(ctx *pulumi.Context, args LookupPublicGatewayPatRuleOutputArgs, opts ...pulumi.InvokeOption) LookupPublicGatewayPatRuleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPublicGatewayPatRuleResultOutput, error) {
			args := v.(LookupPublicGatewayPatRuleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("scaleway:network/getPublicGatewayPatRule:getPublicGatewayPatRule", args, LookupPublicGatewayPatRuleResultOutput{}, options).(LookupPublicGatewayPatRuleResultOutput), nil
		}).(LookupPublicGatewayPatRuleResultOutput)
}

// A collection of arguments for invoking getPublicGatewayPatRule.
type LookupPublicGatewayPatRuleOutputArgs struct {
	// The ID of the PAT rule to retrieve
	PatRuleId pulumi.StringInput `pulumi:"patRuleId"`
	// `zone`) The zone in which
	// the rule exists.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (LookupPublicGatewayPatRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPublicGatewayPatRuleArgs)(nil)).Elem()
}

// A collection of values returned by getPublicGatewayPatRule.
type LookupPublicGatewayPatRuleResultOutput struct{ *pulumi.OutputState }

func (LookupPublicGatewayPatRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPublicGatewayPatRuleResult)(nil)).Elem()
}

func (o LookupPublicGatewayPatRuleResultOutput) ToLookupPublicGatewayPatRuleResultOutput() LookupPublicGatewayPatRuleResultOutput {
	return o
}

func (o LookupPublicGatewayPatRuleResultOutput) ToLookupPublicGatewayPatRuleResultOutputWithContext(ctx context.Context) LookupPublicGatewayPatRuleResultOutput {
	return o
}

func (o LookupPublicGatewayPatRuleResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPublicGatewayPatRuleResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of the Public Gateway.
func (o LookupPublicGatewayPatRuleResultOutput) GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPublicGatewayPatRuleResult) string { return v.GatewayId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupPublicGatewayPatRuleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPublicGatewayPatRuleResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupPublicGatewayPatRuleResultOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPublicGatewayPatRuleResult) string { return v.OrganizationId }).(pulumi.StringOutput)
}

func (o LookupPublicGatewayPatRuleResultOutput) PatRuleId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPublicGatewayPatRuleResult) string { return v.PatRuleId }).(pulumi.StringOutput)
}

// The private IP address to forward data to.
func (o LookupPublicGatewayPatRuleResultOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPublicGatewayPatRuleResult) string { return v.PrivateIp }).(pulumi.StringOutput)
}

// The private port to translate to.
func (o LookupPublicGatewayPatRuleResultOutput) PrivatePort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPublicGatewayPatRuleResult) int { return v.PrivatePort }).(pulumi.IntOutput)
}

// The protocol the rule should apply to. Possible values are `both`, `tcp` and `udp`.
func (o LookupPublicGatewayPatRuleResultOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPublicGatewayPatRuleResult) string { return v.Protocol }).(pulumi.StringOutput)
}

// The public port to listen on.
func (o LookupPublicGatewayPatRuleResultOutput) PublicPort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPublicGatewayPatRuleResult) int { return v.PublicPort }).(pulumi.IntOutput)
}

func (o LookupPublicGatewayPatRuleResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPublicGatewayPatRuleResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func (o LookupPublicGatewayPatRuleResultOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPublicGatewayPatRuleResult) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPublicGatewayPatRuleResultOutput{})
}
