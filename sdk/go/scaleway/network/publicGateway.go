// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Public Gateways.
// For more information, see the [API documentation](https://www.scaleway.com/en/developers/api/public-gateway).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/network"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := network.NewPublicGateway(ctx, "main", &network.PublicGatewayArgs{
//				Name: pulumi.String("public_gateway_demo"),
//				Type: pulumi.String("VPC-GW-S"),
//				Tags: pulumi.StringArray{
//					pulumi.String("demo"),
//					pulumi.String("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Public Gateways can be imported using `{zone}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:network/publicGateway:PublicGateway main fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type PublicGateway struct {
	pulumi.CustomResourceState

	// Set a definitive list of IP ranges (in CIDR notation) allowed to connect to the SSH bastion.
	AllowedIpRanges pulumi.StringArrayOutput `pulumi:"allowedIpRanges"`
	// The bandwidth available of the gateway
	Bandwidth pulumi.IntOutput `pulumi:"bandwidth"`
	// Enable SSH bastion on the gateway.
	BastionEnabled pulumi.BoolPtrOutput `pulumi:"bastionEnabled"`
	// The port on which the SSH bastion will listen.
	BastionPort pulumi.IntOutput `pulumi:"bastionPort"`
	// The date and time of the creation of the Public Gateway.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Enable SMTP on the gateway.
	EnableSmtp pulumi.BoolOutput `pulumi:"enableSmtp"`
	// Attach an existing flexible IP to the gateway.
	IpId pulumi.StringOutput `pulumi:"ipId"`
	// Put a Public Gateway in IPAM mode, so that it can be used with the Public Gateways API v2
	MoveToIpam pulumi.BoolPtrOutput `pulumi:"moveToIpam"`
	// The name for the Public Gateway. If not provided it will be randomly generated.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Organization ID the Public Gateway is associated with.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// `projectId`) The ID of the project the public gateway is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Trigger a refresh of the SSH keys on the Public Gateway by changing this field's value.
	RefreshSshKeys pulumi.StringPtrOutput `pulumi:"refreshSshKeys"`
	// The status of the public gateway.
	Status pulumi.StringOutput `pulumi:"status"`
	// The tags to associate with the Public Gateway.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The gateway type.
	Type pulumi.StringOutput `pulumi:"type"`
	// The date and time of the last update of the Public Gateway.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// Override the gateway's default recursive DNS servers, if DNS features are enabled.
	UpstreamDnsServers pulumi.StringArrayOutput `pulumi:"upstreamDnsServers"`
	// `zone`) The zone in which the Public Gateway should be created.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewPublicGateway registers a new resource with the given unique name, arguments, and options.
func NewPublicGateway(ctx *pulumi.Context,
	name string, args *PublicGatewayArgs, opts ...pulumi.ResourceOption) (*PublicGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/vpcPublicGateway:VpcPublicGateway"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PublicGateway
	err := ctx.RegisterResource("scaleway:network/publicGateway:PublicGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPublicGateway gets an existing PublicGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPublicGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PublicGatewayState, opts ...pulumi.ResourceOption) (*PublicGateway, error) {
	var resource PublicGateway
	err := ctx.ReadResource("scaleway:network/publicGateway:PublicGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PublicGateway resources.
type publicGatewayState struct {
	// Set a definitive list of IP ranges (in CIDR notation) allowed to connect to the SSH bastion.
	AllowedIpRanges []string `pulumi:"allowedIpRanges"`
	// The bandwidth available of the gateway
	Bandwidth *int `pulumi:"bandwidth"`
	// Enable SSH bastion on the gateway.
	BastionEnabled *bool `pulumi:"bastionEnabled"`
	// The port on which the SSH bastion will listen.
	BastionPort *int `pulumi:"bastionPort"`
	// The date and time of the creation of the Public Gateway.
	CreatedAt *string `pulumi:"createdAt"`
	// Enable SMTP on the gateway.
	EnableSmtp *bool `pulumi:"enableSmtp"`
	// Attach an existing flexible IP to the gateway.
	IpId *string `pulumi:"ipId"`
	// Put a Public Gateway in IPAM mode, so that it can be used with the Public Gateways API v2
	MoveToIpam *bool `pulumi:"moveToIpam"`
	// The name for the Public Gateway. If not provided it will be randomly generated.
	Name *string `pulumi:"name"`
	// The Organization ID the Public Gateway is associated with.
	OrganizationId *string `pulumi:"organizationId"`
	// `projectId`) The ID of the project the public gateway is associated with.
	ProjectId *string `pulumi:"projectId"`
	// Trigger a refresh of the SSH keys on the Public Gateway by changing this field's value.
	RefreshSshKeys *string `pulumi:"refreshSshKeys"`
	// The status of the public gateway.
	Status *string `pulumi:"status"`
	// The tags to associate with the Public Gateway.
	Tags []string `pulumi:"tags"`
	// The gateway type.
	Type *string `pulumi:"type"`
	// The date and time of the last update of the Public Gateway.
	UpdatedAt *string `pulumi:"updatedAt"`
	// Override the gateway's default recursive DNS servers, if DNS features are enabled.
	UpstreamDnsServers []string `pulumi:"upstreamDnsServers"`
	// `zone`) The zone in which the Public Gateway should be created.
	Zone *string `pulumi:"zone"`
}

type PublicGatewayState struct {
	// Set a definitive list of IP ranges (in CIDR notation) allowed to connect to the SSH bastion.
	AllowedIpRanges pulumi.StringArrayInput
	// The bandwidth available of the gateway
	Bandwidth pulumi.IntPtrInput
	// Enable SSH bastion on the gateway.
	BastionEnabled pulumi.BoolPtrInput
	// The port on which the SSH bastion will listen.
	BastionPort pulumi.IntPtrInput
	// The date and time of the creation of the Public Gateway.
	CreatedAt pulumi.StringPtrInput
	// Enable SMTP on the gateway.
	EnableSmtp pulumi.BoolPtrInput
	// Attach an existing flexible IP to the gateway.
	IpId pulumi.StringPtrInput
	// Put a Public Gateway in IPAM mode, so that it can be used with the Public Gateways API v2
	MoveToIpam pulumi.BoolPtrInput
	// The name for the Public Gateway. If not provided it will be randomly generated.
	Name pulumi.StringPtrInput
	// The Organization ID the Public Gateway is associated with.
	OrganizationId pulumi.StringPtrInput
	// `projectId`) The ID of the project the public gateway is associated with.
	ProjectId pulumi.StringPtrInput
	// Trigger a refresh of the SSH keys on the Public Gateway by changing this field's value.
	RefreshSshKeys pulumi.StringPtrInput
	// The status of the public gateway.
	Status pulumi.StringPtrInput
	// The tags to associate with the Public Gateway.
	Tags pulumi.StringArrayInput
	// The gateway type.
	Type pulumi.StringPtrInput
	// The date and time of the last update of the Public Gateway.
	UpdatedAt pulumi.StringPtrInput
	// Override the gateway's default recursive DNS servers, if DNS features are enabled.
	UpstreamDnsServers pulumi.StringArrayInput
	// `zone`) The zone in which the Public Gateway should be created.
	Zone pulumi.StringPtrInput
}

func (PublicGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*publicGatewayState)(nil)).Elem()
}

type publicGatewayArgs struct {
	// Set a definitive list of IP ranges (in CIDR notation) allowed to connect to the SSH bastion.
	AllowedIpRanges []string `pulumi:"allowedIpRanges"`
	// Enable SSH bastion on the gateway.
	BastionEnabled *bool `pulumi:"bastionEnabled"`
	// The port on which the SSH bastion will listen.
	BastionPort *int `pulumi:"bastionPort"`
	// Enable SMTP on the gateway.
	EnableSmtp *bool `pulumi:"enableSmtp"`
	// Attach an existing flexible IP to the gateway.
	IpId *string `pulumi:"ipId"`
	// Put a Public Gateway in IPAM mode, so that it can be used with the Public Gateways API v2
	MoveToIpam *bool `pulumi:"moveToIpam"`
	// The name for the Public Gateway. If not provided it will be randomly generated.
	Name *string `pulumi:"name"`
	// `projectId`) The ID of the project the public gateway is associated with.
	ProjectId *string `pulumi:"projectId"`
	// Trigger a refresh of the SSH keys on the Public Gateway by changing this field's value.
	RefreshSshKeys *string `pulumi:"refreshSshKeys"`
	// The tags to associate with the Public Gateway.
	Tags []string `pulumi:"tags"`
	// The gateway type.
	Type string `pulumi:"type"`
	// `zone`) The zone in which the Public Gateway should be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a PublicGateway resource.
type PublicGatewayArgs struct {
	// Set a definitive list of IP ranges (in CIDR notation) allowed to connect to the SSH bastion.
	AllowedIpRanges pulumi.StringArrayInput
	// Enable SSH bastion on the gateway.
	BastionEnabled pulumi.BoolPtrInput
	// The port on which the SSH bastion will listen.
	BastionPort pulumi.IntPtrInput
	// Enable SMTP on the gateway.
	EnableSmtp pulumi.BoolPtrInput
	// Attach an existing flexible IP to the gateway.
	IpId pulumi.StringPtrInput
	// Put a Public Gateway in IPAM mode, so that it can be used with the Public Gateways API v2
	MoveToIpam pulumi.BoolPtrInput
	// The name for the Public Gateway. If not provided it will be randomly generated.
	Name pulumi.StringPtrInput
	// `projectId`) The ID of the project the public gateway is associated with.
	ProjectId pulumi.StringPtrInput
	// Trigger a refresh of the SSH keys on the Public Gateway by changing this field's value.
	RefreshSshKeys pulumi.StringPtrInput
	// The tags to associate with the Public Gateway.
	Tags pulumi.StringArrayInput
	// The gateway type.
	Type pulumi.StringInput
	// `zone`) The zone in which the Public Gateway should be created.
	Zone pulumi.StringPtrInput
}

func (PublicGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*publicGatewayArgs)(nil)).Elem()
}

type PublicGatewayInput interface {
	pulumi.Input

	ToPublicGatewayOutput() PublicGatewayOutput
	ToPublicGatewayOutputWithContext(ctx context.Context) PublicGatewayOutput
}

func (*PublicGateway) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicGateway)(nil)).Elem()
}

func (i *PublicGateway) ToPublicGatewayOutput() PublicGatewayOutput {
	return i.ToPublicGatewayOutputWithContext(context.Background())
}

func (i *PublicGateway) ToPublicGatewayOutputWithContext(ctx context.Context) PublicGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicGatewayOutput)
}

// PublicGatewayArrayInput is an input type that accepts PublicGatewayArray and PublicGatewayArrayOutput values.
// You can construct a concrete instance of `PublicGatewayArrayInput` via:
//
//	PublicGatewayArray{ PublicGatewayArgs{...} }
type PublicGatewayArrayInput interface {
	pulumi.Input

	ToPublicGatewayArrayOutput() PublicGatewayArrayOutput
	ToPublicGatewayArrayOutputWithContext(context.Context) PublicGatewayArrayOutput
}

type PublicGatewayArray []PublicGatewayInput

func (PublicGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicGateway)(nil)).Elem()
}

func (i PublicGatewayArray) ToPublicGatewayArrayOutput() PublicGatewayArrayOutput {
	return i.ToPublicGatewayArrayOutputWithContext(context.Background())
}

func (i PublicGatewayArray) ToPublicGatewayArrayOutputWithContext(ctx context.Context) PublicGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicGatewayArrayOutput)
}

// PublicGatewayMapInput is an input type that accepts PublicGatewayMap and PublicGatewayMapOutput values.
// You can construct a concrete instance of `PublicGatewayMapInput` via:
//
//	PublicGatewayMap{ "key": PublicGatewayArgs{...} }
type PublicGatewayMapInput interface {
	pulumi.Input

	ToPublicGatewayMapOutput() PublicGatewayMapOutput
	ToPublicGatewayMapOutputWithContext(context.Context) PublicGatewayMapOutput
}

type PublicGatewayMap map[string]PublicGatewayInput

func (PublicGatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicGateway)(nil)).Elem()
}

func (i PublicGatewayMap) ToPublicGatewayMapOutput() PublicGatewayMapOutput {
	return i.ToPublicGatewayMapOutputWithContext(context.Background())
}

func (i PublicGatewayMap) ToPublicGatewayMapOutputWithContext(ctx context.Context) PublicGatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicGatewayMapOutput)
}

type PublicGatewayOutput struct{ *pulumi.OutputState }

func (PublicGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicGateway)(nil)).Elem()
}

func (o PublicGatewayOutput) ToPublicGatewayOutput() PublicGatewayOutput {
	return o
}

func (o PublicGatewayOutput) ToPublicGatewayOutputWithContext(ctx context.Context) PublicGatewayOutput {
	return o
}

// Set a definitive list of IP ranges (in CIDR notation) allowed to connect to the SSH bastion.
func (o PublicGatewayOutput) AllowedIpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PublicGateway) pulumi.StringArrayOutput { return v.AllowedIpRanges }).(pulumi.StringArrayOutput)
}

// The bandwidth available of the gateway
func (o PublicGatewayOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *PublicGateway) pulumi.IntOutput { return v.Bandwidth }).(pulumi.IntOutput)
}

// Enable SSH bastion on the gateway.
func (o PublicGatewayOutput) BastionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PublicGateway) pulumi.BoolPtrOutput { return v.BastionEnabled }).(pulumi.BoolPtrOutput)
}

// The port on which the SSH bastion will listen.
func (o PublicGatewayOutput) BastionPort() pulumi.IntOutput {
	return o.ApplyT(func(v *PublicGateway) pulumi.IntOutput { return v.BastionPort }).(pulumi.IntOutput)
}

// The date and time of the creation of the Public Gateway.
func (o PublicGatewayOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicGateway) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Enable SMTP on the gateway.
func (o PublicGatewayOutput) EnableSmtp() pulumi.BoolOutput {
	return o.ApplyT(func(v *PublicGateway) pulumi.BoolOutput { return v.EnableSmtp }).(pulumi.BoolOutput)
}

// Attach an existing flexible IP to the gateway.
func (o PublicGatewayOutput) IpId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicGateway) pulumi.StringOutput { return v.IpId }).(pulumi.StringOutput)
}

// Put a Public Gateway in IPAM mode, so that it can be used with the Public Gateways API v2
func (o PublicGatewayOutput) MoveToIpam() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PublicGateway) pulumi.BoolPtrOutput { return v.MoveToIpam }).(pulumi.BoolPtrOutput)
}

// The name for the Public Gateway. If not provided it will be randomly generated.
func (o PublicGatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicGateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Organization ID the Public Gateway is associated with.
func (o PublicGatewayOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicGateway) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// `projectId`) The ID of the project the public gateway is associated with.
func (o PublicGatewayOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicGateway) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Trigger a refresh of the SSH keys on the Public Gateway by changing this field's value.
func (o PublicGatewayOutput) RefreshSshKeys() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicGateway) pulumi.StringPtrOutput { return v.RefreshSshKeys }).(pulumi.StringPtrOutput)
}

// The status of the public gateway.
func (o PublicGatewayOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicGateway) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The tags to associate with the Public Gateway.
func (o PublicGatewayOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PublicGateway) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The gateway type.
func (o PublicGatewayOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicGateway) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The date and time of the last update of the Public Gateway.
func (o PublicGatewayOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicGateway) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Override the gateway's default recursive DNS servers, if DNS features are enabled.
func (o PublicGatewayOutput) UpstreamDnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PublicGateway) pulumi.StringArrayOutput { return v.UpstreamDnsServers }).(pulumi.StringArrayOutput)
}

// `zone`) The zone in which the Public Gateway should be created.
func (o PublicGatewayOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicGateway) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type PublicGatewayArrayOutput struct{ *pulumi.OutputState }

func (PublicGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicGateway)(nil)).Elem()
}

func (o PublicGatewayArrayOutput) ToPublicGatewayArrayOutput() PublicGatewayArrayOutput {
	return o
}

func (o PublicGatewayArrayOutput) ToPublicGatewayArrayOutputWithContext(ctx context.Context) PublicGatewayArrayOutput {
	return o
}

func (o PublicGatewayArrayOutput) Index(i pulumi.IntInput) PublicGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PublicGateway {
		return vs[0].([]*PublicGateway)[vs[1].(int)]
	}).(PublicGatewayOutput)
}

type PublicGatewayMapOutput struct{ *pulumi.OutputState }

func (PublicGatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicGateway)(nil)).Elem()
}

func (o PublicGatewayMapOutput) ToPublicGatewayMapOutput() PublicGatewayMapOutput {
	return o
}

func (o PublicGatewayMapOutput) ToPublicGatewayMapOutputWithContext(ctx context.Context) PublicGatewayMapOutput {
	return o
}

func (o PublicGatewayMapOutput) MapIndex(k pulumi.StringInput) PublicGatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PublicGateway {
		return vs[0].(map[string]*PublicGateway)[vs[1].(string)]
	}).(PublicGatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PublicGatewayInput)(nil)).Elem(), &PublicGateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicGatewayArrayInput)(nil)).Elem(), PublicGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicGatewayMapInput)(nil)).Elem(), PublicGatewayMap{})
	pulumi.RegisterOutputType(PublicGatewayOutput{})
	pulumi.RegisterOutputType(PublicGatewayArrayOutput{})
	pulumi.RegisterOutputType(PublicGatewayMapOutput{})
}
