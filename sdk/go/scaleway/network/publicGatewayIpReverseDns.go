// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Manages Scaleway Public Gateway public (flexible) IPs' reverse DNS.
// For more information, see the [API documentation](https://www.scaleway.com/en/developers/api/public-gateway/#path-ips-list-ips).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/domain"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/network"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := network.NewPublicGatewayIp(ctx, "main", nil)
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "tf_A", &domain.RecordArgs{
//				DnsZone:  pulumi.String("example.com"),
//				Name:     pulumi.String("tf"),
//				Type:     pulumi.String("A"),
//				Data:     main.Address,
//				Ttl:      pulumi.Int(3600),
//				Priority: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewPublicGatewayIpReverseDns(ctx, "main", &network.PublicGatewayIpReverseDnsArgs{
//				GatewayIpId: main.ID(),
//				Reverse:     pulumi.String("tf.example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Public Gateway IP reverse DNS can be imported using `{zone}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:network/publicGatewayIpReverseDns:PublicGatewayIpReverseDns reverse fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type PublicGatewayIpReverseDns struct {
	pulumi.CustomResourceState

	// The Public Gateway IP ID
	GatewayIpId pulumi.StringOutput `pulumi:"gatewayIpId"`
	// The reverse domain name for this IP address
	Reverse pulumi.StringOutput `pulumi:"reverse"`
	// `zone`) The zone in which the IP should be reserved.
	Zone pulumi.StringPtrOutput `pulumi:"zone"`
}

// NewPublicGatewayIpReverseDns registers a new resource with the given unique name, arguments, and options.
func NewPublicGatewayIpReverseDns(ctx *pulumi.Context,
	name string, args *PublicGatewayIpReverseDnsArgs, opts ...pulumi.ResourceOption) (*PublicGatewayIpReverseDns, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GatewayIpId == nil {
		return nil, errors.New("invalid value for required argument 'GatewayIpId'")
	}
	if args.Reverse == nil {
		return nil, errors.New("invalid value for required argument 'Reverse'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/vpcPublicGatewayIpReverseDns:VpcPublicGatewayIpReverseDns"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PublicGatewayIpReverseDns
	err := ctx.RegisterResource("scaleway:network/publicGatewayIpReverseDns:PublicGatewayIpReverseDns", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPublicGatewayIpReverseDns gets an existing PublicGatewayIpReverseDns resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPublicGatewayIpReverseDns(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PublicGatewayIpReverseDnsState, opts ...pulumi.ResourceOption) (*PublicGatewayIpReverseDns, error) {
	var resource PublicGatewayIpReverseDns
	err := ctx.ReadResource("scaleway:network/publicGatewayIpReverseDns:PublicGatewayIpReverseDns", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PublicGatewayIpReverseDns resources.
type publicGatewayIpReverseDnsState struct {
	// The Public Gateway IP ID
	GatewayIpId *string `pulumi:"gatewayIpId"`
	// The reverse domain name for this IP address
	Reverse *string `pulumi:"reverse"`
	// `zone`) The zone in which the IP should be reserved.
	Zone *string `pulumi:"zone"`
}

type PublicGatewayIpReverseDnsState struct {
	// The Public Gateway IP ID
	GatewayIpId pulumi.StringPtrInput
	// The reverse domain name for this IP address
	Reverse pulumi.StringPtrInput
	// `zone`) The zone in which the IP should be reserved.
	Zone pulumi.StringPtrInput
}

func (PublicGatewayIpReverseDnsState) ElementType() reflect.Type {
	return reflect.TypeOf((*publicGatewayIpReverseDnsState)(nil)).Elem()
}

type publicGatewayIpReverseDnsArgs struct {
	// The Public Gateway IP ID
	GatewayIpId string `pulumi:"gatewayIpId"`
	// The reverse domain name for this IP address
	Reverse string `pulumi:"reverse"`
	// `zone`) The zone in which the IP should be reserved.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a PublicGatewayIpReverseDns resource.
type PublicGatewayIpReverseDnsArgs struct {
	// The Public Gateway IP ID
	GatewayIpId pulumi.StringInput
	// The reverse domain name for this IP address
	Reverse pulumi.StringInput
	// `zone`) The zone in which the IP should be reserved.
	Zone pulumi.StringPtrInput
}

func (PublicGatewayIpReverseDnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*publicGatewayIpReverseDnsArgs)(nil)).Elem()
}

type PublicGatewayIpReverseDnsInput interface {
	pulumi.Input

	ToPublicGatewayIpReverseDnsOutput() PublicGatewayIpReverseDnsOutput
	ToPublicGatewayIpReverseDnsOutputWithContext(ctx context.Context) PublicGatewayIpReverseDnsOutput
}

func (*PublicGatewayIpReverseDns) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicGatewayIpReverseDns)(nil)).Elem()
}

func (i *PublicGatewayIpReverseDns) ToPublicGatewayIpReverseDnsOutput() PublicGatewayIpReverseDnsOutput {
	return i.ToPublicGatewayIpReverseDnsOutputWithContext(context.Background())
}

func (i *PublicGatewayIpReverseDns) ToPublicGatewayIpReverseDnsOutputWithContext(ctx context.Context) PublicGatewayIpReverseDnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicGatewayIpReverseDnsOutput)
}

// PublicGatewayIpReverseDnsArrayInput is an input type that accepts PublicGatewayIpReverseDnsArray and PublicGatewayIpReverseDnsArrayOutput values.
// You can construct a concrete instance of `PublicGatewayIpReverseDnsArrayInput` via:
//
//	PublicGatewayIpReverseDnsArray{ PublicGatewayIpReverseDnsArgs{...} }
type PublicGatewayIpReverseDnsArrayInput interface {
	pulumi.Input

	ToPublicGatewayIpReverseDnsArrayOutput() PublicGatewayIpReverseDnsArrayOutput
	ToPublicGatewayIpReverseDnsArrayOutputWithContext(context.Context) PublicGatewayIpReverseDnsArrayOutput
}

type PublicGatewayIpReverseDnsArray []PublicGatewayIpReverseDnsInput

func (PublicGatewayIpReverseDnsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicGatewayIpReverseDns)(nil)).Elem()
}

func (i PublicGatewayIpReverseDnsArray) ToPublicGatewayIpReverseDnsArrayOutput() PublicGatewayIpReverseDnsArrayOutput {
	return i.ToPublicGatewayIpReverseDnsArrayOutputWithContext(context.Background())
}

func (i PublicGatewayIpReverseDnsArray) ToPublicGatewayIpReverseDnsArrayOutputWithContext(ctx context.Context) PublicGatewayIpReverseDnsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicGatewayIpReverseDnsArrayOutput)
}

// PublicGatewayIpReverseDnsMapInput is an input type that accepts PublicGatewayIpReverseDnsMap and PublicGatewayIpReverseDnsMapOutput values.
// You can construct a concrete instance of `PublicGatewayIpReverseDnsMapInput` via:
//
//	PublicGatewayIpReverseDnsMap{ "key": PublicGatewayIpReverseDnsArgs{...} }
type PublicGatewayIpReverseDnsMapInput interface {
	pulumi.Input

	ToPublicGatewayIpReverseDnsMapOutput() PublicGatewayIpReverseDnsMapOutput
	ToPublicGatewayIpReverseDnsMapOutputWithContext(context.Context) PublicGatewayIpReverseDnsMapOutput
}

type PublicGatewayIpReverseDnsMap map[string]PublicGatewayIpReverseDnsInput

func (PublicGatewayIpReverseDnsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicGatewayIpReverseDns)(nil)).Elem()
}

func (i PublicGatewayIpReverseDnsMap) ToPublicGatewayIpReverseDnsMapOutput() PublicGatewayIpReverseDnsMapOutput {
	return i.ToPublicGatewayIpReverseDnsMapOutputWithContext(context.Background())
}

func (i PublicGatewayIpReverseDnsMap) ToPublicGatewayIpReverseDnsMapOutputWithContext(ctx context.Context) PublicGatewayIpReverseDnsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicGatewayIpReverseDnsMapOutput)
}

type PublicGatewayIpReverseDnsOutput struct{ *pulumi.OutputState }

func (PublicGatewayIpReverseDnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicGatewayIpReverseDns)(nil)).Elem()
}

func (o PublicGatewayIpReverseDnsOutput) ToPublicGatewayIpReverseDnsOutput() PublicGatewayIpReverseDnsOutput {
	return o
}

func (o PublicGatewayIpReverseDnsOutput) ToPublicGatewayIpReverseDnsOutputWithContext(ctx context.Context) PublicGatewayIpReverseDnsOutput {
	return o
}

// The Public Gateway IP ID
func (o PublicGatewayIpReverseDnsOutput) GatewayIpId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicGatewayIpReverseDns) pulumi.StringOutput { return v.GatewayIpId }).(pulumi.StringOutput)
}

// The reverse domain name for this IP address
func (o PublicGatewayIpReverseDnsOutput) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicGatewayIpReverseDns) pulumi.StringOutput { return v.Reverse }).(pulumi.StringOutput)
}

// `zone`) The zone in which the IP should be reserved.
func (o PublicGatewayIpReverseDnsOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicGatewayIpReverseDns) pulumi.StringPtrOutput { return v.Zone }).(pulumi.StringPtrOutput)
}

type PublicGatewayIpReverseDnsArrayOutput struct{ *pulumi.OutputState }

func (PublicGatewayIpReverseDnsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicGatewayIpReverseDns)(nil)).Elem()
}

func (o PublicGatewayIpReverseDnsArrayOutput) ToPublicGatewayIpReverseDnsArrayOutput() PublicGatewayIpReverseDnsArrayOutput {
	return o
}

func (o PublicGatewayIpReverseDnsArrayOutput) ToPublicGatewayIpReverseDnsArrayOutputWithContext(ctx context.Context) PublicGatewayIpReverseDnsArrayOutput {
	return o
}

func (o PublicGatewayIpReverseDnsArrayOutput) Index(i pulumi.IntInput) PublicGatewayIpReverseDnsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PublicGatewayIpReverseDns {
		return vs[0].([]*PublicGatewayIpReverseDns)[vs[1].(int)]
	}).(PublicGatewayIpReverseDnsOutput)
}

type PublicGatewayIpReverseDnsMapOutput struct{ *pulumi.OutputState }

func (PublicGatewayIpReverseDnsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicGatewayIpReverseDns)(nil)).Elem()
}

func (o PublicGatewayIpReverseDnsMapOutput) ToPublicGatewayIpReverseDnsMapOutput() PublicGatewayIpReverseDnsMapOutput {
	return o
}

func (o PublicGatewayIpReverseDnsMapOutput) ToPublicGatewayIpReverseDnsMapOutputWithContext(ctx context.Context) PublicGatewayIpReverseDnsMapOutput {
	return o
}

func (o PublicGatewayIpReverseDnsMapOutput) MapIndex(k pulumi.StringInput) PublicGatewayIpReverseDnsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PublicGatewayIpReverseDns {
		return vs[0].(map[string]*PublicGatewayIpReverseDns)[vs[1].(string)]
	}).(PublicGatewayIpReverseDnsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PublicGatewayIpReverseDnsInput)(nil)).Elem(), &PublicGatewayIpReverseDns{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicGatewayIpReverseDnsArrayInput)(nil)).Elem(), PublicGatewayIpReverseDnsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicGatewayIpReverseDnsMapInput)(nil)).Elem(), PublicGatewayIpReverseDnsMap{})
	pulumi.RegisterOutputType(PublicGatewayIpReverseDnsOutput{})
	pulumi.RegisterOutputType(PublicGatewayIpReverseDnsArrayOutput{})
	pulumi.RegisterOutputType(PublicGatewayIpReverseDnsMapOutput{})
}
