// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway VPC Routes.
// For more information, see [the main documentation](https://www.scaleway.com/en/docs/vpc/concepts/).
//
// ## Example Usage
//
// ### With Instance
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/instance"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/network"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			vpc01, err := network.NewVpc(ctx, "vpc01", &network.VpcArgs{
//				Name: pulumi.String("tf-vpc-vpn"),
//			})
//			if err != nil {
//				return err
//			}
//			pn01, err := network.NewPrivateNetwork(ctx, "pn01", &network.PrivateNetworkArgs{
//				Name: pulumi.String("tf-pn-vpn"),
//				Ipv4Subnet: &network.PrivateNetworkIpv4SubnetArgs{
//					Subnet: pulumi.String("172.16.64.0/22"),
//				},
//				VpcId: vpc01.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			server01, err := instance.NewServer(ctx, "server01", &instance.ServerArgs{
//				Name:  pulumi.String("tf-server-vpn"),
//				Type:  pulumi.String("PLAY2-MICRO"),
//				Image: pulumi.String("openvpn"),
//			})
//			if err != nil {
//				return err
//			}
//			pnic01, err := instance.NewPrivateNic(ctx, "pnic01", &instance.PrivateNicArgs{
//				PrivateNetworkId: pn01.ID(),
//				ServerId:         server01.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewRoute(ctx, "rt01", &network.RouteArgs{
//				VpcId:       vpc01.ID(),
//				Description: pulumi.String("tf-route-vpn"),
//				Tags: pulumi.StringArray{
//					pulumi.String("tf"),
//					pulumi.String("route"),
//				},
//				Destination:       pulumi.String("10.0.0.0/24"),
//				NexthopResourceId: pnic01.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With Baremetal
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/elasticmetal"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/iam"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/network"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			vpc01, err := network.NewVpc(ctx, "vpc01", &network.VpcArgs{
//				Name: pulumi.String("tf-vpc-vpn"),
//			})
//			if err != nil {
//				return err
//			}
//			pn01, err := network.NewPrivateNetwork(ctx, "pn01", &network.PrivateNetworkArgs{
//				Name: pulumi.String("tf-pn-vpn"),
//				Ipv4Subnet: &network.PrivateNetworkIpv4SubnetArgs{
//					Subnet: pulumi.String("172.16.64.0/22"),
//				},
//				VpcId: vpc01.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			myOs, err := elasticmetal.GetOs(ctx, &elasticmetal.GetOsArgs{
//				Zone:    pulumi.StringRef("fr-par-2"),
//				Name:    pulumi.StringRef("Ubuntu"),
//				Version: pulumi.StringRef("22.04 LTS (Jammy Jellyfish)"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			myOffer, err := elasticmetal.GetOffer(ctx, &elasticmetal.GetOfferArgs{
//				Zone: pulumi.StringRef("fr-par-2"),
//				Name: pulumi.StringRef("EM-B112X-SSD"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			privateNetwork, err := elasticmetal.GetOption(ctx, &elasticmetal.GetOptionArgs{
//				Zone: pulumi.StringRef("fr-par-2"),
//				Name: pulumi.StringRef("Private Network"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			myKey, err := iam.LookupSshKey(ctx, &iam.LookupSshKeyArgs{
//				Name: pulumi.StringRef("main"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			myServer, err := elasticmetal.NewServer(ctx, "my_server", &elasticmetal.ServerArgs{
//				Zone:  pulumi.String("fr-par-2"),
//				Offer: pulumi.String(myOffer.OfferId),
//				Os:    pulumi.String(myOs.OsId),
//				SshKeyIds: pulumi.StringArray{
//					pulumi.String(myKey.Id),
//				},
//				Options: elasticmetal.ServerOptionArray{
//					&elasticmetal.ServerOptionArgs{
//						Id: pulumi.String(privateNetwork.OptionId),
//					},
//				},
//				PrivateNetworks: elasticmetal.ServerPrivateNetworkArray{
//					&elasticmetal.ServerPrivateNetworkArgs{
//						Id: pn01.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewRoute(ctx, "rt01", &network.RouteArgs{
//				VpcId:       vpc01.ID(),
//				Description: pulumi.String("tf-route-vpn"),
//				Tags: pulumi.StringArray{
//					pulumi.String("tf"),
//					pulumi.String("route"),
//				},
//				Destination: pulumi.String("10.0.0.0/24"),
//				NexthopResourceId: pulumi.String(myServer.PrivateNetworks.ApplyT(func(privateNetworks []elasticmetal.ServerPrivateNetwork) (*string, error) {
//					return &privateNetworks[0].MappingId, nil
//				}).(pulumi.StringPtrOutput)),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Routes can be imported using `{region}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:network/route:Route main fr-par/11111111-1111-1111-1111-111111111111
// ```
type Route struct {
	pulumi.CustomResourceState

	// The date and time of the creation of the route (RFC 3339 format).
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The route description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The destination of the route.
	Destination pulumi.StringPtrOutput `pulumi:"destination"`
	// The ID of the nexthop private network.
	NexthopPrivateNetworkId pulumi.StringPtrOutput `pulumi:"nexthopPrivateNetworkId"`
	// The ID of the nexthop resource.
	NexthopResourceId pulumi.StringPtrOutput `pulumi:"nexthopResourceId"`
	// `region`) The region of the route.
	Region pulumi.StringOutput `pulumi:"region"`
	// The tags to associate with the route.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The date and time of the creation of the route (RFC 3339 format).
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The VPC ID the route belongs to.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewRoute registers a new resource with the given unique name, arguments, and options.
func NewRoute(ctx *pulumi.Context,
	name string, args *RouteArgs, opts ...pulumi.ResourceOption) (*Route, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/vpcRoute:VpcRoute"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Route
	err := ctx.RegisterResource("scaleway:network/route:Route", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoute gets an existing Route resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteState, opts ...pulumi.ResourceOption) (*Route, error) {
	var resource Route
	err := ctx.ReadResource("scaleway:network/route:Route", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Route resources.
type routeState struct {
	// The date and time of the creation of the route (RFC 3339 format).
	CreatedAt *string `pulumi:"createdAt"`
	// The route description.
	Description *string `pulumi:"description"`
	// The destination of the route.
	Destination *string `pulumi:"destination"`
	// The ID of the nexthop private network.
	NexthopPrivateNetworkId *string `pulumi:"nexthopPrivateNetworkId"`
	// The ID of the nexthop resource.
	NexthopResourceId *string `pulumi:"nexthopResourceId"`
	// `region`) The region of the route.
	Region *string `pulumi:"region"`
	// The tags to associate with the route.
	Tags []string `pulumi:"tags"`
	// The date and time of the creation of the route (RFC 3339 format).
	UpdatedAt *string `pulumi:"updatedAt"`
	// The VPC ID the route belongs to.
	VpcId *string `pulumi:"vpcId"`
}

type RouteState struct {
	// The date and time of the creation of the route (RFC 3339 format).
	CreatedAt pulumi.StringPtrInput
	// The route description.
	Description pulumi.StringPtrInput
	// The destination of the route.
	Destination pulumi.StringPtrInput
	// The ID of the nexthop private network.
	NexthopPrivateNetworkId pulumi.StringPtrInput
	// The ID of the nexthop resource.
	NexthopResourceId pulumi.StringPtrInput
	// `region`) The region of the route.
	Region pulumi.StringPtrInput
	// The tags to associate with the route.
	Tags pulumi.StringArrayInput
	// The date and time of the creation of the route (RFC 3339 format).
	UpdatedAt pulumi.StringPtrInput
	// The VPC ID the route belongs to.
	VpcId pulumi.StringPtrInput
}

func (RouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeState)(nil)).Elem()
}

type routeArgs struct {
	// The route description.
	Description *string `pulumi:"description"`
	// The destination of the route.
	Destination *string `pulumi:"destination"`
	// The ID of the nexthop private network.
	NexthopPrivateNetworkId *string `pulumi:"nexthopPrivateNetworkId"`
	// The ID of the nexthop resource.
	NexthopResourceId *string `pulumi:"nexthopResourceId"`
	// `region`) The region of the route.
	Region *string `pulumi:"region"`
	// The tags to associate with the route.
	Tags []string `pulumi:"tags"`
	// The VPC ID the route belongs to.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Route resource.
type RouteArgs struct {
	// The route description.
	Description pulumi.StringPtrInput
	// The destination of the route.
	Destination pulumi.StringPtrInput
	// The ID of the nexthop private network.
	NexthopPrivateNetworkId pulumi.StringPtrInput
	// The ID of the nexthop resource.
	NexthopResourceId pulumi.StringPtrInput
	// `region`) The region of the route.
	Region pulumi.StringPtrInput
	// The tags to associate with the route.
	Tags pulumi.StringArrayInput
	// The VPC ID the route belongs to.
	VpcId pulumi.StringInput
}

func (RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeArgs)(nil)).Elem()
}

type RouteInput interface {
	pulumi.Input

	ToRouteOutput() RouteOutput
	ToRouteOutputWithContext(ctx context.Context) RouteOutput
}

func (*Route) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (i *Route) ToRouteOutput() RouteOutput {
	return i.ToRouteOutputWithContext(context.Background())
}

func (i *Route) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteOutput)
}

// RouteArrayInput is an input type that accepts RouteArray and RouteArrayOutput values.
// You can construct a concrete instance of `RouteArrayInput` via:
//
//	RouteArray{ RouteArgs{...} }
type RouteArrayInput interface {
	pulumi.Input

	ToRouteArrayOutput() RouteArrayOutput
	ToRouteArrayOutputWithContext(context.Context) RouteArrayOutput
}

type RouteArray []RouteInput

func (RouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Route)(nil)).Elem()
}

func (i RouteArray) ToRouteArrayOutput() RouteArrayOutput {
	return i.ToRouteArrayOutputWithContext(context.Background())
}

func (i RouteArray) ToRouteArrayOutputWithContext(ctx context.Context) RouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteArrayOutput)
}

// RouteMapInput is an input type that accepts RouteMap and RouteMapOutput values.
// You can construct a concrete instance of `RouteMapInput` via:
//
//	RouteMap{ "key": RouteArgs{...} }
type RouteMapInput interface {
	pulumi.Input

	ToRouteMapOutput() RouteMapOutput
	ToRouteMapOutputWithContext(context.Context) RouteMapOutput
}

type RouteMap map[string]RouteInput

func (RouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Route)(nil)).Elem()
}

func (i RouteMap) ToRouteMapOutput() RouteMapOutput {
	return i.ToRouteMapOutputWithContext(context.Background())
}

func (i RouteMap) ToRouteMapOutputWithContext(ctx context.Context) RouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteMapOutput)
}

type RouteOutput struct{ *pulumi.OutputState }

func (RouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (o RouteOutput) ToRouteOutput() RouteOutput {
	return o
}

func (o RouteOutput) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return o
}

// The date and time of the creation of the route (RFC 3339 format).
func (o RouteOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The route description.
func (o RouteOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The destination of the route.
func (o RouteOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.Destination }).(pulumi.StringPtrOutput)
}

// The ID of the nexthop private network.
func (o RouteOutput) NexthopPrivateNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.NexthopPrivateNetworkId }).(pulumi.StringPtrOutput)
}

// The ID of the nexthop resource.
func (o RouteOutput) NexthopResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.NexthopResourceId }).(pulumi.StringPtrOutput)
}

// `region`) The region of the route.
func (o RouteOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The tags to associate with the route.
func (o RouteOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Route) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The date and time of the creation of the route (RFC 3339 format).
func (o RouteOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The VPC ID the route belongs to.
func (o RouteOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type RouteArrayOutput struct{ *pulumi.OutputState }

func (RouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Route)(nil)).Elem()
}

func (o RouteArrayOutput) ToRouteArrayOutput() RouteArrayOutput {
	return o
}

func (o RouteArrayOutput) ToRouteArrayOutputWithContext(ctx context.Context) RouteArrayOutput {
	return o
}

func (o RouteArrayOutput) Index(i pulumi.IntInput) RouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Route {
		return vs[0].([]*Route)[vs[1].(int)]
	}).(RouteOutput)
}

type RouteMapOutput struct{ *pulumi.OutputState }

func (RouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Route)(nil)).Elem()
}

func (o RouteMapOutput) ToRouteMapOutput() RouteMapOutput {
	return o
}

func (o RouteMapOutput) ToRouteMapOutputWithContext(ctx context.Context) RouteMapOutput {
	return o
}

func (o RouteMapOutput) MapIndex(k pulumi.StringInput) RouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Route {
		return vs[0].(map[string]*Route)[vs[1].(string)]
	}).(RouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteInput)(nil)).Elem(), &Route{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteArrayInput)(nil)).Elem(), RouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteMapInput)(nil)).Elem(), RouteMap{})
	pulumi.RegisterOutputType(RouteOutput{})
	pulumi.RegisterOutputType(RouteArrayOutput{})
	pulumi.RegisterOutputType(RouteMapOutput{})
}
