// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package object

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/object"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := object.NewBucket(ctx, "some_bucket", &object.BucketArgs{
//				Name: pulumi.String("unique-name"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = object.NewBucketAcl(ctx, "main", &object.BucketAclArgs{
//				Bucket: pulumi.Any(mainScalewayObjectBucket.Id),
//				Acl:    pulumi.String("private"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// For more information, refer to the [PutBucketAcl API call documentation](https://www.scaleway.com/en/docs/object-storage/api-cli/bucket-operations/#putbucketacl).
//
// ### With Grants
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/object"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := object.NewBucket(ctx, "main", &object.BucketArgs{
//				Name: pulumi.String("your-bucket"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = object.NewBucketAcl(ctx, "main", &object.BucketAclArgs{
//				Bucket: main.ID(),
//				AccessControlPolicy: &object.BucketAclAccessControlPolicyArgs{
//					Grants: object.BucketAclAccessControlPolicyGrantArray{
//						&object.BucketAclAccessControlPolicyGrantArgs{
//							Grantee: &object.BucketAclAccessControlPolicyGrantGranteeArgs{
//								Id:   pulumi.String("<project-id>:<project-id>"),
//								Type: pulumi.String("CanonicalUser"),
//							},
//							Permission: pulumi.String("FULL_CONTROL"),
//						},
//						&object.BucketAclAccessControlPolicyGrantArgs{
//							Grantee: &object.BucketAclAccessControlPolicyGrantGranteeArgs{
//								Id:   pulumi.String("<project-id>"),
//								Type: pulumi.String("CanonicalUser"),
//							},
//							Permission: pulumi.String("WRITE"),
//						},
//					},
//					Owner: &object.BucketAclAccessControlPolicyOwnerArgs{
//						Id: pulumi.String("<project-id>"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## The ACL
//
// Refer to the [official canned ACL documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl_overview.html#canned-acl) for more information on the different roles.
//
// ## The access control policy
//
// The `accessControlPolicy` configuration block supports the following arguments:
//
// * `grant` - (Required) Set of grant configuration blocks documented below.
// * `owner` - (Required) Configuration block of the bucket owner's display name and ID documented below.
//
// ## The grant
//
// The `grant` configuration block supports the following arguments:
//
// * `grantee` - (Required) Configuration block for the project being granted permissions documented below.
// * `permission` - (Required) Logging permissions assigned to the grantee for the bucket.
//
// ## The permission
//
// The following list shows each access policy permissions supported.
//
// `READ`, `WRITE`, `READ_ACP`, `WRITE_ACP`, `FULL_CONTROL`
//
// For more information about ACL permissions in the S3 bucket, see [ACL permissions](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html).
//
// ## The owner
//
// The `owner` configuration block supports the following arguments:
//
// * `id` - (Required) The ID of the project owner.
// * `displayName` - (Optional) The display name of the owner.
//
// ## the grantee
//
// The `grantee` configuration block supports the following arguments:
//
// * `id` - (Required) The canonical user ID of the grantee.
// * `type` - (Required) Type of grantee. Valid values: CanonicalUser.
//
// ## Import
//
// Bucket ACLs can be imported using the `{region}/{bucketName}/{acl}` identifier, as shown below:
//
// bash
//
// ```sh
// $ pulumi import scaleway:object/bucketAcl:BucketAcl some_bucket fr-par/some-bucket/private
// ```
//
// ~> **Important:** The `project_id` attribute has a particular behavior with s3 products because the s3 API is scoped by project.
//
// If you are using a project different from the default one, you have to specify the project ID at the end of the import command.
//
// bash
//
// ```sh
// $ pulumi import scaleway:object/bucketAcl:BucketAcl some_bucket fr-par/some-bucket/private@xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx
// ```
type BucketAcl struct {
	pulumi.CustomResourceState

	// A configuration block that sets the ACL permissions for an object per grantee documented below.
	AccessControlPolicy BucketAclAccessControlPolicyOutput `pulumi:"accessControlPolicy"`
	// The canned ACL you want to apply to the bucket. Refer to the [AWS Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl_overview.html#canned-acl) documentation page to find a list of all the supported canned ACLs.
	Acl pulumi.StringPtrOutput `pulumi:"acl"`
	// The bucket's name or regional ID.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// The project ID of the expected bucket owner.
	ExpectedBucketOwner pulumi.StringPtrOutput `pulumi:"expectedBucketOwner"`
	// The projectId you want to attach the resource to
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The [region](https://www.scaleway.com/en/developers/api/#regions-and-zones) in which the bucket should be created.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewBucketAcl registers a new resource with the given unique name, arguments, and options.
func NewBucketAcl(ctx *pulumi.Context,
	name string, args *BucketAclArgs, opts ...pulumi.ResourceOption) (*BucketAcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/objectBucketAcl:ObjectBucketAcl"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketAcl
	err := ctx.RegisterResource("scaleway:object/bucketAcl:BucketAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketAcl gets an existing BucketAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketAclState, opts ...pulumi.ResourceOption) (*BucketAcl, error) {
	var resource BucketAcl
	err := ctx.ReadResource("scaleway:object/bucketAcl:BucketAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketAcl resources.
type bucketAclState struct {
	// A configuration block that sets the ACL permissions for an object per grantee documented below.
	AccessControlPolicy *BucketAclAccessControlPolicy `pulumi:"accessControlPolicy"`
	// The canned ACL you want to apply to the bucket. Refer to the [AWS Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl_overview.html#canned-acl) documentation page to find a list of all the supported canned ACLs.
	Acl *string `pulumi:"acl"`
	// The bucket's name or regional ID.
	Bucket *string `pulumi:"bucket"`
	// The project ID of the expected bucket owner.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
	// The projectId you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The [region](https://www.scaleway.com/en/developers/api/#regions-and-zones) in which the bucket should be created.
	Region *string `pulumi:"region"`
}

type BucketAclState struct {
	// A configuration block that sets the ACL permissions for an object per grantee documented below.
	AccessControlPolicy BucketAclAccessControlPolicyPtrInput
	// The canned ACL you want to apply to the bucket. Refer to the [AWS Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl_overview.html#canned-acl) documentation page to find a list of all the supported canned ACLs.
	Acl pulumi.StringPtrInput
	// The bucket's name or regional ID.
	Bucket pulumi.StringPtrInput
	// The project ID of the expected bucket owner.
	ExpectedBucketOwner pulumi.StringPtrInput
	// The projectId you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The [region](https://www.scaleway.com/en/developers/api/#regions-and-zones) in which the bucket should be created.
	Region pulumi.StringPtrInput
}

func (BucketAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketAclState)(nil)).Elem()
}

type bucketAclArgs struct {
	// A configuration block that sets the ACL permissions for an object per grantee documented below.
	AccessControlPolicy *BucketAclAccessControlPolicy `pulumi:"accessControlPolicy"`
	// The canned ACL you want to apply to the bucket. Refer to the [AWS Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl_overview.html#canned-acl) documentation page to find a list of all the supported canned ACLs.
	Acl *string `pulumi:"acl"`
	// The bucket's name or regional ID.
	Bucket string `pulumi:"bucket"`
	// The project ID of the expected bucket owner.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
	// The projectId you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The [region](https://www.scaleway.com/en/developers/api/#regions-and-zones) in which the bucket should be created.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a BucketAcl resource.
type BucketAclArgs struct {
	// A configuration block that sets the ACL permissions for an object per grantee documented below.
	AccessControlPolicy BucketAclAccessControlPolicyPtrInput
	// The canned ACL you want to apply to the bucket. Refer to the [AWS Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl_overview.html#canned-acl) documentation page to find a list of all the supported canned ACLs.
	Acl pulumi.StringPtrInput
	// The bucket's name or regional ID.
	Bucket pulumi.StringInput
	// The project ID of the expected bucket owner.
	ExpectedBucketOwner pulumi.StringPtrInput
	// The projectId you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The [region](https://www.scaleway.com/en/developers/api/#regions-and-zones) in which the bucket should be created.
	Region pulumi.StringPtrInput
}

func (BucketAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketAclArgs)(nil)).Elem()
}

type BucketAclInput interface {
	pulumi.Input

	ToBucketAclOutput() BucketAclOutput
	ToBucketAclOutputWithContext(ctx context.Context) BucketAclOutput
}

func (*BucketAcl) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketAcl)(nil)).Elem()
}

func (i *BucketAcl) ToBucketAclOutput() BucketAclOutput {
	return i.ToBucketAclOutputWithContext(context.Background())
}

func (i *BucketAcl) ToBucketAclOutputWithContext(ctx context.Context) BucketAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketAclOutput)
}

// BucketAclArrayInput is an input type that accepts BucketAclArray and BucketAclArrayOutput values.
// You can construct a concrete instance of `BucketAclArrayInput` via:
//
//	BucketAclArray{ BucketAclArgs{...} }
type BucketAclArrayInput interface {
	pulumi.Input

	ToBucketAclArrayOutput() BucketAclArrayOutput
	ToBucketAclArrayOutputWithContext(context.Context) BucketAclArrayOutput
}

type BucketAclArray []BucketAclInput

func (BucketAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketAcl)(nil)).Elem()
}

func (i BucketAclArray) ToBucketAclArrayOutput() BucketAclArrayOutput {
	return i.ToBucketAclArrayOutputWithContext(context.Background())
}

func (i BucketAclArray) ToBucketAclArrayOutputWithContext(ctx context.Context) BucketAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketAclArrayOutput)
}

// BucketAclMapInput is an input type that accepts BucketAclMap and BucketAclMapOutput values.
// You can construct a concrete instance of `BucketAclMapInput` via:
//
//	BucketAclMap{ "key": BucketAclArgs{...} }
type BucketAclMapInput interface {
	pulumi.Input

	ToBucketAclMapOutput() BucketAclMapOutput
	ToBucketAclMapOutputWithContext(context.Context) BucketAclMapOutput
}

type BucketAclMap map[string]BucketAclInput

func (BucketAclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketAcl)(nil)).Elem()
}

func (i BucketAclMap) ToBucketAclMapOutput() BucketAclMapOutput {
	return i.ToBucketAclMapOutputWithContext(context.Background())
}

func (i BucketAclMap) ToBucketAclMapOutputWithContext(ctx context.Context) BucketAclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketAclMapOutput)
}

type BucketAclOutput struct{ *pulumi.OutputState }

func (BucketAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketAcl)(nil)).Elem()
}

func (o BucketAclOutput) ToBucketAclOutput() BucketAclOutput {
	return o
}

func (o BucketAclOutput) ToBucketAclOutputWithContext(ctx context.Context) BucketAclOutput {
	return o
}

// A configuration block that sets the ACL permissions for an object per grantee documented below.
func (o BucketAclOutput) AccessControlPolicy() BucketAclAccessControlPolicyOutput {
	return o.ApplyT(func(v *BucketAcl) BucketAclAccessControlPolicyOutput { return v.AccessControlPolicy }).(BucketAclAccessControlPolicyOutput)
}

// The canned ACL you want to apply to the bucket. Refer to the [AWS Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl_overview.html#canned-acl) documentation page to find a list of all the supported canned ACLs.
func (o BucketAclOutput) Acl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketAcl) pulumi.StringPtrOutput { return v.Acl }).(pulumi.StringPtrOutput)
}

// The bucket's name or regional ID.
func (o BucketAclOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketAcl) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// The project ID of the expected bucket owner.
func (o BucketAclOutput) ExpectedBucketOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketAcl) pulumi.StringPtrOutput { return v.ExpectedBucketOwner }).(pulumi.StringPtrOutput)
}

// The projectId you want to attach the resource to
func (o BucketAclOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketAcl) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The [region](https://www.scaleway.com/en/developers/api/#regions-and-zones) in which the bucket should be created.
func (o BucketAclOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketAcl) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type BucketAclArrayOutput struct{ *pulumi.OutputState }

func (BucketAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketAcl)(nil)).Elem()
}

func (o BucketAclArrayOutput) ToBucketAclArrayOutput() BucketAclArrayOutput {
	return o
}

func (o BucketAclArrayOutput) ToBucketAclArrayOutputWithContext(ctx context.Context) BucketAclArrayOutput {
	return o
}

func (o BucketAclArrayOutput) Index(i pulumi.IntInput) BucketAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketAcl {
		return vs[0].([]*BucketAcl)[vs[1].(int)]
	}).(BucketAclOutput)
}

type BucketAclMapOutput struct{ *pulumi.OutputState }

func (BucketAclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketAcl)(nil)).Elem()
}

func (o BucketAclMapOutput) ToBucketAclMapOutput() BucketAclMapOutput {
	return o
}

func (o BucketAclMapOutput) ToBucketAclMapOutputWithContext(ctx context.Context) BucketAclMapOutput {
	return o
}

func (o BucketAclMapOutput) MapIndex(k pulumi.StringInput) BucketAclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketAcl {
		return vs[0].(map[string]*BucketAcl)[vs[1].(string)]
	}).(BucketAclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketAclInput)(nil)).Elem(), &BucketAcl{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketAclArrayInput)(nil)).Elem(), BucketAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketAclMapInput)(nil)).Elem(), BucketAclMap{})
	pulumi.RegisterOutputType(BucketAclOutput{})
	pulumi.RegisterOutputType(BucketAclArrayOutput{})
	pulumi.RegisterOutputType(BucketAclMapOutput{})
}
