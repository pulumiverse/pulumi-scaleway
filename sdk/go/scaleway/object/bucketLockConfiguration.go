// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package object

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// The `object.BucketLockConfiguration` resource allows you to create and manage an object lock configuration for [Scaleway Object storage](https://www.scaleway.com/en/docs/object-storage/).
//
// Refer to the [dedicated documentation](https://www.scaleway.com/en/docs/object-storage/api-cli/object-lock/) for more information on object lock.
//
// ## Example Usage
//
// ### Configure an Object Lock for a new bucket
//
// > **Note:** `objectLockEnabled` must be set to `true` before configuring the lock.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/object"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := object.NewBucket(ctx, "main", &object.BucketArgs{
//				Name:              pulumi.String("MyBucket"),
//				Acl:               pulumi.String("public-read"),
//				ObjectLockEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = object.NewBucketLockConfiguration(ctx, "main", &object.BucketLockConfigurationArgs{
//				Bucket: main.Name,
//				Rule: &object.BucketLockConfigurationRuleArgs{
//					DefaultRetention: &object.BucketLockConfigurationRuleDefaultRetentionArgs{
//						Mode: pulumi.String("GOVERNANCE"),
//						Days: pulumi.Int(1),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Configure an object Lock for an existing bucket
//
// [Contact Scaleway support](https://console.scaleway.com/support/tickets/create) to enable object lock on an existing bucket.
//
// ## Import
//
// Bucket lock configurations can be imported using the `{region}/{bucketName}` identifier, as shown below:
//
// bash
//
// ```sh
// $ pulumi import scaleway:object/bucketLockConfiguration:BucketLockConfiguration some_bucket fr-par/some-bucket
// ```
//
// ~> **Important:** The `project_id` attribute has a particular behavior with s3 products because the s3 API is scoped by project.
//
// If you are using a project different from the default one, you have to specify the project ID at the end of the import command.
//
// bash
//
// ```sh
// $ pulumi import scaleway:object/bucketLockConfiguration:BucketLockConfiguration some_bucket fr-par/some-bucket@xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx
// ```
type BucketLockConfiguration struct {
	pulumi.CustomResourceState

	// The bucket's name or regional ID.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// The projectId you want to attach the resource to
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The region you want to attach the resource to
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the object lock rule for the specified object.
	Rule BucketLockConfigurationRuleOutput `pulumi:"rule"`
}

// NewBucketLockConfiguration registers a new resource with the given unique name, arguments, and options.
func NewBucketLockConfiguration(ctx *pulumi.Context,
	name string, args *BucketLockConfigurationArgs, opts ...pulumi.ResourceOption) (*BucketLockConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Rule == nil {
		return nil, errors.New("invalid value for required argument 'Rule'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/objectBucketLockConfiguration:ObjectBucketLockConfiguration"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketLockConfiguration
	err := ctx.RegisterResource("scaleway:object/bucketLockConfiguration:BucketLockConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketLockConfiguration gets an existing BucketLockConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketLockConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketLockConfigurationState, opts ...pulumi.ResourceOption) (*BucketLockConfiguration, error) {
	var resource BucketLockConfiguration
	err := ctx.ReadResource("scaleway:object/bucketLockConfiguration:BucketLockConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketLockConfiguration resources.
type bucketLockConfigurationState struct {
	// The bucket's name or regional ID.
	Bucket *string `pulumi:"bucket"`
	// The projectId you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
	// Specifies the object lock rule for the specified object.
	Rule *BucketLockConfigurationRule `pulumi:"rule"`
}

type BucketLockConfigurationState struct {
	// The bucket's name or regional ID.
	Bucket pulumi.StringPtrInput
	// The projectId you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
	// Specifies the object lock rule for the specified object.
	Rule BucketLockConfigurationRulePtrInput
}

func (BucketLockConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketLockConfigurationState)(nil)).Elem()
}

type bucketLockConfigurationArgs struct {
	// The bucket's name or regional ID.
	Bucket string `pulumi:"bucket"`
	// The projectId you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
	// Specifies the object lock rule for the specified object.
	Rule BucketLockConfigurationRule `pulumi:"rule"`
}

// The set of arguments for constructing a BucketLockConfiguration resource.
type BucketLockConfigurationArgs struct {
	// The bucket's name or regional ID.
	Bucket pulumi.StringInput
	// The projectId you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
	// Specifies the object lock rule for the specified object.
	Rule BucketLockConfigurationRuleInput
}

func (BucketLockConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketLockConfigurationArgs)(nil)).Elem()
}

type BucketLockConfigurationInput interface {
	pulumi.Input

	ToBucketLockConfigurationOutput() BucketLockConfigurationOutput
	ToBucketLockConfigurationOutputWithContext(ctx context.Context) BucketLockConfigurationOutput
}

func (*BucketLockConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketLockConfiguration)(nil)).Elem()
}

func (i *BucketLockConfiguration) ToBucketLockConfigurationOutput() BucketLockConfigurationOutput {
	return i.ToBucketLockConfigurationOutputWithContext(context.Background())
}

func (i *BucketLockConfiguration) ToBucketLockConfigurationOutputWithContext(ctx context.Context) BucketLockConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLockConfigurationOutput)
}

// BucketLockConfigurationArrayInput is an input type that accepts BucketLockConfigurationArray and BucketLockConfigurationArrayOutput values.
// You can construct a concrete instance of `BucketLockConfigurationArrayInput` via:
//
//	BucketLockConfigurationArray{ BucketLockConfigurationArgs{...} }
type BucketLockConfigurationArrayInput interface {
	pulumi.Input

	ToBucketLockConfigurationArrayOutput() BucketLockConfigurationArrayOutput
	ToBucketLockConfigurationArrayOutputWithContext(context.Context) BucketLockConfigurationArrayOutput
}

type BucketLockConfigurationArray []BucketLockConfigurationInput

func (BucketLockConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketLockConfiguration)(nil)).Elem()
}

func (i BucketLockConfigurationArray) ToBucketLockConfigurationArrayOutput() BucketLockConfigurationArrayOutput {
	return i.ToBucketLockConfigurationArrayOutputWithContext(context.Background())
}

func (i BucketLockConfigurationArray) ToBucketLockConfigurationArrayOutputWithContext(ctx context.Context) BucketLockConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLockConfigurationArrayOutput)
}

// BucketLockConfigurationMapInput is an input type that accepts BucketLockConfigurationMap and BucketLockConfigurationMapOutput values.
// You can construct a concrete instance of `BucketLockConfigurationMapInput` via:
//
//	BucketLockConfigurationMap{ "key": BucketLockConfigurationArgs{...} }
type BucketLockConfigurationMapInput interface {
	pulumi.Input

	ToBucketLockConfigurationMapOutput() BucketLockConfigurationMapOutput
	ToBucketLockConfigurationMapOutputWithContext(context.Context) BucketLockConfigurationMapOutput
}

type BucketLockConfigurationMap map[string]BucketLockConfigurationInput

func (BucketLockConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketLockConfiguration)(nil)).Elem()
}

func (i BucketLockConfigurationMap) ToBucketLockConfigurationMapOutput() BucketLockConfigurationMapOutput {
	return i.ToBucketLockConfigurationMapOutputWithContext(context.Background())
}

func (i BucketLockConfigurationMap) ToBucketLockConfigurationMapOutputWithContext(ctx context.Context) BucketLockConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketLockConfigurationMapOutput)
}

type BucketLockConfigurationOutput struct{ *pulumi.OutputState }

func (BucketLockConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketLockConfiguration)(nil)).Elem()
}

func (o BucketLockConfigurationOutput) ToBucketLockConfigurationOutput() BucketLockConfigurationOutput {
	return o
}

func (o BucketLockConfigurationOutput) ToBucketLockConfigurationOutputWithContext(ctx context.Context) BucketLockConfigurationOutput {
	return o
}

// The bucket's name or regional ID.
func (o BucketLockConfigurationOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketLockConfiguration) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// The projectId you want to attach the resource to
func (o BucketLockConfigurationOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketLockConfiguration) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The region you want to attach the resource to
func (o BucketLockConfigurationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketLockConfiguration) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the object lock rule for the specified object.
func (o BucketLockConfigurationOutput) Rule() BucketLockConfigurationRuleOutput {
	return o.ApplyT(func(v *BucketLockConfiguration) BucketLockConfigurationRuleOutput { return v.Rule }).(BucketLockConfigurationRuleOutput)
}

type BucketLockConfigurationArrayOutput struct{ *pulumi.OutputState }

func (BucketLockConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketLockConfiguration)(nil)).Elem()
}

func (o BucketLockConfigurationArrayOutput) ToBucketLockConfigurationArrayOutput() BucketLockConfigurationArrayOutput {
	return o
}

func (o BucketLockConfigurationArrayOutput) ToBucketLockConfigurationArrayOutputWithContext(ctx context.Context) BucketLockConfigurationArrayOutput {
	return o
}

func (o BucketLockConfigurationArrayOutput) Index(i pulumi.IntInput) BucketLockConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketLockConfiguration {
		return vs[0].([]*BucketLockConfiguration)[vs[1].(int)]
	}).(BucketLockConfigurationOutput)
}

type BucketLockConfigurationMapOutput struct{ *pulumi.OutputState }

func (BucketLockConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketLockConfiguration)(nil)).Elem()
}

func (o BucketLockConfigurationMapOutput) ToBucketLockConfigurationMapOutput() BucketLockConfigurationMapOutput {
	return o
}

func (o BucketLockConfigurationMapOutput) ToBucketLockConfigurationMapOutputWithContext(ctx context.Context) BucketLockConfigurationMapOutput {
	return o
}

func (o BucketLockConfigurationMapOutput) MapIndex(k pulumi.StringInput) BucketLockConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketLockConfiguration {
		return vs[0].(map[string]*BucketLockConfiguration)[vs[1].(string)]
	}).(BucketLockConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketLockConfigurationInput)(nil)).Elem(), &BucketLockConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketLockConfigurationArrayInput)(nil)).Elem(), BucketLockConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketLockConfigurationMapInput)(nil)).Elem(), BucketLockConfigurationMap{})
	pulumi.RegisterOutputType(BucketLockConfigurationOutput{})
	pulumi.RegisterOutputType(BucketLockConfigurationArrayOutput{})
	pulumi.RegisterOutputType(BucketLockConfigurationMapOutput{})
}
