// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package observability

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// The `observability.AlertManager` resource allows you to enable and manage the Scaleway Cockpit [alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager).
//
// Refer to Cockpit's [product documentation](https://www.scaleway.com/en/docs/observability/cockpit/concepts/) and [API documentation](https://www.scaleway.com/en/developers/api/cockpit/regional-api) for more information.
//
// ## Example Usage
//
// ### Enable the alert manager and configure managed alerts
//
// The following commands allow you to:
//
// - enable the alert manager in a Project named `tfTestProject`
// - enable [managed alerts](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#managed-alerts)
// - set up [contact points](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#contact-points) to receive alert notifications
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/account"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/observability"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := account.NewProject(ctx, "project", &account.ProjectArgs{
//				Name: pulumi.String("tf_test_project"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = observability.NewAlertManager(ctx, "alert_manager", &observability.AlertManagerArgs{
//				ProjectId:           project.ID(),
//				EnableManagedAlerts: pulumi.Bool(true),
//				ContactPoints: observability.AlertManagerContactPointArray{
//					&observability.AlertManagerContactPointArgs{
//						Email: pulumi.String("alert1@example.com"),
//					},
//					&observability.AlertManagerContactPointArgs{
//						Email: pulumi.String("alert2@example.com"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// This section explains how to import alert managers using the ID of the Project associated with Cockpit.
//
// bash
//
// ```sh
// $ pulumi import scaleway:observability/alertManager:AlertManager main fr-par/11111111-1111-1111-1111-111111111111
// ```
type AlertManager struct {
	pulumi.CustomResourceState

	// The URL of the alert manager.
	AlertManagerUrl pulumi.StringOutput `pulumi:"alertManagerUrl"`
	// A list of contact points with email addresses that will receive alerts. Each map should contain a single key email.
	ContactPoints AlertManagerContactPointArrayOutput `pulumi:"contactPoints"`
	// Specifies whether the alert manager should be enabled. Defaults to true.
	EnableManagedAlerts pulumi.BoolPtrOutput `pulumi:"enableManagedAlerts"`
	// ) The ID of the Project the Cockpit is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// ) The region where the [alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager) should be enabled.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewAlertManager registers a new resource with the given unique name, arguments, and options.
func NewAlertManager(ctx *pulumi.Context,
	name string, args *AlertManagerArgs, opts ...pulumi.ResourceOption) (*AlertManager, error) {
	if args == nil {
		args = &AlertManagerArgs{}
	}

	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/cockpitAlertManager:CockpitAlertManager"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AlertManager
	err := ctx.RegisterResource("scaleway:observability/alertManager:AlertManager", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlertManager gets an existing AlertManager resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertManager(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlertManagerState, opts ...pulumi.ResourceOption) (*AlertManager, error) {
	var resource AlertManager
	err := ctx.ReadResource("scaleway:observability/alertManager:AlertManager", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlertManager resources.
type alertManagerState struct {
	// The URL of the alert manager.
	AlertManagerUrl *string `pulumi:"alertManagerUrl"`
	// A list of contact points with email addresses that will receive alerts. Each map should contain a single key email.
	ContactPoints []AlertManagerContactPoint `pulumi:"contactPoints"`
	// Specifies whether the alert manager should be enabled. Defaults to true.
	EnableManagedAlerts *bool `pulumi:"enableManagedAlerts"`
	// ) The ID of the Project the Cockpit is associated with.
	ProjectId *string `pulumi:"projectId"`
	// ) The region where the [alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager) should be enabled.
	Region *string `pulumi:"region"`
}

type AlertManagerState struct {
	// The URL of the alert manager.
	AlertManagerUrl pulumi.StringPtrInput
	// A list of contact points with email addresses that will receive alerts. Each map should contain a single key email.
	ContactPoints AlertManagerContactPointArrayInput
	// Specifies whether the alert manager should be enabled. Defaults to true.
	EnableManagedAlerts pulumi.BoolPtrInput
	// ) The ID of the Project the Cockpit is associated with.
	ProjectId pulumi.StringPtrInput
	// ) The region where the [alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager) should be enabled.
	Region pulumi.StringPtrInput
}

func (AlertManagerState) ElementType() reflect.Type {
	return reflect.TypeOf((*alertManagerState)(nil)).Elem()
}

type alertManagerArgs struct {
	// A list of contact points with email addresses that will receive alerts. Each map should contain a single key email.
	ContactPoints []AlertManagerContactPoint `pulumi:"contactPoints"`
	// Specifies whether the alert manager should be enabled. Defaults to true.
	EnableManagedAlerts *bool `pulumi:"enableManagedAlerts"`
	// ) The ID of the Project the Cockpit is associated with.
	ProjectId *string `pulumi:"projectId"`
	// ) The region where the [alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager) should be enabled.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a AlertManager resource.
type AlertManagerArgs struct {
	// A list of contact points with email addresses that will receive alerts. Each map should contain a single key email.
	ContactPoints AlertManagerContactPointArrayInput
	// Specifies whether the alert manager should be enabled. Defaults to true.
	EnableManagedAlerts pulumi.BoolPtrInput
	// ) The ID of the Project the Cockpit is associated with.
	ProjectId pulumi.StringPtrInput
	// ) The region where the [alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager) should be enabled.
	Region pulumi.StringPtrInput
}

func (AlertManagerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alertManagerArgs)(nil)).Elem()
}

type AlertManagerInput interface {
	pulumi.Input

	ToAlertManagerOutput() AlertManagerOutput
	ToAlertManagerOutputWithContext(ctx context.Context) AlertManagerOutput
}

func (*AlertManager) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertManager)(nil)).Elem()
}

func (i *AlertManager) ToAlertManagerOutput() AlertManagerOutput {
	return i.ToAlertManagerOutputWithContext(context.Background())
}

func (i *AlertManager) ToAlertManagerOutputWithContext(ctx context.Context) AlertManagerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertManagerOutput)
}

// AlertManagerArrayInput is an input type that accepts AlertManagerArray and AlertManagerArrayOutput values.
// You can construct a concrete instance of `AlertManagerArrayInput` via:
//
//	AlertManagerArray{ AlertManagerArgs{...} }
type AlertManagerArrayInput interface {
	pulumi.Input

	ToAlertManagerArrayOutput() AlertManagerArrayOutput
	ToAlertManagerArrayOutputWithContext(context.Context) AlertManagerArrayOutput
}

type AlertManagerArray []AlertManagerInput

func (AlertManagerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertManager)(nil)).Elem()
}

func (i AlertManagerArray) ToAlertManagerArrayOutput() AlertManagerArrayOutput {
	return i.ToAlertManagerArrayOutputWithContext(context.Background())
}

func (i AlertManagerArray) ToAlertManagerArrayOutputWithContext(ctx context.Context) AlertManagerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertManagerArrayOutput)
}

// AlertManagerMapInput is an input type that accepts AlertManagerMap and AlertManagerMapOutput values.
// You can construct a concrete instance of `AlertManagerMapInput` via:
//
//	AlertManagerMap{ "key": AlertManagerArgs{...} }
type AlertManagerMapInput interface {
	pulumi.Input

	ToAlertManagerMapOutput() AlertManagerMapOutput
	ToAlertManagerMapOutputWithContext(context.Context) AlertManagerMapOutput
}

type AlertManagerMap map[string]AlertManagerInput

func (AlertManagerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertManager)(nil)).Elem()
}

func (i AlertManagerMap) ToAlertManagerMapOutput() AlertManagerMapOutput {
	return i.ToAlertManagerMapOutputWithContext(context.Background())
}

func (i AlertManagerMap) ToAlertManagerMapOutputWithContext(ctx context.Context) AlertManagerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertManagerMapOutput)
}

type AlertManagerOutput struct{ *pulumi.OutputState }

func (AlertManagerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertManager)(nil)).Elem()
}

func (o AlertManagerOutput) ToAlertManagerOutput() AlertManagerOutput {
	return o
}

func (o AlertManagerOutput) ToAlertManagerOutputWithContext(ctx context.Context) AlertManagerOutput {
	return o
}

// The URL of the alert manager.
func (o AlertManagerOutput) AlertManagerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *AlertManager) pulumi.StringOutput { return v.AlertManagerUrl }).(pulumi.StringOutput)
}

// A list of contact points with email addresses that will receive alerts. Each map should contain a single key email.
func (o AlertManagerOutput) ContactPoints() AlertManagerContactPointArrayOutput {
	return o.ApplyT(func(v *AlertManager) AlertManagerContactPointArrayOutput { return v.ContactPoints }).(AlertManagerContactPointArrayOutput)
}

// Specifies whether the alert manager should be enabled. Defaults to true.
func (o AlertManagerOutput) EnableManagedAlerts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertManager) pulumi.BoolPtrOutput { return v.EnableManagedAlerts }).(pulumi.BoolPtrOutput)
}

// ) The ID of the Project the Cockpit is associated with.
func (o AlertManagerOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *AlertManager) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// ) The region where the [alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager) should be enabled.
func (o AlertManagerOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AlertManager) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type AlertManagerArrayOutput struct{ *pulumi.OutputState }

func (AlertManagerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertManager)(nil)).Elem()
}

func (o AlertManagerArrayOutput) ToAlertManagerArrayOutput() AlertManagerArrayOutput {
	return o
}

func (o AlertManagerArrayOutput) ToAlertManagerArrayOutputWithContext(ctx context.Context) AlertManagerArrayOutput {
	return o
}

func (o AlertManagerArrayOutput) Index(i pulumi.IntInput) AlertManagerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AlertManager {
		return vs[0].([]*AlertManager)[vs[1].(int)]
	}).(AlertManagerOutput)
}

type AlertManagerMapOutput struct{ *pulumi.OutputState }

func (AlertManagerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertManager)(nil)).Elem()
}

func (o AlertManagerMapOutput) ToAlertManagerMapOutput() AlertManagerMapOutput {
	return o
}

func (o AlertManagerMapOutput) ToAlertManagerMapOutputWithContext(ctx context.Context) AlertManagerMapOutput {
	return o
}

func (o AlertManagerMapOutput) MapIndex(k pulumi.StringInput) AlertManagerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AlertManager {
		return vs[0].(map[string]*AlertManager)[vs[1].(string)]
	}).(AlertManagerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlertManagerInput)(nil)).Elem(), &AlertManager{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertManagerArrayInput)(nil)).Elem(), AlertManagerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertManagerMapInput)(nil)).Elem(), AlertManagerMap{})
	pulumi.RegisterOutputType(AlertManagerOutput{})
	pulumi.RegisterOutputType(AlertManagerArrayOutput{})
	pulumi.RegisterOutputType(AlertManagerMapOutput{})
}
