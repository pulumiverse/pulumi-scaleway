// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package observability

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// > **Important:**  The data source `observability.Cockpit` has been deprecated and will no longer be supported. Instead, use resource `observability.Cockpit`.
//
// > **Note:**
// As of April 2024, Cockpit has introduced [regionalization](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#region) to offer more flexibility and resilience.
// If you have created customized dashboards with data for your Scaleway resources before April 2024, you will need to update your queries in Grafana, with the new regionalized data sources.
//
// The `observability.Cockpit` data source is used to retrieve information about a Scaleway Cockpit associated with a given Project. This can be the default Project or a specific Project identified by its ID.
//
// Refer to Cockpit's [product documentation](https://www.scaleway.com/en/docs/observability/cockpit/concepts/) and [API documentation](https://www.scaleway.com/en/developers/api/cockpit/regional-api) for more information.
//
// ## Retrieve a Cockpit
//
// The following commands allow you to:
//
// - get information on the Cockpit associated with your Scaleway default Project
// - get information on the Cockpit associated with a specific Scaleway Project
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/observability"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Get the default Project's Cockpit
//			_, err := observability.GetInstance(ctx, &observability.GetInstanceArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/observability"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Get a specific Project's Cockpit
//			_, err := observability.GetInstance(ctx, &observability.GetInstanceArgs{
//				ProjectId: pulumi.StringRef("11111111-1111-1111-1111-111111111111"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetInstance(ctx *pulumi.Context, args *GetInstanceArgs, opts ...pulumi.InvokeOption) (*GetInstanceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetInstanceResult
	err := ctx.Invoke("scaleway:observability/getInstance:getInstance", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInstance.
type GetInstanceArgs struct {
	// Specifies the ID of the Scaleway Project that the Cockpit is associated with. If not specified, it defaults to the Project ID specified in the provider configuration.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getInstance.
type GetInstanceResult struct {
	// (Deprecated) A list of [endpoints](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#endpoints) related to Cockpit, each with specific URLs:
	Endpoints []GetInstanceEndpoint `pulumi:"endpoints"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Deprecated: The 'plan' attribute is deprecated and will be removed in a future version. Any changes to this attribute will have no effect.
	Plan string `pulumi:"plan"`
	// (Deprecated) ID of the current pricing plan
	PlanId    string               `pulumi:"planId"`
	ProjectId *string              `pulumi:"projectId"`
	PushUrls  []GetInstancePushUrl `pulumi:"pushUrls"`
}

func GetInstanceOutput(ctx *pulumi.Context, args GetInstanceOutputArgs, opts ...pulumi.InvokeOption) GetInstanceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetInstanceResultOutput, error) {
			args := v.(GetInstanceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("scaleway:observability/getInstance:getInstance", args, GetInstanceResultOutput{}, options).(GetInstanceResultOutput), nil
		}).(GetInstanceResultOutput)
}

// A collection of arguments for invoking getInstance.
type GetInstanceOutputArgs struct {
	// Specifies the ID of the Scaleway Project that the Cockpit is associated with. If not specified, it defaults to the Project ID specified in the provider configuration.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (GetInstanceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgs)(nil)).Elem()
}

// A collection of values returned by getInstance.
type GetInstanceResultOutput struct{ *pulumi.OutputState }

func (GetInstanceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceResult)(nil)).Elem()
}

func (o GetInstanceResultOutput) ToGetInstanceResultOutput() GetInstanceResultOutput {
	return o
}

func (o GetInstanceResultOutput) ToGetInstanceResultOutputWithContext(ctx context.Context) GetInstanceResultOutput {
	return o
}

// (Deprecated) A list of [endpoints](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#endpoints) related to Cockpit, each with specific URLs:
func (o GetInstanceResultOutput) Endpoints() GetInstanceEndpointArrayOutput {
	return o.ApplyT(func(v GetInstanceResult) []GetInstanceEndpoint { return v.Endpoints }).(GetInstanceEndpointArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetInstanceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceResult) string { return v.Id }).(pulumi.StringOutput)
}

// Deprecated: The 'plan' attribute is deprecated and will be removed in a future version. Any changes to this attribute will have no effect.
func (o GetInstanceResultOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceResult) string { return v.Plan }).(pulumi.StringOutput)
}

// (Deprecated) ID of the current pricing plan
func (o GetInstanceResultOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceResult) string { return v.PlanId }).(pulumi.StringOutput)
}

func (o GetInstanceResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstanceResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

func (o GetInstanceResultOutput) PushUrls() GetInstancePushUrlArrayOutput {
	return o.ApplyT(func(v GetInstanceResult) []GetInstancePushUrl { return v.PushUrls }).(GetInstancePushUrlArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetInstanceResultOutput{})
}
