// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package observability

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// The `observability.Source` data source allows you to retrieve information about a specific [data source](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#data-sources) in Scaleway's Cockpit.
//
// Refer to Cockpit's [product documentation](https://www.scaleway.com/en/docs/observability/cockpit/concepts/) and [API documentation](https://www.scaleway.com/en/developers/api/cockpit/regional-api) for more information.
//
// ## Example Usage
//
// ### Retrieve a specific data source by ID
//
// The following example retrieves a Cockpit data source by its unique ID.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/observability"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := observability.LookupSource(ctx, &observability.LookupSourceArgs{
//				Id: pulumi.StringRef("fr-par/11111111-1111-1111-1111-111111111111"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSource(ctx *pulumi.Context, args *LookupSourceArgs, opts ...pulumi.InvokeOption) (*LookupSourceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSourceResult
	err := ctx.Invoke("scaleway:observability/getSource:getSource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSource.
type LookupSourceArgs struct {
	// The unique identifier of the Cockpit data source in the `{region}/{id}` format. If specified, other filters are ignored.
	Id *string `pulumi:"id"`
	// The name of the data source.
	Name *string `pulumi:"name"`
	// The origin of the data source. Possible values are:
	Origin *string `pulumi:"origin"`
	// The ID of the Project the data source is associated with. Defaults to the Project ID specified in the provider configuration.
	ProjectId *string `pulumi:"projectId"`
	// The [type](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#data-types) of data source. Possible values are: `metrics`, `logs`, or `traces`.
	Type *string `pulumi:"type"`
}

// A collection of values returned by getSource.
type LookupSourceResult struct {
	// The date and time the data source was created (in RFC 3339 format).
	CreatedAt string `pulumi:"createdAt"`
	// The unique identifier of the data source in the `{region}/{id}` format.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// The origin of the data source.
	Origin    string `pulumi:"origin"`
	ProjectId string `pulumi:"projectId"`
	Region    string `pulumi:"region"`
	// The number of days the data is retained in the data source.
	RetentionDays int `pulumi:"retentionDays"`
	// Indicates whether the data source is synchronized with Grafana.
	SynchronizedWithGrafana bool   `pulumi:"synchronizedWithGrafana"`
	Type                    string `pulumi:"type"`
	// The date and time the data source was last updated (in RFC 3339 format).
	UpdatedAt string `pulumi:"updatedAt"`
	// The URL of the Cockpit data source.
	Url string `pulumi:"url"`
}

func LookupSourceOutput(ctx *pulumi.Context, args LookupSourceOutputArgs, opts ...pulumi.InvokeOption) LookupSourceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSourceResultOutput, error) {
			args := v.(LookupSourceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("scaleway:observability/getSource:getSource", args, LookupSourceResultOutput{}, options).(LookupSourceResultOutput), nil
		}).(LookupSourceResultOutput)
}

// A collection of arguments for invoking getSource.
type LookupSourceOutputArgs struct {
	// The unique identifier of the Cockpit data source in the `{region}/{id}` format. If specified, other filters are ignored.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the data source.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The origin of the data source. Possible values are:
	Origin pulumi.StringPtrInput `pulumi:"origin"`
	// The ID of the Project the data source is associated with. Defaults to the Project ID specified in the provider configuration.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// The [type](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#data-types) of data source. Possible values are: `metrics`, `logs`, or `traces`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (LookupSourceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSourceArgs)(nil)).Elem()
}

// A collection of values returned by getSource.
type LookupSourceResultOutput struct{ *pulumi.OutputState }

func (LookupSourceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSourceResult)(nil)).Elem()
}

func (o LookupSourceResultOutput) ToLookupSourceResultOutput() LookupSourceResultOutput {
	return o
}

func (o LookupSourceResultOutput) ToLookupSourceResultOutputWithContext(ctx context.Context) LookupSourceResultOutput {
	return o
}

// The date and time the data source was created (in RFC 3339 format).
func (o LookupSourceResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The unique identifier of the data source in the `{region}/{id}` format.
func (o LookupSourceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSourceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceResult) string { return v.Name }).(pulumi.StringOutput)
}

// The origin of the data source.
func (o LookupSourceResultOutput) Origin() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceResult) string { return v.Origin }).(pulumi.StringOutput)
}

func (o LookupSourceResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o LookupSourceResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceResult) string { return v.Region }).(pulumi.StringOutput)
}

// The number of days the data is retained in the data source.
func (o LookupSourceResultOutput) RetentionDays() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSourceResult) int { return v.RetentionDays }).(pulumi.IntOutput)
}

// Indicates whether the data source is synchronized with Grafana.
func (o LookupSourceResultOutput) SynchronizedWithGrafana() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSourceResult) bool { return v.SynchronizedWithGrafana }).(pulumi.BoolOutput)
}

func (o LookupSourceResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceResult) string { return v.Type }).(pulumi.StringOutput)
}

// The date and time the data source was last updated (in RFC 3339 format).
func (o LookupSourceResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The URL of the Cockpit data source.
func (o LookupSourceResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceResult) string { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSourceResultOutput{})
}
