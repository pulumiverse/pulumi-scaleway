// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package observability

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Gets information about multiple Cockpit data sources.
//
// ## Example Usage
//
// ### List all sources in a project
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/observability"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := observability.GetSources(ctx, &observability.GetSourcesArgs{
//				ProjectId: pulumi.StringRef("11111111-1111-1111-1111-111111111111"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Filter sources by type
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/observability"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := observability.GetSources(ctx, &observability.GetSourcesArgs{
//				ProjectId: pulumi.StringRef("11111111-1111-1111-1111-111111111111"),
//				Type:      pulumi.StringRef("metrics"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Filter sources by name
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/observability"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := observability.GetSources(ctx, &observability.GetSourcesArgs{
//				ProjectId: pulumi.StringRef("11111111-1111-1111-1111-111111111111"),
//				Name:      pulumi.StringRef("my-data-source"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Filter sources by origin
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/observability"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := observability.GetSources(ctx, &observability.GetSourcesArgs{
//				ProjectId: pulumi.StringRef("11111111-1111-1111-1111-111111111111"),
//				Origin:    pulumi.StringRef("external"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### List default Scaleway sources
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/observability"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := observability.GetSources(ctx, &observability.GetSourcesArgs{
//				ProjectId: pulumi.StringRef("11111111-1111-1111-1111-111111111111"),
//				Origin:    pulumi.StringRef("scaleway"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSources(ctx *pulumi.Context, args *GetSourcesArgs, opts ...pulumi.InvokeOption) (*GetSourcesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSourcesResult
	err := ctx.Invoke("scaleway:observability/getSources:getSources", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSources.
type GetSourcesArgs struct {
	// Filter sources by name.
	Name *string `pulumi:"name"`
	// Filter sources by origin. Possible values are: `scaleway`, `external`, `custom`.
	Origin *string `pulumi:"origin"`
	// The project ID the cockpit sources are associated with.
	ProjectId *string `pulumi:"projectId"`
	// The region in which the cockpit sources are located.
	Region *string `pulumi:"region"`
	// Filter sources by type. Possible values are: `metrics`, `logs`, `traces`.
	Type *string `pulumi:"type"`
}

// A collection of values returned by getSources.
type GetSourcesResult struct {
	// The date and time of the creation of the cockpit datasource.
	CreatedAt string `pulumi:"createdAt"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name of the datasource.
	Name *string `pulumi:"name"`
	// The origin of the datasource.
	Origin *string `pulumi:"origin"`
	// The project ID of the data source.
	ProjectId *string `pulumi:"projectId"`
	// The URL endpoint used for pushing data to the cockpit data source.
	PushUrl string `pulumi:"pushUrl"`
	// The region of the data source.
	Region *string `pulumi:"region"`
	// The number of days to retain data.
	RetentionDays int `pulumi:"retentionDays"`
	// List of cockpit sources.
	Sources []GetSourcesSource `pulumi:"sources"`
	// Indicates whether the data source is synchronized with Grafana.
	SynchronizedWithGrafana bool `pulumi:"synchronizedWithGrafana"`
	// The type of the datasource.
	Type *string `pulumi:"type"`
	// The date and time of the last update of the cockpit datasource.
	UpdatedAt string `pulumi:"updatedAt"`
	// The URL of the datasource.
	Url string `pulumi:"url"`
}

func GetSourcesOutput(ctx *pulumi.Context, args GetSourcesOutputArgs, opts ...pulumi.InvokeOption) GetSourcesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetSourcesResultOutput, error) {
			args := v.(GetSourcesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("scaleway:observability/getSources:getSources", args, GetSourcesResultOutput{}, options).(GetSourcesResultOutput), nil
		}).(GetSourcesResultOutput)
}

// A collection of arguments for invoking getSources.
type GetSourcesOutputArgs struct {
	// Filter sources by name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Filter sources by origin. Possible values are: `scaleway`, `external`, `custom`.
	Origin pulumi.StringPtrInput `pulumi:"origin"`
	// The project ID the cockpit sources are associated with.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// The region in which the cockpit sources are located.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Filter sources by type. Possible values are: `metrics`, `logs`, `traces`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GetSourcesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSourcesArgs)(nil)).Elem()
}

// A collection of values returned by getSources.
type GetSourcesResultOutput struct{ *pulumi.OutputState }

func (GetSourcesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSourcesResult)(nil)).Elem()
}

func (o GetSourcesResultOutput) ToGetSourcesResultOutput() GetSourcesResultOutput {
	return o
}

func (o GetSourcesResultOutput) ToGetSourcesResultOutputWithContext(ctx context.Context) GetSourcesResultOutput {
	return o
}

// The date and time of the creation of the cockpit datasource.
func (o GetSourcesResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourcesResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSourcesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourcesResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the datasource.
func (o GetSourcesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSourcesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The origin of the datasource.
func (o GetSourcesResultOutput) Origin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSourcesResult) *string { return v.Origin }).(pulumi.StringPtrOutput)
}

// The project ID of the data source.
func (o GetSourcesResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSourcesResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The URL endpoint used for pushing data to the cockpit data source.
func (o GetSourcesResultOutput) PushUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourcesResult) string { return v.PushUrl }).(pulumi.StringOutput)
}

// The region of the data source.
func (o GetSourcesResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSourcesResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The number of days to retain data.
func (o GetSourcesResultOutput) RetentionDays() pulumi.IntOutput {
	return o.ApplyT(func(v GetSourcesResult) int { return v.RetentionDays }).(pulumi.IntOutput)
}

// List of cockpit sources.
func (o GetSourcesResultOutput) Sources() GetSourcesSourceArrayOutput {
	return o.ApplyT(func(v GetSourcesResult) []GetSourcesSource { return v.Sources }).(GetSourcesSourceArrayOutput)
}

// Indicates whether the data source is synchronized with Grafana.
func (o GetSourcesResultOutput) SynchronizedWithGrafana() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSourcesResult) bool { return v.SynchronizedWithGrafana }).(pulumi.BoolOutput)
}

// The type of the datasource.
func (o GetSourcesResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSourcesResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The date and time of the last update of the cockpit datasource.
func (o GetSourcesResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourcesResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The URL of the datasource.
func (o GetSourcesResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourcesResult) string { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSourcesResultOutput{})
}
