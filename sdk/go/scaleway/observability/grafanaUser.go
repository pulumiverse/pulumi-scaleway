// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package observability

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// The `observability.GrafanaUser` resource allows you to create and manage [Grafana users](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#grafana-users) in Scaleway Cockpit.
//
// Refer to Cockpit's [product documentation](https://www.scaleway.com/en/docs/observability/cockpit/concepts/) and [API documentation](https://www.scaleway.com/en/developers/api/cockpit/regional-api) for more information.
//
// ## Example Usage
//
// ### Create a Grafana user
//
// The following command allows you to create a Grafana user within a specific Scaleway Project.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/account"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/observability"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := account.NewProject(ctx, "project", &account.ProjectArgs{
//				Name: pulumi.String("test project grafana user"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = observability.NewGrafanaUser(ctx, "main", &observability.GrafanaUserArgs{
//				ProjectId: project.ID(),
//				Login:     pulumi.String("my-awesome-user"),
//				Role:      pulumi.String("editor"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// This section explains how to import Grafana users using the ID of the Project associated with Cockpit, and the Grafana user ID in the `{project_id}/{grafana_user_id}` format.
//
// bash
//
// ```sh
// $ pulumi import scaleway:observability/grafanaUser:GrafanaUser main 11111111-1111-1111-1111-111111111111/2
// ```
type GrafanaUser struct {
	pulumi.CustomResourceState

	// URL for Grafana.
	GrafanaUrl pulumi.StringOutput `pulumi:"grafanaUrl"`
	// The username of the Grafana user. The `admin` user is not yet available for creation. You need your Grafana username to log in to Grafana and access your dashboards.
	Login pulumi.StringOutput `pulumi:"login"`
	// The password of the Grafana user.
	Password pulumi.StringOutput `pulumi:"password"`
	// ) The ID of the Project the Cockpit is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The role assigned to the Grafana user. Must be `editor` or `viewer`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewGrafanaUser registers a new resource with the given unique name, arguments, and options.
func NewGrafanaUser(ctx *pulumi.Context,
	name string, args *GrafanaUserArgs, opts ...pulumi.ResourceOption) (*GrafanaUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Login == nil {
		return nil, errors.New("invalid value for required argument 'Login'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/cockpitGrafanaUser:CockpitGrafanaUser"),
		},
	})
	opts = append(opts, aliases)
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GrafanaUser
	err := ctx.RegisterResource("scaleway:observability/grafanaUser:GrafanaUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGrafanaUser gets an existing GrafanaUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGrafanaUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GrafanaUserState, opts ...pulumi.ResourceOption) (*GrafanaUser, error) {
	var resource GrafanaUser
	err := ctx.ReadResource("scaleway:observability/grafanaUser:GrafanaUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GrafanaUser resources.
type grafanaUserState struct {
	// URL for Grafana.
	GrafanaUrl *string `pulumi:"grafanaUrl"`
	// The username of the Grafana user. The `admin` user is not yet available for creation. You need your Grafana username to log in to Grafana and access your dashboards.
	Login *string `pulumi:"login"`
	// The password of the Grafana user.
	Password *string `pulumi:"password"`
	// ) The ID of the Project the Cockpit is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The role assigned to the Grafana user. Must be `editor` or `viewer`.
	Role *string `pulumi:"role"`
}

type GrafanaUserState struct {
	// URL for Grafana.
	GrafanaUrl pulumi.StringPtrInput
	// The username of the Grafana user. The `admin` user is not yet available for creation. You need your Grafana username to log in to Grafana and access your dashboards.
	Login pulumi.StringPtrInput
	// The password of the Grafana user.
	Password pulumi.StringPtrInput
	// ) The ID of the Project the Cockpit is associated with.
	ProjectId pulumi.StringPtrInput
	// The role assigned to the Grafana user. Must be `editor` or `viewer`.
	Role pulumi.StringPtrInput
}

func (GrafanaUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*grafanaUserState)(nil)).Elem()
}

type grafanaUserArgs struct {
	// The username of the Grafana user. The `admin` user is not yet available for creation. You need your Grafana username to log in to Grafana and access your dashboards.
	Login string `pulumi:"login"`
	// ) The ID of the Project the Cockpit is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The role assigned to the Grafana user. Must be `editor` or `viewer`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a GrafanaUser resource.
type GrafanaUserArgs struct {
	// The username of the Grafana user. The `admin` user is not yet available for creation. You need your Grafana username to log in to Grafana and access your dashboards.
	Login pulumi.StringInput
	// ) The ID of the Project the Cockpit is associated with.
	ProjectId pulumi.StringPtrInput
	// The role assigned to the Grafana user. Must be `editor` or `viewer`.
	Role pulumi.StringInput
}

func (GrafanaUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*grafanaUserArgs)(nil)).Elem()
}

type GrafanaUserInput interface {
	pulumi.Input

	ToGrafanaUserOutput() GrafanaUserOutput
	ToGrafanaUserOutputWithContext(ctx context.Context) GrafanaUserOutput
}

func (*GrafanaUser) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafanaUser)(nil)).Elem()
}

func (i *GrafanaUser) ToGrafanaUserOutput() GrafanaUserOutput {
	return i.ToGrafanaUserOutputWithContext(context.Background())
}

func (i *GrafanaUser) ToGrafanaUserOutputWithContext(ctx context.Context) GrafanaUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaUserOutput)
}

// GrafanaUserArrayInput is an input type that accepts GrafanaUserArray and GrafanaUserArrayOutput values.
// You can construct a concrete instance of `GrafanaUserArrayInput` via:
//
//	GrafanaUserArray{ GrafanaUserArgs{...} }
type GrafanaUserArrayInput interface {
	pulumi.Input

	ToGrafanaUserArrayOutput() GrafanaUserArrayOutput
	ToGrafanaUserArrayOutputWithContext(context.Context) GrafanaUserArrayOutput
}

type GrafanaUserArray []GrafanaUserInput

func (GrafanaUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrafanaUser)(nil)).Elem()
}

func (i GrafanaUserArray) ToGrafanaUserArrayOutput() GrafanaUserArrayOutput {
	return i.ToGrafanaUserArrayOutputWithContext(context.Background())
}

func (i GrafanaUserArray) ToGrafanaUserArrayOutputWithContext(ctx context.Context) GrafanaUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaUserArrayOutput)
}

// GrafanaUserMapInput is an input type that accepts GrafanaUserMap and GrafanaUserMapOutput values.
// You can construct a concrete instance of `GrafanaUserMapInput` via:
//
//	GrafanaUserMap{ "key": GrafanaUserArgs{...} }
type GrafanaUserMapInput interface {
	pulumi.Input

	ToGrafanaUserMapOutput() GrafanaUserMapOutput
	ToGrafanaUserMapOutputWithContext(context.Context) GrafanaUserMapOutput
}

type GrafanaUserMap map[string]GrafanaUserInput

func (GrafanaUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrafanaUser)(nil)).Elem()
}

func (i GrafanaUserMap) ToGrafanaUserMapOutput() GrafanaUserMapOutput {
	return i.ToGrafanaUserMapOutputWithContext(context.Background())
}

func (i GrafanaUserMap) ToGrafanaUserMapOutputWithContext(ctx context.Context) GrafanaUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaUserMapOutput)
}

type GrafanaUserOutput struct{ *pulumi.OutputState }

func (GrafanaUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafanaUser)(nil)).Elem()
}

func (o GrafanaUserOutput) ToGrafanaUserOutput() GrafanaUserOutput {
	return o
}

func (o GrafanaUserOutput) ToGrafanaUserOutputWithContext(ctx context.Context) GrafanaUserOutput {
	return o
}

// URL for Grafana.
func (o GrafanaUserOutput) GrafanaUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *GrafanaUser) pulumi.StringOutput { return v.GrafanaUrl }).(pulumi.StringOutput)
}

// The username of the Grafana user. The `admin` user is not yet available for creation. You need your Grafana username to log in to Grafana and access your dashboards.
func (o GrafanaUserOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v *GrafanaUser) pulumi.StringOutput { return v.Login }).(pulumi.StringOutput)
}

// The password of the Grafana user.
func (o GrafanaUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *GrafanaUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// ) The ID of the Project the Cockpit is associated with.
func (o GrafanaUserOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *GrafanaUser) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The role assigned to the Grafana user. Must be `editor` or `viewer`.
func (o GrafanaUserOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *GrafanaUser) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type GrafanaUserArrayOutput struct{ *pulumi.OutputState }

func (GrafanaUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrafanaUser)(nil)).Elem()
}

func (o GrafanaUserArrayOutput) ToGrafanaUserArrayOutput() GrafanaUserArrayOutput {
	return o
}

func (o GrafanaUserArrayOutput) ToGrafanaUserArrayOutputWithContext(ctx context.Context) GrafanaUserArrayOutput {
	return o
}

func (o GrafanaUserArrayOutput) Index(i pulumi.IntInput) GrafanaUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GrafanaUser {
		return vs[0].([]*GrafanaUser)[vs[1].(int)]
	}).(GrafanaUserOutput)
}

type GrafanaUserMapOutput struct{ *pulumi.OutputState }

func (GrafanaUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrafanaUser)(nil)).Elem()
}

func (o GrafanaUserMapOutput) ToGrafanaUserMapOutput() GrafanaUserMapOutput {
	return o
}

func (o GrafanaUserMapOutput) ToGrafanaUserMapOutputWithContext(ctx context.Context) GrafanaUserMapOutput {
	return o
}

func (o GrafanaUserMapOutput) MapIndex(k pulumi.StringInput) GrafanaUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GrafanaUser {
		return vs[0].(map[string]*GrafanaUser)[vs[1].(string)]
	}).(GrafanaUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaUserInput)(nil)).Elem(), &GrafanaUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaUserArrayInput)(nil)).Elem(), GrafanaUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaUserMapInput)(nil)).Elem(), GrafanaUserMap{})
	pulumi.RegisterOutputType(GrafanaUserOutput{})
	pulumi.RegisterOutputType(GrafanaUserArrayOutput{})
	pulumi.RegisterOutputType(GrafanaUserMapOutput{})
}
