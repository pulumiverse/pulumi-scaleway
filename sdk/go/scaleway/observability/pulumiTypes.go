// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package observability

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

var _ = internal.GetEnvOrDefault

type AlertManagerContactPoint struct {
	// Email addresses for the alert receivers
	Email *string `pulumi:"email"`
}

// AlertManagerContactPointInput is an input type that accepts AlertManagerContactPointArgs and AlertManagerContactPointOutput values.
// You can construct a concrete instance of `AlertManagerContactPointInput` via:
//
//	AlertManagerContactPointArgs{...}
type AlertManagerContactPointInput interface {
	pulumi.Input

	ToAlertManagerContactPointOutput() AlertManagerContactPointOutput
	ToAlertManagerContactPointOutputWithContext(context.Context) AlertManagerContactPointOutput
}

type AlertManagerContactPointArgs struct {
	// Email addresses for the alert receivers
	Email pulumi.StringPtrInput `pulumi:"email"`
}

func (AlertManagerContactPointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertManagerContactPoint)(nil)).Elem()
}

func (i AlertManagerContactPointArgs) ToAlertManagerContactPointOutput() AlertManagerContactPointOutput {
	return i.ToAlertManagerContactPointOutputWithContext(context.Background())
}

func (i AlertManagerContactPointArgs) ToAlertManagerContactPointOutputWithContext(ctx context.Context) AlertManagerContactPointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertManagerContactPointOutput)
}

// AlertManagerContactPointArrayInput is an input type that accepts AlertManagerContactPointArray and AlertManagerContactPointArrayOutput values.
// You can construct a concrete instance of `AlertManagerContactPointArrayInput` via:
//
//	AlertManagerContactPointArray{ AlertManagerContactPointArgs{...} }
type AlertManagerContactPointArrayInput interface {
	pulumi.Input

	ToAlertManagerContactPointArrayOutput() AlertManagerContactPointArrayOutput
	ToAlertManagerContactPointArrayOutputWithContext(context.Context) AlertManagerContactPointArrayOutput
}

type AlertManagerContactPointArray []AlertManagerContactPointInput

func (AlertManagerContactPointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertManagerContactPoint)(nil)).Elem()
}

func (i AlertManagerContactPointArray) ToAlertManagerContactPointArrayOutput() AlertManagerContactPointArrayOutput {
	return i.ToAlertManagerContactPointArrayOutputWithContext(context.Background())
}

func (i AlertManagerContactPointArray) ToAlertManagerContactPointArrayOutputWithContext(ctx context.Context) AlertManagerContactPointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertManagerContactPointArrayOutput)
}

type AlertManagerContactPointOutput struct{ *pulumi.OutputState }

func (AlertManagerContactPointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertManagerContactPoint)(nil)).Elem()
}

func (o AlertManagerContactPointOutput) ToAlertManagerContactPointOutput() AlertManagerContactPointOutput {
	return o
}

func (o AlertManagerContactPointOutput) ToAlertManagerContactPointOutputWithContext(ctx context.Context) AlertManagerContactPointOutput {
	return o
}

// Email addresses for the alert receivers
func (o AlertManagerContactPointOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertManagerContactPoint) *string { return v.Email }).(pulumi.StringPtrOutput)
}

type AlertManagerContactPointArrayOutput struct{ *pulumi.OutputState }

func (AlertManagerContactPointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertManagerContactPoint)(nil)).Elem()
}

func (o AlertManagerContactPointArrayOutput) ToAlertManagerContactPointArrayOutput() AlertManagerContactPointArrayOutput {
	return o
}

func (o AlertManagerContactPointArrayOutput) ToAlertManagerContactPointArrayOutputWithContext(ctx context.Context) AlertManagerContactPointArrayOutput {
	return o
}

func (o AlertManagerContactPointArrayOutput) Index(i pulumi.IntInput) AlertManagerContactPointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertManagerContactPoint {
		return vs[0].([]AlertManagerContactPoint)[vs[1].(int)]
	}).(AlertManagerContactPointOutput)
}

type CockpitEndpoint struct {
	// (Deprecated) URL for the [Alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager).
	AlertmanagerUrl *string `pulumi:"alertmanagerUrl"`
	// (Deprecated) URL for Grafana.
	GrafanaUrl *string `pulumi:"grafanaUrl"`
	// (Deprecated) URL for [logs](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#logs) to retrieve in the [Data sources tab](https://console.scaleway.com/cockpit/dataSource) of the Scaleway console.
	LogsUrl *string `pulumi:"logsUrl"`
	// (Deprecated) URL for [metrics](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#metric) to retrieve in the [Data sources tab](https://console.scaleway.com/cockpit/dataSource) of the Scaleway console.
	MetricsUrl *string `pulumi:"metricsUrl"`
	// (Deprecated) URL for [traces](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#traces) to retrieve in the [Data sources tab](https://console.scaleway.com/cockpit/dataSource) of the Scaleway console.
	TracesUrl *string `pulumi:"tracesUrl"`
}

// CockpitEndpointInput is an input type that accepts CockpitEndpointArgs and CockpitEndpointOutput values.
// You can construct a concrete instance of `CockpitEndpointInput` via:
//
//	CockpitEndpointArgs{...}
type CockpitEndpointInput interface {
	pulumi.Input

	ToCockpitEndpointOutput() CockpitEndpointOutput
	ToCockpitEndpointOutputWithContext(context.Context) CockpitEndpointOutput
}

type CockpitEndpointArgs struct {
	// (Deprecated) URL for the [Alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager).
	AlertmanagerUrl pulumi.StringPtrInput `pulumi:"alertmanagerUrl"`
	// (Deprecated) URL for Grafana.
	GrafanaUrl pulumi.StringPtrInput `pulumi:"grafanaUrl"`
	// (Deprecated) URL for [logs](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#logs) to retrieve in the [Data sources tab](https://console.scaleway.com/cockpit/dataSource) of the Scaleway console.
	LogsUrl pulumi.StringPtrInput `pulumi:"logsUrl"`
	// (Deprecated) URL for [metrics](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#metric) to retrieve in the [Data sources tab](https://console.scaleway.com/cockpit/dataSource) of the Scaleway console.
	MetricsUrl pulumi.StringPtrInput `pulumi:"metricsUrl"`
	// (Deprecated) URL for [traces](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#traces) to retrieve in the [Data sources tab](https://console.scaleway.com/cockpit/dataSource) of the Scaleway console.
	TracesUrl pulumi.StringPtrInput `pulumi:"tracesUrl"`
}

func (CockpitEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CockpitEndpoint)(nil)).Elem()
}

func (i CockpitEndpointArgs) ToCockpitEndpointOutput() CockpitEndpointOutput {
	return i.ToCockpitEndpointOutputWithContext(context.Background())
}

func (i CockpitEndpointArgs) ToCockpitEndpointOutputWithContext(ctx context.Context) CockpitEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CockpitEndpointOutput)
}

// CockpitEndpointArrayInput is an input type that accepts CockpitEndpointArray and CockpitEndpointArrayOutput values.
// You can construct a concrete instance of `CockpitEndpointArrayInput` via:
//
//	CockpitEndpointArray{ CockpitEndpointArgs{...} }
type CockpitEndpointArrayInput interface {
	pulumi.Input

	ToCockpitEndpointArrayOutput() CockpitEndpointArrayOutput
	ToCockpitEndpointArrayOutputWithContext(context.Context) CockpitEndpointArrayOutput
}

type CockpitEndpointArray []CockpitEndpointInput

func (CockpitEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CockpitEndpoint)(nil)).Elem()
}

func (i CockpitEndpointArray) ToCockpitEndpointArrayOutput() CockpitEndpointArrayOutput {
	return i.ToCockpitEndpointArrayOutputWithContext(context.Background())
}

func (i CockpitEndpointArray) ToCockpitEndpointArrayOutputWithContext(ctx context.Context) CockpitEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CockpitEndpointArrayOutput)
}

type CockpitEndpointOutput struct{ *pulumi.OutputState }

func (CockpitEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CockpitEndpoint)(nil)).Elem()
}

func (o CockpitEndpointOutput) ToCockpitEndpointOutput() CockpitEndpointOutput {
	return o
}

func (o CockpitEndpointOutput) ToCockpitEndpointOutputWithContext(ctx context.Context) CockpitEndpointOutput {
	return o
}

// (Deprecated) URL for the [Alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager).
func (o CockpitEndpointOutput) AlertmanagerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CockpitEndpoint) *string { return v.AlertmanagerUrl }).(pulumi.StringPtrOutput)
}

// (Deprecated) URL for Grafana.
func (o CockpitEndpointOutput) GrafanaUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CockpitEndpoint) *string { return v.GrafanaUrl }).(pulumi.StringPtrOutput)
}

// (Deprecated) URL for [logs](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#logs) to retrieve in the [Data sources tab](https://console.scaleway.com/cockpit/dataSource) of the Scaleway console.
func (o CockpitEndpointOutput) LogsUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CockpitEndpoint) *string { return v.LogsUrl }).(pulumi.StringPtrOutput)
}

// (Deprecated) URL for [metrics](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#metric) to retrieve in the [Data sources tab](https://console.scaleway.com/cockpit/dataSource) of the Scaleway console.
func (o CockpitEndpointOutput) MetricsUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CockpitEndpoint) *string { return v.MetricsUrl }).(pulumi.StringPtrOutput)
}

// (Deprecated) URL for [traces](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#traces) to retrieve in the [Data sources tab](https://console.scaleway.com/cockpit/dataSource) of the Scaleway console.
func (o CockpitEndpointOutput) TracesUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CockpitEndpoint) *string { return v.TracesUrl }).(pulumi.StringPtrOutput)
}

type CockpitEndpointArrayOutput struct{ *pulumi.OutputState }

func (CockpitEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CockpitEndpoint)(nil)).Elem()
}

func (o CockpitEndpointArrayOutput) ToCockpitEndpointArrayOutput() CockpitEndpointArrayOutput {
	return o
}

func (o CockpitEndpointArrayOutput) ToCockpitEndpointArrayOutputWithContext(ctx context.Context) CockpitEndpointArrayOutput {
	return o
}

func (o CockpitEndpointArrayOutput) Index(i pulumi.IntInput) CockpitEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CockpitEndpoint {
		return vs[0].([]CockpitEndpoint)[vs[1].(int)]
	}).(CockpitEndpointOutput)
}

type CockpitPushUrl struct {
	// Push URL for logs (Grafana Loki)
	PushLogsUrl *string `pulumi:"pushLogsUrl"`
	// Push URL for metrics (Grafana Mimir)
	PushMetricsUrl *string `pulumi:"pushMetricsUrl"`
}

// CockpitPushUrlInput is an input type that accepts CockpitPushUrlArgs and CockpitPushUrlOutput values.
// You can construct a concrete instance of `CockpitPushUrlInput` via:
//
//	CockpitPushUrlArgs{...}
type CockpitPushUrlInput interface {
	pulumi.Input

	ToCockpitPushUrlOutput() CockpitPushUrlOutput
	ToCockpitPushUrlOutputWithContext(context.Context) CockpitPushUrlOutput
}

type CockpitPushUrlArgs struct {
	// Push URL for logs (Grafana Loki)
	PushLogsUrl pulumi.StringPtrInput `pulumi:"pushLogsUrl"`
	// Push URL for metrics (Grafana Mimir)
	PushMetricsUrl pulumi.StringPtrInput `pulumi:"pushMetricsUrl"`
}

func (CockpitPushUrlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CockpitPushUrl)(nil)).Elem()
}

func (i CockpitPushUrlArgs) ToCockpitPushUrlOutput() CockpitPushUrlOutput {
	return i.ToCockpitPushUrlOutputWithContext(context.Background())
}

func (i CockpitPushUrlArgs) ToCockpitPushUrlOutputWithContext(ctx context.Context) CockpitPushUrlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CockpitPushUrlOutput)
}

// CockpitPushUrlArrayInput is an input type that accepts CockpitPushUrlArray and CockpitPushUrlArrayOutput values.
// You can construct a concrete instance of `CockpitPushUrlArrayInput` via:
//
//	CockpitPushUrlArray{ CockpitPushUrlArgs{...} }
type CockpitPushUrlArrayInput interface {
	pulumi.Input

	ToCockpitPushUrlArrayOutput() CockpitPushUrlArrayOutput
	ToCockpitPushUrlArrayOutputWithContext(context.Context) CockpitPushUrlArrayOutput
}

type CockpitPushUrlArray []CockpitPushUrlInput

func (CockpitPushUrlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CockpitPushUrl)(nil)).Elem()
}

func (i CockpitPushUrlArray) ToCockpitPushUrlArrayOutput() CockpitPushUrlArrayOutput {
	return i.ToCockpitPushUrlArrayOutputWithContext(context.Background())
}

func (i CockpitPushUrlArray) ToCockpitPushUrlArrayOutputWithContext(ctx context.Context) CockpitPushUrlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CockpitPushUrlArrayOutput)
}

type CockpitPushUrlOutput struct{ *pulumi.OutputState }

func (CockpitPushUrlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CockpitPushUrl)(nil)).Elem()
}

func (o CockpitPushUrlOutput) ToCockpitPushUrlOutput() CockpitPushUrlOutput {
	return o
}

func (o CockpitPushUrlOutput) ToCockpitPushUrlOutputWithContext(ctx context.Context) CockpitPushUrlOutput {
	return o
}

// Push URL for logs (Grafana Loki)
func (o CockpitPushUrlOutput) PushLogsUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CockpitPushUrl) *string { return v.PushLogsUrl }).(pulumi.StringPtrOutput)
}

// Push URL for metrics (Grafana Mimir)
func (o CockpitPushUrlOutput) PushMetricsUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CockpitPushUrl) *string { return v.PushMetricsUrl }).(pulumi.StringPtrOutput)
}

type CockpitPushUrlArrayOutput struct{ *pulumi.OutputState }

func (CockpitPushUrlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CockpitPushUrl)(nil)).Elem()
}

func (o CockpitPushUrlArrayOutput) ToCockpitPushUrlArrayOutput() CockpitPushUrlArrayOutput {
	return o
}

func (o CockpitPushUrlArrayOutput) ToCockpitPushUrlArrayOutputWithContext(ctx context.Context) CockpitPushUrlArrayOutput {
	return o
}

func (o CockpitPushUrlArrayOutput) Index(i pulumi.IntInput) CockpitPushUrlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CockpitPushUrl {
		return vs[0].([]CockpitPushUrl)[vs[1].(int)]
	}).(CockpitPushUrlOutput)
}

type TokenScopes struct {
	// Permission to query logs.
	QueryLogs *bool `pulumi:"queryLogs"`
	// Permission to query metrics.
	QueryMetrics *bool `pulumi:"queryMetrics"`
	// Permission to query traces.
	QueryTraces *bool `pulumi:"queryTraces"`
	// Permission to set up alerts.
	SetupAlerts *bool `pulumi:"setupAlerts"`
	// Permission to set up logs rules.
	SetupLogsRules *bool `pulumi:"setupLogsRules"`
	// Permission to set up metrics rules.
	SetupMetricsRules *bool `pulumi:"setupMetricsRules"`
	// Permission to write logs.
	WriteLogs *bool `pulumi:"writeLogs"`
	// Permission to write metrics.
	WriteMetrics *bool `pulumi:"writeMetrics"`
	// Permission to write traces.
	WriteTraces *bool `pulumi:"writeTraces"`
}

// TokenScopesInput is an input type that accepts TokenScopesArgs and TokenScopesOutput values.
// You can construct a concrete instance of `TokenScopesInput` via:
//
//	TokenScopesArgs{...}
type TokenScopesInput interface {
	pulumi.Input

	ToTokenScopesOutput() TokenScopesOutput
	ToTokenScopesOutputWithContext(context.Context) TokenScopesOutput
}

type TokenScopesArgs struct {
	// Permission to query logs.
	QueryLogs pulumi.BoolPtrInput `pulumi:"queryLogs"`
	// Permission to query metrics.
	QueryMetrics pulumi.BoolPtrInput `pulumi:"queryMetrics"`
	// Permission to query traces.
	QueryTraces pulumi.BoolPtrInput `pulumi:"queryTraces"`
	// Permission to set up alerts.
	SetupAlerts pulumi.BoolPtrInput `pulumi:"setupAlerts"`
	// Permission to set up logs rules.
	SetupLogsRules pulumi.BoolPtrInput `pulumi:"setupLogsRules"`
	// Permission to set up metrics rules.
	SetupMetricsRules pulumi.BoolPtrInput `pulumi:"setupMetricsRules"`
	// Permission to write logs.
	WriteLogs pulumi.BoolPtrInput `pulumi:"writeLogs"`
	// Permission to write metrics.
	WriteMetrics pulumi.BoolPtrInput `pulumi:"writeMetrics"`
	// Permission to write traces.
	WriteTraces pulumi.BoolPtrInput `pulumi:"writeTraces"`
}

func (TokenScopesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenScopes)(nil)).Elem()
}

func (i TokenScopesArgs) ToTokenScopesOutput() TokenScopesOutput {
	return i.ToTokenScopesOutputWithContext(context.Background())
}

func (i TokenScopesArgs) ToTokenScopesOutputWithContext(ctx context.Context) TokenScopesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenScopesOutput)
}

func (i TokenScopesArgs) ToTokenScopesPtrOutput() TokenScopesPtrOutput {
	return i.ToTokenScopesPtrOutputWithContext(context.Background())
}

func (i TokenScopesArgs) ToTokenScopesPtrOutputWithContext(ctx context.Context) TokenScopesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenScopesOutput).ToTokenScopesPtrOutputWithContext(ctx)
}

// TokenScopesPtrInput is an input type that accepts TokenScopesArgs, TokenScopesPtr and TokenScopesPtrOutput values.
// You can construct a concrete instance of `TokenScopesPtrInput` via:
//
//	        TokenScopesArgs{...}
//
//	or:
//
//	        nil
type TokenScopesPtrInput interface {
	pulumi.Input

	ToTokenScopesPtrOutput() TokenScopesPtrOutput
	ToTokenScopesPtrOutputWithContext(context.Context) TokenScopesPtrOutput
}

type tokenScopesPtrType TokenScopesArgs

func TokenScopesPtr(v *TokenScopesArgs) TokenScopesPtrInput {
	return (*tokenScopesPtrType)(v)
}

func (*tokenScopesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenScopes)(nil)).Elem()
}

func (i *tokenScopesPtrType) ToTokenScopesPtrOutput() TokenScopesPtrOutput {
	return i.ToTokenScopesPtrOutputWithContext(context.Background())
}

func (i *tokenScopesPtrType) ToTokenScopesPtrOutputWithContext(ctx context.Context) TokenScopesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenScopesPtrOutput)
}

type TokenScopesOutput struct{ *pulumi.OutputState }

func (TokenScopesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenScopes)(nil)).Elem()
}

func (o TokenScopesOutput) ToTokenScopesOutput() TokenScopesOutput {
	return o
}

func (o TokenScopesOutput) ToTokenScopesOutputWithContext(ctx context.Context) TokenScopesOutput {
	return o
}

func (o TokenScopesOutput) ToTokenScopesPtrOutput() TokenScopesPtrOutput {
	return o.ToTokenScopesPtrOutputWithContext(context.Background())
}

func (o TokenScopesOutput) ToTokenScopesPtrOutputWithContext(ctx context.Context) TokenScopesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TokenScopes) *TokenScopes {
		return &v
	}).(TokenScopesPtrOutput)
}

// Permission to query logs.
func (o TokenScopesOutput) QueryLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TokenScopes) *bool { return v.QueryLogs }).(pulumi.BoolPtrOutput)
}

// Permission to query metrics.
func (o TokenScopesOutput) QueryMetrics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TokenScopes) *bool { return v.QueryMetrics }).(pulumi.BoolPtrOutput)
}

// Permission to query traces.
func (o TokenScopesOutput) QueryTraces() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TokenScopes) *bool { return v.QueryTraces }).(pulumi.BoolPtrOutput)
}

// Permission to set up alerts.
func (o TokenScopesOutput) SetupAlerts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TokenScopes) *bool { return v.SetupAlerts }).(pulumi.BoolPtrOutput)
}

// Permission to set up logs rules.
func (o TokenScopesOutput) SetupLogsRules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TokenScopes) *bool { return v.SetupLogsRules }).(pulumi.BoolPtrOutput)
}

// Permission to set up metrics rules.
func (o TokenScopesOutput) SetupMetricsRules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TokenScopes) *bool { return v.SetupMetricsRules }).(pulumi.BoolPtrOutput)
}

// Permission to write logs.
func (o TokenScopesOutput) WriteLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TokenScopes) *bool { return v.WriteLogs }).(pulumi.BoolPtrOutput)
}

// Permission to write metrics.
func (o TokenScopesOutput) WriteMetrics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TokenScopes) *bool { return v.WriteMetrics }).(pulumi.BoolPtrOutput)
}

// Permission to write traces.
func (o TokenScopesOutput) WriteTraces() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TokenScopes) *bool { return v.WriteTraces }).(pulumi.BoolPtrOutput)
}

type TokenScopesPtrOutput struct{ *pulumi.OutputState }

func (TokenScopesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenScopes)(nil)).Elem()
}

func (o TokenScopesPtrOutput) ToTokenScopesPtrOutput() TokenScopesPtrOutput {
	return o
}

func (o TokenScopesPtrOutput) ToTokenScopesPtrOutputWithContext(ctx context.Context) TokenScopesPtrOutput {
	return o
}

func (o TokenScopesPtrOutput) Elem() TokenScopesOutput {
	return o.ApplyT(func(v *TokenScopes) TokenScopes {
		if v != nil {
			return *v
		}
		var ret TokenScopes
		return ret
	}).(TokenScopesOutput)
}

// Permission to query logs.
func (o TokenScopesPtrOutput) QueryLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TokenScopes) *bool {
		if v == nil {
			return nil
		}
		return v.QueryLogs
	}).(pulumi.BoolPtrOutput)
}

// Permission to query metrics.
func (o TokenScopesPtrOutput) QueryMetrics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TokenScopes) *bool {
		if v == nil {
			return nil
		}
		return v.QueryMetrics
	}).(pulumi.BoolPtrOutput)
}

// Permission to query traces.
func (o TokenScopesPtrOutput) QueryTraces() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TokenScopes) *bool {
		if v == nil {
			return nil
		}
		return v.QueryTraces
	}).(pulumi.BoolPtrOutput)
}

// Permission to set up alerts.
func (o TokenScopesPtrOutput) SetupAlerts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TokenScopes) *bool {
		if v == nil {
			return nil
		}
		return v.SetupAlerts
	}).(pulumi.BoolPtrOutput)
}

// Permission to set up logs rules.
func (o TokenScopesPtrOutput) SetupLogsRules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TokenScopes) *bool {
		if v == nil {
			return nil
		}
		return v.SetupLogsRules
	}).(pulumi.BoolPtrOutput)
}

// Permission to set up metrics rules.
func (o TokenScopesPtrOutput) SetupMetricsRules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TokenScopes) *bool {
		if v == nil {
			return nil
		}
		return v.SetupMetricsRules
	}).(pulumi.BoolPtrOutput)
}

// Permission to write logs.
func (o TokenScopesPtrOutput) WriteLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TokenScopes) *bool {
		if v == nil {
			return nil
		}
		return v.WriteLogs
	}).(pulumi.BoolPtrOutput)
}

// Permission to write metrics.
func (o TokenScopesPtrOutput) WriteMetrics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TokenScopes) *bool {
		if v == nil {
			return nil
		}
		return v.WriteMetrics
	}).(pulumi.BoolPtrOutput)
}

// Permission to write traces.
func (o TokenScopesPtrOutput) WriteTraces() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TokenScopes) *bool {
		if v == nil {
			return nil
		}
		return v.WriteTraces
	}).(pulumi.BoolPtrOutput)
}

type GetInstanceEndpoint struct {
	// (Deprecated) URL for the [Alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager).
	AlertmanagerUrl string `pulumi:"alertmanagerUrl"`
	// (Deprecated) URL for Grafana.
	GrafanaUrl string `pulumi:"grafanaUrl"`
	// (Deprecated) URL for [logs](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#logs) to retrieve in the [Data sources tab](https://console.scaleway.com/cockpit/dataSource) of the Scaleway console.
	LogsUrl string `pulumi:"logsUrl"`
	// (Deprecated) URL for [metrics](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#metric) to retrieve in the [Data sources tab](https://console.scaleway.com/cockpit/dataSource) of the Scaleway console.
	MetricsUrl string `pulumi:"metricsUrl"`
	// The traces URL.
	TracesUrl string `pulumi:"tracesUrl"`
}

// GetInstanceEndpointInput is an input type that accepts GetInstanceEndpointArgs and GetInstanceEndpointOutput values.
// You can construct a concrete instance of `GetInstanceEndpointInput` via:
//
//	GetInstanceEndpointArgs{...}
type GetInstanceEndpointInput interface {
	pulumi.Input

	ToGetInstanceEndpointOutput() GetInstanceEndpointOutput
	ToGetInstanceEndpointOutputWithContext(context.Context) GetInstanceEndpointOutput
}

type GetInstanceEndpointArgs struct {
	// (Deprecated) URL for the [Alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager).
	AlertmanagerUrl pulumi.StringInput `pulumi:"alertmanagerUrl"`
	// (Deprecated) URL for Grafana.
	GrafanaUrl pulumi.StringInput `pulumi:"grafanaUrl"`
	// (Deprecated) URL for [logs](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#logs) to retrieve in the [Data sources tab](https://console.scaleway.com/cockpit/dataSource) of the Scaleway console.
	LogsUrl pulumi.StringInput `pulumi:"logsUrl"`
	// (Deprecated) URL for [metrics](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#metric) to retrieve in the [Data sources tab](https://console.scaleway.com/cockpit/dataSource) of the Scaleway console.
	MetricsUrl pulumi.StringInput `pulumi:"metricsUrl"`
	// The traces URL.
	TracesUrl pulumi.StringInput `pulumi:"tracesUrl"`
}

func (GetInstanceEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceEndpoint)(nil)).Elem()
}

func (i GetInstanceEndpointArgs) ToGetInstanceEndpointOutput() GetInstanceEndpointOutput {
	return i.ToGetInstanceEndpointOutputWithContext(context.Background())
}

func (i GetInstanceEndpointArgs) ToGetInstanceEndpointOutputWithContext(ctx context.Context) GetInstanceEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceEndpointOutput)
}

// GetInstanceEndpointArrayInput is an input type that accepts GetInstanceEndpointArray and GetInstanceEndpointArrayOutput values.
// You can construct a concrete instance of `GetInstanceEndpointArrayInput` via:
//
//	GetInstanceEndpointArray{ GetInstanceEndpointArgs{...} }
type GetInstanceEndpointArrayInput interface {
	pulumi.Input

	ToGetInstanceEndpointArrayOutput() GetInstanceEndpointArrayOutput
	ToGetInstanceEndpointArrayOutputWithContext(context.Context) GetInstanceEndpointArrayOutput
}

type GetInstanceEndpointArray []GetInstanceEndpointInput

func (GetInstanceEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceEndpoint)(nil)).Elem()
}

func (i GetInstanceEndpointArray) ToGetInstanceEndpointArrayOutput() GetInstanceEndpointArrayOutput {
	return i.ToGetInstanceEndpointArrayOutputWithContext(context.Background())
}

func (i GetInstanceEndpointArray) ToGetInstanceEndpointArrayOutputWithContext(ctx context.Context) GetInstanceEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceEndpointArrayOutput)
}

type GetInstanceEndpointOutput struct{ *pulumi.OutputState }

func (GetInstanceEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceEndpoint)(nil)).Elem()
}

func (o GetInstanceEndpointOutput) ToGetInstanceEndpointOutput() GetInstanceEndpointOutput {
	return o
}

func (o GetInstanceEndpointOutput) ToGetInstanceEndpointOutputWithContext(ctx context.Context) GetInstanceEndpointOutput {
	return o
}

// (Deprecated) URL for the [Alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager).
func (o GetInstanceEndpointOutput) AlertmanagerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceEndpoint) string { return v.AlertmanagerUrl }).(pulumi.StringOutput)
}

// (Deprecated) URL for Grafana.
func (o GetInstanceEndpointOutput) GrafanaUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceEndpoint) string { return v.GrafanaUrl }).(pulumi.StringOutput)
}

// (Deprecated) URL for [logs](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#logs) to retrieve in the [Data sources tab](https://console.scaleway.com/cockpit/dataSource) of the Scaleway console.
func (o GetInstanceEndpointOutput) LogsUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceEndpoint) string { return v.LogsUrl }).(pulumi.StringOutput)
}

// (Deprecated) URL for [metrics](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#metric) to retrieve in the [Data sources tab](https://console.scaleway.com/cockpit/dataSource) of the Scaleway console.
func (o GetInstanceEndpointOutput) MetricsUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceEndpoint) string { return v.MetricsUrl }).(pulumi.StringOutput)
}

// The traces URL.
func (o GetInstanceEndpointOutput) TracesUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceEndpoint) string { return v.TracesUrl }).(pulumi.StringOutput)
}

type GetInstanceEndpointArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceEndpoint)(nil)).Elem()
}

func (o GetInstanceEndpointArrayOutput) ToGetInstanceEndpointArrayOutput() GetInstanceEndpointArrayOutput {
	return o
}

func (o GetInstanceEndpointArrayOutput) ToGetInstanceEndpointArrayOutputWithContext(ctx context.Context) GetInstanceEndpointArrayOutput {
	return o
}

func (o GetInstanceEndpointArrayOutput) Index(i pulumi.IntInput) GetInstanceEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceEndpoint {
		return vs[0].([]GetInstanceEndpoint)[vs[1].(int)]
	}).(GetInstanceEndpointOutput)
}

type GetInstancePushUrl struct {
	// Push URL for logs (Grafana Loki)
	PushLogsUrl string `pulumi:"pushLogsUrl"`
	// Push URL for metrics (Grafana Mimir)
	PushMetricsUrl string `pulumi:"pushMetricsUrl"`
}

// GetInstancePushUrlInput is an input type that accepts GetInstancePushUrlArgs and GetInstancePushUrlOutput values.
// You can construct a concrete instance of `GetInstancePushUrlInput` via:
//
//	GetInstancePushUrlArgs{...}
type GetInstancePushUrlInput interface {
	pulumi.Input

	ToGetInstancePushUrlOutput() GetInstancePushUrlOutput
	ToGetInstancePushUrlOutputWithContext(context.Context) GetInstancePushUrlOutput
}

type GetInstancePushUrlArgs struct {
	// Push URL for logs (Grafana Loki)
	PushLogsUrl pulumi.StringInput `pulumi:"pushLogsUrl"`
	// Push URL for metrics (Grafana Mimir)
	PushMetricsUrl pulumi.StringInput `pulumi:"pushMetricsUrl"`
}

func (GetInstancePushUrlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancePushUrl)(nil)).Elem()
}

func (i GetInstancePushUrlArgs) ToGetInstancePushUrlOutput() GetInstancePushUrlOutput {
	return i.ToGetInstancePushUrlOutputWithContext(context.Background())
}

func (i GetInstancePushUrlArgs) ToGetInstancePushUrlOutputWithContext(ctx context.Context) GetInstancePushUrlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancePushUrlOutput)
}

// GetInstancePushUrlArrayInput is an input type that accepts GetInstancePushUrlArray and GetInstancePushUrlArrayOutput values.
// You can construct a concrete instance of `GetInstancePushUrlArrayInput` via:
//
//	GetInstancePushUrlArray{ GetInstancePushUrlArgs{...} }
type GetInstancePushUrlArrayInput interface {
	pulumi.Input

	ToGetInstancePushUrlArrayOutput() GetInstancePushUrlArrayOutput
	ToGetInstancePushUrlArrayOutputWithContext(context.Context) GetInstancePushUrlArrayOutput
}

type GetInstancePushUrlArray []GetInstancePushUrlInput

func (GetInstancePushUrlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancePushUrl)(nil)).Elem()
}

func (i GetInstancePushUrlArray) ToGetInstancePushUrlArrayOutput() GetInstancePushUrlArrayOutput {
	return i.ToGetInstancePushUrlArrayOutputWithContext(context.Background())
}

func (i GetInstancePushUrlArray) ToGetInstancePushUrlArrayOutputWithContext(ctx context.Context) GetInstancePushUrlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancePushUrlArrayOutput)
}

type GetInstancePushUrlOutput struct{ *pulumi.OutputState }

func (GetInstancePushUrlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancePushUrl)(nil)).Elem()
}

func (o GetInstancePushUrlOutput) ToGetInstancePushUrlOutput() GetInstancePushUrlOutput {
	return o
}

func (o GetInstancePushUrlOutput) ToGetInstancePushUrlOutputWithContext(ctx context.Context) GetInstancePushUrlOutput {
	return o
}

// Push URL for logs (Grafana Loki)
func (o GetInstancePushUrlOutput) PushLogsUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePushUrl) string { return v.PushLogsUrl }).(pulumi.StringOutput)
}

// Push URL for metrics (Grafana Mimir)
func (o GetInstancePushUrlOutput) PushMetricsUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePushUrl) string { return v.PushMetricsUrl }).(pulumi.StringOutput)
}

type GetInstancePushUrlArrayOutput struct{ *pulumi.OutputState }

func (GetInstancePushUrlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancePushUrl)(nil)).Elem()
}

func (o GetInstancePushUrlArrayOutput) ToGetInstancePushUrlArrayOutput() GetInstancePushUrlArrayOutput {
	return o
}

func (o GetInstancePushUrlArrayOutput) ToGetInstancePushUrlArrayOutputWithContext(ctx context.Context) GetInstancePushUrlArrayOutput {
	return o
}

func (o GetInstancePushUrlArrayOutput) Index(i pulumi.IntInput) GetInstancePushUrlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancePushUrl {
		return vs[0].([]GetInstancePushUrl)[vs[1].(int)]
	}).(GetInstancePushUrlOutput)
}

type GetSourcesSource struct {
	// The date and time of the creation of the cockpit datasource.
	CreatedAt string `pulumi:"createdAt"`
	// The ID of the data source.
	Id string `pulumi:"id"`
	// Filter sources by name.
	Name string `pulumi:"name"`
	// Filter sources by origin. Possible values are: `scaleway`, `external`, `custom`.
	Origin string `pulumi:"origin"`
	// The project ID the cockpit sources are associated with.
	ProjectId string `pulumi:"projectId"`
	// The URL endpoint used for pushing data to the cockpit data source.
	PushUrl string `pulumi:"pushUrl"`
	// The region in which the cockpit sources are located.
	Region string `pulumi:"region"`
	// The number of days to retain data.
	RetentionDays int `pulumi:"retentionDays"`
	// Indicates whether the data source is synchronized with Grafana.
	SynchronizedWithGrafana bool `pulumi:"synchronizedWithGrafana"`
	// Filter sources by type. Possible values are: `metrics`, `logs`, `traces`.
	Type string `pulumi:"type"`
	// The date and time of the last update of the cockpit datasource.
	UpdatedAt string `pulumi:"updatedAt"`
	// The URL of the datasource.
	Url string `pulumi:"url"`
}

// GetSourcesSourceInput is an input type that accepts GetSourcesSourceArgs and GetSourcesSourceOutput values.
// You can construct a concrete instance of `GetSourcesSourceInput` via:
//
//	GetSourcesSourceArgs{...}
type GetSourcesSourceInput interface {
	pulumi.Input

	ToGetSourcesSourceOutput() GetSourcesSourceOutput
	ToGetSourcesSourceOutputWithContext(context.Context) GetSourcesSourceOutput
}

type GetSourcesSourceArgs struct {
	// The date and time of the creation of the cockpit datasource.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The ID of the data source.
	Id pulumi.StringInput `pulumi:"id"`
	// Filter sources by name.
	Name pulumi.StringInput `pulumi:"name"`
	// Filter sources by origin. Possible values are: `scaleway`, `external`, `custom`.
	Origin pulumi.StringInput `pulumi:"origin"`
	// The project ID the cockpit sources are associated with.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The URL endpoint used for pushing data to the cockpit data source.
	PushUrl pulumi.StringInput `pulumi:"pushUrl"`
	// The region in which the cockpit sources are located.
	Region pulumi.StringInput `pulumi:"region"`
	// The number of days to retain data.
	RetentionDays pulumi.IntInput `pulumi:"retentionDays"`
	// Indicates whether the data source is synchronized with Grafana.
	SynchronizedWithGrafana pulumi.BoolInput `pulumi:"synchronizedWithGrafana"`
	// Filter sources by type. Possible values are: `metrics`, `logs`, `traces`.
	Type pulumi.StringInput `pulumi:"type"`
	// The date and time of the last update of the cockpit datasource.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The URL of the datasource.
	Url pulumi.StringInput `pulumi:"url"`
}

func (GetSourcesSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSourcesSource)(nil)).Elem()
}

func (i GetSourcesSourceArgs) ToGetSourcesSourceOutput() GetSourcesSourceOutput {
	return i.ToGetSourcesSourceOutputWithContext(context.Background())
}

func (i GetSourcesSourceArgs) ToGetSourcesSourceOutputWithContext(ctx context.Context) GetSourcesSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSourcesSourceOutput)
}

// GetSourcesSourceArrayInput is an input type that accepts GetSourcesSourceArray and GetSourcesSourceArrayOutput values.
// You can construct a concrete instance of `GetSourcesSourceArrayInput` via:
//
//	GetSourcesSourceArray{ GetSourcesSourceArgs{...} }
type GetSourcesSourceArrayInput interface {
	pulumi.Input

	ToGetSourcesSourceArrayOutput() GetSourcesSourceArrayOutput
	ToGetSourcesSourceArrayOutputWithContext(context.Context) GetSourcesSourceArrayOutput
}

type GetSourcesSourceArray []GetSourcesSourceInput

func (GetSourcesSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSourcesSource)(nil)).Elem()
}

func (i GetSourcesSourceArray) ToGetSourcesSourceArrayOutput() GetSourcesSourceArrayOutput {
	return i.ToGetSourcesSourceArrayOutputWithContext(context.Background())
}

func (i GetSourcesSourceArray) ToGetSourcesSourceArrayOutputWithContext(ctx context.Context) GetSourcesSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSourcesSourceArrayOutput)
}

type GetSourcesSourceOutput struct{ *pulumi.OutputState }

func (GetSourcesSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSourcesSource)(nil)).Elem()
}

func (o GetSourcesSourceOutput) ToGetSourcesSourceOutput() GetSourcesSourceOutput {
	return o
}

func (o GetSourcesSourceOutput) ToGetSourcesSourceOutputWithContext(ctx context.Context) GetSourcesSourceOutput {
	return o
}

// The date and time of the creation of the cockpit datasource.
func (o GetSourcesSourceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourcesSource) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of the data source.
func (o GetSourcesSourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourcesSource) string { return v.Id }).(pulumi.StringOutput)
}

// Filter sources by name.
func (o GetSourcesSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourcesSource) string { return v.Name }).(pulumi.StringOutput)
}

// Filter sources by origin. Possible values are: `scaleway`, `external`, `custom`.
func (o GetSourcesSourceOutput) Origin() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourcesSource) string { return v.Origin }).(pulumi.StringOutput)
}

// The project ID the cockpit sources are associated with.
func (o GetSourcesSourceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourcesSource) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The URL endpoint used for pushing data to the cockpit data source.
func (o GetSourcesSourceOutput) PushUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourcesSource) string { return v.PushUrl }).(pulumi.StringOutput)
}

// The region in which the cockpit sources are located.
func (o GetSourcesSourceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourcesSource) string { return v.Region }).(pulumi.StringOutput)
}

// The number of days to retain data.
func (o GetSourcesSourceOutput) RetentionDays() pulumi.IntOutput {
	return o.ApplyT(func(v GetSourcesSource) int { return v.RetentionDays }).(pulumi.IntOutput)
}

// Indicates whether the data source is synchronized with Grafana.
func (o GetSourcesSourceOutput) SynchronizedWithGrafana() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSourcesSource) bool { return v.SynchronizedWithGrafana }).(pulumi.BoolOutput)
}

// Filter sources by type. Possible values are: `metrics`, `logs`, `traces`.
func (o GetSourcesSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourcesSource) string { return v.Type }).(pulumi.StringOutput)
}

// The date and time of the last update of the cockpit datasource.
func (o GetSourcesSourceOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourcesSource) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The URL of the datasource.
func (o GetSourcesSourceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetSourcesSource) string { return v.Url }).(pulumi.StringOutput)
}

type GetSourcesSourceArrayOutput struct{ *pulumi.OutputState }

func (GetSourcesSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSourcesSource)(nil)).Elem()
}

func (o GetSourcesSourceArrayOutput) ToGetSourcesSourceArrayOutput() GetSourcesSourceArrayOutput {
	return o
}

func (o GetSourcesSourceArrayOutput) ToGetSourcesSourceArrayOutputWithContext(ctx context.Context) GetSourcesSourceArrayOutput {
	return o
}

func (o GetSourcesSourceArrayOutput) Index(i pulumi.IntInput) GetSourcesSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSourcesSource {
		return vs[0].([]GetSourcesSource)[vs[1].(int)]
	}).(GetSourcesSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlertManagerContactPointInput)(nil)).Elem(), AlertManagerContactPointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertManagerContactPointArrayInput)(nil)).Elem(), AlertManagerContactPointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CockpitEndpointInput)(nil)).Elem(), CockpitEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CockpitEndpointArrayInput)(nil)).Elem(), CockpitEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CockpitPushUrlInput)(nil)).Elem(), CockpitPushUrlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CockpitPushUrlArrayInput)(nil)).Elem(), CockpitPushUrlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenScopesInput)(nil)).Elem(), TokenScopesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenScopesPtrInput)(nil)).Elem(), TokenScopesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceEndpointInput)(nil)).Elem(), GetInstanceEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceEndpointArrayInput)(nil)).Elem(), GetInstanceEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancePushUrlInput)(nil)).Elem(), GetInstancePushUrlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancePushUrlArrayInput)(nil)).Elem(), GetInstancePushUrlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSourcesSourceInput)(nil)).Elem(), GetSourcesSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSourcesSourceArrayInput)(nil)).Elem(), GetSourcesSourceArray{})
	pulumi.RegisterOutputType(AlertManagerContactPointOutput{})
	pulumi.RegisterOutputType(AlertManagerContactPointArrayOutput{})
	pulumi.RegisterOutputType(CockpitEndpointOutput{})
	pulumi.RegisterOutputType(CockpitEndpointArrayOutput{})
	pulumi.RegisterOutputType(CockpitPushUrlOutput{})
	pulumi.RegisterOutputType(CockpitPushUrlArrayOutput{})
	pulumi.RegisterOutputType(TokenScopesOutput{})
	pulumi.RegisterOutputType(TokenScopesPtrOutput{})
	pulumi.RegisterOutputType(GetInstanceEndpointOutput{})
	pulumi.RegisterOutputType(GetInstanceEndpointArrayOutput{})
	pulumi.RegisterOutputType(GetInstancePushUrlOutput{})
	pulumi.RegisterOutputType(GetInstancePushUrlArrayOutput{})
	pulumi.RegisterOutputType(GetSourcesSourceOutput{})
	pulumi.RegisterOutputType(GetSourcesSourceArrayOutput{})
}
