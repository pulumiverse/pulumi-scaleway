// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package observability

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// The `observability.Source` resource allows you to create and manage [data sources](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#data-sources) in Scaleway's Cockpit.
//
// Refer to Cockpit's [product documentation](https://www.scaleway.com/en/docs/observability/cockpit/concepts/) and [API documentation](https://www.scaleway.com/en/developers/api/cockpit/regional-api) for more information.
//
// ## Example Usage
//
// ### Create a data source
//
// The following command allows you to create a [metrics](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#metric) data source named `my-data-source` in a given Project.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/account"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/observability"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := account.NewProject(ctx, "project", &account.ProjectArgs{
//				Name: pulumi.String("test project data source"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = observability.NewSource(ctx, "main", &observability.SourceArgs{
//				ProjectId:     project.ID(),
//				Name:          pulumi.String("my-data-source"),
//				Type:          pulumi.String("metrics"),
//				RetentionDays: pulumi.Int(6),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// This section explains how to import a data source using the ID of the region it is located in, in the `{region}/{id}` format.
//
// bash
//
// ```sh
// $ pulumi import scaleway:observability/source:Source main fr-par/11111111-1111-1111-1111-111111111111
// ```
type Source struct {
	pulumi.CustomResourceState

	// The date and time the data source was created (in RFC 3339 format).
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The name of the data source.
	Name pulumi.StringOutput `pulumi:"name"`
	// The origin of the Cockpit data source.
	Origin pulumi.StringOutput `pulumi:"origin"`
	// ) The ID of the Project the data source is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The URL endpoint used for pushing data to the Cockpit data source.
	PushUrl pulumi.StringOutput `pulumi:"pushUrl"`
	// ) The region where the data source is located.
	Region pulumi.StringOutput `pulumi:"region"`
	// The number of days to retain data in the data source. Must be a value between 1 and 365. For more details on retention policies, please refer to the [Scaleway Retention Documentation](https://www.scaleway.com/en/docs/cockpit/concepts/#retention). Note: Changes to this field will force the creation of a new resource.
	RetentionDays pulumi.IntOutput `pulumi:"retentionDays"`
	// Indicates whether the data source is synchronized with Grafana.
	SynchronizedWithGrafana pulumi.BoolOutput `pulumi:"synchronizedWithGrafana"`
	// The [type](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#data-types) of data source. Possible values are: `metrics`, `logs`, or `traces`.
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// The date and time the data source was last updated (in RFC 3339 format).
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The URL of the Cockpit data source.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewSource registers a new resource with the given unique name, arguments, and options.
func NewSource(ctx *pulumi.Context,
	name string, args *SourceArgs, opts ...pulumi.ResourceOption) (*Source, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RetentionDays == nil {
		return nil, errors.New("invalid value for required argument 'RetentionDays'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/cockpitSource:CockpitSource"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Source
	err := ctx.RegisterResource("scaleway:observability/source:Source", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSource gets an existing Source resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceState, opts ...pulumi.ResourceOption) (*Source, error) {
	var resource Source
	err := ctx.ReadResource("scaleway:observability/source:Source", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Source resources.
type sourceState struct {
	// The date and time the data source was created (in RFC 3339 format).
	CreatedAt *string `pulumi:"createdAt"`
	// The name of the data source.
	Name *string `pulumi:"name"`
	// The origin of the Cockpit data source.
	Origin *string `pulumi:"origin"`
	// ) The ID of the Project the data source is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The URL endpoint used for pushing data to the Cockpit data source.
	PushUrl *string `pulumi:"pushUrl"`
	// ) The region where the data source is located.
	Region *string `pulumi:"region"`
	// The number of days to retain data in the data source. Must be a value between 1 and 365. For more details on retention policies, please refer to the [Scaleway Retention Documentation](https://www.scaleway.com/en/docs/cockpit/concepts/#retention). Note: Changes to this field will force the creation of a new resource.
	RetentionDays *int `pulumi:"retentionDays"`
	// Indicates whether the data source is synchronized with Grafana.
	SynchronizedWithGrafana *bool `pulumi:"synchronizedWithGrafana"`
	// The [type](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#data-types) of data source. Possible values are: `metrics`, `logs`, or `traces`.
	Type *string `pulumi:"type"`
	// The date and time the data source was last updated (in RFC 3339 format).
	UpdatedAt *string `pulumi:"updatedAt"`
	// The URL of the Cockpit data source.
	Url *string `pulumi:"url"`
}

type SourceState struct {
	// The date and time the data source was created (in RFC 3339 format).
	CreatedAt pulumi.StringPtrInput
	// The name of the data source.
	Name pulumi.StringPtrInput
	// The origin of the Cockpit data source.
	Origin pulumi.StringPtrInput
	// ) The ID of the Project the data source is associated with.
	ProjectId pulumi.StringPtrInput
	// The URL endpoint used for pushing data to the Cockpit data source.
	PushUrl pulumi.StringPtrInput
	// ) The region where the data source is located.
	Region pulumi.StringPtrInput
	// The number of days to retain data in the data source. Must be a value between 1 and 365. For more details on retention policies, please refer to the [Scaleway Retention Documentation](https://www.scaleway.com/en/docs/cockpit/concepts/#retention). Note: Changes to this field will force the creation of a new resource.
	RetentionDays pulumi.IntPtrInput
	// Indicates whether the data source is synchronized with Grafana.
	SynchronizedWithGrafana pulumi.BoolPtrInput
	// The [type](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#data-types) of data source. Possible values are: `metrics`, `logs`, or `traces`.
	Type pulumi.StringPtrInput
	// The date and time the data source was last updated (in RFC 3339 format).
	UpdatedAt pulumi.StringPtrInput
	// The URL of the Cockpit data source.
	Url pulumi.StringPtrInput
}

func (SourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceState)(nil)).Elem()
}

type sourceArgs struct {
	// The name of the data source.
	Name *string `pulumi:"name"`
	// ) The ID of the Project the data source is associated with.
	ProjectId *string `pulumi:"projectId"`
	// ) The region where the data source is located.
	Region *string `pulumi:"region"`
	// The number of days to retain data in the data source. Must be a value between 1 and 365. For more details on retention policies, please refer to the [Scaleway Retention Documentation](https://www.scaleway.com/en/docs/cockpit/concepts/#retention). Note: Changes to this field will force the creation of a new resource.
	RetentionDays int `pulumi:"retentionDays"`
	// The [type](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#data-types) of data source. Possible values are: `metrics`, `logs`, or `traces`.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a Source resource.
type SourceArgs struct {
	// The name of the data source.
	Name pulumi.StringPtrInput
	// ) The ID of the Project the data source is associated with.
	ProjectId pulumi.StringPtrInput
	// ) The region where the data source is located.
	Region pulumi.StringPtrInput
	// The number of days to retain data in the data source. Must be a value between 1 and 365. For more details on retention policies, please refer to the [Scaleway Retention Documentation](https://www.scaleway.com/en/docs/cockpit/concepts/#retention). Note: Changes to this field will force the creation of a new resource.
	RetentionDays pulumi.IntInput
	// The [type](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#data-types) of data source. Possible values are: `metrics`, `logs`, or `traces`.
	Type pulumi.StringPtrInput
}

func (SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceArgs)(nil)).Elem()
}

type SourceInput interface {
	pulumi.Input

	ToSourceOutput() SourceOutput
	ToSourceOutputWithContext(ctx context.Context) SourceOutput
}

func (*Source) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (i *Source) ToSourceOutput() SourceOutput {
	return i.ToSourceOutputWithContext(context.Background())
}

func (i *Source) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOutput)
}

// SourceArrayInput is an input type that accepts SourceArray and SourceArrayOutput values.
// You can construct a concrete instance of `SourceArrayInput` via:
//
//	SourceArray{ SourceArgs{...} }
type SourceArrayInput interface {
	pulumi.Input

	ToSourceArrayOutput() SourceArrayOutput
	ToSourceArrayOutputWithContext(context.Context) SourceArrayOutput
}

type SourceArray []SourceInput

func (SourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Source)(nil)).Elem()
}

func (i SourceArray) ToSourceArrayOutput() SourceArrayOutput {
	return i.ToSourceArrayOutputWithContext(context.Background())
}

func (i SourceArray) ToSourceArrayOutputWithContext(ctx context.Context) SourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceArrayOutput)
}

// SourceMapInput is an input type that accepts SourceMap and SourceMapOutput values.
// You can construct a concrete instance of `SourceMapInput` via:
//
//	SourceMap{ "key": SourceArgs{...} }
type SourceMapInput interface {
	pulumi.Input

	ToSourceMapOutput() SourceMapOutput
	ToSourceMapOutputWithContext(context.Context) SourceMapOutput
}

type SourceMap map[string]SourceInput

func (SourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Source)(nil)).Elem()
}

func (i SourceMap) ToSourceMapOutput() SourceMapOutput {
	return i.ToSourceMapOutputWithContext(context.Background())
}

func (i SourceMap) ToSourceMapOutputWithContext(ctx context.Context) SourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceMapOutput)
}

type SourceOutput struct{ *pulumi.OutputState }

func (SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (o SourceOutput) ToSourceOutput() SourceOutput {
	return o
}

func (o SourceOutput) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return o
}

// The date and time the data source was created (in RFC 3339 format).
func (o SourceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Source) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The name of the data source.
func (o SourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Source) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The origin of the Cockpit data source.
func (o SourceOutput) Origin() pulumi.StringOutput {
	return o.ApplyT(func(v *Source) pulumi.StringOutput { return v.Origin }).(pulumi.StringOutput)
}

// ) The ID of the Project the data source is associated with.
func (o SourceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Source) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The URL endpoint used for pushing data to the Cockpit data source.
func (o SourceOutput) PushUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Source) pulumi.StringOutput { return v.PushUrl }).(pulumi.StringOutput)
}

// ) The region where the data source is located.
func (o SourceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Source) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The number of days to retain data in the data source. Must be a value between 1 and 365. For more details on retention policies, please refer to the [Scaleway Retention Documentation](https://www.scaleway.com/en/docs/cockpit/concepts/#retention). Note: Changes to this field will force the creation of a new resource.
func (o SourceOutput) RetentionDays() pulumi.IntOutput {
	return o.ApplyT(func(v *Source) pulumi.IntOutput { return v.RetentionDays }).(pulumi.IntOutput)
}

// Indicates whether the data source is synchronized with Grafana.
func (o SourceOutput) SynchronizedWithGrafana() pulumi.BoolOutput {
	return o.ApplyT(func(v *Source) pulumi.BoolOutput { return v.SynchronizedWithGrafana }).(pulumi.BoolOutput)
}

// The [type](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#data-types) of data source. Possible values are: `metrics`, `logs`, or `traces`.
func (o SourceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Source) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// The date and time the data source was last updated (in RFC 3339 format).
func (o SourceOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Source) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The URL of the Cockpit data source.
func (o SourceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Source) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type SourceArrayOutput struct{ *pulumi.OutputState }

func (SourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Source)(nil)).Elem()
}

func (o SourceArrayOutput) ToSourceArrayOutput() SourceArrayOutput {
	return o
}

func (o SourceArrayOutput) ToSourceArrayOutputWithContext(ctx context.Context) SourceArrayOutput {
	return o
}

func (o SourceArrayOutput) Index(i pulumi.IntInput) SourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Source {
		return vs[0].([]*Source)[vs[1].(int)]
	}).(SourceOutput)
}

type SourceMapOutput struct{ *pulumi.OutputState }

func (SourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Source)(nil)).Elem()
}

func (o SourceMapOutput) ToSourceMapOutput() SourceMapOutput {
	return o
}

func (o SourceMapOutput) ToSourceMapOutputWithContext(ctx context.Context) SourceMapOutput {
	return o
}

func (o SourceMapOutput) MapIndex(k pulumi.StringInput) SourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Source {
		return vs[0].(map[string]*Source)[vs[1].(string)]
	}).(SourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceInput)(nil)).Elem(), &Source{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceArrayInput)(nil)).Elem(), SourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceMapInput)(nil)).Elem(), SourceMap{})
	pulumi.RegisterOutputType(SourceOutput{})
	pulumi.RegisterOutputType(SourceArrayOutput{})
	pulumi.RegisterOutputType(SourceMapOutput{})
}
