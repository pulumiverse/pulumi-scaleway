// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway RDB (Relational Database) Snapshots.
// Snapshots are point-in-time backups of a database instance that can be used for recovery or duplication.
// For more information, refer to [the API documentation](https://www.scaleway.com/en/developers/api/managed-database-postgre-mysql/).
//
// ## Example Usage
//
// ### Example Basic Snapshot
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/databases"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := databases.NewInstance(ctx, "main", &databases.InstanceArgs{
//				Name:          pulumi.String("test-rdb-instance"),
//				NodeType:      pulumi.String("db-dev-s"),
//				Engine:        pulumi.String("PostgreSQL-15"),
//				IsHaCluster:   pulumi.Bool(false),
//				DisableBackup: pulumi.Bool(true),
//				UserName:      pulumi.String("my_initial_user"),
//				Password:      pulumi.String("thiZ_is_v&ry_s3cret"),
//				Tags: pulumi.StringArray{
//					pulumi.String("terraform-test"),
//					pulumi.String("scaleway_rdb_instance"),
//					pulumi.String("minimal"),
//				},
//				VolumeType:     pulumi.String("sbs_5k"),
//				VolumeSizeInGb: pulumi.Int(10),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databases.NewSnapshot(ctx, "test", &databases.SnapshotArgs{
//				Name:       pulumi.String("initial-snapshot"),
//				InstanceId: main.ID(),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				main,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Example with Expiration
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/databases"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databases.NewSnapshot(ctx, "snapshot_with_expiration", &databases.SnapshotArgs{
//				Name:       pulumi.String("snapshot-with-expiration"),
//				InstanceId: pulumi.Any(main.Id),
//				ExpiresAt:  pulumi.String("2025-01-31T00:00:00Z"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Example with Multiple Snapshots
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/databases"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databases.NewSnapshot(ctx, "snapshot_a", &databases.SnapshotArgs{
//				Name:       pulumi.String("snapshot_a"),
//				InstanceId: pulumi.Any(main.Id),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				main,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = databases.NewSnapshot(ctx, "snapshot_b", &databases.SnapshotArgs{
//				Name:       pulumi.String("snapshot_b"),
//				InstanceId: pulumi.Any(main.Id),
//				ExpiresAt:  pulumi.String("2025-02-07T00:00:00Z"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				main,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Limitations
//
// - Snapshots are tied to the database instance and region where they are created.
// - Expired snapshots are automatically deleted and cannot be restored.
//
// ## Notes
//
// - Ensure the `instanceId` corresponds to an existing database instance.
// - Use the `dependsOn` argument when creating snapshots right after creating an instance to ensure proper dependency management.
//
// ## Import
//
// RDB Snapshots can be imported using the `{region}/{snapshot_id}` format.
//
// Deprecated: scaleway.index/rdbsnapshot.RdbSnapshot has been deprecated in favor of scaleway.databases/snapshot.Snapshot
type RdbSnapshot struct {
	pulumi.CustomResourceState

	// The timestamp when the snapshot was created, in ISO 8601 format.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Expiration date of the snapshot in ISO 8601 format (e.g., `2025-01-31T00:00:00Z`). If not set, the snapshot will not expire automatically.
	ExpiresAt pulumi.StringOutput `pulumi:"expiresAt"`
	// The UUID of the database instance for which the snapshot is created.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The name of the snapshot.
	Name pulumi.StringOutput `pulumi:"name"`
	// The type of the database instance for which the snapshot was created.
	NodeType pulumi.StringOutput `pulumi:"nodeType"`
	// The region where the snapshot is stored. Defaults to the region set in the provider configuration.
	Region pulumi.StringOutput `pulumi:"region"`
	// The size of the snapshot in bytes.
	Size pulumi.IntOutput `pulumi:"size"`
	// The current status of the snapshot (e.g., `ready`, `creating`, `error`).
	Status pulumi.StringOutput `pulumi:"status"`
	// The timestamp when the snapshot was last updated, in ISO 8601 format.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The type of volume used by the snapshot.
	VolumeType pulumi.StringOutput `pulumi:"volumeType"`
}

// NewRdbSnapshot registers a new resource with the given unique name, arguments, and options.
func NewRdbSnapshot(ctx *pulumi.Context,
	name string, args *RdbSnapshotArgs, opts ...pulumi.ResourceOption) (*RdbSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RdbSnapshot
	err := ctx.RegisterResource("scaleway:index/rdbSnapshot:RdbSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRdbSnapshot gets an existing RdbSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRdbSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RdbSnapshotState, opts ...pulumi.ResourceOption) (*RdbSnapshot, error) {
	var resource RdbSnapshot
	err := ctx.ReadResource("scaleway:index/rdbSnapshot:RdbSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RdbSnapshot resources.
type rdbSnapshotState struct {
	// The timestamp when the snapshot was created, in ISO 8601 format.
	CreatedAt *string `pulumi:"createdAt"`
	// Expiration date of the snapshot in ISO 8601 format (e.g., `2025-01-31T00:00:00Z`). If not set, the snapshot will not expire automatically.
	ExpiresAt *string `pulumi:"expiresAt"`
	// The UUID of the database instance for which the snapshot is created.
	InstanceId *string `pulumi:"instanceId"`
	// The name of the snapshot.
	Name *string `pulumi:"name"`
	// The type of the database instance for which the snapshot was created.
	NodeType *string `pulumi:"nodeType"`
	// The region where the snapshot is stored. Defaults to the region set in the provider configuration.
	Region *string `pulumi:"region"`
	// The size of the snapshot in bytes.
	Size *int `pulumi:"size"`
	// The current status of the snapshot (e.g., `ready`, `creating`, `error`).
	Status *string `pulumi:"status"`
	// The timestamp when the snapshot was last updated, in ISO 8601 format.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The type of volume used by the snapshot.
	VolumeType *string `pulumi:"volumeType"`
}

type RdbSnapshotState struct {
	// The timestamp when the snapshot was created, in ISO 8601 format.
	CreatedAt pulumi.StringPtrInput
	// Expiration date of the snapshot in ISO 8601 format (e.g., `2025-01-31T00:00:00Z`). If not set, the snapshot will not expire automatically.
	ExpiresAt pulumi.StringPtrInput
	// The UUID of the database instance for which the snapshot is created.
	InstanceId pulumi.StringPtrInput
	// The name of the snapshot.
	Name pulumi.StringPtrInput
	// The type of the database instance for which the snapshot was created.
	NodeType pulumi.StringPtrInput
	// The region where the snapshot is stored. Defaults to the region set in the provider configuration.
	Region pulumi.StringPtrInput
	// The size of the snapshot in bytes.
	Size pulumi.IntPtrInput
	// The current status of the snapshot (e.g., `ready`, `creating`, `error`).
	Status pulumi.StringPtrInput
	// The timestamp when the snapshot was last updated, in ISO 8601 format.
	UpdatedAt pulumi.StringPtrInput
	// The type of volume used by the snapshot.
	VolumeType pulumi.StringPtrInput
}

func (RdbSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*rdbSnapshotState)(nil)).Elem()
}

type rdbSnapshotArgs struct {
	// Expiration date of the snapshot in ISO 8601 format (e.g., `2025-01-31T00:00:00Z`). If not set, the snapshot will not expire automatically.
	ExpiresAt *string `pulumi:"expiresAt"`
	// The UUID of the database instance for which the snapshot is created.
	InstanceId string `pulumi:"instanceId"`
	// The name of the snapshot.
	Name *string `pulumi:"name"`
	// The region where the snapshot is stored. Defaults to the region set in the provider configuration.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a RdbSnapshot resource.
type RdbSnapshotArgs struct {
	// Expiration date of the snapshot in ISO 8601 format (e.g., `2025-01-31T00:00:00Z`). If not set, the snapshot will not expire automatically.
	ExpiresAt pulumi.StringPtrInput
	// The UUID of the database instance for which the snapshot is created.
	InstanceId pulumi.StringInput
	// The name of the snapshot.
	Name pulumi.StringPtrInput
	// The region where the snapshot is stored. Defaults to the region set in the provider configuration.
	Region pulumi.StringPtrInput
}

func (RdbSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rdbSnapshotArgs)(nil)).Elem()
}

type RdbSnapshotInput interface {
	pulumi.Input

	ToRdbSnapshotOutput() RdbSnapshotOutput
	ToRdbSnapshotOutputWithContext(ctx context.Context) RdbSnapshotOutput
}

func (*RdbSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**RdbSnapshot)(nil)).Elem()
}

func (i *RdbSnapshot) ToRdbSnapshotOutput() RdbSnapshotOutput {
	return i.ToRdbSnapshotOutputWithContext(context.Background())
}

func (i *RdbSnapshot) ToRdbSnapshotOutputWithContext(ctx context.Context) RdbSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdbSnapshotOutput)
}

// RdbSnapshotArrayInput is an input type that accepts RdbSnapshotArray and RdbSnapshotArrayOutput values.
// You can construct a concrete instance of `RdbSnapshotArrayInput` via:
//
//	RdbSnapshotArray{ RdbSnapshotArgs{...} }
type RdbSnapshotArrayInput interface {
	pulumi.Input

	ToRdbSnapshotArrayOutput() RdbSnapshotArrayOutput
	ToRdbSnapshotArrayOutputWithContext(context.Context) RdbSnapshotArrayOutput
}

type RdbSnapshotArray []RdbSnapshotInput

func (RdbSnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdbSnapshot)(nil)).Elem()
}

func (i RdbSnapshotArray) ToRdbSnapshotArrayOutput() RdbSnapshotArrayOutput {
	return i.ToRdbSnapshotArrayOutputWithContext(context.Background())
}

func (i RdbSnapshotArray) ToRdbSnapshotArrayOutputWithContext(ctx context.Context) RdbSnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdbSnapshotArrayOutput)
}

// RdbSnapshotMapInput is an input type that accepts RdbSnapshotMap and RdbSnapshotMapOutput values.
// You can construct a concrete instance of `RdbSnapshotMapInput` via:
//
//	RdbSnapshotMap{ "key": RdbSnapshotArgs{...} }
type RdbSnapshotMapInput interface {
	pulumi.Input

	ToRdbSnapshotMapOutput() RdbSnapshotMapOutput
	ToRdbSnapshotMapOutputWithContext(context.Context) RdbSnapshotMapOutput
}

type RdbSnapshotMap map[string]RdbSnapshotInput

func (RdbSnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdbSnapshot)(nil)).Elem()
}

func (i RdbSnapshotMap) ToRdbSnapshotMapOutput() RdbSnapshotMapOutput {
	return i.ToRdbSnapshotMapOutputWithContext(context.Background())
}

func (i RdbSnapshotMap) ToRdbSnapshotMapOutputWithContext(ctx context.Context) RdbSnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdbSnapshotMapOutput)
}

type RdbSnapshotOutput struct{ *pulumi.OutputState }

func (RdbSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RdbSnapshot)(nil)).Elem()
}

func (o RdbSnapshotOutput) ToRdbSnapshotOutput() RdbSnapshotOutput {
	return o
}

func (o RdbSnapshotOutput) ToRdbSnapshotOutputWithContext(ctx context.Context) RdbSnapshotOutput {
	return o
}

// The timestamp when the snapshot was created, in ISO 8601 format.
func (o RdbSnapshotOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *RdbSnapshot) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Expiration date of the snapshot in ISO 8601 format (e.g., `2025-01-31T00:00:00Z`). If not set, the snapshot will not expire automatically.
func (o RdbSnapshotOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v *RdbSnapshot) pulumi.StringOutput { return v.ExpiresAt }).(pulumi.StringOutput)
}

// The UUID of the database instance for which the snapshot is created.
func (o RdbSnapshotOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RdbSnapshot) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of the snapshot.
func (o RdbSnapshotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RdbSnapshot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The type of the database instance for which the snapshot was created.
func (o RdbSnapshotOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v *RdbSnapshot) pulumi.StringOutput { return v.NodeType }).(pulumi.StringOutput)
}

// The region where the snapshot is stored. Defaults to the region set in the provider configuration.
func (o RdbSnapshotOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RdbSnapshot) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The size of the snapshot in bytes.
func (o RdbSnapshotOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *RdbSnapshot) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// The current status of the snapshot (e.g., `ready`, `creating`, `error`).
func (o RdbSnapshotOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *RdbSnapshot) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The timestamp when the snapshot was last updated, in ISO 8601 format.
func (o RdbSnapshotOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *RdbSnapshot) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The type of volume used by the snapshot.
func (o RdbSnapshotOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v *RdbSnapshot) pulumi.StringOutput { return v.VolumeType }).(pulumi.StringOutput)
}

type RdbSnapshotArrayOutput struct{ *pulumi.OutputState }

func (RdbSnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdbSnapshot)(nil)).Elem()
}

func (o RdbSnapshotArrayOutput) ToRdbSnapshotArrayOutput() RdbSnapshotArrayOutput {
	return o
}

func (o RdbSnapshotArrayOutput) ToRdbSnapshotArrayOutputWithContext(ctx context.Context) RdbSnapshotArrayOutput {
	return o
}

func (o RdbSnapshotArrayOutput) Index(i pulumi.IntInput) RdbSnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RdbSnapshot {
		return vs[0].([]*RdbSnapshot)[vs[1].(int)]
	}).(RdbSnapshotOutput)
}

type RdbSnapshotMapOutput struct{ *pulumi.OutputState }

func (RdbSnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdbSnapshot)(nil)).Elem()
}

func (o RdbSnapshotMapOutput) ToRdbSnapshotMapOutput() RdbSnapshotMapOutput {
	return o
}

func (o RdbSnapshotMapOutput) ToRdbSnapshotMapOutputWithContext(ctx context.Context) RdbSnapshotMapOutput {
	return o
}

func (o RdbSnapshotMapOutput) MapIndex(k pulumi.StringInput) RdbSnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RdbSnapshot {
		return vs[0].(map[string]*RdbSnapshot)[vs[1].(string)]
	}).(RdbSnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RdbSnapshotInput)(nil)).Elem(), &RdbSnapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdbSnapshotArrayInput)(nil)).Elem(), RdbSnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdbSnapshotMapInput)(nil)).Elem(), RdbSnapshotMap{})
	pulumi.RegisterOutputType(RdbSnapshotOutput{})
	pulumi.RegisterOutputType(RdbSnapshotArrayOutput{})
	pulumi.RegisterOutputType(RdbSnapshotMapOutput{})
}
