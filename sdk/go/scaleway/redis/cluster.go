// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Redis™ clusters.
// For more information refer to the [API documentation](https://www.scaleway.com/en/developers/api/managed-database-redis).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/redis"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := redis.NewCluster(ctx, "main", &redis.ClusterArgs{
//				Name:     pulumi.String("test_redis_basic"),
//				Version:  pulumi.String("6.2.7"),
//				NodeType: pulumi.String("RED1-MICRO"),
//				UserName: pulumi.String("my_initial_user"),
//				Password: pulumi.String("thiZ_is_v&ry_s3cret"),
//				Tags: pulumi.StringArray{
//					pulumi.String("test"),
//					pulumi.String("redis"),
//				},
//				ClusterSize: pulumi.Int(1),
//				TlsEnabled:  pulumi.Bool(true),
//				Acls: redis.ClusterAclArray{
//					&redis.ClusterAclArgs{
//						Ip:          pulumi.String("0.0.0.0/0"),
//						Description: pulumi.String("Allow all"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With settings
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/redis"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := redis.NewCluster(ctx, "main", &redis.ClusterArgs{
//				Name:     pulumi.String("test_redis_basic"),
//				Version:  pulumi.String("6.2.7"),
//				NodeType: pulumi.String("RED1-MICRO"),
//				UserName: pulumi.String("my_initial_user"),
//				Password: pulumi.String("thiZ_is_v&ry_s3cret"),
//				Settings: pulumi.StringMap{
//					"maxclients":    pulumi.String("1000"),
//					"tcp-keepalive": pulumi.String("120"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With a Private Network
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/network"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/redis"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			pn, err := network.NewPrivateNetwork(ctx, "pn", &network.PrivateNetworkArgs{
//				Name: pulumi.String("private-network"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = redis.NewCluster(ctx, "main", &redis.ClusterArgs{
//				Name:        pulumi.String("test_redis_endpoints"),
//				Version:     pulumi.String("6.2.7"),
//				NodeType:    pulumi.String("RED1-MICRO"),
//				UserName:    pulumi.String("my_initial_user"),
//				Password:    pulumi.String("thiZ_is_v&ry_s3cret"),
//				ClusterSize: pulumi.Int(1),
//				PrivateNetworks: redis.ClusterPrivateNetworkArray{
//					&redis.ClusterPrivateNetworkArgs{
//						Id: pn.ID(),
//						ServiceIps: pulumi.StringArray{
//							pulumi.String("10.12.1.1/20"),
//						},
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				pn,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Redis™ cluster can be imported using the `{zone}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:redis/cluster:Cluster main fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// List of acl rules, this is cluster's authorized IPs. More details on the ACL section.
	Acls ClusterAclArrayOutput `pulumi:"acls"`
	// The PEM of the certificate used by redis, only when `tlsEnabled` is true
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// The number of nodes in the Redis™ cluster.
	//
	// > **Important:**
	//
	// - Cluster_size = 1 for Standalone mode (single node).
	//
	// - Cluster_size = 2 for High Availability (HA) mode, with 1 main node and 1 standby node.
	//
	// - Cluster_size >= 3 for Cluster mode, which requires a minimum of 1 main node and 2 secondary nodes.
	//
	// > **Important:** If you are using the cluster mode (>=3 nodes), you can set a bigger `clusterSize` than you initially
	// did, it will migrate the Redis™ cluster but keep in mind that you cannot downgrade a Redis™ cluster, so setting a smaller
	// `clusterSize` will destroy and recreate your cluster.
	//
	// > **Important:** If you are using the Standalone mode (1 node), setting a bigger `clusterSize` will destroy and
	// recreate your cluster as you will be switching to the cluster mode.
	ClusterSize pulumi.IntOutput `pulumi:"clusterSize"`
	// The date and time of creation of the Redis™ cluster.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The name of the Redis™ cluster.
	Name pulumi.StringOutput `pulumi:"name"`
	// The type of Redis™ cluster you want to create (e.g. `RED1-M`).
	//
	// > **Important:** Updates to `nodeType` will migrate the Redis™ cluster to the desired `nodeType`. Keep in mind that
	// you cannot downgrade a Redis™ cluster.
	NodeType pulumi.StringOutput `pulumi:"nodeType"`
	// Password for the first user of the Redis™ cluster.
	Password pulumi.StringOutput `pulumi:"password"`
	// The list of private IPv4 addresses associated with the resource.
	PrivateIps ClusterPrivateIpArrayOutput `pulumi:"privateIps"`
	// Describes the Private Network you want to connect to your cluster. If not set, a public
	// network will be provided. More details on the Private Network section
	PrivateNetworks ClusterPrivateNetworkArrayOutput `pulumi:"privateNetworks"`
	// `projectId`) The ID of the project the Redis™ cluster is
	// associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// (Optional) Public network details. Only one of `privateNetwork` and `publicNetwork` may be set.
	// > The `publicNetwork` block exports:
	PublicNetwork ClusterPublicNetworkOutput `pulumi:"publicNetwork"`
	// Map of settings for Redis™ cluster. Available settings can be found by listing Redis™ versions
	// with scaleway API or CLI
	Settings pulumi.StringMapOutput `pulumi:"settings"`
	// The tags associated with the Redis™ cluster.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Whether TLS is enabled or not.
	//
	// > The changes on `tlsEnabled` will force the resource creation.
	TlsEnabled pulumi.BoolPtrOutput `pulumi:"tlsEnabled"`
	// The date and time of the last update of the Redis™ cluster.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// Identifier for the first user of the Redis™ cluster.
	UserName pulumi.StringOutput `pulumi:"userName"`
	// Redis™ cluster's version (e.g. `6.2.7`).
	//
	// > **Important:** Updates to `version` will migrate the Redis™ cluster to the desired `version`. Keep in mind that you
	// cannot downgrade a Redis™ cluster.
	Version pulumi.StringOutput `pulumi:"version"`
	// `zone`) The zone in which the
	// Redis™ cluster should be created.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NodeType == nil {
		return nil, errors.New("invalid value for required argument 'NodeType'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/redisCluster:RedisCluster"),
		},
	})
	opts = append(opts, aliases)
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("scaleway:redis/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("scaleway:redis/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// List of acl rules, this is cluster's authorized IPs. More details on the ACL section.
	Acls []ClusterAcl `pulumi:"acls"`
	// The PEM of the certificate used by redis, only when `tlsEnabled` is true
	Certificate *string `pulumi:"certificate"`
	// The number of nodes in the Redis™ cluster.
	//
	// > **Important:**
	//
	// - Cluster_size = 1 for Standalone mode (single node).
	//
	// - Cluster_size = 2 for High Availability (HA) mode, with 1 main node and 1 standby node.
	//
	// - Cluster_size >= 3 for Cluster mode, which requires a minimum of 1 main node and 2 secondary nodes.
	//
	// > **Important:** If you are using the cluster mode (>=3 nodes), you can set a bigger `clusterSize` than you initially
	// did, it will migrate the Redis™ cluster but keep in mind that you cannot downgrade a Redis™ cluster, so setting a smaller
	// `clusterSize` will destroy and recreate your cluster.
	//
	// > **Important:** If you are using the Standalone mode (1 node), setting a bigger `clusterSize` will destroy and
	// recreate your cluster as you will be switching to the cluster mode.
	ClusterSize *int `pulumi:"clusterSize"`
	// The date and time of creation of the Redis™ cluster.
	CreatedAt *string `pulumi:"createdAt"`
	// The name of the Redis™ cluster.
	Name *string `pulumi:"name"`
	// The type of Redis™ cluster you want to create (e.g. `RED1-M`).
	//
	// > **Important:** Updates to `nodeType` will migrate the Redis™ cluster to the desired `nodeType`. Keep in mind that
	// you cannot downgrade a Redis™ cluster.
	NodeType *string `pulumi:"nodeType"`
	// Password for the first user of the Redis™ cluster.
	Password *string `pulumi:"password"`
	// The list of private IPv4 addresses associated with the resource.
	PrivateIps []ClusterPrivateIp `pulumi:"privateIps"`
	// Describes the Private Network you want to connect to your cluster. If not set, a public
	// network will be provided. More details on the Private Network section
	PrivateNetworks []ClusterPrivateNetwork `pulumi:"privateNetworks"`
	// `projectId`) The ID of the project the Redis™ cluster is
	// associated with.
	ProjectId *string `pulumi:"projectId"`
	// (Optional) Public network details. Only one of `privateNetwork` and `publicNetwork` may be set.
	// > The `publicNetwork` block exports:
	PublicNetwork *ClusterPublicNetwork `pulumi:"publicNetwork"`
	// Map of settings for Redis™ cluster. Available settings can be found by listing Redis™ versions
	// with scaleway API or CLI
	Settings map[string]string `pulumi:"settings"`
	// The tags associated with the Redis™ cluster.
	Tags []string `pulumi:"tags"`
	// Whether TLS is enabled or not.
	//
	// > The changes on `tlsEnabled` will force the resource creation.
	TlsEnabled *bool `pulumi:"tlsEnabled"`
	// The date and time of the last update of the Redis™ cluster.
	UpdatedAt *string `pulumi:"updatedAt"`
	// Identifier for the first user of the Redis™ cluster.
	UserName *string `pulumi:"userName"`
	// Redis™ cluster's version (e.g. `6.2.7`).
	//
	// > **Important:** Updates to `version` will migrate the Redis™ cluster to the desired `version`. Keep in mind that you
	// cannot downgrade a Redis™ cluster.
	Version *string `pulumi:"version"`
	// `zone`) The zone in which the
	// Redis™ cluster should be created.
	Zone *string `pulumi:"zone"`
}

type ClusterState struct {
	// List of acl rules, this is cluster's authorized IPs. More details on the ACL section.
	Acls ClusterAclArrayInput
	// The PEM of the certificate used by redis, only when `tlsEnabled` is true
	Certificate pulumi.StringPtrInput
	// The number of nodes in the Redis™ cluster.
	//
	// > **Important:**
	//
	// - Cluster_size = 1 for Standalone mode (single node).
	//
	// - Cluster_size = 2 for High Availability (HA) mode, with 1 main node and 1 standby node.
	//
	// - Cluster_size >= 3 for Cluster mode, which requires a minimum of 1 main node and 2 secondary nodes.
	//
	// > **Important:** If you are using the cluster mode (>=3 nodes), you can set a bigger `clusterSize` than you initially
	// did, it will migrate the Redis™ cluster but keep in mind that you cannot downgrade a Redis™ cluster, so setting a smaller
	// `clusterSize` will destroy and recreate your cluster.
	//
	// > **Important:** If you are using the Standalone mode (1 node), setting a bigger `clusterSize` will destroy and
	// recreate your cluster as you will be switching to the cluster mode.
	ClusterSize pulumi.IntPtrInput
	// The date and time of creation of the Redis™ cluster.
	CreatedAt pulumi.StringPtrInput
	// The name of the Redis™ cluster.
	Name pulumi.StringPtrInput
	// The type of Redis™ cluster you want to create (e.g. `RED1-M`).
	//
	// > **Important:** Updates to `nodeType` will migrate the Redis™ cluster to the desired `nodeType`. Keep in mind that
	// you cannot downgrade a Redis™ cluster.
	NodeType pulumi.StringPtrInput
	// Password for the first user of the Redis™ cluster.
	Password pulumi.StringPtrInput
	// The list of private IPv4 addresses associated with the resource.
	PrivateIps ClusterPrivateIpArrayInput
	// Describes the Private Network you want to connect to your cluster. If not set, a public
	// network will be provided. More details on the Private Network section
	PrivateNetworks ClusterPrivateNetworkArrayInput
	// `projectId`) The ID of the project the Redis™ cluster is
	// associated with.
	ProjectId pulumi.StringPtrInput
	// (Optional) Public network details. Only one of `privateNetwork` and `publicNetwork` may be set.
	// > The `publicNetwork` block exports:
	PublicNetwork ClusterPublicNetworkPtrInput
	// Map of settings for Redis™ cluster. Available settings can be found by listing Redis™ versions
	// with scaleway API or CLI
	Settings pulumi.StringMapInput
	// The tags associated with the Redis™ cluster.
	Tags pulumi.StringArrayInput
	// Whether TLS is enabled or not.
	//
	// > The changes on `tlsEnabled` will force the resource creation.
	TlsEnabled pulumi.BoolPtrInput
	// The date and time of the last update of the Redis™ cluster.
	UpdatedAt pulumi.StringPtrInput
	// Identifier for the first user of the Redis™ cluster.
	UserName pulumi.StringPtrInput
	// Redis™ cluster's version (e.g. `6.2.7`).
	//
	// > **Important:** Updates to `version` will migrate the Redis™ cluster to the desired `version`. Keep in mind that you
	// cannot downgrade a Redis™ cluster.
	Version pulumi.StringPtrInput
	// `zone`) The zone in which the
	// Redis™ cluster should be created.
	Zone pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// List of acl rules, this is cluster's authorized IPs. More details on the ACL section.
	Acls []ClusterAcl `pulumi:"acls"`
	// The number of nodes in the Redis™ cluster.
	//
	// > **Important:**
	//
	// - Cluster_size = 1 for Standalone mode (single node).
	//
	// - Cluster_size = 2 for High Availability (HA) mode, with 1 main node and 1 standby node.
	//
	// - Cluster_size >= 3 for Cluster mode, which requires a minimum of 1 main node and 2 secondary nodes.
	//
	// > **Important:** If you are using the cluster mode (>=3 nodes), you can set a bigger `clusterSize` than you initially
	// did, it will migrate the Redis™ cluster but keep in mind that you cannot downgrade a Redis™ cluster, so setting a smaller
	// `clusterSize` will destroy and recreate your cluster.
	//
	// > **Important:** If you are using the Standalone mode (1 node), setting a bigger `clusterSize` will destroy and
	// recreate your cluster as you will be switching to the cluster mode.
	ClusterSize *int `pulumi:"clusterSize"`
	// The name of the Redis™ cluster.
	Name *string `pulumi:"name"`
	// The type of Redis™ cluster you want to create (e.g. `RED1-M`).
	//
	// > **Important:** Updates to `nodeType` will migrate the Redis™ cluster to the desired `nodeType`. Keep in mind that
	// you cannot downgrade a Redis™ cluster.
	NodeType string `pulumi:"nodeType"`
	// Password for the first user of the Redis™ cluster.
	Password string `pulumi:"password"`
	// The list of private IPv4 addresses associated with the resource.
	PrivateIps []ClusterPrivateIp `pulumi:"privateIps"`
	// Describes the Private Network you want to connect to your cluster. If not set, a public
	// network will be provided. More details on the Private Network section
	PrivateNetworks []ClusterPrivateNetwork `pulumi:"privateNetworks"`
	// `projectId`) The ID of the project the Redis™ cluster is
	// associated with.
	ProjectId *string `pulumi:"projectId"`
	// (Optional) Public network details. Only one of `privateNetwork` and `publicNetwork` may be set.
	// > The `publicNetwork` block exports:
	PublicNetwork *ClusterPublicNetwork `pulumi:"publicNetwork"`
	// Map of settings for Redis™ cluster. Available settings can be found by listing Redis™ versions
	// with scaleway API or CLI
	Settings map[string]string `pulumi:"settings"`
	// The tags associated with the Redis™ cluster.
	Tags []string `pulumi:"tags"`
	// Whether TLS is enabled or not.
	//
	// > The changes on `tlsEnabled` will force the resource creation.
	TlsEnabled *bool `pulumi:"tlsEnabled"`
	// Identifier for the first user of the Redis™ cluster.
	UserName string `pulumi:"userName"`
	// Redis™ cluster's version (e.g. `6.2.7`).
	//
	// > **Important:** Updates to `version` will migrate the Redis™ cluster to the desired `version`. Keep in mind that you
	// cannot downgrade a Redis™ cluster.
	Version string `pulumi:"version"`
	// `zone`) The zone in which the
	// Redis™ cluster should be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// List of acl rules, this is cluster's authorized IPs. More details on the ACL section.
	Acls ClusterAclArrayInput
	// The number of nodes in the Redis™ cluster.
	//
	// > **Important:**
	//
	// - Cluster_size = 1 for Standalone mode (single node).
	//
	// - Cluster_size = 2 for High Availability (HA) mode, with 1 main node and 1 standby node.
	//
	// - Cluster_size >= 3 for Cluster mode, which requires a minimum of 1 main node and 2 secondary nodes.
	//
	// > **Important:** If you are using the cluster mode (>=3 nodes), you can set a bigger `clusterSize` than you initially
	// did, it will migrate the Redis™ cluster but keep in mind that you cannot downgrade a Redis™ cluster, so setting a smaller
	// `clusterSize` will destroy and recreate your cluster.
	//
	// > **Important:** If you are using the Standalone mode (1 node), setting a bigger `clusterSize` will destroy and
	// recreate your cluster as you will be switching to the cluster mode.
	ClusterSize pulumi.IntPtrInput
	// The name of the Redis™ cluster.
	Name pulumi.StringPtrInput
	// The type of Redis™ cluster you want to create (e.g. `RED1-M`).
	//
	// > **Important:** Updates to `nodeType` will migrate the Redis™ cluster to the desired `nodeType`. Keep in mind that
	// you cannot downgrade a Redis™ cluster.
	NodeType pulumi.StringInput
	// Password for the first user of the Redis™ cluster.
	Password pulumi.StringInput
	// The list of private IPv4 addresses associated with the resource.
	PrivateIps ClusterPrivateIpArrayInput
	// Describes the Private Network you want to connect to your cluster. If not set, a public
	// network will be provided. More details on the Private Network section
	PrivateNetworks ClusterPrivateNetworkArrayInput
	// `projectId`) The ID of the project the Redis™ cluster is
	// associated with.
	ProjectId pulumi.StringPtrInput
	// (Optional) Public network details. Only one of `privateNetwork` and `publicNetwork` may be set.
	// > The `publicNetwork` block exports:
	PublicNetwork ClusterPublicNetworkPtrInput
	// Map of settings for Redis™ cluster. Available settings can be found by listing Redis™ versions
	// with scaleway API or CLI
	Settings pulumi.StringMapInput
	// The tags associated with the Redis™ cluster.
	Tags pulumi.StringArrayInput
	// Whether TLS is enabled or not.
	//
	// > The changes on `tlsEnabled` will force the resource creation.
	TlsEnabled pulumi.BoolPtrInput
	// Identifier for the first user of the Redis™ cluster.
	UserName pulumi.StringInput
	// Redis™ cluster's version (e.g. `6.2.7`).
	//
	// > **Important:** Updates to `version` will migrate the Redis™ cluster to the desired `version`. Keep in mind that you
	// cannot downgrade a Redis™ cluster.
	Version pulumi.StringInput
	// `zone`) The zone in which the
	// Redis™ cluster should be created.
	Zone pulumi.StringPtrInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// List of acl rules, this is cluster's authorized IPs. More details on the ACL section.
func (o ClusterOutput) Acls() ClusterAclArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterAclArrayOutput { return v.Acls }).(ClusterAclArrayOutput)
}

// The PEM of the certificate used by redis, only when `tlsEnabled` is true
func (o ClusterOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

// The number of nodes in the Redis™ cluster.
//
// > **Important:**
//
// - Cluster_size = 1 for Standalone mode (single node).
//
// - Cluster_size = 2 for High Availability (HA) mode, with 1 main node and 1 standby node.
//
// - Cluster_size >= 3 for Cluster mode, which requires a minimum of 1 main node and 2 secondary nodes.
//
// > **Important:** If you are using the cluster mode (>=3 nodes), you can set a bigger `clusterSize` than you initially
// did, it will migrate the Redis™ cluster but keep in mind that you cannot downgrade a Redis™ cluster, so setting a smaller
// `clusterSize` will destroy and recreate your cluster.
//
// > **Important:** If you are using the Standalone mode (1 node), setting a bigger `clusterSize` will destroy and
// recreate your cluster as you will be switching to the cluster mode.
func (o ClusterOutput) ClusterSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.ClusterSize }).(pulumi.IntOutput)
}

// The date and time of creation of the Redis™ cluster.
func (o ClusterOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The name of the Redis™ cluster.
func (o ClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The type of Redis™ cluster you want to create (e.g. `RED1-M`).
//
// > **Important:** Updates to `nodeType` will migrate the Redis™ cluster to the desired `nodeType`. Keep in mind that
// you cannot downgrade a Redis™ cluster.
func (o ClusterOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.NodeType }).(pulumi.StringOutput)
}

// Password for the first user of the Redis™ cluster.
func (o ClusterOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The list of private IPv4 addresses associated with the resource.
func (o ClusterOutput) PrivateIps() ClusterPrivateIpArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterPrivateIpArrayOutput { return v.PrivateIps }).(ClusterPrivateIpArrayOutput)
}

// Describes the Private Network you want to connect to your cluster. If not set, a public
// network will be provided. More details on the Private Network section
func (o ClusterOutput) PrivateNetworks() ClusterPrivateNetworkArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterPrivateNetworkArrayOutput { return v.PrivateNetworks }).(ClusterPrivateNetworkArrayOutput)
}

// `projectId`) The ID of the project the Redis™ cluster is
// associated with.
func (o ClusterOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// (Optional) Public network details. Only one of `privateNetwork` and `publicNetwork` may be set.
// > The `publicNetwork` block exports:
func (o ClusterOutput) PublicNetwork() ClusterPublicNetworkOutput {
	return o.ApplyT(func(v *Cluster) ClusterPublicNetworkOutput { return v.PublicNetwork }).(ClusterPublicNetworkOutput)
}

// Map of settings for Redis™ cluster. Available settings can be found by listing Redis™ versions
// with scaleway API or CLI
func (o ClusterOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.Settings }).(pulumi.StringMapOutput)
}

// The tags associated with the Redis™ cluster.
func (o ClusterOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Whether TLS is enabled or not.
//
// > The changes on `tlsEnabled` will force the resource creation.
func (o ClusterOutput) TlsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolPtrOutput { return v.TlsEnabled }).(pulumi.BoolPtrOutput)
}

// The date and time of the last update of the Redis™ cluster.
func (o ClusterOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Identifier for the first user of the Redis™ cluster.
func (o ClusterOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

// Redis™ cluster's version (e.g. `6.2.7`).
//
// > **Important:** Updates to `version` will migrate the Redis™ cluster to the desired `version`. Keep in mind that you
// cannot downgrade a Redis™ cluster.
func (o ClusterOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// `zone`) The zone in which the
// Redis™ cluster should be created.
func (o ClusterOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
