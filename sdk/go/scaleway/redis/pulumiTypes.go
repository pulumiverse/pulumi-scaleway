// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

var _ = internal.GetEnvOrDefault

type ClusterAcl struct {
	// A text describing this rule. Default description: `Allow IP`
	//
	// > The `acl` conflict with `privateNetwork`. Only one should be specified.
	Description *string `pulumi:"description"`
	// The ID of the IPv4 address resource.
	Id *string `pulumi:"id"`
	// The IP range to whitelist
	// in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)
	Ip string `pulumi:"ip"`
}

// ClusterAclInput is an input type that accepts ClusterAclArgs and ClusterAclOutput values.
// You can construct a concrete instance of `ClusterAclInput` via:
//
//	ClusterAclArgs{...}
type ClusterAclInput interface {
	pulumi.Input

	ToClusterAclOutput() ClusterAclOutput
	ToClusterAclOutputWithContext(context.Context) ClusterAclOutput
}

type ClusterAclArgs struct {
	// A text describing this rule. Default description: `Allow IP`
	//
	// > The `acl` conflict with `privateNetwork`. Only one should be specified.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The ID of the IPv4 address resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The IP range to whitelist
	// in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)
	Ip pulumi.StringInput `pulumi:"ip"`
}

func (ClusterAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAcl)(nil)).Elem()
}

func (i ClusterAclArgs) ToClusterAclOutput() ClusterAclOutput {
	return i.ToClusterAclOutputWithContext(context.Background())
}

func (i ClusterAclArgs) ToClusterAclOutputWithContext(ctx context.Context) ClusterAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAclOutput)
}

// ClusterAclArrayInput is an input type that accepts ClusterAclArray and ClusterAclArrayOutput values.
// You can construct a concrete instance of `ClusterAclArrayInput` via:
//
//	ClusterAclArray{ ClusterAclArgs{...} }
type ClusterAclArrayInput interface {
	pulumi.Input

	ToClusterAclArrayOutput() ClusterAclArrayOutput
	ToClusterAclArrayOutputWithContext(context.Context) ClusterAclArrayOutput
}

type ClusterAclArray []ClusterAclInput

func (ClusterAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterAcl)(nil)).Elem()
}

func (i ClusterAclArray) ToClusterAclArrayOutput() ClusterAclArrayOutput {
	return i.ToClusterAclArrayOutputWithContext(context.Background())
}

func (i ClusterAclArray) ToClusterAclArrayOutputWithContext(ctx context.Context) ClusterAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAclArrayOutput)
}

type ClusterAclOutput struct{ *pulumi.OutputState }

func (ClusterAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAcl)(nil)).Elem()
}

func (o ClusterAclOutput) ToClusterAclOutput() ClusterAclOutput {
	return o
}

func (o ClusterAclOutput) ToClusterAclOutputWithContext(ctx context.Context) ClusterAclOutput {
	return o
}

// A text describing this rule. Default description: `Allow IP`
//
// > The `acl` conflict with `privateNetwork`. Only one should be specified.
func (o ClusterAclOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterAcl) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of the IPv4 address resource.
func (o ClusterAclOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterAcl) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The IP range to whitelist
// in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)
func (o ClusterAclOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterAcl) string { return v.Ip }).(pulumi.StringOutput)
}

type ClusterAclArrayOutput struct{ *pulumi.OutputState }

func (ClusterAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterAcl)(nil)).Elem()
}

func (o ClusterAclArrayOutput) ToClusterAclArrayOutput() ClusterAclArrayOutput {
	return o
}

func (o ClusterAclArrayOutput) ToClusterAclArrayOutputWithContext(ctx context.Context) ClusterAclArrayOutput {
	return o
}

func (o ClusterAclArrayOutput) Index(i pulumi.IntInput) ClusterAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterAcl {
		return vs[0].([]ClusterAcl)[vs[1].(int)]
	}).(ClusterAclOutput)
}

type ClusterPrivateIp struct {
	// The private IPv4 address.
	Address *string `pulumi:"address"`
	// The ID of the IPv4 address resource.
	Id *string `pulumi:"id"`
}

// ClusterPrivateIpInput is an input type that accepts ClusterPrivateIpArgs and ClusterPrivateIpOutput values.
// You can construct a concrete instance of `ClusterPrivateIpInput` via:
//
//	ClusterPrivateIpArgs{...}
type ClusterPrivateIpInput interface {
	pulumi.Input

	ToClusterPrivateIpOutput() ClusterPrivateIpOutput
	ToClusterPrivateIpOutputWithContext(context.Context) ClusterPrivateIpOutput
}

type ClusterPrivateIpArgs struct {
	// The private IPv4 address.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The ID of the IPv4 address resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (ClusterPrivateIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPrivateIp)(nil)).Elem()
}

func (i ClusterPrivateIpArgs) ToClusterPrivateIpOutput() ClusterPrivateIpOutput {
	return i.ToClusterPrivateIpOutputWithContext(context.Background())
}

func (i ClusterPrivateIpArgs) ToClusterPrivateIpOutputWithContext(ctx context.Context) ClusterPrivateIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPrivateIpOutput)
}

// ClusterPrivateIpArrayInput is an input type that accepts ClusterPrivateIpArray and ClusterPrivateIpArrayOutput values.
// You can construct a concrete instance of `ClusterPrivateIpArrayInput` via:
//
//	ClusterPrivateIpArray{ ClusterPrivateIpArgs{...} }
type ClusterPrivateIpArrayInput interface {
	pulumi.Input

	ToClusterPrivateIpArrayOutput() ClusterPrivateIpArrayOutput
	ToClusterPrivateIpArrayOutputWithContext(context.Context) ClusterPrivateIpArrayOutput
}

type ClusterPrivateIpArray []ClusterPrivateIpInput

func (ClusterPrivateIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterPrivateIp)(nil)).Elem()
}

func (i ClusterPrivateIpArray) ToClusterPrivateIpArrayOutput() ClusterPrivateIpArrayOutput {
	return i.ToClusterPrivateIpArrayOutputWithContext(context.Background())
}

func (i ClusterPrivateIpArray) ToClusterPrivateIpArrayOutputWithContext(ctx context.Context) ClusterPrivateIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPrivateIpArrayOutput)
}

type ClusterPrivateIpOutput struct{ *pulumi.OutputState }

func (ClusterPrivateIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPrivateIp)(nil)).Elem()
}

func (o ClusterPrivateIpOutput) ToClusterPrivateIpOutput() ClusterPrivateIpOutput {
	return o
}

func (o ClusterPrivateIpOutput) ToClusterPrivateIpOutputWithContext(ctx context.Context) ClusterPrivateIpOutput {
	return o
}

// The private IPv4 address.
func (o ClusterPrivateIpOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPrivateIp) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The ID of the IPv4 address resource.
func (o ClusterPrivateIpOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPrivateIp) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type ClusterPrivateIpArrayOutput struct{ *pulumi.OutputState }

func (ClusterPrivateIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterPrivateIp)(nil)).Elem()
}

func (o ClusterPrivateIpArrayOutput) ToClusterPrivateIpArrayOutput() ClusterPrivateIpArrayOutput {
	return o
}

func (o ClusterPrivateIpArrayOutput) ToClusterPrivateIpArrayOutputWithContext(ctx context.Context) ClusterPrivateIpArrayOutput {
	return o
}

func (o ClusterPrivateIpArrayOutput) Index(i pulumi.IntInput) ClusterPrivateIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterPrivateIp {
		return vs[0].([]ClusterPrivateIp)[vs[1].(int)]
	}).(ClusterPrivateIpOutput)
}

type ClusterPrivateNetwork struct {
	// The ID of the endpoint.
	EndpointId *string `pulumi:"endpointId"`
	// The UUID of the Private Network resource.
	Id string `pulumi:"id"`
	// Endpoint IPv4 addresses in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation). You must provide at least one IP per node.
	// Keep in mind that in cluster mode you cannot edit your Private Network after its creation so if you want to be able to
	// scale your cluster horizontally (adding nodes) later, you should provide more IPs than nodes.
	// If not set, the IP network address within the private subnet is determined by the IP Address Management (IPAM) service.
	// > **Important:** When IPAM is enabled, the IPs specified here will be ignored and should not be provided.
	//
	// > The `privateNetwork` conflicts with `acl`. Only one should be specified.
	//
	// > **Important:** The way to use Private Networks differs whether you are using Redisâ„¢ in Standalone or cluster mode.
	//
	// - Standalone mode (`clusterSize` = 1) : you can attach as many Private Networks as you want (each must be a separate
	// block). If you detach your only Private Network, your cluster won't be reachable until you define a new Private or
	// Public Network. You can modify your `privateNetwork` and its specs, you can have both a Private and Public Network side
	// by side.
	//
	// - Cluster mode (`clusterSize` > 2) : you can define a single Private Network as you create your cluster, you won't be
	// able to edit or detach it afterward, unless you create another cluster. This also means that, if you are using a static
	// configuration (`serviceIps`), you won't be able to scale your cluster horizontally (add more nodes) since it would
	// require updating the Private Network to add IPs.
	// Your `serviceIps` must be listed as follows:
	ServiceIps []string `pulumi:"serviceIps"`
	// `zone`) The zone in which the
	// Redisâ„¢ cluster should be created.
	Zone *string `pulumi:"zone"`
}

// ClusterPrivateNetworkInput is an input type that accepts ClusterPrivateNetworkArgs and ClusterPrivateNetworkOutput values.
// You can construct a concrete instance of `ClusterPrivateNetworkInput` via:
//
//	ClusterPrivateNetworkArgs{...}
type ClusterPrivateNetworkInput interface {
	pulumi.Input

	ToClusterPrivateNetworkOutput() ClusterPrivateNetworkOutput
	ToClusterPrivateNetworkOutputWithContext(context.Context) ClusterPrivateNetworkOutput
}

type ClusterPrivateNetworkArgs struct {
	// The ID of the endpoint.
	EndpointId pulumi.StringPtrInput `pulumi:"endpointId"`
	// The UUID of the Private Network resource.
	Id pulumi.StringInput `pulumi:"id"`
	// Endpoint IPv4 addresses in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation). You must provide at least one IP per node.
	// Keep in mind that in cluster mode you cannot edit your Private Network after its creation so if you want to be able to
	// scale your cluster horizontally (adding nodes) later, you should provide more IPs than nodes.
	// If not set, the IP network address within the private subnet is determined by the IP Address Management (IPAM) service.
	// > **Important:** When IPAM is enabled, the IPs specified here will be ignored and should not be provided.
	//
	// > The `privateNetwork` conflicts with `acl`. Only one should be specified.
	//
	// > **Important:** The way to use Private Networks differs whether you are using Redisâ„¢ in Standalone or cluster mode.
	//
	// - Standalone mode (`clusterSize` = 1) : you can attach as many Private Networks as you want (each must be a separate
	// block). If you detach your only Private Network, your cluster won't be reachable until you define a new Private or
	// Public Network. You can modify your `privateNetwork` and its specs, you can have both a Private and Public Network side
	// by side.
	//
	// - Cluster mode (`clusterSize` > 2) : you can define a single Private Network as you create your cluster, you won't be
	// able to edit or detach it afterward, unless you create another cluster. This also means that, if you are using a static
	// configuration (`serviceIps`), you won't be able to scale your cluster horizontally (add more nodes) since it would
	// require updating the Private Network to add IPs.
	// Your `serviceIps` must be listed as follows:
	ServiceIps pulumi.StringArrayInput `pulumi:"serviceIps"`
	// `zone`) The zone in which the
	// Redisâ„¢ cluster should be created.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (ClusterPrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPrivateNetwork)(nil)).Elem()
}

func (i ClusterPrivateNetworkArgs) ToClusterPrivateNetworkOutput() ClusterPrivateNetworkOutput {
	return i.ToClusterPrivateNetworkOutputWithContext(context.Background())
}

func (i ClusterPrivateNetworkArgs) ToClusterPrivateNetworkOutputWithContext(ctx context.Context) ClusterPrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPrivateNetworkOutput)
}

// ClusterPrivateNetworkArrayInput is an input type that accepts ClusterPrivateNetworkArray and ClusterPrivateNetworkArrayOutput values.
// You can construct a concrete instance of `ClusterPrivateNetworkArrayInput` via:
//
//	ClusterPrivateNetworkArray{ ClusterPrivateNetworkArgs{...} }
type ClusterPrivateNetworkArrayInput interface {
	pulumi.Input

	ToClusterPrivateNetworkArrayOutput() ClusterPrivateNetworkArrayOutput
	ToClusterPrivateNetworkArrayOutputWithContext(context.Context) ClusterPrivateNetworkArrayOutput
}

type ClusterPrivateNetworkArray []ClusterPrivateNetworkInput

func (ClusterPrivateNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterPrivateNetwork)(nil)).Elem()
}

func (i ClusterPrivateNetworkArray) ToClusterPrivateNetworkArrayOutput() ClusterPrivateNetworkArrayOutput {
	return i.ToClusterPrivateNetworkArrayOutputWithContext(context.Background())
}

func (i ClusterPrivateNetworkArray) ToClusterPrivateNetworkArrayOutputWithContext(ctx context.Context) ClusterPrivateNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPrivateNetworkArrayOutput)
}

type ClusterPrivateNetworkOutput struct{ *pulumi.OutputState }

func (ClusterPrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPrivateNetwork)(nil)).Elem()
}

func (o ClusterPrivateNetworkOutput) ToClusterPrivateNetworkOutput() ClusterPrivateNetworkOutput {
	return o
}

func (o ClusterPrivateNetworkOutput) ToClusterPrivateNetworkOutputWithContext(ctx context.Context) ClusterPrivateNetworkOutput {
	return o
}

// The ID of the endpoint.
func (o ClusterPrivateNetworkOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPrivateNetwork) *string { return v.EndpointId }).(pulumi.StringPtrOutput)
}

// The UUID of the Private Network resource.
func (o ClusterPrivateNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterPrivateNetwork) string { return v.Id }).(pulumi.StringOutput)
}

// Endpoint IPv4 addresses in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation). You must provide at least one IP per node.
// Keep in mind that in cluster mode you cannot edit your Private Network after its creation so if you want to be able to
// scale your cluster horizontally (adding nodes) later, you should provide more IPs than nodes.
// If not set, the IP network address within the private subnet is determined by the IP Address Management (IPAM) service.
// > **Important:** When IPAM is enabled, the IPs specified here will be ignored and should not be provided.
//
// > The `privateNetwork` conflicts with `acl`. Only one should be specified.
//
// > **Important:** The way to use Private Networks differs whether you are using Redisâ„¢ in Standalone or cluster mode.
//
// - Standalone mode (`clusterSize` = 1) : you can attach as many Private Networks as you want (each must be a separate
// block). If you detach your only Private Network, your cluster won't be reachable until you define a new Private or
// Public Network. You can modify your `privateNetwork` and its specs, you can have both a Private and Public Network side
// by side.
//
// - Cluster mode (`clusterSize` > 2) : you can define a single Private Network as you create your cluster, you won't be
// able to edit or detach it afterward, unless you create another cluster. This also means that, if you are using a static
// configuration (`serviceIps`), you won't be able to scale your cluster horizontally (add more nodes) since it would
// require updating the Private Network to add IPs.
// Your `serviceIps` must be listed as follows:
func (o ClusterPrivateNetworkOutput) ServiceIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterPrivateNetwork) []string { return v.ServiceIps }).(pulumi.StringArrayOutput)
}

// `zone`) The zone in which the
// Redisâ„¢ cluster should be created.
func (o ClusterPrivateNetworkOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPrivateNetwork) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type ClusterPrivateNetworkArrayOutput struct{ *pulumi.OutputState }

func (ClusterPrivateNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterPrivateNetwork)(nil)).Elem()
}

func (o ClusterPrivateNetworkArrayOutput) ToClusterPrivateNetworkArrayOutput() ClusterPrivateNetworkArrayOutput {
	return o
}

func (o ClusterPrivateNetworkArrayOutput) ToClusterPrivateNetworkArrayOutputWithContext(ctx context.Context) ClusterPrivateNetworkArrayOutput {
	return o
}

func (o ClusterPrivateNetworkArrayOutput) Index(i pulumi.IntInput) ClusterPrivateNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterPrivateNetwork {
		return vs[0].([]ClusterPrivateNetwork)[vs[1].(int)]
	}).(ClusterPrivateNetworkOutput)
}

type ClusterPublicNetwork struct {
	// The ID of the IPv4 address resource.
	Id *string `pulumi:"id"`
	// Lis of IPv4 address of the endpoint (IP address).
	Ips []string `pulumi:"ips"`
	// TCP port of the endpoint.
	Port *int `pulumi:"port"`
}

// ClusterPublicNetworkInput is an input type that accepts ClusterPublicNetworkArgs and ClusterPublicNetworkOutput values.
// You can construct a concrete instance of `ClusterPublicNetworkInput` via:
//
//	ClusterPublicNetworkArgs{...}
type ClusterPublicNetworkInput interface {
	pulumi.Input

	ToClusterPublicNetworkOutput() ClusterPublicNetworkOutput
	ToClusterPublicNetworkOutputWithContext(context.Context) ClusterPublicNetworkOutput
}

type ClusterPublicNetworkArgs struct {
	// The ID of the IPv4 address resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Lis of IPv4 address of the endpoint (IP address).
	Ips pulumi.StringArrayInput `pulumi:"ips"`
	// TCP port of the endpoint.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (ClusterPublicNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPublicNetwork)(nil)).Elem()
}

func (i ClusterPublicNetworkArgs) ToClusterPublicNetworkOutput() ClusterPublicNetworkOutput {
	return i.ToClusterPublicNetworkOutputWithContext(context.Background())
}

func (i ClusterPublicNetworkArgs) ToClusterPublicNetworkOutputWithContext(ctx context.Context) ClusterPublicNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPublicNetworkOutput)
}

func (i ClusterPublicNetworkArgs) ToClusterPublicNetworkPtrOutput() ClusterPublicNetworkPtrOutput {
	return i.ToClusterPublicNetworkPtrOutputWithContext(context.Background())
}

func (i ClusterPublicNetworkArgs) ToClusterPublicNetworkPtrOutputWithContext(ctx context.Context) ClusterPublicNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPublicNetworkOutput).ToClusterPublicNetworkPtrOutputWithContext(ctx)
}

// ClusterPublicNetworkPtrInput is an input type that accepts ClusterPublicNetworkArgs, ClusterPublicNetworkPtr and ClusterPublicNetworkPtrOutput values.
// You can construct a concrete instance of `ClusterPublicNetworkPtrInput` via:
//
//	        ClusterPublicNetworkArgs{...}
//
//	or:
//
//	        nil
type ClusterPublicNetworkPtrInput interface {
	pulumi.Input

	ToClusterPublicNetworkPtrOutput() ClusterPublicNetworkPtrOutput
	ToClusterPublicNetworkPtrOutputWithContext(context.Context) ClusterPublicNetworkPtrOutput
}

type clusterPublicNetworkPtrType ClusterPublicNetworkArgs

func ClusterPublicNetworkPtr(v *ClusterPublicNetworkArgs) ClusterPublicNetworkPtrInput {
	return (*clusterPublicNetworkPtrType)(v)
}

func (*clusterPublicNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPublicNetwork)(nil)).Elem()
}

func (i *clusterPublicNetworkPtrType) ToClusterPublicNetworkPtrOutput() ClusterPublicNetworkPtrOutput {
	return i.ToClusterPublicNetworkPtrOutputWithContext(context.Background())
}

func (i *clusterPublicNetworkPtrType) ToClusterPublicNetworkPtrOutputWithContext(ctx context.Context) ClusterPublicNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPublicNetworkPtrOutput)
}

type ClusterPublicNetworkOutput struct{ *pulumi.OutputState }

func (ClusterPublicNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPublicNetwork)(nil)).Elem()
}

func (o ClusterPublicNetworkOutput) ToClusterPublicNetworkOutput() ClusterPublicNetworkOutput {
	return o
}

func (o ClusterPublicNetworkOutput) ToClusterPublicNetworkOutputWithContext(ctx context.Context) ClusterPublicNetworkOutput {
	return o
}

func (o ClusterPublicNetworkOutput) ToClusterPublicNetworkPtrOutput() ClusterPublicNetworkPtrOutput {
	return o.ToClusterPublicNetworkPtrOutputWithContext(context.Background())
}

func (o ClusterPublicNetworkOutput) ToClusterPublicNetworkPtrOutputWithContext(ctx context.Context) ClusterPublicNetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterPublicNetwork) *ClusterPublicNetwork {
		return &v
	}).(ClusterPublicNetworkPtrOutput)
}

// The ID of the IPv4 address resource.
func (o ClusterPublicNetworkOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPublicNetwork) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Lis of IPv4 address of the endpoint (IP address).
func (o ClusterPublicNetworkOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterPublicNetwork) []string { return v.Ips }).(pulumi.StringArrayOutput)
}

// TCP port of the endpoint.
func (o ClusterPublicNetworkOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterPublicNetwork) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type ClusterPublicNetworkPtrOutput struct{ *pulumi.OutputState }

func (ClusterPublicNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPublicNetwork)(nil)).Elem()
}

func (o ClusterPublicNetworkPtrOutput) ToClusterPublicNetworkPtrOutput() ClusterPublicNetworkPtrOutput {
	return o
}

func (o ClusterPublicNetworkPtrOutput) ToClusterPublicNetworkPtrOutputWithContext(ctx context.Context) ClusterPublicNetworkPtrOutput {
	return o
}

func (o ClusterPublicNetworkPtrOutput) Elem() ClusterPublicNetworkOutput {
	return o.ApplyT(func(v *ClusterPublicNetwork) ClusterPublicNetwork {
		if v != nil {
			return *v
		}
		var ret ClusterPublicNetwork
		return ret
	}).(ClusterPublicNetworkOutput)
}

// The ID of the IPv4 address resource.
func (o ClusterPublicNetworkPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPublicNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Lis of IPv4 address of the endpoint (IP address).
func (o ClusterPublicNetworkPtrOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterPublicNetwork) []string {
		if v == nil {
			return nil
		}
		return v.Ips
	}).(pulumi.StringArrayOutput)
}

// TCP port of the endpoint.
func (o ClusterPublicNetworkPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterPublicNetwork) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

type GetClusterAcl struct {
	// Description of the rule.
	Description string `pulumi:"description"`
	// The ID of the Redis cluster.
	Id string `pulumi:"id"`
	// IPv4 network address of the rule (IP network in a CIDR format).
	Ip string `pulumi:"ip"`
}

// GetClusterAclInput is an input type that accepts GetClusterAclArgs and GetClusterAclOutput values.
// You can construct a concrete instance of `GetClusterAclInput` via:
//
//	GetClusterAclArgs{...}
type GetClusterAclInput interface {
	pulumi.Input

	ToGetClusterAclOutput() GetClusterAclOutput
	ToGetClusterAclOutputWithContext(context.Context) GetClusterAclOutput
}

type GetClusterAclArgs struct {
	// Description of the rule.
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of the Redis cluster.
	Id pulumi.StringInput `pulumi:"id"`
	// IPv4 network address of the rule (IP network in a CIDR format).
	Ip pulumi.StringInput `pulumi:"ip"`
}

func (GetClusterAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterAcl)(nil)).Elem()
}

func (i GetClusterAclArgs) ToGetClusterAclOutput() GetClusterAclOutput {
	return i.ToGetClusterAclOutputWithContext(context.Background())
}

func (i GetClusterAclArgs) ToGetClusterAclOutputWithContext(ctx context.Context) GetClusterAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterAclOutput)
}

// GetClusterAclArrayInput is an input type that accepts GetClusterAclArray and GetClusterAclArrayOutput values.
// You can construct a concrete instance of `GetClusterAclArrayInput` via:
//
//	GetClusterAclArray{ GetClusterAclArgs{...} }
type GetClusterAclArrayInput interface {
	pulumi.Input

	ToGetClusterAclArrayOutput() GetClusterAclArrayOutput
	ToGetClusterAclArrayOutputWithContext(context.Context) GetClusterAclArrayOutput
}

type GetClusterAclArray []GetClusterAclInput

func (GetClusterAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterAcl)(nil)).Elem()
}

func (i GetClusterAclArray) ToGetClusterAclArrayOutput() GetClusterAclArrayOutput {
	return i.ToGetClusterAclArrayOutputWithContext(context.Background())
}

func (i GetClusterAclArray) ToGetClusterAclArrayOutputWithContext(ctx context.Context) GetClusterAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterAclArrayOutput)
}

type GetClusterAclOutput struct{ *pulumi.OutputState }

func (GetClusterAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterAcl)(nil)).Elem()
}

func (o GetClusterAclOutput) ToGetClusterAclOutput() GetClusterAclOutput {
	return o
}

func (o GetClusterAclOutput) ToGetClusterAclOutputWithContext(ctx context.Context) GetClusterAclOutput {
	return o
}

// Description of the rule.
func (o GetClusterAclOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterAcl) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of the Redis cluster.
func (o GetClusterAclOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterAcl) string { return v.Id }).(pulumi.StringOutput)
}

// IPv4 network address of the rule (IP network in a CIDR format).
func (o GetClusterAclOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterAcl) string { return v.Ip }).(pulumi.StringOutput)
}

type GetClusterAclArrayOutput struct{ *pulumi.OutputState }

func (GetClusterAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterAcl)(nil)).Elem()
}

func (o GetClusterAclArrayOutput) ToGetClusterAclArrayOutput() GetClusterAclArrayOutput {
	return o
}

func (o GetClusterAclArrayOutput) ToGetClusterAclArrayOutputWithContext(ctx context.Context) GetClusterAclArrayOutput {
	return o
}

func (o GetClusterAclArrayOutput) Index(i pulumi.IntInput) GetClusterAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterAcl {
		return vs[0].([]GetClusterAcl)[vs[1].(int)]
	}).(GetClusterAclOutput)
}

type GetClusterPrivateIp struct {
	// The private IPv4 address
	Address string `pulumi:"address"`
	// The ID of the Redis cluster.
	Id string `pulumi:"id"`
}

// GetClusterPrivateIpInput is an input type that accepts GetClusterPrivateIpArgs and GetClusterPrivateIpOutput values.
// You can construct a concrete instance of `GetClusterPrivateIpInput` via:
//
//	GetClusterPrivateIpArgs{...}
type GetClusterPrivateIpInput interface {
	pulumi.Input

	ToGetClusterPrivateIpOutput() GetClusterPrivateIpOutput
	ToGetClusterPrivateIpOutputWithContext(context.Context) GetClusterPrivateIpOutput
}

type GetClusterPrivateIpArgs struct {
	// The private IPv4 address
	Address pulumi.StringInput `pulumi:"address"`
	// The ID of the Redis cluster.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetClusterPrivateIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterPrivateIp)(nil)).Elem()
}

func (i GetClusterPrivateIpArgs) ToGetClusterPrivateIpOutput() GetClusterPrivateIpOutput {
	return i.ToGetClusterPrivateIpOutputWithContext(context.Background())
}

func (i GetClusterPrivateIpArgs) ToGetClusterPrivateIpOutputWithContext(ctx context.Context) GetClusterPrivateIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterPrivateIpOutput)
}

// GetClusterPrivateIpArrayInput is an input type that accepts GetClusterPrivateIpArray and GetClusterPrivateIpArrayOutput values.
// You can construct a concrete instance of `GetClusterPrivateIpArrayInput` via:
//
//	GetClusterPrivateIpArray{ GetClusterPrivateIpArgs{...} }
type GetClusterPrivateIpArrayInput interface {
	pulumi.Input

	ToGetClusterPrivateIpArrayOutput() GetClusterPrivateIpArrayOutput
	ToGetClusterPrivateIpArrayOutputWithContext(context.Context) GetClusterPrivateIpArrayOutput
}

type GetClusterPrivateIpArray []GetClusterPrivateIpInput

func (GetClusterPrivateIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterPrivateIp)(nil)).Elem()
}

func (i GetClusterPrivateIpArray) ToGetClusterPrivateIpArrayOutput() GetClusterPrivateIpArrayOutput {
	return i.ToGetClusterPrivateIpArrayOutputWithContext(context.Background())
}

func (i GetClusterPrivateIpArray) ToGetClusterPrivateIpArrayOutputWithContext(ctx context.Context) GetClusterPrivateIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterPrivateIpArrayOutput)
}

type GetClusterPrivateIpOutput struct{ *pulumi.OutputState }

func (GetClusterPrivateIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterPrivateIp)(nil)).Elem()
}

func (o GetClusterPrivateIpOutput) ToGetClusterPrivateIpOutput() GetClusterPrivateIpOutput {
	return o
}

func (o GetClusterPrivateIpOutput) ToGetClusterPrivateIpOutputWithContext(ctx context.Context) GetClusterPrivateIpOutput {
	return o
}

// The private IPv4 address
func (o GetClusterPrivateIpOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterPrivateIp) string { return v.Address }).(pulumi.StringOutput)
}

// The ID of the Redis cluster.
func (o GetClusterPrivateIpOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterPrivateIp) string { return v.Id }).(pulumi.StringOutput)
}

type GetClusterPrivateIpArrayOutput struct{ *pulumi.OutputState }

func (GetClusterPrivateIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterPrivateIp)(nil)).Elem()
}

func (o GetClusterPrivateIpArrayOutput) ToGetClusterPrivateIpArrayOutput() GetClusterPrivateIpArrayOutput {
	return o
}

func (o GetClusterPrivateIpArrayOutput) ToGetClusterPrivateIpArrayOutputWithContext(ctx context.Context) GetClusterPrivateIpArrayOutput {
	return o
}

func (o GetClusterPrivateIpArrayOutput) Index(i pulumi.IntInput) GetClusterPrivateIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterPrivateIp {
		return vs[0].([]GetClusterPrivateIp)[vs[1].(int)]
	}).(GetClusterPrivateIpOutput)
}

type GetClusterPrivateNetwork struct {
	// The ID of the endpoint.
	EndpointId string `pulumi:"endpointId"`
	// The ID of the Redis cluster.
	Id string `pulumi:"id"`
	// List of IPv4 addresses of the private network with a CIDR notation
	ServiceIps []string `pulumi:"serviceIps"`
	// `region`) The zone in which the server exists.
	Zone string `pulumi:"zone"`
}

// GetClusterPrivateNetworkInput is an input type that accepts GetClusterPrivateNetworkArgs and GetClusterPrivateNetworkOutput values.
// You can construct a concrete instance of `GetClusterPrivateNetworkInput` via:
//
//	GetClusterPrivateNetworkArgs{...}
type GetClusterPrivateNetworkInput interface {
	pulumi.Input

	ToGetClusterPrivateNetworkOutput() GetClusterPrivateNetworkOutput
	ToGetClusterPrivateNetworkOutputWithContext(context.Context) GetClusterPrivateNetworkOutput
}

type GetClusterPrivateNetworkArgs struct {
	// The ID of the endpoint.
	EndpointId pulumi.StringInput `pulumi:"endpointId"`
	// The ID of the Redis cluster.
	Id pulumi.StringInput `pulumi:"id"`
	// List of IPv4 addresses of the private network with a CIDR notation
	ServiceIps pulumi.StringArrayInput `pulumi:"serviceIps"`
	// `region`) The zone in which the server exists.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetClusterPrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterPrivateNetwork)(nil)).Elem()
}

func (i GetClusterPrivateNetworkArgs) ToGetClusterPrivateNetworkOutput() GetClusterPrivateNetworkOutput {
	return i.ToGetClusterPrivateNetworkOutputWithContext(context.Background())
}

func (i GetClusterPrivateNetworkArgs) ToGetClusterPrivateNetworkOutputWithContext(ctx context.Context) GetClusterPrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterPrivateNetworkOutput)
}

// GetClusterPrivateNetworkArrayInput is an input type that accepts GetClusterPrivateNetworkArray and GetClusterPrivateNetworkArrayOutput values.
// You can construct a concrete instance of `GetClusterPrivateNetworkArrayInput` via:
//
//	GetClusterPrivateNetworkArray{ GetClusterPrivateNetworkArgs{...} }
type GetClusterPrivateNetworkArrayInput interface {
	pulumi.Input

	ToGetClusterPrivateNetworkArrayOutput() GetClusterPrivateNetworkArrayOutput
	ToGetClusterPrivateNetworkArrayOutputWithContext(context.Context) GetClusterPrivateNetworkArrayOutput
}

type GetClusterPrivateNetworkArray []GetClusterPrivateNetworkInput

func (GetClusterPrivateNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterPrivateNetwork)(nil)).Elem()
}

func (i GetClusterPrivateNetworkArray) ToGetClusterPrivateNetworkArrayOutput() GetClusterPrivateNetworkArrayOutput {
	return i.ToGetClusterPrivateNetworkArrayOutputWithContext(context.Background())
}

func (i GetClusterPrivateNetworkArray) ToGetClusterPrivateNetworkArrayOutputWithContext(ctx context.Context) GetClusterPrivateNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterPrivateNetworkArrayOutput)
}

type GetClusterPrivateNetworkOutput struct{ *pulumi.OutputState }

func (GetClusterPrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterPrivateNetwork)(nil)).Elem()
}

func (o GetClusterPrivateNetworkOutput) ToGetClusterPrivateNetworkOutput() GetClusterPrivateNetworkOutput {
	return o
}

func (o GetClusterPrivateNetworkOutput) ToGetClusterPrivateNetworkOutputWithContext(ctx context.Context) GetClusterPrivateNetworkOutput {
	return o
}

// The ID of the endpoint.
func (o GetClusterPrivateNetworkOutput) EndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterPrivateNetwork) string { return v.EndpointId }).(pulumi.StringOutput)
}

// The ID of the Redis cluster.
func (o GetClusterPrivateNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterPrivateNetwork) string { return v.Id }).(pulumi.StringOutput)
}

// List of IPv4 addresses of the private network with a CIDR notation
func (o GetClusterPrivateNetworkOutput) ServiceIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetClusterPrivateNetwork) []string { return v.ServiceIps }).(pulumi.StringArrayOutput)
}

// `region`) The zone in which the server exists.
func (o GetClusterPrivateNetworkOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterPrivateNetwork) string { return v.Zone }).(pulumi.StringOutput)
}

type GetClusterPrivateNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetClusterPrivateNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterPrivateNetwork)(nil)).Elem()
}

func (o GetClusterPrivateNetworkArrayOutput) ToGetClusterPrivateNetworkArrayOutput() GetClusterPrivateNetworkArrayOutput {
	return o
}

func (o GetClusterPrivateNetworkArrayOutput) ToGetClusterPrivateNetworkArrayOutputWithContext(ctx context.Context) GetClusterPrivateNetworkArrayOutput {
	return o
}

func (o GetClusterPrivateNetworkArrayOutput) Index(i pulumi.IntInput) GetClusterPrivateNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterPrivateNetwork {
		return vs[0].([]GetClusterPrivateNetwork)[vs[1].(int)]
	}).(GetClusterPrivateNetworkOutput)
}

type GetClusterPublicNetwork struct {
	// The ID of the Redis cluster.
	Id  string   `pulumi:"id"`
	Ips []string `pulumi:"ips"`
	// TCP port of the endpoint
	Port int `pulumi:"port"`
}

// GetClusterPublicNetworkInput is an input type that accepts GetClusterPublicNetworkArgs and GetClusterPublicNetworkOutput values.
// You can construct a concrete instance of `GetClusterPublicNetworkInput` via:
//
//	GetClusterPublicNetworkArgs{...}
type GetClusterPublicNetworkInput interface {
	pulumi.Input

	ToGetClusterPublicNetworkOutput() GetClusterPublicNetworkOutput
	ToGetClusterPublicNetworkOutputWithContext(context.Context) GetClusterPublicNetworkOutput
}

type GetClusterPublicNetworkArgs struct {
	// The ID of the Redis cluster.
	Id  pulumi.StringInput      `pulumi:"id"`
	Ips pulumi.StringArrayInput `pulumi:"ips"`
	// TCP port of the endpoint
	Port pulumi.IntInput `pulumi:"port"`
}

func (GetClusterPublicNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterPublicNetwork)(nil)).Elem()
}

func (i GetClusterPublicNetworkArgs) ToGetClusterPublicNetworkOutput() GetClusterPublicNetworkOutput {
	return i.ToGetClusterPublicNetworkOutputWithContext(context.Background())
}

func (i GetClusterPublicNetworkArgs) ToGetClusterPublicNetworkOutputWithContext(ctx context.Context) GetClusterPublicNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterPublicNetworkOutput)
}

// GetClusterPublicNetworkArrayInput is an input type that accepts GetClusterPublicNetworkArray and GetClusterPublicNetworkArrayOutput values.
// You can construct a concrete instance of `GetClusterPublicNetworkArrayInput` via:
//
//	GetClusterPublicNetworkArray{ GetClusterPublicNetworkArgs{...} }
type GetClusterPublicNetworkArrayInput interface {
	pulumi.Input

	ToGetClusterPublicNetworkArrayOutput() GetClusterPublicNetworkArrayOutput
	ToGetClusterPublicNetworkArrayOutputWithContext(context.Context) GetClusterPublicNetworkArrayOutput
}

type GetClusterPublicNetworkArray []GetClusterPublicNetworkInput

func (GetClusterPublicNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterPublicNetwork)(nil)).Elem()
}

func (i GetClusterPublicNetworkArray) ToGetClusterPublicNetworkArrayOutput() GetClusterPublicNetworkArrayOutput {
	return i.ToGetClusterPublicNetworkArrayOutputWithContext(context.Background())
}

func (i GetClusterPublicNetworkArray) ToGetClusterPublicNetworkArrayOutputWithContext(ctx context.Context) GetClusterPublicNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterPublicNetworkArrayOutput)
}

type GetClusterPublicNetworkOutput struct{ *pulumi.OutputState }

func (GetClusterPublicNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterPublicNetwork)(nil)).Elem()
}

func (o GetClusterPublicNetworkOutput) ToGetClusterPublicNetworkOutput() GetClusterPublicNetworkOutput {
	return o
}

func (o GetClusterPublicNetworkOutput) ToGetClusterPublicNetworkOutputWithContext(ctx context.Context) GetClusterPublicNetworkOutput {
	return o
}

// The ID of the Redis cluster.
func (o GetClusterPublicNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterPublicNetwork) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetClusterPublicNetworkOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetClusterPublicNetwork) []string { return v.Ips }).(pulumi.StringArrayOutput)
}

// TCP port of the endpoint
func (o GetClusterPublicNetworkOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetClusterPublicNetwork) int { return v.Port }).(pulumi.IntOutput)
}

type GetClusterPublicNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetClusterPublicNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterPublicNetwork)(nil)).Elem()
}

func (o GetClusterPublicNetworkArrayOutput) ToGetClusterPublicNetworkArrayOutput() GetClusterPublicNetworkArrayOutput {
	return o
}

func (o GetClusterPublicNetworkArrayOutput) ToGetClusterPublicNetworkArrayOutputWithContext(ctx context.Context) GetClusterPublicNetworkArrayOutput {
	return o
}

func (o GetClusterPublicNetworkArrayOutput) Index(i pulumi.IntInput) GetClusterPublicNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterPublicNetwork {
		return vs[0].([]GetClusterPublicNetwork)[vs[1].(int)]
	}).(GetClusterPublicNetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAclInput)(nil)).Elem(), ClusterAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAclArrayInput)(nil)).Elem(), ClusterAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPrivateIpInput)(nil)).Elem(), ClusterPrivateIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPrivateIpArrayInput)(nil)).Elem(), ClusterPrivateIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPrivateNetworkInput)(nil)).Elem(), ClusterPrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPrivateNetworkArrayInput)(nil)).Elem(), ClusterPrivateNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPublicNetworkInput)(nil)).Elem(), ClusterPublicNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPublicNetworkPtrInput)(nil)).Elem(), ClusterPublicNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterAclInput)(nil)).Elem(), GetClusterAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterAclArrayInput)(nil)).Elem(), GetClusterAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterPrivateIpInput)(nil)).Elem(), GetClusterPrivateIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterPrivateIpArrayInput)(nil)).Elem(), GetClusterPrivateIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterPrivateNetworkInput)(nil)).Elem(), GetClusterPrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterPrivateNetworkArrayInput)(nil)).Elem(), GetClusterPrivateNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterPublicNetworkInput)(nil)).Elem(), GetClusterPublicNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterPublicNetworkArrayInput)(nil)).Elem(), GetClusterPublicNetworkArray{})
	pulumi.RegisterOutputType(ClusterAclOutput{})
	pulumi.RegisterOutputType(ClusterAclArrayOutput{})
	pulumi.RegisterOutputType(ClusterPrivateIpOutput{})
	pulumi.RegisterOutputType(ClusterPrivateIpArrayOutput{})
	pulumi.RegisterOutputType(ClusterPrivateNetworkOutput{})
	pulumi.RegisterOutputType(ClusterPrivateNetworkArrayOutput{})
	pulumi.RegisterOutputType(ClusterPublicNetworkOutput{})
	pulumi.RegisterOutputType(ClusterPublicNetworkPtrOutput{})
	pulumi.RegisterOutputType(GetClusterAclOutput{})
	pulumi.RegisterOutputType(GetClusterAclArrayOutput{})
	pulumi.RegisterOutputType(GetClusterPrivateIpOutput{})
	pulumi.RegisterOutputType(GetClusterPrivateIpArrayOutput{})
	pulumi.RegisterOutputType(GetClusterPrivateNetworkOutput{})
	pulumi.RegisterOutputType(GetClusterPrivateNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetClusterPublicNetworkOutput{})
	pulumi.RegisterOutputType(GetClusterPublicNetworkArrayOutput{})
}
