// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Redis Clusters.
// For more information, see [the documentation](https://developers.scaleway.com/en/products/redis/api/v1alpha1/).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewRedisCluster(ctx, "main", &scaleway.RedisClusterArgs{
//				Acls: scaleway.RedisClusterAclArray{
//					&scaleway.RedisClusterAclArgs{
//						Description: pulumi.String("Allow all"),
//						Ip:          pulumi.String("0.0.0.0/0"),
//					},
//				},
//				ClusterSize: pulumi.Int(1),
//				NodeType:    pulumi.String("RED1-MICRO"),
//				Password:    pulumi.String("thiZ_is_v&ry_s3cret"),
//				Tags: pulumi.StringArray{
//					pulumi.String("test"),
//					pulumi.String("redis"),
//				},
//				TlsEnabled: pulumi.Bool(true),
//				UserName:   pulumi.String("my_initial_user"),
//				Version:    pulumi.String("6.2.6"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With settings
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scaleway.NewRedisCluster(ctx, "main", &scaleway.RedisClusterArgs{
//				NodeType: pulumi.String("RED1-MICRO"),
//				Password: pulumi.String("thiZ_is_v&ry_s3cret"),
//				Settings: pulumi.StringMap{
//					"maxclients":    pulumi.String("1000"),
//					"tcp-keepalive": pulumi.String("120"),
//				},
//				UserName: pulumi.String("my_initial_user"),
//				Version:  pulumi.String("6.2.6"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With a private network
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			pn, err := scaleway.NewVpcPrivateNetwork(ctx, "pn", nil)
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewRedisCluster(ctx, "main", &scaleway.RedisClusterArgs{
//				Version:     pulumi.String("6.2.6"),
//				NodeType:    pulumi.String("RED1-MICRO"),
//				UserName:    pulumi.String("my_initial_user"),
//				Password:    pulumi.String("thiZ_is_v&ry_s3cret"),
//				ClusterSize: pulumi.Int(1),
//				PrivateNetworks: scaleway.RedisClusterPrivateNetworkArray{
//					&scaleway.RedisClusterPrivateNetworkArgs{
//						Id: pn.ID(),
//						ServiceIps: pulumi.StringArray{
//							pulumi.String("10.12.1.1/20"),
//						},
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				pn,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Redis Cluster can be imported using the `{zone}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/redisCluster:RedisCluster main fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type RedisCluster struct {
	pulumi.CustomResourceState

	// List of acl rules, this is cluster's authorized IPs. More details on the ACL section.
	Acls RedisClusterAclArrayOutput `pulumi:"acls"`
	// The PEM of the certificate used by redis, only when `tlsEnabled` is true
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// The number of nodes in the Redis Cluster.
	//
	// > **Important:** You cannot set `clusterSize` to 2, you either have to choose Standalone mode (1 node) or Cluster mode
	// which is minimum 3 (1 main node + 2 secondary nodes)
	//
	// > **Important:** If you are using the Cluster mode (>=3 nodes), you can set a bigger `clusterSize` than you initially
	// did, it will migrate the Redis Cluster but keep in mind that you cannot downgrade a Redis Cluster, so setting a smaller
	// `clusterSize` will destroy and recreate your Cluster.
	//
	// > **Important:** If you are using the Standalone mode (1 node), setting a bigger `clusterSize` will destroy and
	// recreate your Cluster as you will be switching to the Cluster mode.
	ClusterSize pulumi.IntOutput `pulumi:"clusterSize"`
	// The date and time of creation of the Redis Cluster.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The name of the Redis Cluster.
	Name pulumi.StringOutput `pulumi:"name"`
	// The type of Redis Cluster you want to create (e.g. `RED1-M`).
	//
	// > **Important:** Updates to `nodeType` will migrate the Redis Cluster to the desired `nodeType`. Keep in mind that
	// you cannot downgrade a Redis Cluster.
	NodeType pulumi.StringOutput `pulumi:"nodeType"`
	// Password for the first user of the Redis Cluster.
	Password pulumi.StringOutput `pulumi:"password"`
	// Describes the private network you want to connect to your cluster. If not set, a public
	// network will be provided. More details on the Private Network section
	PrivateNetworks RedisClusterPrivateNetworkArrayOutput `pulumi:"privateNetworks"`
	// `projectId`) The ID of the project the Redis Cluster is
	// associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// (Optional) Public network details. Only one of `privateNetwork` and `publicNetwork` may be set.
	// > The `publicNetwork` block exports:
	PublicNetwork RedisClusterPublicNetworkOutput `pulumi:"publicNetwork"`
	// Map of settings for redis cluster. Available settings can be found by listing redis versions
	// with scaleway API or CLI
	Settings pulumi.StringMapOutput `pulumi:"settings"`
	// The tags associated with the Redis Cluster.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Whether TLS is enabled or not.
	//
	// > The changes on `tlsEnabled` will force the resource creation.
	TlsEnabled pulumi.BoolPtrOutput `pulumi:"tlsEnabled"`
	// The date and time of the last update of the Redis Cluster.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// Identifier for the first user of the Redis Cluster.
	UserName pulumi.StringOutput `pulumi:"userName"`
	// Redis's Cluster version (e.g. `6.2.6`).
	//
	// > **Important:** Updates to `version` will migrate the Redis Cluster to the desired `version`. Keep in mind that you
	// cannot downgrade a Redis Cluster.
	Version pulumi.StringOutput `pulumi:"version"`
	// `zone`) The zone in which the
	// Redis Cluster should be created.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewRedisCluster registers a new resource with the given unique name, arguments, and options.
func NewRedisCluster(ctx *pulumi.Context,
	name string, args *RedisClusterArgs, opts ...pulumi.ResourceOption) (*RedisCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NodeType == nil {
		return nil, errors.New("invalid value for required argument 'NodeType'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RedisCluster
	err := ctx.RegisterResource("scaleway:index/redisCluster:RedisCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRedisCluster gets an existing RedisCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRedisCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RedisClusterState, opts ...pulumi.ResourceOption) (*RedisCluster, error) {
	var resource RedisCluster
	err := ctx.ReadResource("scaleway:index/redisCluster:RedisCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RedisCluster resources.
type redisClusterState struct {
	// List of acl rules, this is cluster's authorized IPs. More details on the ACL section.
	Acls []RedisClusterAcl `pulumi:"acls"`
	// The PEM of the certificate used by redis, only when `tlsEnabled` is true
	Certificate *string `pulumi:"certificate"`
	// The number of nodes in the Redis Cluster.
	//
	// > **Important:** You cannot set `clusterSize` to 2, you either have to choose Standalone mode (1 node) or Cluster mode
	// which is minimum 3 (1 main node + 2 secondary nodes)
	//
	// > **Important:** If you are using the Cluster mode (>=3 nodes), you can set a bigger `clusterSize` than you initially
	// did, it will migrate the Redis Cluster but keep in mind that you cannot downgrade a Redis Cluster, so setting a smaller
	// `clusterSize` will destroy and recreate your Cluster.
	//
	// > **Important:** If you are using the Standalone mode (1 node), setting a bigger `clusterSize` will destroy and
	// recreate your Cluster as you will be switching to the Cluster mode.
	ClusterSize *int `pulumi:"clusterSize"`
	// The date and time of creation of the Redis Cluster.
	CreatedAt *string `pulumi:"createdAt"`
	// The name of the Redis Cluster.
	Name *string `pulumi:"name"`
	// The type of Redis Cluster you want to create (e.g. `RED1-M`).
	//
	// > **Important:** Updates to `nodeType` will migrate the Redis Cluster to the desired `nodeType`. Keep in mind that
	// you cannot downgrade a Redis Cluster.
	NodeType *string `pulumi:"nodeType"`
	// Password for the first user of the Redis Cluster.
	Password *string `pulumi:"password"`
	// Describes the private network you want to connect to your cluster. If not set, a public
	// network will be provided. More details on the Private Network section
	PrivateNetworks []RedisClusterPrivateNetwork `pulumi:"privateNetworks"`
	// `projectId`) The ID of the project the Redis Cluster is
	// associated with.
	ProjectId *string `pulumi:"projectId"`
	// (Optional) Public network details. Only one of `privateNetwork` and `publicNetwork` may be set.
	// > The `publicNetwork` block exports:
	PublicNetwork *RedisClusterPublicNetwork `pulumi:"publicNetwork"`
	// Map of settings for redis cluster. Available settings can be found by listing redis versions
	// with scaleway API or CLI
	Settings map[string]string `pulumi:"settings"`
	// The tags associated with the Redis Cluster.
	Tags []string `pulumi:"tags"`
	// Whether TLS is enabled or not.
	//
	// > The changes on `tlsEnabled` will force the resource creation.
	TlsEnabled *bool `pulumi:"tlsEnabled"`
	// The date and time of the last update of the Redis Cluster.
	UpdatedAt *string `pulumi:"updatedAt"`
	// Identifier for the first user of the Redis Cluster.
	UserName *string `pulumi:"userName"`
	// Redis's Cluster version (e.g. `6.2.6`).
	//
	// > **Important:** Updates to `version` will migrate the Redis Cluster to the desired `version`. Keep in mind that you
	// cannot downgrade a Redis Cluster.
	Version *string `pulumi:"version"`
	// `zone`) The zone in which the
	// Redis Cluster should be created.
	Zone *string `pulumi:"zone"`
}

type RedisClusterState struct {
	// List of acl rules, this is cluster's authorized IPs. More details on the ACL section.
	Acls RedisClusterAclArrayInput
	// The PEM of the certificate used by redis, only when `tlsEnabled` is true
	Certificate pulumi.StringPtrInput
	// The number of nodes in the Redis Cluster.
	//
	// > **Important:** You cannot set `clusterSize` to 2, you either have to choose Standalone mode (1 node) or Cluster mode
	// which is minimum 3 (1 main node + 2 secondary nodes)
	//
	// > **Important:** If you are using the Cluster mode (>=3 nodes), you can set a bigger `clusterSize` than you initially
	// did, it will migrate the Redis Cluster but keep in mind that you cannot downgrade a Redis Cluster, so setting a smaller
	// `clusterSize` will destroy and recreate your Cluster.
	//
	// > **Important:** If you are using the Standalone mode (1 node), setting a bigger `clusterSize` will destroy and
	// recreate your Cluster as you will be switching to the Cluster mode.
	ClusterSize pulumi.IntPtrInput
	// The date and time of creation of the Redis Cluster.
	CreatedAt pulumi.StringPtrInput
	// The name of the Redis Cluster.
	Name pulumi.StringPtrInput
	// The type of Redis Cluster you want to create (e.g. `RED1-M`).
	//
	// > **Important:** Updates to `nodeType` will migrate the Redis Cluster to the desired `nodeType`. Keep in mind that
	// you cannot downgrade a Redis Cluster.
	NodeType pulumi.StringPtrInput
	// Password for the first user of the Redis Cluster.
	Password pulumi.StringPtrInput
	// Describes the private network you want to connect to your cluster. If not set, a public
	// network will be provided. More details on the Private Network section
	PrivateNetworks RedisClusterPrivateNetworkArrayInput
	// `projectId`) The ID of the project the Redis Cluster is
	// associated with.
	ProjectId pulumi.StringPtrInput
	// (Optional) Public network details. Only one of `privateNetwork` and `publicNetwork` may be set.
	// > The `publicNetwork` block exports:
	PublicNetwork RedisClusterPublicNetworkPtrInput
	// Map of settings for redis cluster. Available settings can be found by listing redis versions
	// with scaleway API or CLI
	Settings pulumi.StringMapInput
	// The tags associated with the Redis Cluster.
	Tags pulumi.StringArrayInput
	// Whether TLS is enabled or not.
	//
	// > The changes on `tlsEnabled` will force the resource creation.
	TlsEnabled pulumi.BoolPtrInput
	// The date and time of the last update of the Redis Cluster.
	UpdatedAt pulumi.StringPtrInput
	// Identifier for the first user of the Redis Cluster.
	UserName pulumi.StringPtrInput
	// Redis's Cluster version (e.g. `6.2.6`).
	//
	// > **Important:** Updates to `version` will migrate the Redis Cluster to the desired `version`. Keep in mind that you
	// cannot downgrade a Redis Cluster.
	Version pulumi.StringPtrInput
	// `zone`) The zone in which the
	// Redis Cluster should be created.
	Zone pulumi.StringPtrInput
}

func (RedisClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*redisClusterState)(nil)).Elem()
}

type redisClusterArgs struct {
	// List of acl rules, this is cluster's authorized IPs. More details on the ACL section.
	Acls []RedisClusterAcl `pulumi:"acls"`
	// The number of nodes in the Redis Cluster.
	//
	// > **Important:** You cannot set `clusterSize` to 2, you either have to choose Standalone mode (1 node) or Cluster mode
	// which is minimum 3 (1 main node + 2 secondary nodes)
	//
	// > **Important:** If you are using the Cluster mode (>=3 nodes), you can set a bigger `clusterSize` than you initially
	// did, it will migrate the Redis Cluster but keep in mind that you cannot downgrade a Redis Cluster, so setting a smaller
	// `clusterSize` will destroy and recreate your Cluster.
	//
	// > **Important:** If you are using the Standalone mode (1 node), setting a bigger `clusterSize` will destroy and
	// recreate your Cluster as you will be switching to the Cluster mode.
	ClusterSize *int `pulumi:"clusterSize"`
	// The name of the Redis Cluster.
	Name *string `pulumi:"name"`
	// The type of Redis Cluster you want to create (e.g. `RED1-M`).
	//
	// > **Important:** Updates to `nodeType` will migrate the Redis Cluster to the desired `nodeType`. Keep in mind that
	// you cannot downgrade a Redis Cluster.
	NodeType string `pulumi:"nodeType"`
	// Password for the first user of the Redis Cluster.
	Password string `pulumi:"password"`
	// Describes the private network you want to connect to your cluster. If not set, a public
	// network will be provided. More details on the Private Network section
	PrivateNetworks []RedisClusterPrivateNetwork `pulumi:"privateNetworks"`
	// `projectId`) The ID of the project the Redis Cluster is
	// associated with.
	ProjectId *string `pulumi:"projectId"`
	// (Optional) Public network details. Only one of `privateNetwork` and `publicNetwork` may be set.
	// > The `publicNetwork` block exports:
	PublicNetwork *RedisClusterPublicNetwork `pulumi:"publicNetwork"`
	// Map of settings for redis cluster. Available settings can be found by listing redis versions
	// with scaleway API or CLI
	Settings map[string]string `pulumi:"settings"`
	// The tags associated with the Redis Cluster.
	Tags []string `pulumi:"tags"`
	// Whether TLS is enabled or not.
	//
	// > The changes on `tlsEnabled` will force the resource creation.
	TlsEnabled *bool `pulumi:"tlsEnabled"`
	// Identifier for the first user of the Redis Cluster.
	UserName string `pulumi:"userName"`
	// Redis's Cluster version (e.g. `6.2.6`).
	//
	// > **Important:** Updates to `version` will migrate the Redis Cluster to the desired `version`. Keep in mind that you
	// cannot downgrade a Redis Cluster.
	Version string `pulumi:"version"`
	// `zone`) The zone in which the
	// Redis Cluster should be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a RedisCluster resource.
type RedisClusterArgs struct {
	// List of acl rules, this is cluster's authorized IPs. More details on the ACL section.
	Acls RedisClusterAclArrayInput
	// The number of nodes in the Redis Cluster.
	//
	// > **Important:** You cannot set `clusterSize` to 2, you either have to choose Standalone mode (1 node) or Cluster mode
	// which is minimum 3 (1 main node + 2 secondary nodes)
	//
	// > **Important:** If you are using the Cluster mode (>=3 nodes), you can set a bigger `clusterSize` than you initially
	// did, it will migrate the Redis Cluster but keep in mind that you cannot downgrade a Redis Cluster, so setting a smaller
	// `clusterSize` will destroy and recreate your Cluster.
	//
	// > **Important:** If you are using the Standalone mode (1 node), setting a bigger `clusterSize` will destroy and
	// recreate your Cluster as you will be switching to the Cluster mode.
	ClusterSize pulumi.IntPtrInput
	// The name of the Redis Cluster.
	Name pulumi.StringPtrInput
	// The type of Redis Cluster you want to create (e.g. `RED1-M`).
	//
	// > **Important:** Updates to `nodeType` will migrate the Redis Cluster to the desired `nodeType`. Keep in mind that
	// you cannot downgrade a Redis Cluster.
	NodeType pulumi.StringInput
	// Password for the first user of the Redis Cluster.
	Password pulumi.StringInput
	// Describes the private network you want to connect to your cluster. If not set, a public
	// network will be provided. More details on the Private Network section
	PrivateNetworks RedisClusterPrivateNetworkArrayInput
	// `projectId`) The ID of the project the Redis Cluster is
	// associated with.
	ProjectId pulumi.StringPtrInput
	// (Optional) Public network details. Only one of `privateNetwork` and `publicNetwork` may be set.
	// > The `publicNetwork` block exports:
	PublicNetwork RedisClusterPublicNetworkPtrInput
	// Map of settings for redis cluster. Available settings can be found by listing redis versions
	// with scaleway API or CLI
	Settings pulumi.StringMapInput
	// The tags associated with the Redis Cluster.
	Tags pulumi.StringArrayInput
	// Whether TLS is enabled or not.
	//
	// > The changes on `tlsEnabled` will force the resource creation.
	TlsEnabled pulumi.BoolPtrInput
	// Identifier for the first user of the Redis Cluster.
	UserName pulumi.StringInput
	// Redis's Cluster version (e.g. `6.2.6`).
	//
	// > **Important:** Updates to `version` will migrate the Redis Cluster to the desired `version`. Keep in mind that you
	// cannot downgrade a Redis Cluster.
	Version pulumi.StringInput
	// `zone`) The zone in which the
	// Redis Cluster should be created.
	Zone pulumi.StringPtrInput
}

func (RedisClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*redisClusterArgs)(nil)).Elem()
}

type RedisClusterInput interface {
	pulumi.Input

	ToRedisClusterOutput() RedisClusterOutput
	ToRedisClusterOutputWithContext(ctx context.Context) RedisClusterOutput
}

func (*RedisCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisCluster)(nil)).Elem()
}

func (i *RedisCluster) ToRedisClusterOutput() RedisClusterOutput {
	return i.ToRedisClusterOutputWithContext(context.Background())
}

func (i *RedisCluster) ToRedisClusterOutputWithContext(ctx context.Context) RedisClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterOutput)
}

// RedisClusterArrayInput is an input type that accepts RedisClusterArray and RedisClusterArrayOutput values.
// You can construct a concrete instance of `RedisClusterArrayInput` via:
//
//	RedisClusterArray{ RedisClusterArgs{...} }
type RedisClusterArrayInput interface {
	pulumi.Input

	ToRedisClusterArrayOutput() RedisClusterArrayOutput
	ToRedisClusterArrayOutputWithContext(context.Context) RedisClusterArrayOutput
}

type RedisClusterArray []RedisClusterInput

func (RedisClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RedisCluster)(nil)).Elem()
}

func (i RedisClusterArray) ToRedisClusterArrayOutput() RedisClusterArrayOutput {
	return i.ToRedisClusterArrayOutputWithContext(context.Background())
}

func (i RedisClusterArray) ToRedisClusterArrayOutputWithContext(ctx context.Context) RedisClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterArrayOutput)
}

// RedisClusterMapInput is an input type that accepts RedisClusterMap and RedisClusterMapOutput values.
// You can construct a concrete instance of `RedisClusterMapInput` via:
//
//	RedisClusterMap{ "key": RedisClusterArgs{...} }
type RedisClusterMapInput interface {
	pulumi.Input

	ToRedisClusterMapOutput() RedisClusterMapOutput
	ToRedisClusterMapOutputWithContext(context.Context) RedisClusterMapOutput
}

type RedisClusterMap map[string]RedisClusterInput

func (RedisClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RedisCluster)(nil)).Elem()
}

func (i RedisClusterMap) ToRedisClusterMapOutput() RedisClusterMapOutput {
	return i.ToRedisClusterMapOutputWithContext(context.Background())
}

func (i RedisClusterMap) ToRedisClusterMapOutputWithContext(ctx context.Context) RedisClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisClusterMapOutput)
}

type RedisClusterOutput struct{ *pulumi.OutputState }

func (RedisClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisCluster)(nil)).Elem()
}

func (o RedisClusterOutput) ToRedisClusterOutput() RedisClusterOutput {
	return o
}

func (o RedisClusterOutput) ToRedisClusterOutputWithContext(ctx context.Context) RedisClusterOutput {
	return o
}

// List of acl rules, this is cluster's authorized IPs. More details on the ACL section.
func (o RedisClusterOutput) Acls() RedisClusterAclArrayOutput {
	return o.ApplyT(func(v *RedisCluster) RedisClusterAclArrayOutput { return v.Acls }).(RedisClusterAclArrayOutput)
}

// The PEM of the certificate used by redis, only when `tlsEnabled` is true
func (o RedisClusterOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisCluster) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

// The number of nodes in the Redis Cluster.
//
// > **Important:** You cannot set `clusterSize` to 2, you either have to choose Standalone mode (1 node) or Cluster mode
// which is minimum 3 (1 main node + 2 secondary nodes)
//
// > **Important:** If you are using the Cluster mode (>=3 nodes), you can set a bigger `clusterSize` than you initially
// did, it will migrate the Redis Cluster but keep in mind that you cannot downgrade a Redis Cluster, so setting a smaller
// `clusterSize` will destroy and recreate your Cluster.
//
// > **Important:** If you are using the Standalone mode (1 node), setting a bigger `clusterSize` will destroy and
// recreate your Cluster as you will be switching to the Cluster mode.
func (o RedisClusterOutput) ClusterSize() pulumi.IntOutput {
	return o.ApplyT(func(v *RedisCluster) pulumi.IntOutput { return v.ClusterSize }).(pulumi.IntOutput)
}

// The date and time of creation of the Redis Cluster.
func (o RedisClusterOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisCluster) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The name of the Redis Cluster.
func (o RedisClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The type of Redis Cluster you want to create (e.g. `RED1-M`).
//
// > **Important:** Updates to `nodeType` will migrate the Redis Cluster to the desired `nodeType`. Keep in mind that
// you cannot downgrade a Redis Cluster.
func (o RedisClusterOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisCluster) pulumi.StringOutput { return v.NodeType }).(pulumi.StringOutput)
}

// Password for the first user of the Redis Cluster.
func (o RedisClusterOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisCluster) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Describes the private network you want to connect to your cluster. If not set, a public
// network will be provided. More details on the Private Network section
func (o RedisClusterOutput) PrivateNetworks() RedisClusterPrivateNetworkArrayOutput {
	return o.ApplyT(func(v *RedisCluster) RedisClusterPrivateNetworkArrayOutput { return v.PrivateNetworks }).(RedisClusterPrivateNetworkArrayOutput)
}

// `projectId`) The ID of the project the Redis Cluster is
// associated with.
func (o RedisClusterOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisCluster) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// (Optional) Public network details. Only one of `privateNetwork` and `publicNetwork` may be set.
// > The `publicNetwork` block exports:
func (o RedisClusterOutput) PublicNetwork() RedisClusterPublicNetworkOutput {
	return o.ApplyT(func(v *RedisCluster) RedisClusterPublicNetworkOutput { return v.PublicNetwork }).(RedisClusterPublicNetworkOutput)
}

// Map of settings for redis cluster. Available settings can be found by listing redis versions
// with scaleway API or CLI
func (o RedisClusterOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RedisCluster) pulumi.StringMapOutput { return v.Settings }).(pulumi.StringMapOutput)
}

// The tags associated with the Redis Cluster.
func (o RedisClusterOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RedisCluster) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Whether TLS is enabled or not.
//
// > The changes on `tlsEnabled` will force the resource creation.
func (o RedisClusterOutput) TlsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisCluster) pulumi.BoolPtrOutput { return v.TlsEnabled }).(pulumi.BoolPtrOutput)
}

// The date and time of the last update of the Redis Cluster.
func (o RedisClusterOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisCluster) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Identifier for the first user of the Redis Cluster.
func (o RedisClusterOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisCluster) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

// Redis's Cluster version (e.g. `6.2.6`).
//
// > **Important:** Updates to `version` will migrate the Redis Cluster to the desired `version`. Keep in mind that you
// cannot downgrade a Redis Cluster.
func (o RedisClusterOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisCluster) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// `zone`) The zone in which the
// Redis Cluster should be created.
func (o RedisClusterOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisCluster) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type RedisClusterArrayOutput struct{ *pulumi.OutputState }

func (RedisClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RedisCluster)(nil)).Elem()
}

func (o RedisClusterArrayOutput) ToRedisClusterArrayOutput() RedisClusterArrayOutput {
	return o
}

func (o RedisClusterArrayOutput) ToRedisClusterArrayOutputWithContext(ctx context.Context) RedisClusterArrayOutput {
	return o
}

func (o RedisClusterArrayOutput) Index(i pulumi.IntInput) RedisClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RedisCluster {
		return vs[0].([]*RedisCluster)[vs[1].(int)]
	}).(RedisClusterOutput)
}

type RedisClusterMapOutput struct{ *pulumi.OutputState }

func (RedisClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RedisCluster)(nil)).Elem()
}

func (o RedisClusterMapOutput) ToRedisClusterMapOutput() RedisClusterMapOutput {
	return o
}

func (o RedisClusterMapOutput) ToRedisClusterMapOutputWithContext(ctx context.Context) RedisClusterMapOutput {
	return o
}

func (o RedisClusterMapOutput) MapIndex(k pulumi.StringInput) RedisClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RedisCluster {
		return vs[0].(map[string]*RedisCluster)[vs[1].(string)]
	}).(RedisClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RedisClusterInput)(nil)).Elem(), &RedisCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisClusterArrayInput)(nil)).Elem(), RedisClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisClusterMapInput)(nil)).Elem(), RedisClusterMap{})
	pulumi.RegisterOutputType(RedisClusterOutput{})
	pulumi.RegisterOutputType(RedisClusterArrayOutput{})
	pulumi.RegisterOutputType(RedisClusterMapOutput{})
}
