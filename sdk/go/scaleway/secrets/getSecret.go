// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package secrets

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// The `secrets.Secret` data source is used to get information about a specific secret in Scaleway's Secret Manager.
//
// Refer to the Secret Manager [product documentation](https://www.scaleway.com/en/docs/identity-and-access-management/secret-manager/) and [API documentation](https://www.scaleway.com/en/developers/api/secret-manager/) for more information.
//
// ## Example Usage
//
// ### Create a secret and get its information
//
// The following commands allow you to:
//
// - create a secret named `foo` with the description `barr`
// - retrieve the secret's information using the secret's ID
// - retrieve the secret's information using the secret's name
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/secrets"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a secret
//			_, err := secrets.NewSecret(ctx, "main", &secrets.SecretArgs{
//				Name:        pulumi.String("foo"),
//				Description: pulumi.String("barr"),
//			})
//			if err != nil {
//				return err
//			}
//			// Get the secret information specified by the secret ID
//			_, err = secrets.LookupSecret(ctx, &secrets.LookupSecretArgs{
//				SecretId: pulumi.StringRef("11111111-1111-1111-1111-111111111111"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Get the secret information specified by the secret name
//			_, err = secrets.LookupSecret(ctx, &secrets.LookupSecretArgs{
//				Name: pulumi.StringRef("your_secret_name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSecret(ctx *pulumi.Context, args *LookupSecretArgs, opts ...pulumi.InvokeOption) (*LookupSecretResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSecretResult
	err := ctx.Invoke("scaleway:secrets/getSecret:getSecret", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecret.
type LookupSecretArgs struct {
	// The name of the secret.
	// Only one of `name` and `secretId` should be specified.
	Name *string `pulumi:"name"`
	// The ID of the Scaleway Organization the Project is associated with. If no default `organizationId` is set, it must be set explicitly in this data source.
	OrganizationId *string `pulumi:"organizationId"`
	// The path of the secret.
	// Conflicts with `secretId`.
	Path *string `pulumi:"path"`
	// ). The ID of the
	// Project the secret is associated with.
	ProjectId *string `pulumi:"projectId"`
	// ). The region in which the secret exists.
	Region *string `pulumi:"region"`
	// The ID of the secret.
	// Only one of `name` and `secretId` should be specified.
	SecretId *string `pulumi:"secretId"`
}

// A collection of values returned by getSecret.
type LookupSecretResult struct {
	CreatedAt         string                     `pulumi:"createdAt"`
	Description       string                     `pulumi:"description"`
	EphemeralPolicies []GetSecretEphemeralPolicy `pulumi:"ephemeralPolicies"`
	// The provider-assigned unique ID for this managed resource.
	Id             string   `pulumi:"id"`
	Name           *string  `pulumi:"name"`
	OrganizationId string   `pulumi:"organizationId"`
	Path           *string  `pulumi:"path"`
	ProjectId      *string  `pulumi:"projectId"`
	Protected      bool     `pulumi:"protected"`
	Region         *string  `pulumi:"region"`
	SecretId       *string  `pulumi:"secretId"`
	Status         string   `pulumi:"status"`
	Tags           []string `pulumi:"tags"`
	Type           string   `pulumi:"type"`
	UpdatedAt      string   `pulumi:"updatedAt"`
	VersionCount   int      `pulumi:"versionCount"`
}

func LookupSecretOutput(ctx *pulumi.Context, args LookupSecretOutputArgs, opts ...pulumi.InvokeOption) LookupSecretResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSecretResultOutput, error) {
			args := v.(LookupSecretArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("scaleway:secrets/getSecret:getSecret", args, LookupSecretResultOutput{}, options).(LookupSecretResultOutput), nil
		}).(LookupSecretResultOutput)
}

// A collection of arguments for invoking getSecret.
type LookupSecretOutputArgs struct {
	// The name of the secret.
	// Only one of `name` and `secretId` should be specified.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The ID of the Scaleway Organization the Project is associated with. If no default `organizationId` is set, it must be set explicitly in this data source.
	OrganizationId pulumi.StringPtrInput `pulumi:"organizationId"`
	// The path of the secret.
	// Conflicts with `secretId`.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// ). The ID of the
	// Project the secret is associated with.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// ). The region in which the secret exists.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The ID of the secret.
	// Only one of `name` and `secretId` should be specified.
	SecretId pulumi.StringPtrInput `pulumi:"secretId"`
}

func (LookupSecretOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecretArgs)(nil)).Elem()
}

// A collection of values returned by getSecret.
type LookupSecretResultOutput struct{ *pulumi.OutputState }

func (LookupSecretResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecretResult)(nil)).Elem()
}

func (o LookupSecretResultOutput) ToLookupSecretResultOutput() LookupSecretResultOutput {
	return o
}

func (o LookupSecretResultOutput) ToLookupSecretResultOutputWithContext(ctx context.Context) LookupSecretResultOutput {
	return o
}

func (o LookupSecretResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecretResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o LookupSecretResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecretResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupSecretResultOutput) EphemeralPolicies() GetSecretEphemeralPolicyArrayOutput {
	return o.ApplyT(func(v LookupSecretResult) []GetSecretEphemeralPolicy { return v.EphemeralPolicies }).(GetSecretEphemeralPolicyArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSecretResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecretResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSecretResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecretResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupSecretResultOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecretResult) string { return v.OrganizationId }).(pulumi.StringOutput)
}

func (o LookupSecretResultOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecretResult) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o LookupSecretResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecretResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

func (o LookupSecretResultOutput) Protected() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSecretResult) bool { return v.Protected }).(pulumi.BoolOutput)
}

func (o LookupSecretResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecretResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func (o LookupSecretResultOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecretResult) *string { return v.SecretId }).(pulumi.StringPtrOutput)
}

func (o LookupSecretResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecretResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o LookupSecretResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSecretResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o LookupSecretResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecretResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o LookupSecretResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecretResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func (o LookupSecretResultOutput) VersionCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSecretResult) int { return v.VersionCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSecretResultOutput{})
}
