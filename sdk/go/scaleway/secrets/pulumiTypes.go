// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package secrets

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

var _ = internal.GetEnvOrDefault

type SecretEphemeralPolicy struct {
	// Action to perform when the version of a secret expires. Available values can be found in [SDK constants](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/secret/v1beta1#pkg-constants).
	Action string `pulumi:"action"`
	// True if the secret version expires after a single user access.
	ExpiresOnceAccessed *bool `pulumi:"expiresOnceAccessed"`
	// Time frame, from one second and up to one year, during which the secret's versions are valid. Has to be specified in [Go Duration format](https://pkg.go.dev/time#ParseDuration) (ex: "30m", "24h").
	Ttl *string `pulumi:"ttl"`
}

// SecretEphemeralPolicyInput is an input type that accepts SecretEphemeralPolicyArgs and SecretEphemeralPolicyOutput values.
// You can construct a concrete instance of `SecretEphemeralPolicyInput` via:
//
//	SecretEphemeralPolicyArgs{...}
type SecretEphemeralPolicyInput interface {
	pulumi.Input

	ToSecretEphemeralPolicyOutput() SecretEphemeralPolicyOutput
	ToSecretEphemeralPolicyOutputWithContext(context.Context) SecretEphemeralPolicyOutput
}

type SecretEphemeralPolicyArgs struct {
	// Action to perform when the version of a secret expires. Available values can be found in [SDK constants](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/secret/v1beta1#pkg-constants).
	Action pulumi.StringInput `pulumi:"action"`
	// True if the secret version expires after a single user access.
	ExpiresOnceAccessed pulumi.BoolPtrInput `pulumi:"expiresOnceAccessed"`
	// Time frame, from one second and up to one year, during which the secret's versions are valid. Has to be specified in [Go Duration format](https://pkg.go.dev/time#ParseDuration) (ex: "30m", "24h").
	Ttl pulumi.StringPtrInput `pulumi:"ttl"`
}

func (SecretEphemeralPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretEphemeralPolicy)(nil)).Elem()
}

func (i SecretEphemeralPolicyArgs) ToSecretEphemeralPolicyOutput() SecretEphemeralPolicyOutput {
	return i.ToSecretEphemeralPolicyOutputWithContext(context.Background())
}

func (i SecretEphemeralPolicyArgs) ToSecretEphemeralPolicyOutputWithContext(ctx context.Context) SecretEphemeralPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretEphemeralPolicyOutput)
}

// SecretEphemeralPolicyArrayInput is an input type that accepts SecretEphemeralPolicyArray and SecretEphemeralPolicyArrayOutput values.
// You can construct a concrete instance of `SecretEphemeralPolicyArrayInput` via:
//
//	SecretEphemeralPolicyArray{ SecretEphemeralPolicyArgs{...} }
type SecretEphemeralPolicyArrayInput interface {
	pulumi.Input

	ToSecretEphemeralPolicyArrayOutput() SecretEphemeralPolicyArrayOutput
	ToSecretEphemeralPolicyArrayOutputWithContext(context.Context) SecretEphemeralPolicyArrayOutput
}

type SecretEphemeralPolicyArray []SecretEphemeralPolicyInput

func (SecretEphemeralPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretEphemeralPolicy)(nil)).Elem()
}

func (i SecretEphemeralPolicyArray) ToSecretEphemeralPolicyArrayOutput() SecretEphemeralPolicyArrayOutput {
	return i.ToSecretEphemeralPolicyArrayOutputWithContext(context.Background())
}

func (i SecretEphemeralPolicyArray) ToSecretEphemeralPolicyArrayOutputWithContext(ctx context.Context) SecretEphemeralPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretEphemeralPolicyArrayOutput)
}

type SecretEphemeralPolicyOutput struct{ *pulumi.OutputState }

func (SecretEphemeralPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretEphemeralPolicy)(nil)).Elem()
}

func (o SecretEphemeralPolicyOutput) ToSecretEphemeralPolicyOutput() SecretEphemeralPolicyOutput {
	return o
}

func (o SecretEphemeralPolicyOutput) ToSecretEphemeralPolicyOutputWithContext(ctx context.Context) SecretEphemeralPolicyOutput {
	return o
}

// Action to perform when the version of a secret expires. Available values can be found in [SDK constants](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/secret/v1beta1#pkg-constants).
func (o SecretEphemeralPolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v SecretEphemeralPolicy) string { return v.Action }).(pulumi.StringOutput)
}

// True if the secret version expires after a single user access.
func (o SecretEphemeralPolicyOutput) ExpiresOnceAccessed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretEphemeralPolicy) *bool { return v.ExpiresOnceAccessed }).(pulumi.BoolPtrOutput)
}

// Time frame, from one second and up to one year, during which the secret's versions are valid. Has to be specified in [Go Duration format](https://pkg.go.dev/time#ParseDuration) (ex: "30m", "24h").
func (o SecretEphemeralPolicyOutput) Ttl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretEphemeralPolicy) *string { return v.Ttl }).(pulumi.StringPtrOutput)
}

type SecretEphemeralPolicyArrayOutput struct{ *pulumi.OutputState }

func (SecretEphemeralPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretEphemeralPolicy)(nil)).Elem()
}

func (o SecretEphemeralPolicyArrayOutput) ToSecretEphemeralPolicyArrayOutput() SecretEphemeralPolicyArrayOutput {
	return o
}

func (o SecretEphemeralPolicyArrayOutput) ToSecretEphemeralPolicyArrayOutputWithContext(ctx context.Context) SecretEphemeralPolicyArrayOutput {
	return o
}

func (o SecretEphemeralPolicyArrayOutput) Index(i pulumi.IntInput) SecretEphemeralPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretEphemeralPolicy {
		return vs[0].([]SecretEphemeralPolicy)[vs[1].(int)]
	}).(SecretEphemeralPolicyOutput)
}

type GetSecretEphemeralPolicy struct {
	// Action to perform when the version of a secret expires.
	Action string `pulumi:"action"`
	// True if the secret version expires after a single user access.
	ExpiresOnceAccessed bool `pulumi:"expiresOnceAccessed"`
	// Time frame, from one second and up to one year, during which the secret's versions are valid. Has to be specified in Go Duration format
	Ttl string `pulumi:"ttl"`
}

// GetSecretEphemeralPolicyInput is an input type that accepts GetSecretEphemeralPolicyArgs and GetSecretEphemeralPolicyOutput values.
// You can construct a concrete instance of `GetSecretEphemeralPolicyInput` via:
//
//	GetSecretEphemeralPolicyArgs{...}
type GetSecretEphemeralPolicyInput interface {
	pulumi.Input

	ToGetSecretEphemeralPolicyOutput() GetSecretEphemeralPolicyOutput
	ToGetSecretEphemeralPolicyOutputWithContext(context.Context) GetSecretEphemeralPolicyOutput
}

type GetSecretEphemeralPolicyArgs struct {
	// Action to perform when the version of a secret expires.
	Action pulumi.StringInput `pulumi:"action"`
	// True if the secret version expires after a single user access.
	ExpiresOnceAccessed pulumi.BoolInput `pulumi:"expiresOnceAccessed"`
	// Time frame, from one second and up to one year, during which the secret's versions are valid. Has to be specified in Go Duration format
	Ttl pulumi.StringInput `pulumi:"ttl"`
}

func (GetSecretEphemeralPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretEphemeralPolicy)(nil)).Elem()
}

func (i GetSecretEphemeralPolicyArgs) ToGetSecretEphemeralPolicyOutput() GetSecretEphemeralPolicyOutput {
	return i.ToGetSecretEphemeralPolicyOutputWithContext(context.Background())
}

func (i GetSecretEphemeralPolicyArgs) ToGetSecretEphemeralPolicyOutputWithContext(ctx context.Context) GetSecretEphemeralPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretEphemeralPolicyOutput)
}

// GetSecretEphemeralPolicyArrayInput is an input type that accepts GetSecretEphemeralPolicyArray and GetSecretEphemeralPolicyArrayOutput values.
// You can construct a concrete instance of `GetSecretEphemeralPolicyArrayInput` via:
//
//	GetSecretEphemeralPolicyArray{ GetSecretEphemeralPolicyArgs{...} }
type GetSecretEphemeralPolicyArrayInput interface {
	pulumi.Input

	ToGetSecretEphemeralPolicyArrayOutput() GetSecretEphemeralPolicyArrayOutput
	ToGetSecretEphemeralPolicyArrayOutputWithContext(context.Context) GetSecretEphemeralPolicyArrayOutput
}

type GetSecretEphemeralPolicyArray []GetSecretEphemeralPolicyInput

func (GetSecretEphemeralPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretEphemeralPolicy)(nil)).Elem()
}

func (i GetSecretEphemeralPolicyArray) ToGetSecretEphemeralPolicyArrayOutput() GetSecretEphemeralPolicyArrayOutput {
	return i.ToGetSecretEphemeralPolicyArrayOutputWithContext(context.Background())
}

func (i GetSecretEphemeralPolicyArray) ToGetSecretEphemeralPolicyArrayOutputWithContext(ctx context.Context) GetSecretEphemeralPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretEphemeralPolicyArrayOutput)
}

type GetSecretEphemeralPolicyOutput struct{ *pulumi.OutputState }

func (GetSecretEphemeralPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretEphemeralPolicy)(nil)).Elem()
}

func (o GetSecretEphemeralPolicyOutput) ToGetSecretEphemeralPolicyOutput() GetSecretEphemeralPolicyOutput {
	return o
}

func (o GetSecretEphemeralPolicyOutput) ToGetSecretEphemeralPolicyOutputWithContext(ctx context.Context) GetSecretEphemeralPolicyOutput {
	return o
}

// Action to perform when the version of a secret expires.
func (o GetSecretEphemeralPolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretEphemeralPolicy) string { return v.Action }).(pulumi.StringOutput)
}

// True if the secret version expires after a single user access.
func (o GetSecretEphemeralPolicyOutput) ExpiresOnceAccessed() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSecretEphemeralPolicy) bool { return v.ExpiresOnceAccessed }).(pulumi.BoolOutput)
}

// Time frame, from one second and up to one year, during which the secret's versions are valid. Has to be specified in Go Duration format
func (o GetSecretEphemeralPolicyOutput) Ttl() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretEphemeralPolicy) string { return v.Ttl }).(pulumi.StringOutput)
}

type GetSecretEphemeralPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetSecretEphemeralPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretEphemeralPolicy)(nil)).Elem()
}

func (o GetSecretEphemeralPolicyArrayOutput) ToGetSecretEphemeralPolicyArrayOutput() GetSecretEphemeralPolicyArrayOutput {
	return o
}

func (o GetSecretEphemeralPolicyArrayOutput) ToGetSecretEphemeralPolicyArrayOutputWithContext(ctx context.Context) GetSecretEphemeralPolicyArrayOutput {
	return o
}

func (o GetSecretEphemeralPolicyArrayOutput) Index(i pulumi.IntInput) GetSecretEphemeralPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretEphemeralPolicy {
		return vs[0].([]GetSecretEphemeralPolicy)[vs[1].(int)]
	}).(GetSecretEphemeralPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretEphemeralPolicyInput)(nil)).Elem(), SecretEphemeralPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretEphemeralPolicyArrayInput)(nil)).Elem(), SecretEphemeralPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretEphemeralPolicyInput)(nil)).Elem(), GetSecretEphemeralPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretEphemeralPolicyArrayInput)(nil)).Elem(), GetSecretEphemeralPolicyArray{})
	pulumi.RegisterOutputType(SecretEphemeralPolicyOutput{})
	pulumi.RegisterOutputType(SecretEphemeralPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetSecretEphemeralPolicyOutput{})
	pulumi.RegisterOutputType(GetSecretEphemeralPolicyArrayOutput{})
}
