// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tem

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Transactional Email Domains.
// For more information refer to the [API documentation](https://www.scaleway.com/en/developers/api/transactional-email).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/tem"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tem.NewDomain(ctx, "main", &tem.DomainArgs{
//				AcceptTos: pulumi.Bool(true),
//				Name:      pulumi.String("example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Add the required records to your DNS zone
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/domain"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/tem"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			domainName := cfg.Require("domainName")
//			main, err := tem.NewDomain(ctx, "main", &tem.DomainArgs{
//				Name:      pulumi.String(domainName),
//				AcceptTos: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "spf", &domain.RecordArgs{
//				DnsZone: pulumi.String(domainName),
//				Type:    pulumi.String("TXT"),
//				Data: main.SpfConfig.ApplyT(func(spfConfig string) (string, error) {
//					return fmt.Sprintf("v=spf1 %v -all", spfConfig), nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "dkim", &domain.RecordArgs{
//				DnsZone: pulumi.String(domainName),
//				Name: main.ProjectId.ApplyT(func(projectId string) (string, error) {
//					return fmt.Sprintf("%v._domainkey", projectId), nil
//				}).(pulumi.StringOutput),
//				Type: pulumi.String("TXT"),
//				Data: main.DkimConfig,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "mx", &domain.RecordArgs{
//				DnsZone: pulumi.String(domainName),
//				Type:    pulumi.String("MX"),
//				Data:    pulumi.String("."),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "dmarc", &domain.RecordArgs{
//				DnsZone: pulumi.String(domainName),
//				Name:    main.DmarcName,
//				Type:    pulumi.String("TXT"),
//				Data:    main.DmarcConfig,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Automatically Configure DNS Settings for Your Domain
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/tem"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			domainName := cfg.Require("domainName")
//			_, err := tem.NewDomain(ctx, "main", &tem.DomainArgs{
//				Name:       pulumi.String(domainName),
//				AcceptTos:  pulumi.Bool(true),
//				Autoconfig: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Domains can be imported using the `{region}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:tem/domain:Domain main fr-par/11111111-1111-1111-1111-111111111111
// ```
type Domain struct {
	pulumi.CustomResourceState

	// Acceptation of the [Term of Service](https://tem.s3.fr-par.scw.cloud/antispam_policy.pdf).
	// > **Important:** This attribute must be set to `true`.
	AcceptTos pulumi.BoolOutput `pulumi:"acceptTos"`
	// Automatically configures DNS settings for the domain, simplifying the setup process by applying predefined configurations.
	Autoconfig pulumi.BoolPtrOutput `pulumi:"autoconfig"`
	// The date and time of the Transaction Email Domain's creation (RFC 3339 format).
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The DKIM public key, as should be recorded in the DNS zone.
	DkimConfig pulumi.StringOutput `pulumi:"dkimConfig"`
	// DMARC record for the domain, as should be recorded in the DNS zone.
	DmarcConfig pulumi.StringOutput `pulumi:"dmarcConfig"`
	// DMARC name for the domain, as should be recorded in the DNS zone.
	DmarcName pulumi.StringOutput `pulumi:"dmarcName"`
	// (Deprecated) The error message if the last check failed.
	//
	// Deprecated: last_error is deprecated
	LastError pulumi.StringOutput `pulumi:"lastError"`
	// The date and time the domain was last found to be valid (RFC 3339 format).
	LastValidAt pulumi.StringOutput `pulumi:"lastValidAt"`
	// The Scaleway's blackhole MX server to use if you do not have one.
	MxBlackhole pulumi.StringOutput `pulumi:"mxBlackhole"`
	// The domain name, must not be used in another Transactional Email Domain.
	// > **Important:** Updates to `name` will recreate the domain.
	Name pulumi.StringOutput `pulumi:"name"`
	// The date and time of the next scheduled check (RFC 3339 format).
	NextCheckAt pulumi.StringOutput `pulumi:"nextCheckAt"`
	// `projectId`) The ID of the project the domain is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// `region`). The region in which the domain should be created.
	// > **Important:** Currently, only fr-par is supported. Specifying any other region will cause an error.
	Region pulumi.StringOutput `pulumi:"region"`
	// The domain's reputation.
	Reputations DomainReputationArrayOutput `pulumi:"reputations"`
	// The date and time of the revocation of the domain (RFC 3339 format).
	RevokedAt pulumi.StringOutput `pulumi:"revokedAt"`
	// The SMTP host to use to send emails.
	SmtpHost pulumi.StringOutput `pulumi:"smtpHost"`
	// The SMTP port to use to send emails over TLS.
	SmtpPort pulumi.IntOutput `pulumi:"smtpPort"`
	// The SMTP port to use to send emails over TLS.
	SmtpPortAlternative pulumi.IntOutput `pulumi:"smtpPortAlternative"`
	// The SMTP port to use to send emails.
	SmtpPortUnsecure pulumi.IntOutput `pulumi:"smtpPortUnsecure"`
	// SMTPS auth user refers to the identifier for a user authorized to send emails via SMTPS, ensuring secure email transmission.
	SmtpsAuthUser pulumi.StringOutput `pulumi:"smtpsAuthUser"`
	// The SMTPS port to use to send emails over TLS Wrapper.
	SmtpsPort pulumi.IntOutput `pulumi:"smtpsPort"`
	// The SMTPS port to use to send emails over TLS Wrapper.
	SmtpsPortAlternative pulumi.IntOutput `pulumi:"smtpsPortAlternative"`
	// The snippet of the SPF record that should be registered in the DNS zone.
	SpfConfig pulumi.StringOutput `pulumi:"spfConfig"`
	// The status of the domain's reputation.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewDomain registers a new resource with the given unique name, arguments, and options.
func NewDomain(ctx *pulumi.Context,
	name string, args *DomainArgs, opts ...pulumi.ResourceOption) (*Domain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AcceptTos == nil {
		return nil, errors.New("invalid value for required argument 'AcceptTos'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/temDomain:TemDomain"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Domain
	err := ctx.RegisterResource("scaleway:tem/domain:Domain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomain gets an existing Domain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainState, opts ...pulumi.ResourceOption) (*Domain, error) {
	var resource Domain
	err := ctx.ReadResource("scaleway:tem/domain:Domain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Domain resources.
type domainState struct {
	// Acceptation of the [Term of Service](https://tem.s3.fr-par.scw.cloud/antispam_policy.pdf).
	// > **Important:** This attribute must be set to `true`.
	AcceptTos *bool `pulumi:"acceptTos"`
	// Automatically configures DNS settings for the domain, simplifying the setup process by applying predefined configurations.
	Autoconfig *bool `pulumi:"autoconfig"`
	// The date and time of the Transaction Email Domain's creation (RFC 3339 format).
	CreatedAt *string `pulumi:"createdAt"`
	// The DKIM public key, as should be recorded in the DNS zone.
	DkimConfig *string `pulumi:"dkimConfig"`
	// DMARC record for the domain, as should be recorded in the DNS zone.
	DmarcConfig *string `pulumi:"dmarcConfig"`
	// DMARC name for the domain, as should be recorded in the DNS zone.
	DmarcName *string `pulumi:"dmarcName"`
	// (Deprecated) The error message if the last check failed.
	//
	// Deprecated: last_error is deprecated
	LastError *string `pulumi:"lastError"`
	// The date and time the domain was last found to be valid (RFC 3339 format).
	LastValidAt *string `pulumi:"lastValidAt"`
	// The Scaleway's blackhole MX server to use if you do not have one.
	MxBlackhole *string `pulumi:"mxBlackhole"`
	// The domain name, must not be used in another Transactional Email Domain.
	// > **Important:** Updates to `name` will recreate the domain.
	Name *string `pulumi:"name"`
	// The date and time of the next scheduled check (RFC 3339 format).
	NextCheckAt *string `pulumi:"nextCheckAt"`
	// `projectId`) The ID of the project the domain is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region in which the domain should be created.
	// > **Important:** Currently, only fr-par is supported. Specifying any other region will cause an error.
	Region *string `pulumi:"region"`
	// The domain's reputation.
	Reputations []DomainReputation `pulumi:"reputations"`
	// The date and time of the revocation of the domain (RFC 3339 format).
	RevokedAt *string `pulumi:"revokedAt"`
	// The SMTP host to use to send emails.
	SmtpHost *string `pulumi:"smtpHost"`
	// The SMTP port to use to send emails over TLS.
	SmtpPort *int `pulumi:"smtpPort"`
	// The SMTP port to use to send emails over TLS.
	SmtpPortAlternative *int `pulumi:"smtpPortAlternative"`
	// The SMTP port to use to send emails.
	SmtpPortUnsecure *int `pulumi:"smtpPortUnsecure"`
	// SMTPS auth user refers to the identifier for a user authorized to send emails via SMTPS, ensuring secure email transmission.
	SmtpsAuthUser *string `pulumi:"smtpsAuthUser"`
	// The SMTPS port to use to send emails over TLS Wrapper.
	SmtpsPort *int `pulumi:"smtpsPort"`
	// The SMTPS port to use to send emails over TLS Wrapper.
	SmtpsPortAlternative *int `pulumi:"smtpsPortAlternative"`
	// The snippet of the SPF record that should be registered in the DNS zone.
	SpfConfig *string `pulumi:"spfConfig"`
	// The status of the domain's reputation.
	Status *string `pulumi:"status"`
}

type DomainState struct {
	// Acceptation of the [Term of Service](https://tem.s3.fr-par.scw.cloud/antispam_policy.pdf).
	// > **Important:** This attribute must be set to `true`.
	AcceptTos pulumi.BoolPtrInput
	// Automatically configures DNS settings for the domain, simplifying the setup process by applying predefined configurations.
	Autoconfig pulumi.BoolPtrInput
	// The date and time of the Transaction Email Domain's creation (RFC 3339 format).
	CreatedAt pulumi.StringPtrInput
	// The DKIM public key, as should be recorded in the DNS zone.
	DkimConfig pulumi.StringPtrInput
	// DMARC record for the domain, as should be recorded in the DNS zone.
	DmarcConfig pulumi.StringPtrInput
	// DMARC name for the domain, as should be recorded in the DNS zone.
	DmarcName pulumi.StringPtrInput
	// (Deprecated) The error message if the last check failed.
	//
	// Deprecated: last_error is deprecated
	LastError pulumi.StringPtrInput
	// The date and time the domain was last found to be valid (RFC 3339 format).
	LastValidAt pulumi.StringPtrInput
	// The Scaleway's blackhole MX server to use if you do not have one.
	MxBlackhole pulumi.StringPtrInput
	// The domain name, must not be used in another Transactional Email Domain.
	// > **Important:** Updates to `name` will recreate the domain.
	Name pulumi.StringPtrInput
	// The date and time of the next scheduled check (RFC 3339 format).
	NextCheckAt pulumi.StringPtrInput
	// `projectId`) The ID of the project the domain is associated with.
	ProjectId pulumi.StringPtrInput
	// `region`). The region in which the domain should be created.
	// > **Important:** Currently, only fr-par is supported. Specifying any other region will cause an error.
	Region pulumi.StringPtrInput
	// The domain's reputation.
	Reputations DomainReputationArrayInput
	// The date and time of the revocation of the domain (RFC 3339 format).
	RevokedAt pulumi.StringPtrInput
	// The SMTP host to use to send emails.
	SmtpHost pulumi.StringPtrInput
	// The SMTP port to use to send emails over TLS.
	SmtpPort pulumi.IntPtrInput
	// The SMTP port to use to send emails over TLS.
	SmtpPortAlternative pulumi.IntPtrInput
	// The SMTP port to use to send emails.
	SmtpPortUnsecure pulumi.IntPtrInput
	// SMTPS auth user refers to the identifier for a user authorized to send emails via SMTPS, ensuring secure email transmission.
	SmtpsAuthUser pulumi.StringPtrInput
	// The SMTPS port to use to send emails over TLS Wrapper.
	SmtpsPort pulumi.IntPtrInput
	// The SMTPS port to use to send emails over TLS Wrapper.
	SmtpsPortAlternative pulumi.IntPtrInput
	// The snippet of the SPF record that should be registered in the DNS zone.
	SpfConfig pulumi.StringPtrInput
	// The status of the domain's reputation.
	Status pulumi.StringPtrInput
}

func (DomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainState)(nil)).Elem()
}

type domainArgs struct {
	// Acceptation of the [Term of Service](https://tem.s3.fr-par.scw.cloud/antispam_policy.pdf).
	// > **Important:** This attribute must be set to `true`.
	AcceptTos bool `pulumi:"acceptTos"`
	// Automatically configures DNS settings for the domain, simplifying the setup process by applying predefined configurations.
	Autoconfig *bool `pulumi:"autoconfig"`
	// The domain name, must not be used in another Transactional Email Domain.
	// > **Important:** Updates to `name` will recreate the domain.
	Name *string `pulumi:"name"`
	// `projectId`) The ID of the project the domain is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region in which the domain should be created.
	// > **Important:** Currently, only fr-par is supported. Specifying any other region will cause an error.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a Domain resource.
type DomainArgs struct {
	// Acceptation of the [Term of Service](https://tem.s3.fr-par.scw.cloud/antispam_policy.pdf).
	// > **Important:** This attribute must be set to `true`.
	AcceptTos pulumi.BoolInput
	// Automatically configures DNS settings for the domain, simplifying the setup process by applying predefined configurations.
	Autoconfig pulumi.BoolPtrInput
	// The domain name, must not be used in another Transactional Email Domain.
	// > **Important:** Updates to `name` will recreate the domain.
	Name pulumi.StringPtrInput
	// `projectId`) The ID of the project the domain is associated with.
	ProjectId pulumi.StringPtrInput
	// `region`). The region in which the domain should be created.
	// > **Important:** Currently, only fr-par is supported. Specifying any other region will cause an error.
	Region pulumi.StringPtrInput
}

func (DomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainArgs)(nil)).Elem()
}

type DomainInput interface {
	pulumi.Input

	ToDomainOutput() DomainOutput
	ToDomainOutputWithContext(ctx context.Context) DomainOutput
}

func (*Domain) ElementType() reflect.Type {
	return reflect.TypeOf((**Domain)(nil)).Elem()
}

func (i *Domain) ToDomainOutput() DomainOutput {
	return i.ToDomainOutputWithContext(context.Background())
}

func (i *Domain) ToDomainOutputWithContext(ctx context.Context) DomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainOutput)
}

// DomainArrayInput is an input type that accepts DomainArray and DomainArrayOutput values.
// You can construct a concrete instance of `DomainArrayInput` via:
//
//	DomainArray{ DomainArgs{...} }
type DomainArrayInput interface {
	pulumi.Input

	ToDomainArrayOutput() DomainArrayOutput
	ToDomainArrayOutputWithContext(context.Context) DomainArrayOutput
}

type DomainArray []DomainInput

func (DomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Domain)(nil)).Elem()
}

func (i DomainArray) ToDomainArrayOutput() DomainArrayOutput {
	return i.ToDomainArrayOutputWithContext(context.Background())
}

func (i DomainArray) ToDomainArrayOutputWithContext(ctx context.Context) DomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainArrayOutput)
}

// DomainMapInput is an input type that accepts DomainMap and DomainMapOutput values.
// You can construct a concrete instance of `DomainMapInput` via:
//
//	DomainMap{ "key": DomainArgs{...} }
type DomainMapInput interface {
	pulumi.Input

	ToDomainMapOutput() DomainMapOutput
	ToDomainMapOutputWithContext(context.Context) DomainMapOutput
}

type DomainMap map[string]DomainInput

func (DomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Domain)(nil)).Elem()
}

func (i DomainMap) ToDomainMapOutput() DomainMapOutput {
	return i.ToDomainMapOutputWithContext(context.Background())
}

func (i DomainMap) ToDomainMapOutputWithContext(ctx context.Context) DomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainMapOutput)
}

type DomainOutput struct{ *pulumi.OutputState }

func (DomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Domain)(nil)).Elem()
}

func (o DomainOutput) ToDomainOutput() DomainOutput {
	return o
}

func (o DomainOutput) ToDomainOutputWithContext(ctx context.Context) DomainOutput {
	return o
}

// Acceptation of the [Term of Service](https://tem.s3.fr-par.scw.cloud/antispam_policy.pdf).
// > **Important:** This attribute must be set to `true`.
func (o DomainOutput) AcceptTos() pulumi.BoolOutput {
	return o.ApplyT(func(v *Domain) pulumi.BoolOutput { return v.AcceptTos }).(pulumi.BoolOutput)
}

// Automatically configures DNS settings for the domain, simplifying the setup process by applying predefined configurations.
func (o DomainOutput) Autoconfig() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Domain) pulumi.BoolPtrOutput { return v.Autoconfig }).(pulumi.BoolPtrOutput)
}

// The date and time of the Transaction Email Domain's creation (RFC 3339 format).
func (o DomainOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The DKIM public key, as should be recorded in the DNS zone.
func (o DomainOutput) DkimConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.DkimConfig }).(pulumi.StringOutput)
}

// DMARC record for the domain, as should be recorded in the DNS zone.
func (o DomainOutput) DmarcConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.DmarcConfig }).(pulumi.StringOutput)
}

// DMARC name for the domain, as should be recorded in the DNS zone.
func (o DomainOutput) DmarcName() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.DmarcName }).(pulumi.StringOutput)
}

// (Deprecated) The error message if the last check failed.
//
// Deprecated: last_error is deprecated
func (o DomainOutput) LastError() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.LastError }).(pulumi.StringOutput)
}

// The date and time the domain was last found to be valid (RFC 3339 format).
func (o DomainOutput) LastValidAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.LastValidAt }).(pulumi.StringOutput)
}

// The Scaleway's blackhole MX server to use if you do not have one.
func (o DomainOutput) MxBlackhole() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.MxBlackhole }).(pulumi.StringOutput)
}

// The domain name, must not be used in another Transactional Email Domain.
// > **Important:** Updates to `name` will recreate the domain.
func (o DomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The date and time of the next scheduled check (RFC 3339 format).
func (o DomainOutput) NextCheckAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.NextCheckAt }).(pulumi.StringOutput)
}

// `projectId`) The ID of the project the domain is associated with.
func (o DomainOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// `region`). The region in which the domain should be created.
// > **Important:** Currently, only fr-par is supported. Specifying any other region will cause an error.
func (o DomainOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The domain's reputation.
func (o DomainOutput) Reputations() DomainReputationArrayOutput {
	return o.ApplyT(func(v *Domain) DomainReputationArrayOutput { return v.Reputations }).(DomainReputationArrayOutput)
}

// The date and time of the revocation of the domain (RFC 3339 format).
func (o DomainOutput) RevokedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.RevokedAt }).(pulumi.StringOutput)
}

// The SMTP host to use to send emails.
func (o DomainOutput) SmtpHost() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.SmtpHost }).(pulumi.StringOutput)
}

// The SMTP port to use to send emails over TLS.
func (o DomainOutput) SmtpPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Domain) pulumi.IntOutput { return v.SmtpPort }).(pulumi.IntOutput)
}

// The SMTP port to use to send emails over TLS.
func (o DomainOutput) SmtpPortAlternative() pulumi.IntOutput {
	return o.ApplyT(func(v *Domain) pulumi.IntOutput { return v.SmtpPortAlternative }).(pulumi.IntOutput)
}

// The SMTP port to use to send emails.
func (o DomainOutput) SmtpPortUnsecure() pulumi.IntOutput {
	return o.ApplyT(func(v *Domain) pulumi.IntOutput { return v.SmtpPortUnsecure }).(pulumi.IntOutput)
}

// SMTPS auth user refers to the identifier for a user authorized to send emails via SMTPS, ensuring secure email transmission.
func (o DomainOutput) SmtpsAuthUser() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.SmtpsAuthUser }).(pulumi.StringOutput)
}

// The SMTPS port to use to send emails over TLS Wrapper.
func (o DomainOutput) SmtpsPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Domain) pulumi.IntOutput { return v.SmtpsPort }).(pulumi.IntOutput)
}

// The SMTPS port to use to send emails over TLS Wrapper.
func (o DomainOutput) SmtpsPortAlternative() pulumi.IntOutput {
	return o.ApplyT(func(v *Domain) pulumi.IntOutput { return v.SmtpsPortAlternative }).(pulumi.IntOutput)
}

// The snippet of the SPF record that should be registered in the DNS zone.
func (o DomainOutput) SpfConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.SpfConfig }).(pulumi.StringOutput)
}

// The status of the domain's reputation.
func (o DomainOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type DomainArrayOutput struct{ *pulumi.OutputState }

func (DomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Domain)(nil)).Elem()
}

func (o DomainArrayOutput) ToDomainArrayOutput() DomainArrayOutput {
	return o
}

func (o DomainArrayOutput) ToDomainArrayOutputWithContext(ctx context.Context) DomainArrayOutput {
	return o
}

func (o DomainArrayOutput) Index(i pulumi.IntInput) DomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Domain {
		return vs[0].([]*Domain)[vs[1].(int)]
	}).(DomainOutput)
}

type DomainMapOutput struct{ *pulumi.OutputState }

func (DomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Domain)(nil)).Elem()
}

func (o DomainMapOutput) ToDomainMapOutput() DomainMapOutput {
	return o
}

func (o DomainMapOutput) ToDomainMapOutputWithContext(ctx context.Context) DomainMapOutput {
	return o
}

func (o DomainMapOutput) MapIndex(k pulumi.StringInput) DomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Domain {
		return vs[0].(map[string]*Domain)[vs[1].(string)]
	}).(DomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainInput)(nil)).Elem(), &Domain{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainArrayInput)(nil)).Elem(), DomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainMapInput)(nil)).Elem(), DomainMap{})
	pulumi.RegisterOutputType(DomainOutput{})
	pulumi.RegisterOutputType(DomainArrayOutput{})
	pulumi.RegisterOutputType(DomainMapOutput{})
}
