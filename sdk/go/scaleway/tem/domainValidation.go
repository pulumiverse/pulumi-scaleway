// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tem

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/tem"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := tem.NewDomain(ctx, "main", &tem.DomainArgs{
//				AcceptTos: pulumi.Bool(true),
//				Name:      pulumi.String("example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = tem.NewDomainValidation(ctx, "example", &tem.DomainValidationArgs{
//				DomainId: main.ID(),
//				Region:   pulumi.String("fr-par"),
//				Timeout:  pulumi.Int(300),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DomainValidation struct {
	pulumi.CustomResourceState

	// The ID of the domain name used when sending emails. This ID must correspond to a domain already registered with Scaleway's Transactional Email service.
	DomainId pulumi.StringOutput `pulumi:"domainId"`
	// `region`). Specifies the region where the domain is registered. If not specified, it defaults to the provider's region.
	Region pulumi.StringOutput `pulumi:"region"`
	// The maximum wait time in seconds before returning an error if the domain validation does not complete. The default is 300 seconds.
	Timeout pulumi.IntPtrOutput `pulumi:"timeout"`
	// Indicates if the domain has been verified for email sending. This is computed after the creation or update of the domain validation resource.
	Validated pulumi.BoolOutput `pulumi:"validated"`
}

// NewDomainValidation registers a new resource with the given unique name, arguments, and options.
func NewDomainValidation(ctx *pulumi.Context,
	name string, args *DomainValidationArgs, opts ...pulumi.ResourceOption) (*DomainValidation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainId == nil {
		return nil, errors.New("invalid value for required argument 'DomainId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("scaleway:index/temDomainValidation:TemDomainValidation"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainValidation
	err := ctx.RegisterResource("scaleway:tem/domainValidation:DomainValidation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainValidation gets an existing DomainValidation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainValidation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainValidationState, opts ...pulumi.ResourceOption) (*DomainValidation, error) {
	var resource DomainValidation
	err := ctx.ReadResource("scaleway:tem/domainValidation:DomainValidation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainValidation resources.
type domainValidationState struct {
	// The ID of the domain name used when sending emails. This ID must correspond to a domain already registered with Scaleway's Transactional Email service.
	DomainId *string `pulumi:"domainId"`
	// `region`). Specifies the region where the domain is registered. If not specified, it defaults to the provider's region.
	Region *string `pulumi:"region"`
	// The maximum wait time in seconds before returning an error if the domain validation does not complete. The default is 300 seconds.
	Timeout *int `pulumi:"timeout"`
	// Indicates if the domain has been verified for email sending. This is computed after the creation or update of the domain validation resource.
	Validated *bool `pulumi:"validated"`
}

type DomainValidationState struct {
	// The ID of the domain name used when sending emails. This ID must correspond to a domain already registered with Scaleway's Transactional Email service.
	DomainId pulumi.StringPtrInput
	// `region`). Specifies the region where the domain is registered. If not specified, it defaults to the provider's region.
	Region pulumi.StringPtrInput
	// The maximum wait time in seconds before returning an error if the domain validation does not complete. The default is 300 seconds.
	Timeout pulumi.IntPtrInput
	// Indicates if the domain has been verified for email sending. This is computed after the creation or update of the domain validation resource.
	Validated pulumi.BoolPtrInput
}

func (DomainValidationState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainValidationState)(nil)).Elem()
}

type domainValidationArgs struct {
	// The ID of the domain name used when sending emails. This ID must correspond to a domain already registered with Scaleway's Transactional Email service.
	DomainId string `pulumi:"domainId"`
	// `region`). Specifies the region where the domain is registered. If not specified, it defaults to the provider's region.
	Region *string `pulumi:"region"`
	// The maximum wait time in seconds before returning an error if the domain validation does not complete. The default is 300 seconds.
	Timeout *int `pulumi:"timeout"`
}

// The set of arguments for constructing a DomainValidation resource.
type DomainValidationArgs struct {
	// The ID of the domain name used when sending emails. This ID must correspond to a domain already registered with Scaleway's Transactional Email service.
	DomainId pulumi.StringInput
	// `region`). Specifies the region where the domain is registered. If not specified, it defaults to the provider's region.
	Region pulumi.StringPtrInput
	// The maximum wait time in seconds before returning an error if the domain validation does not complete. The default is 300 seconds.
	Timeout pulumi.IntPtrInput
}

func (DomainValidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainValidationArgs)(nil)).Elem()
}

type DomainValidationInput interface {
	pulumi.Input

	ToDomainValidationOutput() DomainValidationOutput
	ToDomainValidationOutputWithContext(ctx context.Context) DomainValidationOutput
}

func (*DomainValidation) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainValidation)(nil)).Elem()
}

func (i *DomainValidation) ToDomainValidationOutput() DomainValidationOutput {
	return i.ToDomainValidationOutputWithContext(context.Background())
}

func (i *DomainValidation) ToDomainValidationOutputWithContext(ctx context.Context) DomainValidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainValidationOutput)
}

// DomainValidationArrayInput is an input type that accepts DomainValidationArray and DomainValidationArrayOutput values.
// You can construct a concrete instance of `DomainValidationArrayInput` via:
//
//	DomainValidationArray{ DomainValidationArgs{...} }
type DomainValidationArrayInput interface {
	pulumi.Input

	ToDomainValidationArrayOutput() DomainValidationArrayOutput
	ToDomainValidationArrayOutputWithContext(context.Context) DomainValidationArrayOutput
}

type DomainValidationArray []DomainValidationInput

func (DomainValidationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainValidation)(nil)).Elem()
}

func (i DomainValidationArray) ToDomainValidationArrayOutput() DomainValidationArrayOutput {
	return i.ToDomainValidationArrayOutputWithContext(context.Background())
}

func (i DomainValidationArray) ToDomainValidationArrayOutputWithContext(ctx context.Context) DomainValidationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainValidationArrayOutput)
}

// DomainValidationMapInput is an input type that accepts DomainValidationMap and DomainValidationMapOutput values.
// You can construct a concrete instance of `DomainValidationMapInput` via:
//
//	DomainValidationMap{ "key": DomainValidationArgs{...} }
type DomainValidationMapInput interface {
	pulumi.Input

	ToDomainValidationMapOutput() DomainValidationMapOutput
	ToDomainValidationMapOutputWithContext(context.Context) DomainValidationMapOutput
}

type DomainValidationMap map[string]DomainValidationInput

func (DomainValidationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainValidation)(nil)).Elem()
}

func (i DomainValidationMap) ToDomainValidationMapOutput() DomainValidationMapOutput {
	return i.ToDomainValidationMapOutputWithContext(context.Background())
}

func (i DomainValidationMap) ToDomainValidationMapOutputWithContext(ctx context.Context) DomainValidationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainValidationMapOutput)
}

type DomainValidationOutput struct{ *pulumi.OutputState }

func (DomainValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainValidation)(nil)).Elem()
}

func (o DomainValidationOutput) ToDomainValidationOutput() DomainValidationOutput {
	return o
}

func (o DomainValidationOutput) ToDomainValidationOutputWithContext(ctx context.Context) DomainValidationOutput {
	return o
}

// The ID of the domain name used when sending emails. This ID must correspond to a domain already registered with Scaleway's Transactional Email service.
func (o DomainValidationOutput) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainValidation) pulumi.StringOutput { return v.DomainId }).(pulumi.StringOutput)
}

// `region`). Specifies the region where the domain is registered. If not specified, it defaults to the provider's region.
func (o DomainValidationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainValidation) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The maximum wait time in seconds before returning an error if the domain validation does not complete. The default is 300 seconds.
func (o DomainValidationOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainValidation) pulumi.IntPtrOutput { return v.Timeout }).(pulumi.IntPtrOutput)
}

// Indicates if the domain has been verified for email sending. This is computed after the creation or update of the domain validation resource.
func (o DomainValidationOutput) Validated() pulumi.BoolOutput {
	return o.ApplyT(func(v *DomainValidation) pulumi.BoolOutput { return v.Validated }).(pulumi.BoolOutput)
}

type DomainValidationArrayOutput struct{ *pulumi.OutputState }

func (DomainValidationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainValidation)(nil)).Elem()
}

func (o DomainValidationArrayOutput) ToDomainValidationArrayOutput() DomainValidationArrayOutput {
	return o
}

func (o DomainValidationArrayOutput) ToDomainValidationArrayOutputWithContext(ctx context.Context) DomainValidationArrayOutput {
	return o
}

func (o DomainValidationArrayOutput) Index(i pulumi.IntInput) DomainValidationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DomainValidation {
		return vs[0].([]*DomainValidation)[vs[1].(int)]
	}).(DomainValidationOutput)
}

type DomainValidationMapOutput struct{ *pulumi.OutputState }

func (DomainValidationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainValidation)(nil)).Elem()
}

func (o DomainValidationMapOutput) ToDomainValidationMapOutput() DomainValidationMapOutput {
	return o
}

func (o DomainValidationMapOutput) ToDomainValidationMapOutputWithContext(ctx context.Context) DomainValidationMapOutput {
	return o
}

func (o DomainValidationMapOutput) MapIndex(k pulumi.StringInput) DomainValidationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DomainValidation {
		return vs[0].(map[string]*DomainValidation)[vs[1].(string)]
	}).(DomainValidationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainValidationInput)(nil)).Elem(), &DomainValidation{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainValidationArrayInput)(nil)).Elem(), DomainValidationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainValidationMapInput)(nil)).Elem(), DomainValidationMap{})
	pulumi.RegisterOutputType(DomainValidationOutput{})
	pulumi.RegisterOutputType(DomainValidationArrayOutput{})
	pulumi.RegisterOutputType(DomainValidationMapOutput{})
}
