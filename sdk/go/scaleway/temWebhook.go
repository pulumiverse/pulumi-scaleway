// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Transactional Email Webhooks.
// For more information, refer to the [API documentation](https://www.scaleway.com/en/developers/api/transactional-email).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/tem"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tem.NewWebhook(ctx, "main", &tem.WebhookArgs{
//				DomainId: pulumi.String("your-domain-id"),
//				EventTypes: pulumi.StringArray{
//					pulumi.String("email_delivered"),
//					pulumi.String("email_bounced"),
//				},
//				SnsArn: pulumi.String("arn:scw:sns:fr-par:project-xxxx:your-sns-topic"),
//				Name:   pulumi.String("example-webhook"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Complete Example with Dependencies
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/domain"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/mnq"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/tem"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			domainName := cfg.Require("domainName")
//			_, err := mnq.NewSns(ctx, "sns", nil)
//			if err != nil {
//				return err
//			}
//			snsCredentials, err := mnq.NewSnsCredentials(ctx, "sns_credentials", &mnq.SnsCredentialsArgs{
//				Permissions: &mnq.SnsCredentialsPermissionsArgs{
//					CanManage: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			snsTopic, err := mnq.NewSnsTopic(ctx, "sns_topic", &mnq.SnsTopicArgs{
//				Name:      pulumi.String("test-mnq-sns-topic-basic"),
//				AccessKey: snsCredentials.AccessKey,
//				SecretKey: snsCredentials.SecretKey,
//			})
//			if err != nil {
//				return err
//			}
//			cr01, err := tem.NewDomain(ctx, "cr01", &tem.DomainArgs{
//				Name:      pulumi.String(domainName),
//				AcceptTos: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "spf", &domain.RecordArgs{
//				DnsZone: pulumi.String(domainName),
//				Type:    pulumi.String("TXT"),
//				Data: cr01.SpfConfig.ApplyT(func(spfConfig string) (string, error) {
//					return fmt.Sprintf("v=spf1 %v -all", spfConfig), nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "dkim", &domain.RecordArgs{
//				DnsZone: pulumi.String(domainName),
//				Name: cr01.ProjectId.ApplyT(func(projectId string) (string, error) {
//					return fmt.Sprintf("%v._domainkey", projectId), nil
//				}).(pulumi.StringOutput),
//				Type: pulumi.String("TXT"),
//				Data: cr01.DkimConfig,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "mx", &domain.RecordArgs{
//				DnsZone: pulumi.String(domainName),
//				Type:    pulumi.String("MX"),
//				Data:    pulumi.String("."),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domain.NewRecord(ctx, "dmarc", &domain.RecordArgs{
//				DnsZone: pulumi.String(domainName),
//				Name:    cr01.DmarcName,
//				Type:    pulumi.String("TXT"),
//				Data:    cr01.DmarcConfig,
//			})
//			if err != nil {
//				return err
//			}
//			valid, err := tem.NewDomainValidation(ctx, "valid", &tem.DomainValidationArgs{
//				DomainId: cr01.ID(),
//				Region:   cr01.Region,
//				Timeout:  pulumi.Int(3600),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = tem.NewWebhook(ctx, "webhook", &tem.WebhookArgs{
//				Name:     pulumi.String("example-webhook"),
//				DomainId: cr01.ID(),
//				EventTypes: pulumi.StringArray{
//					pulumi.String("email_delivered"),
//					pulumi.String("email_bounced"),
//				},
//				SnsArn: snsTopic.Arn,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				valid,
//				snsTopic,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Webhooks can be imported using the {region}/{id}, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/temWebhook:TemWebhook main fr-par/11111111-1111-1111-1111-111111111111
// ```
//
// Deprecated: scaleway.index/temwebhook.TemWebhook has been deprecated in favor of scaleway.tem/webhook.Webhook
type TemWebhook struct {
	pulumi.CustomResourceState

	// The date and time of the webhook's creation (RFC 3339 format).
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The ID of the domain the webhook is associated with.
	DomainId pulumi.StringOutput `pulumi:"domainId"`
	// A list of event types that trigger the webhook.
	EventTypes pulumi.StringArrayOutput `pulumi:"eventTypes"`
	// The name of the webhook. Defaults to an autogenerated name if not provided.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the organization the webhook belongs to.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The ID of the project the webhook is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// . The region in which the webhook should be created.
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// The Amazon Resource Name (ARN) of the SNS topic.
	SnsArn pulumi.StringOutput `pulumi:"snsArn"`
	// The date and time of the webhook's last update (RFC 3339 format).
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewTemWebhook registers a new resource with the given unique name, arguments, and options.
func NewTemWebhook(ctx *pulumi.Context,
	name string, args *TemWebhookArgs, opts ...pulumi.ResourceOption) (*TemWebhook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainId == nil {
		return nil, errors.New("invalid value for required argument 'DomainId'")
	}
	if args.EventTypes == nil {
		return nil, errors.New("invalid value for required argument 'EventTypes'")
	}
	if args.SnsArn == nil {
		return nil, errors.New("invalid value for required argument 'SnsArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TemWebhook
	err := ctx.RegisterResource("scaleway:index/temWebhook:TemWebhook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTemWebhook gets an existing TemWebhook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTemWebhook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TemWebhookState, opts ...pulumi.ResourceOption) (*TemWebhook, error) {
	var resource TemWebhook
	err := ctx.ReadResource("scaleway:index/temWebhook:TemWebhook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TemWebhook resources.
type temWebhookState struct {
	// The date and time of the webhook's creation (RFC 3339 format).
	CreatedAt *string `pulumi:"createdAt"`
	// The ID of the domain the webhook is associated with.
	DomainId *string `pulumi:"domainId"`
	// A list of event types that trigger the webhook.
	EventTypes []string `pulumi:"eventTypes"`
	// The name of the webhook. Defaults to an autogenerated name if not provided.
	Name *string `pulumi:"name"`
	// The ID of the organization the webhook belongs to.
	OrganizationId *string `pulumi:"organizationId"`
	// The ID of the project the webhook is associated with.
	ProjectId *string `pulumi:"projectId"`
	// . The region in which the webhook should be created.
	Region *string `pulumi:"region"`
	// The Amazon Resource Name (ARN) of the SNS topic.
	SnsArn *string `pulumi:"snsArn"`
	// The date and time of the webhook's last update (RFC 3339 format).
	UpdatedAt *string `pulumi:"updatedAt"`
}

type TemWebhookState struct {
	// The date and time of the webhook's creation (RFC 3339 format).
	CreatedAt pulumi.StringPtrInput
	// The ID of the domain the webhook is associated with.
	DomainId pulumi.StringPtrInput
	// A list of event types that trigger the webhook.
	EventTypes pulumi.StringArrayInput
	// The name of the webhook. Defaults to an autogenerated name if not provided.
	Name pulumi.StringPtrInput
	// The ID of the organization the webhook belongs to.
	OrganizationId pulumi.StringPtrInput
	// The ID of the project the webhook is associated with.
	ProjectId pulumi.StringPtrInput
	// . The region in which the webhook should be created.
	Region pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the SNS topic.
	SnsArn pulumi.StringPtrInput
	// The date and time of the webhook's last update (RFC 3339 format).
	UpdatedAt pulumi.StringPtrInput
}

func (TemWebhookState) ElementType() reflect.Type {
	return reflect.TypeOf((*temWebhookState)(nil)).Elem()
}

type temWebhookArgs struct {
	// The ID of the domain the webhook is associated with.
	DomainId string `pulumi:"domainId"`
	// A list of event types that trigger the webhook.
	EventTypes []string `pulumi:"eventTypes"`
	// The name of the webhook. Defaults to an autogenerated name if not provided.
	Name *string `pulumi:"name"`
	// The ID of the project the webhook is associated with.
	ProjectId *string `pulumi:"projectId"`
	// . The region in which the webhook should be created.
	Region *string `pulumi:"region"`
	// The Amazon Resource Name (ARN) of the SNS topic.
	SnsArn string `pulumi:"snsArn"`
}

// The set of arguments for constructing a TemWebhook resource.
type TemWebhookArgs struct {
	// The ID of the domain the webhook is associated with.
	DomainId pulumi.StringInput
	// A list of event types that trigger the webhook.
	EventTypes pulumi.StringArrayInput
	// The name of the webhook. Defaults to an autogenerated name if not provided.
	Name pulumi.StringPtrInput
	// The ID of the project the webhook is associated with.
	ProjectId pulumi.StringPtrInput
	// . The region in which the webhook should be created.
	Region pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the SNS topic.
	SnsArn pulumi.StringInput
}

func (TemWebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*temWebhookArgs)(nil)).Elem()
}

type TemWebhookInput interface {
	pulumi.Input

	ToTemWebhookOutput() TemWebhookOutput
	ToTemWebhookOutputWithContext(ctx context.Context) TemWebhookOutput
}

func (*TemWebhook) ElementType() reflect.Type {
	return reflect.TypeOf((**TemWebhook)(nil)).Elem()
}

func (i *TemWebhook) ToTemWebhookOutput() TemWebhookOutput {
	return i.ToTemWebhookOutputWithContext(context.Background())
}

func (i *TemWebhook) ToTemWebhookOutputWithContext(ctx context.Context) TemWebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemWebhookOutput)
}

// TemWebhookArrayInput is an input type that accepts TemWebhookArray and TemWebhookArrayOutput values.
// You can construct a concrete instance of `TemWebhookArrayInput` via:
//
//	TemWebhookArray{ TemWebhookArgs{...} }
type TemWebhookArrayInput interface {
	pulumi.Input

	ToTemWebhookArrayOutput() TemWebhookArrayOutput
	ToTemWebhookArrayOutputWithContext(context.Context) TemWebhookArrayOutput
}

type TemWebhookArray []TemWebhookInput

func (TemWebhookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TemWebhook)(nil)).Elem()
}

func (i TemWebhookArray) ToTemWebhookArrayOutput() TemWebhookArrayOutput {
	return i.ToTemWebhookArrayOutputWithContext(context.Background())
}

func (i TemWebhookArray) ToTemWebhookArrayOutputWithContext(ctx context.Context) TemWebhookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemWebhookArrayOutput)
}

// TemWebhookMapInput is an input type that accepts TemWebhookMap and TemWebhookMapOutput values.
// You can construct a concrete instance of `TemWebhookMapInput` via:
//
//	TemWebhookMap{ "key": TemWebhookArgs{...} }
type TemWebhookMapInput interface {
	pulumi.Input

	ToTemWebhookMapOutput() TemWebhookMapOutput
	ToTemWebhookMapOutputWithContext(context.Context) TemWebhookMapOutput
}

type TemWebhookMap map[string]TemWebhookInput

func (TemWebhookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TemWebhook)(nil)).Elem()
}

func (i TemWebhookMap) ToTemWebhookMapOutput() TemWebhookMapOutput {
	return i.ToTemWebhookMapOutputWithContext(context.Background())
}

func (i TemWebhookMap) ToTemWebhookMapOutputWithContext(ctx context.Context) TemWebhookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemWebhookMapOutput)
}

type TemWebhookOutput struct{ *pulumi.OutputState }

func (TemWebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemWebhook)(nil)).Elem()
}

func (o TemWebhookOutput) ToTemWebhookOutput() TemWebhookOutput {
	return o
}

func (o TemWebhookOutput) ToTemWebhookOutputWithContext(ctx context.Context) TemWebhookOutput {
	return o
}

// The date and time of the webhook's creation (RFC 3339 format).
func (o TemWebhookOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TemWebhook) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of the domain the webhook is associated with.
func (o TemWebhookOutput) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *TemWebhook) pulumi.StringOutput { return v.DomainId }).(pulumi.StringOutput)
}

// A list of event types that trigger the webhook.
func (o TemWebhookOutput) EventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TemWebhook) pulumi.StringArrayOutput { return v.EventTypes }).(pulumi.StringArrayOutput)
}

// The name of the webhook. Defaults to an autogenerated name if not provided.
func (o TemWebhookOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TemWebhook) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the organization the webhook belongs to.
func (o TemWebhookOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *TemWebhook) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The ID of the project the webhook is associated with.
func (o TemWebhookOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *TemWebhook) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// . The region in which the webhook should be created.
func (o TemWebhookOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemWebhook) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the SNS topic.
func (o TemWebhookOutput) SnsArn() pulumi.StringOutput {
	return o.ApplyT(func(v *TemWebhook) pulumi.StringOutput { return v.SnsArn }).(pulumi.StringOutput)
}

// The date and time of the webhook's last update (RFC 3339 format).
func (o TemWebhookOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TemWebhook) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type TemWebhookArrayOutput struct{ *pulumi.OutputState }

func (TemWebhookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TemWebhook)(nil)).Elem()
}

func (o TemWebhookArrayOutput) ToTemWebhookArrayOutput() TemWebhookArrayOutput {
	return o
}

func (o TemWebhookArrayOutput) ToTemWebhookArrayOutputWithContext(ctx context.Context) TemWebhookArrayOutput {
	return o
}

func (o TemWebhookArrayOutput) Index(i pulumi.IntInput) TemWebhookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TemWebhook {
		return vs[0].([]*TemWebhook)[vs[1].(int)]
	}).(TemWebhookOutput)
}

type TemWebhookMapOutput struct{ *pulumi.OutputState }

func (TemWebhookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TemWebhook)(nil)).Elem()
}

func (o TemWebhookMapOutput) ToTemWebhookMapOutput() TemWebhookMapOutput {
	return o
}

func (o TemWebhookMapOutput) ToTemWebhookMapOutputWithContext(ctx context.Context) TemWebhookMapOutput {
	return o
}

func (o TemWebhookMapOutput) MapIndex(k pulumi.StringInput) TemWebhookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TemWebhook {
		return vs[0].(map[string]*TemWebhook)[vs[1].(string)]
	}).(TemWebhookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TemWebhookInput)(nil)).Elem(), &TemWebhook{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemWebhookArrayInput)(nil)).Elem(), TemWebhookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemWebhookMapInput)(nil)).Elem(), TemWebhookMap{})
	pulumi.RegisterOutputType(TemWebhookOutput{})
	pulumi.RegisterOutputType(TemWebhookArrayOutput{})
	pulumi.RegisterOutputType(TemWebhookMapOutput{})
}
