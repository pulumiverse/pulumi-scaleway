// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway VPC Routes.
// For more information, see [the main documentation](https://www.scaleway.com/en/docs/network/vpc/concepts/).
//
// ## Example Usage
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-scaleway/sdk/go/scaleway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			vpc01, err := scaleway.NewVpc(ctx, "vpc01", &scaleway.VpcArgs{
//				Name: pulumi.String("tf-vpc-vpn"),
//			})
//			if err != nil {
//				return err
//			}
//			pn01, err := scaleway.NewVpcPrivateNetwork(ctx, "pn01", &scaleway.VpcPrivateNetworkArgs{
//				Name: pulumi.String("tf-pn-vpn"),
//				Ipv4Subnet: &scaleway.VpcPrivateNetworkIpv4SubnetArgs{
//					Subnet: pulumi.String("172.16.64.0/22"),
//				},
//				VpcId: vpc01.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			server01, err := scaleway.NewInstanceServer(ctx, "server01", &scaleway.InstanceServerArgs{
//				Name:  pulumi.String("tf-server-vpn"),
//				Type:  pulumi.String("PLAY2-MICRO"),
//				Image: pulumi.String("openvpn"),
//			})
//			if err != nil {
//				return err
//			}
//			pnic01, err := scaleway.NewInstancePrivateNic(ctx, "pnic01", &scaleway.InstancePrivateNicArgs{
//				PrivateNetworkId: pn01.ID(),
//				ServerId:         server01.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewVpcRoute(ctx, "rt01", &scaleway.VpcRouteArgs{
//				VpcId:       vpc01.ID(),
//				Description: pulumi.String("tf-route-vpn"),
//				Tags: pulumi.StringArray{
//					pulumi.String("tf"),
//					pulumi.String("route"),
//				},
//				Destination:       pulumi.String("10.0.0.0/24"),
//				NexthopResourceId: pnic01.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Routes can be imported using `{region}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:index/vpcRoute:VpcRoute main fr-par/11111111-1111-1111-1111-111111111111
// ```
type VpcRoute struct {
	pulumi.CustomResourceState

	// The date and time of the creation of the route (RFC 3339 format).
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The route description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The destination of the route.
	Destination pulumi.StringPtrOutput `pulumi:"destination"`
	// The ID of the nexthop private network.
	NexthopPrivateNetworkId pulumi.StringPtrOutput `pulumi:"nexthopPrivateNetworkId"`
	// The ID of the nexthop resource.
	NexthopResourceId pulumi.StringPtrOutput `pulumi:"nexthopResourceId"`
	// `region`) The region of the route.
	Region pulumi.StringOutput `pulumi:"region"`
	// The tags to associate with the route.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The date and time of the creation of the route (RFC 3339 format).
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The VPC ID the route belongs to.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewVpcRoute registers a new resource with the given unique name, arguments, and options.
func NewVpcRoute(ctx *pulumi.Context,
	name string, args *VpcRouteArgs, opts ...pulumi.ResourceOption) (*VpcRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcRoute
	err := ctx.RegisterResource("scaleway:index/vpcRoute:VpcRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcRoute gets an existing VpcRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcRouteState, opts ...pulumi.ResourceOption) (*VpcRoute, error) {
	var resource VpcRoute
	err := ctx.ReadResource("scaleway:index/vpcRoute:VpcRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcRoute resources.
type vpcRouteState struct {
	// The date and time of the creation of the route (RFC 3339 format).
	CreatedAt *string `pulumi:"createdAt"`
	// The route description.
	Description *string `pulumi:"description"`
	// The destination of the route.
	Destination *string `pulumi:"destination"`
	// The ID of the nexthop private network.
	NexthopPrivateNetworkId *string `pulumi:"nexthopPrivateNetworkId"`
	// The ID of the nexthop resource.
	NexthopResourceId *string `pulumi:"nexthopResourceId"`
	// `region`) The region of the route.
	Region *string `pulumi:"region"`
	// The tags to associate with the route.
	Tags []string `pulumi:"tags"`
	// The date and time of the creation of the route (RFC 3339 format).
	UpdatedAt *string `pulumi:"updatedAt"`
	// The VPC ID the route belongs to.
	VpcId *string `pulumi:"vpcId"`
}

type VpcRouteState struct {
	// The date and time of the creation of the route (RFC 3339 format).
	CreatedAt pulumi.StringPtrInput
	// The route description.
	Description pulumi.StringPtrInput
	// The destination of the route.
	Destination pulumi.StringPtrInput
	// The ID of the nexthop private network.
	NexthopPrivateNetworkId pulumi.StringPtrInput
	// The ID of the nexthop resource.
	NexthopResourceId pulumi.StringPtrInput
	// `region`) The region of the route.
	Region pulumi.StringPtrInput
	// The tags to associate with the route.
	Tags pulumi.StringArrayInput
	// The date and time of the creation of the route (RFC 3339 format).
	UpdatedAt pulumi.StringPtrInput
	// The VPC ID the route belongs to.
	VpcId pulumi.StringPtrInput
}

func (VpcRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcRouteState)(nil)).Elem()
}

type vpcRouteArgs struct {
	// The route description.
	Description *string `pulumi:"description"`
	// The destination of the route.
	Destination *string `pulumi:"destination"`
	// The ID of the nexthop private network.
	NexthopPrivateNetworkId *string `pulumi:"nexthopPrivateNetworkId"`
	// The ID of the nexthop resource.
	NexthopResourceId *string `pulumi:"nexthopResourceId"`
	// `region`) The region of the route.
	Region *string `pulumi:"region"`
	// The tags to associate with the route.
	Tags []string `pulumi:"tags"`
	// The VPC ID the route belongs to.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a VpcRoute resource.
type VpcRouteArgs struct {
	// The route description.
	Description pulumi.StringPtrInput
	// The destination of the route.
	Destination pulumi.StringPtrInput
	// The ID of the nexthop private network.
	NexthopPrivateNetworkId pulumi.StringPtrInput
	// The ID of the nexthop resource.
	NexthopResourceId pulumi.StringPtrInput
	// `region`) The region of the route.
	Region pulumi.StringPtrInput
	// The tags to associate with the route.
	Tags pulumi.StringArrayInput
	// The VPC ID the route belongs to.
	VpcId pulumi.StringInput
}

func (VpcRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcRouteArgs)(nil)).Elem()
}

type VpcRouteInput interface {
	pulumi.Input

	ToVpcRouteOutput() VpcRouteOutput
	ToVpcRouteOutputWithContext(ctx context.Context) VpcRouteOutput
}

func (*VpcRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcRoute)(nil)).Elem()
}

func (i *VpcRoute) ToVpcRouteOutput() VpcRouteOutput {
	return i.ToVpcRouteOutputWithContext(context.Background())
}

func (i *VpcRoute) ToVpcRouteOutputWithContext(ctx context.Context) VpcRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcRouteOutput)
}

// VpcRouteArrayInput is an input type that accepts VpcRouteArray and VpcRouteArrayOutput values.
// You can construct a concrete instance of `VpcRouteArrayInput` via:
//
//	VpcRouteArray{ VpcRouteArgs{...} }
type VpcRouteArrayInput interface {
	pulumi.Input

	ToVpcRouteArrayOutput() VpcRouteArrayOutput
	ToVpcRouteArrayOutputWithContext(context.Context) VpcRouteArrayOutput
}

type VpcRouteArray []VpcRouteInput

func (VpcRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcRoute)(nil)).Elem()
}

func (i VpcRouteArray) ToVpcRouteArrayOutput() VpcRouteArrayOutput {
	return i.ToVpcRouteArrayOutputWithContext(context.Background())
}

func (i VpcRouteArray) ToVpcRouteArrayOutputWithContext(ctx context.Context) VpcRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcRouteArrayOutput)
}

// VpcRouteMapInput is an input type that accepts VpcRouteMap and VpcRouteMapOutput values.
// You can construct a concrete instance of `VpcRouteMapInput` via:
//
//	VpcRouteMap{ "key": VpcRouteArgs{...} }
type VpcRouteMapInput interface {
	pulumi.Input

	ToVpcRouteMapOutput() VpcRouteMapOutput
	ToVpcRouteMapOutputWithContext(context.Context) VpcRouteMapOutput
}

type VpcRouteMap map[string]VpcRouteInput

func (VpcRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcRoute)(nil)).Elem()
}

func (i VpcRouteMap) ToVpcRouteMapOutput() VpcRouteMapOutput {
	return i.ToVpcRouteMapOutputWithContext(context.Background())
}

func (i VpcRouteMap) ToVpcRouteMapOutputWithContext(ctx context.Context) VpcRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcRouteMapOutput)
}

type VpcRouteOutput struct{ *pulumi.OutputState }

func (VpcRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcRoute)(nil)).Elem()
}

func (o VpcRouteOutput) ToVpcRouteOutput() VpcRouteOutput {
	return o
}

func (o VpcRouteOutput) ToVpcRouteOutputWithContext(ctx context.Context) VpcRouteOutput {
	return o
}

// The date and time of the creation of the route (RFC 3339 format).
func (o VpcRouteOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcRoute) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The route description.
func (o VpcRouteOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcRoute) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The destination of the route.
func (o VpcRouteOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcRoute) pulumi.StringPtrOutput { return v.Destination }).(pulumi.StringPtrOutput)
}

// The ID of the nexthop private network.
func (o VpcRouteOutput) NexthopPrivateNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcRoute) pulumi.StringPtrOutput { return v.NexthopPrivateNetworkId }).(pulumi.StringPtrOutput)
}

// The ID of the nexthop resource.
func (o VpcRouteOutput) NexthopResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcRoute) pulumi.StringPtrOutput { return v.NexthopResourceId }).(pulumi.StringPtrOutput)
}

// `region`) The region of the route.
func (o VpcRouteOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcRoute) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The tags to associate with the route.
func (o VpcRouteOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpcRoute) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The date and time of the creation of the route (RFC 3339 format).
func (o VpcRouteOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcRoute) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The VPC ID the route belongs to.
func (o VpcRouteOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcRoute) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type VpcRouteArrayOutput struct{ *pulumi.OutputState }

func (VpcRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcRoute)(nil)).Elem()
}

func (o VpcRouteArrayOutput) ToVpcRouteArrayOutput() VpcRouteArrayOutput {
	return o
}

func (o VpcRouteArrayOutput) ToVpcRouteArrayOutputWithContext(ctx context.Context) VpcRouteArrayOutput {
	return o
}

func (o VpcRouteArrayOutput) Index(i pulumi.IntInput) VpcRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpcRoute {
		return vs[0].([]*VpcRoute)[vs[1].(int)]
	}).(VpcRouteOutput)
}

type VpcRouteMapOutput struct{ *pulumi.OutputState }

func (VpcRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcRoute)(nil)).Elem()
}

func (o VpcRouteMapOutput) ToVpcRouteMapOutput() VpcRouteMapOutput {
	return o
}

func (o VpcRouteMapOutput) ToVpcRouteMapOutputWithContext(ctx context.Context) VpcRouteMapOutput {
	return o
}

func (o VpcRouteMapOutput) MapIndex(k pulumi.StringInput) VpcRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpcRoute {
		return vs[0].(map[string]*VpcRoute)[vs[1].(string)]
	}).(VpcRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcRouteInput)(nil)).Elem(), &VpcRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcRouteArrayInput)(nil)).Elem(), VpcRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcRouteMapInput)(nil)).Elem(), VpcRouteMap{})
	pulumi.RegisterOutputType(VpcRouteOutput{})
	pulumi.RegisterOutputType(VpcRouteArrayOutput{})
	pulumi.RegisterOutputType(VpcRouteMapOutput{})
}
