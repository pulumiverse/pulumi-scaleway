// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Books and manages Autoscaling Instance templates.
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.autoscaling.InstanceTemplate("main", {
 *     name: "asg-template",
 *     commercialType: "PLAY2-MICRO",
 *     tags: [
 *         "terraform-test",
 *         "basic",
 *     ],
 *     volumes: [{
 *         name: "as-volume",
 *         volumeType: "sbs",
 *         boot: true,
 *         fromSnapshot: {
 *             snapshotId: mainScalewayBlockSnapshot.id,
 *         },
 *         perfIops: 5000,
 *     }],
 *     publicIpsV4Count: 1,
 *     privateNetworkIds: [mainScalewayVpcPrivateNetwork.id],
 * });
 * ```
 *
 * ## Import
 *
 * Autoscaling Instance templates can be imported using `{zone}/{id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:autoscaling/instanceTemplate:InstanceTemplate main fr-par-1/11111111-1111-1111-1111-111111111111
 * ```
 */
export class InstanceTemplate extends pulumi.CustomResource {
    /**
     * Get an existing InstanceTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceTemplateState, opts?: pulumi.CustomResourceOptions): InstanceTemplate {
        return new InstanceTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:autoscaling/instanceTemplate:InstanceTemplate';

    /**
     * Returns true if the given object is an instance of InstanceTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InstanceTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceTemplate.__pulumiType;
    }

    /**
     * The instance image ID. Can be an ID of a marketplace or personal image. This image must be compatible with `volume` and `commercialType` template.
     */
    declare public readonly cloudInit: pulumi.Output<string | undefined>;
    /**
     * The name of Instance commercial type.
     */
    declare public readonly commercialType: pulumi.Output<string>;
    /**
     * Date and time of Instance group's creation (RFC 3339 format).
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The instance image ID. Can be an ID of a marketplace or personal image. This image must be compatible with `volume` and `commercialType` template.
     */
    declare public readonly imageId: pulumi.Output<string | undefined>;
    /**
     * The Instance group template.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The instance placement group ID. This is optional, but it is highly recommended to set a preference for Instance location within Availability Zone.
     */
    declare public readonly placementGroupId: pulumi.Output<string | undefined>;
    /**
     * The private Network IDs to attach to the new Instance.
     */
    declare public readonly privateNetworkIds: pulumi.Output<string[] | undefined>;
    /**
     * `projectId`) The ID of the Project the Instance template is associated with.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * The number of flexible IPv4 addresses to attach to the new Instance.
     */
    declare public readonly publicIpsV4Count: pulumi.Output<number | undefined>;
    /**
     * The number of flexible IPv6 addresses to attach to the new Instance.
     */
    declare public readonly publicIpsV6Count: pulumi.Output<number | undefined>;
    /**
     * The instance security group ID.
     */
    declare public readonly securityGroupId: pulumi.Output<string | undefined>;
    /**
     * The Instance template status
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The tags associated with the Instance template.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * Date and time of Instance group's last update (RFC 3339 format).
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * The template of Instance volume.
     */
    declare public readonly volumes: pulumi.Output<outputs.autoscaling.InstanceTemplateVolume[] | undefined>;
    /**
     * `zone`) The zone in which the Instance template exists.
     */
    declare public readonly zone: pulumi.Output<string | undefined>;

    /**
     * Create a InstanceTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceTemplateArgs | InstanceTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceTemplateState | undefined;
            resourceInputs["cloudInit"] = state?.cloudInit;
            resourceInputs["commercialType"] = state?.commercialType;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["imageId"] = state?.imageId;
            resourceInputs["name"] = state?.name;
            resourceInputs["placementGroupId"] = state?.placementGroupId;
            resourceInputs["privateNetworkIds"] = state?.privateNetworkIds;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["publicIpsV4Count"] = state?.publicIpsV4Count;
            resourceInputs["publicIpsV6Count"] = state?.publicIpsV6Count;
            resourceInputs["securityGroupId"] = state?.securityGroupId;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["volumes"] = state?.volumes;
            resourceInputs["zone"] = state?.zone;
        } else {
            const args = argsOrState as InstanceTemplateArgs | undefined;
            if (args?.commercialType === undefined && !opts.urn) {
                throw new Error("Missing required property 'commercialType'");
            }
            resourceInputs["cloudInit"] = args?.cloudInit;
            resourceInputs["commercialType"] = args?.commercialType;
            resourceInputs["imageId"] = args?.imageId;
            resourceInputs["name"] = args?.name;
            resourceInputs["placementGroupId"] = args?.placementGroupId;
            resourceInputs["privateNetworkIds"] = args?.privateNetworkIds;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["publicIpsV4Count"] = args?.publicIpsV4Count;
            resourceInputs["publicIpsV6Count"] = args?.publicIpsV6Count;
            resourceInputs["securityGroupId"] = args?.securityGroupId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["volumes"] = args?.volumes;
            resourceInputs["zone"] = args?.zone;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InstanceTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InstanceTemplate resources.
 */
export interface InstanceTemplateState {
    /**
     * The instance image ID. Can be an ID of a marketplace or personal image. This image must be compatible with `volume` and `commercialType` template.
     */
    cloudInit?: pulumi.Input<string>;
    /**
     * The name of Instance commercial type.
     */
    commercialType?: pulumi.Input<string>;
    /**
     * Date and time of Instance group's creation (RFC 3339 format).
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The instance image ID. Can be an ID of a marketplace or personal image. This image must be compatible with `volume` and `commercialType` template.
     */
    imageId?: pulumi.Input<string>;
    /**
     * The Instance group template.
     */
    name?: pulumi.Input<string>;
    /**
     * The instance placement group ID. This is optional, but it is highly recommended to set a preference for Instance location within Availability Zone.
     */
    placementGroupId?: pulumi.Input<string>;
    /**
     * The private Network IDs to attach to the new Instance.
     */
    privateNetworkIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * `projectId`) The ID of the Project the Instance template is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The number of flexible IPv4 addresses to attach to the new Instance.
     */
    publicIpsV4Count?: pulumi.Input<number>;
    /**
     * The number of flexible IPv6 addresses to attach to the new Instance.
     */
    publicIpsV6Count?: pulumi.Input<number>;
    /**
     * The instance security group ID.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * The Instance template status
     */
    status?: pulumi.Input<string>;
    /**
     * The tags associated with the Instance template.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Date and time of Instance group's last update (RFC 3339 format).
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The template of Instance volume.
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.autoscaling.InstanceTemplateVolume>[]>;
    /**
     * `zone`) The zone in which the Instance template exists.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InstanceTemplate resource.
 */
export interface InstanceTemplateArgs {
    /**
     * The instance image ID. Can be an ID of a marketplace or personal image. This image must be compatible with `volume` and `commercialType` template.
     */
    cloudInit?: pulumi.Input<string>;
    /**
     * The name of Instance commercial type.
     */
    commercialType: pulumi.Input<string>;
    /**
     * The instance image ID. Can be an ID of a marketplace or personal image. This image must be compatible with `volume` and `commercialType` template.
     */
    imageId?: pulumi.Input<string>;
    /**
     * The Instance group template.
     */
    name?: pulumi.Input<string>;
    /**
     * The instance placement group ID. This is optional, but it is highly recommended to set a preference for Instance location within Availability Zone.
     */
    placementGroupId?: pulumi.Input<string>;
    /**
     * The private Network IDs to attach to the new Instance.
     */
    privateNetworkIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * `projectId`) The ID of the Project the Instance template is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The number of flexible IPv4 addresses to attach to the new Instance.
     */
    publicIpsV4Count?: pulumi.Input<number>;
    /**
     * The number of flexible IPv6 addresses to attach to the new Instance.
     */
    publicIpsV6Count?: pulumi.Input<number>;
    /**
     * The instance security group ID.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * The tags associated with the Instance template.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The template of Instance volume.
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.autoscaling.InstanceTemplateVolume>[]>;
    /**
     * `zone`) The zone in which the Instance template exists.
     */
    zone?: pulumi.Input<string>;
}
