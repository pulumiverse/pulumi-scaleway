// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `scaleway.block.Volume` resource is used to create and manage Scaleway Block Storage volumes.
 *
 * Refer to the Block Storage [product documentation](https://www.scaleway.com/en/docs/block-storage/) and [API documentation](https://www.scaleway.com/en/developers/api/block/) for more information.
 *
 * ## Example Usage
 *
 * ### Create a Block Storage volume
 *
 * The following command allows you to create a Block Storage volume of 20 GB with a 5000 [IOPS](https://www.scaleway.com/en/docs/block-storage/concepts/#iops).
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const blockVolume = new scaleway.block.Volume("block_volume", {
 *     iops: 5000,
 *     name: "some-volume-name",
 *     sizeInGb: 20,
 * });
 * ```
 *
 * ### With snapshot
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const base = new scaleway.block.Volume("base", {
 *     name: "block-volume-base",
 *     iops: 5000,
 *     sizeInGb: 20,
 * });
 * const main = new scaleway.block.Snapshot("main", {
 *     name: "block-volume-from-snapshot",
 *     volumeId: base.id,
 * });
 * const mainVolume = new scaleway.block.Volume("main", {
 *     name: "block-volume-from-snapshot",
 *     iops: 5000,
 *     snapshotId: main.id,
 * });
 * ```
 *
 * ## Import
 *
 * This section explains how to import a Block Storage volume using the zoned ID (`{zone}/{id}`) format.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:index/blockVolume:BlockVolume block_volume fr-par-1/11111111-1111-1111-1111-111111111111
 * ```
 *
 * @deprecated scaleway.index/blockvolume.BlockVolume has been deprecated in favor of scaleway.block/volume.Volume
 */
export class BlockVolume extends pulumi.CustomResource {
    /**
     * Get an existing BlockVolume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlockVolumeState, opts?: pulumi.CustomResourceOptions): BlockVolume {
        pulumi.log.warn("BlockVolume is deprecated: scaleway.index/blockvolume.BlockVolume has been deprecated in favor of scaleway.block/volume.Volume")
        return new BlockVolume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/blockVolume:BlockVolume';

    /**
     * Returns true if the given object is an instance of BlockVolume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BlockVolume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BlockVolume.__pulumiType;
    }

    /**
     * The instance volume to create the block volume from
     */
    public readonly instanceVolumeId!: pulumi.Output<string>;
    /**
     * The maximum [IOPs](https://www.scaleway.com/en/docs/block-storage/concepts/#iops) expected, must match available options.
     */
    public readonly iops!: pulumi.Output<number>;
    /**
     * The name of the volume. If not provided, a name will be randomly generated.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ). The ID of the Project the volume is associated with.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The size of the volume in gigabytes. Only one of `sizeInGb`, and `snapshotId` should be specified.
     */
    public readonly sizeInGb!: pulumi.Output<number>;
    /**
     * If set, the new volume will be created from this snapshot. Only one of `sizeInGb`, `snapshotId` should be specified.
     */
    public readonly snapshotId!: pulumi.Output<string | undefined>;
    /**
     * A list of tags to apply to the volume.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * ). The zone in which the volume should be created.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a BlockVolume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated scaleway.index/blockvolume.BlockVolume has been deprecated in favor of scaleway.block/volume.Volume */
    constructor(name: string, args: BlockVolumeArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated scaleway.index/blockvolume.BlockVolume has been deprecated in favor of scaleway.block/volume.Volume */
    constructor(name: string, argsOrState?: BlockVolumeArgs | BlockVolumeState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("BlockVolume is deprecated: scaleway.index/blockvolume.BlockVolume has been deprecated in favor of scaleway.block/volume.Volume")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BlockVolumeState | undefined;
            resourceInputs["instanceVolumeId"] = state ? state.instanceVolumeId : undefined;
            resourceInputs["iops"] = state ? state.iops : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["sizeInGb"] = state ? state.sizeInGb : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as BlockVolumeArgs | undefined;
            if ((!args || args.iops === undefined) && !opts.urn) {
                throw new Error("Missing required property 'iops'");
            }
            resourceInputs["instanceVolumeId"] = args ? args.instanceVolumeId : undefined;
            resourceInputs["iops"] = args ? args.iops : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["sizeInGb"] = args ? args.sizeInGb : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BlockVolume.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BlockVolume resources.
 */
export interface BlockVolumeState {
    /**
     * The instance volume to create the block volume from
     */
    instanceVolumeId?: pulumi.Input<string>;
    /**
     * The maximum [IOPs](https://www.scaleway.com/en/docs/block-storage/concepts/#iops) expected, must match available options.
     */
    iops?: pulumi.Input<number>;
    /**
     * The name of the volume. If not provided, a name will be randomly generated.
     */
    name?: pulumi.Input<string>;
    /**
     * ). The ID of the Project the volume is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The size of the volume in gigabytes. Only one of `sizeInGb`, and `snapshotId` should be specified.
     */
    sizeInGb?: pulumi.Input<number>;
    /**
     * If set, the new volume will be created from this snapshot. Only one of `sizeInGb`, `snapshotId` should be specified.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * A list of tags to apply to the volume.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ). The zone in which the volume should be created.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BlockVolume resource.
 */
export interface BlockVolumeArgs {
    /**
     * The instance volume to create the block volume from
     */
    instanceVolumeId?: pulumi.Input<string>;
    /**
     * The maximum [IOPs](https://www.scaleway.com/en/docs/block-storage/concepts/#iops) expected, must match available options.
     */
    iops: pulumi.Input<number>;
    /**
     * The name of the volume. If not provided, a name will be randomly generated.
     */
    name?: pulumi.Input<string>;
    /**
     * ). The ID of the Project the volume is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The size of the volume in gigabytes. Only one of `sizeInGb`, and `snapshotId` should be specified.
     */
    sizeInGb?: pulumi.Input<number>;
    /**
     * If set, the new volume will be created from this snapshot. Only one of `sizeInGb`, `snapshotId` should be specified.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * A list of tags to apply to the volume.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ). The zone in which the volume should be created.
     */
    zone?: pulumi.Input<string>;
}
