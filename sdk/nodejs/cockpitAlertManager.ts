// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `scaleway.observability.AlertManager` resource allows you to enable and manage the Scaleway Cockpit [alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager).
 *
 * Refer to Cockpit's [product documentation](https://www.scaleway.com/en/docs/observability/cockpit/concepts/) and [API documentation](https://www.scaleway.com/en/developers/api/cockpit/regional-api) for more information.
 *
 * ## Example Usage
 *
 * ### Enable the alert manager and configure managed alerts
 *
 * The following commands allow you to:
 *
 * - enable the alert manager in a Project named `tfTestProject`
 * - enable [managed alerts](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#managed-alerts)
 * - set up [contact points](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#contact-points) to receive alert notifications
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const project = new scaleway.account.Project("project", {name: "tf_test_project"});
 * const alertManager = new scaleway.observability.AlertManager("alert_manager", {
 *     projectId: project.id,
 *     enableManagedAlerts: true,
 *     contactPoints: [
 *         {
 *             email: "alert1@example.com",
 *         },
 *         {
 *             email: "alert2@example.com",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * This section explains how to import alert managers using the ID of the Project associated with Cockpit.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:index/cockpitAlertManager:CockpitAlertManager main fr-par/11111111-1111-1111-1111-111111111111
 * ```
 *
 * @deprecated scaleway.index/cockpitalertmanager.CockpitAlertManager has been deprecated in favor of scaleway.observability/alertmanager.AlertManager
 */
export class CockpitAlertManager extends pulumi.CustomResource {
    /**
     * Get an existing CockpitAlertManager resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CockpitAlertManagerState, opts?: pulumi.CustomResourceOptions): CockpitAlertManager {
        pulumi.log.warn("CockpitAlertManager is deprecated: scaleway.index/cockpitalertmanager.CockpitAlertManager has been deprecated in favor of scaleway.observability/alertmanager.AlertManager")
        return new CockpitAlertManager(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/cockpitAlertManager:CockpitAlertManager';

    /**
     * Returns true if the given object is an instance of CockpitAlertManager.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CockpitAlertManager {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CockpitAlertManager.__pulumiType;
    }

    /**
     * The URL of the alert manager.
     */
    declare public /*out*/ readonly alertManagerUrl: pulumi.Output<string>;
    /**
     * A list of contact points with email addresses that will receive alerts. Each map should contain a single key email.
     */
    declare public readonly contactPoints: pulumi.Output<outputs.CockpitAlertManagerContactPoint[] | undefined>;
    /**
     * Specifies whether the alert manager should be enabled. Defaults to true.
     */
    declare public readonly enableManagedAlerts: pulumi.Output<boolean | undefined>;
    /**
     * ) The ID of the Project the Cockpit is associated with.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * ) The region where the [alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager) should be enabled.
     */
    declare public readonly region: pulumi.Output<string | undefined>;

    /**
     * Create a CockpitAlertManager resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated scaleway.index/cockpitalertmanager.CockpitAlertManager has been deprecated in favor of scaleway.observability/alertmanager.AlertManager */
    constructor(name: string, args?: CockpitAlertManagerArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated scaleway.index/cockpitalertmanager.CockpitAlertManager has been deprecated in favor of scaleway.observability/alertmanager.AlertManager */
    constructor(name: string, argsOrState?: CockpitAlertManagerArgs | CockpitAlertManagerState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("CockpitAlertManager is deprecated: scaleway.index/cockpitalertmanager.CockpitAlertManager has been deprecated in favor of scaleway.observability/alertmanager.AlertManager")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CockpitAlertManagerState | undefined;
            resourceInputs["alertManagerUrl"] = state?.alertManagerUrl;
            resourceInputs["contactPoints"] = state?.contactPoints;
            resourceInputs["enableManagedAlerts"] = state?.enableManagedAlerts;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["region"] = state?.region;
        } else {
            const args = argsOrState as CockpitAlertManagerArgs | undefined;
            resourceInputs["contactPoints"] = args?.contactPoints;
            resourceInputs["enableManagedAlerts"] = args?.enableManagedAlerts;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["region"] = args?.region;
            resourceInputs["alertManagerUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CockpitAlertManager.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CockpitAlertManager resources.
 */
export interface CockpitAlertManagerState {
    /**
     * The URL of the alert manager.
     */
    alertManagerUrl?: pulumi.Input<string>;
    /**
     * A list of contact points with email addresses that will receive alerts. Each map should contain a single key email.
     */
    contactPoints?: pulumi.Input<pulumi.Input<inputs.CockpitAlertManagerContactPoint>[]>;
    /**
     * Specifies whether the alert manager should be enabled. Defaults to true.
     */
    enableManagedAlerts?: pulumi.Input<boolean>;
    /**
     * ) The ID of the Project the Cockpit is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * ) The region where the [alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager) should be enabled.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CockpitAlertManager resource.
 */
export interface CockpitAlertManagerArgs {
    /**
     * A list of contact points with email addresses that will receive alerts. Each map should contain a single key email.
     */
    contactPoints?: pulumi.Input<pulumi.Input<inputs.CockpitAlertManagerContactPoint>[]>;
    /**
     * Specifies whether the alert manager should be enabled. Defaults to true.
     */
    enableManagedAlerts?: pulumi.Input<boolean>;
    /**
     * ) The ID of the Project the Cockpit is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * ) The region where the [alert manager](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#alert-manager) should be enabled.
     */
    region?: pulumi.Input<string>;
}
