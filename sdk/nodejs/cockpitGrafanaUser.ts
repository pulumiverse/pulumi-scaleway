// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `scaleway.CockpitGrafanaUser` resource allows you to create and manage [Grafana users](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#grafana-users) in Scaleway Cockpit.
 *
 * Refer to Cockpit's [product documentation](https://www.scaleway.com/en/docs/observability/cockpit/concepts/) and [API documentation](https://www.scaleway.com/en/developers/api/cockpit/regional-api) for more information.
 *
 * ## Example Usage
 *
 * ### Create a Grafana user
 *
 * The following command allows you to create a Grafana user within a specific Scaleway Project.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const project = new scaleway.AccountProject("project", {name: "test project grafana user"});
 * const main = new scaleway.CockpitGrafanaUser("main", {
 *     projectId: project.id,
 *     login: "my-awesome-user",
 *     role: "editor",
 * });
 * ```
 *
 * ## Import
 *
 * This section explains how to import Grafana users using the ID of the Project associated with Cockpit, and the Grafana user ID in the `{project_id}/{grafana_user_id}` format.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:index/cockpitGrafanaUser:CockpitGrafanaUser main 11111111-1111-1111-1111-111111111111/2
 * ```
 */
export class CockpitGrafanaUser extends pulumi.CustomResource {
    /**
     * Get an existing CockpitGrafanaUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CockpitGrafanaUserState, opts?: pulumi.CustomResourceOptions): CockpitGrafanaUser {
        return new CockpitGrafanaUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/cockpitGrafanaUser:CockpitGrafanaUser';

    /**
     * Returns true if the given object is an instance of CockpitGrafanaUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CockpitGrafanaUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CockpitGrafanaUser.__pulumiType;
    }

    /**
     * The username of the Grafana user. The `admin` user is not yet available for creation. You need your Grafana username to log in to Grafana and access your dashboards.
     */
    public readonly login!: pulumi.Output<string>;
    /**
     * The password of the Grafana user.
     */
    public /*out*/ readonly password!: pulumi.Output<string>;
    /**
     * ) The ID of the Project the Cockpit is associated with.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The role assigned to the Grafana user. Must be `editor` or `viewer`.
     */
    public readonly role!: pulumi.Output<string>;

    /**
     * Create a CockpitGrafanaUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CockpitGrafanaUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CockpitGrafanaUserArgs | CockpitGrafanaUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CockpitGrafanaUserState | undefined;
            resourceInputs["login"] = state ? state.login : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
        } else {
            const args = argsOrState as CockpitGrafanaUserArgs | undefined;
            if ((!args || args.login === undefined) && !opts.urn) {
                throw new Error("Missing required property 'login'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            resourceInputs["login"] = args ? args.login : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["password"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CockpitGrafanaUser.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CockpitGrafanaUser resources.
 */
export interface CockpitGrafanaUserState {
    /**
     * The username of the Grafana user. The `admin` user is not yet available for creation. You need your Grafana username to log in to Grafana and access your dashboards.
     */
    login?: pulumi.Input<string>;
    /**
     * The password of the Grafana user.
     */
    password?: pulumi.Input<string>;
    /**
     * ) The ID of the Project the Cockpit is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The role assigned to the Grafana user. Must be `editor` or `viewer`.
     */
    role?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CockpitGrafanaUser resource.
 */
export interface CockpitGrafanaUserArgs {
    /**
     * The username of the Grafana user. The `admin` user is not yet available for creation. You need your Grafana username to log in to Grafana and access your dashboards.
     */
    login: pulumi.Input<string>;
    /**
     * ) The ID of the Project the Cockpit is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The role assigned to the Grafana user. Must be `editor` or `viewer`.
     */
    role: pulumi.Input<string>;
}
