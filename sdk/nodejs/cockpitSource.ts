// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creates and manages Scaleway Cockpit Data Sources.
 *
 * For more information consult the [documentation](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#data-sources).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const project = new scaleway.AccountProject("project", {name: "test project data source"});
 * const main = new scaleway.CockpitSource("main", {
 *     projectId: project.id,
 *     name: "my-data-source",
 *     type: "metrics",
 * });
 * ```
 *
 * ## Import
 *
 * Cockpits Data Sources can be imported using the `{region}/{id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:index/cockpitSource:CockpitSource main fr-par/11111111-1111-1111-1111-111111111111
 * ```
 */
export class CockpitSource extends pulumi.CustomResource {
    /**
     * Get an existing CockpitSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CockpitSourceState, opts?: pulumi.CustomResourceOptions): CockpitSource {
        return new CockpitSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/cockpitSource:CockpitSource';

    /**
     * Returns true if the given object is an instance of CockpitSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CockpitSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CockpitSource.__pulumiType;
    }

    /**
     * Date and time of the cockpit data source's creation (RFC 3339 format).
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The name of the cockpit data source.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The origin of the cockpit data source.
     */
    public /*out*/ readonly origin!: pulumi.Output<string>;
    /**
     * `projectId`) The ID of the project the cockpit data source is associated with.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * `region`) The region of the cockpit datasource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Indicates whether the data source is synchronized with Grafana.
     */
    public /*out*/ readonly synchronizedWithGrafana!: pulumi.Output<boolean>;
    /**
     * The type of the cockpit data source. Possible values are: `metrics`, `logs` or `traces`.
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * Date and time of the cockpit datas ource's last update (RFC 3339 format).
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The URL of the cockpit data source.
     */
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a CockpitSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CockpitSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CockpitSourceArgs | CockpitSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CockpitSourceState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["origin"] = state ? state.origin : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["synchronizedWithGrafana"] = state ? state.synchronizedWithGrafana : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as CockpitSourceArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["origin"] = undefined /*out*/;
            resourceInputs["synchronizedWithGrafana"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CockpitSource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CockpitSource resources.
 */
export interface CockpitSourceState {
    /**
     * Date and time of the cockpit data source's creation (RFC 3339 format).
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The name of the cockpit data source.
     */
    name?: pulumi.Input<string>;
    /**
     * The origin of the cockpit data source.
     */
    origin?: pulumi.Input<string>;
    /**
     * `projectId`) The ID of the project the cockpit data source is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * `region`) The region of the cockpit datasource.
     */
    region?: pulumi.Input<string>;
    /**
     * Indicates whether the data source is synchronized with Grafana.
     */
    synchronizedWithGrafana?: pulumi.Input<boolean>;
    /**
     * The type of the cockpit data source. Possible values are: `metrics`, `logs` or `traces`.
     */
    type?: pulumi.Input<string>;
    /**
     * Date and time of the cockpit datas ource's last update (RFC 3339 format).
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The URL of the cockpit data source.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CockpitSource resource.
 */
export interface CockpitSourceArgs {
    /**
     * The name of the cockpit data source.
     */
    name?: pulumi.Input<string>;
    /**
     * `projectId`) The ID of the project the cockpit data source is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * `region`) The region of the cockpit datasource.
     */
    region?: pulumi.Input<string>;
    /**
     * The type of the cockpit data source. Possible values are: `metrics`, `logs` or `traces`.
     */
    type?: pulumi.Input<string>;
}
