// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates and manages Scaleway Cockpit Tokens.
 *
 * For more information consult the [documentation](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#tokens).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumi/scaleway";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const mainCockpit = scaleway.getCockpit({});
 * // Create a token for the cockpit that can write metrics and logs
 * const mainCockpitToken = new scaleway.CockpitToken("mainCockpitToken", {projectId: mainCockpit.then(mainCockpit => mainCockpit.projectId)});
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumi/scaleway";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const mainCockpit = scaleway.getCockpit({});
 * // Create a token for the cockpit that can read metrics and logs but not write
 * const mainCockpitToken = new scaleway.CockpitToken("mainCockpitToken", {
 *     projectId: mainCockpit.then(mainCockpit => mainCockpit.projectId),
 *     scopes: {
 *         queryMetrics: true,
 *         writeMetrics: false,
 *         queryLogs: true,
 *         writeLogs: false,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Cockpits can be imported using the token ID, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:index/cockpitToken:CockpitToken main 11111111-1111-1111-1111-111111111111
 * ```
 */
export class CockpitToken extends pulumi.CustomResource {
    /**
     * Get an existing CockpitToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CockpitTokenState, opts?: pulumi.CustomResourceOptions): CockpitToken {
        return new CockpitToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/cockpitToken:CockpitToken';

    /**
     * Returns true if the given object is an instance of CockpitToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CockpitToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CockpitToken.__pulumiType;
    }

    /**
     * The name of the token.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * `projectId`) The ID of the project the cockpit is associated with.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Allowed scopes.
     */
    public readonly scopes!: pulumi.Output<outputs.CockpitTokenScopes>;
    /**
     * The secret key of the token.
     */
    public /*out*/ readonly secretKey!: pulumi.Output<string>;

    /**
     * Create a CockpitToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CockpitTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CockpitTokenArgs | CockpitTokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CockpitTokenState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["secretKey"] = state ? state.secretKey : undefined;
        } else {
            const args = argsOrState as CockpitTokenArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["secretKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CockpitToken.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CockpitToken resources.
 */
export interface CockpitTokenState {
    /**
     * The name of the token.
     */
    name?: pulumi.Input<string>;
    /**
     * `projectId`) The ID of the project the cockpit is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Allowed scopes.
     */
    scopes?: pulumi.Input<inputs.CockpitTokenScopes>;
    /**
     * The secret key of the token.
     */
    secretKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CockpitToken resource.
 */
export interface CockpitTokenArgs {
    /**
     * The name of the token.
     */
    name?: pulumi.Input<string>;
    /**
     * `projectId`) The ID of the project the cockpit is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Allowed scopes.
     */
    scopes?: pulumi.Input<inputs.CockpitTokenScopes>;
}
