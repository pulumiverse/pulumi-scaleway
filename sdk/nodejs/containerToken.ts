// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creates and manages Scaleway Container Token.
 * For more information see [the documentation](https://developers.scaleway.com/en/products/containers/api/#tokens-26b085).
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const mainContainerNamespace = new scaleway.ContainerNamespace("mainContainerNamespace", {});
 * const mainContainer = new scaleway.Container("mainContainer", {namespaceId: mainContainerNamespace.id});
 * // Namespace Token
 * const namespace = new scaleway.ContainerToken("namespace", {
 *     namespaceId: mainContainerNamespace.id,
 *     expiresAt: "2022-10-18T11:35:15+02:00",
 * });
 * // Container Token
 * const container = new scaleway.ContainerToken("container", {containerId: mainContainer.id});
 * ```
 *
 * ## Import
 *
 * Tokens can be imported using the `{region}/{id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:index/containerToken:ContainerToken main fr-par/11111111-1111-1111-1111-111111111111
 * ```
 */
export class ContainerToken extends pulumi.CustomResource {
    /**
     * Get an existing ContainerToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerTokenState, opts?: pulumi.CustomResourceOptions): ContainerToken {
        return new ContainerToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/containerToken:ContainerToken';

    /**
     * Returns true if the given object is an instance of ContainerToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerToken.__pulumiType;
    }

    /**
     * The ID of the container.
     *
     * > Only one of `namespaceId` or `containerId` must be set.
     */
    public readonly containerId!: pulumi.Output<string | undefined>;
    /**
     * The description of the token.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The expiration date of the token.
     */
    public readonly expiresAt!: pulumi.Output<string | undefined>;
    /**
     * The ID of the container namespace.
     */
    public readonly namespaceId!: pulumi.Output<string | undefined>;
    /**
     * `region`). The region in which the namespace should be created.
     *
     * > **Important** Updates to any fields will recreate the token.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The token.
     */
    public /*out*/ readonly token!: pulumi.Output<string>;

    /**
     * Create a ContainerToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ContainerTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerTokenArgs | ContainerTokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerTokenState | undefined;
            resourceInputs["containerId"] = state ? state.containerId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["expiresAt"] = state ? state.expiresAt : undefined;
            resourceInputs["namespaceId"] = state ? state.namespaceId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
        } else {
            const args = argsOrState as ContainerTokenArgs | undefined;
            resourceInputs["containerId"] = args ? args.containerId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["expiresAt"] = args ? args.expiresAt : undefined;
            resourceInputs["namespaceId"] = args ? args.namespaceId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["token"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ContainerToken.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ContainerToken resources.
 */
export interface ContainerTokenState {
    /**
     * The ID of the container.
     *
     * > Only one of `namespaceId` or `containerId` must be set.
     */
    containerId?: pulumi.Input<string>;
    /**
     * The description of the token.
     */
    description?: pulumi.Input<string>;
    /**
     * The expiration date of the token.
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * The ID of the container namespace.
     */
    namespaceId?: pulumi.Input<string>;
    /**
     * `region`). The region in which the namespace should be created.
     *
     * > **Important** Updates to any fields will recreate the token.
     */
    region?: pulumi.Input<string>;
    /**
     * The token.
     */
    token?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContainerToken resource.
 */
export interface ContainerTokenArgs {
    /**
     * The ID of the container.
     *
     * > Only one of `namespaceId` or `containerId` must be set.
     */
    containerId?: pulumi.Input<string>;
    /**
     * The description of the token.
     */
    description?: pulumi.Input<string>;
    /**
     * The expiration date of the token.
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * The ID of the container namespace.
     */
    namespaceId?: pulumi.Input<string>;
    /**
     * `region`). The region in which the namespace should be created.
     *
     * > **Important** Updates to any fields will recreate the token.
     */
    region?: pulumi.Input<string>;
}
