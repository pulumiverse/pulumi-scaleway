// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * The `scaleway.containers.Domain` resource allows you to create and manage domain name bindings for Scaleway [Serverless Containers](https://www.scaleway.com/en/docs/serverless/containers/).
 *
 * Refer to the Containers domain [documentation](https://www.scaleway.com/en/docs/serverless-containers/how-to/add-a-custom-domain-to-a-container/) and the [API documentation](https://www.scaleway.com/en/developers/api/serverless-containers/#path-domains-list-all-domain-name-bindings) for more information.
 *
 * ## Example Usage
 *
 * The commands below shows how to bind a custom domain name to a container.
 *
 * ### Simple
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const app = new scaleway.containers.Container("app", {});
 * const appDomain = new scaleway.containers.Domain("app", {
 *     containerId: app.id,
 *     hostname: "container.domain.tld",
 * });
 * ```
 *
 * ### Complete example with domain
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.containers.Namespace("main", {
 *     name: "my-ns-test",
 *     description: "test container",
 * });
 * const app = new scaleway.containers.Container("app", {
 *     name: "app",
 *     namespaceId: main.id,
 *     registryImage: pulumi.interpolate`${main.registryEndpoint}/nginx:alpine`,
 *     port: 80,
 *     cpuLimit: 140,
 *     memoryLimit: 256,
 *     minScale: 1,
 *     maxScale: 1,
 *     timeout: 600,
 *     maxConcurrency: 80,
 *     privacy: "public",
 *     protocol: "http1",
 *     deploy: true,
 * });
 * const appRecord = new scaleway.domain.Record("app", {
 *     dnsZone: "domain.tld",
 *     name: "subdomain",
 *     type: "CNAME",
 *     data: pulumi.interpolate`${app.domainName}.`,
 *     ttl: 3600,
 * });
 * const appDomain = new scaleway.containers.Domain("app", {
 *     containerId: app.id,
 *     hostname: pulumi.interpolate`${appRecord.name}.${appRecord.dnsZone}`,
 * });
 * ```
 *
 * ## Import
 *
 * Container domain binding can be imported using `{region}/{id}`, as shown below:
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:containers/domain:Domain main fr-par/11111111-1111-1111-1111-111111111111
 * ```
 */
export class Domain extends pulumi.CustomResource {
    /**
     * Get an existing Domain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainState, opts?: pulumi.CustomResourceOptions): Domain {
        return new Domain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:containers/domain:Domain';

    /**
     * Returns true if the given object is an instance of Domain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Domain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Domain.__pulumiType;
    }

    /**
     * The unique identifier of the container.
     */
    declare public readonly containerId: pulumi.Output<string>;
    /**
     * The hostname with a CNAME record.
     */
    declare public readonly hostname: pulumi.Output<string>;
    /**
     * `region`) The region in which the container exists.
     */
    declare public readonly region: pulumi.Output<string | undefined>;
    /**
     * The URL used to query the container.
     */
    declare public /*out*/ readonly url: pulumi.Output<string>;

    /**
     * Create a Domain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainArgs | DomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainState | undefined;
            resourceInputs["containerId"] = state?.containerId;
            resourceInputs["hostname"] = state?.hostname;
            resourceInputs["region"] = state?.region;
            resourceInputs["url"] = state?.url;
        } else {
            const args = argsOrState as DomainArgs | undefined;
            if (args?.containerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'containerId'");
            }
            if (args?.hostname === undefined && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            resourceInputs["containerId"] = args?.containerId;
            resourceInputs["hostname"] = args?.hostname;
            resourceInputs["region"] = args?.region;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "scaleway:index/containerDomain:ContainerDomain" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Domain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Domain resources.
 */
export interface DomainState {
    /**
     * The unique identifier of the container.
     */
    containerId?: pulumi.Input<string>;
    /**
     * The hostname with a CNAME record.
     */
    hostname?: pulumi.Input<string>;
    /**
     * `region`) The region in which the container exists.
     */
    region?: pulumi.Input<string>;
    /**
     * The URL used to query the container.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Domain resource.
 */
export interface DomainArgs {
    /**
     * The unique identifier of the container.
     */
    containerId: pulumi.Input<string>;
    /**
     * The hostname with a CNAME record.
     */
    hostname: pulumi.Input<string>;
    /**
     * `region`) The region in which the container exists.
     */
    region?: pulumi.Input<string>;
}
