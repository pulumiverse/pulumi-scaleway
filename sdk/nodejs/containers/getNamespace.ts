// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * The `scaleway.containers.Namespace` data source is used to retrieve information about a Serverless Containers namespace.
 *
 * Refer to the Serverless Containers [product documentation](https://www.scaleway.com/en/docs/serverless/containers/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-containers/) for more information.
 *
 * ## Retrieve a Serverless Containers namespace
 *
 * The following commands allow you to:
 *
 * - retrieve a namespace by its name
 * - retrieve a namespace by its ID
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * // Get info by namespace name
 * const byName = scaleway.containers.getNamespace({
 *     name: "my-namespace-name",
 * });
 * // Get info by namespace ID
 * const byId = scaleway.containers.getNamespace({
 *     namespaceId: "11111111-1111-1111-1111-111111111111",
 * });
 * ```
 */
export function getNamespace(args?: GetNamespaceArgs, opts?: pulumi.InvokeOptions): Promise<GetNamespaceResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("scaleway:containers/getNamespace:getNamespace", {
        "name": args.name,
        "namespaceId": args.namespaceId,
        "projectId": args.projectId,
        "region": args.region,
    }, opts);
}

/**
 * A collection of arguments for invoking getNamespace.
 */
export interface GetNamespaceArgs {
    /**
     * The name of the namespace. Only one of `name` and `namespaceId` should be specified.
     */
    name?: string;
    /**
     * The unique identifier of the namespace. Only one of `name` and `namespaceId` should be specified.
     */
    namespaceId?: string;
    /**
     * `projectId`) The unique identifier of the project with which the namespace is associated.
     */
    projectId?: string;
    /**
     * `region`) The region in which the namespace exists.
     */
    region?: string;
}

/**
 * A collection of values returned by getNamespace.
 */
export interface GetNamespaceResult {
    readonly activateVpcIntegration: boolean;
    /**
     * The description of the namespace.
     */
    readonly description: string;
    readonly destroyRegistry: boolean;
    /**
     * The environment variables of the namespace.
     */
    readonly environmentVariables: {[key: string]: string};
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name?: string;
    readonly namespaceId?: string;
    /**
     * The unique identifier of the organization with which the namespace is associated.
     */
    readonly organizationId: string;
    readonly projectId?: string;
    readonly region?: string;
    /**
     * The registry endpoint of the namespace.
     */
    readonly registryEndpoint: string;
    /**
     * The unique identifier of the registry namespace of the Serverless Containers namespace.
     */
    readonly registryNamespaceId: string;
    readonly secretEnvironmentVariables: {[key: string]: string};
    readonly tags: string[];
}
/**
 * The `scaleway.containers.Namespace` data source is used to retrieve information about a Serverless Containers namespace.
 *
 * Refer to the Serverless Containers [product documentation](https://www.scaleway.com/en/docs/serverless/containers/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-containers/) for more information.
 *
 * ## Retrieve a Serverless Containers namespace
 *
 * The following commands allow you to:
 *
 * - retrieve a namespace by its name
 * - retrieve a namespace by its ID
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * // Get info by namespace name
 * const byName = scaleway.containers.getNamespace({
 *     name: "my-namespace-name",
 * });
 * // Get info by namespace ID
 * const byId = scaleway.containers.getNamespace({
 *     namespaceId: "11111111-1111-1111-1111-111111111111",
 * });
 * ```
 */
export function getNamespaceOutput(args?: GetNamespaceOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetNamespaceResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("scaleway:containers/getNamespace:getNamespace", {
        "name": args.name,
        "namespaceId": args.namespaceId,
        "projectId": args.projectId,
        "region": args.region,
    }, opts);
}

/**
 * A collection of arguments for invoking getNamespace.
 */
export interface GetNamespaceOutputArgs {
    /**
     * The name of the namespace. Only one of `name` and `namespaceId` should be specified.
     */
    name?: pulumi.Input<string>;
    /**
     * The unique identifier of the namespace. Only one of `name` and `namespaceId` should be specified.
     */
    namespaceId?: pulumi.Input<string>;
    /**
     * `projectId`) The unique identifier of the project with which the namespace is associated.
     */
    projectId?: pulumi.Input<string>;
    /**
     * `region`) The region in which the namespace exists.
     */
    region?: pulumi.Input<string>;
}
