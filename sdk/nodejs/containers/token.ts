// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * The `scaleway.containers.Token` resource allows you to create and manage authentication tokens for Scaleway [Serverless Containers](https://www.scaleway.com/en/docs/serverless/containers/).
 *
 * Refer to the Containers tokens [documentation](https://www.scaleway.com/en/docs/serverless/containers/how-to/create-auth-token-from-console/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-containers/#path-tokens-list-all-tokens) for more information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.containers.Namespace("main", {name: "test-container-token-ns"});
 * const mainContainer = new scaleway.containers.Container("main", {namespaceId: main.id});
 * // Namespace Token
 * const namespace = new scaleway.containers.Token("namespace", {
 *     namespaceId: main.id,
 *     expiresAt: "2022-10-18T11:35:15+02:00",
 * });
 * // Container Token
 * const container = new scaleway.containers.Token("container", {containerId: mainContainer.id});
 * ```
 *
 * ## Import
 *
 * Tokens can be imported using `{region}/{id}`, as shown below:
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:containers/token:Token main fr-par/11111111-1111-1111-1111-111111111111
 * ```
 */
export class Token extends pulumi.CustomResource {
    /**
     * Get an existing Token resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TokenState, opts?: pulumi.CustomResourceOptions): Token {
        return new Token(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:containers/token:Token';

    /**
     * Returns true if the given object is an instance of Token.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Token {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Token.__pulumiType;
    }

    /**
     * The unique identifier of the container.
     *
     * > Only one of `namespaceId` or `containerId` must be set.
     */
    public readonly containerId!: pulumi.Output<string | undefined>;
    /**
     * The description of the token.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The expiration date of the token.
     */
    public readonly expiresAt!: pulumi.Output<string | undefined>;
    /**
     * The unique identifier of the Containers namespace.
     */
    public readonly namespaceId!: pulumi.Output<string | undefined>;
    /**
     * `region`). The region in which the namespace is created.
     *
     * > **Important** Updating any of the arguments above will recreate the token.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The token.
     */
    public /*out*/ readonly value!: pulumi.Output<string>;

    /**
     * Create a Token resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TokenArgs | TokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TokenState | undefined;
            resourceInputs["containerId"] = state ? state.containerId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["expiresAt"] = state ? state.expiresAt : undefined;
            resourceInputs["namespaceId"] = state ? state.namespaceId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as TokenArgs | undefined;
            resourceInputs["containerId"] = args ? args.containerId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["expiresAt"] = args ? args.expiresAt : undefined;
            resourceInputs["namespaceId"] = args ? args.namespaceId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["value"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "scaleway:index/containerToken:ContainerToken" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        const secretOpts = { additionalSecretOutputs: ["value"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Token.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Token resources.
 */
export interface TokenState {
    /**
     * The unique identifier of the container.
     *
     * > Only one of `namespaceId` or `containerId` must be set.
     */
    containerId?: pulumi.Input<string>;
    /**
     * The description of the token.
     */
    description?: pulumi.Input<string>;
    /**
     * The expiration date of the token.
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * The unique identifier of the Containers namespace.
     */
    namespaceId?: pulumi.Input<string>;
    /**
     * `region`). The region in which the namespace is created.
     *
     * > **Important** Updating any of the arguments above will recreate the token.
     */
    region?: pulumi.Input<string>;
    /**
     * The token.
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Token resource.
 */
export interface TokenArgs {
    /**
     * The unique identifier of the container.
     *
     * > Only one of `namespaceId` or `containerId` must be set.
     */
    containerId?: pulumi.Input<string>;
    /**
     * The description of the token.
     */
    description?: pulumi.Input<string>;
    /**
     * The expiration date of the token.
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * The unique identifier of the Containers namespace.
     */
    namespaceId?: pulumi.Input<string>;
    /**
     * `region`). The region in which the namespace is created.
     *
     * > **Important** Updating any of the arguments above will recreate the token.
     */
    region?: pulumi.Input<string>;
}
