// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Creates and manages Scaleway Database instance authorized IPs.
 * For more information refer to the [API documentation](https://www.scaleway.com/en/developers/api/managed-database-postgre-mysql/#acl-rules-allowed-ips).
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.databases.Instance("main", {
 *     name: "test-rdb",
 *     nodeType: "DB-DEV-S",
 *     engine: "PostgreSQL-15",
 *     isHaCluster: true,
 *     disableBackup: true,
 *     userName: "my_initial_user",
 *     password: "thiZ_is_v&ry_s3cret",
 * });
 * const mainAcl = new scaleway.databases.Acl("main", {
 *     instanceId: main.id,
 *     aclRules: [{
 *         ip: "1.2.3.4/32",
 *         description: "foo",
 *     }],
 * });
 * ```
 *
 * ### Multiple ACL Rules
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.databases.Acl("main", {
 *     instanceId: mainScalewayRdbInstance.id,
 *     aclRules: [
 *         {
 *             ip: "1.2.3.4/32",
 *             description: "Office IP",
 *         },
 *         {
 *             ip: "5.6.7.8/32",
 *             description: "Home IP",
 *         },
 *         {
 *             ip: "10.0.0.0/24",
 *             description: "Internal network",
 *         },
 *     ],
 * });
 * ```
 *
 * ### Dynamic ACL Rules with Variables
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const config = new pulumi.Config();
 * // Map of allowed IPs with descriptions
 * const allowedIps = config.getObject<Record<string, string>>("allowedIps") || {
 *     "1.2.3.4/32": "Office IP",
 *     "10.0.0.0/24": "Internal network",
 *     "5.6.7.8/32": "Home IP",
 * };
 * const main = new scaleway.databases.Acl("main", {
 *     aclRules: Object.entries(allowedIps).map(([k, v]) => ({key: k, value: v})).map(entry => ({
 *         ip: entry.key,
 *         description: entry.value,
 *     })),
 *     instanceId: mainScalewayRdbInstance.id,
 * });
 * ```
 *
 * ## Import
 *
 * Database Instance can be imported using the `{region}/{id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:databases/acl:Acl acl01 fr-par/11111111-1111-1111-1111-111111111111
 * ```
 */
export class Acl extends pulumi.CustomResource {
    /**
     * Get an existing Acl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AclState, opts?: pulumi.CustomResourceOptions): Acl {
        return new Acl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:databases/acl:Acl';

    /**
     * Returns true if the given object is an instance of Acl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Acl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Acl.__pulumiType;
    }

    /**
     * A list of ACLs (structure is described below)
     *
     * > **Important:** The `scaleway.databases.Acl` resource replaces **all** ACL rules for the given instance. Multiple `scaleway.databases.Acl` resources targeting the same `instanceId` will conflict with each other. Use multiple `aclRules` blocks within a single resource instead.
     */
    declare public readonly aclRules: pulumi.Output<outputs.databases.AclAclRule[]>;
    /**
     * UUID of the Database Instance.
     *
     * > **Important:** Updates to `instanceId` will recreate the Database ACL.
     */
    declare public readonly instanceId: pulumi.Output<string>;
    /**
     * `region`) The region in which the Database Instance should be created.
     */
    declare public readonly region: pulumi.Output<string | undefined>;

    /**
     * Create a Acl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AclArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AclArgs | AclState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AclState | undefined;
            resourceInputs["aclRules"] = state?.aclRules;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["region"] = state?.region;
        } else {
            const args = argsOrState as AclArgs | undefined;
            if (args?.aclRules === undefined && !opts.urn) {
                throw new Error("Missing required property 'aclRules'");
            }
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["aclRules"] = args?.aclRules;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["region"] = args?.region;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "scaleway:index/databaseAcl:DatabaseAcl" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Acl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Acl resources.
 */
export interface AclState {
    /**
     * A list of ACLs (structure is described below)
     *
     * > **Important:** The `scaleway.databases.Acl` resource replaces **all** ACL rules for the given instance. Multiple `scaleway.databases.Acl` resources targeting the same `instanceId` will conflict with each other. Use multiple `aclRules` blocks within a single resource instead.
     */
    aclRules?: pulumi.Input<pulumi.Input<inputs.databases.AclAclRule>[]>;
    /**
     * UUID of the Database Instance.
     *
     * > **Important:** Updates to `instanceId` will recreate the Database ACL.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * `region`) The region in which the Database Instance should be created.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Acl resource.
 */
export interface AclArgs {
    /**
     * A list of ACLs (structure is described below)
     *
     * > **Important:** The `scaleway.databases.Acl` resource replaces **all** ACL rules for the given instance. Multiple `scaleway.databases.Acl` resources targeting the same `instanceId` will conflict with each other. Use multiple `aclRules` blocks within a single resource instead.
     */
    aclRules: pulumi.Input<pulumi.Input<inputs.databases.AclAclRule>[]>;
    /**
     * UUID of the Database Instance.
     *
     * > **Important:** Updates to `instanceId` will recreate the Database ACL.
     */
    instanceId: pulumi.Input<string>;
    /**
     * `region`) The region in which the Database Instance should be created.
     */
    region?: pulumi.Input<string>;
}
