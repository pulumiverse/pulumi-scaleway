// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AclArgs, AclState } from "./acl";
export type Acl = import("./acl").Acl;
export const Acl: typeof import("./acl").Acl = null as any;
utilities.lazyLoad(exports, ["Acl"], () => require("./acl"));

export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { DatabaseBackupArgs, DatabaseBackupState } from "./databaseBackup";
export type DatabaseBackup = import("./databaseBackup").DatabaseBackup;
export const DatabaseBackup: typeof import("./databaseBackup").DatabaseBackup = null as any;
utilities.lazyLoad(exports, ["DatabaseBackup"], () => require("./databaseBackup"));

export { GetAclArgs, GetAclResult, GetAclOutputArgs } from "./getAcl";
export const getAcl: typeof import("./getAcl").getAcl = null as any;
export const getAclOutput: typeof import("./getAcl").getAclOutput = null as any;
utilities.lazyLoad(exports, ["getAcl","getAclOutput"], () => require("./getAcl"));

export { GetDatabaseArgs, GetDatabaseResult, GetDatabaseOutputArgs } from "./getDatabase";
export const getDatabase: typeof import("./getDatabase").getDatabase = null as any;
export const getDatabaseOutput: typeof import("./getDatabase").getDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabase","getDatabaseOutput"], () => require("./getDatabase"));

export { GetDatabaseBackupArgs, GetDatabaseBackupResult, GetDatabaseBackupOutputArgs } from "./getDatabaseBackup";
export const getDatabaseBackup: typeof import("./getDatabaseBackup").getDatabaseBackup = null as any;
export const getDatabaseBackupOutput: typeof import("./getDatabaseBackup").getDatabaseBackupOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseBackup","getDatabaseBackupOutput"], () => require("./getDatabaseBackup"));

export { GetInstanceArgs, GetInstanceResult, GetInstanceOutputArgs } from "./getInstance";
export const getInstance: typeof import("./getInstance").getInstance = null as any;
export const getInstanceOutput: typeof import("./getInstance").getInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getInstance","getInstanceOutput"], () => require("./getInstance"));

export { GetPrivilegeArgs, GetPrivilegeResult, GetPrivilegeOutputArgs } from "./getPrivilege";
export const getPrivilege: typeof import("./getPrivilege").getPrivilege = null as any;
export const getPrivilegeOutput: typeof import("./getPrivilege").getPrivilegeOutput = null as any;
utilities.lazyLoad(exports, ["getPrivilege","getPrivilegeOutput"], () => require("./getPrivilege"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { PrivilegeArgs, PrivilegeState } from "./privilege";
export type Privilege = import("./privilege").Privilege;
export const Privilege: typeof import("./privilege").Privilege = null as any;
utilities.lazyLoad(exports, ["Privilege"], () => require("./privilege"));

export { ReadReplicaArgs, ReadReplicaState } from "./readReplica";
export type ReadReplica = import("./readReplica").ReadReplica;
export const ReadReplica: typeof import("./readReplica").ReadReplica = null as any;
utilities.lazyLoad(exports, ["ReadReplica"], () => require("./readReplica"));

export { ServerlessDatabaseArgs, ServerlessDatabaseState } from "./serverlessDatabase";
export type ServerlessDatabase = import("./serverlessDatabase").ServerlessDatabase;
export const ServerlessDatabase: typeof import("./serverlessDatabase").ServerlessDatabase = null as any;
utilities.lazyLoad(exports, ["ServerlessDatabase"], () => require("./serverlessDatabase"));

export { SnapshotArgs, SnapshotState } from "./snapshot";
export type Snapshot = import("./snapshot").Snapshot;
export const Snapshot: typeof import("./snapshot").Snapshot = null as any;
utilities.lazyLoad(exports, ["Snapshot"], () => require("./snapshot"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "scaleway:databases/acl:Acl":
                return new Acl(name, <any>undefined, { urn })
            case "scaleway:databases/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "scaleway:databases/databaseBackup:DatabaseBackup":
                return new DatabaseBackup(name, <any>undefined, { urn })
            case "scaleway:databases/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "scaleway:databases/privilege:Privilege":
                return new Privilege(name, <any>undefined, { urn })
            case "scaleway:databases/readReplica:ReadReplica":
                return new ReadReplica(name, <any>undefined, { urn })
            case "scaleway:databases/serverlessDatabase:ServerlessDatabase":
                return new ServerlessDatabase(name, <any>undefined, { urn })
            case "scaleway:databases/snapshot:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            case "scaleway:databases/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("scaleway", "databases/acl", _module)
pulumi.runtime.registerResourceModule("scaleway", "databases/database", _module)
pulumi.runtime.registerResourceModule("scaleway", "databases/databaseBackup", _module)
pulumi.runtime.registerResourceModule("scaleway", "databases/instance", _module)
pulumi.runtime.registerResourceModule("scaleway", "databases/privilege", _module)
pulumi.runtime.registerResourceModule("scaleway", "databases/readReplica", _module)
pulumi.runtime.registerResourceModule("scaleway", "databases/serverlessDatabase", _module)
pulumi.runtime.registerResourceModule("scaleway", "databases/snapshot", _module)
pulumi.runtime.registerResourceModule("scaleway", "databases/user", _module)
