// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates and manages database users.
 * For more information refer to the [API documentation](https://www.scaleway.com/en/developers/api/managed-database-postgre-mysql/).
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as random from "@pulumi/random";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.databases.Instance("main", {
 *     name: "test-rdb",
 *     nodeType: "DB-DEV-S",
 *     engine: "PostgreSQL-15",
 *     isHaCluster: true,
 *     disableBackup: true,
 *     userName: "my_initial_user",
 *     password: "thiZ_is_v&ry_s3cret",
 * });
 * const dbPassword = new random.RandomPassword("db_password", {
 *     length: 16,
 *     special: true,
 * });
 * const dbAdmin = new scaleway.databases.User("db_admin", {
 *     instanceId: main.id,
 *     name: "devtools",
 *     password: dbPassword.result,
 *     isAdmin: true,
 * });
 * ```
 *
 * ## Import
 *
 * Database users can be imported using `{region}/{instance_id}/{user_name}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:databases/user:User admin fr-par/11111111-1111-1111-1111-111111111111/admin
 * ```
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:databases/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * UUID of the Database Instance.
     *
     * > **Important:** Updates to `instanceId` will recreate the database user.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Grant admin permissions to the database user.
     */
    public readonly isAdmin!: pulumi.Output<boolean | undefined>;
    /**
     * database user name.
     *
     * > **Important:** Updates to `name` will recreate the database user.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * database user password.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * The Scaleway region this resource resides in.
     */
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["isAdmin"] = state ? state.isAdmin : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["isAdmin"] = args ? args.isAdmin : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "scaleway:index/databaseUser:DatabaseUser" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * UUID of the Database Instance.
     *
     * > **Important:** Updates to `instanceId` will recreate the database user.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Grant admin permissions to the database user.
     */
    isAdmin?: pulumi.Input<boolean>;
    /**
     * database user name.
     *
     * > **Important:** Updates to `name` will recreate the database user.
     */
    name?: pulumi.Input<string>;
    /**
     * database user password.
     */
    password?: pulumi.Input<string>;
    /**
     * The Scaleway region this resource resides in.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * UUID of the Database Instance.
     *
     * > **Important:** Updates to `instanceId` will recreate the database user.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Grant admin permissions to the database user.
     */
    isAdmin?: pulumi.Input<boolean>;
    /**
     * database user name.
     *
     * > **Important:** Updates to `name` will recreate the database user.
     */
    name?: pulumi.Input<string>;
    /**
     * database user password.
     */
    password: pulumi.Input<string>;
    /**
     * The Scaleway region this resource resides in.
     */
    region?: pulumi.Input<string>;
}
