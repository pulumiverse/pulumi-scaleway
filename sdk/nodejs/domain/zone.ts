// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * This section explains how to import a zone using the `{subdomain}.{domain}` format.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:domain/zone:Zone test test.scaleway-terraform.com
 * ```
 */
export class Zone extends pulumi.CustomResource {
    /**
     * Get an existing Zone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZoneState, opts?: pulumi.CustomResourceOptions): Zone {
        return new Zone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:domain/zone:Zone';

    /**
     * Returns true if the given object is an instance of Zone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Zone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Zone.__pulumiType;
    }

    /**
     * The main domain where the DNS zone will be created.
     */
    declare public readonly domain: pulumi.Output<string>;
    /**
     * Message.
     */
    declare public /*out*/ readonly message: pulumi.Output<string>;
    /**
     * The list of same servers for the zone.
     */
    declare public /*out*/ readonly ns: pulumi.Output<string[]>;
    /**
     * The default list of same servers for the zone.
     */
    declare public /*out*/ readonly nsDefaults: pulumi.Output<string[]>;
    /**
     * The master list of same servers for the zone.
     */
    declare public /*out*/ readonly nsMasters: pulumi.Output<string[]>;
    /**
     * `projectId`) The ID of the Project associated with the domain.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * The status of the domain zone.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The name of the subdomain (zone name) to create within the domain.
     */
    declare public readonly subdomain: pulumi.Output<string>;
    /**
     * The date and time at which the DNS zone was last updated.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a Zone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZoneArgs | ZoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZoneState | undefined;
            resourceInputs["domain"] = state?.domain;
            resourceInputs["message"] = state?.message;
            resourceInputs["ns"] = state?.ns;
            resourceInputs["nsDefaults"] = state?.nsDefaults;
            resourceInputs["nsMasters"] = state?.nsMasters;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["status"] = state?.status;
            resourceInputs["subdomain"] = state?.subdomain;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as ZoneArgs | undefined;
            if (args?.domain === undefined && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if (args?.subdomain === undefined && !opts.urn) {
                throw new Error("Missing required property 'subdomain'");
            }
            resourceInputs["domain"] = args?.domain;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["subdomain"] = args?.subdomain;
            resourceInputs["message"] = undefined /*out*/;
            resourceInputs["ns"] = undefined /*out*/;
            resourceInputs["nsDefaults"] = undefined /*out*/;
            resourceInputs["nsMasters"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "scaleway:index/domainZone:DomainZone" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Zone.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Zone resources.
 */
export interface ZoneState {
    /**
     * The main domain where the DNS zone will be created.
     */
    domain?: pulumi.Input<string>;
    /**
     * Message.
     */
    message?: pulumi.Input<string>;
    /**
     * The list of same servers for the zone.
     */
    ns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The default list of same servers for the zone.
     */
    nsDefaults?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The master list of same servers for the zone.
     */
    nsMasters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * `projectId`) The ID of the Project associated with the domain.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The status of the domain zone.
     */
    status?: pulumi.Input<string>;
    /**
     * The name of the subdomain (zone name) to create within the domain.
     */
    subdomain?: pulumi.Input<string>;
    /**
     * The date and time at which the DNS zone was last updated.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Zone resource.
 */
export interface ZoneArgs {
    /**
     * The main domain where the DNS zone will be created.
     */
    domain: pulumi.Input<string>;
    /**
     * `projectId`) The ID of the Project associated with the domain.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The name of the subdomain (zone name) to create within the domain.
     */
    subdomain: pulumi.Input<string>;
}
