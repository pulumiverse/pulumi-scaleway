// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates and manages Scaleway Edge Services Cache Stages.
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.EdgeServicesCacheStage("main", {
 *     pipelineId: mainScalewayEdgeServicesPipeline.id,
 *     backendStageId: mainScalewayEdgeServicesBackendStage.id,
 * });
 * ```
 *
 * ### Purge request
 *
 * ## Import
 *
 * Cache stages can be imported using the `{id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:index/edgeServicesCacheStage:EdgeServicesCacheStage basic 11111111-1111-1111-1111-111111111111
 * ```
 */
export class EdgeServicesCacheStage extends pulumi.CustomResource {
    /**
     * Get an existing EdgeServicesCacheStage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EdgeServicesCacheStageState, opts?: pulumi.CustomResourceOptions): EdgeServicesCacheStage {
        return new EdgeServicesCacheStage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/edgeServicesCacheStage:EdgeServicesCacheStage';

    /**
     * Returns true if the given object is an instance of EdgeServicesCacheStage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EdgeServicesCacheStage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EdgeServicesCacheStage.__pulumiType;
    }

    /**
     * The backend stage ID the cache stage will be linked to. Only one of `backendStageId`, `routeStageId` and `wafStageId` should be specified.
     */
    declare public readonly backendStageId: pulumi.Output<string>;
    /**
     * The date and time of the creation of the cache stage.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The Time To Live (TTL) in seconds. Defines how long content is cached.
     */
    declare public readonly fallbackTtl: pulumi.Output<number | undefined>;
    /**
     * Defines whether responses to requests with cookies must be stored in the cache.
     */
    declare public readonly includeCookies: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the pipeline.
     */
    declare public readonly pipelineId: pulumi.Output<string>;
    /**
     * `projectId`) The ID of the project the cache stage is associated with.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * The Scaleway Object Storage origin bucket (S3) linked to the backend stage.
     */
    declare public readonly purgeRequests: pulumi.Output<outputs.EdgeServicesCacheStagePurgeRequest[] | undefined>;
    /**
     * Trigger a refresh of the cache by changing this field's value.
     */
    declare public readonly refreshCache: pulumi.Output<string | undefined>;
    /**
     * The route stage ID the cache stage will be linked to. Only one of `backendStageId`, `routeStageId` and `wafStageId` should be specified.
     */
    declare public readonly routeStageId: pulumi.Output<string>;
    /**
     * The date and time of the last update of the cache stage.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * The WAF stage ID the cache stage will be linked to. Only one of `backendStageId`, `routeStageId` and `wafStageId` should be specified.
     */
    declare public readonly wafStageId: pulumi.Output<string>;

    /**
     * Create a EdgeServicesCacheStage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EdgeServicesCacheStageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EdgeServicesCacheStageArgs | EdgeServicesCacheStageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EdgeServicesCacheStageState | undefined;
            resourceInputs["backendStageId"] = state?.backendStageId;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["fallbackTtl"] = state?.fallbackTtl;
            resourceInputs["includeCookies"] = state?.includeCookies;
            resourceInputs["pipelineId"] = state?.pipelineId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["purgeRequests"] = state?.purgeRequests;
            resourceInputs["refreshCache"] = state?.refreshCache;
            resourceInputs["routeStageId"] = state?.routeStageId;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["wafStageId"] = state?.wafStageId;
        } else {
            const args = argsOrState as EdgeServicesCacheStageArgs | undefined;
            if (args?.pipelineId === undefined && !opts.urn) {
                throw new Error("Missing required property 'pipelineId'");
            }
            resourceInputs["backendStageId"] = args?.backendStageId;
            resourceInputs["fallbackTtl"] = args?.fallbackTtl;
            resourceInputs["includeCookies"] = args?.includeCookies;
            resourceInputs["pipelineId"] = args?.pipelineId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["purgeRequests"] = args?.purgeRequests;
            resourceInputs["refreshCache"] = args?.refreshCache;
            resourceInputs["routeStageId"] = args?.routeStageId;
            resourceInputs["wafStageId"] = args?.wafStageId;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EdgeServicesCacheStage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EdgeServicesCacheStage resources.
 */
export interface EdgeServicesCacheStageState {
    /**
     * The backend stage ID the cache stage will be linked to. Only one of `backendStageId`, `routeStageId` and `wafStageId` should be specified.
     */
    backendStageId?: pulumi.Input<string>;
    /**
     * The date and time of the creation of the cache stage.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The Time To Live (TTL) in seconds. Defines how long content is cached.
     */
    fallbackTtl?: pulumi.Input<number>;
    /**
     * Defines whether responses to requests with cookies must be stored in the cache.
     */
    includeCookies?: pulumi.Input<boolean>;
    /**
     * The ID of the pipeline.
     */
    pipelineId?: pulumi.Input<string>;
    /**
     * `projectId`) The ID of the project the cache stage is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The Scaleway Object Storage origin bucket (S3) linked to the backend stage.
     */
    purgeRequests?: pulumi.Input<pulumi.Input<inputs.EdgeServicesCacheStagePurgeRequest>[]>;
    /**
     * Trigger a refresh of the cache by changing this field's value.
     */
    refreshCache?: pulumi.Input<string>;
    /**
     * The route stage ID the cache stage will be linked to. Only one of `backendStageId`, `routeStageId` and `wafStageId` should be specified.
     */
    routeStageId?: pulumi.Input<string>;
    /**
     * The date and time of the last update of the cache stage.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The WAF stage ID the cache stage will be linked to. Only one of `backendStageId`, `routeStageId` and `wafStageId` should be specified.
     */
    wafStageId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EdgeServicesCacheStage resource.
 */
export interface EdgeServicesCacheStageArgs {
    /**
     * The backend stage ID the cache stage will be linked to. Only one of `backendStageId`, `routeStageId` and `wafStageId` should be specified.
     */
    backendStageId?: pulumi.Input<string>;
    /**
     * The Time To Live (TTL) in seconds. Defines how long content is cached.
     */
    fallbackTtl?: pulumi.Input<number>;
    /**
     * Defines whether responses to requests with cookies must be stored in the cache.
     */
    includeCookies?: pulumi.Input<boolean>;
    /**
     * The ID of the pipeline.
     */
    pipelineId: pulumi.Input<string>;
    /**
     * `projectId`) The ID of the project the cache stage is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The Scaleway Object Storage origin bucket (S3) linked to the backend stage.
     */
    purgeRequests?: pulumi.Input<pulumi.Input<inputs.EdgeServicesCacheStagePurgeRequest>[]>;
    /**
     * Trigger a refresh of the cache by changing this field's value.
     */
    refreshCache?: pulumi.Input<string>;
    /**
     * The route stage ID the cache stage will be linked to. Only one of `backendStageId`, `routeStageId` and `wafStageId` should be specified.
     */
    routeStageId?: pulumi.Input<string>;
    /**
     * The WAF stage ID the cache stage will be linked to. Only one of `backendStageId`, `routeStageId` and `wafStageId` should be specified.
     */
    wafStageId?: pulumi.Input<string>;
}
