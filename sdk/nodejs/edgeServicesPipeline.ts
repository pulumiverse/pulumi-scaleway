// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creates and manages Scaleway Edge Services Pipelines.
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.EdgeServicesPipeline("main", {
 *     name: "pipeline-name",
 *     description: "pipeline description",
 * });
 * ```
 *
 * ### Complete pipeline
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.EdgeServicesPipeline("main", {
 *     name: "pipeline-name",
 *     description: "pipeline description",
 * });
 * const mainEdgeServicesBackendStage = new scaleway.EdgeServicesBackendStage("main", {
 *     pipelineId: main.id,
 *     s3BackendConfig: {
 *         bucketName: "my-bucket-name",
 *         bucketRegion: "fr-par",
 *     },
 * });
 * const mainEdgeServicesWafStage = new scaleway.EdgeServicesWafStage("main", {
 *     pipelineId: main.id,
 *     backendStageId: mainEdgeServicesBackendStage.id,
 *     mode: "enable",
 *     paranoiaLevel: 3,
 * });
 * const mainEdgeServicesRouteStage = new scaleway.EdgeServicesRouteStage("main", {
 *     pipelineId: main.id,
 *     wafStageId: mainEdgeServicesWafStage.id,
 *     rules: [{
 *         backendStageId: mainEdgeServicesBackendStage.id,
 *         ruleHttpMatch: {
 *             methodFilters: [
 *                 "get",
 *                 "post",
 *             ],
 *             pathFilter: {
 *                 pathFilterType: "regex",
 *                 value: ".*",
 *             },
 *         },
 *     }],
 * });
 * const mainEdgeServicesCacheStage = new scaleway.EdgeServicesCacheStage("main", {
 *     pipelineId: main.id,
 *     routeStageId: mainEdgeServicesRouteStage.id,
 * });
 * const mainEdgeServicesTlsStage = new scaleway.EdgeServicesTlsStage("main", {
 *     pipelineId: main.id,
 *     cacheStageId: mainEdgeServicesCacheStage.id,
 *     managedCertificate: true,
 * });
 * const mainEdgeServicesDnsStage = new scaleway.EdgeServicesDnsStage("main", {
 *     pipelineId: main.id,
 *     tlsStageId: mainEdgeServicesTlsStage.id,
 *     fqdns: ["subdomain.example.com"],
 * });
 * const mainEdgeServicesHeadStage = new scaleway.EdgeServicesHeadStage("main", {
 *     pipelineId: main.id,
 *     headStageId: mainEdgeServicesDnsStage.id,
 * });
 * ```
 *
 * ## Import
 *
 * Pipelines can be imported using the `{id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:index/edgeServicesPipeline:EdgeServicesPipeline basic 11111111-1111-1111-1111-111111111111
 * ```
 */
export class EdgeServicesPipeline extends pulumi.CustomResource {
    /**
     * Get an existing EdgeServicesPipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EdgeServicesPipelineState, opts?: pulumi.CustomResourceOptions): EdgeServicesPipeline {
        return new EdgeServicesPipeline(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/edgeServicesPipeline:EdgeServicesPipeline';

    /**
     * Returns true if the given object is an instance of EdgeServicesPipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EdgeServicesPipeline {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EdgeServicesPipeline.__pulumiType;
    }

    /**
     * The date and time of the creation of the pipeline.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The description of the pipeline.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The name of the pipeline.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * `projectId`) The ID of the project the pipeline is associated with.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * The status of user pipeline.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The date and time of the last update of the pipeline.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a EdgeServicesPipeline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EdgeServicesPipelineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EdgeServicesPipelineArgs | EdgeServicesPipelineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EdgeServicesPipelineState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["name"] = state?.name;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["status"] = state?.status;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as EdgeServicesPipelineArgs | undefined;
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EdgeServicesPipeline.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EdgeServicesPipeline resources.
 */
export interface EdgeServicesPipelineState {
    /**
     * The date and time of the creation of the pipeline.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the pipeline.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the pipeline.
     */
    name?: pulumi.Input<string>;
    /**
     * `projectId`) The ID of the project the pipeline is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The status of user pipeline.
     */
    status?: pulumi.Input<string>;
    /**
     * The date and time of the last update of the pipeline.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EdgeServicesPipeline resource.
 */
export interface EdgeServicesPipelineArgs {
    /**
     * The description of the pipeline.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the pipeline.
     */
    name?: pulumi.Input<string>;
    /**
     * `projectId`) The ID of the project the pipeline is associated with.
     */
    projectId?: pulumi.Input<string>;
}
