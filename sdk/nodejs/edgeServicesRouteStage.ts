// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates and manages Scaleway Edge Services Route Stages.
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.EdgeServicesRouteStage("main", {
 *     pipelineId: mainScalewayEdgeServicesPipeline.id,
 *     wafStageId: waf.id,
 *     rules: [{
 *         backendStageId: backend.id,
 *         ruleHttpMatch: {
 *             methodFilters: [
 *                 "get",
 *                 "post",
 *             ],
 *             pathFilter: {
 *                 pathFilterType: "regex",
 *                 value: ".*",
 *             },
 *         },
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Route stages can be imported using the `{id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:index/edgeServicesRouteStage:EdgeServicesRouteStage basic 11111111-1111-1111-1111-111111111111
 * ```
 */
export class EdgeServicesRouteStage extends pulumi.CustomResource {
    /**
     * Get an existing EdgeServicesRouteStage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EdgeServicesRouteStageState, opts?: pulumi.CustomResourceOptions): EdgeServicesRouteStage {
        return new EdgeServicesRouteStage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/edgeServicesRouteStage:EdgeServicesRouteStage';

    /**
     * Returns true if the given object is an instance of EdgeServicesRouteStage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EdgeServicesRouteStage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EdgeServicesRouteStage.__pulumiType;
    }

    /**
     * The date and time of the creation of the route stage.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The ID of the pipeline.
     */
    public readonly pipelineId!: pulumi.Output<string>;
    /**
     * `projectId`) The ID of the project the route stage is associated with.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The list of rules to be checked against every HTTP request. The first matching rule will forward the request to its specified backend stage. If no rules are matched, the request is forwarded to the WAF stage defined by `wafStageId`.
     */
    public readonly rules!: pulumi.Output<outputs.EdgeServicesRouteStageRule[] | undefined>;
    /**
     * The date and time of the last update of the route stage.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The ID of the WAF stage HTTP requests should be forwarded to when no rules are matched.
     */
    public readonly wafStageId!: pulumi.Output<string | undefined>;

    /**
     * Create a EdgeServicesRouteStage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EdgeServicesRouteStageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EdgeServicesRouteStageArgs | EdgeServicesRouteStageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EdgeServicesRouteStageState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["pipelineId"] = state ? state.pipelineId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["wafStageId"] = state ? state.wafStageId : undefined;
        } else {
            const args = argsOrState as EdgeServicesRouteStageArgs | undefined;
            if ((!args || args.pipelineId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pipelineId'");
            }
            resourceInputs["pipelineId"] = args ? args.pipelineId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["wafStageId"] = args ? args.wafStageId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EdgeServicesRouteStage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EdgeServicesRouteStage resources.
 */
export interface EdgeServicesRouteStageState {
    /**
     * The date and time of the creation of the route stage.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The ID of the pipeline.
     */
    pipelineId?: pulumi.Input<string>;
    /**
     * `projectId`) The ID of the project the route stage is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The list of rules to be checked against every HTTP request. The first matching rule will forward the request to its specified backend stage. If no rules are matched, the request is forwarded to the WAF stage defined by `wafStageId`.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.EdgeServicesRouteStageRule>[]>;
    /**
     * The date and time of the last update of the route stage.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The ID of the WAF stage HTTP requests should be forwarded to when no rules are matched.
     */
    wafStageId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EdgeServicesRouteStage resource.
 */
export interface EdgeServicesRouteStageArgs {
    /**
     * The ID of the pipeline.
     */
    pipelineId: pulumi.Input<string>;
    /**
     * `projectId`) The ID of the project the route stage is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The list of rules to be checked against every HTTP request. The first matching rule will forward the request to its specified backend stage. If no rules are matched, the request is forwarded to the WAF stage defined by `wafStageId`.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.EdgeServicesRouteStageRule>[]>;
    /**
     * The ID of the WAF stage HTTP requests should be forwarded to when no rules are matched.
     */
    wafStageId?: pulumi.Input<string>;
}
