// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creates and manages a Scaleway File Storage (NFS) filesystem in a specific region. A filesystem is a scalable storage resource that can be mounted on Compute instances and is typically used for shared, persistent storage.
 *
 * This resource allows you to define and manage the size, tags, and region of a filesystem, and track its creation and update timestamps, current status, and number of active attachments.
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const file = new scaleway.FileFilesystem("file", {
 *     name: "my-nfs-filesystem",
 *     size: 100000000000,
 * });
 * ```
 *
 * ## Import
 *
 * File Storage filesystems can be imported using the `{region}/{id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:index/fileFilesystem:FileFilesystem main fr-par/11111111-1111-1111-1111-111111111111
 * ```
 */
export class FileFilesystem extends pulumi.CustomResource {
    /**
     * Get an existing FileFilesystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FileFilesystemState, opts?: pulumi.CustomResourceOptions): FileFilesystem {
        return new FileFilesystem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/fileFilesystem:FileFilesystem';

    /**
     * Returns true if the given object is an instance of FileFilesystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FileFilesystem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FileFilesystem.__pulumiType;
    }

    /**
     * The date and time when the File Storage filesystem was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The name of the filesystem. If not provided, a random name will be generated.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The number of active attachments (mounts) on the filesystem.
     */
    public /*out*/ readonly numberOfAttachments!: pulumi.Output<number>;
    /**
     * `organizationId`) The ID of the organization the user is associated with.
     */
    public /*out*/ readonly organizationId!: pulumi.Output<string>;
    /**
     * `projectId`) The ID of the project the server is
     * associated with.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * `region`) The region where the filesystem will be created (e.g., fr-par, nl-ams).
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The size of the filesystem in bytes, with a granularity of 100 GB (10¹¹ bytes).
     * - Minimum: 100 GB (100000000000 bytes)
     * - Maximum: 10 TB (10000000000000 bytes)
     */
    public readonly size!: pulumi.Output<number>;
    /**
     * The current status of the filesystem. Possible values include creating, available, etc.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * A list of tags associated with the filesystem.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The date and time of the last update to the File Storage filesystem.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a FileFilesystem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FileFilesystemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FileFilesystemArgs | FileFilesystemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FileFilesystemState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numberOfAttachments"] = state ? state.numberOfAttachments : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as FileFilesystemArgs | undefined;
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["numberOfAttachments"] = undefined /*out*/;
            resourceInputs["organizationId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FileFilesystem.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FileFilesystem resources.
 */
export interface FileFilesystemState {
    /**
     * The date and time when the File Storage filesystem was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The name of the filesystem. If not provided, a random name will be generated.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of active attachments (mounts) on the filesystem.
     */
    numberOfAttachments?: pulumi.Input<number>;
    /**
     * `organizationId`) The ID of the organization the user is associated with.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * `projectId`) The ID of the project the server is
     * associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * `region`) The region where the filesystem will be created (e.g., fr-par, nl-ams).
     */
    region?: pulumi.Input<string>;
    /**
     * The size of the filesystem in bytes, with a granularity of 100 GB (10¹¹ bytes).
     * - Minimum: 100 GB (100000000000 bytes)
     * - Maximum: 10 TB (10000000000000 bytes)
     */
    size?: pulumi.Input<number>;
    /**
     * The current status of the filesystem. Possible values include creating, available, etc.
     */
    status?: pulumi.Input<string>;
    /**
     * A list of tags associated with the filesystem.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The date and time of the last update to the File Storage filesystem.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FileFilesystem resource.
 */
export interface FileFilesystemArgs {
    /**
     * The name of the filesystem. If not provided, a random name will be generated.
     */
    name?: pulumi.Input<string>;
    /**
     * `projectId`) The ID of the project the server is
     * associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * `region`) The region where the filesystem will be created (e.g., fr-par, nl-ams).
     */
    region?: pulumi.Input<string>;
    /**
     * The size of the filesystem in bytes, with a granularity of 100 GB (10¹¹ bytes).
     * - Minimum: 100 GB (100000000000 bytes)
     * - Maximum: 10 TB (10000000000000 bytes)
     */
    size: pulumi.Input<number>;
    /**
     * A list of tags associated with the filesystem.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
