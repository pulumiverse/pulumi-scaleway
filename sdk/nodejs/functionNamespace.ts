// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `scaleway.functions.Namespace` resource allows you to
 * for Scaleway [Serverless Functions](https://www.scaleway.com/en/docs/serverless/functions/).
 *
 * Refer to the Functions namespace [documentation](https://www.scaleway.com/en/docs/serverless/functions/how-to/create-manage-delete-functions-namespace/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-functions/#path-namespaces-list-all-your-namespaces) for more information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.functions.Namespace("main", {
 *     name: "main-function-namespace",
 *     description: "Main function namespace",
 *     tags: [
 *         "tag1",
 *         "tag2",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Functions namespaces can be imported using `{region}/{id}`, as shown below:
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:index/functionNamespace:FunctionNamespace main fr-par/11111111-1111-1111-1111-111111111111
 * ```
 *
 * @deprecated scaleway.index/functionnamespace.FunctionNamespace has been deprecated in favor of scaleway.functions/namespace.Namespace
 */
export class FunctionNamespace extends pulumi.CustomResource {
    /**
     * Get an existing FunctionNamespace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FunctionNamespaceState, opts?: pulumi.CustomResourceOptions): FunctionNamespace {
        pulumi.log.warn("FunctionNamespace is deprecated: scaleway.index/functionnamespace.FunctionNamespace has been deprecated in favor of scaleway.functions/namespace.Namespace")
        return new FunctionNamespace(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/functionNamespace:FunctionNamespace';

    /**
     * Returns true if the given object is an instance of FunctionNamespace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FunctionNamespace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FunctionNamespace.__pulumiType;
    }

    /**
     * Activates VPC integration for the namespace. Functions of a namespace with VPC integration activated will be able to connect to a Private Network.
     *
     * > **Important:** VPC integration is now available on all namespaces, so this field is not configurable anymore and its value will always be "true".
     *
     * @deprecated VPC integration is now available on all namespaces, so this field is not configurable anymore and its value will always be "true".
     */
    declare public readonly activateVpcIntegration: pulumi.Output<boolean | undefined>;
    /**
     * The description of the namespace.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The environment variables of the namespace.
     */
    declare public readonly environmentVariables: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The unique name of the Functions namespace.
     *
     * > **Important** Updates to the `name` argument will recreate the namespace.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The Organization ID with which the namespace is associated.
     */
    declare public /*out*/ readonly organizationId: pulumi.Output<string>;
    /**
     * `projectId`) The unique identifier of the project that contains the namespace.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * `region`). The region in which the namespace is created.
     */
    declare public readonly region: pulumi.Output<string | undefined>;
    /**
     * The registry endpoint of the namespace.
     */
    declare public /*out*/ readonly registryEndpoint: pulumi.Output<string>;
    /**
     * The registry namespace ID of the namespace.
     */
    declare public /*out*/ readonly registryNamespaceId: pulumi.Output<string>;
    /**
     * The secret environment variables of the namespace.
     */
    declare public readonly secretEnvironmentVariables: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The list of tags associated with the namespace.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;

    /**
     * Create a FunctionNamespace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated scaleway.index/functionnamespace.FunctionNamespace has been deprecated in favor of scaleway.functions/namespace.Namespace */
    constructor(name: string, args?: FunctionNamespaceArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated scaleway.index/functionnamespace.FunctionNamespace has been deprecated in favor of scaleway.functions/namespace.Namespace */
    constructor(name: string, argsOrState?: FunctionNamespaceArgs | FunctionNamespaceState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("FunctionNamespace is deprecated: scaleway.index/functionnamespace.FunctionNamespace has been deprecated in favor of scaleway.functions/namespace.Namespace")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FunctionNamespaceState | undefined;
            resourceInputs["activateVpcIntegration"] = state?.activateVpcIntegration;
            resourceInputs["description"] = state?.description;
            resourceInputs["environmentVariables"] = state?.environmentVariables;
            resourceInputs["name"] = state?.name;
            resourceInputs["organizationId"] = state?.organizationId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["region"] = state?.region;
            resourceInputs["registryEndpoint"] = state?.registryEndpoint;
            resourceInputs["registryNamespaceId"] = state?.registryNamespaceId;
            resourceInputs["secretEnvironmentVariables"] = state?.secretEnvironmentVariables;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as FunctionNamespaceArgs | undefined;
            resourceInputs["activateVpcIntegration"] = args?.activateVpcIntegration;
            resourceInputs["description"] = args?.description;
            resourceInputs["environmentVariables"] = args?.environmentVariables;
            resourceInputs["name"] = args?.name;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["region"] = args?.region;
            resourceInputs["secretEnvironmentVariables"] = args?.secretEnvironmentVariables ? pulumi.secret(args.secretEnvironmentVariables) : undefined;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["organizationId"] = undefined /*out*/;
            resourceInputs["registryEndpoint"] = undefined /*out*/;
            resourceInputs["registryNamespaceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretEnvironmentVariables"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(FunctionNamespace.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FunctionNamespace resources.
 */
export interface FunctionNamespaceState {
    /**
     * Activates VPC integration for the namespace. Functions of a namespace with VPC integration activated will be able to connect to a Private Network.
     *
     * > **Important:** VPC integration is now available on all namespaces, so this field is not configurable anymore and its value will always be "true".
     *
     * @deprecated VPC integration is now available on all namespaces, so this field is not configurable anymore and its value will always be "true".
     */
    activateVpcIntegration?: pulumi.Input<boolean>;
    /**
     * The description of the namespace.
     */
    description?: pulumi.Input<string>;
    /**
     * The environment variables of the namespace.
     */
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The unique name of the Functions namespace.
     *
     * > **Important** Updates to the `name` argument will recreate the namespace.
     */
    name?: pulumi.Input<string>;
    /**
     * The Organization ID with which the namespace is associated.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * `projectId`) The unique identifier of the project that contains the namespace.
     */
    projectId?: pulumi.Input<string>;
    /**
     * `region`). The region in which the namespace is created.
     */
    region?: pulumi.Input<string>;
    /**
     * The registry endpoint of the namespace.
     */
    registryEndpoint?: pulumi.Input<string>;
    /**
     * The registry namespace ID of the namespace.
     */
    registryNamespaceId?: pulumi.Input<string>;
    /**
     * The secret environment variables of the namespace.
     */
    secretEnvironmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The list of tags associated with the namespace.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a FunctionNamespace resource.
 */
export interface FunctionNamespaceArgs {
    /**
     * Activates VPC integration for the namespace. Functions of a namespace with VPC integration activated will be able to connect to a Private Network.
     *
     * > **Important:** VPC integration is now available on all namespaces, so this field is not configurable anymore and its value will always be "true".
     *
     * @deprecated VPC integration is now available on all namespaces, so this field is not configurable anymore and its value will always be "true".
     */
    activateVpcIntegration?: pulumi.Input<boolean>;
    /**
     * The description of the namespace.
     */
    description?: pulumi.Input<string>;
    /**
     * The environment variables of the namespace.
     */
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The unique name of the Functions namespace.
     *
     * > **Important** Updates to the `name` argument will recreate the namespace.
     */
    name?: pulumi.Input<string>;
    /**
     * `projectId`) The unique identifier of the project that contains the namespace.
     */
    projectId?: pulumi.Input<string>;
    /**
     * `region`). The region in which the namespace is created.
     */
    region?: pulumi.Input<string>;
    /**
     * The secret environment variables of the namespace.
     */
    secretEnvironmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The list of tags associated with the namespace.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
