// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `scaleway.functions.Token` resource allows you to create and manage authentication tokens for Scaleway [Serverless Functions](https://www.scaleway.com/en/docs/serverless/functions/).
 *
 * Refer to the Functions tokens [documentation](https://www.scaleway.com/en/docs/serverless/functions/how-to/create-auth-token-from-console/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-functions/#path-tokens-list-all-tokens) for more information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.functions.Namespace("main", {name: "test-function-token-ns"});
 * const mainFunction = new scaleway.functions.Function("main", {
 *     namespaceId: main.id,
 *     runtime: "go118",
 *     handler: "Handle",
 *     privacy: "private",
 * });
 * // Namespace Token
 * const namespace = new scaleway.functions.Token("namespace", {
 *     namespaceId: main.id,
 *     expiresAt: "2022-10-18T11:35:15+02:00",
 * });
 * // Function Token
 * const _function = new scaleway.functions.Token("function", {functionId: mainFunction.id});
 * ```
 *
 * ## Import
 *
 * Tokens can be imported using `{region}/{id}`, as shown below:
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:index/functionToken:FunctionToken main fr-par/11111111-1111-1111-1111-111111111111
 * ```
 *
 * @deprecated scaleway.index/functiontoken.FunctionToken has been deprecated in favor of scaleway.functions/token.Token
 */
export class FunctionToken extends pulumi.CustomResource {
    /**
     * Get an existing FunctionToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FunctionTokenState, opts?: pulumi.CustomResourceOptions): FunctionToken {
        pulumi.log.warn("FunctionToken is deprecated: scaleway.index/functiontoken.FunctionToken has been deprecated in favor of scaleway.functions/token.Token")
        return new FunctionToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/functionToken:FunctionToken';

    /**
     * Returns true if the given object is an instance of FunctionToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FunctionToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FunctionToken.__pulumiType;
    }

    /**
     * The description of the token.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The expiration date of the token.
     */
    declare public readonly expiresAt: pulumi.Output<string | undefined>;
    /**
     * The unique identifier of the function.
     *
     * > Only one of `namespaceId` or `functionId` must be set.
     */
    declare public readonly functionId: pulumi.Output<string | undefined>;
    /**
     * The unique identifier of the Functions namespace.
     */
    declare public readonly namespaceId: pulumi.Output<string | undefined>;
    /**
     * `region`). The region in which the namespace is created.
     *
     * > **Important** Updating any of the arguments above will recreate the token.
     */
    declare public readonly region: pulumi.Output<string | undefined>;
    /**
     * The token.
     */
    declare public /*out*/ readonly value: pulumi.Output<string>;

    /**
     * Create a FunctionToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated scaleway.index/functiontoken.FunctionToken has been deprecated in favor of scaleway.functions/token.Token */
    constructor(name: string, args?: FunctionTokenArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated scaleway.index/functiontoken.FunctionToken has been deprecated in favor of scaleway.functions/token.Token */
    constructor(name: string, argsOrState?: FunctionTokenArgs | FunctionTokenState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("FunctionToken is deprecated: scaleway.index/functiontoken.FunctionToken has been deprecated in favor of scaleway.functions/token.Token")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FunctionTokenState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["expiresAt"] = state?.expiresAt;
            resourceInputs["functionId"] = state?.functionId;
            resourceInputs["namespaceId"] = state?.namespaceId;
            resourceInputs["region"] = state?.region;
            resourceInputs["value"] = state?.value;
        } else {
            const args = argsOrState as FunctionTokenArgs | undefined;
            resourceInputs["description"] = args?.description;
            resourceInputs["expiresAt"] = args?.expiresAt;
            resourceInputs["functionId"] = args?.functionId;
            resourceInputs["namespaceId"] = args?.namespaceId;
            resourceInputs["region"] = args?.region;
            resourceInputs["value"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["value"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(FunctionToken.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FunctionToken resources.
 */
export interface FunctionTokenState {
    /**
     * The description of the token.
     */
    description?: pulumi.Input<string>;
    /**
     * The expiration date of the token.
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * The unique identifier of the function.
     *
     * > Only one of `namespaceId` or `functionId` must be set.
     */
    functionId?: pulumi.Input<string>;
    /**
     * The unique identifier of the Functions namespace.
     */
    namespaceId?: pulumi.Input<string>;
    /**
     * `region`). The region in which the namespace is created.
     *
     * > **Important** Updating any of the arguments above will recreate the token.
     */
    region?: pulumi.Input<string>;
    /**
     * The token.
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FunctionToken resource.
 */
export interface FunctionTokenArgs {
    /**
     * The description of the token.
     */
    description?: pulumi.Input<string>;
    /**
     * The expiration date of the token.
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * The unique identifier of the function.
     *
     * > Only one of `namespaceId` or `functionId` must be set.
     */
    functionId?: pulumi.Input<string>;
    /**
     * The unique identifier of the Functions namespace.
     */
    namespaceId?: pulumi.Input<string>;
    /**
     * `region`). The region in which the namespace is created.
     *
     * > **Important** Updating any of the arguments above will recreate the token.
     */
    region?: pulumi.Input<string>;
}
