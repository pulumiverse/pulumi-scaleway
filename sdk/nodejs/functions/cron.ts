// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * The `scaleway.functions.Cron` resource allows you to create and manage CRON triggers for Scaleway [Serverless Functions](https://www.scaleway.com/en/docs/serverless/functions/).
 *
 * Refer to the Functions CRON triggers [documentation](https://www.scaleway.com/en/docs/serverless/functions/how-to/add-trigger-to-a-function/) and [API documentation](https://www.scaleway.com/en/developers/api/serverless-functions/#path-triggers-list-all-triggers) for more information.
 *
 * ## Example Usage
 *
 * The following command allows you to add a CRON trigger to a Serverless Function.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.functions.Namespace("main", {name: "test-cron"});
 * const mainFunction = new scaleway.functions.Function("main", {
 *     name: "test-cron",
 *     namespaceId: main.id,
 *     runtime: "node14",
 *     privacy: "private",
 *     handler: "handler.handle",
 * });
 * const mainCron = new scaleway.functions.Cron("main", {
 *     name: "test-cron",
 *     functionId: mainFunction.id,
 *     schedule: "0 0 * * *",
 *     args: JSON.stringify({
 *         test: "scw",
 *     }),
 * });
 * const func = new scaleway.functions.Cron("func", {
 *     functionId: mainFunction.id,
 *     schedule: "0 1 * * *",
 *     args: JSON.stringify({
 *         my_var: "terraform",
 *     }),
 * });
 * ```
 *
 * ## Import
 *
 * Function Cron can be imported using `{region}/{id}`, as shown below:
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:functions/cron:Cron main fr-par/11111111-1111-1111-1111-111111111111
 * ```
 */
export class Cron extends pulumi.CustomResource {
    /**
     * Get an existing Cron resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CronState, opts?: pulumi.CustomResourceOptions): Cron {
        return new Cron(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:functions/cron:Cron';

    /**
     * Returns true if the given object is an instance of Cron.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cron {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cron.__pulumiType;
    }

    /**
     * The key-value mapping to define arguments that will be passed to your function’s event object
     */
    declare public readonly args: pulumi.Output<string>;
    /**
     * The unique identifier of the function to link to your CRON trigger.
     */
    declare public readonly functionId: pulumi.Output<string>;
    /**
     * The name of the function CRON trigger. If not provided, a random name is generated.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * `region`) The region
     * in which the function was created.
     */
    declare public readonly region: pulumi.Output<string | undefined>;
    /**
     * CRON format string (refer to the [CRON schedule reference](https://www.scaleway.com/en/docs/serverless/functions/reference-content/cron-schedules/) for more information).
     */
    declare public readonly schedule: pulumi.Output<string>;
    /**
     * The CRON status.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;

    /**
     * Create a Cron resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CronArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CronArgs | CronState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CronState | undefined;
            resourceInputs["args"] = state?.args;
            resourceInputs["functionId"] = state?.functionId;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["schedule"] = state?.schedule;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as CronArgs | undefined;
            if (args?.args === undefined && !opts.urn) {
                throw new Error("Missing required property 'args'");
            }
            if (args?.functionId === undefined && !opts.urn) {
                throw new Error("Missing required property 'functionId'");
            }
            if (args?.schedule === undefined && !opts.urn) {
                throw new Error("Missing required property 'schedule'");
            }
            resourceInputs["args"] = args?.args;
            resourceInputs["functionId"] = args?.functionId;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["schedule"] = args?.schedule;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "scaleway:index/functionCron:FunctionCron" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Cron.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cron resources.
 */
export interface CronState {
    /**
     * The key-value mapping to define arguments that will be passed to your function’s event object
     */
    args?: pulumi.Input<string>;
    /**
     * The unique identifier of the function to link to your CRON trigger.
     */
    functionId?: pulumi.Input<string>;
    /**
     * The name of the function CRON trigger. If not provided, a random name is generated.
     */
    name?: pulumi.Input<string>;
    /**
     * `region`) The region
     * in which the function was created.
     */
    region?: pulumi.Input<string>;
    /**
     * CRON format string (refer to the [CRON schedule reference](https://www.scaleway.com/en/docs/serverless/functions/reference-content/cron-schedules/) for more information).
     */
    schedule?: pulumi.Input<string>;
    /**
     * The CRON status.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cron resource.
 */
export interface CronArgs {
    /**
     * The key-value mapping to define arguments that will be passed to your function’s event object
     */
    args: pulumi.Input<string>;
    /**
     * The unique identifier of the function to link to your CRON trigger.
     */
    functionId: pulumi.Input<string>;
    /**
     * The name of the function CRON trigger. If not provided, a random name is generated.
     */
    name?: pulumi.Input<string>;
    /**
     * `region`) The region
     * in which the function was created.
     */
    region?: pulumi.Input<string>;
    /**
     * CRON format string (refer to the [CRON schedule reference](https://www.scaleway.com/en/docs/serverless/functions/reference-content/cron-schedules/) for more information).
     */
    schedule: pulumi.Input<string>;
}
