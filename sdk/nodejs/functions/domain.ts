// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * The `scaleway.functions.Domain` resource allows you to create and manage domain name bindings for Scaleway [Serverless Functions](https://www.scaleway.com/en/docs/serverless/functions/).
 *
 * Refer to the Functions domain [documentation](https://www.scaleway.com/en/docs/serverless/functions/how-to/add-a-custom-domain-name-to-a-function/) and the [API documentation](https://www.scaleway.com/en/developers/api/serverless-functions/#path-domains-list-all-domain-name-bindings) for more information.
 *
 * ## Example Usage
 *
 * This command allows to bind a custom domain name to a function.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const mainNamespace = new scaleway.functions.Namespace("main", {});
 * const mainFunction = new scaleway.functions.Function("main", {
 *     namespaceId: mainNamespace.id,
 *     runtime: "go118",
 *     privacy: "private",
 *     handler: "Handle",
 *     zipFile: "testfixture/gofunction.zip",
 *     deploy: true,
 * });
 * const main = new scaleway.functions.Domain("main", {
 *     functionId: mainFunction.id,
 *     hostname: "example.com",
 * }, {
 *     dependsOn: [mainFunction],
 * });
 * ```
 *
 * ## Import
 *
 * Function domain binding can be imported using `{region}/{id}`, as shown below:
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:functions/domain:Domain main fr-par/11111111-1111-1111-1111-111111111111
 * ```
 */
export class Domain extends pulumi.CustomResource {
    /**
     * Get an existing Domain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainState, opts?: pulumi.CustomResourceOptions): Domain {
        return new Domain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:functions/domain:Domain';

    /**
     * Returns true if the given object is an instance of Domain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Domain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Domain.__pulumiType;
    }

    /**
     * The unique identifier of the function.
     */
    public readonly functionId!: pulumi.Output<string>;
    /**
     * The hostname with a CNAME record.
     *
     * We recommend you use a CNAME domain record that point to your native function `domainName` for it.
     *
     * > **Important** Updating the `functionId` or `hostname` arguments will recreate the domain.
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * (Defaults to provider `region`) The region in which the domain was created.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The URL used to query the function.
     */
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a Domain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainArgs | DomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainState | undefined;
            resourceInputs["functionId"] = state ? state.functionId : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as DomainArgs | undefined;
            if ((!args || args.functionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionId'");
            }
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            resourceInputs["functionId"] = args ? args.functionId : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "scaleway:index/functionDomain:FunctionDomain" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Domain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Domain resources.
 */
export interface DomainState {
    /**
     * The unique identifier of the function.
     */
    functionId?: pulumi.Input<string>;
    /**
     * The hostname with a CNAME record.
     *
     * We recommend you use a CNAME domain record that point to your native function `domainName` for it.
     *
     * > **Important** Updating the `functionId` or `hostname` arguments will recreate the domain.
     */
    hostname?: pulumi.Input<string>;
    /**
     * (Defaults to provider `region`) The region in which the domain was created.
     */
    region?: pulumi.Input<string>;
    /**
     * The URL used to query the function.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Domain resource.
 */
export interface DomainArgs {
    /**
     * The unique identifier of the function.
     */
    functionId: pulumi.Input<string>;
    /**
     * The hostname with a CNAME record.
     *
     * We recommend you use a CNAME domain record that point to your native function `domainName` for it.
     *
     * > **Important** Updating the `functionId` or `hostname` arguments will recreate the domain.
     */
    hostname: pulumi.Input<string>;
    /**
     * (Defaults to provider `region`) The region in which the domain was created.
     */
    region?: pulumi.Input<string>;
}
