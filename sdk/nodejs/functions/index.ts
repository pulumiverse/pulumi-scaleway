// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CronArgs, CronState } from "./cron";
export type Cron = import("./cron").Cron;
export const Cron: typeof import("./cron").Cron = null as any;
utilities.lazyLoad(exports, ["Cron"], () => require("./cron"));

export { DomainArgs, DomainState } from "./domain";
export type Domain = import("./domain").Domain;
export const Domain: typeof import("./domain").Domain = null as any;
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));

export { FunctionArgs, FunctionState } from "./function";
export type Function = import("./function").Function;
export const Function: typeof import("./function").Function = null as any;
utilities.lazyLoad(exports, ["Function"], () => require("./function"));

export { GetFunctionArgs, GetFunctionResult, GetFunctionOutputArgs } from "./getFunction";
export const getFunction: typeof import("./getFunction").getFunction = null as any;
export const getFunctionOutput: typeof import("./getFunction").getFunctionOutput = null as any;
utilities.lazyLoad(exports, ["getFunction","getFunctionOutput"], () => require("./getFunction"));

export { GetNamespaceArgs, GetNamespaceResult, GetNamespaceOutputArgs } from "./getNamespace";
export const getNamespace: typeof import("./getNamespace").getNamespace = null as any;
export const getNamespaceOutput: typeof import("./getNamespace").getNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getNamespace","getNamespaceOutput"], () => require("./getNamespace"));

export { NamespaceArgs, NamespaceState } from "./namespace";
export type Namespace = import("./namespace").Namespace;
export const Namespace: typeof import("./namespace").Namespace = null as any;
utilities.lazyLoad(exports, ["Namespace"], () => require("./namespace"));

export { TokenArgs, TokenState } from "./token";
export type Token = import("./token").Token;
export const Token: typeof import("./token").Token = null as any;
utilities.lazyLoad(exports, ["Token"], () => require("./token"));

export { TriggerArgs, TriggerState } from "./trigger";
export type Trigger = import("./trigger").Trigger;
export const Trigger: typeof import("./trigger").Trigger = null as any;
utilities.lazyLoad(exports, ["Trigger"], () => require("./trigger"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "scaleway:functions/cron:Cron":
                return new Cron(name, <any>undefined, { urn })
            case "scaleway:functions/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "scaleway:functions/function:Function":
                return new Function(name, <any>undefined, { urn })
            case "scaleway:functions/namespace:Namespace":
                return new Namespace(name, <any>undefined, { urn })
            case "scaleway:functions/token:Token":
                return new Token(name, <any>undefined, { urn })
            case "scaleway:functions/trigger:Trigger":
                return new Trigger(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("scaleway", "functions/cron", _module)
pulumi.runtime.registerResourceModule("scaleway", "functions/domain", _module)
pulumi.runtime.registerResourceModule("scaleway", "functions/function", _module)
pulumi.runtime.registerResourceModule("scaleway", "functions/namespace", _module)
pulumi.runtime.registerResourceModule("scaleway", "functions/token", _module)
pulumi.runtime.registerResourceModule("scaleway", "functions/trigger", _module)
