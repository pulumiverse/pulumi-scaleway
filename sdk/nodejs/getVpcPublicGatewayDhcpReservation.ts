// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Gets information about a dhcp entries. For further information please check the
 * API [documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1/#dhcp-entries-e40fb6)
 *
 * ## Example Dynamic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumi/scaleway";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const mainVpcPrivateNetwork = new scaleway.VpcPrivateNetwork("mainVpcPrivateNetwork", {});
 * const mainInstanceServer = new scaleway.InstanceServer("mainInstanceServer", {
 *     image: "ubuntu_jammy",
 *     type: "DEV1-S",
 *     zone: "fr-par-1",
 * });
 * const mainInstancePrivateNic = new scaleway.InstancePrivateNic("mainInstancePrivateNic", {
 *     serverId: mainInstanceServer.id,
 *     privateNetworkId: mainVpcPrivateNetwork.id,
 * });
 * const mainVpcPublicGatewayIp = new scaleway.VpcPublicGatewayIp("mainVpcPublicGatewayIp", {});
 * const mainVpcPublicGatewayDhcp = new scaleway.VpcPublicGatewayDhcp("mainVpcPublicGatewayDhcp", {subnet: "192.168.1.0/24"});
 * const mainVpcPublicGateway = new scaleway.VpcPublicGateway("mainVpcPublicGateway", {
 *     type: "VPC-GW-S",
 *     ipId: mainVpcPublicGatewayIp.id,
 * });
 * const mainVpcGatewayNetwork = new scaleway.VpcGatewayNetwork("mainVpcGatewayNetwork", {
 *     gatewayId: mainVpcPublicGateway.id,
 *     privateNetworkId: mainVpcPrivateNetwork.id,
 *     dhcpId: mainVpcPublicGatewayDhcp.id,
 *     cleanupDhcp: true,
 *     enableMasquerade: true,
 * });
 * //# Retrieve the dynamic entries generated by mac address & gateway network
 * const byMacAddressAndGwNetwork = scaleway.getVpcPublicGatewayDhcpReservationOutput({
 *     macAddress: mainInstancePrivateNic.macAddress,
 *     gatewayNetworkId: mainVpcGatewayNetwork.id,
 * });
 * ```
 *
 * ## Example Static and PAT rule
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumi/scaleway";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const mainVpcPrivateNetwork = new scaleway.VpcPrivateNetwork("mainVpcPrivateNetwork", {});
 * const mainInstanceSecurityGroup = new scaleway.InstanceSecurityGroup("mainInstanceSecurityGroup", {
 *     inboundDefaultPolicy: "drop",
 *     outboundDefaultPolicy: "accept",
 *     inboundRules: [{
 *         action: "accept",
 *         port: 22,
 *     }],
 * });
 * const mainInstanceServer = new scaleway.InstanceServer("mainInstanceServer", {
 *     image: "ubuntu_jammy",
 *     type: "DEV1-S",
 *     zone: "fr-par-1",
 *     securityGroupId: mainInstanceSecurityGroup.id,
 * });
 * const mainInstancePrivateNic = new scaleway.InstancePrivateNic("mainInstancePrivateNic", {
 *     serverId: mainInstanceServer.id,
 *     privateNetworkId: mainVpcPrivateNetwork.id,
 * });
 * const mainVpcPublicGatewayIp = new scaleway.VpcPublicGatewayIp("mainVpcPublicGatewayIp", {});
 * const mainVpcPublicGatewayDhcp = new scaleway.VpcPublicGatewayDhcp("mainVpcPublicGatewayDhcp", {subnet: "192.168.1.0/24"});
 * const mainVpcPublicGateway = new scaleway.VpcPublicGateway("mainVpcPublicGateway", {
 *     type: "VPC-GW-S",
 *     ipId: mainVpcPublicGatewayIp.id,
 * });
 * const mainVpcGatewayNetwork = new scaleway.VpcGatewayNetwork("mainVpcGatewayNetwork", {
 *     gatewayId: mainVpcPublicGateway.id,
 *     privateNetworkId: mainVpcPrivateNetwork.id,
 *     dhcpId: mainVpcPublicGatewayDhcp.id,
 *     cleanupDhcp: true,
 *     enableMasquerade: true,
 * });
 * const mainVpcPublicGatewayDhcpReservation = new scaleway.VpcPublicGatewayDhcpReservation("mainVpcPublicGatewayDhcpReservation", {
 *     gatewayNetworkId: mainVpcGatewayNetwork.id,
 *     macAddress: mainInstancePrivateNic.macAddress,
 *     ipAddress: "192.168.1.4",
 * });
 * //## VPC PAT RULE
 * const mainVpcPublicGatewayPatRule = new scaleway.VpcPublicGatewayPatRule("mainVpcPublicGatewayPatRule", {
 *     gatewayId: mainVpcPublicGateway.id,
 *     privateIp: mainVpcPublicGatewayDhcpReservation.ipAddress,
 *     privatePort: 22,
 *     publicPort: 2222,
 *     protocol: "tcp",
 * });
 * const byId = scaleway.getVpcPublicGatewayDhcpReservationOutput({
 *     reservationId: mainVpcPublicGatewayDhcpReservation.id,
 * });
 * ```
 */
export function getVpcPublicGatewayDhcpReservation(args?: GetVpcPublicGatewayDhcpReservationArgs, opts?: pulumi.InvokeOptions): Promise<GetVpcPublicGatewayDhcpReservationResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("scaleway:index/getVpcPublicGatewayDhcpReservation:getVpcPublicGatewayDhcpReservation", {
        "gatewayNetworkId": args.gatewayNetworkId,
        "macAddress": args.macAddress,
        "reservationId": args.reservationId,
        "waitForDhcp": args.waitForDhcp,
        "zone": args.zone,
    }, opts);
}

/**
 * A collection of arguments for invoking getVpcPublicGatewayDhcpReservation.
 */
export interface GetVpcPublicGatewayDhcpReservationArgs {
    /**
     * The ID of the owning GatewayNetwork.
     *
     * > Only one of `reservationId` or `macAddress` with `gatewayNetworkId` should be specified.
     */
    gatewayNetworkId?: string;
    /**
     * The MAC address of the reservation to retrieve.
     */
    macAddress?: string;
    /**
     * The ID of the Reservation to retrieve.
     */
    reservationId?: string;
    /**
     * Boolean to wait for macAddress to exist in dhcp.
     */
    waitForDhcp?: boolean;
    /**
     * `zone`) The zone in which the image exists.
     */
    zone?: string;
}

/**
 * A collection of values returned by getVpcPublicGatewayDhcpReservation.
 */
export interface GetVpcPublicGatewayDhcpReservationResult {
    readonly createdAt: string;
    readonly gatewayNetworkId?: string;
    readonly hostname: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ipAddress: string;
    readonly macAddress?: string;
    readonly reservationId?: string;
    readonly type: string;
    readonly updatedAt: string;
    readonly waitForDhcp?: boolean;
    readonly zone?: string;
}
/**
 * Gets information about a dhcp entries. For further information please check the
 * API [documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1/#dhcp-entries-e40fb6)
 *
 * ## Example Dynamic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumi/scaleway";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const mainVpcPrivateNetwork = new scaleway.VpcPrivateNetwork("mainVpcPrivateNetwork", {});
 * const mainInstanceServer = new scaleway.InstanceServer("mainInstanceServer", {
 *     image: "ubuntu_jammy",
 *     type: "DEV1-S",
 *     zone: "fr-par-1",
 * });
 * const mainInstancePrivateNic = new scaleway.InstancePrivateNic("mainInstancePrivateNic", {
 *     serverId: mainInstanceServer.id,
 *     privateNetworkId: mainVpcPrivateNetwork.id,
 * });
 * const mainVpcPublicGatewayIp = new scaleway.VpcPublicGatewayIp("mainVpcPublicGatewayIp", {});
 * const mainVpcPublicGatewayDhcp = new scaleway.VpcPublicGatewayDhcp("mainVpcPublicGatewayDhcp", {subnet: "192.168.1.0/24"});
 * const mainVpcPublicGateway = new scaleway.VpcPublicGateway("mainVpcPublicGateway", {
 *     type: "VPC-GW-S",
 *     ipId: mainVpcPublicGatewayIp.id,
 * });
 * const mainVpcGatewayNetwork = new scaleway.VpcGatewayNetwork("mainVpcGatewayNetwork", {
 *     gatewayId: mainVpcPublicGateway.id,
 *     privateNetworkId: mainVpcPrivateNetwork.id,
 *     dhcpId: mainVpcPublicGatewayDhcp.id,
 *     cleanupDhcp: true,
 *     enableMasquerade: true,
 * });
 * //# Retrieve the dynamic entries generated by mac address & gateway network
 * const byMacAddressAndGwNetwork = scaleway.getVpcPublicGatewayDhcpReservationOutput({
 *     macAddress: mainInstancePrivateNic.macAddress,
 *     gatewayNetworkId: mainVpcGatewayNetwork.id,
 * });
 * ```
 *
 * ## Example Static and PAT rule
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumi/scaleway";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const mainVpcPrivateNetwork = new scaleway.VpcPrivateNetwork("mainVpcPrivateNetwork", {});
 * const mainInstanceSecurityGroup = new scaleway.InstanceSecurityGroup("mainInstanceSecurityGroup", {
 *     inboundDefaultPolicy: "drop",
 *     outboundDefaultPolicy: "accept",
 *     inboundRules: [{
 *         action: "accept",
 *         port: 22,
 *     }],
 * });
 * const mainInstanceServer = new scaleway.InstanceServer("mainInstanceServer", {
 *     image: "ubuntu_jammy",
 *     type: "DEV1-S",
 *     zone: "fr-par-1",
 *     securityGroupId: mainInstanceSecurityGroup.id,
 * });
 * const mainInstancePrivateNic = new scaleway.InstancePrivateNic("mainInstancePrivateNic", {
 *     serverId: mainInstanceServer.id,
 *     privateNetworkId: mainVpcPrivateNetwork.id,
 * });
 * const mainVpcPublicGatewayIp = new scaleway.VpcPublicGatewayIp("mainVpcPublicGatewayIp", {});
 * const mainVpcPublicGatewayDhcp = new scaleway.VpcPublicGatewayDhcp("mainVpcPublicGatewayDhcp", {subnet: "192.168.1.0/24"});
 * const mainVpcPublicGateway = new scaleway.VpcPublicGateway("mainVpcPublicGateway", {
 *     type: "VPC-GW-S",
 *     ipId: mainVpcPublicGatewayIp.id,
 * });
 * const mainVpcGatewayNetwork = new scaleway.VpcGatewayNetwork("mainVpcGatewayNetwork", {
 *     gatewayId: mainVpcPublicGateway.id,
 *     privateNetworkId: mainVpcPrivateNetwork.id,
 *     dhcpId: mainVpcPublicGatewayDhcp.id,
 *     cleanupDhcp: true,
 *     enableMasquerade: true,
 * });
 * const mainVpcPublicGatewayDhcpReservation = new scaleway.VpcPublicGatewayDhcpReservation("mainVpcPublicGatewayDhcpReservation", {
 *     gatewayNetworkId: mainVpcGatewayNetwork.id,
 *     macAddress: mainInstancePrivateNic.macAddress,
 *     ipAddress: "192.168.1.4",
 * });
 * //## VPC PAT RULE
 * const mainVpcPublicGatewayPatRule = new scaleway.VpcPublicGatewayPatRule("mainVpcPublicGatewayPatRule", {
 *     gatewayId: mainVpcPublicGateway.id,
 *     privateIp: mainVpcPublicGatewayDhcpReservation.ipAddress,
 *     privatePort: 22,
 *     publicPort: 2222,
 *     protocol: "tcp",
 * });
 * const byId = scaleway.getVpcPublicGatewayDhcpReservationOutput({
 *     reservationId: mainVpcPublicGatewayDhcpReservation.id,
 * });
 * ```
 */
export function getVpcPublicGatewayDhcpReservationOutput(args?: GetVpcPublicGatewayDhcpReservationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVpcPublicGatewayDhcpReservationResult> {
    return pulumi.output(args).apply((a: any) => getVpcPublicGatewayDhcpReservation(a, opts))
}

/**
 * A collection of arguments for invoking getVpcPublicGatewayDhcpReservation.
 */
export interface GetVpcPublicGatewayDhcpReservationOutputArgs {
    /**
     * The ID of the owning GatewayNetwork.
     *
     * > Only one of `reservationId` or `macAddress` with `gatewayNetworkId` should be specified.
     */
    gatewayNetworkId?: pulumi.Input<string>;
    /**
     * The MAC address of the reservation to retrieve.
     */
    macAddress?: pulumi.Input<string>;
    /**
     * The ID of the Reservation to retrieve.
     */
    reservationId?: pulumi.Input<string>;
    /**
     * Boolean to wait for macAddress to exist in dhcp.
     */
    waitForDhcp?: pulumi.Input<boolean>;
    /**
     * `zone`) The zone in which the image exists.
     */
    zone?: pulumi.Input<string>;
}
