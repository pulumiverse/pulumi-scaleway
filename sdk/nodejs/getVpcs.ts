// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Gets information about multiple Virtual Private Clouds.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumi/scaleway";
 *
 * const myKey = scaleway.getVpcs({
 *     name: "tf-vpc-datasource",
 *     region: "nl-ams",
 * });
 * ```
 */
export function getVpcs(args?: GetVpcsArgs, opts?: pulumi.InvokeOptions): Promise<GetVpcsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("scaleway:index/getVpcs:getVpcs", {
        "name": args.name,
        "projectId": args.projectId,
        "region": args.region,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getVpcs.
 */
export interface GetVpcsArgs {
    /**
     * The VPC name used as filter. VPCs with a name like it are listed.
     */
    name?: string;
    /**
     * The ID of the project the VPC is associated with.
     */
    projectId?: string;
    /**
     * `region`). The region in which vpcs exist.
     */
    region?: string;
    /**
     * List of tags used as filter. VPCs with these exact tags are listed.
     */
    tags?: string[];
}

/**
 * A collection of values returned by getVpcs.
 */
export interface GetVpcsResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name?: string;
    /**
     * The organization ID the VPC is associated with.
     */
    readonly organizationId: string;
    /**
     * The ID of the project the VPC is associated with.
     */
    readonly projectId: string;
    readonly region: string;
    readonly tags?: string[];
    /**
     * List of found vpcs
     */
    readonly vpcs: outputs.GetVpcsVpc[];
}
/**
 * Gets information about multiple Virtual Private Clouds.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumi/scaleway";
 *
 * const myKey = scaleway.getVpcs({
 *     name: "tf-vpc-datasource",
 *     region: "nl-ams",
 * });
 * ```
 */
export function getVpcsOutput(args?: GetVpcsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVpcsResult> {
    return pulumi.output(args).apply((a: any) => getVpcs(a, opts))
}

/**
 * A collection of arguments for invoking getVpcs.
 */
export interface GetVpcsOutputArgs {
    /**
     * The VPC name used as filter. VPCs with a name like it are listed.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project the VPC is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * `region`). The region in which vpcs exist.
     */
    region?: pulumi.Input<string>;
    /**
     * List of tags used as filter. VPCs with these exact tags are listed.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
