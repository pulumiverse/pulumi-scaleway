// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Creates and manages Scaleway Web Hostings.
 * For more information, see the [API documentation](https://www.scaleway.com/en/developers/api/webhosting/hosting-api/).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const byName = scaleway.hosting.getOffer({
 *     name: "lite",
 *     controlPanel: "Cpanel",
 * });
 * const main = new scaleway.hosting.Hosting("main", {
 *     offerId: byName.then(byName => byName.offerId),
 *     email: "your@email.com",
 *     domain: "yourdomain.com",
 *     tags: [
 *         "webhosting",
 *         "provider",
 *         "terraform",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Hostings can be imported using the `{region}/{id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:hosting/hosting:Hosting hosting01 fr-par/11111111-1111-1111-1111-111111111111
 * ```
 */
export class Hosting extends pulumi.CustomResource {
    /**
     * Get an existing Hosting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HostingState, opts?: pulumi.CustomResourceOptions): Hosting {
        return new Hosting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:hosting/hosting:Hosting';

    /**
     * Returns true if the given object is an instance of Hosting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Hosting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Hosting.__pulumiType;
    }

    /**
     * The URL to connect to cPanel Dashboard and to Webmail interface.
     */
    declare public /*out*/ readonly cpanelUrls: pulumi.Output<outputs.hosting.HostingCpanelUrl[]>;
    /**
     * Date and time of hosting's creation (RFC 3339 format).
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The DNS status of the hosting.
     */
    declare public /*out*/ readonly dnsStatus: pulumi.Output<string>;
    /**
     * The domain name of the hosting.
     */
    declare public readonly domain: pulumi.Output<string>;
    /**
     * The contact email of the client for the hosting.
     */
    declare public readonly email: pulumi.Output<string>;
    /**
     * List of nameservers associated with the webhosting.
     */
    declare public /*out*/ readonly nameServers: pulumi.Output<outputs.hosting.HostingNameServer[]>;
    /**
     * The ID of the selected offer for the hosting.
     */
    declare public readonly offerId: pulumi.Output<string>;
    /**
     * The name of the active offer.
     */
    declare public /*out*/ readonly offerName: pulumi.Output<string>;
    /**
     * The IDs of the selected options for the hosting.
     */
    declare public readonly optionIds: pulumi.Output<string[] | undefined>;
    /**
     * The active options of the hosting.
     */
    declare public /*out*/ readonly options: pulumi.Output<outputs.hosting.HostingOption[]>;
    /**
     * (Deprecated) The organization ID the hosting is associated with.
     *
     * @deprecated The organizationId field is deprecated and will be removed in the next major version.
     */
    declare public /*out*/ readonly organizationId: pulumi.Output<string>;
    /**
     * The hostname of the host platform.
     */
    declare public /*out*/ readonly platformHostname: pulumi.Output<string>;
    /**
     * The number of the host platform.
     */
    declare public /*out*/ readonly platformNumber: pulumi.Output<number>;
    /**
     * `projectId`) The ID of the project the VPC is associated with.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * List of DNS records associated with the webhosting.
     */
    declare public /*out*/ readonly records: pulumi.Output<outputs.hosting.HostingRecord[]>;
    /**
     * `region`) The region of the Hosting.
     */
    declare public readonly region: pulumi.Output<string | undefined>;
    /**
     * The hosting status.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The tags associated with the hosting.
     */
    declare public readonly tags: pulumi.Output<string[]>;
    /**
     * Date and time of hosting's last update (RFC 3339 format).
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * The main hosting cPanel username.
     */
    declare public /*out*/ readonly username: pulumi.Output<string>;

    /**
     * Create a Hosting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HostingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HostingArgs | HostingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HostingState | undefined;
            resourceInputs["cpanelUrls"] = state?.cpanelUrls;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["dnsStatus"] = state?.dnsStatus;
            resourceInputs["domain"] = state?.domain;
            resourceInputs["email"] = state?.email;
            resourceInputs["nameServers"] = state?.nameServers;
            resourceInputs["offerId"] = state?.offerId;
            resourceInputs["offerName"] = state?.offerName;
            resourceInputs["optionIds"] = state?.optionIds;
            resourceInputs["options"] = state?.options;
            resourceInputs["organizationId"] = state?.organizationId;
            resourceInputs["platformHostname"] = state?.platformHostname;
            resourceInputs["platformNumber"] = state?.platformNumber;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["records"] = state?.records;
            resourceInputs["region"] = state?.region;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["username"] = state?.username;
        } else {
            const args = argsOrState as HostingArgs | undefined;
            if (args?.domain === undefined && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if (args?.email === undefined && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if (args?.offerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'offerId'");
            }
            resourceInputs["domain"] = args?.domain;
            resourceInputs["email"] = args?.email;
            resourceInputs["offerId"] = args?.offerId;
            resourceInputs["optionIds"] = args?.optionIds;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["cpanelUrls"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["dnsStatus"] = undefined /*out*/;
            resourceInputs["nameServers"] = undefined /*out*/;
            resourceInputs["offerName"] = undefined /*out*/;
            resourceInputs["options"] = undefined /*out*/;
            resourceInputs["organizationId"] = undefined /*out*/;
            resourceInputs["platformHostname"] = undefined /*out*/;
            resourceInputs["platformNumber"] = undefined /*out*/;
            resourceInputs["records"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["username"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "scaleway:index/webhosting:Webhosting" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Hosting.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Hosting resources.
 */
export interface HostingState {
    /**
     * The URL to connect to cPanel Dashboard and to Webmail interface.
     */
    cpanelUrls?: pulumi.Input<pulumi.Input<inputs.hosting.HostingCpanelUrl>[]>;
    /**
     * Date and time of hosting's creation (RFC 3339 format).
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The DNS status of the hosting.
     */
    dnsStatus?: pulumi.Input<string>;
    /**
     * The domain name of the hosting.
     */
    domain?: pulumi.Input<string>;
    /**
     * The contact email of the client for the hosting.
     */
    email?: pulumi.Input<string>;
    /**
     * List of nameservers associated with the webhosting.
     */
    nameServers?: pulumi.Input<pulumi.Input<inputs.hosting.HostingNameServer>[]>;
    /**
     * The ID of the selected offer for the hosting.
     */
    offerId?: pulumi.Input<string>;
    /**
     * The name of the active offer.
     */
    offerName?: pulumi.Input<string>;
    /**
     * The IDs of the selected options for the hosting.
     */
    optionIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The active options of the hosting.
     */
    options?: pulumi.Input<pulumi.Input<inputs.hosting.HostingOption>[]>;
    /**
     * (Deprecated) The organization ID the hosting is associated with.
     *
     * @deprecated The organizationId field is deprecated and will be removed in the next major version.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * The hostname of the host platform.
     */
    platformHostname?: pulumi.Input<string>;
    /**
     * The number of the host platform.
     */
    platformNumber?: pulumi.Input<number>;
    /**
     * `projectId`) The ID of the project the VPC is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * List of DNS records associated with the webhosting.
     */
    records?: pulumi.Input<pulumi.Input<inputs.hosting.HostingRecord>[]>;
    /**
     * `region`) The region of the Hosting.
     */
    region?: pulumi.Input<string>;
    /**
     * The hosting status.
     */
    status?: pulumi.Input<string>;
    /**
     * The tags associated with the hosting.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Date and time of hosting's last update (RFC 3339 format).
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The main hosting cPanel username.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Hosting resource.
 */
export interface HostingArgs {
    /**
     * The domain name of the hosting.
     */
    domain: pulumi.Input<string>;
    /**
     * The contact email of the client for the hosting.
     */
    email: pulumi.Input<string>;
    /**
     * The ID of the selected offer for the hosting.
     */
    offerId: pulumi.Input<string>;
    /**
     * The IDs of the selected options for the hosting.
     */
    optionIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * `projectId`) The ID of the project the VPC is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * `region`) The region of the Hosting.
     */
    region?: pulumi.Input<string>;
    /**
     * The tags associated with the hosting.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
