// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * The scaleway.inference.Model resource allows you to upload and manage inference models in the Scaleway Inference ecosystem. Once registered, a model can be used in any scaleway.inference.Deployment resource.
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const test = new scaleway.inference.Model("test", {
 *     name: "my-awesome-model",
 *     url: "https://huggingface.co/agentica-org/DeepCoder-14B-Preview",
 *     secret: "my-secret-token",
 * });
 * ```
 *
 * ### Deploy your own model on your managed inference
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const myModel = new scaleway.inference.Model("my_model", {
 *     name: "my-awesome-model",
 *     url: "https://huggingface.co/agentica-org/DeepCoder-14B-Preview",
 *     secret: "my-secret-token",
 * });
 * const myDeployment = new scaleway.inference.Deployment("my_deployment", {
 *     name: "test-inference-deployment-basic",
 *     nodeType: "H100",
 *     modelId: myModel.id,
 *     publicEndpoint: {
 *         isEnabled: true,
 *     },
 *     acceptEula: true,
 * });
 * ```
 *
 * ## Import
 *
 * Models can be imported using, `{region}/{id}`, as shown below:
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:inference/model:Model my_model fr-par/11111111-1111-1111-1111-111111111111
 * ```
 */
export class Model extends pulumi.CustomResource {
    /**
     * Get an existing Model resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ModelState, opts?: pulumi.CustomResourceOptions): Model {
        return new Model(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:inference/model:Model';

    /**
     * Returns true if the given object is an instance of Model.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Model {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Model.__pulumiType;
    }

    /**
     * The date and time of the creation of the model
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * A textual description of the model (if available).
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    /**
     * Whether the model requires end-user license agreement acceptance before use.
     */
    public /*out*/ readonly hasEula!: pulumi.Output<boolean>;
    /**
     * The name of the model. This must be unique within the project.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of supported node types and their quantization options. Each entry contains:
     */
    public /*out*/ readonly nodesSupports!: pulumi.Output<outputs.inference.ModelNodesSupport[]>;
    /**
     * Size, in bits, of the model parameters.
     */
    public /*out*/ readonly parameterSizeBits!: pulumi.Output<number>;
    /**
     * `projectId`) The ID of the project the deployment is associated with.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * `region`) The region in which the deployment is created.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Authentication token used to pull the model from a private or gated URL (e.g., a Hugging Face access token with read permission).
     */
    public readonly secret!: pulumi.Output<string | undefined>;
    /**
     * Total size, in bytes, of the model archive.
     */
    public /*out*/ readonly sizeBytes!: pulumi.Output<number>;
    /**
     * The current status of the model (e.g., ready, error, etc.).
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Tags associated with the model.
     */
    public /*out*/ readonly tags!: pulumi.Output<string[]>;
    /**
     * The date and time of the last update of the model
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The HTTPS source URL from which the model will be downloaded. This is typically a Hugging Face repository URL (e.g., https://huggingface.co/agentica-org/DeepCoder-14B-Preview). The URL must be publicly accessible or require valid credentials via `secret`
     */
    public readonly url!: pulumi.Output<string>;

    /**
     * Create a Model resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ModelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ModelArgs | ModelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ModelState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["hasEula"] = state ? state.hasEula : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodesSupports"] = state ? state.nodesSupports : undefined;
            resourceInputs["parameterSizeBits"] = state ? state.parameterSizeBits : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
            resourceInputs["sizeBytes"] = state ? state.sizeBytes : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as ModelArgs | undefined;
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["secret"] = args?.secret ? pulumi.secret(args.secret) : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["hasEula"] = undefined /*out*/;
            resourceInputs["nodesSupports"] = undefined /*out*/;
            resourceInputs["parameterSizeBits"] = undefined /*out*/;
            resourceInputs["sizeBytes"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Model.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Model resources.
 */
export interface ModelState {
    /**
     * The date and time of the creation of the model
     */
    createdAt?: pulumi.Input<string>;
    /**
     * A textual description of the model (if available).
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the model requires end-user license agreement acceptance before use.
     */
    hasEula?: pulumi.Input<boolean>;
    /**
     * The name of the model. This must be unique within the project.
     */
    name?: pulumi.Input<string>;
    /**
     * List of supported node types and their quantization options. Each entry contains:
     */
    nodesSupports?: pulumi.Input<pulumi.Input<inputs.inference.ModelNodesSupport>[]>;
    /**
     * Size, in bits, of the model parameters.
     */
    parameterSizeBits?: pulumi.Input<number>;
    /**
     * `projectId`) The ID of the project the deployment is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * `region`) The region in which the deployment is created.
     */
    region?: pulumi.Input<string>;
    /**
     * Authentication token used to pull the model from a private or gated URL (e.g., a Hugging Face access token with read permission).
     */
    secret?: pulumi.Input<string>;
    /**
     * Total size, in bytes, of the model archive.
     */
    sizeBytes?: pulumi.Input<number>;
    /**
     * The current status of the model (e.g., ready, error, etc.).
     */
    status?: pulumi.Input<string>;
    /**
     * Tags associated with the model.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The date and time of the last update of the model
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The HTTPS source URL from which the model will be downloaded. This is typically a Hugging Face repository URL (e.g., https://huggingface.co/agentica-org/DeepCoder-14B-Preview). The URL must be publicly accessible or require valid credentials via `secret`
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Model resource.
 */
export interface ModelArgs {
    /**
     * The name of the model. This must be unique within the project.
     */
    name?: pulumi.Input<string>;
    /**
     * `projectId`) The ID of the project the deployment is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * `region`) The region in which the deployment is created.
     */
    region?: pulumi.Input<string>;
    /**
     * Authentication token used to pull the model from a private or gated URL (e.g., a Hugging Face access token with read permission).
     */
    secret?: pulumi.Input<string>;
    /**
     * The HTTPS source URL from which the model will be downloaded. This is typically a Hugging Face repository URL (e.g., https://huggingface.co/agentica-org/DeepCoder-14B-Preview). The URL must be publicly accessible or require valid credentials via `secret`
     */
    url: pulumi.Input<string>;
}
