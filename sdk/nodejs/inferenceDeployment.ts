// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates and manages Scaleway Managed Inference deployments.
 * For more information, see [the documentation](https://www.scaleway.com/en/developers/api/inference/).
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const deployment = new scaleway.InferenceDeployment("deployment", {
 *     name: "tf-inference-deployment",
 *     nodeType: "L4",
 *     modelName: "meta/llama-3.1-8b-instruct:fp8",
 *     publicEndpoint: {
 *         isEnabled: true,
 *     },
 *     acceptEula: true,
 * });
 * ```
 *
 * ## Import
 *
 * Functions can be imported using, `{region}/{id}`, as shown below:
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:index/inferenceDeployment:InferenceDeployment deployment fr-par/11111111-1111-1111-1111-111111111111
 * ```
 */
export class InferenceDeployment extends pulumi.CustomResource {
    /**
     * Get an existing InferenceDeployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InferenceDeploymentState, opts?: pulumi.CustomResourceOptions): InferenceDeployment {
        return new InferenceDeployment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/inferenceDeployment:InferenceDeployment';

    /**
     * Returns true if the given object is an instance of InferenceDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InferenceDeployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InferenceDeployment.__pulumiType;
    }

    /**
     * Some models (e.g Meta Llama) require end-user license agreements. Set `true` to accept.
     */
    public readonly acceptEula!: pulumi.Output<boolean | undefined>;
    /**
     * The date and time of the creation of the deployment.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The maximum size of the pool.
     */
    public readonly maxSize!: pulumi.Output<number>;
    /**
     * The minimum size of the pool.
     */
    public readonly minSize!: pulumi.Output<number>;
    /**
     * The model id used for the deployment.
     */
    public /*out*/ readonly modelId!: pulumi.Output<string>;
    /**
     * The model name to use for the deployment. Model names can be found in Console or using Scaleway's CLI (`scw inference model list`)
     */
    public readonly modelName!: pulumi.Output<string>;
    /**
     * The deployment name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The node type to use for the deployment. Node types can be found using Scaleway's CLI (`scw inference node-type list`)
     */
    public readonly nodeType!: pulumi.Output<string>;
    /**
     * Configuration of the deployment's private endpoint.
     */
    public readonly privateEndpoint!: pulumi.Output<outputs.InferenceDeploymentPrivateEndpoint | undefined>;
    /**
     * `projectId`) The ID of the project the deployment is associated with.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Configuration of the deployment's public endpoint.
     */
    public readonly publicEndpoint!: pulumi.Output<outputs.InferenceDeploymentPublicEndpoint | undefined>;
    /**
     * `region`) The region in which the deployment is created.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The size of the pool.
     */
    public /*out*/ readonly size!: pulumi.Output<number>;
    /**
     * The status of the deployment.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The tags associated with the deployment.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The date and time of the last update of the deployment.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a InferenceDeployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InferenceDeploymentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InferenceDeploymentArgs | InferenceDeploymentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InferenceDeploymentState | undefined;
            resourceInputs["acceptEula"] = state ? state.acceptEula : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["maxSize"] = state ? state.maxSize : undefined;
            resourceInputs["minSize"] = state ? state.minSize : undefined;
            resourceInputs["modelId"] = state ? state.modelId : undefined;
            resourceInputs["modelName"] = state ? state.modelName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeType"] = state ? state.nodeType : undefined;
            resourceInputs["privateEndpoint"] = state ? state.privateEndpoint : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["publicEndpoint"] = state ? state.publicEndpoint : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as InferenceDeploymentArgs | undefined;
            if ((!args || args.modelName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'modelName'");
            }
            if ((!args || args.nodeType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeType'");
            }
            resourceInputs["acceptEula"] = args ? args.acceptEula : undefined;
            resourceInputs["maxSize"] = args ? args.maxSize : undefined;
            resourceInputs["minSize"] = args ? args.minSize : undefined;
            resourceInputs["modelName"] = args ? args.modelName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeType"] = args ? args.nodeType : undefined;
            resourceInputs["privateEndpoint"] = args ? args.privateEndpoint : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["publicEndpoint"] = args ? args.publicEndpoint : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["modelId"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InferenceDeployment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InferenceDeployment resources.
 */
export interface InferenceDeploymentState {
    /**
     * Some models (e.g Meta Llama) require end-user license agreements. Set `true` to accept.
     */
    acceptEula?: pulumi.Input<boolean>;
    /**
     * The date and time of the creation of the deployment.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The maximum size of the pool.
     */
    maxSize?: pulumi.Input<number>;
    /**
     * The minimum size of the pool.
     */
    minSize?: pulumi.Input<number>;
    /**
     * The model id used for the deployment.
     */
    modelId?: pulumi.Input<string>;
    /**
     * The model name to use for the deployment. Model names can be found in Console or using Scaleway's CLI (`scw inference model list`)
     */
    modelName?: pulumi.Input<string>;
    /**
     * The deployment name.
     */
    name?: pulumi.Input<string>;
    /**
     * The node type to use for the deployment. Node types can be found using Scaleway's CLI (`scw inference node-type list`)
     */
    nodeType?: pulumi.Input<string>;
    /**
     * Configuration of the deployment's private endpoint.
     */
    privateEndpoint?: pulumi.Input<inputs.InferenceDeploymentPrivateEndpoint>;
    /**
     * `projectId`) The ID of the project the deployment is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Configuration of the deployment's public endpoint.
     */
    publicEndpoint?: pulumi.Input<inputs.InferenceDeploymentPublicEndpoint>;
    /**
     * `region`) The region in which the deployment is created.
     */
    region?: pulumi.Input<string>;
    /**
     * The size of the pool.
     */
    size?: pulumi.Input<number>;
    /**
     * The status of the deployment.
     */
    status?: pulumi.Input<string>;
    /**
     * The tags associated with the deployment.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The date and time of the last update of the deployment.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InferenceDeployment resource.
 */
export interface InferenceDeploymentArgs {
    /**
     * Some models (e.g Meta Llama) require end-user license agreements. Set `true` to accept.
     */
    acceptEula?: pulumi.Input<boolean>;
    /**
     * The maximum size of the pool.
     */
    maxSize?: pulumi.Input<number>;
    /**
     * The minimum size of the pool.
     */
    minSize?: pulumi.Input<number>;
    /**
     * The model name to use for the deployment. Model names can be found in Console or using Scaleway's CLI (`scw inference model list`)
     */
    modelName: pulumi.Input<string>;
    /**
     * The deployment name.
     */
    name?: pulumi.Input<string>;
    /**
     * The node type to use for the deployment. Node types can be found using Scaleway's CLI (`scw inference node-type list`)
     */
    nodeType: pulumi.Input<string>;
    /**
     * Configuration of the deployment's private endpoint.
     */
    privateEndpoint?: pulumi.Input<inputs.InferenceDeploymentPrivateEndpoint>;
    /**
     * `projectId`) The ID of the project the deployment is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Configuration of the deployment's public endpoint.
     */
    publicEndpoint?: pulumi.Input<inputs.InferenceDeploymentPublicEndpoint>;
    /**
     * `region`) The region in which the deployment is created.
     */
    region?: pulumi.Input<string>;
    /**
     * The tags associated with the deployment.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
