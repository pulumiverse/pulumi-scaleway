// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Creates and manages Scaleway Compute Images.
 * For more information, see the [API documentation](https://www.scaleway.com/en/developers/api/instance/#path-images-list-instance-images).
 *
 * ## Example Usage
 *
 * ### From a volume
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const volume = new scaleway.instance.Volume("volume", {
 *     type: "b_ssd",
 *     sizeInGb: 20,
 * });
 * const volumeSnapshot = new scaleway.instance.Snapshot("volume_snapshot", {volumeId: volume.id});
 * const volumeImage = new scaleway.instance.Image("volume_image", {
 *     name: "image_from_volume",
 *     rootVolumeId: volumeSnapshot.id,
 * });
 * ```
 *
 * ### From a server
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const server = new scaleway.instance.Server("server", {
 *     image: "ubuntu_jammy",
 *     type: "DEV1-S",
 * });
 * const serverSnapshot = new scaleway.instance.Snapshot("server_snapshot", {volumeId: main.rootVolume[0].volumeId});
 * const serverImage = new scaleway.instance.Image("server_image", {
 *     name: "image_from_server",
 *     rootVolumeId: serverSnapshot.id,
 * });
 * ```
 *
 * ## Import
 *
 * Images can be imported using the `{zone}/{id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:instance/image:Image main fr-par-1/11111111-1111-1111-1111-111111111111
 * ```
 */
export class Image extends pulumi.CustomResource {
    /**
     * Get an existing Image resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageState, opts?: pulumi.CustomResourceOptions): Image {
        return new Image(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:instance/image:Image';

    /**
     * Returns true if the given object is an instance of Image.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Image {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Image.__pulumiType;
    }

    /**
     * List of IDs of the snapshots of the additional volumes to be attached to the image.
     *
     * > **Important:** For now it is only possible to have 1 additional_volume.
     */
    declare public readonly additionalVolumeIds: pulumi.Output<string | undefined>;
    /**
     * The description of the extra volumes attached to the image.
     */
    declare public /*out*/ readonly additionalVolumes: pulumi.Output<outputs.instance.ImageAdditionalVolume[]>;
    /**
     * The architecture the image is compatible with. Possible values are: `x8664` or `arm`.
     */
    declare public readonly architecture: pulumi.Output<string | undefined>;
    /**
     * Date of the volume creation.
     */
    declare public /*out*/ readonly creationDate: pulumi.Output<string>;
    /**
     * ID of the server the image is based on (in case it is a backup).
     */
    declare public /*out*/ readonly fromServerId: pulumi.Output<string>;
    /**
     * Date of volume latest update.
     */
    declare public /*out*/ readonly modificationDate: pulumi.Output<string>;
    /**
     * The name of the image. If not provided it will be randomly generated.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The organization ID the image is associated with.
     */
    declare public /*out*/ readonly organizationId: pulumi.Output<string>;
    /**
     * The ID of the project the image is associated with.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * Set to `true` if the image is public.
     */
    declare public readonly public: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the snapshot of the volume to be used as root in the image.
     */
    declare public readonly rootVolumeId: pulumi.Output<string>;
    /**
     * State of the volume.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * A list of tags to apply to the image.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * The zone in which the image should be created.
     */
    declare public readonly zone: pulumi.Output<string | undefined>;

    /**
     * Create a Image resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageArgs | ImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageState | undefined;
            resourceInputs["additionalVolumeIds"] = state?.additionalVolumeIds;
            resourceInputs["additionalVolumes"] = state?.additionalVolumes;
            resourceInputs["architecture"] = state?.architecture;
            resourceInputs["creationDate"] = state?.creationDate;
            resourceInputs["fromServerId"] = state?.fromServerId;
            resourceInputs["modificationDate"] = state?.modificationDate;
            resourceInputs["name"] = state?.name;
            resourceInputs["organizationId"] = state?.organizationId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["public"] = state?.public;
            resourceInputs["rootVolumeId"] = state?.rootVolumeId;
            resourceInputs["state"] = state?.state;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["zone"] = state?.zone;
        } else {
            const args = argsOrState as ImageArgs | undefined;
            if (args?.rootVolumeId === undefined && !opts.urn) {
                throw new Error("Missing required property 'rootVolumeId'");
            }
            resourceInputs["additionalVolumeIds"] = args?.additionalVolumeIds;
            resourceInputs["architecture"] = args?.architecture;
            resourceInputs["name"] = args?.name;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["public"] = args?.public;
            resourceInputs["rootVolumeId"] = args?.rootVolumeId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["zone"] = args?.zone;
            resourceInputs["additionalVolumes"] = undefined /*out*/;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["fromServerId"] = undefined /*out*/;
            resourceInputs["modificationDate"] = undefined /*out*/;
            resourceInputs["organizationId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "scaleway:index/instanceImage:InstanceImage" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Image.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Image resources.
 */
export interface ImageState {
    /**
     * List of IDs of the snapshots of the additional volumes to be attached to the image.
     *
     * > **Important:** For now it is only possible to have 1 additional_volume.
     */
    additionalVolumeIds?: pulumi.Input<string>;
    /**
     * The description of the extra volumes attached to the image.
     */
    additionalVolumes?: pulumi.Input<pulumi.Input<inputs.instance.ImageAdditionalVolume>[]>;
    /**
     * The architecture the image is compatible with. Possible values are: `x8664` or `arm`.
     */
    architecture?: pulumi.Input<string>;
    /**
     * Date of the volume creation.
     */
    creationDate?: pulumi.Input<string>;
    /**
     * ID of the server the image is based on (in case it is a backup).
     */
    fromServerId?: pulumi.Input<string>;
    /**
     * Date of volume latest update.
     */
    modificationDate?: pulumi.Input<string>;
    /**
     * The name of the image. If not provided it will be randomly generated.
     */
    name?: pulumi.Input<string>;
    /**
     * The organization ID the image is associated with.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * The ID of the project the image is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Set to `true` if the image is public.
     */
    public?: pulumi.Input<boolean>;
    /**
     * The ID of the snapshot of the volume to be used as root in the image.
     */
    rootVolumeId?: pulumi.Input<string>;
    /**
     * State of the volume.
     */
    state?: pulumi.Input<string>;
    /**
     * A list of tags to apply to the image.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The zone in which the image should be created.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Image resource.
 */
export interface ImageArgs {
    /**
     * List of IDs of the snapshots of the additional volumes to be attached to the image.
     *
     * > **Important:** For now it is only possible to have 1 additional_volume.
     */
    additionalVolumeIds?: pulumi.Input<string>;
    /**
     * The architecture the image is compatible with. Possible values are: `x8664` or `arm`.
     */
    architecture?: pulumi.Input<string>;
    /**
     * The name of the image. If not provided it will be randomly generated.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project the image is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Set to `true` if the image is public.
     */
    public?: pulumi.Input<boolean>;
    /**
     * The ID of the snapshot of the volume to be used as root in the image.
     */
    rootVolumeId: pulumi.Input<string>;
    /**
     * A list of tags to apply to the image.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The zone in which the image should be created.
     */
    zone?: pulumi.Input<string>;
}
