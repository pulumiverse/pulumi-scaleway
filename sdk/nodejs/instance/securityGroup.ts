// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * Instance security group can be imported using the `{zone}/{id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:instance/securityGroup:SecurityGroup web fr-par-1/11111111-1111-1111-1111-111111111111
 * ```
 */
export class SecurityGroup extends pulumi.CustomResource {
    /**
     * Get an existing SecurityGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityGroupState, opts?: pulumi.CustomResourceOptions): SecurityGroup {
        return new SecurityGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:instance/securityGroup:SecurityGroup';

    /**
     * Returns true if the given object is an instance of SecurityGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityGroup.__pulumiType;
    }

    /**
     * The description of the security group.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Whether to block SMTP on IPv4/IPv6 (Port 25, 465, 587). Set to false will unblock SMTP if your account is authorized to. If your organization is not yet authorized to send SMTP traffic, [open a support ticket](https://console.scaleway.com/support/tickets).
     */
    declare public readonly enableDefaultSecurity: pulumi.Output<boolean | undefined>;
    /**
     * A boolean to specify whether to use instance_security_group_rules.
     * If `externalRules` is set to `true`, `inboundRule` and `outboundRule` can not be set directly in the security group.
     */
    declare public readonly externalRules: pulumi.Output<boolean | undefined>;
    /**
     * The default policy on incoming traffic. Possible values are: `accept` or `drop`.
     */
    declare public readonly inboundDefaultPolicy: pulumi.Output<string | undefined>;
    /**
     * A list of inbound rule to add to the security group. (Structure is documented below.)
     */
    declare public readonly inboundRules: pulumi.Output<outputs.instance.SecurityGroupInboundRule[] | undefined>;
    /**
     * The name of the security group.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The organization ID the security group is associated with.
     */
    declare public /*out*/ readonly organizationId: pulumi.Output<string>;
    /**
     * The default policy on outgoing traffic. Possible values are: `accept` or `drop`.
     */
    declare public readonly outboundDefaultPolicy: pulumi.Output<string | undefined>;
    /**
     * A list of outbound rule to add to the security group. (Structure is documented below.)
     */
    declare public readonly outboundRules: pulumi.Output<outputs.instance.SecurityGroupOutboundRule[] | undefined>;
    /**
     * `projectId`) The ID of the project the security group is associated with.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * A boolean to specify whether the security group should be stateful or not.
     */
    declare public readonly stateful: pulumi.Output<boolean | undefined>;
    /**
     * The tags associated with the security group
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * `zone`) The zone in which the security group should be created.
     */
    declare public readonly zone: pulumi.Output<string | undefined>;

    /**
     * Create a SecurityGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SecurityGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityGroupArgs | SecurityGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityGroupState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["enableDefaultSecurity"] = state?.enableDefaultSecurity;
            resourceInputs["externalRules"] = state?.externalRules;
            resourceInputs["inboundDefaultPolicy"] = state?.inboundDefaultPolicy;
            resourceInputs["inboundRules"] = state?.inboundRules;
            resourceInputs["name"] = state?.name;
            resourceInputs["organizationId"] = state?.organizationId;
            resourceInputs["outboundDefaultPolicy"] = state?.outboundDefaultPolicy;
            resourceInputs["outboundRules"] = state?.outboundRules;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["stateful"] = state?.stateful;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["zone"] = state?.zone;
        } else {
            const args = argsOrState as SecurityGroupArgs | undefined;
            resourceInputs["description"] = args?.description;
            resourceInputs["enableDefaultSecurity"] = args?.enableDefaultSecurity;
            resourceInputs["externalRules"] = args?.externalRules;
            resourceInputs["inboundDefaultPolicy"] = args?.inboundDefaultPolicy;
            resourceInputs["inboundRules"] = args?.inboundRules;
            resourceInputs["name"] = args?.name;
            resourceInputs["outboundDefaultPolicy"] = args?.outboundDefaultPolicy;
            resourceInputs["outboundRules"] = args?.outboundRules;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["stateful"] = args?.stateful;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["zone"] = args?.zone;
            resourceInputs["organizationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "scaleway:index/instanceSecurityGroup:InstanceSecurityGroup" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(SecurityGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecurityGroup resources.
 */
export interface SecurityGroupState {
    /**
     * The description of the security group.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to block SMTP on IPv4/IPv6 (Port 25, 465, 587). Set to false will unblock SMTP if your account is authorized to. If your organization is not yet authorized to send SMTP traffic, [open a support ticket](https://console.scaleway.com/support/tickets).
     */
    enableDefaultSecurity?: pulumi.Input<boolean>;
    /**
     * A boolean to specify whether to use instance_security_group_rules.
     * If `externalRules` is set to `true`, `inboundRule` and `outboundRule` can not be set directly in the security group.
     */
    externalRules?: pulumi.Input<boolean>;
    /**
     * The default policy on incoming traffic. Possible values are: `accept` or `drop`.
     */
    inboundDefaultPolicy?: pulumi.Input<string>;
    /**
     * A list of inbound rule to add to the security group. (Structure is documented below.)
     */
    inboundRules?: pulumi.Input<pulumi.Input<inputs.instance.SecurityGroupInboundRule>[]>;
    /**
     * The name of the security group.
     */
    name?: pulumi.Input<string>;
    /**
     * The organization ID the security group is associated with.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * The default policy on outgoing traffic. Possible values are: `accept` or `drop`.
     */
    outboundDefaultPolicy?: pulumi.Input<string>;
    /**
     * A list of outbound rule to add to the security group. (Structure is documented below.)
     */
    outboundRules?: pulumi.Input<pulumi.Input<inputs.instance.SecurityGroupOutboundRule>[]>;
    /**
     * `projectId`) The ID of the project the security group is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * A boolean to specify whether the security group should be stateful or not.
     */
    stateful?: pulumi.Input<boolean>;
    /**
     * The tags associated with the security group
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * `zone`) The zone in which the security group should be created.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecurityGroup resource.
 */
export interface SecurityGroupArgs {
    /**
     * The description of the security group.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to block SMTP on IPv4/IPv6 (Port 25, 465, 587). Set to false will unblock SMTP if your account is authorized to. If your organization is not yet authorized to send SMTP traffic, [open a support ticket](https://console.scaleway.com/support/tickets).
     */
    enableDefaultSecurity?: pulumi.Input<boolean>;
    /**
     * A boolean to specify whether to use instance_security_group_rules.
     * If `externalRules` is set to `true`, `inboundRule` and `outboundRule` can not be set directly in the security group.
     */
    externalRules?: pulumi.Input<boolean>;
    /**
     * The default policy on incoming traffic. Possible values are: `accept` or `drop`.
     */
    inboundDefaultPolicy?: pulumi.Input<string>;
    /**
     * A list of inbound rule to add to the security group. (Structure is documented below.)
     */
    inboundRules?: pulumi.Input<pulumi.Input<inputs.instance.SecurityGroupInboundRule>[]>;
    /**
     * The name of the security group.
     */
    name?: pulumi.Input<string>;
    /**
     * The default policy on outgoing traffic. Possible values are: `accept` or `drop`.
     */
    outboundDefaultPolicy?: pulumi.Input<string>;
    /**
     * A list of outbound rule to add to the security group. (Structure is documented below.)
     */
    outboundRules?: pulumi.Input<pulumi.Input<inputs.instance.SecurityGroupOutboundRule>[]>;
    /**
     * `projectId`) The ID of the project the security group is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * A boolean to specify whether the security group should be stateful or not.
     */
    stateful?: pulumi.Input<boolean>;
    /**
     * The tags associated with the security group
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * `zone`) The zone in which the security group should be created.
     */
    zone?: pulumi.Input<string>;
}
