// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates and manages Scaleway compute Instance Volumes.
 * For more information, see the [API documentation](https://www.scaleway.com/en/developers/api/instance/#path-volumes-list-volumes).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const serverVolume = new scaleway.instance.Volume("server_volume", {
 *     type: "l_ssd",
 *     name: "some-volume-name",
 *     sizeInGb: 20,
 * });
 * ```
 *
 * ## Import
 *
 * volumes can be imported using the `{zone}/{id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:instance/volume:Volume server_volume fr-par-1/11111111-1111-1111-1111-111111111111
 * ```
 */
export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:instance/volume:Volume';

    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Volume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }

    /**
     * If set, the new volume will be created from this snapshot. Only one of `sizeInGb` and `fromSnapshotId` should be specified.
     */
    declare public readonly fromSnapshotId: pulumi.Output<string | undefined>;
    /**
     * If true, consider that this volume may have been migrated and no longer exists.
     */
    declare public readonly migrateToSbs: pulumi.Output<boolean | undefined>;
    /**
     * The name of the volume. If not provided it will be randomly generated.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The organization ID the volume is associated with.
     */
    declare public /*out*/ readonly organizationId: pulumi.Output<string>;
    /**
     * `projectId`) The ID of the project the volume is associated with.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * The id of the associated server.
     */
    declare public /*out*/ readonly serverId: pulumi.Output<string>;
    /**
     * The size of the volume. Only one of `sizeInGb` and `fromSnapshotId` should be specified.
     */
    declare public readonly sizeInGb: pulumi.Output<number | undefined>;
    /**
     * A list of tags to apply to the volume.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * The type of the volume. The possible values are: `lSsd` (Local SSD), `scratch` (Local Scratch SSD).
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * `zone`) The zone in which the volume should be created.
     */
    declare public readonly zone: pulumi.Output<string | undefined>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeState | undefined;
            resourceInputs["fromSnapshotId"] = state?.fromSnapshotId;
            resourceInputs["migrateToSbs"] = state?.migrateToSbs;
            resourceInputs["name"] = state?.name;
            resourceInputs["organizationId"] = state?.organizationId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["serverId"] = state?.serverId;
            resourceInputs["sizeInGb"] = state?.sizeInGb;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["type"] = state?.type;
            resourceInputs["zone"] = state?.zone;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["fromSnapshotId"] = args?.fromSnapshotId;
            resourceInputs["migrateToSbs"] = args?.migrateToSbs;
            resourceInputs["name"] = args?.name;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["sizeInGb"] = args?.sizeInGb;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["type"] = args?.type;
            resourceInputs["zone"] = args?.zone;
            resourceInputs["organizationId"] = undefined /*out*/;
            resourceInputs["serverId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "scaleway:index/instanceVolume:InstanceVolume" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Volume.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    /**
     * If set, the new volume will be created from this snapshot. Only one of `sizeInGb` and `fromSnapshotId` should be specified.
     */
    fromSnapshotId?: pulumi.Input<string>;
    /**
     * If true, consider that this volume may have been migrated and no longer exists.
     */
    migrateToSbs?: pulumi.Input<boolean>;
    /**
     * The name of the volume. If not provided it will be randomly generated.
     */
    name?: pulumi.Input<string>;
    /**
     * The organization ID the volume is associated with.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * `projectId`) The ID of the project the volume is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The id of the associated server.
     */
    serverId?: pulumi.Input<string>;
    /**
     * The size of the volume. Only one of `sizeInGb` and `fromSnapshotId` should be specified.
     */
    sizeInGb?: pulumi.Input<number>;
    /**
     * A list of tags to apply to the volume.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of the volume. The possible values are: `lSsd` (Local SSD), `scratch` (Local Scratch SSD).
     */
    type?: pulumi.Input<string>;
    /**
     * `zone`) The zone in which the volume should be created.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    /**
     * If set, the new volume will be created from this snapshot. Only one of `sizeInGb` and `fromSnapshotId` should be specified.
     */
    fromSnapshotId?: pulumi.Input<string>;
    /**
     * If true, consider that this volume may have been migrated and no longer exists.
     */
    migrateToSbs?: pulumi.Input<boolean>;
    /**
     * The name of the volume. If not provided it will be randomly generated.
     */
    name?: pulumi.Input<string>;
    /**
     * `projectId`) The ID of the project the volume is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The size of the volume. Only one of `sizeInGb` and `fromSnapshotId` should be specified.
     */
    sizeInGb?: pulumi.Input<number>;
    /**
     * A list of tags to apply to the volume.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of the volume. The possible values are: `lSsd` (Local SSD), `scratch` (Local Scratch SSD).
     */
    type: pulumi.Input<string>;
    /**
     * `zone`) The zone in which the volume should be created.
     */
    zone?: pulumi.Input<string>;
}
