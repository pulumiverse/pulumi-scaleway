// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.iot.Hub("main", {
 *     name: "test-iot",
 *     productPlan: "plan_shared",
 * });
 * const mainDevice = new scaleway.iot.Device("main", {
 *     hubId: main.id,
 *     name: "test-iot",
 * });
 * ```
 *
 * ### With custom certificate
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as local from "@pulumi/local";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.iot.Hub("main", {
 *     name: "test-iot",
 *     productPlan: "plan_shared",
 * });
 * const deviceCert = local.getFile({
 *     filename: "device-certificate.pem",
 * });
 * const mainDevice = new scaleway.iot.Device("main", {
 *     hubId: main.id,
 *     name: "test-iot",
 *     certificate: {
 *         crt: deviceCert.then(deviceCert => deviceCert.content),
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * IoT devices can be imported using the `{region}/{id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:iot/device:Device device01 fr-par/11111111-1111-1111-1111-111111111111
 * ```
 */
export class Device extends pulumi.CustomResource {
    /**
     * Get an existing Device resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeviceState, opts?: pulumi.CustomResourceOptions): Device {
        return new Device(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:iot/device:Device';

    /**
     * Returns true if the given object is an instance of Device.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Device {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Device.__pulumiType;
    }

    /**
     * Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.
     *
     * > **Important:** Updates to `allowInsecure` can disconnect eventually connected devices.
     */
    declare public readonly allowInsecure: pulumi.Output<boolean | undefined>;
    /**
     * Allow more than one simultaneous connection using the same device credentials.
     *
     * > **Important:** Updates to `allowMultipleConnections` can disconnect eventually connected devices.
     */
    declare public readonly allowMultipleConnections: pulumi.Output<boolean | undefined>;
    /**
     * The certificate bundle of the device.
     */
    declare public readonly certificate: pulumi.Output<outputs.iot.DeviceCertificate>;
    /**
     * The date and time the device was created.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The description of the IoT device (e.g. `living room`).
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The ID of the hub on which this device will be created.
     */
    declare public readonly hubId: pulumi.Output<string>;
    /**
     * The current connection status of the device.
     */
    declare public /*out*/ readonly isConnected: pulumi.Output<boolean>;
    /**
     * The last MQTT activity of the device.
     */
    declare public /*out*/ readonly lastActivityAt: pulumi.Output<string>;
    /**
     * Rules that define which messages are authorized or denied based on their topic.
     */
    declare public readonly messageFilters: pulumi.Output<outputs.iot.DeviceMessageFilters | undefined>;
    /**
     * The name of the IoT device you want to create (e.g. `my-device`).
     *
     * > **Important:** Updates to `name` will destroy and recreate a new resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The region you want to attach the resource to
     */
    declare public readonly region: pulumi.Output<string | undefined>;
    /**
     * The current status of the device.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The date and time the device resource was updated.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a Device resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeviceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeviceArgs | DeviceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeviceState | undefined;
            resourceInputs["allowInsecure"] = state?.allowInsecure;
            resourceInputs["allowMultipleConnections"] = state?.allowMultipleConnections;
            resourceInputs["certificate"] = state?.certificate;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["hubId"] = state?.hubId;
            resourceInputs["isConnected"] = state?.isConnected;
            resourceInputs["lastActivityAt"] = state?.lastActivityAt;
            resourceInputs["messageFilters"] = state?.messageFilters;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["status"] = state?.status;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as DeviceArgs | undefined;
            if (args?.hubId === undefined && !opts.urn) {
                throw new Error("Missing required property 'hubId'");
            }
            resourceInputs["allowInsecure"] = args?.allowInsecure;
            resourceInputs["allowMultipleConnections"] = args?.allowMultipleConnections;
            resourceInputs["certificate"] = args?.certificate;
            resourceInputs["description"] = args?.description;
            resourceInputs["hubId"] = args?.hubId;
            resourceInputs["messageFilters"] = args?.messageFilters;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["isConnected"] = undefined /*out*/;
            resourceInputs["lastActivityAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "scaleway:index/iotDevice:IotDevice" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Device.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Device resources.
 */
export interface DeviceState {
    /**
     * Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.
     *
     * > **Important:** Updates to `allowInsecure` can disconnect eventually connected devices.
     */
    allowInsecure?: pulumi.Input<boolean>;
    /**
     * Allow more than one simultaneous connection using the same device credentials.
     *
     * > **Important:** Updates to `allowMultipleConnections` can disconnect eventually connected devices.
     */
    allowMultipleConnections?: pulumi.Input<boolean>;
    /**
     * The certificate bundle of the device.
     */
    certificate?: pulumi.Input<inputs.iot.DeviceCertificate>;
    /**
     * The date and time the device was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the IoT device (e.g. `living room`).
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the hub on which this device will be created.
     */
    hubId?: pulumi.Input<string>;
    /**
     * The current connection status of the device.
     */
    isConnected?: pulumi.Input<boolean>;
    /**
     * The last MQTT activity of the device.
     */
    lastActivityAt?: pulumi.Input<string>;
    /**
     * Rules that define which messages are authorized or denied based on their topic.
     */
    messageFilters?: pulumi.Input<inputs.iot.DeviceMessageFilters>;
    /**
     * The name of the IoT device you want to create (e.g. `my-device`).
     *
     * > **Important:** Updates to `name` will destroy and recreate a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    region?: pulumi.Input<string>;
    /**
     * The current status of the device.
     */
    status?: pulumi.Input<string>;
    /**
     * The date and time the device resource was updated.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Device resource.
 */
export interface DeviceArgs {
    /**
     * Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.
     *
     * > **Important:** Updates to `allowInsecure` can disconnect eventually connected devices.
     */
    allowInsecure?: pulumi.Input<boolean>;
    /**
     * Allow more than one simultaneous connection using the same device credentials.
     *
     * > **Important:** Updates to `allowMultipleConnections` can disconnect eventually connected devices.
     */
    allowMultipleConnections?: pulumi.Input<boolean>;
    /**
     * The certificate bundle of the device.
     */
    certificate?: pulumi.Input<inputs.iot.DeviceCertificate>;
    /**
     * The description of the IoT device (e.g. `living room`).
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the hub on which this device will be created.
     */
    hubId: pulumi.Input<string>;
    /**
     * Rules that define which messages are authorized or denied based on their topic.
     */
    messageFilters?: pulumi.Input<inputs.iot.DeviceMessageFilters>;
    /**
     * The name of the IoT device you want to create (e.g. `my-device`).
     *
     * > **Important:** Updates to `name` will destroy and recreate a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    region?: pulumi.Input<string>;
}
