// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ### Database Route
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const mainHub = new scaleway.iot.Hub("main", {
 *     name: "main",
 *     productPlan: "plan_shared",
 * });
 * const iot = new scaleway.databases.Instance("iot", {
 *     name: "iot",
 *     nodeType: "db-dev-s",
 *     engine: "PostgreSQL-12",
 *     userName: "root",
 *     password: "T3stP4ssw0rdD0N0tUs3!",
 * });
 * const main = new scaleway.iot.Route("main", {
 *     name: "default",
 *     hubId: mainHub.id,
 *     topic: "#",
 *     database: {
 *         query: `INSERT INTO measurements(
 * \\tpush_time,
 * \\treport_time,
 * \\tstation_id,
 * \\ttemperature,
 * \\thumidity
 * ) VALUES (
 * \\tNOW(),
 * \\tTIMESTAMP 'epoch' + ((PAYLOAD::jsonb->'last_reported')::integer * INTERVAL '1 second'),
 * \\t(PAYLOAD::jsonb->'station_id')::uuid,
 * \\t(PAYLOAD::jsonb->'temperature')::decimal,
 * \\t(PAYLOAD::jsonb->'humidity'):decimal:
 * );
 * `,
 *         host: iot.endpointIp,
 *         port: iot.endpointPort,
 *         dbname: "rdb",
 *         username: iot.userName,
 *         password: iot.password,
 *     },
 * });
 * ```
 *
 * ### S3 Route
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const mainHub = new scaleway.iot.Hub("main", {
 *     name: "main",
 *     productPlan: "plan_shared",
 * });
 * const mainBucket = new scaleway.object.Bucket("main", {
 *     region: "fr-par",
 *     name: "my_awesome-bucket",
 * });
 * const main = new scaleway.iot.Route("main", {
 *     name: "main",
 *     hubId: mainHub.id,
 *     topic: "#",
 *     s3: {
 *         bucketRegion: mainBucket.region,
 *         bucketName: mainBucket.name,
 *         objectPrefix: "foo",
 *         strategy: "per_topic",
 *     },
 * });
 * ```
 *
 * ### Rest Route
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const mainHub = new scaleway.iot.Hub("main", {
 *     name: "main",
 *     productPlan: "plan_shared",
 * });
 * const main = new scaleway.iot.Route("main", {
 *     name: "main",
 *     hubId: mainHub.id,
 *     topic: "#",
 *     rest: {
 *         verb: "get",
 *         uri: "http://scaleway.com",
 *         headers: {
 *             "X-awesome-header": "my-awesome-value",
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * IoT Routes can be imported using the `{region}/{id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:iot/route:Route route01 fr-par/11111111-1111-1111-1111-111111111111
 * ```
 */
export class Route extends pulumi.CustomResource {
    /**
     * Get an existing Route resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouteState, opts?: pulumi.CustomResourceOptions): Route {
        return new Route(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:iot/route:Route';

    /**
     * Returns true if the given object is an instance of Route.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Route {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Route.__pulumiType;
    }

    /**
     * The date and time the Route was created.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Configuration block for the database routes. See  [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
     */
    declare public readonly database: pulumi.Output<outputs.iot.RouteDatabase | undefined>;
    /**
     * The hub ID to which the Route will be attached to.
     */
    declare public readonly hubId: pulumi.Output<string>;
    /**
     * The name of the IoT Route you want to create (e.g. `my-route`).
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * (Defaults to provider `region`) The region in which the Route is attached to.
     */
    declare public readonly region: pulumi.Output<string | undefined>;
    /**
     * Configuration block for the rest routes. See [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
     */
    declare public readonly rest: pulumi.Output<outputs.iot.RouteRest | undefined>;
    /**
     * Configuration block for the S3 routes. See [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
     */
    declare public readonly s3: pulumi.Output<outputs.iot.RouteS3 | undefined>;
    /**
     * The topic the Route subscribes to, wildcards allowed (e.g. `thelab/+/temperature/#`).
     */
    declare public readonly topic: pulumi.Output<string>;

    /**
     * Create a Route resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouteArgs | RouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouteState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["database"] = state?.database;
            resourceInputs["hubId"] = state?.hubId;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["rest"] = state?.rest;
            resourceInputs["s3"] = state?.s3;
            resourceInputs["topic"] = state?.topic;
        } else {
            const args = argsOrState as RouteArgs | undefined;
            if (args?.hubId === undefined && !opts.urn) {
                throw new Error("Missing required property 'hubId'");
            }
            if (args?.topic === undefined && !opts.urn) {
                throw new Error("Missing required property 'topic'");
            }
            resourceInputs["database"] = args?.database;
            resourceInputs["hubId"] = args?.hubId;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["rest"] = args?.rest;
            resourceInputs["s3"] = args?.s3;
            resourceInputs["topic"] = args?.topic;
            resourceInputs["createdAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "scaleway:index/iotRoute:IotRoute" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Route.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Route resources.
 */
export interface RouteState {
    /**
     * The date and time the Route was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Configuration block for the database routes. See  [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
     */
    database?: pulumi.Input<inputs.iot.RouteDatabase>;
    /**
     * The hub ID to which the Route will be attached to.
     */
    hubId?: pulumi.Input<string>;
    /**
     * The name of the IoT Route you want to create (e.g. `my-route`).
     */
    name?: pulumi.Input<string>;
    /**
     * (Defaults to provider `region`) The region in which the Route is attached to.
     */
    region?: pulumi.Input<string>;
    /**
     * Configuration block for the rest routes. See [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
     */
    rest?: pulumi.Input<inputs.iot.RouteRest>;
    /**
     * Configuration block for the S3 routes. See [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
     */
    s3?: pulumi.Input<inputs.iot.RouteS3>;
    /**
     * The topic the Route subscribes to, wildcards allowed (e.g. `thelab/+/temperature/#`).
     */
    topic?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Route resource.
 */
export interface RouteArgs {
    /**
     * Configuration block for the database routes. See  [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
     */
    database?: pulumi.Input<inputs.iot.RouteDatabase>;
    /**
     * The hub ID to which the Route will be attached to.
     */
    hubId: pulumi.Input<string>;
    /**
     * The name of the IoT Route you want to create (e.g. `my-route`).
     */
    name?: pulumi.Input<string>;
    /**
     * (Defaults to provider `region`) The region in which the Route is attached to.
     */
    region?: pulumi.Input<string>;
    /**
     * Configuration block for the rest routes. See [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
     */
    rest?: pulumi.Input<inputs.iot.RouteRest>;
    /**
     * Configuration block for the S3 routes. See [product documentation](https://www.scaleway.com/en/docs/iot-hub/how-to/create-route/) for a better understanding of the parameters.
     */
    s3?: pulumi.Input<inputs.iot.RouteS3>;
    /**
     * The topic the Route subscribes to, wildcards allowed (e.g. `thelab/+/temperature/#`).
     */
    topic: pulumi.Input<string>;
}
