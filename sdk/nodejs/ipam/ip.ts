// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Books and manages IPAM IPs.
 *
 * For more information about IPAM, see the main [documentation](https://www.scaleway.com/en/docs/vpc/concepts/#ipam).
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const vpc01 = new scaleway.network.Vpc("vpc01", {name: "my vpc"});
 * const pn01 = new scaleway.network.PrivateNetwork("pn01", {
 *     vpcId: vpc01.id,
 *     ipv4Subnet: {
 *         subnet: "172.16.32.0/22",
 *     },
 * });
 * const ip01 = new scaleway.ipam.Ip("ip01", {sources: [{
 *     privateNetworkId: pn01.id,
 * }]});
 * ```
 *
 * ### Request a specific IPv4 address
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const vpc01 = new scaleway.network.Vpc("vpc01", {name: "my vpc"});
 * const pn01 = new scaleway.network.PrivateNetwork("pn01", {
 *     vpcId: vpc01.id,
 *     ipv4Subnet: {
 *         subnet: "172.16.32.0/22",
 *     },
 * });
 * const ip01 = new scaleway.ipam.Ip("ip01", {
 *     address: "172.16.32.7",
 *     sources: [{
 *         privateNetworkId: pn01.id,
 *     }],
 * });
 * ```
 *
 * ### Request an IPv6 address
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const vpc01 = new scaleway.network.Vpc("vpc01", {name: "my vpc"});
 * const pn01 = new scaleway.network.PrivateNetwork("pn01", {
 *     vpcId: vpc01.id,
 *     ipv6Subnets: [{
 *         subnet: "fd46:78ab:30b8:177c::/64",
 *     }],
 * });
 * const ip01 = new scaleway.ipam.Ip("ip01", {
 *     isIpv6: true,
 *     sources: [{
 *         privateNetworkId: pn01.id,
 *     }],
 * });
 * ```
 *
 * ### Book an IP for a custom resource
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const vpc01 = new scaleway.network.Vpc("vpc01", {name: "my vpc"});
 * const pn01 = new scaleway.network.PrivateNetwork("pn01", {
 *     vpcId: vpc01.id,
 *     ipv4Subnet: {
 *         subnet: "172.16.32.0/22",
 *     },
 * });
 * const ip01 = new scaleway.ipam.Ip("ip01", {
 *     address: "172.16.32.7",
 *     sources: [{
 *         privateNetworkId: pn01.id,
 *     }],
 *     customResources: [{
 *         macAddress: "bc:24:11:74:d0:6a",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * IPAM IPs can be imported using `{region}/{id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:ipam/ip:Ip ip_demo fr-par/11111111-1111-1111-1111-111111111111
 * ```
 */
export class Ip extends pulumi.CustomResource {
    /**
     * Get an existing Ip resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpState, opts?: pulumi.CustomResourceOptions): Ip {
        return new Ip(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:ipam/ip:Ip';

    /**
     * Returns true if the given object is an instance of Ip.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ip {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ip.__pulumiType;
    }

    /**
     * Request a specific IP in the requested source pool
     */
    declare public readonly address: pulumi.Output<string>;
    /**
     * Date and time of IP's creation (RFC 3339 format).
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The custom resource in which to book the IP
     */
    declare public readonly customResources: pulumi.Output<outputs.ipam.IpCustomResource[] | undefined>;
    /**
     * Defines whether to request an IPv6 address instead of IPv4.
     */
    declare public readonly isIpv6: pulumi.Output<boolean | undefined>;
    /**
     * `projectId`) The ID of the Project the IP is associated with.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * `region`) The region of the IP.
     */
    declare public readonly region: pulumi.Output<string | undefined>;
    /**
     * The IP resource.
     */
    declare public /*out*/ readonly resources: pulumi.Output<outputs.ipam.IpResource[]>;
    /**
     * The reverse DNS for this IP.
     */
    declare public /*out*/ readonly reverses: pulumi.Output<outputs.ipam.IpReverse[]>;
    /**
     * The source in which to book the IP.
     */
    declare public readonly sources: pulumi.Output<outputs.ipam.IpSource[]>;
    /**
     * The tags associated with the IP.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * Date and time of IP's last update (RFC 3339 format).
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * The zone of the IP.
     */
    declare public /*out*/ readonly zone: pulumi.Output<string>;

    /**
     * Create a Ip resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpArgs | IpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpState | undefined;
            resourceInputs["address"] = state?.address;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["customResources"] = state?.customResources;
            resourceInputs["isIpv6"] = state?.isIpv6;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["region"] = state?.region;
            resourceInputs["resources"] = state?.resources;
            resourceInputs["reverses"] = state?.reverses;
            resourceInputs["sources"] = state?.sources;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["zone"] = state?.zone;
        } else {
            const args = argsOrState as IpArgs | undefined;
            if (args?.sources === undefined && !opts.urn) {
                throw new Error("Missing required property 'sources'");
            }
            resourceInputs["address"] = args?.address;
            resourceInputs["customResources"] = args?.customResources;
            resourceInputs["isIpv6"] = args?.isIpv6;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["region"] = args?.region;
            resourceInputs["sources"] = args?.sources;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["resources"] = undefined /*out*/;
            resourceInputs["reverses"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["zone"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "scaleway:index/ipamIp:IpamIp" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Ip.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Ip resources.
 */
export interface IpState {
    /**
     * Request a specific IP in the requested source pool
     */
    address?: pulumi.Input<string>;
    /**
     * Date and time of IP's creation (RFC 3339 format).
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The custom resource in which to book the IP
     */
    customResources?: pulumi.Input<pulumi.Input<inputs.ipam.IpCustomResource>[]>;
    /**
     * Defines whether to request an IPv6 address instead of IPv4.
     */
    isIpv6?: pulumi.Input<boolean>;
    /**
     * `projectId`) The ID of the Project the IP is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * `region`) The region of the IP.
     */
    region?: pulumi.Input<string>;
    /**
     * The IP resource.
     */
    resources?: pulumi.Input<pulumi.Input<inputs.ipam.IpResource>[]>;
    /**
     * The reverse DNS for this IP.
     */
    reverses?: pulumi.Input<pulumi.Input<inputs.ipam.IpReverse>[]>;
    /**
     * The source in which to book the IP.
     */
    sources?: pulumi.Input<pulumi.Input<inputs.ipam.IpSource>[]>;
    /**
     * The tags associated with the IP.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Date and time of IP's last update (RFC 3339 format).
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The zone of the IP.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ip resource.
 */
export interface IpArgs {
    /**
     * Request a specific IP in the requested source pool
     */
    address?: pulumi.Input<string>;
    /**
     * The custom resource in which to book the IP
     */
    customResources?: pulumi.Input<pulumi.Input<inputs.ipam.IpCustomResource>[]>;
    /**
     * Defines whether to request an IPv6 address instead of IPv4.
     */
    isIpv6?: pulumi.Input<boolean>;
    /**
     * `projectId`) The ID of the Project the IP is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * `region`) The region of the IP.
     */
    region?: pulumi.Input<string>;
    /**
     * The source in which to book the IP.
     */
    sources: pulumi.Input<pulumi.Input<inputs.ipam.IpSource>[]>;
    /**
     * The tags associated with the IP.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
