// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Scaleway Key Manager Key resource.\
 * This resource allows you to create and manage cryptographic keys in Scaleway Key Manager (KMS).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.KeyManagerKey("main", {
 *     name: "my-kms-key",
 *     region: "fr-par",
 *     projectId: "your-project-id",
 *     usage: "symmetric_encryption",
 *     description: "Key for encrypting secrets",
 *     tags: [
 *         "env:prod",
 *         "kms",
 *     ],
 *     unprotected: true,
 *     rotationPolicy: {
 *         rotationPeriod: "720h",
 *     },
 * });
 * ```
 *
 * ## Notes
 *
 * - **Protection**: By default, keys are protected and cannot be deleted. To allow deletion, set `unprotected = true` when creating the key.
 * - **Rotation Policy**: The `rotationPolicy` block allows you to set automatic rotation for your key.
 * - **Origin**: The `origin` argument is optional and defaults to `scalewayKms`. Use `external` if you want to import an external key (see Scaleway documentation for details).
 * - **Project and Region**: If not specified, `projectId` and `region` will default to the provider configuration.
 *
 * ## Example: Asymmetric Key
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const asym = new scaleway.KeyManagerKey("asym", {
 *     name: "asymmetric-key",
 *     region: "fr-par",
 *     usage: "asymmetric_signing",
 *     description: "Key for signing documents",
 *     unprotected: true,
 * });
 * ```
 *
 * ## Import
 *
 * You can import a key using its ID and region:
 *
 * ```sh
 * $ pulumi import scaleway:index/keyManagerKey:KeyManagerKey main fr-par/11111111-2222-3333-4444-555555555555
 * ```
 */
export class KeyManagerKey extends pulumi.CustomResource {
    /**
     * Get an existing KeyManagerKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeyManagerKeyState, opts?: pulumi.CustomResourceOptions): KeyManagerKey {
        return new KeyManagerKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/keyManagerKey:KeyManagerKey';

    /**
     * Returns true if the given object is an instance of KeyManagerKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KeyManagerKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeyManagerKey.__pulumiType;
    }

    /**
     * The date and time when the key was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * – A description for the key.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Whether the key is locked.
     */
    public /*out*/ readonly locked!: pulumi.Output<boolean>;
    /**
     * The name of the key.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * – The origin of the key. Valid values are:
     */
    public readonly origin!: pulumi.Output<string | undefined>;
    /**
     * – The ID of the project the key belongs to.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Whether the key is protected from deletion.
     */
    public /*out*/ readonly protected!: pulumi.Output<boolean>;
    /**
     * The region in which to create the key (e.g., `fr-par`).
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The date and time when the key was last rotated.
     */
    public /*out*/ readonly rotatedAt!: pulumi.Output<string>;
    /**
     * The number of times the key has been rotated.
     */
    public /*out*/ readonly rotationCount!: pulumi.Output<number>;
    /**
     * – Rotation policy for the key:
     */
    public readonly rotationPolicy!: pulumi.Output<outputs.KeyManagerKeyRotationPolicy | undefined>;
    /**
     * The state of the key (e.g., `enabled`).
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * – A list of tags to assign to the key.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * – If `true`, the key can be deleted. Defaults to `false` (protected).
     */
    public readonly unprotected!: pulumi.Output<boolean | undefined>;
    /**
     * The date and time when the key was last updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * – The usage of the key. Valid values are:
     */
    public readonly usage!: pulumi.Output<string>;

    /**
     * Create a KeyManagerKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeyManagerKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeyManagerKeyArgs | KeyManagerKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeyManagerKeyState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["locked"] = state ? state.locked : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["origin"] = state ? state.origin : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["protected"] = state ? state.protected : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["rotatedAt"] = state ? state.rotatedAt : undefined;
            resourceInputs["rotationCount"] = state ? state.rotationCount : undefined;
            resourceInputs["rotationPolicy"] = state ? state.rotationPolicy : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["unprotected"] = state ? state.unprotected : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["usage"] = state ? state.usage : undefined;
        } else {
            const args = argsOrState as KeyManagerKeyArgs | undefined;
            if ((!args || args.usage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'usage'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["origin"] = args ? args.origin : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["rotationPolicy"] = args ? args.rotationPolicy : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["unprotected"] = args ? args.unprotected : undefined;
            resourceInputs["usage"] = args ? args.usage : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["locked"] = undefined /*out*/;
            resourceInputs["protected"] = undefined /*out*/;
            resourceInputs["rotatedAt"] = undefined /*out*/;
            resourceInputs["rotationCount"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KeyManagerKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KeyManagerKey resources.
 */
export interface KeyManagerKeyState {
    /**
     * The date and time when the key was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * – A description for the key.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the key is locked.
     */
    locked?: pulumi.Input<boolean>;
    /**
     * The name of the key.
     */
    name?: pulumi.Input<string>;
    /**
     * – The origin of the key. Valid values are:
     */
    origin?: pulumi.Input<string>;
    /**
     * – The ID of the project the key belongs to.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Whether the key is protected from deletion.
     */
    protected?: pulumi.Input<boolean>;
    /**
     * The region in which to create the key (e.g., `fr-par`).
     */
    region?: pulumi.Input<string>;
    /**
     * The date and time when the key was last rotated.
     */
    rotatedAt?: pulumi.Input<string>;
    /**
     * The number of times the key has been rotated.
     */
    rotationCount?: pulumi.Input<number>;
    /**
     * – Rotation policy for the key:
     */
    rotationPolicy?: pulumi.Input<inputs.KeyManagerKeyRotationPolicy>;
    /**
     * The state of the key (e.g., `enabled`).
     */
    state?: pulumi.Input<string>;
    /**
     * – A list of tags to assign to the key.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * – If `true`, the key can be deleted. Defaults to `false` (protected).
     */
    unprotected?: pulumi.Input<boolean>;
    /**
     * The date and time when the key was last updated.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * – The usage of the key. Valid values are:
     */
    usage?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KeyManagerKey resource.
 */
export interface KeyManagerKeyArgs {
    /**
     * – A description for the key.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the key.
     */
    name?: pulumi.Input<string>;
    /**
     * – The origin of the key. Valid values are:
     */
    origin?: pulumi.Input<string>;
    /**
     * – The ID of the project the key belongs to.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region in which to create the key (e.g., `fr-par`).
     */
    region?: pulumi.Input<string>;
    /**
     * – Rotation policy for the key:
     */
    rotationPolicy?: pulumi.Input<inputs.KeyManagerKeyRotationPolicy>;
    /**
     * – A list of tags to assign to the key.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * – If `true`, the key can be deleted. Defaults to `false` (protected).
     */
    unprotected?: pulumi.Input<boolean>;
    /**
     * – The usage of the key. Valid values are:
     */
    usage: pulumi.Input<string>;
}
