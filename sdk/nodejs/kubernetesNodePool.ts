// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * Kubernetes pools can be imported using the `{region}/{id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:index/kubernetesNodePool:KubernetesNodePool mypool fr-par/11111111-1111-1111-1111-111111111111
 * ```
 *
 * @deprecated scaleway.index/kubernetesnodepool.KubernetesNodePool has been deprecated in favor of scaleway.kubernetes/pool.Pool
 */
export class KubernetesNodePool extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesNodePoolState, opts?: pulumi.CustomResourceOptions): KubernetesNodePool {
        pulumi.log.warn("KubernetesNodePool is deprecated: scaleway.index/kubernetesnodepool.KubernetesNodePool has been deprecated in favor of scaleway.kubernetes/pool.Pool")
        return new KubernetesNodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/kubernetesNodePool:KubernetesNodePool';

    /**
     * Returns true if the given object is an instance of KubernetesNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesNodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesNodePool.__pulumiType;
    }

    /**
     * Enables the autohealing feature for this pool.
     */
    declare public readonly autohealing: pulumi.Output<boolean | undefined>;
    /**
     * Enables the autoscaling feature for this pool.
     *
     * > **Important:** When enabled, an update of the `size` will not be taken into account.
     */
    declare public readonly autoscaling: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the Kubernetes cluster on which this pool will be created.
     */
    declare public readonly clusterId: pulumi.Output<string>;
    /**
     * The container runtime of the pool.
     *
     * > **Important:** Updates to this field will recreate a new resource.
     */
    declare public readonly containerRuntime: pulumi.Output<string | undefined>;
    /**
     * The creation date of the pool.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The actual size of the pool
     */
    declare public /*out*/ readonly currentSize: pulumi.Output<number>;
    /**
     * The Kubelet arguments to be used by this pool
     */
    declare public readonly kubeletArgs: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The maximum size of the pool, used by the autoscaling feature.
     */
    declare public readonly maxSize: pulumi.Output<number>;
    /**
     * The minimum size of the pool, used by the autoscaling feature.
     */
    declare public readonly minSize: pulumi.Output<number | undefined>;
    /**
     * The name for the pool.
     *
     * > **Important:** Updates to this field will recreate a new resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The commercial type of the pool instances. Instances with insufficient memory are not eligible (DEV1-S, PLAY2-PICO, STARDUST). `external` is a special node type used to provision from other Cloud providers.
     *
     * > **Important:** Updates to this field will recreate a new resource.
     */
    declare public readonly nodeType: pulumi.Output<string>;
    /**
     * (List of) The nodes in the default pool.
     */
    declare public /*out*/ readonly nodes: pulumi.Output<outputs.KubernetesNodePoolNode[]>;
    /**
     * The [placement group](https://www.scaleway.com/en/developers/api/instance/#path-placement-groups-create-a-placement-group) the nodes of the pool will be attached to.
     *
     * > **Important:** Updates to this field will recreate a new resource.
     */
    declare public readonly placementGroupId: pulumi.Output<string | undefined>;
    /**
     * Defines if the public IP should be removed from Nodes. To use this feature, your Cluster must have an attached Private Network set up with a Public Gateway.
     *
     * > **Important:** Updates to this field will recreate a new resource.
     */
    declare public readonly publicIpDisabled: pulumi.Output<boolean | undefined>;
    /**
     * `region`) The region in which the pool should be created.
     */
    declare public readonly region: pulumi.Output<string | undefined>;
    /**
     * The size of the system volume of the nodes in gigabyte
     */
    declare public readonly rootVolumeSizeInGb: pulumi.Output<number>;
    /**
     * System volume type of the nodes composing the pool
     */
    declare public readonly rootVolumeType: pulumi.Output<string>;
    /**
     * The ID of the security group
     *
     * > **Important:** Updates to this field will recreate a new resource.
     */
    declare public readonly securityGroupId: pulumi.Output<string>;
    /**
     * The size of the pool.
     *
     * > **Important:** This field will only be used at creation if autoscaling is enabled.
     */
    declare public readonly size: pulumi.Output<number>;
    /**
     * The status of the node.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The tags associated with the pool.
     *
     * > Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (e.g.: `"taint=taintName=taintValue:Effect"`)
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * The last update date of the pool.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * The Pool upgrade policy
     */
    declare public readonly upgradePolicy: pulumi.Output<outputs.KubernetesNodePoolUpgradePolicy>;
    /**
     * The version of the pool.
     */
    declare public /*out*/ readonly version: pulumi.Output<string>;
    /**
     * Whether to wait for the pool to be ready.
     */
    declare public readonly waitForPoolReady: pulumi.Output<boolean | undefined>;
    /**
     * `zone`) The zone in which the pool should be created.
     *
     * > **Important:** Updates to this field will recreate a new resource.
     */
    declare public readonly zone: pulumi.Output<string | undefined>;

    /**
     * Create a KubernetesNodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated scaleway.index/kubernetesnodepool.KubernetesNodePool has been deprecated in favor of scaleway.kubernetes/pool.Pool */
    constructor(name: string, args: KubernetesNodePoolArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated scaleway.index/kubernetesnodepool.KubernetesNodePool has been deprecated in favor of scaleway.kubernetes/pool.Pool */
    constructor(name: string, argsOrState?: KubernetesNodePoolArgs | KubernetesNodePoolState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("KubernetesNodePool is deprecated: scaleway.index/kubernetesnodepool.KubernetesNodePool has been deprecated in favor of scaleway.kubernetes/pool.Pool")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesNodePoolState | undefined;
            resourceInputs["autohealing"] = state?.autohealing;
            resourceInputs["autoscaling"] = state?.autoscaling;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["containerRuntime"] = state?.containerRuntime;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["currentSize"] = state?.currentSize;
            resourceInputs["kubeletArgs"] = state?.kubeletArgs;
            resourceInputs["maxSize"] = state?.maxSize;
            resourceInputs["minSize"] = state?.minSize;
            resourceInputs["name"] = state?.name;
            resourceInputs["nodeType"] = state?.nodeType;
            resourceInputs["nodes"] = state?.nodes;
            resourceInputs["placementGroupId"] = state?.placementGroupId;
            resourceInputs["publicIpDisabled"] = state?.publicIpDisabled;
            resourceInputs["region"] = state?.region;
            resourceInputs["rootVolumeSizeInGb"] = state?.rootVolumeSizeInGb;
            resourceInputs["rootVolumeType"] = state?.rootVolumeType;
            resourceInputs["securityGroupId"] = state?.securityGroupId;
            resourceInputs["size"] = state?.size;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["upgradePolicy"] = state?.upgradePolicy;
            resourceInputs["version"] = state?.version;
            resourceInputs["waitForPoolReady"] = state?.waitForPoolReady;
            resourceInputs["zone"] = state?.zone;
        } else {
            const args = argsOrState as KubernetesNodePoolArgs | undefined;
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (args?.nodeType === undefined && !opts.urn) {
                throw new Error("Missing required property 'nodeType'");
            }
            if (args?.size === undefined && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["autohealing"] = args?.autohealing;
            resourceInputs["autoscaling"] = args?.autoscaling;
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["containerRuntime"] = args?.containerRuntime;
            resourceInputs["kubeletArgs"] = args?.kubeletArgs;
            resourceInputs["maxSize"] = args?.maxSize;
            resourceInputs["minSize"] = args?.minSize;
            resourceInputs["name"] = args?.name;
            resourceInputs["nodeType"] = args?.nodeType;
            resourceInputs["placementGroupId"] = args?.placementGroupId;
            resourceInputs["publicIpDisabled"] = args?.publicIpDisabled;
            resourceInputs["region"] = args?.region;
            resourceInputs["rootVolumeSizeInGb"] = args?.rootVolumeSizeInGb;
            resourceInputs["rootVolumeType"] = args?.rootVolumeType;
            resourceInputs["securityGroupId"] = args?.securityGroupId;
            resourceInputs["size"] = args?.size;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["upgradePolicy"] = args?.upgradePolicy;
            resourceInputs["waitForPoolReady"] = args?.waitForPoolReady;
            resourceInputs["zone"] = args?.zone;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["currentSize"] = undefined /*out*/;
            resourceInputs["nodes"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KubernetesNodePool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KubernetesNodePool resources.
 */
export interface KubernetesNodePoolState {
    /**
     * Enables the autohealing feature for this pool.
     */
    autohealing?: pulumi.Input<boolean>;
    /**
     * Enables the autoscaling feature for this pool.
     *
     * > **Important:** When enabled, an update of the `size` will not be taken into account.
     */
    autoscaling?: pulumi.Input<boolean>;
    /**
     * The ID of the Kubernetes cluster on which this pool will be created.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The container runtime of the pool.
     *
     * > **Important:** Updates to this field will recreate a new resource.
     */
    containerRuntime?: pulumi.Input<string>;
    /**
     * The creation date of the pool.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The actual size of the pool
     */
    currentSize?: pulumi.Input<number>;
    /**
     * The Kubelet arguments to be used by this pool
     */
    kubeletArgs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The maximum size of the pool, used by the autoscaling feature.
     */
    maxSize?: pulumi.Input<number>;
    /**
     * The minimum size of the pool, used by the autoscaling feature.
     */
    minSize?: pulumi.Input<number>;
    /**
     * The name for the pool.
     *
     * > **Important:** Updates to this field will recreate a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The commercial type of the pool instances. Instances with insufficient memory are not eligible (DEV1-S, PLAY2-PICO, STARDUST). `external` is a special node type used to provision from other Cloud providers.
     *
     * > **Important:** Updates to this field will recreate a new resource.
     */
    nodeType?: pulumi.Input<string>;
    /**
     * (List of) The nodes in the default pool.
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.KubernetesNodePoolNode>[]>;
    /**
     * The [placement group](https://www.scaleway.com/en/developers/api/instance/#path-placement-groups-create-a-placement-group) the nodes of the pool will be attached to.
     *
     * > **Important:** Updates to this field will recreate a new resource.
     */
    placementGroupId?: pulumi.Input<string>;
    /**
     * Defines if the public IP should be removed from Nodes. To use this feature, your Cluster must have an attached Private Network set up with a Public Gateway.
     *
     * > **Important:** Updates to this field will recreate a new resource.
     */
    publicIpDisabled?: pulumi.Input<boolean>;
    /**
     * `region`) The region in which the pool should be created.
     */
    region?: pulumi.Input<string>;
    /**
     * The size of the system volume of the nodes in gigabyte
     */
    rootVolumeSizeInGb?: pulumi.Input<number>;
    /**
     * System volume type of the nodes composing the pool
     */
    rootVolumeType?: pulumi.Input<string>;
    /**
     * The ID of the security group
     *
     * > **Important:** Updates to this field will recreate a new resource.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * The size of the pool.
     *
     * > **Important:** This field will only be used at creation if autoscaling is enabled.
     */
    size?: pulumi.Input<number>;
    /**
     * The status of the node.
     */
    status?: pulumi.Input<string>;
    /**
     * The tags associated with the pool.
     *
     * > Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (e.g.: `"taint=taintName=taintValue:Effect"`)
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The last update date of the pool.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The Pool upgrade policy
     */
    upgradePolicy?: pulumi.Input<inputs.KubernetesNodePoolUpgradePolicy>;
    /**
     * The version of the pool.
     */
    version?: pulumi.Input<string>;
    /**
     * Whether to wait for the pool to be ready.
     */
    waitForPoolReady?: pulumi.Input<boolean>;
    /**
     * `zone`) The zone in which the pool should be created.
     *
     * > **Important:** Updates to this field will recreate a new resource.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KubernetesNodePool resource.
 */
export interface KubernetesNodePoolArgs {
    /**
     * Enables the autohealing feature for this pool.
     */
    autohealing?: pulumi.Input<boolean>;
    /**
     * Enables the autoscaling feature for this pool.
     *
     * > **Important:** When enabled, an update of the `size` will not be taken into account.
     */
    autoscaling?: pulumi.Input<boolean>;
    /**
     * The ID of the Kubernetes cluster on which this pool will be created.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The container runtime of the pool.
     *
     * > **Important:** Updates to this field will recreate a new resource.
     */
    containerRuntime?: pulumi.Input<string>;
    /**
     * The Kubelet arguments to be used by this pool
     */
    kubeletArgs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The maximum size of the pool, used by the autoscaling feature.
     */
    maxSize?: pulumi.Input<number>;
    /**
     * The minimum size of the pool, used by the autoscaling feature.
     */
    minSize?: pulumi.Input<number>;
    /**
     * The name for the pool.
     *
     * > **Important:** Updates to this field will recreate a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The commercial type of the pool instances. Instances with insufficient memory are not eligible (DEV1-S, PLAY2-PICO, STARDUST). `external` is a special node type used to provision from other Cloud providers.
     *
     * > **Important:** Updates to this field will recreate a new resource.
     */
    nodeType: pulumi.Input<string>;
    /**
     * The [placement group](https://www.scaleway.com/en/developers/api/instance/#path-placement-groups-create-a-placement-group) the nodes of the pool will be attached to.
     *
     * > **Important:** Updates to this field will recreate a new resource.
     */
    placementGroupId?: pulumi.Input<string>;
    /**
     * Defines if the public IP should be removed from Nodes. To use this feature, your Cluster must have an attached Private Network set up with a Public Gateway.
     *
     * > **Important:** Updates to this field will recreate a new resource.
     */
    publicIpDisabled?: pulumi.Input<boolean>;
    /**
     * `region`) The region in which the pool should be created.
     */
    region?: pulumi.Input<string>;
    /**
     * The size of the system volume of the nodes in gigabyte
     */
    rootVolumeSizeInGb?: pulumi.Input<number>;
    /**
     * System volume type of the nodes composing the pool
     */
    rootVolumeType?: pulumi.Input<string>;
    /**
     * The ID of the security group
     *
     * > **Important:** Updates to this field will recreate a new resource.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * The size of the pool.
     *
     * > **Important:** This field will only be used at creation if autoscaling is enabled.
     */
    size: pulumi.Input<number>;
    /**
     * The tags associated with the pool.
     *
     * > Note: As mentionned in [this document](https://github.com/scaleway/scaleway-cloud-controller-manager/blob/master/docs/tags.md#taints), taints of a pool's nodes are applied using tags. (e.g.: `"taint=taintName=taintValue:Effect"`)
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Pool upgrade policy
     */
    upgradePolicy?: pulumi.Input<inputs.KubernetesNodePoolUpgradePolicy>;
    /**
     * Whether to wait for the pool to be ready.
     */
    waitForPoolReady?: pulumi.Input<boolean>;
    /**
     * `zone`) The zone in which the pool should be created.
     *
     * > **Important:** Updates to this field will recreate a new resource.
     */
    zone?: pulumi.Input<string>;
}
