// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Creates and manages Scaleway Load Balancer backends.
 *
 * or more information, see the [main documentation](https://www.scaleway.com/en/docs/load-balancer/reference-content/configuring-backends/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-backends).
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const backend01 = new scaleway.loadbalancers.Backend("backend01", {
 *     lbId: lb01.id,
 *     name: "backend01",
 *     forwardProtocol: "http",
 *     forwardPort: 80,
 * });
 * ```
 *
 * ### With HTTP Health Check
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const backend01 = new scaleway.loadbalancers.Backend("backend01", {
 *     lbId: lb01.id,
 *     name: "backend01",
 *     forwardProtocol: "http",
 *     forwardPort: 80,
 *     healthCheckHttp: {
 *         uri: "/health",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Load Balancer backends can be imported using `{zone}/{id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:loadbalancers/backend:Backend backend01 fr-par-1/11111111-1111-1111-1111-111111111111
 * ```
 */
export class Backend extends pulumi.CustomResource {
    /**
     * Get an existing Backend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackendState, opts?: pulumi.CustomResourceOptions): Backend {
        return new Backend(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:loadbalancers/backend:Backend';

    /**
     * Returns true if the given object is an instance of Backend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Backend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Backend.__pulumiType;
    }

    /**
     * Scaleway S3 bucket website to be served in case all backend servers are down
     *
     * **NOTE** : Only the host part of the Scaleway S3 bucket website is expected.
     * E.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL is 'https://failover-website.s3-website.fr-par.scw.cloud/'.
     */
    declare public readonly failoverHost: pulumi.Output<string | undefined>;
    /**
     * User sessions will be forwarded to this port of backend servers
     */
    declare public readonly forwardPort: pulumi.Output<number>;
    /**
     * Load balancing algorithm
     */
    declare public readonly forwardPortAlgorithm: pulumi.Output<string | undefined>;
    /**
     * Backend protocol
     */
    declare public readonly forwardProtocol: pulumi.Output<string>;
    /**
     * Interval between two HC requests
     */
    declare public readonly healthCheckDelay: pulumi.Output<string | undefined>;
    /**
     * HTTP Health check
     */
    declare public readonly healthCheckHttp: pulumi.Output<outputs.loadbalancers.BackendHealthCheckHttp | undefined>;
    /**
     * HTTPS Health check
     */
    declare public readonly healthCheckHttps: pulumi.Output<outputs.loadbalancers.BackendHealthCheckHttps | undefined>;
    /**
     * Number of allowed failed HC requests before the backend server is marked down
     */
    declare public readonly healthCheckMaxRetries: pulumi.Output<number | undefined>;
    /**
     * Port the HC requests will be send to. Default to `forwardPort`
     */
    declare public readonly healthCheckPort: pulumi.Output<number>;
    /**
     * Defines whether proxy protocol should be activated for the health check
     */
    declare public readonly healthCheckSendProxy: pulumi.Output<boolean | undefined>;
    /**
     * TCP Health check
     */
    declare public readonly healthCheckTcp: pulumi.Output<outputs.loadbalancers.BackendHealthCheckTcp>;
    /**
     * Timeout before we consider a HC request failed
     */
    declare public readonly healthCheckTimeout: pulumi.Output<string | undefined>;
    /**
     * Time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN)
     */
    declare public readonly healthCheckTransientDelay: pulumi.Output<string | undefined>;
    /**
     * Specifies whether the Load Balancer should check the backend serverâ€™s certificate before initiating a connection
     */
    declare public readonly ignoreSslServerVerify: pulumi.Output<boolean | undefined>;
    /**
     * The load-balancer ID
     */
    declare public readonly lbId: pulumi.Output<string>;
    /**
     * Maximum number of connections allowed per backend server
     */
    declare public readonly maxConnections: pulumi.Output<number | undefined>;
    /**
     * Number of retries when a backend server connection failed
     */
    declare public readonly maxRetries: pulumi.Output<number | undefined>;
    /**
     * The name of the backend
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Modify what occurs when a backend server is marked down
     */
    declare public readonly onMarkedDownAction: pulumi.Output<string | undefined>;
    /**
     * Type of PROXY protocol to enable
     */
    declare public readonly proxyProtocol: pulumi.Output<string | undefined>;
    /**
     * Whether to use another backend server on each attempt
     */
    declare public readonly redispatchAttemptCount: pulumi.Output<number | undefined>;
    /**
     * Enables PROXY protocol version 2
     *
     * @deprecated Please use proxyProtocol instead
     */
    declare public readonly sendProxyV2: pulumi.Output<boolean>;
    /**
     * Backend server IP addresses list (IPv4 or IPv6)
     */
    declare public readonly serverIps: pulumi.Output<string[] | undefined>;
    /**
     * Enables SSL between load balancer and backend servers
     */
    declare public readonly sslBridging: pulumi.Output<boolean | undefined>;
    /**
     * The type of sticky sessions
     */
    declare public readonly stickySessions: pulumi.Output<string | undefined>;
    /**
     * Cookie name for sticky sessions
     */
    declare public readonly stickySessionsCookieName: pulumi.Output<string | undefined>;
    /**
     * Maximum initial server connection establishment time
     */
    declare public readonly timeoutConnect: pulumi.Output<string | undefined>;
    /**
     * Maximum time (in seconds) for a request to be left pending in queue when `maxConnections` is reached
     */
    declare public readonly timeoutQueue: pulumi.Output<string | undefined>;
    /**
     * Maximum server connection inactivity time
     */
    declare public readonly timeoutServer: pulumi.Output<string | undefined>;
    /**
     * Maximum tunnel inactivity time
     */
    declare public readonly timeoutTunnel: pulumi.Output<string | undefined>;

    /**
     * Create a Backend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackendArgs | BackendState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackendState | undefined;
            resourceInputs["failoverHost"] = state?.failoverHost;
            resourceInputs["forwardPort"] = state?.forwardPort;
            resourceInputs["forwardPortAlgorithm"] = state?.forwardPortAlgorithm;
            resourceInputs["forwardProtocol"] = state?.forwardProtocol;
            resourceInputs["healthCheckDelay"] = state?.healthCheckDelay;
            resourceInputs["healthCheckHttp"] = state?.healthCheckHttp;
            resourceInputs["healthCheckHttps"] = state?.healthCheckHttps;
            resourceInputs["healthCheckMaxRetries"] = state?.healthCheckMaxRetries;
            resourceInputs["healthCheckPort"] = state?.healthCheckPort;
            resourceInputs["healthCheckSendProxy"] = state?.healthCheckSendProxy;
            resourceInputs["healthCheckTcp"] = state?.healthCheckTcp;
            resourceInputs["healthCheckTimeout"] = state?.healthCheckTimeout;
            resourceInputs["healthCheckTransientDelay"] = state?.healthCheckTransientDelay;
            resourceInputs["ignoreSslServerVerify"] = state?.ignoreSslServerVerify;
            resourceInputs["lbId"] = state?.lbId;
            resourceInputs["maxConnections"] = state?.maxConnections;
            resourceInputs["maxRetries"] = state?.maxRetries;
            resourceInputs["name"] = state?.name;
            resourceInputs["onMarkedDownAction"] = state?.onMarkedDownAction;
            resourceInputs["proxyProtocol"] = state?.proxyProtocol;
            resourceInputs["redispatchAttemptCount"] = state?.redispatchAttemptCount;
            resourceInputs["sendProxyV2"] = state?.sendProxyV2;
            resourceInputs["serverIps"] = state?.serverIps;
            resourceInputs["sslBridging"] = state?.sslBridging;
            resourceInputs["stickySessions"] = state?.stickySessions;
            resourceInputs["stickySessionsCookieName"] = state?.stickySessionsCookieName;
            resourceInputs["timeoutConnect"] = state?.timeoutConnect;
            resourceInputs["timeoutQueue"] = state?.timeoutQueue;
            resourceInputs["timeoutServer"] = state?.timeoutServer;
            resourceInputs["timeoutTunnel"] = state?.timeoutTunnel;
        } else {
            const args = argsOrState as BackendArgs | undefined;
            if (args?.forwardPort === undefined && !opts.urn) {
                throw new Error("Missing required property 'forwardPort'");
            }
            if (args?.forwardProtocol === undefined && !opts.urn) {
                throw new Error("Missing required property 'forwardProtocol'");
            }
            if (args?.lbId === undefined && !opts.urn) {
                throw new Error("Missing required property 'lbId'");
            }
            resourceInputs["failoverHost"] = args?.failoverHost;
            resourceInputs["forwardPort"] = args?.forwardPort;
            resourceInputs["forwardPortAlgorithm"] = args?.forwardPortAlgorithm;
            resourceInputs["forwardProtocol"] = args?.forwardProtocol;
            resourceInputs["healthCheckDelay"] = args?.healthCheckDelay;
            resourceInputs["healthCheckHttp"] = args?.healthCheckHttp;
            resourceInputs["healthCheckHttps"] = args?.healthCheckHttps;
            resourceInputs["healthCheckMaxRetries"] = args?.healthCheckMaxRetries;
            resourceInputs["healthCheckPort"] = args?.healthCheckPort;
            resourceInputs["healthCheckSendProxy"] = args?.healthCheckSendProxy;
            resourceInputs["healthCheckTcp"] = args?.healthCheckTcp;
            resourceInputs["healthCheckTimeout"] = args?.healthCheckTimeout;
            resourceInputs["healthCheckTransientDelay"] = args?.healthCheckTransientDelay;
            resourceInputs["ignoreSslServerVerify"] = args?.ignoreSslServerVerify;
            resourceInputs["lbId"] = args?.lbId;
            resourceInputs["maxConnections"] = args?.maxConnections;
            resourceInputs["maxRetries"] = args?.maxRetries;
            resourceInputs["name"] = args?.name;
            resourceInputs["onMarkedDownAction"] = args?.onMarkedDownAction;
            resourceInputs["proxyProtocol"] = args?.proxyProtocol;
            resourceInputs["redispatchAttemptCount"] = args?.redispatchAttemptCount;
            resourceInputs["sendProxyV2"] = args?.sendProxyV2;
            resourceInputs["serverIps"] = args?.serverIps;
            resourceInputs["sslBridging"] = args?.sslBridging;
            resourceInputs["stickySessions"] = args?.stickySessions;
            resourceInputs["stickySessionsCookieName"] = args?.stickySessionsCookieName;
            resourceInputs["timeoutConnect"] = args?.timeoutConnect;
            resourceInputs["timeoutQueue"] = args?.timeoutQueue;
            resourceInputs["timeoutServer"] = args?.timeoutServer;
            resourceInputs["timeoutTunnel"] = args?.timeoutTunnel;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "scaleway:index/loadbalancerBackend:LoadbalancerBackend" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Backend.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Backend resources.
 */
export interface BackendState {
    /**
     * Scaleway S3 bucket website to be served in case all backend servers are down
     *
     * **NOTE** : Only the host part of the Scaleway S3 bucket website is expected.
     * E.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL is 'https://failover-website.s3-website.fr-par.scw.cloud/'.
     */
    failoverHost?: pulumi.Input<string>;
    /**
     * User sessions will be forwarded to this port of backend servers
     */
    forwardPort?: pulumi.Input<number>;
    /**
     * Load balancing algorithm
     */
    forwardPortAlgorithm?: pulumi.Input<string>;
    /**
     * Backend protocol
     */
    forwardProtocol?: pulumi.Input<string>;
    /**
     * Interval between two HC requests
     */
    healthCheckDelay?: pulumi.Input<string>;
    /**
     * HTTP Health check
     */
    healthCheckHttp?: pulumi.Input<inputs.loadbalancers.BackendHealthCheckHttp>;
    /**
     * HTTPS Health check
     */
    healthCheckHttps?: pulumi.Input<inputs.loadbalancers.BackendHealthCheckHttps>;
    /**
     * Number of allowed failed HC requests before the backend server is marked down
     */
    healthCheckMaxRetries?: pulumi.Input<number>;
    /**
     * Port the HC requests will be send to. Default to `forwardPort`
     */
    healthCheckPort?: pulumi.Input<number>;
    /**
     * Defines whether proxy protocol should be activated for the health check
     */
    healthCheckSendProxy?: pulumi.Input<boolean>;
    /**
     * TCP Health check
     */
    healthCheckTcp?: pulumi.Input<inputs.loadbalancers.BackendHealthCheckTcp>;
    /**
     * Timeout before we consider a HC request failed
     */
    healthCheckTimeout?: pulumi.Input<string>;
    /**
     * Time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN)
     */
    healthCheckTransientDelay?: pulumi.Input<string>;
    /**
     * Specifies whether the Load Balancer should check the backend serverâ€™s certificate before initiating a connection
     */
    ignoreSslServerVerify?: pulumi.Input<boolean>;
    /**
     * The load-balancer ID
     */
    lbId?: pulumi.Input<string>;
    /**
     * Maximum number of connections allowed per backend server
     */
    maxConnections?: pulumi.Input<number>;
    /**
     * Number of retries when a backend server connection failed
     */
    maxRetries?: pulumi.Input<number>;
    /**
     * The name of the backend
     */
    name?: pulumi.Input<string>;
    /**
     * Modify what occurs when a backend server is marked down
     */
    onMarkedDownAction?: pulumi.Input<string>;
    /**
     * Type of PROXY protocol to enable
     */
    proxyProtocol?: pulumi.Input<string>;
    /**
     * Whether to use another backend server on each attempt
     */
    redispatchAttemptCount?: pulumi.Input<number>;
    /**
     * Enables PROXY protocol version 2
     *
     * @deprecated Please use proxyProtocol instead
     */
    sendProxyV2?: pulumi.Input<boolean>;
    /**
     * Backend server IP addresses list (IPv4 or IPv6)
     */
    serverIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enables SSL between load balancer and backend servers
     */
    sslBridging?: pulumi.Input<boolean>;
    /**
     * The type of sticky sessions
     */
    stickySessions?: pulumi.Input<string>;
    /**
     * Cookie name for sticky sessions
     */
    stickySessionsCookieName?: pulumi.Input<string>;
    /**
     * Maximum initial server connection establishment time
     */
    timeoutConnect?: pulumi.Input<string>;
    /**
     * Maximum time (in seconds) for a request to be left pending in queue when `maxConnections` is reached
     */
    timeoutQueue?: pulumi.Input<string>;
    /**
     * Maximum server connection inactivity time
     */
    timeoutServer?: pulumi.Input<string>;
    /**
     * Maximum tunnel inactivity time
     */
    timeoutTunnel?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Backend resource.
 */
export interface BackendArgs {
    /**
     * Scaleway S3 bucket website to be served in case all backend servers are down
     *
     * **NOTE** : Only the host part of the Scaleway S3 bucket website is expected.
     * E.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL is 'https://failover-website.s3-website.fr-par.scw.cloud/'.
     */
    failoverHost?: pulumi.Input<string>;
    /**
     * User sessions will be forwarded to this port of backend servers
     */
    forwardPort: pulumi.Input<number>;
    /**
     * Load balancing algorithm
     */
    forwardPortAlgorithm?: pulumi.Input<string>;
    /**
     * Backend protocol
     */
    forwardProtocol: pulumi.Input<string>;
    /**
     * Interval between two HC requests
     */
    healthCheckDelay?: pulumi.Input<string>;
    /**
     * HTTP Health check
     */
    healthCheckHttp?: pulumi.Input<inputs.loadbalancers.BackendHealthCheckHttp>;
    /**
     * HTTPS Health check
     */
    healthCheckHttps?: pulumi.Input<inputs.loadbalancers.BackendHealthCheckHttps>;
    /**
     * Number of allowed failed HC requests before the backend server is marked down
     */
    healthCheckMaxRetries?: pulumi.Input<number>;
    /**
     * Port the HC requests will be send to. Default to `forwardPort`
     */
    healthCheckPort?: pulumi.Input<number>;
    /**
     * Defines whether proxy protocol should be activated for the health check
     */
    healthCheckSendProxy?: pulumi.Input<boolean>;
    /**
     * TCP Health check
     */
    healthCheckTcp?: pulumi.Input<inputs.loadbalancers.BackendHealthCheckTcp>;
    /**
     * Timeout before we consider a HC request failed
     */
    healthCheckTimeout?: pulumi.Input<string>;
    /**
     * Time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN)
     */
    healthCheckTransientDelay?: pulumi.Input<string>;
    /**
     * Specifies whether the Load Balancer should check the backend serverâ€™s certificate before initiating a connection
     */
    ignoreSslServerVerify?: pulumi.Input<boolean>;
    /**
     * The load-balancer ID
     */
    lbId: pulumi.Input<string>;
    /**
     * Maximum number of connections allowed per backend server
     */
    maxConnections?: pulumi.Input<number>;
    /**
     * Number of retries when a backend server connection failed
     */
    maxRetries?: pulumi.Input<number>;
    /**
     * The name of the backend
     */
    name?: pulumi.Input<string>;
    /**
     * Modify what occurs when a backend server is marked down
     */
    onMarkedDownAction?: pulumi.Input<string>;
    /**
     * Type of PROXY protocol to enable
     */
    proxyProtocol?: pulumi.Input<string>;
    /**
     * Whether to use another backend server on each attempt
     */
    redispatchAttemptCount?: pulumi.Input<number>;
    /**
     * Enables PROXY protocol version 2
     *
     * @deprecated Please use proxyProtocol instead
     */
    sendProxyV2?: pulumi.Input<boolean>;
    /**
     * Backend server IP addresses list (IPv4 or IPv6)
     */
    serverIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enables SSL between load balancer and backend servers
     */
    sslBridging?: pulumi.Input<boolean>;
    /**
     * The type of sticky sessions
     */
    stickySessions?: pulumi.Input<string>;
    /**
     * Cookie name for sticky sessions
     */
    stickySessionsCookieName?: pulumi.Input<string>;
    /**
     * Maximum initial server connection establishment time
     */
    timeoutConnect?: pulumi.Input<string>;
    /**
     * Maximum time (in seconds) for a request to be left pending in queue when `maxConnections` is reached
     */
    timeoutQueue?: pulumi.Input<string>;
    /**
     * Maximum server connection inactivity time
     */
    timeoutServer?: pulumi.Input<string>;
    /**
     * Maximum tunnel inactivity time
     */
    timeoutTunnel?: pulumi.Input<string>;
}
