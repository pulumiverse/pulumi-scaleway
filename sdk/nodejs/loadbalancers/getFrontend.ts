// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Get information about Scaleway Load Balancer frontends.
 *
 * For more information, see the [main documentation](https://www.scaleway.com/en/docs/load-balancer/reference-content/configuring-frontends/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-frontends).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const ip01 = new scaleway.loadbalancers.Ip("ip01", {});
 * const lb01 = new scaleway.loadbalancers.LoadBalancer("lb01", {
 *     ipId: ip01.id,
 *     name: "test-lb",
 *     type: "lb-s",
 * });
 * const bkd01 = new scaleway.loadbalancers.Backend("bkd01", {
 *     lbId: lb01.id,
 *     forwardProtocol: "tcp",
 *     forwardPort: 80,
 *     proxyProtocol: "none",
 * });
 * const frt01 = new scaleway.loadbalancers.Frontend("frt01", {
 *     lbId: lb01.id,
 *     backendId: bkd01.id,
 *     inboundPort: 80,
 * });
 * const byID = scaleway.loadbalancers.getFrontendOutput({
 *     frontendId: frt01.id,
 * });
 * const byName = scaleway.loadbalancers.getFrontendOutput({
 *     name: frt01.name,
 *     lbId: lb01.id,
 * });
 * ```
 */
export function getFrontend(args?: GetFrontendArgs, opts?: pulumi.InvokeOptions): Promise<GetFrontendResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("scaleway:loadbalancers/getFrontend:getFrontend", {
        "frontendId": args.frontendId,
        "lbId": args.lbId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getFrontend.
 */
export interface GetFrontendArgs {
    /**
     * The frontend ID.
     * - Only one of `name` and `frontendId` should be specified.
     */
    frontendId?: string;
    /**
     * The Load Balancer ID this frontend is attached to.
     */
    lbId?: string;
    /**
     * The name of the frontend.
     * - When using the `name` you should specify the `lb-id`
     */
    name?: string;
}

/**
 * A collection of values returned by getFrontend.
 */
export interface GetFrontendResult {
    readonly acls: outputs.loadbalancers.GetFrontendAcl[];
    readonly backendId: string;
    readonly certificateId: string;
    readonly certificateIds: string[];
    readonly connectionRateLimit: number;
    readonly enableHttp3: boolean;
    readonly externalAcls: boolean;
    readonly frontendId?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly inboundPort: number;
    readonly lbId?: string;
    readonly name?: string;
    readonly timeoutClient: string;
}
/**
 * Get information about Scaleway Load Balancer frontends.
 *
 * For more information, see the [main documentation](https://www.scaleway.com/en/docs/load-balancer/reference-content/configuring-frontends/) or [API documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-frontends).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const ip01 = new scaleway.loadbalancers.Ip("ip01", {});
 * const lb01 = new scaleway.loadbalancers.LoadBalancer("lb01", {
 *     ipId: ip01.id,
 *     name: "test-lb",
 *     type: "lb-s",
 * });
 * const bkd01 = new scaleway.loadbalancers.Backend("bkd01", {
 *     lbId: lb01.id,
 *     forwardProtocol: "tcp",
 *     forwardPort: 80,
 *     proxyProtocol: "none",
 * });
 * const frt01 = new scaleway.loadbalancers.Frontend("frt01", {
 *     lbId: lb01.id,
 *     backendId: bkd01.id,
 *     inboundPort: 80,
 * });
 * const byID = scaleway.loadbalancers.getFrontendOutput({
 *     frontendId: frt01.id,
 * });
 * const byName = scaleway.loadbalancers.getFrontendOutput({
 *     name: frt01.name,
 *     lbId: lb01.id,
 * });
 * ```
 */
export function getFrontendOutput(args?: GetFrontendOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetFrontendResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("scaleway:loadbalancers/getFrontend:getFrontend", {
        "frontendId": args.frontendId,
        "lbId": args.lbId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getFrontend.
 */
export interface GetFrontendOutputArgs {
    /**
     * The frontend ID.
     * - Only one of `name` and `frontendId` should be specified.
     */
    frontendId?: pulumi.Input<string>;
    /**
     * The Load Balancer ID this frontend is attached to.
     */
    lbId?: pulumi.Input<string>;
    /**
     * The name of the frontend.
     * - When using the `name` you should specify the `lb-id`
     */
    name?: pulumi.Input<string>;
}
