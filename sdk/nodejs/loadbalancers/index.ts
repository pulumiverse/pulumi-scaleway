// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AclArgs, AclState } from "./acl";
export type Acl = import("./acl").Acl;
export const Acl: typeof import("./acl").Acl = null as any;
utilities.lazyLoad(exports, ["Acl"], () => require("./acl"));

export { BackendArgs, BackendState } from "./backend";
export type Backend = import("./backend").Backend;
export const Backend: typeof import("./backend").Backend = null as any;
utilities.lazyLoad(exports, ["Backend"], () => require("./backend"));

export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { FrontendArgs, FrontendState } from "./frontend";
export type Frontend = import("./frontend").Frontend;
export const Frontend: typeof import("./frontend").Frontend = null as any;
utilities.lazyLoad(exports, ["Frontend"], () => require("./frontend"));

export { GetAclsArgs, GetAclsResult, GetAclsOutputArgs } from "./getAcls";
export const getAcls: typeof import("./getAcls").getAcls = null as any;
export const getAclsOutput: typeof import("./getAcls").getAclsOutput = null as any;
utilities.lazyLoad(exports, ["getAcls","getAclsOutput"], () => require("./getAcls"));

export { GetBackendArgs, GetBackendResult, GetBackendOutputArgs } from "./getBackend";
export const getBackend: typeof import("./getBackend").getBackend = null as any;
export const getBackendOutput: typeof import("./getBackend").getBackendOutput = null as any;
utilities.lazyLoad(exports, ["getBackend","getBackendOutput"], () => require("./getBackend"));

export { GetBackendsArgs, GetBackendsResult, GetBackendsOutputArgs } from "./getBackends";
export const getBackends: typeof import("./getBackends").getBackends = null as any;
export const getBackendsOutput: typeof import("./getBackends").getBackendsOutput = null as any;
utilities.lazyLoad(exports, ["getBackends","getBackendsOutput"], () => require("./getBackends"));

export { GetCertificateArgs, GetCertificateResult, GetCertificateOutputArgs } from "./getCertificate";
export const getCertificate: typeof import("./getCertificate").getCertificate = null as any;
export const getCertificateOutput: typeof import("./getCertificate").getCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCertificate","getCertificateOutput"], () => require("./getCertificate"));

export { GetFrontendArgs, GetFrontendResult, GetFrontendOutputArgs } from "./getFrontend";
export const getFrontend: typeof import("./getFrontend").getFrontend = null as any;
export const getFrontendOutput: typeof import("./getFrontend").getFrontendOutput = null as any;
utilities.lazyLoad(exports, ["getFrontend","getFrontendOutput"], () => require("./getFrontend"));

export { GetFrontendsArgs, GetFrontendsResult, GetFrontendsOutputArgs } from "./getFrontends";
export const getFrontends: typeof import("./getFrontends").getFrontends = null as any;
export const getFrontendsOutput: typeof import("./getFrontends").getFrontendsOutput = null as any;
utilities.lazyLoad(exports, ["getFrontends","getFrontendsOutput"], () => require("./getFrontends"));

export { GetIpArgs, GetIpResult, GetIpOutputArgs } from "./getIp";
export const getIp: typeof import("./getIp").getIp = null as any;
export const getIpOutput: typeof import("./getIp").getIpOutput = null as any;
utilities.lazyLoad(exports, ["getIp","getIpOutput"], () => require("./getIp"));

export { GetIpsArgs, GetIpsResult, GetIpsOutputArgs } from "./getIps";
export const getIps: typeof import("./getIps").getIps = null as any;
export const getIpsOutput: typeof import("./getIps").getIpsOutput = null as any;
utilities.lazyLoad(exports, ["getIps","getIpsOutput"], () => require("./getIps"));

export { GetLoadBalancerArgs, GetLoadBalancerResult, GetLoadBalancerOutputArgs } from "./getLoadBalancer";
export const getLoadBalancer: typeof import("./getLoadBalancer").getLoadBalancer = null as any;
export const getLoadBalancerOutput: typeof import("./getLoadBalancer").getLoadBalancerOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancer","getLoadBalancerOutput"], () => require("./getLoadBalancer"));

export { GetLoadBalancersArgs, GetLoadBalancersResult, GetLoadBalancersOutputArgs } from "./getLoadBalancers";
export const getLoadBalancers: typeof import("./getLoadBalancers").getLoadBalancers = null as any;
export const getLoadBalancersOutput: typeof import("./getLoadBalancers").getLoadBalancersOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancers","getLoadBalancersOutput"], () => require("./getLoadBalancers"));

export { GetRouteArgs, GetRouteResult, GetRouteOutputArgs } from "./getRoute";
export const getRoute: typeof import("./getRoute").getRoute = null as any;
export const getRouteOutput: typeof import("./getRoute").getRouteOutput = null as any;
utilities.lazyLoad(exports, ["getRoute","getRouteOutput"], () => require("./getRoute"));

export { GetRoutesArgs, GetRoutesResult, GetRoutesOutputArgs } from "./getRoutes";
export const getRoutes: typeof import("./getRoutes").getRoutes = null as any;
export const getRoutesOutput: typeof import("./getRoutes").getRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getRoutes","getRoutesOutput"], () => require("./getRoutes"));

export { IpArgs, IpState } from "./ip";
export type Ip = import("./ip").Ip;
export const Ip: typeof import("./ip").Ip = null as any;
utilities.lazyLoad(exports, ["Ip"], () => require("./ip"));

export { LoadBalancerArgs, LoadBalancerState } from "./loadBalancer";
export type LoadBalancer = import("./loadBalancer").LoadBalancer;
export const LoadBalancer: typeof import("./loadBalancer").LoadBalancer = null as any;
utilities.lazyLoad(exports, ["LoadBalancer"], () => require("./loadBalancer"));

export { RouteArgs, RouteState } from "./route";
export type Route = import("./route").Route;
export const Route: typeof import("./route").Route = null as any;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "scaleway:loadbalancers/acl:Acl":
                return new Acl(name, <any>undefined, { urn })
            case "scaleway:loadbalancers/backend:Backend":
                return new Backend(name, <any>undefined, { urn })
            case "scaleway:loadbalancers/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "scaleway:loadbalancers/frontend:Frontend":
                return new Frontend(name, <any>undefined, { urn })
            case "scaleway:loadbalancers/ip:Ip":
                return new Ip(name, <any>undefined, { urn })
            case "scaleway:loadbalancers/loadBalancer:LoadBalancer":
                return new LoadBalancer(name, <any>undefined, { urn })
            case "scaleway:loadbalancers/route:Route":
                return new Route(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("scaleway", "loadbalancers/acl", _module)
pulumi.runtime.registerResourceModule("scaleway", "loadbalancers/backend", _module)
pulumi.runtime.registerResourceModule("scaleway", "loadbalancers/certificate", _module)
pulumi.runtime.registerResourceModule("scaleway", "loadbalancers/frontend", _module)
pulumi.runtime.registerResourceModule("scaleway", "loadbalancers/ip", _module)
pulumi.runtime.registerResourceModule("scaleway", "loadbalancers/loadBalancer", _module)
pulumi.runtime.registerResourceModule("scaleway", "loadbalancers/route", _module)
