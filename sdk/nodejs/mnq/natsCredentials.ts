// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates and manages Scaleway Messaging and Queuing NATS credentials.
 * For further information, see
 * our [main documentation](https://www.scaleway.com/en/docs/messaging/reference-content/nats-overview/).
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.mnq.NatsAccount("main", {name: "nats-account"});
 * const mainNatsCredentials = new scaleway.mnq.NatsCredentials("main", {accountId: main.id});
 * ```
 *
 * ## Import
 *
 * Namespaces can be imported using `{region}/{id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:mnq/natsCredentials:NatsCredentials main fr-par/11111111111111111111111111111111
 * ```
 */
export class NatsCredentials extends pulumi.CustomResource {
    /**
     * Get an existing NatsCredentials resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NatsCredentialsState, opts?: pulumi.CustomResourceOptions): NatsCredentials {
        return new NatsCredentials(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:mnq/natsCredentials:NatsCredentials';

    /**
     * Returns true if the given object is an instance of NatsCredentials.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NatsCredentials {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NatsCredentials.__pulumiType;
    }

    /**
     * The ID of the NATS account the credentials are generated from
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * The content of the credentials file.
     */
    declare public /*out*/ readonly file: pulumi.Output<string>;
    /**
     * The unique name of the NATS credentials.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * `region`). The region
     * in which the account exists.
     */
    declare public readonly region: pulumi.Output<string | undefined>;

    /**
     * Create a NatsCredentials resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NatsCredentialsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NatsCredentialsArgs | NatsCredentialsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NatsCredentialsState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["file"] = state?.file;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
        } else {
            const args = argsOrState as NatsCredentialsArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["file"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "scaleway:index/mnqNatsCredentials:MnqNatsCredentials" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        const secretOpts = { additionalSecretOutputs: ["file"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(NatsCredentials.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NatsCredentials resources.
 */
export interface NatsCredentialsState {
    /**
     * The ID of the NATS account the credentials are generated from
     */
    accountId?: pulumi.Input<string>;
    /**
     * The content of the credentials file.
     */
    file?: pulumi.Input<string>;
    /**
     * The unique name of the NATS credentials.
     */
    name?: pulumi.Input<string>;
    /**
     * `region`). The region
     * in which the account exists.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NatsCredentials resource.
 */
export interface NatsCredentialsArgs {
    /**
     * The ID of the NATS account the credentials are generated from
     */
    accountId: pulumi.Input<string>;
    /**
     * The unique name of the NATS credentials.
     */
    name?: pulumi.Input<string>;
    /**
     * `region`). The region
     * in which the account exists.
     */
    region?: pulumi.Input<string>;
}
