// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Activate Scaleway Messaging and Queuing SQS in a Project.
 * For further information, see
 * our [main documentation](https://www.scaleway.com/en/docs/messaging/reference-content/sqs-overview/).
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * Activate SQS in the default Project
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.mnq.Sqs("main", {});
 * ```
 *
 * Activate SQS for a specific project
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const project = scaleway.account.getProject({
 *     name: "default",
 * });
 * const forProject = new scaleway.mnq.Sqs("for_project", {projectId: project.then(project => project.id)});
 * ```
 *
 * ## Import
 *
 * SQS status can be imported using the `{region}/{project_id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:mnq/sqs:Sqs main fr-par/11111111111111111111111111111111
 * ```
 */
export class Sqs extends pulumi.CustomResource {
    /**
     * Get an existing Sqs resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SqsState, opts?: pulumi.CustomResourceOptions): Sqs {
        return new Sqs(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:mnq/sqs:Sqs';

    /**
     * Returns true if the given object is an instance of Sqs.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Sqs {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Sqs.__pulumiType;
    }

    /**
     * The endpoint of the SQS service for this Project.
     */
    declare public /*out*/ readonly endpoint: pulumi.Output<string>;
    /**
     * `projectId`) The ID of the Project in which SQS will be enabled.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * `region`). The region
     * in which SQS will be enabled.
     */
    declare public readonly region: pulumi.Output<string | undefined>;

    /**
     * Create a Sqs resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SqsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SqsArgs | SqsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SqsState | undefined;
            resourceInputs["endpoint"] = state?.endpoint;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["region"] = state?.region;
        } else {
            const args = argsOrState as SqsArgs | undefined;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["region"] = args?.region;
            resourceInputs["endpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "scaleway:index/mnqSqs:MnqSqs" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Sqs.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Sqs resources.
 */
export interface SqsState {
    /**
     * The endpoint of the SQS service for this Project.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * `projectId`) The ID of the Project in which SQS will be enabled.
     */
    projectId?: pulumi.Input<string>;
    /**
     * `region`). The region
     * in which SQS will be enabled.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Sqs resource.
 */
export interface SqsArgs {
    /**
     * `projectId`) The ID of the Project in which SQS will be enabled.
     */
    projectId?: pulumi.Input<string>;
    /**
     * `region`). The region
     * in which SQS will be enabled.
     */
    region?: pulumi.Input<string>;
}
