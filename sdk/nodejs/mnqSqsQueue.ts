// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates and manages Scaleway Messaging and Queuing SQS queues.
 * For further information, see
 * our [main documentation](https://www.scaleway.com/en/docs/messaging/how-to/create-manage-queues/).
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.mnq.Sqs("main", {});
 * const mainSqsCredentials = new scaleway.mnq.SqsCredentials("main", {
 *     projectId: main.projectId,
 *     name: "sqs-credentials",
 *     permissions: {
 *         canManage: true,
 *         canReceive: false,
 *         canPublish: false,
 *     },
 * });
 * const mainSqsQueue = new scaleway.mnq.SqsQueue("main", {
 *     projectId: main.projectId,
 *     name: "my-queue",
 *     sqsEndpoint: main.endpoint,
 *     accessKey: mainSqsCredentials.accessKey,
 *     secretKey: mainSqsCredentials.secretKey,
 * });
 * ```
 *
 * ### With Dead Letter Queue
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.mnq.Sqs("main", {});
 * const mainSqsCredentials = new scaleway.mnq.SqsCredentials("main", {
 *     projectId: main.projectId,
 *     name: "sqs-credentials",
 *     permissions: {
 *         canManage: true,
 *         canReceive: false,
 *         canPublish: false,
 *     },
 * });
 * const deadLetter = new scaleway.mnq.SqsQueue("dead_letter", {
 *     projectId: main.projectId,
 *     name: "dead-letter-queue",
 *     sqsEndpoint: main.endpoint,
 *     accessKey: mainSqsCredentials.accessKey,
 *     secretKey: mainSqsCredentials.secretKey,
 * });
 * const mainSqsQueue = new scaleway.mnq.SqsQueue("main", {
 *     projectId: main.projectId,
 *     name: "my-queue",
 *     sqsEndpoint: main.endpoint,
 *     accessKey: mainSqsCredentials.accessKey,
 *     secretKey: mainSqsCredentials.secretKey,
 *     deadLetterQueue: {
 *         id: deadLetter.id,
 *         maxReceiveCount: 3,
 *     },
 * });
 * ```
 *
 * ## Dead Letter Queue
 *
 * The `deadLetterQueue` block supports the following:
 *
 * - `id` - (Required) The ID of the dead letter queue. Can be either in the format `{region}/{project-id}/{queue-name}` or `arn:scw:sqs:{region}:project-{project-id}:{queue-name}`.
 *
 * - `maxReceiveCount` - (Required) The number of times a message is delivered to the source queue before being moved to the dead letter queue. Must be between 1 and 1000.
 *
 * @deprecated scaleway.index/mnqsqsqueue.MnqSqsQueue has been deprecated in favor of scaleway.mnq/sqsqueue.SqsQueue
 */
export class MnqSqsQueue extends pulumi.CustomResource {
    /**
     * Get an existing MnqSqsQueue resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MnqSqsQueueState, opts?: pulumi.CustomResourceOptions): MnqSqsQueue {
        pulumi.log.warn("MnqSqsQueue is deprecated: scaleway.index/mnqsqsqueue.MnqSqsQueue has been deprecated in favor of scaleway.mnq/sqsqueue.SqsQueue")
        return new MnqSqsQueue(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/mnqSqsQueue:MnqSqsQueue';

    /**
     * Returns true if the given object is an instance of MnqSqsQueue.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MnqSqsQueue {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MnqSqsQueue.__pulumiType;
    }

    /**
     * The access key of the SQS queue.
     */
    declare public readonly accessKey: pulumi.Output<string>;
    /**
     * The ARN of the queue
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * Specifies whether to enable content-based deduplication. Defaults to `false`.
     */
    declare public readonly contentBasedDeduplication: pulumi.Output<boolean>;
    /**
     * Configuration for the dead letter queue. See Dead Letter Queue below for details.
     */
    declare public readonly deadLetterQueue: pulumi.Output<outputs.MnqSqsQueueDeadLetterQueue | undefined>;
    /**
     * Whether the queue is a FIFO queue. If true, the queue name must end with .fifo. Defaults to `false`.
     */
    declare public readonly fifoQueue: pulumi.Output<boolean>;
    /**
     * The number of seconds the queue retains a message. Must be between 60 and 1_209_600. Defaults to 345_600.
     */
    declare public readonly messageMaxAge: pulumi.Output<number | undefined>;
    /**
     * The maximum size of a message. Should be in bytes. Must be between 1024 and 262_144. Defaults to 262_144.
     */
    declare public readonly messageMaxSize: pulumi.Output<number | undefined>;
    /**
     * The unique name of the SQS queue. Either `name` or `namePrefix` is required. Conflicts with `namePrefix`.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `name`.
     */
    declare public readonly namePrefix: pulumi.Output<string>;
    /**
     * `projectId`) The ID of the Project in which SQS is enabled.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * The number of seconds to wait for a message to arrive in the queue before returning. Must be between 0 and 20. Defaults to 0.
     */
    declare public readonly receiveWaitTimeSeconds: pulumi.Output<number | undefined>;
    /**
     * `region`). The region in which SQS is enabled.
     */
    declare public readonly region: pulumi.Output<string | undefined>;
    /**
     * The secret key of the SQS queue.
     */
    declare public readonly secretKey: pulumi.Output<string>;
    /**
     * The endpoint of the SQS queue. Can contain a {region} placeholder. Defaults to `https://sqs.mnq.{region}.scaleway.com`.
     */
    declare public readonly sqsEndpoint: pulumi.Output<string | undefined>;
    /**
     * The URL of the queue.
     */
    declare public /*out*/ readonly url: pulumi.Output<string>;
    /**
     * The number of seconds a message is hidden from other consumers. Must be between 0 and 43_200. Defaults to 30.
     */
    declare public readonly visibilityTimeoutSeconds: pulumi.Output<number | undefined>;

    /**
     * Create a MnqSqsQueue resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated scaleway.index/mnqsqsqueue.MnqSqsQueue has been deprecated in favor of scaleway.mnq/sqsqueue.SqsQueue */
    constructor(name: string, args: MnqSqsQueueArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated scaleway.index/mnqsqsqueue.MnqSqsQueue has been deprecated in favor of scaleway.mnq/sqsqueue.SqsQueue */
    constructor(name: string, argsOrState?: MnqSqsQueueArgs | MnqSqsQueueState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("MnqSqsQueue is deprecated: scaleway.index/mnqsqsqueue.MnqSqsQueue has been deprecated in favor of scaleway.mnq/sqsqueue.SqsQueue")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MnqSqsQueueState | undefined;
            resourceInputs["accessKey"] = state?.accessKey;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["contentBasedDeduplication"] = state?.contentBasedDeduplication;
            resourceInputs["deadLetterQueue"] = state?.deadLetterQueue;
            resourceInputs["fifoQueue"] = state?.fifoQueue;
            resourceInputs["messageMaxAge"] = state?.messageMaxAge;
            resourceInputs["messageMaxSize"] = state?.messageMaxSize;
            resourceInputs["name"] = state?.name;
            resourceInputs["namePrefix"] = state?.namePrefix;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["receiveWaitTimeSeconds"] = state?.receiveWaitTimeSeconds;
            resourceInputs["region"] = state?.region;
            resourceInputs["secretKey"] = state?.secretKey;
            resourceInputs["sqsEndpoint"] = state?.sqsEndpoint;
            resourceInputs["url"] = state?.url;
            resourceInputs["visibilityTimeoutSeconds"] = state?.visibilityTimeoutSeconds;
        } else {
            const args = argsOrState as MnqSqsQueueArgs | undefined;
            if (args?.accessKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'accessKey'");
            }
            if (args?.secretKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'secretKey'");
            }
            resourceInputs["accessKey"] = args?.accessKey ? pulumi.secret(args.accessKey) : undefined;
            resourceInputs["contentBasedDeduplication"] = args?.contentBasedDeduplication;
            resourceInputs["deadLetterQueue"] = args?.deadLetterQueue;
            resourceInputs["fifoQueue"] = args?.fifoQueue;
            resourceInputs["messageMaxAge"] = args?.messageMaxAge;
            resourceInputs["messageMaxSize"] = args?.messageMaxSize;
            resourceInputs["name"] = args?.name;
            resourceInputs["namePrefix"] = args?.namePrefix;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["receiveWaitTimeSeconds"] = args?.receiveWaitTimeSeconds;
            resourceInputs["region"] = args?.region;
            resourceInputs["secretKey"] = args?.secretKey ? pulumi.secret(args.secretKey) : undefined;
            resourceInputs["sqsEndpoint"] = args?.sqsEndpoint;
            resourceInputs["visibilityTimeoutSeconds"] = args?.visibilityTimeoutSeconds;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessKey", "secretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MnqSqsQueue.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MnqSqsQueue resources.
 */
export interface MnqSqsQueueState {
    /**
     * The access key of the SQS queue.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * The ARN of the queue
     */
    arn?: pulumi.Input<string>;
    /**
     * Specifies whether to enable content-based deduplication. Defaults to `false`.
     */
    contentBasedDeduplication?: pulumi.Input<boolean>;
    /**
     * Configuration for the dead letter queue. See Dead Letter Queue below for details.
     */
    deadLetterQueue?: pulumi.Input<inputs.MnqSqsQueueDeadLetterQueue>;
    /**
     * Whether the queue is a FIFO queue. If true, the queue name must end with .fifo. Defaults to `false`.
     */
    fifoQueue?: pulumi.Input<boolean>;
    /**
     * The number of seconds the queue retains a message. Must be between 60 and 1_209_600. Defaults to 345_600.
     */
    messageMaxAge?: pulumi.Input<number>;
    /**
     * The maximum size of a message. Should be in bytes. Must be between 1024 and 262_144. Defaults to 262_144.
     */
    messageMaxSize?: pulumi.Input<number>;
    /**
     * The unique name of the SQS queue. Either `name` or `namePrefix` is required. Conflicts with `namePrefix`.
     */
    name?: pulumi.Input<string>;
    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `name`.
     */
    namePrefix?: pulumi.Input<string>;
    /**
     * `projectId`) The ID of the Project in which SQS is enabled.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The number of seconds to wait for a message to arrive in the queue before returning. Must be between 0 and 20. Defaults to 0.
     */
    receiveWaitTimeSeconds?: pulumi.Input<number>;
    /**
     * `region`). The region in which SQS is enabled.
     */
    region?: pulumi.Input<string>;
    /**
     * The secret key of the SQS queue.
     */
    secretKey?: pulumi.Input<string>;
    /**
     * The endpoint of the SQS queue. Can contain a {region} placeholder. Defaults to `https://sqs.mnq.{region}.scaleway.com`.
     */
    sqsEndpoint?: pulumi.Input<string>;
    /**
     * The URL of the queue.
     */
    url?: pulumi.Input<string>;
    /**
     * The number of seconds a message is hidden from other consumers. Must be between 0 and 43_200. Defaults to 30.
     */
    visibilityTimeoutSeconds?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a MnqSqsQueue resource.
 */
export interface MnqSqsQueueArgs {
    /**
     * The access key of the SQS queue.
     */
    accessKey: pulumi.Input<string>;
    /**
     * Specifies whether to enable content-based deduplication. Defaults to `false`.
     */
    contentBasedDeduplication?: pulumi.Input<boolean>;
    /**
     * Configuration for the dead letter queue. See Dead Letter Queue below for details.
     */
    deadLetterQueue?: pulumi.Input<inputs.MnqSqsQueueDeadLetterQueue>;
    /**
     * Whether the queue is a FIFO queue. If true, the queue name must end with .fifo. Defaults to `false`.
     */
    fifoQueue?: pulumi.Input<boolean>;
    /**
     * The number of seconds the queue retains a message. Must be between 60 and 1_209_600. Defaults to 345_600.
     */
    messageMaxAge?: pulumi.Input<number>;
    /**
     * The maximum size of a message. Should be in bytes. Must be between 1024 and 262_144. Defaults to 262_144.
     */
    messageMaxSize?: pulumi.Input<number>;
    /**
     * The unique name of the SQS queue. Either `name` or `namePrefix` is required. Conflicts with `namePrefix`.
     */
    name?: pulumi.Input<string>;
    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `name`.
     */
    namePrefix?: pulumi.Input<string>;
    /**
     * `projectId`) The ID of the Project in which SQS is enabled.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The number of seconds to wait for a message to arrive in the queue before returning. Must be between 0 and 20. Defaults to 0.
     */
    receiveWaitTimeSeconds?: pulumi.Input<number>;
    /**
     * `region`). The region in which SQS is enabled.
     */
    region?: pulumi.Input<string>;
    /**
     * The secret key of the SQS queue.
     */
    secretKey: pulumi.Input<string>;
    /**
     * The endpoint of the SQS queue. Can contain a {region} placeholder. Defaults to `https://sqs.mnq.{region}.scaleway.com`.
     */
    sqsEndpoint?: pulumi.Input<string>;
    /**
     * The number of seconds a message is hidden from other consumers. Must be between 0 and 43_200. Defaults to 30.
     */
    visibilityTimeoutSeconds?: pulumi.Input<number>;
}
