// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates and manages Scaleway MongoDB® instance.
 * For more information refer to the [product documentation](https://www.scaleway.com/en/docs/managed-mongodb-databases/).
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.mongodb.Instance("main", {
 *     name: "test-mongodb-basic1",
 *     version: "7.0.12",
 *     nodeType: "MGDB-PLAY2-NANO",
 *     nodeNumber: 1,
 *     userName: "my_initial_user",
 *     password: "thiZ_is_v&ry_s3cret",
 *     volumeSizeInGb: 5,
 * });
 * ```
 *
 * ### Private Network
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const pn01 = new scaleway.network.PrivateNetwork("pn01", {
 *     name: "my_private_network",
 *     region: "fr-par",
 * });
 * const main = new scaleway.mongodb.Instance("main", {
 *     name: "test-mongodb-basic1",
 *     version: "7.0.12",
 *     nodeType: "MGDB-PLAY2-NANO",
 *     nodeNumber: 1,
 *     userName: "my_initial_user",
 *     password: "thiZ_is_v&ry_s3cret",
 *     volumeSizeInGb: 5,
 *     privateNetwork: {
 *         pnId: pn02.id,
 *     },
 * });
 * ```
 *
 * ### Private Network and Public Network
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const pn01 = new scaleway.network.PrivateNetwork("pn01", {
 *     name: "my_private_network",
 *     region: "fr-par",
 * });
 * const main = new scaleway.mongodb.Instance("main", {
 *     name: "test-mongodb-basic1",
 *     version: "7.0.12",
 *     nodeType: "MGDB-PLAY2-NANO",
 *     nodeNumber: 1,
 *     userName: "my_initial_user",
 *     password: "thiZ_is_v&ry_s3cret",
 *     volumeSizeInGb: 5,
 *     privateNetwork: {
 *         pnId: pn02.id,
 *     },
 *     publicNetwork: {},
 * });
 * ```
 *
 * ### With Snapshot Scheduling
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.mongodb.Instance("main", {
 *     name: "test-mongodb-with-snapshots",
 *     version: "7.0.12",
 *     nodeType: "MGDB-PLAY2-NANO",
 *     nodeNumber: 1,
 *     userName: "my_initial_user",
 *     password: "thiZ_is_v&ry_s3cret",
 *     volumeSizeInGb: 5,
 *     snapshotScheduleFrequencyHours: 24,
 *     snapshotScheduleRetentionDays: 7,
 *     isSnapshotScheduleEnabled: true,
 * });
 * ```
 *
 * ### Restore From Snapshot
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const restoredInstance = new scaleway.mongodb.Instance("restored_instance", {
 *     snapshotId: pn.idscalewayMongodbSnapshot.mainSnapshot.id,
 *     name: "restored-mongodb-from-snapshot",
 *     nodeType: "MGDB-PLAY2-NANO",
 *     nodeNumber: 1,
 * });
 * ```
 *
 * ## Import
 *
 * MongoDB® instance can be imported using the `id`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:index/mongoDbInstance:MongoDbInstance main fr-par/11111111-1111-1111-1111-111111111111
 * ```
 *
 * @deprecated scaleway.index/mongodbinstance.MongoDbInstance has been deprecated in favor of scaleway.mongodb/instance.Instance
 */
export class MongoDbInstance extends pulumi.CustomResource {
    /**
     * Get an existing MongoDbInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MongoDbInstanceState, opts?: pulumi.CustomResourceOptions): MongoDbInstance {
        pulumi.log.warn("MongoDbInstance is deprecated: scaleway.index/mongodbinstance.MongoDbInstance has been deprecated in favor of scaleway.mongodb/instance.Instance")
        return new MongoDbInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/mongoDbInstance:MongoDbInstance';

    /**
     * Returns true if the given object is an instance of MongoDbInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MongoDbInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MongoDbInstance.__pulumiType;
    }

    /**
     * The date and time of the creation of the MongoDB® instance.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Whether automatic snapshot scheduling is enabled.
     */
    declare public readonly isSnapshotScheduleEnabled: pulumi.Output<boolean>;
    /**
     * Name of the MongoDB® instance.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Number of nodes in the instance
     */
    declare public readonly nodeNumber: pulumi.Output<number>;
    /**
     * The type of MongoDB® intance to create.
     */
    declare public readonly nodeType: pulumi.Output<string>;
    /**
     * Password of the user.
     */
    declare public readonly password: pulumi.Output<string | undefined>;
    /**
     * The private IPv4 address associated with the instance.
     */
    declare public readonly privateIps: pulumi.Output<outputs.MongoDbInstancePrivateIp[]>;
    /**
     * Private Network endpoints of the Database Instance.
     */
    declare public readonly privateNetwork: pulumi.Output<outputs.MongoDbInstancePrivateNetwork | undefined>;
    /**
     * `projectId`) The ID of the project the MongoDB® instance is associated with.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * Public network endpoint configuration (no arguments).
     */
    declare public readonly publicNetwork: pulumi.Output<outputs.MongoDbInstancePublicNetwork>;
    /**
     * `region`) The region in which the MongoDB® instance should be created.
     */
    declare public readonly region: pulumi.Output<string | undefined>;
    /**
     * Map of settings to define for the instance.
     */
    declare public readonly settings: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Snapshot ID to restore the MongoDB® instance from.
     */
    declare public readonly snapshotId: pulumi.Output<string | undefined>;
    /**
     * Snapshot schedule frequency in hours.
     */
    declare public readonly snapshotScheduleFrequencyHours: pulumi.Output<number>;
    /**
     * Snapshot schedule retention in days.
     */
    declare public readonly snapshotScheduleRetentionDays: pulumi.Output<number>;
    /**
     * List of tags attached to the MongoDB® instance.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * The PEM-encoded TLS certificate for the MongoDB® instance, if available.
     */
    declare public /*out*/ readonly tlsCertificate: pulumi.Output<string>;
    /**
     * The date and time of the last update of the MongoDB® instance.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * Name of the user created when the intance is created.
     */
    declare public readonly userName: pulumi.Output<string | undefined>;
    /**
     * MongoDB® version of the instance.
     */
    declare public readonly version: pulumi.Output<string>;
    /**
     * Volume size in GB.
     */
    declare public readonly volumeSizeInGb: pulumi.Output<number>;
    /**
     * Volume type of the instance.
     */
    declare public readonly volumeType: pulumi.Output<string | undefined>;

    /**
     * Create a MongoDbInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated scaleway.index/mongodbinstance.MongoDbInstance has been deprecated in favor of scaleway.mongodb/instance.Instance */
    constructor(name: string, args: MongoDbInstanceArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated scaleway.index/mongodbinstance.MongoDbInstance has been deprecated in favor of scaleway.mongodb/instance.Instance */
    constructor(name: string, argsOrState?: MongoDbInstanceArgs | MongoDbInstanceState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("MongoDbInstance is deprecated: scaleway.index/mongodbinstance.MongoDbInstance has been deprecated in favor of scaleway.mongodb/instance.Instance")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MongoDbInstanceState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["isSnapshotScheduleEnabled"] = state?.isSnapshotScheduleEnabled;
            resourceInputs["name"] = state?.name;
            resourceInputs["nodeNumber"] = state?.nodeNumber;
            resourceInputs["nodeType"] = state?.nodeType;
            resourceInputs["password"] = state?.password;
            resourceInputs["privateIps"] = state?.privateIps;
            resourceInputs["privateNetwork"] = state?.privateNetwork;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["publicNetwork"] = state?.publicNetwork;
            resourceInputs["region"] = state?.region;
            resourceInputs["settings"] = state?.settings;
            resourceInputs["snapshotId"] = state?.snapshotId;
            resourceInputs["snapshotScheduleFrequencyHours"] = state?.snapshotScheduleFrequencyHours;
            resourceInputs["snapshotScheduleRetentionDays"] = state?.snapshotScheduleRetentionDays;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tlsCertificate"] = state?.tlsCertificate;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["userName"] = state?.userName;
            resourceInputs["version"] = state?.version;
            resourceInputs["volumeSizeInGb"] = state?.volumeSizeInGb;
            resourceInputs["volumeType"] = state?.volumeType;
        } else {
            const args = argsOrState as MongoDbInstanceArgs | undefined;
            if (args?.nodeNumber === undefined && !opts.urn) {
                throw new Error("Missing required property 'nodeNumber'");
            }
            if (args?.nodeType === undefined && !opts.urn) {
                throw new Error("Missing required property 'nodeType'");
            }
            resourceInputs["isSnapshotScheduleEnabled"] = args?.isSnapshotScheduleEnabled;
            resourceInputs["name"] = args?.name;
            resourceInputs["nodeNumber"] = args?.nodeNumber;
            resourceInputs["nodeType"] = args?.nodeType;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["privateIps"] = args?.privateIps;
            resourceInputs["privateNetwork"] = args?.privateNetwork;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["publicNetwork"] = args?.publicNetwork;
            resourceInputs["region"] = args?.region;
            resourceInputs["settings"] = args?.settings;
            resourceInputs["snapshotId"] = args?.snapshotId;
            resourceInputs["snapshotScheduleFrequencyHours"] = args?.snapshotScheduleFrequencyHours;
            resourceInputs["snapshotScheduleRetentionDays"] = args?.snapshotScheduleRetentionDays;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["userName"] = args?.userName;
            resourceInputs["version"] = args?.version;
            resourceInputs["volumeSizeInGb"] = args?.volumeSizeInGb;
            resourceInputs["volumeType"] = args?.volumeType;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["tlsCertificate"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MongoDbInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MongoDbInstance resources.
 */
export interface MongoDbInstanceState {
    /**
     * The date and time of the creation of the MongoDB® instance.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Whether automatic snapshot scheduling is enabled.
     */
    isSnapshotScheduleEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the MongoDB® instance.
     */
    name?: pulumi.Input<string>;
    /**
     * Number of nodes in the instance
     */
    nodeNumber?: pulumi.Input<number>;
    /**
     * The type of MongoDB® intance to create.
     */
    nodeType?: pulumi.Input<string>;
    /**
     * Password of the user.
     */
    password?: pulumi.Input<string>;
    /**
     * The private IPv4 address associated with the instance.
     */
    privateIps?: pulumi.Input<pulumi.Input<inputs.MongoDbInstancePrivateIp>[]>;
    /**
     * Private Network endpoints of the Database Instance.
     */
    privateNetwork?: pulumi.Input<inputs.MongoDbInstancePrivateNetwork>;
    /**
     * `projectId`) The ID of the project the MongoDB® instance is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Public network endpoint configuration (no arguments).
     */
    publicNetwork?: pulumi.Input<inputs.MongoDbInstancePublicNetwork>;
    /**
     * `region`) The region in which the MongoDB® instance should be created.
     */
    region?: pulumi.Input<string>;
    /**
     * Map of settings to define for the instance.
     */
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Snapshot ID to restore the MongoDB® instance from.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * Snapshot schedule frequency in hours.
     */
    snapshotScheduleFrequencyHours?: pulumi.Input<number>;
    /**
     * Snapshot schedule retention in days.
     */
    snapshotScheduleRetentionDays?: pulumi.Input<number>;
    /**
     * List of tags attached to the MongoDB® instance.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The PEM-encoded TLS certificate for the MongoDB® instance, if available.
     */
    tlsCertificate?: pulumi.Input<string>;
    /**
     * The date and time of the last update of the MongoDB® instance.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * Name of the user created when the intance is created.
     */
    userName?: pulumi.Input<string>;
    /**
     * MongoDB® version of the instance.
     */
    version?: pulumi.Input<string>;
    /**
     * Volume size in GB.
     */
    volumeSizeInGb?: pulumi.Input<number>;
    /**
     * Volume type of the instance.
     */
    volumeType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MongoDbInstance resource.
 */
export interface MongoDbInstanceArgs {
    /**
     * Whether automatic snapshot scheduling is enabled.
     */
    isSnapshotScheduleEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the MongoDB® instance.
     */
    name?: pulumi.Input<string>;
    /**
     * Number of nodes in the instance
     */
    nodeNumber: pulumi.Input<number>;
    /**
     * The type of MongoDB® intance to create.
     */
    nodeType: pulumi.Input<string>;
    /**
     * Password of the user.
     */
    password?: pulumi.Input<string>;
    /**
     * The private IPv4 address associated with the instance.
     */
    privateIps?: pulumi.Input<pulumi.Input<inputs.MongoDbInstancePrivateIp>[]>;
    /**
     * Private Network endpoints of the Database Instance.
     */
    privateNetwork?: pulumi.Input<inputs.MongoDbInstancePrivateNetwork>;
    /**
     * `projectId`) The ID of the project the MongoDB® instance is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Public network endpoint configuration (no arguments).
     */
    publicNetwork?: pulumi.Input<inputs.MongoDbInstancePublicNetwork>;
    /**
     * `region`) The region in which the MongoDB® instance should be created.
     */
    region?: pulumi.Input<string>;
    /**
     * Map of settings to define for the instance.
     */
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Snapshot ID to restore the MongoDB® instance from.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * Snapshot schedule frequency in hours.
     */
    snapshotScheduleFrequencyHours?: pulumi.Input<number>;
    /**
     * Snapshot schedule retention in days.
     */
    snapshotScheduleRetentionDays?: pulumi.Input<number>;
    /**
     * List of tags attached to the MongoDB® instance.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the user created when the intance is created.
     */
    userName?: pulumi.Input<string>;
    /**
     * MongoDB® version of the instance.
     */
    version?: pulumi.Input<string>;
    /**
     * Volume size in GB.
     */
    volumeSizeInGb?: pulumi.Input<number>;
    /**
     * Volume type of the instance.
     */
    volumeType?: pulumi.Input<string>;
}
