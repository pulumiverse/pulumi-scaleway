// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creates and manages Scaleway MongoDB® snapshots.
 * For more information refer to the [product documentation](https://www.scaleway.com/en/docs/managed-mongodb-databases/).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.mongodb.Snapshot("main", {
 *     instanceId: mainScalewayMongodbInstance.id,
 *     name: "name-snapshot",
 *     expiresAt: "2024-12-31T23:59:59Z",
 * });
 * ```
 *
 * ## Import
 *
 * MongoDB® snapshots can be imported using the `{region}/{id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:index/mongoDbSnapshot:MongoDbSnapshot main fr-par-1/11111111-1111-1111-1111-111111111111
 * ```
 *
 * @deprecated scaleway.index/mongodbsnapshot.MongoDbSnapshot has been deprecated in favor of scaleway.mongodb/snapshot.Snapshot
 */
export class MongoDbSnapshot extends pulumi.CustomResource {
    /**
     * Get an existing MongoDbSnapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MongoDbSnapshotState, opts?: pulumi.CustomResourceOptions): MongoDbSnapshot {
        pulumi.log.warn("MongoDbSnapshot is deprecated: scaleway.index/mongodbsnapshot.MongoDbSnapshot has been deprecated in favor of scaleway.mongodb/snapshot.Snapshot")
        return new MongoDbSnapshot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/mongoDbSnapshot:MongoDbSnapshot';

    /**
     * Returns true if the given object is an instance of MongoDbSnapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MongoDbSnapshot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MongoDbSnapshot.__pulumiType;
    }

    /**
     * The date and time when the MongoDB® snapshot was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The expiration date of the MongoDB® snapshot in ISO 8601 format (e.g. `2024-12-31T23:59:59Z`).
     *
     * > **Important:** Once set, `expiresAt` cannot be removed.
     */
    public readonly expiresAt!: pulumi.Output<string>;
    /**
     * The ID of the MongoDB® instance from which the snapshot was created.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The name of the MongoDB® instance from which the snapshot was created.
     */
    public /*out*/ readonly instanceName!: pulumi.Output<string>;
    /**
     * The name of the MongoDB® snapshot.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The type of node associated with the MongoDB® snapshot.
     */
    public /*out*/ readonly nodeType!: pulumi.Output<string>;
    /**
     * `region`) The region in which the MongoDB® snapshot should be created.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The size of the MongoDB® snapshot in bytes.
     */
    public /*out*/ readonly size!: pulumi.Output<number>;
    /**
     * The date and time of the last update of the MongoDB® snapshot.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The type of volume used for the MongoDB® snapshot.
     */
    public /*out*/ readonly volumeType!: pulumi.Output<string>;

    /**
     * Create a MongoDbSnapshot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated scaleway.index/mongodbsnapshot.MongoDbSnapshot has been deprecated in favor of scaleway.mongodb/snapshot.Snapshot */
    constructor(name: string, args: MongoDbSnapshotArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated scaleway.index/mongodbsnapshot.MongoDbSnapshot has been deprecated in favor of scaleway.mongodb/snapshot.Snapshot */
    constructor(name: string, argsOrState?: MongoDbSnapshotArgs | MongoDbSnapshotState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("MongoDbSnapshot is deprecated: scaleway.index/mongodbsnapshot.MongoDbSnapshot has been deprecated in favor of scaleway.mongodb/snapshot.Snapshot")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MongoDbSnapshotState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["expiresAt"] = state ? state.expiresAt : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeType"] = state ? state.nodeType : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["volumeType"] = state ? state.volumeType : undefined;
        } else {
            const args = argsOrState as MongoDbSnapshotArgs | undefined;
            if ((!args || args.expiresAt === undefined) && !opts.urn) {
                throw new Error("Missing required property 'expiresAt'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["expiresAt"] = args ? args.expiresAt : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["instanceName"] = undefined /*out*/;
            resourceInputs["nodeType"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["volumeType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MongoDbSnapshot.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MongoDbSnapshot resources.
 */
export interface MongoDbSnapshotState {
    /**
     * The date and time when the MongoDB® snapshot was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The expiration date of the MongoDB® snapshot in ISO 8601 format (e.g. `2024-12-31T23:59:59Z`).
     *
     * > **Important:** Once set, `expiresAt` cannot be removed.
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * The ID of the MongoDB® instance from which the snapshot was created.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The name of the MongoDB® instance from which the snapshot was created.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * The name of the MongoDB® snapshot.
     */
    name?: pulumi.Input<string>;
    /**
     * The type of node associated with the MongoDB® snapshot.
     */
    nodeType?: pulumi.Input<string>;
    /**
     * `region`) The region in which the MongoDB® snapshot should be created.
     */
    region?: pulumi.Input<string>;
    /**
     * The size of the MongoDB® snapshot in bytes.
     */
    size?: pulumi.Input<number>;
    /**
     * The date and time of the last update of the MongoDB® snapshot.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The type of volume used for the MongoDB® snapshot.
     */
    volumeType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MongoDbSnapshot resource.
 */
export interface MongoDbSnapshotArgs {
    /**
     * The expiration date of the MongoDB® snapshot in ISO 8601 format (e.g. `2024-12-31T23:59:59Z`).
     *
     * > **Important:** Once set, `expiresAt` cannot be removed.
     */
    expiresAt: pulumi.Input<string>;
    /**
     * The ID of the MongoDB® instance from which the snapshot was created.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The name of the MongoDB® snapshot.
     */
    name?: pulumi.Input<string>;
    /**
     * `region`) The region in which the MongoDB® snapshot should be created.
     */
    region?: pulumi.Input<string>;
}
