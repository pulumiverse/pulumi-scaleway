// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Creates and manages Scaleway MongoDB® users.
 * For more information refer to the [product documentation](https://www.scaleway.com/en/docs/managed-mongodb-databases/).
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.mongodb.Instance("main", {
 *     name: "test-mongodb-user",
 *     version: "7.0.12",
 *     nodeType: "MGDB-PLAY2-NANO",
 *     nodeNumber: 1,
 *     userName: "initial_user",
 *     password: "initial_password123",
 *     volumeSizeInGb: 5,
 * });
 * const mainUser = new scaleway.mongodb.User("main", {
 *     instanceId: main.id,
 *     name: "my_user",
 *     password: "my_password123",
 *     roles: [{
 *         role: "read_write",
 *         databaseName: "my_database",
 *     }],
 * });
 * ```
 *
 * ### With Multiple Users
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.mongodb.Instance("main", {
 *     name: "test-mongodb-multi-user",
 *     version: "7.0.12",
 *     nodeType: "MGDB-PLAY2-NANO",
 *     nodeNumber: 1,
 *     userName: "admin_user",
 *     password: "admin_password123",
 *     volumeSizeInGb: 5,
 * });
 * const appUser = new scaleway.mongodb.User("app_user", {
 *     instanceId: main.id,
 *     name: "app_user",
 *     password: "app_password123",
 *     roles: [
 *         {
 *             role: "read_write",
 *             databaseName: "app_database",
 *         },
 *         {
 *             role: "read",
 *             databaseName: "logs_database",
 *         },
 *     ],
 * });
 * const adminUser = new scaleway.mongodb.User("admin_user", {
 *     instanceId: main.id,
 *     name: "admin_user",
 *     password: "admin_password123",
 *     roles: [
 *         {
 *             role: "db_admin",
 *             databaseName: "admin",
 *         },
 *         {
 *             role: "read",
 *             anyDatabase: true,
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * MongoDB® users can be imported using the `{region}/{instance_id}/{name}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:mongodb/user:User main fr-par/11111111-1111-1111-1111-111111111111/my_user
 * ```
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:mongodb/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * The ID of the MongoDB® instance.
     */
    declare public readonly instanceId: pulumi.Output<string>;
    /**
     * The name of the MongoDB® user.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The password of the MongoDB® user.
     */
    declare public readonly password: pulumi.Output<string>;
    /**
     * `region`) The region in which the MongoDB® user should be created.
     */
    declare public readonly region: pulumi.Output<string | undefined>;
    /**
     * List of roles assigned to the user. Each role block supports:
     */
    declare public readonly roles: pulumi.Output<outputs.mongodb.UserRole[] | undefined>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["name"] = state?.name;
            resourceInputs["password"] = state?.password;
            resourceInputs["region"] = state?.region;
            resourceInputs["roles"] = state?.roles;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if (args?.password === undefined && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["name"] = args?.name;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["region"] = args?.region;
            resourceInputs["roles"] = args?.roles;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * The ID of the MongoDB® instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The name of the MongoDB® user.
     */
    name?: pulumi.Input<string>;
    /**
     * The password of the MongoDB® user.
     */
    password?: pulumi.Input<string>;
    /**
     * `region`) The region in which the MongoDB® user should be created.
     */
    region?: pulumi.Input<string>;
    /**
     * List of roles assigned to the user. Each role block supports:
     */
    roles?: pulumi.Input<pulumi.Input<inputs.mongodb.UserRole>[]>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * The ID of the MongoDB® instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The name of the MongoDB® user.
     */
    name?: pulumi.Input<string>;
    /**
     * The password of the MongoDB® user.
     */
    password: pulumi.Input<string>;
    /**
     * `region`) The region in which the MongoDB® user should be created.
     */
    region?: pulumi.Input<string>;
    /**
     * List of roles assigned to the user. Each role block supports:
     */
    roles?: pulumi.Input<pulumi.Input<inputs.mongodb.UserRole>[]>;
}
