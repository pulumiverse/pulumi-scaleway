// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AclArgs, AclState } from "./acl";
export type Acl = import("./acl").Acl;
export const Acl: typeof import("./acl").Acl = null as any;
utilities.lazyLoad(exports, ["Acl"], () => require("./acl"));

export { GatewayNetworkArgs, GatewayNetworkState } from "./gatewayNetwork";
export type GatewayNetwork = import("./gatewayNetwork").GatewayNetwork;
export const GatewayNetwork: typeof import("./gatewayNetwork").GatewayNetwork = null as any;
utilities.lazyLoad(exports, ["GatewayNetwork"], () => require("./gatewayNetwork"));

export { GetGatewayNetworkArgs, GetGatewayNetworkResult, GetGatewayNetworkOutputArgs } from "./getGatewayNetwork";
export const getGatewayNetwork: typeof import("./getGatewayNetwork").getGatewayNetwork = null as any;
export const getGatewayNetworkOutput: typeof import("./getGatewayNetwork").getGatewayNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getGatewayNetwork","getGatewayNetworkOutput"], () => require("./getGatewayNetwork"));

export { GetPrivateNetworkArgs, GetPrivateNetworkResult, GetPrivateNetworkOutputArgs } from "./getPrivateNetwork";
export const getPrivateNetwork: typeof import("./getPrivateNetwork").getPrivateNetwork = null as any;
export const getPrivateNetworkOutput: typeof import("./getPrivateNetwork").getPrivateNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateNetwork","getPrivateNetworkOutput"], () => require("./getPrivateNetwork"));

export { GetPublicGatewayArgs, GetPublicGatewayResult, GetPublicGatewayOutputArgs } from "./getPublicGateway";
export const getPublicGateway: typeof import("./getPublicGateway").getPublicGateway = null as any;
export const getPublicGatewayOutput: typeof import("./getPublicGateway").getPublicGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getPublicGateway","getPublicGatewayOutput"], () => require("./getPublicGateway"));

export { GetPublicGatewayDhcpArgs, GetPublicGatewayDhcpResult, GetPublicGatewayDhcpOutputArgs } from "./getPublicGatewayDhcp";
export const getPublicGatewayDhcp: typeof import("./getPublicGatewayDhcp").getPublicGatewayDhcp = null as any;
export const getPublicGatewayDhcpOutput: typeof import("./getPublicGatewayDhcp").getPublicGatewayDhcpOutput = null as any;
utilities.lazyLoad(exports, ["getPublicGatewayDhcp","getPublicGatewayDhcpOutput"], () => require("./getPublicGatewayDhcp"));

export { GetPublicGatewayDhcpReservationArgs, GetPublicGatewayDhcpReservationResult, GetPublicGatewayDhcpReservationOutputArgs } from "./getPublicGatewayDhcpReservation";
export const getPublicGatewayDhcpReservation: typeof import("./getPublicGatewayDhcpReservation").getPublicGatewayDhcpReservation = null as any;
export const getPublicGatewayDhcpReservationOutput: typeof import("./getPublicGatewayDhcpReservation").getPublicGatewayDhcpReservationOutput = null as any;
utilities.lazyLoad(exports, ["getPublicGatewayDhcpReservation","getPublicGatewayDhcpReservationOutput"], () => require("./getPublicGatewayDhcpReservation"));

export { GetPublicGatewayIpArgs, GetPublicGatewayIpResult, GetPublicGatewayIpOutputArgs } from "./getPublicGatewayIp";
export const getPublicGatewayIp: typeof import("./getPublicGatewayIp").getPublicGatewayIp = null as any;
export const getPublicGatewayIpOutput: typeof import("./getPublicGatewayIp").getPublicGatewayIpOutput = null as any;
utilities.lazyLoad(exports, ["getPublicGatewayIp","getPublicGatewayIpOutput"], () => require("./getPublicGatewayIp"));

export { GetPublicGatewayPatRuleArgs, GetPublicGatewayPatRuleResult, GetPublicGatewayPatRuleOutputArgs } from "./getPublicGatewayPatRule";
export const getPublicGatewayPatRule: typeof import("./getPublicGatewayPatRule").getPublicGatewayPatRule = null as any;
export const getPublicGatewayPatRuleOutput: typeof import("./getPublicGatewayPatRule").getPublicGatewayPatRuleOutput = null as any;
utilities.lazyLoad(exports, ["getPublicGatewayPatRule","getPublicGatewayPatRuleOutput"], () => require("./getPublicGatewayPatRule"));

export { GetRoutesArgs, GetRoutesResult, GetRoutesOutputArgs } from "./getRoutes";
export const getRoutes: typeof import("./getRoutes").getRoutes = null as any;
export const getRoutesOutput: typeof import("./getRoutes").getRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getRoutes","getRoutesOutput"], () => require("./getRoutes"));

export { GetVpcArgs, GetVpcResult, GetVpcOutputArgs } from "./getVpc";
export const getVpc: typeof import("./getVpc").getVpc = null as any;
export const getVpcOutput: typeof import("./getVpc").getVpcOutput = null as any;
utilities.lazyLoad(exports, ["getVpc","getVpcOutput"], () => require("./getVpc"));

export { GetVpcsArgs, GetVpcsResult, GetVpcsOutputArgs } from "./getVpcs";
export const getVpcs: typeof import("./getVpcs").getVpcs = null as any;
export const getVpcsOutput: typeof import("./getVpcs").getVpcsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcs","getVpcsOutput"], () => require("./getVpcs"));

export { PrivateNetworkArgs, PrivateNetworkState } from "./privateNetwork";
export type PrivateNetwork = import("./privateNetwork").PrivateNetwork;
export const PrivateNetwork: typeof import("./privateNetwork").PrivateNetwork = null as any;
utilities.lazyLoad(exports, ["PrivateNetwork"], () => require("./privateNetwork"));

export { PublicGatewayArgs, PublicGatewayState } from "./publicGateway";
export type PublicGateway = import("./publicGateway").PublicGateway;
export const PublicGateway: typeof import("./publicGateway").PublicGateway = null as any;
utilities.lazyLoad(exports, ["PublicGateway"], () => require("./publicGateway"));

export { PublicGatewayDhcpArgs, PublicGatewayDhcpState } from "./publicGatewayDhcp";
export type PublicGatewayDhcp = import("./publicGatewayDhcp").PublicGatewayDhcp;
export const PublicGatewayDhcp: typeof import("./publicGatewayDhcp").PublicGatewayDhcp = null as any;
utilities.lazyLoad(exports, ["PublicGatewayDhcp"], () => require("./publicGatewayDhcp"));

export { PublicGatewayDhcpReservationArgs, PublicGatewayDhcpReservationState } from "./publicGatewayDhcpReservation";
export type PublicGatewayDhcpReservation = import("./publicGatewayDhcpReservation").PublicGatewayDhcpReservation;
export const PublicGatewayDhcpReservation: typeof import("./publicGatewayDhcpReservation").PublicGatewayDhcpReservation = null as any;
utilities.lazyLoad(exports, ["PublicGatewayDhcpReservation"], () => require("./publicGatewayDhcpReservation"));

export { PublicGatewayIpArgs, PublicGatewayIpState } from "./publicGatewayIp";
export type PublicGatewayIp = import("./publicGatewayIp").PublicGatewayIp;
export const PublicGatewayIp: typeof import("./publicGatewayIp").PublicGatewayIp = null as any;
utilities.lazyLoad(exports, ["PublicGatewayIp"], () => require("./publicGatewayIp"));

export { PublicGatewayIpReverseDnsArgs, PublicGatewayIpReverseDnsState } from "./publicGatewayIpReverseDns";
export type PublicGatewayIpReverseDns = import("./publicGatewayIpReverseDns").PublicGatewayIpReverseDns;
export const PublicGatewayIpReverseDns: typeof import("./publicGatewayIpReverseDns").PublicGatewayIpReverseDns = null as any;
utilities.lazyLoad(exports, ["PublicGatewayIpReverseDns"], () => require("./publicGatewayIpReverseDns"));

export { PublicGatewayPatRuleArgs, PublicGatewayPatRuleState } from "./publicGatewayPatRule";
export type PublicGatewayPatRule = import("./publicGatewayPatRule").PublicGatewayPatRule;
export const PublicGatewayPatRule: typeof import("./publicGatewayPatRule").PublicGatewayPatRule = null as any;
utilities.lazyLoad(exports, ["PublicGatewayPatRule"], () => require("./publicGatewayPatRule"));

export { RouteArgs, RouteState } from "./route";
export type Route = import("./route").Route;
export const Route: typeof import("./route").Route = null as any;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));

export { VpcArgs, VpcState } from "./vpc";
export type Vpc = import("./vpc").Vpc;
export const Vpc: typeof import("./vpc").Vpc = null as any;
utilities.lazyLoad(exports, ["Vpc"], () => require("./vpc"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "scaleway:network/acl:Acl":
                return new Acl(name, <any>undefined, { urn })
            case "scaleway:network/gatewayNetwork:GatewayNetwork":
                return new GatewayNetwork(name, <any>undefined, { urn })
            case "scaleway:network/privateNetwork:PrivateNetwork":
                return new PrivateNetwork(name, <any>undefined, { urn })
            case "scaleway:network/publicGateway:PublicGateway":
                return new PublicGateway(name, <any>undefined, { urn })
            case "scaleway:network/publicGatewayDhcp:PublicGatewayDhcp":
                return new PublicGatewayDhcp(name, <any>undefined, { urn })
            case "scaleway:network/publicGatewayDhcpReservation:PublicGatewayDhcpReservation":
                return new PublicGatewayDhcpReservation(name, <any>undefined, { urn })
            case "scaleway:network/publicGatewayIp:PublicGatewayIp":
                return new PublicGatewayIp(name, <any>undefined, { urn })
            case "scaleway:network/publicGatewayIpReverseDns:PublicGatewayIpReverseDns":
                return new PublicGatewayIpReverseDns(name, <any>undefined, { urn })
            case "scaleway:network/publicGatewayPatRule:PublicGatewayPatRule":
                return new PublicGatewayPatRule(name, <any>undefined, { urn })
            case "scaleway:network/route:Route":
                return new Route(name, <any>undefined, { urn })
            case "scaleway:network/vpc:Vpc":
                return new Vpc(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("scaleway", "network/acl", _module)
pulumi.runtime.registerResourceModule("scaleway", "network/gatewayNetwork", _module)
pulumi.runtime.registerResourceModule("scaleway", "network/privateNetwork", _module)
pulumi.runtime.registerResourceModule("scaleway", "network/publicGateway", _module)
pulumi.runtime.registerResourceModule("scaleway", "network/publicGatewayDhcp", _module)
pulumi.runtime.registerResourceModule("scaleway", "network/publicGatewayDhcpReservation", _module)
pulumi.runtime.registerResourceModule("scaleway", "network/publicGatewayIp", _module)
pulumi.runtime.registerResourceModule("scaleway", "network/publicGatewayIpReverseDns", _module)
pulumi.runtime.registerResourceModule("scaleway", "network/publicGatewayPatRule", _module)
pulumi.runtime.registerResourceModule("scaleway", "network/route", _module)
pulumi.runtime.registerResourceModule("scaleway", "network/vpc", _module)
