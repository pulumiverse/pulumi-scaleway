// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates and manages Scaleway Public Gateway PAT (Port Address Translation).
 * For more information, see the [API documentation](https://www.scaleway.com/en/developers/api/public-gateway/#pat-rules-e75d10).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const sg01 = new scaleway.instance.SecurityGroup("sg01", {
 *     inboundDefaultPolicy: "drop",
 *     outboundDefaultPolicy: "accept",
 *     inboundRules: [{
 *         action: "accept",
 *         port: 22,
 *         protocol: "TCP",
 *     }],
 * });
 * const srv01 = new scaleway.instance.Server("srv01", {
 *     name: "my-server",
 *     type: "PLAY2-NANO",
 *     image: "ubuntu_jammy",
 *     securityGroupId: sg01.id,
 * });
 * const pn01 = new scaleway.network.PrivateNetwork("pn01", {name: "my-pn"});
 * const pnic01 = new scaleway.instance.PrivateNic("pnic01", {
 *     serverId: srv01.id,
 *     privateNetworkId: pn01.id,
 * });
 * const dhcp01 = new scaleway.network.PublicGatewayDhcp("dhcp01", {subnet: "192.168.0.0/24"});
 * const ip01 = new scaleway.network.PublicGatewayIp("ip01", {});
 * const pg01 = new scaleway.network.PublicGateway("pg01", {
 *     name: "my-pg",
 *     type: "VPC-GW-S",
 *     ipId: ip01.id,
 * });
 * const gn01 = new scaleway.network.GatewayNetwork("gn01", {
 *     gatewayId: pg01.id,
 *     privateNetworkId: pn01.id,
 *     dhcpId: dhcp01.id,
 *     cleanupDhcp: true,
 *     enableMasquerade: true,
 * });
 * const rsv01 = new scaleway.network.PublicGatewayDhcpReservation("rsv01", {
 *     gatewayNetworkId: gn01.id,
 *     macAddress: pnic01.macAddress,
 *     ipAddress: "192.168.0.7",
 * });
 * // PAT rule for SSH traffic
 * const pat01 = new scaleway.network.PublicGatewayPatRule("pat01", {
 *     gatewayId: pg01.id,
 *     privateIp: rsv01.ipAddress,
 *     privatePort: 22,
 *     publicPort: 2202,
 *     protocol: "tcp",
 * });
 * ```
 *
 * ## Import
 *
 * Public Gateway PAT rule configurations can be imported using `{zone}/{id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:network/publicGatewayPatRule:PublicGatewayPatRule main fr-par-1/11111111-1111-1111-1111-111111111111
 * ```
 */
export class PublicGatewayPatRule extends pulumi.CustomResource {
    /**
     * Get an existing PublicGatewayPatRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PublicGatewayPatRuleState, opts?: pulumi.CustomResourceOptions): PublicGatewayPatRule {
        return new PublicGatewayPatRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:network/publicGatewayPatRule:PublicGatewayPatRule';

    /**
     * Returns true if the given object is an instance of PublicGatewayPatRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PublicGatewayPatRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PublicGatewayPatRule.__pulumiType;
    }

    /**
     * The date and time of the creation of the PAT rule configuration.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The ID of the Public Gateway.
     */
    declare public readonly gatewayId: pulumi.Output<string>;
    /**
     * The Organization ID the PAT rule configuration is associated with.
     */
    declare public /*out*/ readonly organizationId: pulumi.Output<string>;
    /**
     * The private IP address to forward data to.
     */
    declare public readonly privateIp: pulumi.Output<string>;
    /**
     * The private port to translate to.
     */
    declare public readonly privatePort: pulumi.Output<number>;
    /**
     * The protocol the rule should apply to. Possible values are `both`, `tcp` and `udp`.
     */
    declare public readonly protocol: pulumi.Output<string | undefined>;
    /**
     * The public port to listen on.
     */
    declare public readonly publicPort: pulumi.Output<number>;
    /**
     * The date and time of the last update of the PAT rule configuration.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * `zone`) The zone in which the Public Gateway DHCP configuration should be created.
     */
    declare public readonly zone: pulumi.Output<string | undefined>;

    /**
     * Create a PublicGatewayPatRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PublicGatewayPatRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PublicGatewayPatRuleArgs | PublicGatewayPatRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PublicGatewayPatRuleState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["gatewayId"] = state?.gatewayId;
            resourceInputs["organizationId"] = state?.organizationId;
            resourceInputs["privateIp"] = state?.privateIp;
            resourceInputs["privatePort"] = state?.privatePort;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["publicPort"] = state?.publicPort;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["zone"] = state?.zone;
        } else {
            const args = argsOrState as PublicGatewayPatRuleArgs | undefined;
            if (args?.gatewayId === undefined && !opts.urn) {
                throw new Error("Missing required property 'gatewayId'");
            }
            if (args?.privateIp === undefined && !opts.urn) {
                throw new Error("Missing required property 'privateIp'");
            }
            if (args?.privatePort === undefined && !opts.urn) {
                throw new Error("Missing required property 'privatePort'");
            }
            if (args?.publicPort === undefined && !opts.urn) {
                throw new Error("Missing required property 'publicPort'");
            }
            resourceInputs["gatewayId"] = args?.gatewayId;
            resourceInputs["privateIp"] = args?.privateIp;
            resourceInputs["privatePort"] = args?.privatePort;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["publicPort"] = args?.publicPort;
            resourceInputs["zone"] = args?.zone;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["organizationId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "scaleway:index/vpcPublicGatewayPatRule:VpcPublicGatewayPatRule" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(PublicGatewayPatRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PublicGatewayPatRule resources.
 */
export interface PublicGatewayPatRuleState {
    /**
     * The date and time of the creation of the PAT rule configuration.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The ID of the Public Gateway.
     */
    gatewayId?: pulumi.Input<string>;
    /**
     * The Organization ID the PAT rule configuration is associated with.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * The private IP address to forward data to.
     */
    privateIp?: pulumi.Input<string>;
    /**
     * The private port to translate to.
     */
    privatePort?: pulumi.Input<number>;
    /**
     * The protocol the rule should apply to. Possible values are `both`, `tcp` and `udp`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The public port to listen on.
     */
    publicPort?: pulumi.Input<number>;
    /**
     * The date and time of the last update of the PAT rule configuration.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * `zone`) The zone in which the Public Gateway DHCP configuration should be created.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PublicGatewayPatRule resource.
 */
export interface PublicGatewayPatRuleArgs {
    /**
     * The ID of the Public Gateway.
     */
    gatewayId: pulumi.Input<string>;
    /**
     * The private IP address to forward data to.
     */
    privateIp: pulumi.Input<string>;
    /**
     * The private port to translate to.
     */
    privatePort: pulumi.Input<number>;
    /**
     * The protocol the rule should apply to. Possible values are `both`, `tcp` and `udp`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The public port to listen on.
     */
    publicPort: pulumi.Input<number>;
    /**
     * `zone`) The zone in which the Public Gateway DHCP configuration should be created.
     */
    zone?: pulumi.Input<string>;
}
