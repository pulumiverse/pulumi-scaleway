// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates and manages Scaleway VPC Routes.
 * For more information, see [the main documentation](https://www.scaleway.com/en/docs/vpc/concepts/).
 *
 * ## Example Usage
 *
 * ### With Instance
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const vpc01 = new scaleway.network.Vpc("vpc01", {name: "tf-vpc-vpn"});
 * const pn01 = new scaleway.network.PrivateNetwork("pn01", {
 *     name: "tf-pn-vpn",
 *     ipv4Subnet: {
 *         subnet: "172.16.64.0/22",
 *     },
 *     vpcId: vpc01.id,
 * });
 * const server01 = new scaleway.instance.Server("server01", {
 *     name: "tf-server-vpn",
 *     type: "PLAY2-MICRO",
 *     image: "openvpn",
 * });
 * const pnic01 = new scaleway.instance.PrivateNic("pnic01", {
 *     privateNetworkId: pn01.id,
 *     serverId: server01.id,
 * });
 * const rt01 = new scaleway.network.Route("rt01", {
 *     vpcId: vpc01.id,
 *     description: "tf-route-vpn",
 *     tags: [
 *         "tf",
 *         "route",
 *     ],
 *     destination: "10.0.0.0/24",
 *     nexthopResourceId: pnic01.id,
 * });
 * ```
 *
 * ### With Baremetal
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const vpc01 = new scaleway.network.Vpc("vpc01", {name: "tf-vpc-vpn"});
 * const pn01 = new scaleway.network.PrivateNetwork("pn01", {
 *     name: "tf-pn-vpn",
 *     ipv4Subnet: {
 *         subnet: "172.16.64.0/22",
 *     },
 *     vpcId: vpc01.id,
 * });
 * const myOs = scaleway.elasticmetal.getOs({
 *     zone: "fr-par-2",
 *     name: "Ubuntu",
 *     version: "22.04 LTS (Jammy Jellyfish)",
 * });
 * const myOffer = scaleway.elasticmetal.getOffer({
 *     zone: "fr-par-2",
 *     name: "EM-B112X-SSD",
 * });
 * const privateNetwork = scaleway.elasticmetal.getOption({
 *     zone: "fr-par-2",
 *     name: "Private Network",
 * });
 * const myKey = scaleway.iam.getSshKey({
 *     name: "main",
 * });
 * const myServer = new scaleway.elasticmetal.Server("my_server", {
 *     zone: "fr-par-2",
 *     offer: myOffer.then(myOffer => myOffer.offerId),
 *     os: myOs.then(myOs => myOs.osId),
 *     sshKeyIds: [myKey.then(myKey => myKey.id)],
 *     options: [{
 *         id: privateNetwork.then(privateNetwork => privateNetwork.optionId),
 *     }],
 *     privateNetworks: [{
 *         id: pn01.id,
 *     }],
 * });
 * const rt01 = new scaleway.network.Route("rt01", {
 *     vpcId: vpc01.id,
 *     description: "tf-route-vpn",
 *     tags: [
 *         "tf",
 *         "route",
 *     ],
 *     destination: "10.0.0.0/24",
 *     nexthopResourceId: myServer.privateNetworks.apply(privateNetworks => privateNetworks?.[0]?.mappingId),
 * });
 * ```
 *
 * ## Import
 *
 * Routes can be imported using `{region}/{id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:network/route:Route main fr-par/11111111-1111-1111-1111-111111111111
 * ```
 */
export class Route extends pulumi.CustomResource {
    /**
     * Get an existing Route resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouteState, opts?: pulumi.CustomResourceOptions): Route {
        return new Route(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:network/route:Route';

    /**
     * Returns true if the given object is an instance of Route.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Route {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Route.__pulumiType;
    }

    /**
     * The date and time of the creation of the route (RFC 3339 format).
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The route description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The destination of the route.
     */
    public readonly destination!: pulumi.Output<string | undefined>;
    /**
     * The ID of the nexthop private network.
     */
    public readonly nexthopPrivateNetworkId!: pulumi.Output<string | undefined>;
    /**
     * The ID of the nexthop resource.
     */
    public readonly nexthopResourceId!: pulumi.Output<string | undefined>;
    /**
     * `region`) The region of the route.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The tags to associate with the route.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The date and time of the creation of the route (RFC 3339 format).
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The VPC ID the route belongs to.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a Route resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouteArgs | RouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouteState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["nexthopPrivateNetworkId"] = state ? state.nexthopPrivateNetworkId : undefined;
            resourceInputs["nexthopResourceId"] = state ? state.nexthopResourceId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as RouteArgs | undefined;
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["nexthopPrivateNetworkId"] = args ? args.nexthopPrivateNetworkId : undefined;
            resourceInputs["nexthopResourceId"] = args ? args.nexthopResourceId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "scaleway:index/vpcRoute:VpcRoute" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Route.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Route resources.
 */
export interface RouteState {
    /**
     * The date and time of the creation of the route (RFC 3339 format).
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The route description.
     */
    description?: pulumi.Input<string>;
    /**
     * The destination of the route.
     */
    destination?: pulumi.Input<string>;
    /**
     * The ID of the nexthop private network.
     */
    nexthopPrivateNetworkId?: pulumi.Input<string>;
    /**
     * The ID of the nexthop resource.
     */
    nexthopResourceId?: pulumi.Input<string>;
    /**
     * `region`) The region of the route.
     */
    region?: pulumi.Input<string>;
    /**
     * The tags to associate with the route.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The date and time of the creation of the route (RFC 3339 format).
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The VPC ID the route belongs to.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Route resource.
 */
export interface RouteArgs {
    /**
     * The route description.
     */
    description?: pulumi.Input<string>;
    /**
     * The destination of the route.
     */
    destination?: pulumi.Input<string>;
    /**
     * The ID of the nexthop private network.
     */
    nexthopPrivateNetworkId?: pulumi.Input<string>;
    /**
     * The ID of the nexthop resource.
     */
    nexthopResourceId?: pulumi.Input<string>;
    /**
     * `region`) The region of the route.
     */
    region?: pulumi.Input<string>;
    /**
     * The tags to associate with the route.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The VPC ID the route belongs to.
     */
    vpcId: pulumi.Input<string>;
}
