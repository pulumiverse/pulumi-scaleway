// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * The `scaleway.object.BucketWebsiteConfiguration` resource allows you to deploy and manage a bucket website with [Scaleway Object storage](https://www.scaleway.com/en/docs/object-storage/).
 *
 * Refer to the [dedicated documentation](https://www.scaleway.com/en/docs/object-storage/how-to/use-bucket-website/) for more information on bucket websites.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const test = new scaleway.object.Bucket("test", {
 *     name: "my-bucket",
 *     acl: "public-read",
 * });
 * const someFile = new scaleway.object.Item("some_file", {
 *     bucket: test.name,
 *     key: "index.html",
 *     file: "index.html",
 *     visibility: "public-read",
 *     contentType: "text/html",
 * });
 * const testBucketWebsiteConfiguration = new scaleway.object.BucketWebsiteConfiguration("test", {
 *     bucket: test.name,
 *     indexDocument: {
 *         suffix: "index.html",
 *     },
 *     errorDocument: {
 *         key: "error.html",
 *     },
 * });
 * ```
 *
 * ### With A Bucket Policy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.object.Bucket("main", {
 *     name: "MyBucket",
 *     acl: "public-read",
 * });
 * const mainBucketPolicy = new scaleway.object.BucketPolicy("main", {
 *     bucket: main.id,
 *     policy: JSON.stringify({
 *         Version: "2012-10-17",
 *         Id: "MyPolicy",
 *         Statement: [{
 *             Sid: "GrantToEveryone",
 *             Effect: "Allow",
 *             Principal: "*",
 *             Action: ["s3:GetObject"],
 *             Resource: ["<bucket-name>/*"],
 *         }],
 *     }),
 * });
 * const mainBucketWebsiteConfiguration = new scaleway.object.BucketWebsiteConfiguration("main", {
 *     bucket: main.id,
 *     indexDocument: {
 *         suffix: "index.html",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Bucket website configurations can be imported using the `{region}/{bucketName}` identifier, as shown below:
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:object/bucketWebsiteConfiguration:BucketWebsiteConfiguration some_bucket fr-par/some-bucket
 * ```
 *
 * ~> **Important:** The `project_id` attribute has a particular behavior with s3 products because the s3 API is scoped by project.
 *
 * If you are using a project different from the default one, you have to specify the project ID at the end of the import command.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:object/bucketWebsiteConfiguration:BucketWebsiteConfiguration some_bucket fr-par/some-bucket@xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx
 * ```
 */
export class BucketWebsiteConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing BucketWebsiteConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BucketWebsiteConfigurationState, opts?: pulumi.CustomResourceOptions): BucketWebsiteConfiguration {
        return new BucketWebsiteConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:object/bucketWebsiteConfiguration:BucketWebsiteConfiguration';

    /**
     * Returns true if the given object is an instance of BucketWebsiteConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BucketWebsiteConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketWebsiteConfiguration.__pulumiType;
    }

    /**
     * The name of the bucket.
     */
    declare public readonly bucket: pulumi.Output<string>;
    /**
     * The name of the error file for the website detailed below.
     */
    declare public readonly errorDocument: pulumi.Output<outputs.object.BucketWebsiteConfigurationErrorDocument | undefined>;
    /**
     * The name of the index file for the website detailed below.
     */
    declare public readonly indexDocument: pulumi.Output<outputs.object.BucketWebsiteConfigurationIndexDocument>;
    /**
     * The projectId you want to attach the resource to
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * The region you want to attach the resource to
     */
    declare public readonly region: pulumi.Output<string | undefined>;
    /**
     * The domain of the website endpoint. This is used to create DNS alias [records](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/).
     */
    declare public /*out*/ readonly websiteDomain: pulumi.Output<string>;
    /**
     * The website endpoint.
     */
    declare public /*out*/ readonly websiteEndpoint: pulumi.Output<string>;

    /**
     * Create a BucketWebsiteConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BucketWebsiteConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BucketWebsiteConfigurationArgs | BucketWebsiteConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BucketWebsiteConfigurationState | undefined;
            resourceInputs["bucket"] = state?.bucket;
            resourceInputs["errorDocument"] = state?.errorDocument;
            resourceInputs["indexDocument"] = state?.indexDocument;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["region"] = state?.region;
            resourceInputs["websiteDomain"] = state?.websiteDomain;
            resourceInputs["websiteEndpoint"] = state?.websiteEndpoint;
        } else {
            const args = argsOrState as BucketWebsiteConfigurationArgs | undefined;
            if (args?.bucket === undefined && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if (args?.indexDocument === undefined && !opts.urn) {
                throw new Error("Missing required property 'indexDocument'");
            }
            resourceInputs["bucket"] = args?.bucket;
            resourceInputs["errorDocument"] = args?.errorDocument;
            resourceInputs["indexDocument"] = args?.indexDocument;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["region"] = args?.region;
            resourceInputs["websiteDomain"] = undefined /*out*/;
            resourceInputs["websiteEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "scaleway:index/objectBucketWebsiteConfiguration:ObjectBucketWebsiteConfiguration" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(BucketWebsiteConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BucketWebsiteConfiguration resources.
 */
export interface BucketWebsiteConfigurationState {
    /**
     * The name of the bucket.
     */
    bucket?: pulumi.Input<string>;
    /**
     * The name of the error file for the website detailed below.
     */
    errorDocument?: pulumi.Input<inputs.object.BucketWebsiteConfigurationErrorDocument>;
    /**
     * The name of the index file for the website detailed below.
     */
    indexDocument?: pulumi.Input<inputs.object.BucketWebsiteConfigurationIndexDocument>;
    /**
     * The projectId you want to attach the resource to
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    region?: pulumi.Input<string>;
    /**
     * The domain of the website endpoint. This is used to create DNS alias [records](https://www.scaleway.com/en/docs/network/domains-and-dns/how-to/manage-dns-records/).
     */
    websiteDomain?: pulumi.Input<string>;
    /**
     * The website endpoint.
     */
    websiteEndpoint?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BucketWebsiteConfiguration resource.
 */
export interface BucketWebsiteConfigurationArgs {
    /**
     * The name of the bucket.
     */
    bucket: pulumi.Input<string>;
    /**
     * The name of the error file for the website detailed below.
     */
    errorDocument?: pulumi.Input<inputs.object.BucketWebsiteConfigurationErrorDocument>;
    /**
     * The name of the index file for the website detailed below.
     */
    indexDocument: pulumi.Input<inputs.object.BucketWebsiteConfigurationIndexDocument>;
    /**
     * The projectId you want to attach the resource to
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    region?: pulumi.Input<string>;
}
