// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * The `scaleway.object.Item` resource allows you to create and manage objects for [Scaleway Object storage](https://www.scaleway.com/en/docs/object-storage/).
 *
 * Refer to the [dedicated documentation](https://www.scaleway.com/en/docs/object-storage/how-to/upload-files-into-a-bucket/) for more information on Object Storage objects.
 *
 * ## Import
 *
 * Objects can be imported using the `{region}/{bucketName}/{objectKey}` identifier, as shown below:
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:object/item:Item some_object fr-par/some-bucket/some-file
 * ```
 *
 * ~> **Important:** The `project_id` attribute has a particular behavior with s3 products because the s3 API is scoped by project.
 *
 * If you are using a project different from the default one, you have to specify the project ID at the end of the import command.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:object/item:Item some_object fr-par/some-bucket/some-file@xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx
 * ```
 */
export class Item extends pulumi.CustomResource {
    /**
     * Get an existing Item resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ItemState, opts?: pulumi.CustomResourceOptions): Item {
        return new Item(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:object/item:Item';

    /**
     * Returns true if the given object is an instance of Item.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Item {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Item.__pulumiType;
    }

    /**
     * The bucket's name or regional ID.
     */
    declare public readonly bucket: pulumi.Output<string>;
    /**
     * The content of the file to upload. Only one of `file`, `content` or `contentBase64` can be defined.
     */
    declare public readonly content: pulumi.Output<string | undefined>;
    /**
     * The base64-encoded content of the file to upload. Only one of `file`, `content` or `contentBase64` can be defined.
     *
     * > **Note:** Only one of `file`, `content` or `contentBase64` can be defined.
     */
    declare public readonly contentBase64: pulumi.Output<string | undefined>;
    /**
     * The standard MIME type of the object's content (e.g., 'application/json', 'text/plain'). This specifies how the object should be interpreted by clients. See RFC 9110: https://www.rfc-editor.org/rfc/rfc9110.html#name-content-type
     */
    declare public readonly contentType: pulumi.Output<string>;
    /**
     * The name of the file to upload, defaults to an empty file.
     */
    declare public readonly file: pulumi.Output<string | undefined>;
    /**
     * Hash of the file, used to trigger the upload on file change.
     */
    declare public readonly hash: pulumi.Output<string | undefined>;
    /**
     * The path to the object.
     */
    declare public readonly key: pulumi.Output<string>;
    /**
     * Map of metadata used for the object (keys must be lowercase).
     */
    declare public readonly metadata: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The projectId you want to attach the resource to
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * The Scaleway region the bucket resides in.
     */
    declare public readonly region: pulumi.Output<string | undefined>;
    /**
     * Customer's encryption keys to encrypt data (SSE-C)
     */
    declare public readonly sseCustomerKey: pulumi.Output<string | undefined>;
    /**
     * Specifies the Scaleway [storage class](https://www.scaleway.com/en/docs/object-storage/concepts/#storage-class) (`STANDARD`, `GLACIER`, or `ONEZONE_IA`) used to store the object.
     */
    declare public readonly storageClass: pulumi.Output<string | undefined>;
    /**
     * Map of tags.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Visibility of the object, `public-read` or `private`.
     */
    declare public readonly visibility: pulumi.Output<string>;

    /**
     * Create a Item resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ItemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ItemArgs | ItemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ItemState | undefined;
            resourceInputs["bucket"] = state?.bucket;
            resourceInputs["content"] = state?.content;
            resourceInputs["contentBase64"] = state?.contentBase64;
            resourceInputs["contentType"] = state?.contentType;
            resourceInputs["file"] = state?.file;
            resourceInputs["hash"] = state?.hash;
            resourceInputs["key"] = state?.key;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["region"] = state?.region;
            resourceInputs["sseCustomerKey"] = state?.sseCustomerKey;
            resourceInputs["storageClass"] = state?.storageClass;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["visibility"] = state?.visibility;
        } else {
            const args = argsOrState as ItemArgs | undefined;
            if (args?.bucket === undefined && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if (args?.key === undefined && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["bucket"] = args?.bucket;
            resourceInputs["content"] = args?.content;
            resourceInputs["contentBase64"] = args?.contentBase64;
            resourceInputs["contentType"] = args?.contentType;
            resourceInputs["file"] = args?.file;
            resourceInputs["hash"] = args?.hash;
            resourceInputs["key"] = args?.key;
            resourceInputs["metadata"] = args?.metadata;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["region"] = args?.region;
            resourceInputs["sseCustomerKey"] = args?.sseCustomerKey ? pulumi.secret(args.sseCustomerKey) : undefined;
            resourceInputs["storageClass"] = args?.storageClass;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["visibility"] = args?.visibility;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "scaleway:index/objectItem:ObjectItem" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        const secretOpts = { additionalSecretOutputs: ["sseCustomerKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Item.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Item resources.
 */
export interface ItemState {
    /**
     * The bucket's name or regional ID.
     */
    bucket?: pulumi.Input<string>;
    /**
     * The content of the file to upload. Only one of `file`, `content` or `contentBase64` can be defined.
     */
    content?: pulumi.Input<string>;
    /**
     * The base64-encoded content of the file to upload. Only one of `file`, `content` or `contentBase64` can be defined.
     *
     * > **Note:** Only one of `file`, `content` or `contentBase64` can be defined.
     */
    contentBase64?: pulumi.Input<string>;
    /**
     * The standard MIME type of the object's content (e.g., 'application/json', 'text/plain'). This specifies how the object should be interpreted by clients. See RFC 9110: https://www.rfc-editor.org/rfc/rfc9110.html#name-content-type
     */
    contentType?: pulumi.Input<string>;
    /**
     * The name of the file to upload, defaults to an empty file.
     */
    file?: pulumi.Input<string>;
    /**
     * Hash of the file, used to trigger the upload on file change.
     */
    hash?: pulumi.Input<string>;
    /**
     * The path to the object.
     */
    key?: pulumi.Input<string>;
    /**
     * Map of metadata used for the object (keys must be lowercase).
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The projectId you want to attach the resource to
     */
    projectId?: pulumi.Input<string>;
    /**
     * The Scaleway region the bucket resides in.
     */
    region?: pulumi.Input<string>;
    /**
     * Customer's encryption keys to encrypt data (SSE-C)
     */
    sseCustomerKey?: pulumi.Input<string>;
    /**
     * Specifies the Scaleway [storage class](https://www.scaleway.com/en/docs/object-storage/concepts/#storage-class) (`STANDARD`, `GLACIER`, or `ONEZONE_IA`) used to store the object.
     */
    storageClass?: pulumi.Input<string>;
    /**
     * Map of tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Visibility of the object, `public-read` or `private`.
     */
    visibility?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Item resource.
 */
export interface ItemArgs {
    /**
     * The bucket's name or regional ID.
     */
    bucket: pulumi.Input<string>;
    /**
     * The content of the file to upload. Only one of `file`, `content` or `contentBase64` can be defined.
     */
    content?: pulumi.Input<string>;
    /**
     * The base64-encoded content of the file to upload. Only one of `file`, `content` or `contentBase64` can be defined.
     *
     * > **Note:** Only one of `file`, `content` or `contentBase64` can be defined.
     */
    contentBase64?: pulumi.Input<string>;
    /**
     * The standard MIME type of the object's content (e.g., 'application/json', 'text/plain'). This specifies how the object should be interpreted by clients. See RFC 9110: https://www.rfc-editor.org/rfc/rfc9110.html#name-content-type
     */
    contentType?: pulumi.Input<string>;
    /**
     * The name of the file to upload, defaults to an empty file.
     */
    file?: pulumi.Input<string>;
    /**
     * Hash of the file, used to trigger the upload on file change.
     */
    hash?: pulumi.Input<string>;
    /**
     * The path to the object.
     */
    key: pulumi.Input<string>;
    /**
     * Map of metadata used for the object (keys must be lowercase).
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The projectId you want to attach the resource to
     */
    projectId?: pulumi.Input<string>;
    /**
     * The Scaleway region the bucket resides in.
     */
    region?: pulumi.Input<string>;
    /**
     * Customer's encryption keys to encrypt data (SSE-C)
     */
    sseCustomerKey?: pulumi.Input<string>;
    /**
     * Specifies the Scaleway [storage class](https://www.scaleway.com/en/docs/object-storage/concepts/#storage-class) (`STANDARD`, `GLACIER`, or `ONEZONE_IA`) used to store the object.
     */
    storageClass?: pulumi.Input<string>;
    /**
     * Map of tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Visibility of the object, `public-read` or `private`.
     */
    visibility?: pulumi.Input<string>;
}
