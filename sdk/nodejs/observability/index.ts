// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AlertManagerArgs, AlertManagerState } from "./alertManager";
export type AlertManager = import("./alertManager").AlertManager;
export const AlertManager: typeof import("./alertManager").AlertManager = null as any;
utilities.lazyLoad(exports, ["AlertManager"], () => require("./alertManager"));

export { CockpitArgs, CockpitState } from "./cockpit";
export type Cockpit = import("./cockpit").Cockpit;
export const Cockpit: typeof import("./cockpit").Cockpit = null as any;
utilities.lazyLoad(exports, ["Cockpit"], () => require("./cockpit"));

export { GetInstanceArgs, GetInstanceResult, GetInstanceOutputArgs } from "./getInstance";
export const getInstance: typeof import("./getInstance").getInstance = null as any;
export const getInstanceOutput: typeof import("./getInstance").getInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getInstance","getInstanceOutput"], () => require("./getInstance"));

export { GetSourceArgs, GetSourceResult, GetSourceOutputArgs } from "./getSource";
export const getSource: typeof import("./getSource").getSource = null as any;
export const getSourceOutput: typeof import("./getSource").getSourceOutput = null as any;
utilities.lazyLoad(exports, ["getSource","getSourceOutput"], () => require("./getSource"));

export { GetSourcesArgs, GetSourcesResult, GetSourcesOutputArgs } from "./getSources";
export const getSources: typeof import("./getSources").getSources = null as any;
export const getSourcesOutput: typeof import("./getSources").getSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getSources","getSourcesOutput"], () => require("./getSources"));

export { GrafanaUserArgs, GrafanaUserState } from "./grafanaUser";
export type GrafanaUser = import("./grafanaUser").GrafanaUser;
export const GrafanaUser: typeof import("./grafanaUser").GrafanaUser = null as any;
utilities.lazyLoad(exports, ["GrafanaUser"], () => require("./grafanaUser"));

export { SourceArgs, SourceState } from "./source";
export type Source = import("./source").Source;
export const Source: typeof import("./source").Source = null as any;
utilities.lazyLoad(exports, ["Source"], () => require("./source"));

export { TokenArgs, TokenState } from "./token";
export type Token = import("./token").Token;
export const Token: typeof import("./token").Token = null as any;
utilities.lazyLoad(exports, ["Token"], () => require("./token"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "scaleway:observability/alertManager:AlertManager":
                return new AlertManager(name, <any>undefined, { urn })
            case "scaleway:observability/cockpit:Cockpit":
                return new Cockpit(name, <any>undefined, { urn })
            case "scaleway:observability/grafanaUser:GrafanaUser":
                return new GrafanaUser(name, <any>undefined, { urn })
            case "scaleway:observability/source:Source":
                return new Source(name, <any>undefined, { urn })
            case "scaleway:observability/token:Token":
                return new Token(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("scaleway", "observability/alertManager", _module)
pulumi.runtime.registerResourceModule("scaleway", "observability/cockpit", _module)
pulumi.runtime.registerResourceModule("scaleway", "observability/grafanaUser", _module)
pulumi.runtime.registerResourceModule("scaleway", "observability/source", _module)
pulumi.runtime.registerResourceModule("scaleway", "observability/token", _module)
