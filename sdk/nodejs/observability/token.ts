// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * The `scaleway.observability.Token` resource allows you to create and manage your Cockpit [tokens](https://www.scaleway.com/en/docs/observability/cockpit/concepts/#tokens).
 *
 * Refer to Cockpit's [product documentation](https://www.scaleway.com/en/docs/observability/cockpit/concepts/) and [API documentation](https://www.scaleway.com/en/developers/api/cockpit/regional-api) for more information.
 *
 * ## Example Usage
 *
 * ### Use a Cockpit token
 *
 * The following commands allow you to:
 *
 * - create a Scaleway Project named `my-project`
 * - create a Cockpit token named `my-awesome-token` inside the Project
 * - assign `read` permissions to the token for metrics and logs
 * - disable `write` permissions for metrics and logs
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const project = new scaleway.account.Project("project", {name: "my-project"});
 * const main = new scaleway.observability.Token("main", {
 *     projectId: project.id,
 *     name: "my-awesome-token",
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const project = new scaleway.account.Project("project", {name: "my-project"});
 * // Create a token that can read metrics and logs but not write
 * const main = new scaleway.observability.Token("main", {
 *     projectId: project.id,
 *     name: "my-awesome-token",
 *     scopes: {
 *         queryMetrics: true,
 *         writeMetrics: false,
 *         queryLogs: true,
 *         writeLogs: false,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * This section explains how to import a Cockpit token using the `{region}/{id}` format.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:observability/token:Token main fr-par/11111111-1111-1111-1111-111111111111
 * ```
 */
export class Token extends pulumi.CustomResource {
    /**
     * Get an existing Token resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TokenState, opts?: pulumi.CustomResourceOptions): Token {
        return new Token(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:observability/token:Token';

    /**
     * Returns true if the given object is an instance of Token.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Token {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Token.__pulumiType;
    }

    /**
     * The date and time of the creation of the Cockpit Token (Format ISO 8601)
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The name of the token.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * ) The ID of the Project the Cockpit is associated with.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * ) The region where the Cockpit token is located.
     */
    declare public readonly region: pulumi.Output<string | undefined>;
    /**
     * Scopes allowed, each with default values:
     */
    declare public readonly scopes: pulumi.Output<outputs.observability.TokenScopes>;
    /**
     * The secret key of the token.
     */
    declare public /*out*/ readonly secretKey: pulumi.Output<string>;
    /**
     * The date and time of the last update of the Cockpit Token (Format ISO 8601)
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a Token resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TokenArgs | TokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TokenState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["name"] = state?.name;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["region"] = state?.region;
            resourceInputs["scopes"] = state?.scopes;
            resourceInputs["secretKey"] = state?.secretKey;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as TokenArgs | undefined;
            resourceInputs["name"] = args?.name;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["region"] = args?.region;
            resourceInputs["scopes"] = args?.scopes;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["secretKey"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "scaleway:index/cockpitToken:CockpitToken" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        const secretOpts = { additionalSecretOutputs: ["secretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Token.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Token resources.
 */
export interface TokenState {
    /**
     * The date and time of the creation of the Cockpit Token (Format ISO 8601)
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The name of the token.
     */
    name?: pulumi.Input<string>;
    /**
     * ) The ID of the Project the Cockpit is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * ) The region where the Cockpit token is located.
     */
    region?: pulumi.Input<string>;
    /**
     * Scopes allowed, each with default values:
     */
    scopes?: pulumi.Input<inputs.observability.TokenScopes>;
    /**
     * The secret key of the token.
     */
    secretKey?: pulumi.Input<string>;
    /**
     * The date and time of the last update of the Cockpit Token (Format ISO 8601)
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Token resource.
 */
export interface TokenArgs {
    /**
     * The name of the token.
     */
    name?: pulumi.Input<string>;
    /**
     * ) The ID of the Project the Cockpit is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * ) The region where the Cockpit token is located.
     */
    region?: pulumi.Input<string>;
    /**
     * Scopes allowed, each with default values:
     */
    scopes?: pulumi.Input<inputs.observability.TokenScopes>;
}
