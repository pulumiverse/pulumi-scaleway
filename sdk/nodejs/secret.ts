// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creates and manages Scaleway Secrets.
 * For more information, see [the documentation](https://developers.scaleway.com/en/products/secret_manager/api/v1alpha1/).
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.Secret("main", {
 *     description: "barr",
 *     tags: [
 *         "foo",
 *         "terraform",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * The Secret can be imported using the `{region}/{id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:index/secret:Secret main fr-par/11111111-1111-1111-1111-111111111111
 * ```
 */
export class Secret extends pulumi.CustomResource {
    /**
     * Get an existing Secret resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretState, opts?: pulumi.CustomResourceOptions): Secret {
        return new Secret(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/secret:Secret';

    /**
     * Returns true if the given object is an instance of Secret.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Secret {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Secret.__pulumiType;
    }

    /**
     * Date and time of secret's creation (RFC 3339 format).
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Description of the secret (e.g. `my-new-description`).
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Name of the secret (e.g. `my-secret`).
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Path of the secret, defaults to `/`.
     */
    public readonly path!: pulumi.Output<string | undefined>;
    /**
     * The project ID containing is the secret.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * `region`) The region
     * in which the resource exists.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The status of the Secret.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Tags of the secret (e.g. `["tag", "secret"]`).
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Date and time of secret's last update (RFC 3339 format).
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The number of versions for this Secret.
     */
    public /*out*/ readonly versionCount!: pulumi.Output<number>;

    /**
     * Create a Secret resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SecretArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretArgs | SecretState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["versionCount"] = state ? state.versionCount : undefined;
        } else {
            const args = argsOrState as SecretArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["versionCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Secret.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Secret resources.
 */
export interface SecretState {
    /**
     * Date and time of secret's creation (RFC 3339 format).
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Description of the secret (e.g. `my-new-description`).
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the secret (e.g. `my-secret`).
     */
    name?: pulumi.Input<string>;
    /**
     * Path of the secret, defaults to `/`.
     */
    path?: pulumi.Input<string>;
    /**
     * The project ID containing is the secret.
     */
    projectId?: pulumi.Input<string>;
    /**
     * `region`) The region
     * in which the resource exists.
     */
    region?: pulumi.Input<string>;
    /**
     * The status of the Secret.
     */
    status?: pulumi.Input<string>;
    /**
     * Tags of the secret (e.g. `["tag", "secret"]`).
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Date and time of secret's last update (RFC 3339 format).
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The number of versions for this Secret.
     */
    versionCount?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Secret resource.
 */
export interface SecretArgs {
    /**
     * Description of the secret (e.g. `my-new-description`).
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the secret (e.g. `my-secret`).
     */
    name?: pulumi.Input<string>;
    /**
     * Path of the secret, defaults to `/`.
     */
    path?: pulumi.Input<string>;
    /**
     * The project ID containing is the secret.
     */
    projectId?: pulumi.Input<string>;
    /**
     * `region`) The region
     * in which the resource exists.
     */
    region?: pulumi.Input<string>;
    /**
     * Tags of the secret (e.g. `["tag", "secret"]`).
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
