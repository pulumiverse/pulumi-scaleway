// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creates and manages Scaleway Secret Versions.
 * For more information, see [the documentation](https://developers.scaleway.com/en/products/secret_manager/api/v1alpha1/#secret-versions-079501).
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.Secret("main", {
 *     description: "barr",
 *     tags: [
 *         "foo",
 *         "terraform",
 *     ],
 * });
 * const v1 = new scaleway.SecretVersion("v1", {
 *     description: "version1",
 *     secretId: main.id,
 *     data: "my_new_secret",
 * });
 * ```
 *
 * ## Import
 *
 * The Secret Version can be imported using the `{region}/{id}/{revision}`, e.g.
 *
 * ~> **Important:** Be aware if you import with revision `latest` you will overwrite the version you used before.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:index/secretVersion:SecretVersion main fr-par/11111111-1111-1111-1111-111111111111/2
 * ```
 */
export class SecretVersion extends pulumi.CustomResource {
    /**
     * Get an existing SecretVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretVersionState, opts?: pulumi.CustomResourceOptions): SecretVersion {
        return new SecretVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/secretVersion:SecretVersion';

    /**
     * Returns true if the given object is an instance of SecretVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretVersion.__pulumiType;
    }

    /**
     * Date and time of secret version's creation (RFC 3339 format).
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The data payload of the secret version. Must be no larger than 64KiB. (e.g. `my-secret-version-payload`). more on the data section
     */
    public readonly data!: pulumi.Output<string>;
    /**
     * Description of the secret version (e.g. `my-new-description`).
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * `region`) The region
     * in which the resource exists.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The revision for this Secret Version.
     */
    public /*out*/ readonly revision!: pulumi.Output<string>;
    /**
     * The Secret ID associated wit the secret version.
     */
    public readonly secretId!: pulumi.Output<string>;
    /**
     * The status of the Secret Version.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Date and time of secret version's last update (RFC 3339 format).
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a SecretVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretVersionArgs | SecretVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretVersionState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["revision"] = state ? state.revision : undefined;
            resourceInputs["secretId"] = state ? state.secretId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as SecretVersionArgs | undefined;
            if ((!args || args.data === undefined) && !opts.urn) {
                throw new Error("Missing required property 'data'");
            }
            if ((!args || args.secretId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretId'");
            }
            resourceInputs["data"] = args?.data ? pulumi.secret(args.data) : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["secretId"] = args ? args.secretId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["revision"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["data"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SecretVersion.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretVersion resources.
 */
export interface SecretVersionState {
    /**
     * Date and time of secret version's creation (RFC 3339 format).
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The data payload of the secret version. Must be no larger than 64KiB. (e.g. `my-secret-version-payload`). more on the data section
     */
    data?: pulumi.Input<string>;
    /**
     * Description of the secret version (e.g. `my-new-description`).
     */
    description?: pulumi.Input<string>;
    /**
     * `region`) The region
     * in which the resource exists.
     */
    region?: pulumi.Input<string>;
    /**
     * The revision for this Secret Version.
     */
    revision?: pulumi.Input<string>;
    /**
     * The Secret ID associated wit the secret version.
     */
    secretId?: pulumi.Input<string>;
    /**
     * The status of the Secret Version.
     */
    status?: pulumi.Input<string>;
    /**
     * Date and time of secret version's last update (RFC 3339 format).
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretVersion resource.
 */
export interface SecretVersionArgs {
    /**
     * The data payload of the secret version. Must be no larger than 64KiB. (e.g. `my-secret-version-payload`). more on the data section
     */
    data: pulumi.Input<string>;
    /**
     * Description of the secret version (e.g. `my-new-description`).
     */
    description?: pulumi.Input<string>;
    /**
     * `region`) The region
     * in which the resource exists.
     */
    region?: pulumi.Input<string>;
    /**
     * The Secret ID associated wit the secret version.
     */
    secretId: pulumi.Input<string>;
}
