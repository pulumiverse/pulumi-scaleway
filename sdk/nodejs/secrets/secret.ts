// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * This section explains how to import a secret using the `{region}/{id}` format.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:secrets/secret:Secret main fr-par/11111111-1111-1111-1111-111111111111
 * ```
 */
export class Secret extends pulumi.CustomResource {
    /**
     * Get an existing Secret resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretState, opts?: pulumi.CustomResourceOptions): Secret {
        return new Secret(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:secrets/secret:Secret';

    /**
     * Returns true if the given object is an instance of Secret.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Secret {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Secret.__pulumiType;
    }

    /**
     * Date and time of the secret's creation (in RFC 3339 format).
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Description of the secret (e.g. `my-new-description`).
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Ephemeral policy of the secret. Policy that defines whether/when a secret's versions expire. By default, the policy is applied to all the secret's versions.
     */
    declare public readonly ephemeralPolicies: pulumi.Output<outputs.secrets.SecretEphemeralPolicy[] | undefined>;
    /**
     * Name of the secret (e.g. `my-secret`).
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Path of the secret, defaults to `/`.
     */
    declare public readonly path: pulumi.Output<string | undefined>;
    /**
     * The project ID containing is the secret.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * True if secret protection is enabled on a given secret. A protected secret cannot be deleted.
     */
    declare public readonly protected: pulumi.Output<boolean | undefined>;
    /**
     * `region`) The region
     * in which the resource exists.
     */
    declare public readonly region: pulumi.Output<string | undefined>;
    /**
     * The status of the secret.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Tags of the secret (e.g. `["tag", "secret"]`).
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * Type of the secret. If not specified, the type is Opaque. Available values can be found in [SDK Constants](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/secret/v1beta1#pkg-constants).
     */
    declare public readonly type: pulumi.Output<string | undefined>;
    /**
     * Date and time of the secret's last update (in RFC 3339 format).
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * The amount of secret versions.
     */
    declare public /*out*/ readonly versionCount: pulumi.Output<number>;
    /**
     * List of the versions of the secret
     */
    declare public /*out*/ readonly versions: pulumi.Output<outputs.secrets.SecretVersion[]>;

    /**
     * Create a Secret resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SecretArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretArgs | SecretState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["ephemeralPolicies"] = state?.ephemeralPolicies;
            resourceInputs["name"] = state?.name;
            resourceInputs["path"] = state?.path;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["protected"] = state?.protected;
            resourceInputs["region"] = state?.region;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["type"] = state?.type;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["versionCount"] = state?.versionCount;
            resourceInputs["versions"] = state?.versions;
        } else {
            const args = argsOrState as SecretArgs | undefined;
            resourceInputs["description"] = args?.description;
            resourceInputs["ephemeralPolicies"] = args?.ephemeralPolicies;
            resourceInputs["name"] = args?.name;
            resourceInputs["path"] = args?.path;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["protected"] = args?.protected;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["type"] = args?.type;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["versionCount"] = undefined /*out*/;
            resourceInputs["versions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "scaleway:index/secret:Secret" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Secret.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Secret resources.
 */
export interface SecretState {
    /**
     * Date and time of the secret's creation (in RFC 3339 format).
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Description of the secret (e.g. `my-new-description`).
     */
    description?: pulumi.Input<string>;
    /**
     * Ephemeral policy of the secret. Policy that defines whether/when a secret's versions expire. By default, the policy is applied to all the secret's versions.
     */
    ephemeralPolicies?: pulumi.Input<pulumi.Input<inputs.secrets.SecretEphemeralPolicy>[]>;
    /**
     * Name of the secret (e.g. `my-secret`).
     */
    name?: pulumi.Input<string>;
    /**
     * Path of the secret, defaults to `/`.
     */
    path?: pulumi.Input<string>;
    /**
     * The project ID containing is the secret.
     */
    projectId?: pulumi.Input<string>;
    /**
     * True if secret protection is enabled on a given secret. A protected secret cannot be deleted.
     */
    protected?: pulumi.Input<boolean>;
    /**
     * `region`) The region
     * in which the resource exists.
     */
    region?: pulumi.Input<string>;
    /**
     * The status of the secret.
     */
    status?: pulumi.Input<string>;
    /**
     * Tags of the secret (e.g. `["tag", "secret"]`).
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type of the secret. If not specified, the type is Opaque. Available values can be found in [SDK Constants](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/secret/v1beta1#pkg-constants).
     */
    type?: pulumi.Input<string>;
    /**
     * Date and time of the secret's last update (in RFC 3339 format).
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The amount of secret versions.
     */
    versionCount?: pulumi.Input<number>;
    /**
     * List of the versions of the secret
     */
    versions?: pulumi.Input<pulumi.Input<inputs.secrets.SecretVersion>[]>;
}

/**
 * The set of arguments for constructing a Secret resource.
 */
export interface SecretArgs {
    /**
     * Description of the secret (e.g. `my-new-description`).
     */
    description?: pulumi.Input<string>;
    /**
     * Ephemeral policy of the secret. Policy that defines whether/when a secret's versions expire. By default, the policy is applied to all the secret's versions.
     */
    ephemeralPolicies?: pulumi.Input<pulumi.Input<inputs.secrets.SecretEphemeralPolicy>[]>;
    /**
     * Name of the secret (e.g. `my-secret`).
     */
    name?: pulumi.Input<string>;
    /**
     * Path of the secret, defaults to `/`.
     */
    path?: pulumi.Input<string>;
    /**
     * The project ID containing is the secret.
     */
    projectId?: pulumi.Input<string>;
    /**
     * True if secret protection is enabled on a given secret. A protected secret cannot be deleted.
     */
    protected?: pulumi.Input<boolean>;
    /**
     * `region`) The region
     * in which the resource exists.
     */
    region?: pulumi.Input<string>;
    /**
     * Tags of the secret (e.g. `["tag", "secret"]`).
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type of the secret. If not specified, the type is Opaque. Available values can be found in [SDK Constants](https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go@master/api/secret/v1beta1#pkg-constants).
     */
    type?: pulumi.Input<string>;
}
