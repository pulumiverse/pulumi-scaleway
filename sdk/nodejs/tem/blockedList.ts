// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates and manages blocklisted email addresses for a Scaleway Transactional Email Domain.
 * For more information refer to the [API documentation](https://www.scaleway.com/en/developers/api/transactional-email/#post-transactional-email-v1alpha1-regions-region-blocklists).
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const test = new scaleway.tem.BlockedList("test", {
 *     domainId: "fr-par/12345678-1234-1234-1234-123456789abc",
 *     email: "spam@example.com",
 *     type: "mailbox_full",
 *     reason: "Spam detected",
 *     region: "fr-par",
 * });
 * ```
 *
 * ## Import
 *
 * Blocklists can be imported using the `{region}/{id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:tem/blockedList:BlockedList test fr-par/11111111-1111-1111-1111-111111111111
 * ```
 */
export class BlockedList extends pulumi.CustomResource {
    /**
     * Get an existing BlockedList resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlockedListState, opts?: pulumi.CustomResourceOptions): BlockedList {
        return new BlockedList(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:tem/blockedList:BlockedList';

    /**
     * Returns true if the given object is an instance of BlockedList.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BlockedList {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BlockedList.__pulumiType;
    }

    /**
     * The ID of the domain affected by the blocklist. Must be in the format `{region}/{domain_id}`.
     */
    public readonly domainId!: pulumi.Output<string>;
    /**
     * The email address to block.
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * The ID of the project this blocklist belongs to. Defaults to the provider's project ID.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Reason for blocking the email address.
     */
    public readonly reason!: pulumi.Output<string | undefined>;
    /**
     * The region in which the blocklist is created. Defaults to the provider's region.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Type of the blocklist. Possible values are:
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a BlockedList resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BlockedListArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BlockedListArgs | BlockedListState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BlockedListState | undefined;
            resourceInputs["domainId"] = state ? state.domainId : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["reason"] = state ? state.reason : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as BlockedListArgs | undefined;
            if ((!args || args.domainId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainId'");
            }
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["domainId"] = args ? args.domainId : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["reason"] = args ? args.reason : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BlockedList.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BlockedList resources.
 */
export interface BlockedListState {
    /**
     * The ID of the domain affected by the blocklist. Must be in the format `{region}/{domain_id}`.
     */
    domainId?: pulumi.Input<string>;
    /**
     * The email address to block.
     */
    email?: pulumi.Input<string>;
    /**
     * The ID of the project this blocklist belongs to. Defaults to the provider's project ID.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Reason for blocking the email address.
     */
    reason?: pulumi.Input<string>;
    /**
     * The region in which the blocklist is created. Defaults to the provider's region.
     */
    region?: pulumi.Input<string>;
    /**
     * Type of the blocklist. Possible values are:
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BlockedList resource.
 */
export interface BlockedListArgs {
    /**
     * The ID of the domain affected by the blocklist. Must be in the format `{region}/{domain_id}`.
     */
    domainId: pulumi.Input<string>;
    /**
     * The email address to block.
     */
    email: pulumi.Input<string>;
    /**
     * The ID of the project this blocklist belongs to. Defaults to the provider's project ID.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Reason for blocking the email address.
     */
    reason?: pulumi.Input<string>;
    /**
     * The region in which the blocklist is created. Defaults to the provider's region.
     */
    region?: pulumi.Input<string>;
    /**
     * Type of the blocklist. Possible values are:
     */
    type: pulumi.Input<string>;
}
