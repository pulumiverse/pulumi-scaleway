// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Creates and manages Scaleway Transactional Email Domains.
 * For more information refer to the [API documentation](https://www.scaleway.com/en/developers/api/transactional-email).
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.tem.Domain("main", {
 *     acceptTos: true,
 *     name: "example.com",
 * });
 * ```
 *
 * ### Add the required records to your DNS zone
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const config = new pulumi.Config();
 * const domainName = config.require("domainName");
 * const main = new scaleway.tem.Domain("main", {
 *     name: domainName,
 *     acceptTos: true,
 * });
 * const spf = new scaleway.domain.Record("spf", {
 *     dnsZone: domainName,
 *     type: "TXT",
 *     data: main.spfValue,
 * });
 * const dkim = new scaleway.domain.Record("dkim", {
 *     dnsZone: domainName,
 *     name: main.dkimName,
 *     type: "TXT",
 *     data: main.dkimConfig,
 * });
 * const mx = new scaleway.domain.Record("mx", {
 *     dnsZone: domainName,
 *     type: "MX",
 *     data: main.mxConfig,
 * });
 * const dmarc = new scaleway.domain.Record("dmarc", {
 *     dnsZone: domainName,
 *     name: main.dmarcName,
 *     type: "TXT",
 *     data: main.dmarcConfig,
 * });
 * ```
 *
 * ### Automatically Configure DNS Settings for Your Domain
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const config = new pulumi.Config();
 * const domainName = config.require("domainName");
 * const main = new scaleway.tem.Domain("main", {
 *     name: domainName,
 *     acceptTos: true,
 *     autoconfig: true,
 * });
 * ```
 *
 * ## Import
 *
 * Domains can be imported using the `{region}/{id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:tem/domain:Domain main fr-par/11111111-1111-1111-1111-111111111111
 * ```
 */
export class Domain extends pulumi.CustomResource {
    /**
     * Get an existing Domain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainState, opts?: pulumi.CustomResourceOptions): Domain {
        return new Domain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:tem/domain:Domain';

    /**
     * Returns true if the given object is an instance of Domain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Domain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Domain.__pulumiType;
    }

    /**
     * Acceptation of the [Term of Service](https://tem.s3.fr-par.scw.cloud/antispam_policy.pdf).
     * > **Important:** This attribute must be set to `true`.
     */
    declare public readonly acceptTos: pulumi.Output<boolean>;
    /**
     * Automatically configures DNS settings for the domain, simplifying the setup process by applying predefined configurations.
     */
    declare public readonly autoconfig: pulumi.Output<boolean | undefined>;
    /**
     * The date and time of the Transaction Email Domain's creation (RFC 3339 format).
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The DKIM public key, as should be recorded in the DNS zone.
     */
    declare public /*out*/ readonly dkimConfig: pulumi.Output<string>;
    /**
     * DKIM name for the domain, as should be recorded in the DNS zone.
     */
    declare public /*out*/ readonly dkimName: pulumi.Output<string>;
    /**
     * DMARC record for the domain, as should be recorded in the DNS zone.
     */
    declare public /*out*/ readonly dmarcConfig: pulumi.Output<string>;
    /**
     * DMARC name for the domain, as should be recorded in the DNS zone.
     */
    declare public /*out*/ readonly dmarcName: pulumi.Output<string>;
    /**
     * (Deprecated) The error message if the last check failed.
     *
     * @deprecated last_error is deprecated
     */
    declare public /*out*/ readonly lastError: pulumi.Output<string>;
    /**
     * The date and time the domain was last found to be valid (RFC 3339 format).
     */
    declare public /*out*/ readonly lastValidAt: pulumi.Output<string>;
    /**
     * The Scaleway's blackhole MX server to use if you do not have one.
     */
    declare public /*out*/ readonly mxBlackhole: pulumi.Output<string>;
    /**
     * MX record configuration for the domain blackhole.
     */
    declare public /*out*/ readonly mxConfig: pulumi.Output<string>;
    /**
     * The domain name, must not be used in another Transactional Email Domain.
     * > **Important:** Updates to `name` will recreate the domain.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The date and time of the next scheduled check (RFC 3339 format).
     */
    declare public /*out*/ readonly nextCheckAt: pulumi.Output<string>;
    /**
     * `projectId`) The ID of the project the domain is associated with.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * `region`). The region in which the domain should be created.
     * > **Important:** Currently, only fr-par is supported. Specifying any other region will cause an error.
     */
    declare public readonly region: pulumi.Output<string | undefined>;
    /**
     * The domain's reputation.
     */
    declare public /*out*/ readonly reputations: pulumi.Output<outputs.tem.DomainReputation[]>;
    /**
     * The date and time of the revocation of the domain (RFC 3339 format).
     */
    declare public /*out*/ readonly revokedAt: pulumi.Output<string>;
    /**
     * The SMTP host to use to send emails.
     */
    declare public /*out*/ readonly smtpHost: pulumi.Output<string>;
    /**
     * The SMTP port to use to send emails over TLS.
     */
    declare public /*out*/ readonly smtpPort: pulumi.Output<number>;
    /**
     * The SMTP port to use to send emails over TLS.
     */
    declare public /*out*/ readonly smtpPortAlternative: pulumi.Output<number>;
    /**
     * The SMTP port to use to send emails.
     */
    declare public /*out*/ readonly smtpPortUnsecure: pulumi.Output<number>;
    /**
     * SMTPS auth user refers to the identifier for a user authorized to send emails via SMTPS, ensuring secure email transmission.
     */
    declare public /*out*/ readonly smtpsAuthUser: pulumi.Output<string>;
    /**
     * The SMTPS port to use to send emails over TLS Wrapper.
     */
    declare public /*out*/ readonly smtpsPort: pulumi.Output<number>;
    /**
     * The SMTPS port to use to send emails over TLS Wrapper.
     */
    declare public /*out*/ readonly smtpsPortAlternative: pulumi.Output<number>;
    /**
     * The snippet of the SPF record that should be registered in the DNS zone.
     */
    declare public /*out*/ readonly spfConfig: pulumi.Output<string>;
    /**
     * Complete SPF record value for the domain, as should be recorded in the DNS zone.
     */
    declare public /*out*/ readonly spfValue: pulumi.Output<string>;
    /**
     * The status of the domain's reputation.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;

    /**
     * Create a Domain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainArgs | DomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainState | undefined;
            resourceInputs["acceptTos"] = state?.acceptTos;
            resourceInputs["autoconfig"] = state?.autoconfig;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["dkimConfig"] = state?.dkimConfig;
            resourceInputs["dkimName"] = state?.dkimName;
            resourceInputs["dmarcConfig"] = state?.dmarcConfig;
            resourceInputs["dmarcName"] = state?.dmarcName;
            resourceInputs["lastError"] = state?.lastError;
            resourceInputs["lastValidAt"] = state?.lastValidAt;
            resourceInputs["mxBlackhole"] = state?.mxBlackhole;
            resourceInputs["mxConfig"] = state?.mxConfig;
            resourceInputs["name"] = state?.name;
            resourceInputs["nextCheckAt"] = state?.nextCheckAt;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["region"] = state?.region;
            resourceInputs["reputations"] = state?.reputations;
            resourceInputs["revokedAt"] = state?.revokedAt;
            resourceInputs["smtpHost"] = state?.smtpHost;
            resourceInputs["smtpPort"] = state?.smtpPort;
            resourceInputs["smtpPortAlternative"] = state?.smtpPortAlternative;
            resourceInputs["smtpPortUnsecure"] = state?.smtpPortUnsecure;
            resourceInputs["smtpsAuthUser"] = state?.smtpsAuthUser;
            resourceInputs["smtpsPort"] = state?.smtpsPort;
            resourceInputs["smtpsPortAlternative"] = state?.smtpsPortAlternative;
            resourceInputs["spfConfig"] = state?.spfConfig;
            resourceInputs["spfValue"] = state?.spfValue;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as DomainArgs | undefined;
            if (args?.acceptTos === undefined && !opts.urn) {
                throw new Error("Missing required property 'acceptTos'");
            }
            resourceInputs["acceptTos"] = args?.acceptTos;
            resourceInputs["autoconfig"] = args?.autoconfig;
            resourceInputs["name"] = args?.name;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["region"] = args?.region;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["dkimConfig"] = undefined /*out*/;
            resourceInputs["dkimName"] = undefined /*out*/;
            resourceInputs["dmarcConfig"] = undefined /*out*/;
            resourceInputs["dmarcName"] = undefined /*out*/;
            resourceInputs["lastError"] = undefined /*out*/;
            resourceInputs["lastValidAt"] = undefined /*out*/;
            resourceInputs["mxBlackhole"] = undefined /*out*/;
            resourceInputs["mxConfig"] = undefined /*out*/;
            resourceInputs["nextCheckAt"] = undefined /*out*/;
            resourceInputs["reputations"] = undefined /*out*/;
            resourceInputs["revokedAt"] = undefined /*out*/;
            resourceInputs["smtpHost"] = undefined /*out*/;
            resourceInputs["smtpPort"] = undefined /*out*/;
            resourceInputs["smtpPortAlternative"] = undefined /*out*/;
            resourceInputs["smtpPortUnsecure"] = undefined /*out*/;
            resourceInputs["smtpsAuthUser"] = undefined /*out*/;
            resourceInputs["smtpsPort"] = undefined /*out*/;
            resourceInputs["smtpsPortAlternative"] = undefined /*out*/;
            resourceInputs["spfConfig"] = undefined /*out*/;
            resourceInputs["spfValue"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "scaleway:index/temDomain:TemDomain" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Domain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Domain resources.
 */
export interface DomainState {
    /**
     * Acceptation of the [Term of Service](https://tem.s3.fr-par.scw.cloud/antispam_policy.pdf).
     * > **Important:** This attribute must be set to `true`.
     */
    acceptTos?: pulumi.Input<boolean>;
    /**
     * Automatically configures DNS settings for the domain, simplifying the setup process by applying predefined configurations.
     */
    autoconfig?: pulumi.Input<boolean>;
    /**
     * The date and time of the Transaction Email Domain's creation (RFC 3339 format).
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The DKIM public key, as should be recorded in the DNS zone.
     */
    dkimConfig?: pulumi.Input<string>;
    /**
     * DKIM name for the domain, as should be recorded in the DNS zone.
     */
    dkimName?: pulumi.Input<string>;
    /**
     * DMARC record for the domain, as should be recorded in the DNS zone.
     */
    dmarcConfig?: pulumi.Input<string>;
    /**
     * DMARC name for the domain, as should be recorded in the DNS zone.
     */
    dmarcName?: pulumi.Input<string>;
    /**
     * (Deprecated) The error message if the last check failed.
     *
     * @deprecated last_error is deprecated
     */
    lastError?: pulumi.Input<string>;
    /**
     * The date and time the domain was last found to be valid (RFC 3339 format).
     */
    lastValidAt?: pulumi.Input<string>;
    /**
     * The Scaleway's blackhole MX server to use if you do not have one.
     */
    mxBlackhole?: pulumi.Input<string>;
    /**
     * MX record configuration for the domain blackhole.
     */
    mxConfig?: pulumi.Input<string>;
    /**
     * The domain name, must not be used in another Transactional Email Domain.
     * > **Important:** Updates to `name` will recreate the domain.
     */
    name?: pulumi.Input<string>;
    /**
     * The date and time of the next scheduled check (RFC 3339 format).
     */
    nextCheckAt?: pulumi.Input<string>;
    /**
     * `projectId`) The ID of the project the domain is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * `region`). The region in which the domain should be created.
     * > **Important:** Currently, only fr-par is supported. Specifying any other region will cause an error.
     */
    region?: pulumi.Input<string>;
    /**
     * The domain's reputation.
     */
    reputations?: pulumi.Input<pulumi.Input<inputs.tem.DomainReputation>[]>;
    /**
     * The date and time of the revocation of the domain (RFC 3339 format).
     */
    revokedAt?: pulumi.Input<string>;
    /**
     * The SMTP host to use to send emails.
     */
    smtpHost?: pulumi.Input<string>;
    /**
     * The SMTP port to use to send emails over TLS.
     */
    smtpPort?: pulumi.Input<number>;
    /**
     * The SMTP port to use to send emails over TLS.
     */
    smtpPortAlternative?: pulumi.Input<number>;
    /**
     * The SMTP port to use to send emails.
     */
    smtpPortUnsecure?: pulumi.Input<number>;
    /**
     * SMTPS auth user refers to the identifier for a user authorized to send emails via SMTPS, ensuring secure email transmission.
     */
    smtpsAuthUser?: pulumi.Input<string>;
    /**
     * The SMTPS port to use to send emails over TLS Wrapper.
     */
    smtpsPort?: pulumi.Input<number>;
    /**
     * The SMTPS port to use to send emails over TLS Wrapper.
     */
    smtpsPortAlternative?: pulumi.Input<number>;
    /**
     * The snippet of the SPF record that should be registered in the DNS zone.
     */
    spfConfig?: pulumi.Input<string>;
    /**
     * Complete SPF record value for the domain, as should be recorded in the DNS zone.
     */
    spfValue?: pulumi.Input<string>;
    /**
     * The status of the domain's reputation.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Domain resource.
 */
export interface DomainArgs {
    /**
     * Acceptation of the [Term of Service](https://tem.s3.fr-par.scw.cloud/antispam_policy.pdf).
     * > **Important:** This attribute must be set to `true`.
     */
    acceptTos: pulumi.Input<boolean>;
    /**
     * Automatically configures DNS settings for the domain, simplifying the setup process by applying predefined configurations.
     */
    autoconfig?: pulumi.Input<boolean>;
    /**
     * The domain name, must not be used in another Transactional Email Domain.
     * > **Important:** Updates to `name` will recreate the domain.
     */
    name?: pulumi.Input<string>;
    /**
     * `projectId`) The ID of the project the domain is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * `region`). The region in which the domain should be created.
     * > **Important:** Currently, only fr-par is supported. Specifying any other region will cause an error.
     */
    region?: pulumi.Input<string>;
}
