// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creates and manages Scaleway Transactional Email Webhooks.
 * For more information, refer to [the API documentation](https://www.scaleway.com/en/developers/api/transactional-email).
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const main = new scaleway.TemWebhook("main", {
 *     domainId: "your-domain-id",
 *     eventTypes: [
 *         "email_delivered",
 *         "email_bounced",
 *     ],
 *     snsArn: "arn:scw:sns:fr-par:project-xxxx:your-sns-topic",
 *     name: "example-webhook",
 * });
 * ```
 *
 * ### Complete Example with Dependencies
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumiverse/scaleway";
 *
 * const config = new pulumi.Config();
 * const domainName = config.require("domainName");
 * const sns = new scaleway.MnqSns("sns", {});
 * const snsCredentials = new scaleway.MnqSnsCredentials("sns_credentials", {permissions: {
 *     canManage: true,
 * }});
 * const snsTopic = new scaleway.MnqSnsTopic("sns_topic", {
 *     name: "test-mnq-sns-topic-basic",
 *     accessKey: snsCredentials.accessKey,
 *     secretKey: snsCredentials.secretKey,
 * });
 * const cr01 = new scaleway.TemDomain("cr01", {
 *     name: domainName,
 *     acceptTos: true,
 * });
 * const spf = new scaleway.DomainRecord("spf", {
 *     dnsZone: domainName,
 *     type: "TXT",
 *     data: pulumi.interpolate`v=spf1 ${cr01.spfConfig} -all`,
 * });
 * const dkim = new scaleway.DomainRecord("dkim", {
 *     dnsZone: domainName,
 *     name: pulumi.interpolate`${cr01.projectId}._domainkey`,
 *     type: "TXT",
 *     data: cr01.dkimConfig,
 * });
 * const mx = new scaleway.DomainRecord("mx", {
 *     dnsZone: domainName,
 *     type: "MX",
 *     data: ".",
 * });
 * const dmarc = new scaleway.DomainRecord("dmarc", {
 *     dnsZone: domainName,
 *     name: cr01.dmarcName,
 *     type: "TXT",
 *     data: cr01.dmarcConfig,
 * });
 * const valid = new scaleway.TemDomainValidation("valid", {
 *     domainId: cr01.id,
 *     region: cr01.region,
 *     timeout: 3600,
 * });
 * const webhook = new scaleway.TemWebhook("webhook", {
 *     name: "example-webhook",
 *     domainId: cr01.id,
 *     eventTypes: [
 *         "email_delivered",
 *         "email_bounced",
 *     ],
 *     snsArn: snsTopic.arn,
 * }, {
 *     dependsOn: [
 *         valid,
 *         snsTopic,
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Webhooks can be imported using the {region}/{id}, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:index/temWebhook:TemWebhook main fr-par/11111111-1111-1111-1111-111111111111
 * ```
 */
export class TemWebhook extends pulumi.CustomResource {
    /**
     * Get an existing TemWebhook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TemWebhookState, opts?: pulumi.CustomResourceOptions): TemWebhook {
        return new TemWebhook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/temWebhook:TemWebhook';

    /**
     * Returns true if the given object is an instance of TemWebhook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TemWebhook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TemWebhook.__pulumiType;
    }

    /**
     * The date and time of the webhook's creation (RFC 3339 format).
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The ID of the domain the webhook is associated with.
     */
    public readonly domainId!: pulumi.Output<string>;
    /**
     * A list of event types that trigger the webhook.
     */
    public readonly eventTypes!: pulumi.Output<string[]>;
    /**
     * The name of the webhook. Defaults to an autogenerated name if not provided.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the organization the webhook belongs to.
     */
    public /*out*/ readonly organizationId!: pulumi.Output<string>;
    /**
     * The ID of the project the webhook is associated with.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * . The region in which the webhook should be created.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the SNS topic.
     */
    public readonly snsArn!: pulumi.Output<string>;
    /**
     * The date and time of the webhook's last update (RFC 3339 format).
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a TemWebhook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TemWebhookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TemWebhookArgs | TemWebhookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TemWebhookState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["domainId"] = state ? state.domainId : undefined;
            resourceInputs["eventTypes"] = state ? state.eventTypes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["snsArn"] = state ? state.snsArn : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as TemWebhookArgs | undefined;
            if ((!args || args.domainId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainId'");
            }
            if ((!args || args.eventTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventTypes'");
            }
            if ((!args || args.snsArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snsArn'");
            }
            resourceInputs["domainId"] = args ? args.domainId : undefined;
            resourceInputs["eventTypes"] = args ? args.eventTypes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["snsArn"] = args ? args.snsArn : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["organizationId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TemWebhook.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TemWebhook resources.
 */
export interface TemWebhookState {
    /**
     * The date and time of the webhook's creation (RFC 3339 format).
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The ID of the domain the webhook is associated with.
     */
    domainId?: pulumi.Input<string>;
    /**
     * A list of event types that trigger the webhook.
     */
    eventTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the webhook. Defaults to an autogenerated name if not provided.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the organization the webhook belongs to.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * The ID of the project the webhook is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * . The region in which the webhook should be created.
     */
    region?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the SNS topic.
     */
    snsArn?: pulumi.Input<string>;
    /**
     * The date and time of the webhook's last update (RFC 3339 format).
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TemWebhook resource.
 */
export interface TemWebhookArgs {
    /**
     * The ID of the domain the webhook is associated with.
     */
    domainId: pulumi.Input<string>;
    /**
     * A list of event types that trigger the webhook.
     */
    eventTypes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the webhook. Defaults to an autogenerated name if not provided.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project the webhook is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * . The region in which the webhook should be created.
     */
    region?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the SNS topic.
     */
    snsArn: pulumi.Input<string>;
}
