# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

import types

__config__ = pulumi.Config('scaleway')


class _ExportableConfig(types.ModuleType):
    @property
    def access_key(self) -> Optional[str]:
        """
        The Scaleway access key.
        """
        return __config__.get('accessKey') or _utilities.get_env('SCW_ACCESS_KEY')

    @property
    def api_url(self) -> Optional[str]:
        """
        The Scaleway API URL to use.
        """
        return __config__.get('apiUrl')

    @property
    def organization_id(self) -> Optional[str]:
        """
        The Scaleway organization ID.
        """
        return __config__.get('organizationId')

    @property
    def profile(self) -> Optional[str]:
        """
        The Scaleway profile to use.
        """
        return __config__.get('profile')

    @property
    def project_id(self) -> Optional[str]:
        """
        The Scaleway project ID.
        """
        return __config__.get('projectId') or _utilities.get_env('SCW_DEFAULT_PROJECT_ID')

    @property
    def region(self) -> Optional[str]:
        """
        The region you want to attach the resource to
        """
        return __config__.get('region') or _utilities.get_env('SCW_DEFAULT_REGION')

    @property
    def secret_key(self) -> Optional[str]:
        """
        The Scaleway secret Key.
        """
        return __config__.get('secretKey') or _utilities.get_env('SCW_SECRET_KEY')

    @property
    def zone(self) -> Optional[str]:
        """
        The zone you want to attach the resource to
        """
        return __config__.get('zone') or _utilities.get_env('SCW_DEFAULT_ZONE')

