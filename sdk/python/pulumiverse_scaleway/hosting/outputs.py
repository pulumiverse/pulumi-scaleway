# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'HostingCpanelUrl',
    'HostingNameServer',
    'HostingOption',
    'HostingRecord',
    'GetHostingCpanelUrlResult',
    'GetHostingNameServerResult',
    'GetHostingOptionResult',
    'GetHostingRecordResult',
    'GetOfferOfferResult',
    'GetOfferOfferOptionResult',
    'GetOfferProductResult',
]

@pulumi.output_type
class HostingCpanelUrl(dict):
    def __init__(__self__, *,
                 dashboard: Optional[builtins.str] = None,
                 webmail: Optional[builtins.str] = None):
        """
        :param builtins.str dashboard: The URL of the Dashboard.
        :param builtins.str webmail: The URL of the Webmail interface.
        """
        if dashboard is not None:
            pulumi.set(__self__, "dashboard", dashboard)
        if webmail is not None:
            pulumi.set(__self__, "webmail", webmail)

    @property
    @pulumi.getter
    def dashboard(self) -> Optional[builtins.str]:
        """
        The URL of the Dashboard.
        """
        return pulumi.get(self, "dashboard")

    @property
    @pulumi.getter
    def webmail(self) -> Optional[builtins.str]:
        """
        The URL of the Webmail interface.
        """
        return pulumi.get(self, "webmail")


@pulumi.output_type
class HostingNameServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDefault":
            suggest = "is_default"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostingNameServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostingNameServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostingNameServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hostname: Optional[builtins.str] = None,
                 is_default: Optional[builtins.bool] = None,
                 status: Optional[builtins.str] = None):
        """
        :param builtins.str status: The hosting status.
        """
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[builtins.str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        """
        The hosting status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class HostingOption(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None):
        """
        :param builtins.str id: The option ID.
        :param builtins.str name: The option name.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The option ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The option name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class HostingRecord(dict):
    def __init__(__self__, *,
                 name: Optional[builtins.str] = None,
                 priority: Optional[builtins.int] = None,
                 status: Optional[builtins.str] = None,
                 ttl: Optional[builtins.int] = None,
                 type: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None):
        """
        :param builtins.str name: The option name.
        :param builtins.str status: The hosting status.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The option name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> Optional[builtins.int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        """
        The hosting status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[builtins.int]:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetHostingCpanelUrlResult(dict):
    def __init__(__self__, *,
                 dashboard: builtins.str,
                 webmail: builtins.str):
        pulumi.set(__self__, "dashboard", dashboard)
        pulumi.set(__self__, "webmail", webmail)

    @property
    @pulumi.getter
    def dashboard(self) -> builtins.str:
        return pulumi.get(self, "dashboard")

    @property
    @pulumi.getter
    def webmail(self) -> builtins.str:
        return pulumi.get(self, "webmail")


@pulumi.output_type
class GetHostingNameServerResult(dict):
    def __init__(__self__, *,
                 hostname: builtins.str,
                 is_default: builtins.bool,
                 status: builtins.str):
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def hostname(self) -> builtins.str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> builtins.bool:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetHostingOptionResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 name: builtins.str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetHostingRecordResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 priority: builtins.int,
                 status: builtins.str,
                 ttl: builtins.int,
                 type: builtins.str,
                 value: builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "ttl", ttl)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> builtins.int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def ttl(self) -> builtins.int:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetOfferOfferResult(dict):
    def __init__(__self__, *,
                 available: builtins.bool,
                 billing_operation_path: builtins.str,
                 control_panel_name: builtins.str,
                 end_of_life: builtins.bool,
                 id: builtins.str,
                 name: builtins.str,
                 options: Sequence['outputs.GetOfferOfferOptionResult'],
                 price: builtins.str,
                 quota_warning: builtins.str):
        """
        :param builtins.bool available: Indicates if the offer is available.
        :param builtins.str billing_operation_path: The billing operation identifier for the option.
        :param builtins.str control_panel_name: The name of the control panel (e.g., Cpanel or Plesk).
        :param builtins.bool end_of_life: Indicates if the offer is deprecated or no longer supported.
        :param builtins.str id: The unique identifier of the option.
        :param builtins.str name: The offer name. Only one of `name` and `offer_id` should be specified.
        :param Sequence['GetOfferOfferOptionArgs'] options: A list of available options for the offer:
        :param builtins.str price: The offer price.
        :param builtins.str quota_warning: Warning information regarding quota limitations for the option.
        """
        pulumi.set(__self__, "available", available)
        pulumi.set(__self__, "billing_operation_path", billing_operation_path)
        pulumi.set(__self__, "control_panel_name", control_panel_name)
        pulumi.set(__self__, "end_of_life", end_of_life)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "options", options)
        pulumi.set(__self__, "price", price)
        pulumi.set(__self__, "quota_warning", quota_warning)

    @property
    @pulumi.getter
    def available(self) -> builtins.bool:
        """
        Indicates if the offer is available.
        """
        return pulumi.get(self, "available")

    @property
    @pulumi.getter(name="billingOperationPath")
    def billing_operation_path(self) -> builtins.str:
        """
        The billing operation identifier for the option.
        """
        return pulumi.get(self, "billing_operation_path")

    @property
    @pulumi.getter(name="controlPanelName")
    def control_panel_name(self) -> builtins.str:
        """
        The name of the control panel (e.g., Cpanel or Plesk).
        """
        return pulumi.get(self, "control_panel_name")

    @property
    @pulumi.getter(name="endOfLife")
    def end_of_life(self) -> builtins.bool:
        """
        Indicates if the offer is deprecated or no longer supported.
        """
        return pulumi.get(self, "end_of_life")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The unique identifier of the option.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The offer name. Only one of `name` and `offer_id` should be specified.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def options(self) -> Sequence['outputs.GetOfferOfferOptionResult']:
        """
        A list of available options for the offer:
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def price(self) -> builtins.str:
        """
        The offer price.
        """
        return pulumi.get(self, "price")

    @property
    @pulumi.getter(name="quotaWarning")
    def quota_warning(self) -> builtins.str:
        """
        Warning information regarding quota limitations for the option.
        """
        return pulumi.get(self, "quota_warning")


@pulumi.output_type
class GetOfferOfferOptionResult(dict):
    def __init__(__self__, *,
                 billing_operation_path: builtins.str,
                 current_value: builtins.int,
                 id: builtins.str,
                 max_value: builtins.int,
                 min_value: builtins.int,
                 name: builtins.str,
                 price: builtins.str,
                 quota_warning: builtins.str):
        """
        :param builtins.str billing_operation_path: The billing operation identifier for the option.
        :param builtins.int current_value: The current value set for the option.
        :param builtins.str id: The unique identifier of the option.
        :param builtins.int max_value: The maximum allowed value for the option.
        :param builtins.int min_value: The minimum value for the option.
        :param builtins.str name: The offer name. Only one of `name` and `offer_id` should be specified.
        :param builtins.str price: The offer price.
        :param builtins.str quota_warning: Warning information regarding quota limitations for the option.
        """
        pulumi.set(__self__, "billing_operation_path", billing_operation_path)
        pulumi.set(__self__, "current_value", current_value)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_value", max_value)
        pulumi.set(__self__, "min_value", min_value)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "price", price)
        pulumi.set(__self__, "quota_warning", quota_warning)

    @property
    @pulumi.getter(name="billingOperationPath")
    def billing_operation_path(self) -> builtins.str:
        """
        The billing operation identifier for the option.
        """
        return pulumi.get(self, "billing_operation_path")

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> builtins.int:
        """
        The current value set for the option.
        """
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The unique identifier of the option.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> builtins.int:
        """
        The maximum allowed value for the option.
        """
        return pulumi.get(self, "max_value")

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> builtins.int:
        """
        The minimum value for the option.
        """
        return pulumi.get(self, "min_value")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The offer name. Only one of `name` and `offer_id` should be specified.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def price(self) -> builtins.str:
        """
        The offer price.
        """
        return pulumi.get(self, "price")

    @property
    @pulumi.getter(name="quotaWarning")
    def quota_warning(self) -> builtins.str:
        """
        Warning information regarding quota limitations for the option.
        """
        return pulumi.get(self, "quota_warning")


@pulumi.output_type
class GetOfferProductResult(dict):
    def __init__(__self__, *,
                 databases_quota: builtins.int,
                 email_accounts_quota: builtins.int,
                 email_storage_quota: builtins.int,
                 hosting_storage_quota: builtins.int,
                 name: builtins.str,
                 option: builtins.bool,
                 ram: builtins.int,
                 support_included: builtins.bool,
                 v_cpu: builtins.int):
        """
        :param builtins.int databases_quota: The quota of databases.
        :param builtins.int email_accounts_quota: The quota of email accounts.
        :param builtins.int email_storage_quota: The quota of email storage.
        :param builtins.int hosting_storage_quota: The quota of hosting storage.
        :param builtins.str name: The offer name. Only one of `name` and `offer_id` should be specified.
        :param builtins.bool option: The product option.
        :param builtins.int ram: The capacity of the memory in GB.
        :param builtins.bool support_included: If support is included.
        :param builtins.int v_cpu: The number of cores.
        """
        pulumi.set(__self__, "databases_quota", databases_quota)
        pulumi.set(__self__, "email_accounts_quota", email_accounts_quota)
        pulumi.set(__self__, "email_storage_quota", email_storage_quota)
        pulumi.set(__self__, "hosting_storage_quota", hosting_storage_quota)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "option", option)
        pulumi.set(__self__, "ram", ram)
        pulumi.set(__self__, "support_included", support_included)
        pulumi.set(__self__, "v_cpu", v_cpu)

    @property
    @pulumi.getter(name="databasesQuota")
    def databases_quota(self) -> builtins.int:
        """
        The quota of databases.
        """
        return pulumi.get(self, "databases_quota")

    @property
    @pulumi.getter(name="emailAccountsQuota")
    def email_accounts_quota(self) -> builtins.int:
        """
        The quota of email accounts.
        """
        return pulumi.get(self, "email_accounts_quota")

    @property
    @pulumi.getter(name="emailStorageQuota")
    def email_storage_quota(self) -> builtins.int:
        """
        The quota of email storage.
        """
        return pulumi.get(self, "email_storage_quota")

    @property
    @pulumi.getter(name="hostingStorageQuota")
    def hosting_storage_quota(self) -> builtins.int:
        """
        The quota of hosting storage.
        """
        return pulumi.get(self, "hosting_storage_quota")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The offer name. Only one of `name` and `offer_id` should be specified.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def option(self) -> builtins.bool:
        """
        The product option.
        """
        return pulumi.get(self, "option")

    @property
    @pulumi.getter
    def ram(self) -> builtins.int:
        """
        The capacity of the memory in GB.
        """
        return pulumi.get(self, "ram")

    @property
    @pulumi.getter(name="supportIncluded")
    def support_included(self) -> builtins.bool:
        """
        If support is included.
        """
        return pulumi.get(self, "support_included")

    @property
    @pulumi.getter(name="vCpu")
    def v_cpu(self) -> builtins.int:
        """
        The number of cores.
        """
        return pulumi.get(self, "v_cpu")


