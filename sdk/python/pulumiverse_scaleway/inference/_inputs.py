# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'DeploymentPrivateEndpointArgs',
    'DeploymentPrivateEndpointArgsDict',
    'DeploymentPublicEndpointArgs',
    'DeploymentPublicEndpointArgsDict',
]

MYPY = False

if not MYPY:
    class DeploymentPrivateEndpointArgsDict(TypedDict):
        disable_auth: NotRequired[pulumi.Input[bool]]
        """
        Disable the authentication on the endpoint.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        (Optional) The id of the public endpoint.
        """
        private_network_id: NotRequired[pulumi.Input[str]]
        """
        The ID of the private network to use.
        """
        url: NotRequired[pulumi.Input[str]]
        """
        (Optional) The URL of the endpoint.
        """
elif False:
    DeploymentPrivateEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentPrivateEndpointArgs:
    def __init__(__self__, *,
                 disable_auth: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 private_network_id: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] disable_auth: Disable the authentication on the endpoint.
        :param pulumi.Input[str] id: (Optional) The id of the public endpoint.
        :param pulumi.Input[str] private_network_id: The ID of the private network to use.
        :param pulumi.Input[str] url: (Optional) The URL of the endpoint.
        """
        if disable_auth is not None:
            pulumi.set(__self__, "disable_auth", disable_auth)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if private_network_id is not None:
            pulumi.set(__self__, "private_network_id", private_network_id)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="disableAuth")
    def disable_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable the authentication on the endpoint.
        """
        return pulumi.get(self, "disable_auth")

    @disable_auth.setter
    def disable_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_auth", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) The id of the public endpoint.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="privateNetworkId")
    def private_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the private network to use.
        """
        return pulumi.get(self, "private_network_id")

    @private_network_id.setter
    def private_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_network_id", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) The URL of the endpoint.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


if not MYPY:
    class DeploymentPublicEndpointArgsDict(TypedDict):
        disable_auth: NotRequired[pulumi.Input[bool]]
        """
        Disable the authentication on the endpoint.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        (Optional) The id of the public endpoint.
        """
        is_enabled: NotRequired[pulumi.Input[bool]]
        """
        Enable or disable public endpoint.
        """
        url: NotRequired[pulumi.Input[str]]
        """
        (Optional) The URL of the endpoint.
        """
elif False:
    DeploymentPublicEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentPublicEndpointArgs:
    def __init__(__self__, *,
                 disable_auth: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] disable_auth: Disable the authentication on the endpoint.
        :param pulumi.Input[str] id: (Optional) The id of the public endpoint.
        :param pulumi.Input[bool] is_enabled: Enable or disable public endpoint.
        :param pulumi.Input[str] url: (Optional) The URL of the endpoint.
        """
        if disable_auth is not None:
            pulumi.set(__self__, "disable_auth", disable_auth)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="disableAuth")
    def disable_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable the authentication on the endpoint.
        """
        return pulumi.get(self, "disable_auth")

    @disable_auth.setter
    def disable_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_auth", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) The id of the public endpoint.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable or disable public endpoint.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) The URL of the endpoint.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


