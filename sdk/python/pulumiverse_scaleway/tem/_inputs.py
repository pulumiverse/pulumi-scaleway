# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'DomainReputationArgs',
    'DomainReputationArgsDict',
]

MYPY = False

if not MYPY:
    class DomainReputationArgsDict(TypedDict):
        previous_score: NotRequired[pulumi.Input[int]]
        """
        The previously-calculated domain's reputation score.
        """
        previous_scored_at: NotRequired[pulumi.Input[str]]
        """
        The time and date the previous reputation score was calculated.
        """
        score: NotRequired[pulumi.Input[int]]
        """
        A range from 0 to 100 that determines your domain's reputation score.
        """
        scored_at: NotRequired[pulumi.Input[str]]
        """
        The time and date the score was calculated.
        """
        status: NotRequired[pulumi.Input[str]]
        """
        The status of the domain's reputation.
        """
elif False:
    DomainReputationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DomainReputationArgs:
    def __init__(__self__, *,
                 previous_score: Optional[pulumi.Input[int]] = None,
                 previous_scored_at: Optional[pulumi.Input[str]] = None,
                 score: Optional[pulumi.Input[int]] = None,
                 scored_at: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] previous_score: The previously-calculated domain's reputation score.
        :param pulumi.Input[str] previous_scored_at: The time and date the previous reputation score was calculated.
        :param pulumi.Input[int] score: A range from 0 to 100 that determines your domain's reputation score.
        :param pulumi.Input[str] scored_at: The time and date the score was calculated.
        :param pulumi.Input[str] status: The status of the domain's reputation.
        """
        if previous_score is not None:
            pulumi.set(__self__, "previous_score", previous_score)
        if previous_scored_at is not None:
            pulumi.set(__self__, "previous_scored_at", previous_scored_at)
        if score is not None:
            pulumi.set(__self__, "score", score)
        if scored_at is not None:
            pulumi.set(__self__, "scored_at", scored_at)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="previousScore")
    def previous_score(self) -> Optional[pulumi.Input[int]]:
        """
        The previously-calculated domain's reputation score.
        """
        return pulumi.get(self, "previous_score")

    @previous_score.setter
    def previous_score(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "previous_score", value)

    @property
    @pulumi.getter(name="previousScoredAt")
    def previous_scored_at(self) -> Optional[pulumi.Input[str]]:
        """
        The time and date the previous reputation score was calculated.
        """
        return pulumi.get(self, "previous_scored_at")

    @previous_scored_at.setter
    def previous_scored_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "previous_scored_at", value)

    @property
    @pulumi.getter
    def score(self) -> Optional[pulumi.Input[int]]:
        """
        A range from 0 to 100 that determines your domain's reputation score.
        """
        return pulumi.get(self, "score")

    @score.setter
    def score(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "score", value)

    @property
    @pulumi.getter(name="scoredAt")
    def scored_at(self) -> Optional[pulumi.Input[str]]:
        """
        The time and date the score was calculated.
        """
        return pulumi.get(self, "scored_at")

    @scored_at.setter
    def scored_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scored_at", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the domain's reputation.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


