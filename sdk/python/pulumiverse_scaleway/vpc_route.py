# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['VpcRouteArgs', 'VpcRoute']

@pulumi.input_type
class VpcRouteArgs:
    def __init__(__self__, *,
                 vpc_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 nexthop_private_network_id: Optional[pulumi.Input[str]] = None,
                 nexthop_resource_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a VpcRoute resource.
        :param pulumi.Input[str] vpc_id: The VPC ID the route belongs to.
        :param pulumi.Input[str] description: The route description.
        :param pulumi.Input[str] destination: The destination of the route.
        :param pulumi.Input[str] nexthop_private_network_id: The ID of the nexthop private network.
        :param pulumi.Input[str] nexthop_resource_id: The ID of the nexthop resource.
        :param pulumi.Input[str] region: `region`) The region of the route.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: The tags to associate with the route.
        """
        pulumi.set(__self__, "vpc_id", vpc_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if nexthop_private_network_id is not None:
            pulumi.set(__self__, "nexthop_private_network_id", nexthop_private_network_id)
        if nexthop_resource_id is not None:
            pulumi.set(__self__, "nexthop_resource_id", nexthop_resource_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        The VPC ID the route belongs to.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The route description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input[str]]:
        """
        The destination of the route.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter(name="nexthopPrivateNetworkId")
    def nexthop_private_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the nexthop private network.
        """
        return pulumi.get(self, "nexthop_private_network_id")

    @nexthop_private_network_id.setter
    def nexthop_private_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nexthop_private_network_id", value)

    @property
    @pulumi.getter(name="nexthopResourceId")
    def nexthop_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the nexthop resource.
        """
        return pulumi.get(self, "nexthop_resource_id")

    @nexthop_resource_id.setter
    def nexthop_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nexthop_resource_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        `region`) The region of the route.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The tags to associate with the route.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _VpcRouteState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 nexthop_private_network_id: Optional[pulumi.Input[str]] = None,
                 nexthop_resource_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VpcRoute resources.
        :param pulumi.Input[str] created_at: The date and time of the creation of the route (RFC 3339 format).
        :param pulumi.Input[str] description: The route description.
        :param pulumi.Input[str] destination: The destination of the route.
        :param pulumi.Input[str] nexthop_private_network_id: The ID of the nexthop private network.
        :param pulumi.Input[str] nexthop_resource_id: The ID of the nexthop resource.
        :param pulumi.Input[str] region: `region`) The region of the route.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: The tags to associate with the route.
        :param pulumi.Input[str] updated_at: The date and time of the creation of the route (RFC 3339 format).
        :param pulumi.Input[str] vpc_id: The VPC ID the route belongs to.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if nexthop_private_network_id is not None:
            pulumi.set(__self__, "nexthop_private_network_id", nexthop_private_network_id)
        if nexthop_resource_id is not None:
            pulumi.set(__self__, "nexthop_resource_id", nexthop_resource_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time of the creation of the route (RFC 3339 format).
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The route description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input[str]]:
        """
        The destination of the route.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter(name="nexthopPrivateNetworkId")
    def nexthop_private_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the nexthop private network.
        """
        return pulumi.get(self, "nexthop_private_network_id")

    @nexthop_private_network_id.setter
    def nexthop_private_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nexthop_private_network_id", value)

    @property
    @pulumi.getter(name="nexthopResourceId")
    def nexthop_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the nexthop resource.
        """
        return pulumi.get(self, "nexthop_resource_id")

    @nexthop_resource_id.setter
    def nexthop_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nexthop_resource_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        `region`) The region of the route.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The tags to associate with the route.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time of the creation of the route (RFC 3339 format).
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The VPC ID the route belongs to.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class VpcRoute(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 nexthop_private_network_id: Optional[pulumi.Input[str]] = None,
                 nexthop_resource_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates and manages Scaleway VPC Routes.
        For more information, see [the main documentation](https://www.scaleway.com/en/docs/network/vpc/concepts/).

        ## Example Usage

        ### Basic

        ```python
        import pulumi
        import pulumiverse_scaleway as scaleway

        vpc01 = scaleway.Vpc("vpc01", name="tf-vpc-vpn")
        pn01 = scaleway.VpcPrivateNetwork("pn01",
            name="tf-pn-vpn",
            ipv4_subnet={
                "subnet": "172.16.64.0/22",
            },
            vpc_id=vpc01.id)
        server01 = scaleway.InstanceServer("server01",
            name="tf-server-vpn",
            type="PLAY2-MICRO",
            image="openvpn")
        pnic01 = scaleway.InstancePrivateNic("pnic01",
            private_network_id=pn01.id,
            server_id=server01.id)
        rt01 = scaleway.VpcRoute("rt01",
            vpc_id=vpc01.id,
            description="tf-route-vpn",
            tags=[
                "tf",
                "route",
            ],
            destination="10.0.0.0/24",
            nexthop_resource_id=pnic01.id)
        ```

        ## Import

        Routes can be imported using `{region}/{id}`, e.g.

        bash

        ```sh
        $ pulumi import scaleway:index/vpcRoute:VpcRoute main fr-par/11111111-1111-1111-1111-111111111111
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The route description.
        :param pulumi.Input[str] destination: The destination of the route.
        :param pulumi.Input[str] nexthop_private_network_id: The ID of the nexthop private network.
        :param pulumi.Input[str] nexthop_resource_id: The ID of the nexthop resource.
        :param pulumi.Input[str] region: `region`) The region of the route.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: The tags to associate with the route.
        :param pulumi.Input[str] vpc_id: The VPC ID the route belongs to.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VpcRouteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates and manages Scaleway VPC Routes.
        For more information, see [the main documentation](https://www.scaleway.com/en/docs/network/vpc/concepts/).

        ## Example Usage

        ### Basic

        ```python
        import pulumi
        import pulumiverse_scaleway as scaleway

        vpc01 = scaleway.Vpc("vpc01", name="tf-vpc-vpn")
        pn01 = scaleway.VpcPrivateNetwork("pn01",
            name="tf-pn-vpn",
            ipv4_subnet={
                "subnet": "172.16.64.0/22",
            },
            vpc_id=vpc01.id)
        server01 = scaleway.InstanceServer("server01",
            name="tf-server-vpn",
            type="PLAY2-MICRO",
            image="openvpn")
        pnic01 = scaleway.InstancePrivateNic("pnic01",
            private_network_id=pn01.id,
            server_id=server01.id)
        rt01 = scaleway.VpcRoute("rt01",
            vpc_id=vpc01.id,
            description="tf-route-vpn",
            tags=[
                "tf",
                "route",
            ],
            destination="10.0.0.0/24",
            nexthop_resource_id=pnic01.id)
        ```

        ## Import

        Routes can be imported using `{region}/{id}`, e.g.

        bash

        ```sh
        $ pulumi import scaleway:index/vpcRoute:VpcRoute main fr-par/11111111-1111-1111-1111-111111111111
        ```

        :param str resource_name: The name of the resource.
        :param VpcRouteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpcRouteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 nexthop_private_network_id: Optional[pulumi.Input[str]] = None,
                 nexthop_resource_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpcRouteArgs.__new__(VpcRouteArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["destination"] = destination
            __props__.__dict__["nexthop_private_network_id"] = nexthop_private_network_id
            __props__.__dict__["nexthop_resource_id"] = nexthop_resource_id
            __props__.__dict__["region"] = region
            __props__.__dict__["tags"] = tags
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(VpcRoute, __self__).__init__(
            'scaleway:index/vpcRoute:VpcRoute',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            destination: Optional[pulumi.Input[str]] = None,
            nexthop_private_network_id: Optional[pulumi.Input[str]] = None,
            nexthop_resource_id: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'VpcRoute':
        """
        Get an existing VpcRoute resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] created_at: The date and time of the creation of the route (RFC 3339 format).
        :param pulumi.Input[str] description: The route description.
        :param pulumi.Input[str] destination: The destination of the route.
        :param pulumi.Input[str] nexthop_private_network_id: The ID of the nexthop private network.
        :param pulumi.Input[str] nexthop_resource_id: The ID of the nexthop resource.
        :param pulumi.Input[str] region: `region`) The region of the route.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: The tags to associate with the route.
        :param pulumi.Input[str] updated_at: The date and time of the creation of the route (RFC 3339 format).
        :param pulumi.Input[str] vpc_id: The VPC ID the route belongs to.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VpcRouteState.__new__(_VpcRouteState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["destination"] = destination
        __props__.__dict__["nexthop_private_network_id"] = nexthop_private_network_id
        __props__.__dict__["nexthop_resource_id"] = nexthop_resource_id
        __props__.__dict__["region"] = region
        __props__.__dict__["tags"] = tags
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["vpc_id"] = vpc_id
        return VpcRoute(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The date and time of the creation of the route (RFC 3339 format).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The route description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Output[Optional[str]]:
        """
        The destination of the route.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="nexthopPrivateNetworkId")
    def nexthop_private_network_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the nexthop private network.
        """
        return pulumi.get(self, "nexthop_private_network_id")

    @property
    @pulumi.getter(name="nexthopResourceId")
    def nexthop_resource_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the nexthop resource.
        """
        return pulumi.get(self, "nexthop_resource_id")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        `region`) The region of the route.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The tags to associate with the route.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        The date and time of the creation of the route (RFC 3339 format).
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        The VPC ID the route belongs to.
        """
        return pulumi.get(self, "vpc_id")

